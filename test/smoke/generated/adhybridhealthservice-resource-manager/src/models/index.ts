/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The list of services for a given onboarded tenant.
 */
export interface Services {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The value returned by the operation.
   */
  value?: ServiceProperties[];
  /**
   * The total count of service elements.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The service properties for a given service.
 */
export interface ServiceProperties {
  /**
   * The id of the service.
   */
  id?: string;
  /**
   * The count of alerts that are currently active for the service.
   */
  activeAlerts?: number;
  /**
   * The additional information related to the service.
   */
  additionalInformation?: string;
  /**
   * The date and time, in UTC, when the service was onboarded to Azure Active Directory Connect Health.
   */
  createdDate?: Date;
  /**
   * The list of additional emails that are configured to receive notifications about the service.
   */
  customNotificationEmails?: string[];
  /**
   * Indicates if the service is disabled or not.
   */
  disabled?: boolean;
  /**
   * The display name of the service.
   */
  displayName?: string;
  /**
   * The health of the service.
   */
  health?: string;
  /**
   * The date and time, in UTC, when the service was last disabled.
   */
  lastDisabled?: Date;
  /**
   * The date or time , in UTC, when the service properties were last updated.
   */
  lastUpdated?: Date;
  /**
   * The monitoring configuration of the service which determines what activities are monitored by Azure Active Directory Connect Health.
   */
  monitoringConfigurationsComputed?: any;
  /**
   * The customized monitoring configuration of the service which determines what activities are monitored by Azure Active Directory Connect Health.
   */
  monitoringConfigurationsCustomized?: any;
  /**
   * Indicates if email notification is enabled or not.
   */
  notificationEmailEnabled?: boolean;
  /**
   * Indicates if email notification is enabled for global administrators of the tenant.
   */
  notificationEmailEnabledForGlobalAdmins?: boolean;
  /**
   * Indicates if email notification is enabled for global administrators of the tenant.
   */
  notificationEmailsEnabledForGlobalAdmins?: boolean;
  /**
   * The list of emails to whom service notifications will be sent.
   */
  notificationEmails?: string[];
  /**
   * Gets the original disable state.
   */
  originalDisabledState?: boolean;
  /**
   * The total count of alerts that has been resolved for the service.
   */
  resolvedAlerts?: number;
  /**
   * The id of the service.
   */
  serviceId?: string;
  /**
   * The name of the service.
   */
  serviceName?: string;
  /**
   * The signature of the service.
   */
  signature?: string;
  /**
   * List of service specific configuration properties.
   */
  simpleProperties?: any;
  /**
   * The id of the tenant to which the service is registered to.
   */
  tenantId?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  type?: string;
}

/**
 * The list of alerts for a service.
 */
export interface Alerts {
  /**
   * The value returned by the operation.
   */
  value?: Alert[];
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The total count of alert elements.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 *  The alert details indicating an issue with service or server.
 */
export interface Alert {
  /**
   * The alert Id.
   */
  alertId?: string;
  /**
   * The alert level which indicates the severity of the alert.
   */
  level?: Level;
  /**
   * The alert state which can be either active or resolved with multiple resolution types.
   */
  state?: State;
  /**
   * The alert short name.
   */
  shortName?: string;
  /**
   * The display name for the alert.
   */
  displayName?: string;
  /**
   * The alert description.
   */
  description?: string;
  /**
   * The alert remediation.
   */
  remediation?: string;
  /**
   * The help links to get more information related to the alert.
   */
  relatedLinks?: HelpLink[];
  /**
   * The scope of the alert. Indicates if it is a service or a server related alert.
   */
  scope?: string;
  /**
   * Additional information related to the alert.
   */
  additionalInformation?: AdditionalInformation[];
  /**
   * The date and time,in UTC,when the alert was created.
   */
  createdDate?: Date;
  /**
   * The date and time, in UTC, when the alert was resolved.
   */
  resolvedDate?: Date;
  /**
   * The date and time, in UTC, when the alert was last updated.
   */
  lastUpdated?: Date;
  /**
   * The monitoring role type for which the alert was raised.
   */
  monitorRoleType?: string;
  /**
   * The active alert properties.
   */
  activeAlertProperties?: Item[];
  /**
   * The resolved alert properties.
   */
  resolvedAlertProperties?: Item[];
  /**
   * The tenant Id.
   */
  tenantId?: string;
  /**
   * The service Id.
   */
  serviceId?: string;
  /**
   * The server Id.
   */
  serviceMemberId?: string;
}

/**
 * The help link which contains more information related to an alert.
 */
export interface HelpLink {
  /**
   * The title for the link.
   */
  title?: string;
  /**
   * The url for the help document.
   */
  url?: string;
}

/**
 * The additional information for a property.
 */
export interface AdditionalInformation {
  /**
   * The title name for the property.
   */
  titleName?: string;
  /**
   * The title value for the property.
   */
  titleValue?: string;
  /**
   * The list of properties which are included in the additional information.
   */
  properties?: any;
  /**
   * Indicates if properties are present or not.
   */
  hasProperties?: boolean;
}

/**
 * The key value pair for properties.
 */
export interface Item {
  /**
   * The key for the property.
   */
  key?: string;
  /**
   * The value for the key.
   */
  value?: string;
}

/**
 * The list of key value properties.
 */
export interface AddsConfiguration {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The value returned by the operation.
   */
  value?: Item[];
  /**
   * The total count of configuration.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The list of dimensions.
 */
export interface Dimensions {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The value returned by the operation.
   */
  value?: Dimension[];
  /**
   * The total count of dimensions.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The connector object error.
 */
export interface Dimension {
  /**
   * The health status for the domain controller.
   */
  health?: HealthStatus;
  /**
   * List of service specific configuration properties.
   */
  simpleProperties?: any;
  /**
   * The count of alerts that are currently active for the service.
   */
  activeAlerts?: number;
  /**
   * The additional information related to the service.
   */
  additionalInformation?: string;
  /**
   * The date or time , in UTC, when the service properties were last updated.
   */
  lastUpdated?: Date;
  /**
   * The display name of the service.
   */
  displayName?: string;
  /**
   * The total count of alerts that has been resolved for the service.
   */
  resolvedAlerts?: number;
  /**
   * The signature of the service.
   */
  signature?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  type?: string;
}

/**
 * The list of  ADDS service members.
 */
export interface AddsServiceMembers {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The value returned by the operation.
   */
  value?: AddsServiceMember[];
  /**
   * The total count of service members.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The server details for ADDS service.
 */
export interface AddsServiceMember {
  /**
   * The domain name.
   */
  domainName?: string;
  /**
   * The site name.
   */
  siteName?: string;
  /**
   * The list of ADDS roles.
   */
  addsRoles?: string[];
  /**
   * Indicates if the global catalog for this domain is reachable or not.
   */
  gcReachable?: boolean;
  /**
   * Indicates if the Dc is advertising or not.
   */
  isAdvertising?: boolean;
  /**
   * Indicates if the primary domain controller is reachable or not.
   */
  pdcReachable?: boolean;
  /**
   * Indicates if the SYSVOL state is healthy or not.
   */
  sysvolState?: boolean;
  /**
   * The list of domain controller types.
   */
  dcTypes?: string[];
  /**
   * The id of the server.
   */
  serviceMemberId?: string;
  /**
   * The service id to whom this server belongs.
   */
  serviceId?: string;
  /**
   * The tenant id to whom this server belongs.
   */
  tenantId?: string;
  /**
   * The total number of alerts that are currently active for the server.
   */
  activeAlerts?: number;
  /**
   * The additional information, if any, for the server.
   */
  additionalInformation?: string;
  /**
   * The date time , in UTC, when the server was onboarded to Azure Active Directory Connect Health.
   */
  createdDate?: Date;
  /**
   * The server specific configuration related dimensions.
   */
  dimensions?: Item[];
  /**
   * Indicates if the server is disabled or not.
   */
  disabled?: boolean;
  /**
   * The reason for disabling the server.
   */
  disabledReason?: number;
  /**
   * The list of installed QFEs for the server.
   */
  installedQfes?: Hotfix[];
  /**
   * The date and time , in UTC, when the server was last disabled.
   */
  lastDisabled?: Date;
  /**
   * The date and time, in UTC, when the server was last rebooted.
   */
  lastReboot?: Date;
  /**
   * The date and time, in UTC, when the server's data monitoring configuration was last changed.
   */
  lastServerReportedMonitoringLevelChange?: Date;
  /**
   * The date and time, in UTC, when the server properties were last updated.
   */
  lastUpdated?: Date;
  /**
   * The id of the machine.
   */
  machineId?: string;
  /**
   * The name of the server.
   */
  machineName?: string;
  /**
   * The monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
   */
  monitoringConfigurationsComputed?: Item[];
  /**
   * The customized monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
   */
  monitoringConfigurationsCustomized?: Item[];
  /**
   * The name of the operating system installed in the machine.
   */
  osName?: string;
  /**
   * The version of the operating system installed in the machine.
   */
  osVersion?: string;
  /**
   * Server specific properties.
   */
  properties?: Item[];
  /**
   * The list of recommended hotfixes for the server.
   */
  recommendedQfes?: Hotfix[];
  /**
   * The total count of alerts that are resolved for this server.
   */
  resolvedAlerts?: number;
  /**
   * The service role that is being monitored in the server.
   */
  role?: string;
  /**
   * The monitoring level reported by the server.
   */
  serverReportedMonitoringLevel?: MonitoringLevel;
  /**
   * The health status of the server.
   */
  status?: string;
}

/**
 * The details of the hotfix installed in the server.
 */
export interface Hotfix {
  /**
   * The name of the hotfix KB.
   */
  kbName?: string;
  /**
   * The link to the KB Article.
   */
  link?: string;
  /**
   * The date and time, in UTC, when the KB was installed in the server.
   */
  installedDate?: Date;
}

/**
 *  The user preference for a given feature.
 */
export interface UserPreference {
  /**
   * The name of the metric.
   */
  metricNames?: string[];
}

/**
 * The forest summary for an ADDS domain.
 */
export interface ForestSummary {
  /**
   * The forest name.
   */
  forestName?: string;
  /**
   * The domain count.
   */
  domainCount?: number;
  /**
   * The site count.
   */
  siteCount?: number;
  /**
   * The number of domain controllers that are monitored by Azure Active Directory Connect Health.
   */
  monitoredDcCount?: number;
  /**
   * The total domain controllers.
   */
  totalDcCount?: number;
  /**
   * The list of domain controller names.
   */
  domains?: string[];
  /**
   * The list of site names.
   */
  sites?: string[];
}

/**
 * The metrics data represented set.
 */
export interface MetricSets {
  /**
   * The list of metric set.
   */
  sets?: MetricSet[];
  /**
   * The list of timestamps for each metric in the metric set.
   */
  timeStamps?: Date[];
}

/**
 *  The set of metric values. Example of a MetricSet are Values of token requests for a Server1 or RelyingParty1.
 */
export interface MetricSet {
  /**
   * The name of the set.
   */
  setName?: string;
  /**
   * The list of the metric values.
   */
  values?: number[];
}

/**
 * The list of metric items.
 */
export interface Metrics {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The value returned by the operation.
   */
  value?: Item[];
  /**
   * The total count of metrics.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The list of metric metadata.
 */
export interface MetricMetadataList {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The value returned by the operation.
   */
  value?: MetricMetadata[];
  /**
   * The total count of service elements.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The metric meta data
 */
export interface MetricMetadata {
  /**
   * The name of the class which retrieve and process the metric.
   */
  metricsProcessorClassName?: string;
  /**
   * The metric name
   */
  metricName?: string;
  /**
   * The groupings for the metrics.
   */
  groupings?: MetricGroup[];
  /**
   * The display name for the metric.
   */
  displayName?: string;
  /**
   * Indicates if the metrics is a rate,value, percent or duration type.
   */
  valueKind?: string;
  /**
   * The minimum value.
   */
  minValue?: number;
  /**
   * The maximum value.
   */
  maxValue?: number;
  /**
   * Indicates whether the dashboard to represent the metric is a line, bar,pie, area or donut chart.
   */
  kind?: string;
  /**
   * Indicates if the metric is a default metric or not.
   */
  isDefault?: boolean;
  /**
   * Indicates if the metric is a performance counter metric or not.
   */
  isPerfCounter?: boolean;
  /**
   * Indicates if the metric is visible to DevOps or not.
   */
  isDevOps?: boolean;
}

/**
 *  The metric group details.
 */
export interface MetricGroup {
  /**
   * The key for the group.
   */
  key?: string;
  /**
   * The display name for the group.
   */
  displayName?: string;
  /**
   * indicates if the metric group is displayed in Azure Active Directory Connect Health UI.
   */
  invisibleForUi?: boolean;
}

/**
 * The list of replication details.
 */
export interface ReplicationDetailsList {
  /**
   * The value returned by the operation.
   */
  value?: ReplicationSummary[];
  /**
   * The total count of replication detail elements.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
}

/**
 * The replication summary for a domain controller.
 */
export interface ReplicationSummary {
  /**
   * The domain controller name.
   */
  targetServer?: string;
  /**
   * The site name for a given domain controller.
   */
  site?: string;
  /**
   * The domain name for a given domain controller.
   */
  domain?: string;
  /**
   * The health status for a domain controller.
   */
  status?: number;
  /**
   * The last time when a sync was attempted for a given domain controller.
   */
  lastAttemptedSync?: Date;
  /**
   * The time when the last successful sync happened for a given domain controller.
   */
  lastSuccessfulSync?: Date;
  /**
   * List of individual domain controller neighbor's inbound replication status.
   */
  inboundNeighborCollection?: InboundReplicationNeighbor[];
}

/**
 * The replication summary for the domain controller inbound neighbor.
 */
export interface InboundReplicationNeighbor {
  /**
   * The name of the source domain controller.
   */
  sourceDomainController?: string;
  /**
   * The number of consecutive failure counts.
   */
  consecutiveFailureCount?: number;
  /**
   * The naming context.
   */
  namingContext?: string;
  /**
   * The health status for the domain controller
   */
  status?: number;
  /**
   * The last time a sync was attempted on the domain controller.
   */
  lastAttemptedSync?: Date;
  /**
   * The last time when a successful sync happened.
   */
  lastSuccessfulSync?: Date;
  /**
   * The last error code.
   */
  lastErrorCode?: number;
  /**
   * The error message of the last error.
   */
  lastErrorMessage?: string;
  /**
   * The error title.
   */
  errorTitle?: string;
  /**
   * The error description.
   */
  errorDescription?: string;
  /**
   * The link for the fix of the error.
   */
  fixLink?: string;
  /**
   * The details of the fix.
   */
  fixDetails?: string;
  /**
   * The additional details.
   */
  additionalInfo?: string;
}

/**
 *  Replication summary for a domain controller.
 */
export interface ReplicationStatus {
  /**
   * The forest name.
   */
  forestName?: string;
  /**
   * The total number of domain controllers for a given forest.
   */
  totalDcCount?: number;
  /**
   * The total number of domain controllers with error in a given forest.
   */
  errorDcCount?: number;
}

/**
 * The list of replication summary details.
 */
export interface ReplicationSummaryList {
  /**
   * The value returned by the operation.
   */
  value?: ReplicationSummary[];
}

/**
 * The list of servers that are onboarded for a given service.
 */
export interface ServiceMembers {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The value returned by the operation.
   */
  value?: ServiceMember[];
  /**
   * The total count of service elements.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The server properties for a given service.
 */
export interface ServiceMember {
  /**
   * The id of the server.
   */
  serviceMemberId?: string;
  /**
   * The service id to whom this server belongs.
   */
  serviceId?: string;
  /**
   * The tenant id to whom this server belongs.
   */
  tenantId?: string;
  /**
   * The total number of alerts that are currently active for the server.
   */
  activeAlerts?: number;
  /**
   * The additional information, if any, for the server.
   */
  additionalInformation?: string;
  /**
   * The date time , in UTC, when the server was onboarded to Azure Active Directory Connect Health.
   */
  createdDate?: Date;
  /**
   * The server specific configuration related dimensions.
   */
  dimensions?: any;
  /**
   * Indicates if the server is disabled or not.
   */
  disabled?: boolean;
  /**
   * The reason for disabling the server.
   */
  disabledReason?: number;
  /**
   * The list of installed QFEs for the server.
   */
  installedQfes?: any;
  /**
   * The date and time , in UTC, when the server was last disabled.
   */
  lastDisabled?: Date;
  /**
   * The date and time, in UTC, when the server was last rebooted.
   */
  lastReboot?: Date;
  /**
   * The date and time, in UTC, when the server's data monitoring configuration was last changed.
   */
  lastServerReportedMonitoringLevelChange?: Date;
  /**
   * The date and time, in UTC, when the server properties were last updated.
   */
  lastUpdated?: Date;
  /**
   * The id of the machine.
   */
  machineId?: string;
  /**
   * The name of the server.
   */
  machineName?: string;
  /**
   * The monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
   */
  monitoringConfigurationsComputed?: any;
  /**
   * The customized monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
   */
  monitoringConfigurationsCustomized?: any;
  /**
   * The name of the operating system installed in the machine.
   */
  osName?: string;
  /**
   * The version of the operating system installed in the machine.
   */
  osVersion?: string;
  /**
   * Server specific properties.
   */
  properties?: any;
  /**
   * The list of recommended hotfixes for the server.
   */
  recommendedQfes?: any;
  /**
   * The total count of alerts that are resolved for this server.
   */
  resolvedAlerts?: number;
  /**
   * The service role that is being monitored in the server.
   */
  role?: string;
  /**
   * The monitoring level reported by the server.
   */
  serverReportedMonitoringLevel?: MonitoringLevel;
  /**
   * The health status of the server.
   */
  status?: string;
}

/**
 * The list of agent credentials.
 */
export interface Credentials {
  /**
   * The value returned by the operation.
   */
  value?: Credential[];
}

/**
 * The credential for a given server.
 */
export interface Credential {
  /**
   * The credential identifier.
   */
  identifier?: string;
  /**
   * The type of credential.
   */
  type?: string;
  /**
   * The credential data.
   */
  credentialData?: string[];
}

/**
 * Lists all of the available REST API operations for Azure Active Directory Connect Health.
 */
export interface OperationListResponse {
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
  /**
   * List of operations supported by the Microsoft.ADHybridHealthService resource provider.
   */
  readonly value?: Operation[];
  /**
   * The total count of operations.
   */
  totalCount?: number;
  /**
   * The continuation token to get next set of operations.
   */
  continuationToken?: string;
}

/**
 * The details of the operation.
 */
export interface Operation {
  /**
   * The name of the operation.
   */
  name?: string;
  /**
   * The display details for the operation.
   */
  display?: any;
}

/**
 * The details of the onboarded tenant.
 */
export interface Tenant {
  /**
   * The Id of the tenant.
   */
  tenantId?: string;
  /**
   * The Azure Active Directory license of the tenant.
   */
  aadLicense?: string;
  /**
   * Indicate if the tenant has Azure Active Directory Premium license or not.
   */
  aadPremium?: boolean;
  /**
   * Indicates if the tenant is configured to automatically receive updates for Azure Active Directory Connect Health client side features.
   */
  agentAutoUpdate?: boolean;
  /**
   * The time in minutes after which an alert will be auto-suppressed.
   */
  alertSuppressionTimeInMins?: number;
  /**
   * Indicates if the tenant data can be seen by Microsoft through Azure portal.
   */
  consentedToMicrosoftDevOps?: boolean;
  /**
   * The country letter code of the tenant.
   */
  countryLetterCode?: string;
  /**
   * The date, in UTC, when the tenant was onboarded to Azure Active Directory Connect Health.
   */
  createdDate?: Date;
  /**
   * The date and time, in UTC, till when the tenant data can be seen by Microsoft through Azure portal.
   */
  devOpsTtl?: Date;
  /**
   * Indicates if the tenant is disabled in Azure Active Directory Connect Health.
   */
  disabled?: boolean;
  /**
   * The reason due to which the tenant was disabled in Azure Active Directory Connect Health.
   */
  disabledReason?: number;
  /**
   * The list of global administrators for the tenant.
   */
  globalAdminsEmail?: string[];
  /**
   * The initial domain of the tenant.
   */
  initialDomain?: string;
  /**
   * The date and time, in UTC, when the tenant was last disabled in Azure Active Directory Connect Health.
   */
  lastDisabled?: Date;
  /**
   * The date and time, in UTC, when the tenant onboarding status in Azure Active Directory Connect Health was last verified.
   */
  lastVerified?: Date;
  /**
   * Indicates if the tenant is allowed to  onboard to Azure Active Directory Connect Health.
   */
  onboardingAllowed?: boolean;
  /**
   * Indicates if the tenant is already onboarded to Azure Active Directory Connect Health.
   */
  onboarded?: boolean;
  /**
   * The certificate associated with the tenant to onboard data to Azure Active Directory Connect Health.
   */
  pksCertificate?: any;
  /**
   * Indicates if the tenant has signed up for private preview of Azure Active Directory Connect Health features.
   */
  privatePreviewTenant?: boolean;
  /**
   * Indicates if data collection for this tenant is disabled or not.
   */
  tenantInQuarantine?: boolean;
  /**
   * The name of the tenant.
   */
  tenantName?: string;
}

/**
 * The result for an operation.
 */
export interface Result {
  /**
   * The value.
   */
  value?: boolean;
}

/**
 * The list of error counts.
 */
export interface ErrorCounts {
  /**
   * The value returned by the operation.
   */
  value?: ErrorCount[];
}

/**
 * The error count details.
 */
export interface ErrorCount {
  /**
   * The error bucket.
   */
  errorBucket?: string;
  /**
   * The error count.
   */
  count?: number;
  /**
   * Indicates if the error count is truncated or not.
   */
  truncated?: boolean;
}

/**
 * The list of export errors.
 */
export interface MergedExportErrors {
  /**
   * The value returned by the operation.
   */
  value?: MergedExportError[];
}

/**
 * The merged export error.
 */
export interface MergedExportError {
  /**
   * The error Id.
   */
  id?: string;
  /**
   * The incoming object display name.
   */
  incomingObjectDisplayName?: string;
  /**
   * The incoming object type.
   */
  incomingObjectType?: string;
  /**
   * The user principal name
   */
  userPrincipalName?: string;
  /**
   * The type of the error.
   */
  type?: string;
  /**
   * The attribute name.
   */
  attributeName?: string;
  /**
   * The attribute value.
   */
  attributeValue?: string;
  /**
   * The date and time when the error occurred.
   */
  timeOccurred?: Date;
  /**
   * The time when the error first occurred.
   */
  timeFirstOccurred?: Date;
  /**
   *  the cs object Id.
   */
  csObjectId?: string;
  /**
   * the DN of the object.
   */
  dn?: string;
  /**
   * The incoming object details.
   */
  incomingObject?: AssociatedObject;
  /**
   * The existing object
   */
  existingObject?: AssociatedObject;
  /**
   * The modified or removed attribute value.
   */
  modifiedOrRemovedAttributeValue?: string;
  /**
   * The run step result Id.
   */
  runStepResultId?: string;
  /**
   * The sam account name.
   */
  samAccountName?: string;
  /**
   * The server error details.
   */
  serverErrorDetail?: string;
  /**
   * The service Id.
   */
  serviceId?: string;
  /**
   * The server Id.
   */
  serviceMemberId?: string;
  /**
   * The merged entity Id.
   */
  mergedEntityId?: string;
  /**
   * The date and time, in UTC, when the error was created.
   */
  createdDate?: Date;
  /**
   * The export error status.
   */
  exportErrorStatus?: number;
}

/**
 * Object that hold sync object details.
 */
export interface AssociatedObject {
  /**
   * The display name of the object.
   */
  displayName?: string;
  /**
   * The distinguished name of the object.
   */
  distinguishedName?: string;
  /**
   * The last dirSync time.
   */
  lastDirSyncTime?: Date;
  /**
   * The email of the object.
   */
  mail?: string;
  /**
   * The object guid.
   */
  objectGuid?: string;
  /**
   * The object type.
   */
  objectType?: string;
  /**
   * The On-premises UPN.
   */
  onpremisesUserPrincipalName?: string;
  /**
   * The proxy addresses.
   */
  proxyAddresses?: string;
  /**
   * The source anchor.
   */
  sourceAnchor?: string;
  /**
   * The source of authority.
   */
  sourceOfAuthority?: string;
  /**
   *  The time of the error.
   */
  timeOccurred?: Date;
  /**
   *  The UPN.
   */
  userPrincipalName?: string;
}

/**
 * The list of export statuses.
 */
export interface ExportStatuses {
  /**
   * The link used to get the next page of operations.
   */
  nextLink?: string;
  /**
   * The value returned by the operation.
   */
  value?: ExportStatus[];
  /**
   * The total count of service elements.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The details of the export status.
 */
export interface ExportStatus {
  /**
   * The id of the service for whom the export status is being reported.
   */
  serviceId?: string;
  /**
   * The server Id for whom the export status is being reported.
   */
  serviceMemberId?: string;
  /**
   * The date and time when the export ended.
   */
  endTime?: Date;
  /**
   * The run step result Id.
   */
  runStepResultId?: string;
}

/**
 * The alert feedback details.
 */
export interface AlertFeedback {
  /**
   * The alert level which indicates the severity of the alert.
   */
  level?: string;
  /**
   * The alert state which can be either active or resolved with multiple resolution types.
   */
  state?: string;
  /**
   * The alert short name.
   */
  shortName?: string;
  /**
   * The feedback for the alert which indicates if the customer likes or dislikes the alert.
   */
  feedback?: string;
  /**
   * Additional comments related to the alert.
   */
  comment?: string;
  /**
   * Indicates if the alert feedback can be shared from product team.
   */
  consentedToShare?: boolean;
  /**
   * The server Id of the alert.
   */
  serviceMemberId?: string;
  /**
   * The date and time,in UTC,when the alert was created.
   */
  createdDate?: Date;
}

/**
 * The list of alert feedback.
 */
export interface AlertFeedbacks {
  /**
   * The value returned by the operation.
   */
  value?: AlertFeedback[];
}

/**
 * The list of key value properties.
 */
export interface Items {
  /**
   * The value returned by the operation.
   */
  value?: Item[];
}

/**
 * The list of bad password log in attempt entries.
 */
export interface ErrorReportUsersEntries {
  /**
   * The value returned by the operation.
   */
  value?: ErrorReportUsersEntry[];
}

/**
 * The bad password login attempt details.
 */
export interface ErrorReportUsersEntry {
  /**
   * The user ID value.
   */
  userId?: string;
  /**
   * The IP address corresponding to the last error event.
   */
  ipAddress?: string;
  /**
   * The date and time when the last error event was logged.
   */
  lastUpdated?: Date;
  /**
   * The list of unique IP addresses.
   */
  uniqueIpAddresses?: string;
  /**
   * The total count of specific error events.
   */
  totalErrorAttempts?: number;
}

/**
 * The list of connects for a service.
 */
export interface Connectors {
  /**
   * The value returned by the operation.
   */
  value?: Connector[];
}

/**
 * The connect details.
 */
export interface Connector {
  /**
   * The connector Id.
   */
  connectorId?: string;
  /**
   * The connector Id.
   */
  id?: string;
  /**
   * The connector name.
   */
  name?: string;
  /**
   * The connector version
   */
  version?: number;
  /**
   * The connector type.
   */
  type?: string;
  /**
   * The connector description.
   */
  description?: string;
  /**
   * The schema xml for the connector.
   */
  schemaXml?: string;
  /**
   * The password management settings of the connector.
   */
  passwordManagementSettings?: any;
  /**
   * The password hash synchronization configuration of the connector.
   */
  passwordHashSyncConfiguration?: any;
  /**
   * The date and time when this connector was created.
   */
  timeCreated?: Date;
  /**
   * The date and time when this connector was last modified.
   */
  timeLastModified?: Date;
  /**
   * The partitions of the connector.
   */
  partitions?: Partition[];
  /**
   * The run profiles of the connector.
   */
  runProfiles?: RunProfile[];
  /**
   * The class inclusion list of the connector.
   */
  classesIncluded?: string[];
  /**
   * The attribute inclusion list of the connector.
   */
  attributesIncluded?: string[];
}

/**
 * Describes the partition in Synchronization service.
 */
export interface Partition {
  /**
   * The partition Id.
   */
  id?: string;
  /**
   * The distinguished name for the partition.
   */
  dn?: string;
  /**
   * Indicates if the partition object is selected or not.
   */
  enabled?: boolean;
  /**
   * The date and time when the partition is created.
   */
  timeCreated?: Date;
  /**
   * The time and date when the partition was last modified.
   */
  timeLastModified?: Date;
  /**
   * The scope of the partition.
   */
  partitionScope?: PartitionScope;
  /**
   * The name of the partition.
   */
  name?: string;
  /**
   * Indicates if the partition is a domain or not.
   */
  isDomain?: boolean;
  /**
   * The partition type.
   */
  type?: string;
}

/**
 * The connector partition scope.
 */
export interface PartitionScope {
  /**
   * Indicates if the partition scope is default or not.
   */
  isDefault?: boolean;
  /**
   * The in-scope object classes.
   */
  objectClasses?: string[];
  /**
   * The list of containers included.
   */
  containersIncluded?: string[];
  /**
   * The list of containers excluded.
   */
  containersExcluded?: string[];
}

/**
 * Describes the run profile.
 */
export interface RunProfile {
  /**
   * The run profile Id.
   */
  id?: string;
  /**
   * The run profile name
   */
  name?: string;
  /**
   * The run steps of the run profile.
   */
  runSteps?: RunStep[];
}

/**
 * The run step for a run profile.
 */
export interface RunStep {
  /**
   * The batch size used by the run step.
   */
  batchSize?: number;
  /**
   * The object processing limit.
   */
  objectProcessLimit?: number;
  /**
   * The object deletion limit.
   */
  objectDeleteLimit?: number;
  /**
   * The page size of the run step.
   */
  pageSize?: number;
  /**
   * The Id of the partition that a current run step operation is executing.
   */
  partitionId?: string;
  /**
   * The run step operation types.
   */
  operationType?: number;
  /**
   * The operation timeout.
   */
  timeout?: number;
}

/**
 * The data freshness details for the server.
 */
export interface DataFreshnessDetails {
  /**
   * The value returned by the operation.
   */
  value?: Item[];
}

/**
 * The list of global configurations.
 */
export interface GlobalConfigurations {
  /**
   * The value returned by the operation.
   */
  value?: GlobalConfiguration[];
}

/**
 * The global configuration settings.
 */
export interface GlobalConfiguration {
  /**
   * The version for the global configuration.
   */
  version?: number;
  /**
   * The schema for the configuration.
   */
  schemaXml?: string;
  /**
   * Indicates if password sync is enabled or not.
   */
  passwordSyncEnabled?: boolean;
  /**
   * The number of saved password events.
   */
  numSavedPwdEvent?: number;
  /**
   * The list of additional feature sets.
   */
  featureSet?: Item[];
}

/**
 * The service configuration
 */
export interface ServiceConfiguration {
  /**
   * The version of the sync service.
   */
  version?: string;
  /**
   * The service type of the server.
   */
  serviceType?: number;
  /**
   * The service account.
   */
  serviceAccount?: string;
  /**
   * The SQL server information.
   */
  sqlServer?: string;
  /**
   * The SQL version.
   */
  sqlVersion?: string;
  /**
   * The SQL edition
   */
  sqlEdition?: string;
  /**
   * The SQL instance details.
   */
  sqlInstance?: string;
  /**
   * The SQL database.
   */
  sqlDatabaseName?: string;
  /**
   * The SQL database size.
   */
  sqlDatabaseSize?: number;
}

/**
 * The list containing blob uris.
 */
export interface RiskyIPBlobUris {
  /**
   * The list of blob uris.
   */
  value?: RiskyIPBlobUri[];
}

/**
 * The blob uri pointing to Risky IP Report.
 */
export interface RiskyIPBlobUri {
  /**
   * The tenant id for whom the report belongs to.
   */
  tenantId?: string;
  /**
   * The service id for whom the report belongs to.
   */
  serviceId?: string;
  /**
   * The blob uri for the report.
   */
  resultSasUri?: string;
  /**
   * Time at which the new Risky IP report was requested.
   */
  blobCreateDateTime?: Date;
  /**
   * Time at which the blob creation job for the new Risky IP report was completed.
   */
  jobCompletionTime?: Date;
  /**
   * Status of the Risky IP report generation.
   */
  status?: string;
}

/**
 * Gets the list of connectors and run profile names.
 */
export interface ConnectorMetadata {
  /**
   * The list of connectors.
   */
  connectors?: ConnectorMetadataDetails[];
  /**
   * The list of run profile names.
   */
  runProfileNames?: string[];
}

/**
 * Details of the connector.
 */
export interface ConnectorMetadataDetails {
  /**
   * The Connector Id.
   */
  connectorId?: string;
  /**
   * The Connector Display Name
   */
  connectorDisplayName?: string;
}

/**
 * IP address aggregates.
 */
export interface IPAddressAggregates {
  /**
   * The value returned by the operation.
   */
  value?: IPAddressAggregate[];
  /**
   * URL to get the next set of IP Aggregate list results if there are any.
   */
  nextLink?: string;
  /**
   * The number of results.
   */
  totalCount?: number;
  /**
   * The continuation token for paginated calls.
   */
  continuationToken?: string;
}

/**
 * The key value pair for properties.
 */
export interface IPAddressAggregate {
  /**
   * Unique ID for the entree
   */
  id?: string;
  /**
   * The tenant ID
   */
  tenantId?: string;
  /**
   * The service ID
   */
  serviceId?: string;
  /**
   * The IP address from where the attempted login originated from.
   */
  ipAddress?: string;
  /**
   * When the event occurred
   */
  timestamp?: string;
  /**
   * The first audit timestamp
   */
  firstAuditTimestamp?: string;
  /**
   * The last audit timestamp
   */
  lastAuditTimestamp?: string;
  /**
   * The extranet lockout error count
   */
  extranetLockoutErrorCount?: number;
  /**
   * The bad password error count
   */
  badPasswordErrorCount?: number;
  /**
   * The unique usernames attempted
   */
  uniqueUsernamesAttemptedCount?: number;
  /**
   * A value indicating whether the attempt count threshold been exceeded
   */
  attemptCountThresholdIsExceeded?: boolean;
  /**
   * The duration of the event
   */
  timeSpan?: string;
  /**
   * A value indicating whether the IP address has been whitelisted.
   */
  isWhitelistedIpAddress?: boolean;
  /**
   * The network location
   */
  networkLocation?: string;
  /**
   * The attempted count threshold on trigger.
   */
  attemptCountThresholdOnTrigger?: number;
  /**
   * The attempted threshold type on trigger.
   */
  attemptThresholdTypeOnTrigger?: string;
  /**
   * The geographic location.
   */
  geographicLocation?: string;
}

/**
 * The key value pair for IP aggregate thresholds.
 */
export interface IPAddressAggregateSetting {
  /**
   * Unique ID for the entree
   */
  id?: string;
  /**
   * This threshold setting defines the per day trigger for a new event to be generated in the report.
   */
  badPasswordAndExtranetLockoutCombinedDailyThreshold?: number;
  /**
   * This threshold setting defines the per hour trigger for a new event to be generated in the report.
   */
  badPasswordAndExtranetLockoutCombinedHourlyThreshold?: number;
  /**
   * This threshold setting defines the per hour trigger for a new event to be generated in the report.
   */
  extranetLockoutDailyThreshold?: number;
  /**
   * This threshold setting defines the per hour trigger for a new event to be generated in the report.
   */
  extranetLockoutHourlyThreshold?: number;
  /**
   * A value indicating whether email notification has been enabled.
   */
  emailNotificationEnabled?: boolean;
}

/**
 * The agent details.
 */
export interface Agent {
  /**
   * The tenant Id.
   */
  tenantId?: string;
  /**
   * The machine Id.
   */
  machineId?: string;
  /**
   * The agent credential details.
   */
  credential?: any;
  /**
   * The machine name.
   */
  machineName?: string;
  /**
   * The agent version.
   */
  agentVersion?: string;
  /**
   * The date and time, in UTC, when the agent was created.
   */
  createdDate?: Date;
  /**
   *  The connector hash key.
   */
  key?: string;
}

/**
 * The delta attributes.
 */
export interface AttributeDelta {
  /**
   * The delta values.
   */
  values?: ValueDelta[];
  /**
   * The name of the attribute delta.
   */
  name?: string;
  /**
   * The attribute delta operation type.
   */
  operationType?: AttributeDeltaOperationType;
  /**
   * The value type.
   */
  valueType?: ValueType;
  /**
   * Indicates if the attribute delta is multivalued or not.
   */
  multiValued?: boolean;
}

/**
 * The value of the delta.
 */
export interface ValueDelta {
  /**
   * The operation type.
   */
  operationType?: ValueDeltaOperationType;
  /**
   * The value of the delta.
   */
  value?: string;
}

/**
 * The attribute mapping details.
 */
export interface AttributeMapping {
  /**
   * The mapping source.
   */
  mappingSource?: AttributeMppingSource;
  /**
   * The attribute mapping type.
   */
  type?: AttributeMappingType;
  /**
   * The destination attribute.
   */
  destinationAttribute?: string;
  /**
   * The context Id.
   */
  contextId?: string;
}

/**
 * The attribute mapping source.
 */
export interface AttributeMppingSource {
  /**
   * The source attribute.
   */
  sourceAttribute?: string[];
  /**
   * The value for dn part.
   */
  dnPart?: number;
  /**
   * The script context.
   */
  scriptContext?: string;
  /**
   * The constant value.
   */
  constantValue?: string;
}

/**
 * The changes which are not re-imported.
 */
export interface ChangeNotReimported {
  /**
   * The delta changes that is not re-imported.
   */
  delta?: ChangeNotReimportedDelta;
  /**
   * The object entry in a change that is not re-imported.
   */
  entry?: ChangeNotReimportedEntry;
}

/**
 * The delta in a change that is not re-imported.
 */
export interface ChangeNotReimportedDelta {
  /**
   * The anchor.
   */
  anchor?: string;
  /**
   * The delta attributes for distinguished names.
   */
  dnAttributes?: AttributeDelta[];
  /**
   * The attributes.
   */
  attributes?: AttributeDelta[];
  /**
   * The operation type.
   */
  operationType?: DeltaOperationType;
}

/**
 * The object entry in a change that is not re-imported.
 */
export interface ChangeNotReimportedEntry {
  /**
   * The anchor.
   */
  anchor?: string;
  /**
   * The parent anchor.
   */
  parentAnchor?: string;
  /**
   * The primary object class.
   */
  primaryObjectClass?: string;
  /**
   * The list of object classes.
   */
  objectClasses?: string[];
  /**
   * The delta attributes for distinguished names.
   */
  dnAttributes?: AttributeDelta[];
  /**
   * The attributes.
   */
  attributes?: AttributeDelta[];
  /**
   * The distinguished name.
   */
  dn?: string;
}

/**
 * The connector connection error.
 */
export interface ConnectorConnectionError {
  /**
   * The error Id.
   */
  id?: string;
  /**
   * The run step result Id.
   */
  runStepResultId?: string;
  /**
   * The connector Id.
   */
  connectorId?: string;
  /**
   * The type of error.
   */
  type?: string;
  /**
   * The error code.
   */
  errorCode?: string;
  /**
   * The message for the connection error.
   */
  message?: string;
  /**
   * The time when the connection error occurred.
   */
  timeOccured?: Date;
  /**
   * The server where the connection error happened.
   */
  server?: string;
}

/**
 * The list of connector connection errors.
 */
export interface ConnectorConnectionErrors {
  /**
   * The value returned by the operation.
   */
  value?: ConnectorConnectionError[];
}

/**
 * The connector object error.
 */
export interface ConnectorObjectError {
  /**
   * The error Id.
   */
  id?: string;
  /**
   * The run step result Id.
   */
  runStepResultId?: string;
  /**
   * The connector Id.
   */
  connectorId?: string;
  /**
   * The type of error.
   */
  type?: string;
  /**
   * The error code.
   */
  errorCode?: string;
  /**
   * The message for the object error.
   */
  message?: string;
  /**
   * The entry number for object error occurred.
   */
  entryNumber?: number;
  /**
   * The line number for the object error.
   */
  lineNumber?: number;
  /**
   * The column number for the object error.
   */
  columnNumber?: number;
  /**
   * The distinguished name of the object.
   */
  dn?: string;
  /**
   * The name for the anchor of the object.
   */
  anchor?: string;
  /**
   * The attribute name of the object.
   */
  attributeName?: string;
  /**
   * The server side error details.
   */
  serverErrorDetail?: string;
  /**
   * The value corresponding to attribute name.
   */
  values?: string[];
}

/**
 * The list of connector object errors.
 */
export interface ConnectorObjectErrors {
  /**
   * The value returned by the operation.
   */
  value?: ConnectorObjectError[];
}

/**
 * Displays the details related to operations supported by Azure Active Directory Connect Health.
 */
export interface Display {
  /**
   *  The description for the operation.
   */
  description?: string;
  /**
   * The details of the operation.
   */
  operation?: string;
  /**
   * The provider name.
   */
  provider?: string;
}

/**
 * The error details.
 */
export interface ErrorDetail {
  /**
   * The error description.
   */
  description?: string;
  /**
   * The knowledge base article url which contains more information about the error.
   */
  kbUrl?: string;
  /**
   * Additional details related to the error.
   */
  detail?: string;
  /**
   * The list of objects with sync errors.
   */
  objectsWithSyncError?: ObjectWithSyncError;
  /**
   *  The object with sync error.
   */
  objectWithSyncError?: MergedExportError;
}

/**
 * The objects with sync errors.
 */
export interface ObjectWithSyncError {
  /**
   * The source of authority.
   */
  sourceOfAuthority?: string;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The object type.
   */
  objectType?: string;
  /**
   * The attribute name.
   */
  attributeName?: string;
  /**
   * The attribute value.
   */
  attributeValue?: string;
  /**
   * The modified value.
   */
  modififedValue?: string;
  /**
   * The user principal name.
   */
  userPrincipalName?: string;
  /**
   * The object guid.
   */
  objectGuid?: string;
  /**
   * Indicates if the attribute is multi-valued or not.
   */
  attributeMultiValues?: boolean;
  /**
   * The minimum limit.
   */
  minLimit?: string;
  /**
   * The maximum limit.
   */
  maxLimit?: string;
  /**
   * The distinguished name.
   */
  distinguishedName?: string;
  /**
   * The email.
   */
  mail?: string;
  /**
   * The date and time of occurrence.
   */
  timeOccured?: Date;
  /**
   * The error type.
   */
  errorType?: string;
  /**
   * The source anchor.
   */
  sourceAnchor?: string;
}

/**
 * The export error details.
 */
export interface ExportError {
  /**
   * The error Id.
   */
  id?: string;
  /**
   * The run step result Id.
   */
  runStepResultId?: string;
  /**
   * The connector Id.
   */
  connectorId?: string;
  /**
   * The type of error.
   */
  type?: string;
  /**
   * The error code.
   */
  errorCode?: string;
  /**
   * The export error message.
   */
  message?: string;
  /**
   * The server error detail.
   */
  serverErrorDetail?: string;
  /**
   * The date and time when the export error first occurred.
   */
  timeFirstOccured?: Date;
  /**
   * The retry count.
   */
  retryCount?: number;
  /**
   * The cloud object Id.
   */
  csObjectId?: string;
  /**
   * The distinguished name.
   */
  dn?: string;
  /**
   * The minimum limit.
   */
  minLimit?: string;
  /**
   * The maximum limit.
   */
  maxLimit?: string;
  /**
   * The name of the cloud anchor.
   */
  cloudAnchor?: string;
  /**
   * The attribute name.
   */
  attributeName?: string;
  /**
   * The attribute value.
   */
  attributeValue?: string;
  /**
   * Indicates if the attribute is multi valued or not.
   */
  attributeMultiValue?: boolean;
  /**
   * The object Id with which there was an attribute conflict.
   */
  objectIdConflict?: string;
  /**
   * The SAM account name.
   */
  samAccountName?: string;
  /**
   * The AD object type
   */
  adObjectType?: string;
  /**
   * The AD object guid.
   */
  adObjectGuid?: string;
  /**
   * The display name for the AD object.
   */
  adDisplayName?: string;
  /**
   * The source of authority for the AD object.
   */
  adSourceOfAuthority?: string;
  /**
   * The AD source anchor.
   */
  adSourceAnchor?: string;
  /**
   * The user principal name for the AD object.
   */
  adUserPrincipalName?: string;
  /**
   * The distinguished name for the AD object.
   */
  adDistinguishedName?: string;
  /**
   * The email for the AD object.
   */
  adMail?: string;
  /**
   * The date and time of occurrence.
   */
  timeOccured?: Date;
  /**
   * The AAD side object type.
   */
  aadObjectType?: string;
  /**
   * The AAD side object guid.
   */
  aadObjectGuid?: string;
  /**
   * The AAD side display name
   */
  aadDisplayName?: string;
  /**
   * The AAD side source of authority for the object.
   */
  aadSourceOfAuthority?: string;
  /**
   * The AAD side user principal name.
   */
  aadUserPrincipalName?: string;
  /**
   * The AAD side distinguished name for the object.
   */
  aadDistinguishedName?: string;
  /**
   * The AAD side email for the object.
   */
  aadMail?: string;
  /**
   * The date and time of last sync run.
   */
  lastDirSyncTime?: Date;
  /**
   * The modified attribute value.
   */
  modifiedAttributeValue?: string;
}

/**
 * The list of export errors.
 */
export interface ExportErrors {
  /**
   * The value returned by the operation.
   */
  value?: ExportError[];
}

/**
 * The extension error details.
 */
export interface ExtensionErrorInfo {
  /**
   * The extension name.
   */
  extensionName?: string;
  /**
   * The extension context.
   */
  extensionContext?: string;
  /**
   * The call stack for the error.
   */
  callStack?: string;
}

/**
 * The list of hotfixes installed in the server.
 */
export interface Hotfixes {
  /**
   * The value returned by the operation.
   */
  value?: Hotfix[];
}

/**
 * The list of import errors.
 */
export interface ImportErrors {
  /**
   * The value returned by the operation.
   */
  value?: ImportError[];
}

/**
 * The import error details.
 */
export interface ImportError {
  /**
   * The error Id.
   */
  id?: string;
  /**
   * The run step result Id.
   */
  runStepResultId?: string;
  /**
   * The connector Id.
   */
  connectorId?: string;
  /**
   * The type of error.
   */
  type?: string;
  /**
   * The time when the import error occurred.
   */
  timeOccurred?: Date;
  /**
   * The time when the import error first occurred.
   */
  timeFirstOccurred?: Date;
  /**
   * The retry count.
   */
  retryCount?: number;
  /**
   * The operation type specific  to error reporting.
   */
  algorithmStepType?: AlgorithmStepType;
  /**
   * The change details that is not re-imported.
   */
  changeNotReimported?: ChangeNotReimported;
  /**
   * The extension error information.
   */
  extensionErrorInfo?: ExtensionErrorInfo;
  /**
   * The error details in legacy rule processing.
   */
  ruleErrorInfo?: RuleErrorInfo;
  /**
   * The object Id.
   */
  csObjectId?: string;
  /**
   * The distinguished name.
   */
  dn?: string;
}

/**
 * The error details in legacy rule processing.
 */
export interface RuleErrorInfo {
  /**
   * The attribute mapping details.
   */
  attributeMapping?: AttributeMapping;
  /**
   * The connector Id.
   */
  connectorId?: string;
  /**
   * The connector name.
   */
  connectorName?: string;
  /**
   * The object Id.
   */
  csObjectId?: string;
  /**
   * The distinguished name.
   */
  dn?: string;
}

/**
 * The list of replication summary for the domain controller inbound neighbor.
 */
export interface InboundReplicationNeighbors {
  /**
   * The details of inbound replication neighbors.
   */
  value?: InboundReplicationNeighbor[];
}

/**
 * The module configuration as required by the Agent service.
 */
export interface ModuleConfiguration {
  /**
   * The name of agent service.
   */
  agentService?: string;
  /**
   * The name of the module for which the configuration is applicable.
   */
  moduleName?: string;
  /**
   * The key value pairs of properties required for configuration.
   */
  properties?: { [propertyName: string]: string };
}

/**
 * The list of module configurations.
 */
export interface ModuleConfigurations {
  /**
   * The value returned by the operation.
   */
  value?: ModuleConfiguration[];
}

/**
 * The password management settings.
 */
export interface PasswordManagementSettings {
  /**
   * Indicates if the password extension is enabled.
   */
  enabled?: boolean;
  /**
   * The file path of the password management extension.
   */
  extensionFilePath?: string;
  /**
   * Connection point of password management.
   */
  connectTo?: string;
  /**
   * Connection timeout for password extension.
   */
  connectionTimeout?: number;
  /**
   * User to execute password extension.
   */
  user?: string;
  /**
   * The supported password operations.
   */
  supportedPasswordOperations?: PasswordOperationTypes;
  /**
   * The maximum number of retries.
   */
  maximumRetryCount?: number;
  /**
   * The time between retries.
   */
  retryIntervalInSeconds?: number;
  /**
   * Indicates if a secure connection is required for password management.
   */
  requiresSecureConnection?: boolean;
  /**
   * Indicates if accounts should be unlocked when resetting password.
   */
  unlockAccount?: boolean;
}

/**
 * The password has synchronization configuration settings.
 */
export interface PasswordHashSyncConfiguration {
  /**
   * Indicates if the password hash synchronization configuration settings is enabled.
   */
  enabled?: boolean;
  /**
   * The target.
   */
  target?: string;
}

/**
 * The list of run profiles.
 */
export interface RunProfiles {
  /**
   * The value returned by the operation.
   */
  value?: RunProfile[];
}

/**
 * The details for export error.
 */
export interface TabularExportError {
  /**
   * The service Id.
   */
  serviceId?: string;
  /**
   * The server Id.
   */
  serviceMemberId?: string;
  /**
   * The merged entity Id.
   */
  mergedEntityId?: string;
  /**
   * The export error data.
   */
  tabularExportErrorData?: string;
}

/**
 * The tenant onboarding details.
 */
export interface TenantOnboardingDetails {
  /**
   * Indicates if the tenant is onboarded to Azure Active Directory Connect Health or not.
   */
  tenantOnboarded?: boolean;
  /**
   * The display url, to help tenant navigate or onboard to Azure Active Directory Connect Health blade, based on tenant onboarding status.
   */
  onboardingDisplayUrl?: string;
}

/**
 * Defines values for Level.
 */
export type Level = "Warning" | "Error" | "PreWarning";
/**
 * Defines values for State.
 */
export type State =
  | "Active"
  | "ResolvedByPositiveResult"
  | "ResolvedManually"
  | "ResolvedByTimer"
  | "ResolvedByStateChange";
/**
 * Defines values for HealthStatus.
 */
export type HealthStatus =
  | "Healthy"
  | "Warning"
  | "Error"
  | "NotMonitored"
  | "Missing";
/**
 * Defines values for ValueDeltaOperationType.
 */
export type ValueDeltaOperationType = "Undefined" | "Add" | "Update" | "Delete";
/**
 * Defines values for AttributeDeltaOperationType.
 */
export type AttributeDeltaOperationType =
  | "Undefined"
  | "Add"
  | "Replace"
  | "Update"
  | "Delete";
/**
 * Defines values for ValueType.
 */
export type ValueType =
  | "Undefined"
  | "Dn"
  | "Binary"
  | "String"
  | "Integer"
  | "Boolean";
/**
 * Defines values for AttributeMappingType.
 */
export type AttributeMappingType = "Constant" | "Direct" | "DnPart" | "Script";
/**
 * Defines values for DeltaOperationType.
 */
export type DeltaOperationType =
  | "Undefined"
  | "None"
  | "Add"
  | "Replace"
  | "Update"
  | "Delete"
  | "Obsolete"
  | "DeleteAdd";
/**
 * Defines values for AlgorithmStepType.
 */
export type AlgorithmStepType =
  | "Undefined"
  | "Staging"
  | "ConnectorFilter"
  | "Join"
  | "Projection"
  | "ImportFlow"
  | "Provisioning"
  | "ValidateConnectorFilter"
  | "Deprovisioning"
  | "ExportFlow"
  | "MvDeletion"
  | "Recall"
  | "MvObjectTypeChange";
/**
 * Defines values for PasswordOperationTypes.
 */
export type PasswordOperationTypes = "Undefined" | "Set" | "Change";
/**
 * Defines values for MonitoringLevel.
 */
export type MonitoringLevel = "Partial" | "Full" | "Off";

/**
 * Optional parameters.
 */
export interface AddsServicesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The service property filter to apply.
   */
  filter?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  serviceType?: string;
  /**
   * The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
   */
  skipCount?: number;
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
}

/**
 * Contains response data for the list operation.
 */
export type AddsServicesListResponse = Services & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Services;
  };
};

/**
 * Contains response data for the add operation.
 */
export type AddsServicesAddResponse = ServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceProperties;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AddsServicesGetResponse = ServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceProperties;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered.
   */
  confirm?: boolean;
}

/**
 * Contains response data for the update operation.
 */
export type AddsServicesUpdateResponse = ServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceProperties;
  };
};

/**
 * Contains response data for the getForestSummary operation.
 */
export type AddsServicesGetForestSummaryResponse = ForestSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ForestSummary;
  };
};

/**
 * Contains response data for the listMetricsAverage operation.
 */
export type AddsServicesListMetricsAverageResponse = Metrics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Metrics;
  };
};

/**
 * Contains response data for the listMetricsSum operation.
 */
export type AddsServicesListMetricsSumResponse = Metrics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Metrics;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListMetricMetadataOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The metric metadata property filter to apply.
   */
  filter?: string;
  /**
   * Indicates if only performance counter metrics are requested.
   */
  perfCounter?: boolean;
}

/**
 * Contains response data for the listMetricMetadata operation.
 */
export type AddsServicesListMetricMetadataResponse = MetricMetadataList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricMetadataList;
  };
};

/**
 * Contains response data for the getMetricMetadata operation.
 */
export type AddsServicesGetMetricMetadataResponse = MetricMetadata & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricMetadata;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesGetMetricMetadataForGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The group key
   */
  groupKey?: string;
  /**
   * The start date.
   */
  fromDate?: Date;
  /**
   * The end date.
   */
  toDate?: Date;
}

/**
 * Contains response data for the getMetricMetadataForGroup operation.
 */
export type AddsServicesGetMetricMetadataForGroupResponse = MetricSets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricSets;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListReplicationDetailsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The server property filter to apply.
   */
  filter?: string;
  /**
   * Indicates if InboundReplicationNeighbor details are required or not.
   */
  withDetails?: boolean;
}

/**
 * Contains response data for the listReplicationDetails operation.
 */
export type AddsServicesListReplicationDetailsResponse = ReplicationDetailsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReplicationDetailsList;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListReplicationSummaryOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
  /**
   * The server property filter to apply.
   */
  filter?: string;
}

/**
 * Contains response data for the listReplicationSummary operation.
 */
export type AddsServicesListReplicationSummaryResponse = ReplicationSummaryList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReplicationSummaryList;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListServerAlertsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The alert property filter to apply.
   */
  filter?: string;
  /**
   * The alert state to query for.
   */
  state?: string;
  /**
   * The start date to query for.
   */
  fromParam?: Date;
  /**
   * The end date till when to query for.
   */
  to?: Date;
}

/**
 * Contains response data for the listServerAlerts operation.
 */
export type AddsServicesListServerAlertsResponse = Alerts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alerts;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListPremiumServicesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The service property filter to apply.
   */
  filter?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  serviceType?: string;
  /**
   * The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
   */
  skipCount?: number;
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
}

/**
 * Contains response data for the listPremiumServices operation.
 */
export type AddsServicesListPremiumServicesResponse = Services & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Services;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The service property filter to apply.
   */
  filter?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  serviceType?: string;
  /**
   * The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
   */
  skipCount?: number;
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type AddsServicesListNextResponse = Services & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Services;
  };
};

/**
 * Contains response data for the listMetricsAverageNext operation.
 */
export type AddsServicesListMetricsAverageNextResponse = Metrics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Metrics;
  };
};

/**
 * Contains response data for the listMetricsSumNext operation.
 */
export type AddsServicesListMetricsSumNextResponse = Metrics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Metrics;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListMetricMetadataNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The metric metadata property filter to apply.
   */
  filter?: string;
  /**
   * Indicates if only performance counter metrics are requested.
   */
  perfCounter?: boolean;
}

/**
 * Contains response data for the listMetricMetadataNext operation.
 */
export type AddsServicesListMetricMetadataNextResponse = MetricMetadataList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricMetadataList;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListServerAlertsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The alert property filter to apply.
   */
  filter?: string;
  /**
   * The alert state to query for.
   */
  state?: string;
  /**
   * The start date to query for.
   */
  fromParam?: Date;
  /**
   * The end date till when to query for.
   */
  to?: Date;
}

/**
 * Contains response data for the listServerAlertsNext operation.
 */
export type AddsServicesListServerAlertsNextResponse = Alerts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alerts;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesListPremiumServicesNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The service property filter to apply.
   */
  filter?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  serviceType?: string;
  /**
   * The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
   */
  skipCount?: number;
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
}

/**
 * Contains response data for the listPremiumServicesNext operation.
 */
export type AddsServicesListPremiumServicesNextResponse = Services & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Services;
  };
};

/**
 * Optional parameters.
 */
export interface AlertsListAddsAlertsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The alert property filter to apply.
   */
  filter?: string;
  /**
   * The alert state to query for.
   */
  state?: string;
  /**
   * The start date to query for.
   */
  fromParam?: Date;
  /**
   * The end date till when to query for.
   */
  to?: Date;
}

/**
 * Contains response data for the listAddsAlerts operation.
 */
export type AlertsListAddsAlertsResponse = Alerts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alerts;
  };
};

/**
 * Optional parameters.
 */
export interface AlertsListAddsAlertsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The alert property filter to apply.
   */
  filter?: string;
  /**
   * The alert state to query for.
   */
  state?: string;
  /**
   * The start date to query for.
   */
  fromParam?: Date;
  /**
   * The end date till when to query for.
   */
  to?: Date;
}

/**
 * Contains response data for the listAddsAlertsNext operation.
 */
export type AlertsListAddsAlertsNextResponse = Alerts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alerts;
  };
};

/**
 * Optional parameters.
 */
export interface ConfigurationListAddsConfigurationsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The grouping for configurations.
   */
  grouping?: string;
}

/**
 * Contains response data for the listAddsConfigurations operation.
 */
export type ConfigurationListAddsConfigurationsResponse = AddsConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AddsConfiguration;
  };
};

/**
 * Contains response data for the add operation.
 */
export type ConfigurationAddResponse = Tenant & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Tenant;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ConfigurationGetResponse = Tenant & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Tenant;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ConfigurationUpdateResponse = Tenant & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Tenant;
  };
};

/**
 * Optional parameters.
 */
export interface ConfigurationListAddsConfigurationsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The grouping for configurations.
   */
  grouping?: string;
}

/**
 * Contains response data for the listAddsConfigurationsNext operation.
 */
export type ConfigurationListAddsConfigurationsNextResponse = AddsConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AddsConfiguration;
  };
};

/**
 * Contains response data for the listAddsDimensions operation.
 */
export type DimensionsListAddsDimensionsResponse = Dimensions & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Dimensions;
  };
};

/**
 * Contains response data for the listAddsDimensionsNext operation.
 */
export type DimensionsListAddsDimensionsNextResponse = Dimensions & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Dimensions;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServiceMembersListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The server property filter to apply.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type AddsServiceMembersListResponse = AddsServiceMembers & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AddsServiceMembers;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AddsServiceMembersGetResponse = ServiceMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceMember;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServiceMembersDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
   */
  confirm?: boolean;
}

/**
 * Optional parameters.
 */
export interface AddsServiceMembersListCredentialsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The property filter to apply.
   */
  filter?: string;
}

/**
 * Contains response data for the listCredentials operation.
 */
export type AddsServiceMembersListCredentialsResponse = Credentials & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Credentials;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServiceMembersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The server property filter to apply.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type AddsServiceMembersListNextResponse = AddsServiceMembers & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AddsServiceMembers;
  };
};

/**
 * Optional parameters.
 */
export interface AdDomainServiceMembersListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
  /**
   * The server property filter to apply.
   */
  filter?: string;
  /**
   * The custom query.
   */
  query?: string;
}

/**
 * Contains response data for the list operation.
 */
export type AdDomainServiceMembersListResponse = AddsServiceMembers & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AddsServiceMembers;
  };
};

/**
 * Optional parameters.
 */
export interface AdDomainServiceMembersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
  /**
   * The server property filter to apply.
   */
  filter?: string;
  /**
   * The custom query.
   */
  query?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type AdDomainServiceMembersListNextResponse = AddsServiceMembers & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AddsServiceMembers;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AddsServicesUserPreferenceGetResponse = UserPreference & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserPreference;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServiceGetMetricsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The group key
   */
  groupKey?: string;
  /**
   * The start date.
   */
  fromDate?: Date;
  /**
   * The end date.
   */
  toDate?: Date;
}

/**
 * Contains response data for the getMetrics operation.
 */
export type AddsServiceGetMetricsResponse = MetricSets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricSets;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AddsServicesReplicationStatusGetResponse = ReplicationStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReplicationStatus;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesServiceMembersListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The server property filter to apply.
   */
  filter?: string;
  /**
   * The server specific dimension.
   */
  dimensionType?: string;
  /**
   * The value of the dimension.
   */
  dimensionSignature?: string;
}

/**
 * Contains response data for the list operation.
 */
export type AddsServicesServiceMembersListResponse = ServiceMembers & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceMembers;
  };
};

/**
 * Contains response data for the add operation.
 */
export type AddsServicesServiceMembersAddResponse = ServiceMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceMember;
  };
};

/**
 * Optional parameters.
 */
export interface AddsServicesServiceMembersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The server property filter to apply.
   */
  filter?: string;
  /**
   * The server specific dimension.
   */
  dimensionType?: string;
  /**
   * The value of the dimension.
   */
  dimensionSignature?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type AddsServicesServiceMembersListNextResponse = ServiceMembers & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceMembers;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResponse;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResponse;
  };
};

/**
 * Contains response data for the getDevOps operation.
 */
export type ReportsGetDevOpsResponse = Result & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Result;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListOptionalParams extends coreHttp.OperationOptions {
  /**
   * The service property filter to apply.
   */
  filter?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  serviceType?: string;
  /**
   * The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
   */
  skipCount?: number;
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
}

/**
 * Contains response data for the list operation.
 */
export type ServicesListResponse = Services & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Services;
  };
};

/**
 * Contains response data for the add operation.
 */
export type ServicesAddResponse = ServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceProperties;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListPremiumOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The service property filter to apply.
   */
  filter?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  serviceType?: string;
  /**
   * The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
   */
  skipCount?: number;
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
}

/**
 * Contains response data for the listPremium operation.
 */
export type ServicesListPremiumResponse = Services & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Services;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServicesGetResponse = ServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceProperties;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered.
   */
  confirm?: boolean;
}

/**
 * Contains response data for the update operation.
 */
export type ServicesUpdateResponse = ServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceProperties;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListAlertsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The alert property filter to apply.
   */
  filter?: string;
  /**
   * The alert state to query for.
   */
  state?: string;
  /**
   * The start date to query for.
   */
  fromParam?: Date;
  /**
   * The end date till when to query for.
   */
  to?: Date;
}

/**
 * Contains response data for the listAlerts operation.
 */
export type ServicesListAlertsResponse = Alerts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alerts;
  };
};

/**
 * Contains response data for the getFeatureAvailibility operation.
 */
export type ServicesGetFeatureAvailibilityResponse = Result & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Result;
  };
};

/**
 * Contains response data for the listExportErrors operation.
 */
export type ServicesListExportErrorsResponse = ErrorCounts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ErrorCounts;
  };
};

/**
 * Contains response data for the listExportErrorsV2 operation.
 */
export type ServicesListExportErrorsV2Response = MergedExportErrors & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MergedExportErrors;
  };
};

/**
 * Contains response data for the listExportStatus operation.
 */
export type ServicesListExportStatusResponse = ExportStatuses & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExportStatuses;
  };
};

/**
 * Contains response data for the addAlertFeedback operation.
 */
export type ServicesAddAlertFeedbackResponse = AlertFeedback & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertFeedback;
  };
};

/**
 * Contains response data for the listAlertFeedback operation.
 */
export type ServicesListAlertFeedbackResponse = AlertFeedbacks & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertFeedbacks;
  };
};

/**
 * Contains response data for the listMetricsAverage operation.
 */
export type ServicesListMetricsAverageResponse = Metrics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Metrics;
  };
};

/**
 * Contains response data for the listMetricsSum operation.
 */
export type ServicesListMetricsSumResponse = Metrics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Metrics;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListMetricMetadataOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The metric metadata property filter to apply.
   */
  filter?: string;
  /**
   * Indicates if only performance counter metrics are requested.
   */
  perfCounter?: boolean;
}

/**
 * Contains response data for the listMetricMetadata operation.
 */
export type ServicesListMetricMetadataResponse = MetricMetadataList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricMetadataList;
  };
};

/**
 * Contains response data for the getMetricMetadata operation.
 */
export type ServicesGetMetricMetadataResponse = MetricMetadata & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricMetadata;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesGetMetricMetadataForGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The group key
   */
  groupKey?: string;
  /**
   * The start date.
   */
  fromDate?: Date;
  /**
   * The end date.
   */
  toDate?: Date;
}

/**
 * Contains response data for the getMetricMetadataForGroup operation.
 */
export type ServicesGetMetricMetadataForGroupResponse = MetricSets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricSets;
  };
};

/**
 * Contains response data for the listMonitoringConfigurations operation.
 */
export type ServicesListMonitoringConfigurationsResponse = Items & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Items;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListUserBadPasswordReportOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The source of data, if its test data or customer data.
   */
  dataSource?: string;
}

/**
 * Contains response data for the listUserBadPasswordReport operation.
 */
export type ServicesListUserBadPasswordReportResponse = ErrorReportUsersEntries & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ErrorReportUsersEntries;
  };
};

/**
 * Contains response data for the getTenantWhitelisting operation.
 */
export type ServicesGetTenantWhitelistingResponse = Result & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Result;
  };
};

/**
 * Contains response data for the listAllRiskyIpDownloadReport operation.
 */
export type ServicesListAllRiskyIpDownloadReportResponse = RiskyIPBlobUris & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RiskyIPBlobUris;
  };
};

/**
 * Contains response data for the listCurrentRiskyIpDownloadReport operation.
 */
export type ServicesListCurrentRiskyIpDownloadReportResponse = RiskyIPBlobUris & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RiskyIPBlobUris;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The service property filter to apply.
   */
  filter?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  serviceType?: string;
  /**
   * The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
   */
  skipCount?: number;
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type ServicesListNextResponse = Services & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Services;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListPremiumNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The service property filter to apply.
   */
  filter?: string;
  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   */
  serviceType?: string;
  /**
   * The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
   */
  skipCount?: number;
  /**
   * The take count , which specifies the number of elements that can be returned from a sequence.
   */
  takeCount?: number;
}

/**
 * Contains response data for the listPremiumNext operation.
 */
export type ServicesListPremiumNextResponse = Services & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Services;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListAlertsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The alert property filter to apply.
   */
  filter?: string;
  /**
   * The alert state to query for.
   */
  state?: string;
  /**
   * The start date to query for.
   */
  fromParam?: Date;
  /**
   * The end date till when to query for.
   */
  to?: Date;
}

/**
 * Contains response data for the listAlertsNext operation.
 */
export type ServicesListAlertsNextResponse = Alerts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alerts;
  };
};

/**
 * Contains response data for the listExportStatusNext operation.
 */
export type ServicesListExportStatusNextResponse = ExportStatuses & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExportStatuses;
  };
};

/**
 * Contains response data for the listMetricsAverageNext operation.
 */
export type ServicesListMetricsAverageNextResponse = Metrics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Metrics;
  };
};

/**
 * Contains response data for the listMetricsSumNext operation.
 */
export type ServicesListMetricsSumNextResponse = Metrics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Metrics;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListMetricMetadataNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The metric metadata property filter to apply.
   */
  filter?: string;
  /**
   * Indicates if only performance counter metrics are requested.
   */
  perfCounter?: boolean;
}

/**
 * Contains response data for the listMetricMetadataNext operation.
 */
export type ServicesListMetricMetadataNextResponse = MetricMetadataList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricMetadataList;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceGetMetricsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The group key
   */
  groupKey?: string;
  /**
   * The start date.
   */
  fromDate?: Date;
  /**
   * The end date.
   */
  toDate?: Date;
}

/**
 * Contains response data for the getMetrics operation.
 */
export type ServiceGetMetricsResponse = MetricSets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricSets;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceMembersListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The server property filter to apply.
   */
  filter?: string;
  /**
   * The server specific dimension.
   */
  dimensionType?: string;
  /**
   * The value of the dimension.
   */
  dimensionSignature?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ServiceMembersListResponse = ServiceMembers & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceMembers;
  };
};

/**
 * Contains response data for the add operation.
 */
export type ServiceMembersAddResponse = ServiceMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceMember;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceMembersGetResponse = ServiceMember & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceMember;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceMembersDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
   */
  confirm?: boolean;
}

/**
 * Optional parameters.
 */
export interface ServiceMembersListAlertsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The alert property filter to apply.
   */
  filter?: string;
  /**
   * The alert state to query for.
   */
  state?: string;
  /**
   * The start date to query for.
   */
  fromParam?: Date;
  /**
   * The end date till when to query for.
   */
  to?: Date;
}

/**
 * Contains response data for the listAlerts operation.
 */
export type ServiceMembersListAlertsResponse = Alerts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alerts;
  };
};

/**
 * Contains response data for the listConnectors operation.
 */
export type ServiceMembersListConnectorsResponse = Connectors & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Connectors;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceMembersListCredentialsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The property filter to apply.
   */
  filter?: string;
}

/**
 * Contains response data for the listCredentials operation.
 */
export type ServiceMembersListCredentialsResponse = Credentials & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Credentials;
  };
};

/**
 * Contains response data for the listDataFreshness operation.
 */
export type ServiceMembersListDataFreshnessResponse = DataFreshnessDetails & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataFreshnessDetails;
  };
};

/**
 * Contains response data for the listExportStatus operation.
 */
export type ServiceMembersListExportStatusResponse = ExportStatuses & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExportStatuses;
  };
};

/**
 * Contains response data for the listGlobalConfiguration operation.
 */
export type ServiceMembersListGlobalConfigurationResponse = GlobalConfigurations & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GlobalConfigurations;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceMembersGetMetricsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The group key
   */
  groupKey?: string;
  /**
   * The start date.
   */
  fromDate?: Date;
  /**
   * The end date.
   */
  toDate?: Date;
}

/**
 * Contains response data for the getMetrics operation.
 */
export type ServiceMembersGetMetricsResponse = MetricSets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricSets;
  };
};

/**
 * Contains response data for the getServiceConfiguration operation.
 */
export type ServiceMembersGetServiceConfigurationResponse = ServiceConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceConfiguration;
  };
};

/**
 * Contains response data for the getConnectorMetadata operation.
 */
export type ServiceMembersGetConnectorMetadataResponse = ConnectorMetadata & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectorMetadata;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceMembersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The server property filter to apply.
   */
  filter?: string;
  /**
   * The server specific dimension.
   */
  dimensionType?: string;
  /**
   * The value of the dimension.
   */
  dimensionSignature?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ServiceMembersListNextResponse = ServiceMembers & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ServiceMembers;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceMembersListAlertsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The alert property filter to apply.
   */
  filter?: string;
  /**
   * The alert state to query for.
   */
  state?: string;
  /**
   * The start date to query for.
   */
  fromParam?: Date;
  /**
   * The end date till when to query for.
   */
  to?: Date;
}

/**
 * Contains response data for the listAlertsNext operation.
 */
export type ServiceMembersListAlertsNextResponse = Alerts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alerts;
  };
};

/**
 * Contains response data for the listExportStatusNext operation.
 */
export type ServiceMembersListExportStatusNextResponse = ExportStatuses & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExportStatuses;
  };
};

/**
 * Optional parameters.
 */
export interface ListIPAddressAggregatesByServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A continuationtoken value returned in paginated result to load different pages.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the iPAddressAggregatesByService operation.
 */
export type ListIPAddressAggregatesByServiceResponse = IPAddressAggregates & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IPAddressAggregates;
  };
};

/**
 * Contains response data for the iPAddressAggregateSettings operation.
 */
export type ListIPAddressAggregateSettingsResponse = IPAddressAggregateSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IPAddressAggregateSetting;
  };
};

/**
 * Optional parameters.
 */
export interface ListIPAddressAggregatesByServiceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A continuationtoken value returned in paginated result to load different pages.
   */
  skiptoken?: string;
}

/**
 * Contains response data for the iPAddressAggregatesByServiceNext operation.
 */
export type ListIPAddressAggregatesByServiceNextResponse = IPAddressAggregates & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IPAddressAggregates;
  };
};

/**
 * Contains response data for the iPAddressAggregateSettings operation.
 */
export type UpdateIPAddressAggregateSettingsResponse = IPAddressAggregateSetting & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IPAddressAggregateSetting;
  };
};

/**
 * Optional parameters.
 */
export interface ADHybridHealthServiceOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
