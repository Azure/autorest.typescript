/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Services: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Services",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceProperties" }
          }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const ServiceProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProperties",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      activeAlerts: {
        type: { name: "Number" },
        serializedName: "activeAlerts"
      },
      additionalInformation: {
        type: { name: "String" },
        serializedName: "additionalInformation"
      },
      createdDate: {
        type: { name: "DateTime" },
        serializedName: "createdDate"
      },
      customNotificationEmails: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "customNotificationEmails"
      },
      disabled: { type: { name: "Boolean" }, serializedName: "disabled" },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      health: { type: { name: "String" }, serializedName: "health" },
      lastDisabled: {
        type: { name: "DateTime" },
        serializedName: "lastDisabled"
      },
      lastUpdated: {
        type: { name: "DateTime" },
        serializedName: "lastUpdated"
      },
      monitoringConfigurationsComputed: {
        type: { name: "any" },
        serializedName: "monitoringConfigurationsComputed"
      },
      monitoringConfigurationsCustomized: {
        type: { name: "any" },
        serializedName: "monitoringConfigurationsCustomized"
      },
      notificationEmailEnabled: {
        type: { name: "Boolean" },
        serializedName: "notificationEmailEnabled"
      },
      notificationEmailEnabledForGlobalAdmins: {
        type: { name: "Boolean" },
        serializedName: "notificationEmailEnabledForGlobalAdmins"
      },
      notificationEmailsEnabledForGlobalAdmins: {
        type: { name: "Boolean" },
        serializedName: "notificationEmailsEnabledForGlobalAdmins"
      },
      notificationEmails: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "notificationEmails"
      },
      originalDisabledState: {
        type: { name: "Boolean" },
        serializedName: "originalDisabledState"
      },
      resolvedAlerts: {
        type: { name: "Number" },
        serializedName: "resolvedAlerts"
      },
      serviceId: { type: { name: "String" }, serializedName: "serviceId" },
      serviceName: { type: { name: "String" }, serializedName: "serviceName" },
      signature: { type: { name: "String" }, serializedName: "signature" },
      simpleProperties: {
        type: { name: "any" },
        serializedName: "simpleProperties"
      },
      tenantId: { type: { name: "String" }, serializedName: "tenantId" },
      type: { type: { name: "String" }, serializedName: "type" }
    }
  }
};

export const Alerts: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Alerts",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Alert" } }
        },
        serializedName: "value"
      },
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const Alert: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      alertId: { type: { name: "Uuid" }, serializedName: "alertId" },
      level: { type: { name: "String" }, serializedName: "level" },
      state: { type: { name: "String" }, serializedName: "state" },
      shortName: { type: { name: "String" }, serializedName: "shortName" },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      description: { type: { name: "String" }, serializedName: "description" },
      remediation: { type: { name: "String" }, serializedName: "remediation" },
      relatedLinks: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HelpLink" } }
        },
        serializedName: "relatedLinks"
      },
      scope: { type: { name: "String" }, serializedName: "scope" },
      additionalInformation: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AdditionalInformation" }
          }
        },
        serializedName: "additionalInformation"
      },
      createdDate: {
        type: { name: "DateTime" },
        serializedName: "createdDate"
      },
      resolvedDate: {
        type: { name: "DateTime" },
        serializedName: "resolvedDate"
      },
      lastUpdated: {
        type: { name: "DateTime" },
        serializedName: "lastUpdated"
      },
      monitorRoleType: {
        type: { name: "String" },
        serializedName: "monitorRoleType"
      },
      activeAlertProperties: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "activeAlertProperties"
      },
      resolvedAlertProperties: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "resolvedAlertProperties"
      },
      tenantId: { type: { name: "Uuid" }, serializedName: "tenantId" },
      serviceId: { type: { name: "Uuid" }, serializedName: "serviceId" },
      serviceMemberId: {
        type: { name: "Uuid" },
        serializedName: "serviceMemberId"
      }
    }
  }
};

export const HelpLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HelpLink",
    modelProperties: {
      title: { type: { name: "String" }, serializedName: "title" },
      url: { type: { name: "String" }, serializedName: "url" }
    }
  }
};

export const AdditionalInformation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdditionalInformation",
    modelProperties: {
      titleName: { type: { name: "String" }, serializedName: "titleName" },
      titleValue: { type: { name: "String" }, serializedName: "titleValue" },
      properties: { type: { name: "any" }, serializedName: "properties" },
      hasProperties: {
        type: { name: "Boolean" },
        serializedName: "hasProperties"
      }
    }
  }
};

export const Item: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Item",
    modelProperties: {
      key: { type: { name: "String" }, serializedName: "key" },
      value: { type: { name: "String" }, serializedName: "value" }
    }
  }
};

export const AddsConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddsConfiguration",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const Dimensions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimensions",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Dimension" } }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const Dimension: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      health: { type: { name: "String" }, serializedName: "health" },
      simpleProperties: {
        type: { name: "any" },
        serializedName: "simpleProperties"
      },
      activeAlerts: {
        type: { name: "Number" },
        serializedName: "activeAlerts"
      },
      additionalInformation: {
        type: { name: "String" },
        serializedName: "additionalInformation"
      },
      lastUpdated: {
        type: { name: "DateTime" },
        serializedName: "lastUpdated"
      },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      resolvedAlerts: {
        type: { name: "Number" },
        serializedName: "resolvedAlerts"
      },
      signature: { type: { name: "String" }, serializedName: "signature" },
      type: { type: { name: "String" }, serializedName: "type" }
    }
  }
};

export const AddsServiceMembers: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddsServiceMembers",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AddsServiceMember" }
          }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const AddsServiceMember: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddsServiceMember",
    modelProperties: {
      domainName: { type: { name: "String" }, serializedName: "domainName" },
      siteName: { type: { name: "String" }, serializedName: "siteName" },
      addsRoles: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "addsRoles"
      },
      gcReachable: { type: { name: "Boolean" }, serializedName: "gcReachable" },
      isAdvertising: {
        type: { name: "Boolean" },
        serializedName: "isAdvertising"
      },
      pdcReachable: {
        type: { name: "Boolean" },
        serializedName: "pdcReachable"
      },
      sysvolState: { type: { name: "Boolean" }, serializedName: "sysvolState" },
      dcTypes: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "dcTypes"
      },
      serviceMemberId: {
        type: { name: "String" },
        serializedName: "serviceMemberId"
      },
      serviceId: { type: { name: "String" }, serializedName: "serviceId" },
      tenantId: { type: { name: "String" }, serializedName: "tenantId" },
      activeAlerts: {
        type: { name: "Number" },
        serializedName: "activeAlerts"
      },
      additionalInformation: {
        type: { name: "String" },
        serializedName: "additionalInformation"
      },
      createdDate: {
        type: { name: "DateTime" },
        serializedName: "createdDate"
      },
      dimensions: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "dimensions"
      },
      disabled: { type: { name: "Boolean" }, serializedName: "disabled" },
      disabledReason: {
        type: { name: "Number" },
        serializedName: "disabledReason"
      },
      installedQfes: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Hotfix" } }
        },
        serializedName: "installedQfes"
      },
      lastDisabled: {
        type: { name: "DateTime" },
        serializedName: "lastDisabled"
      },
      lastReboot: { type: { name: "DateTime" }, serializedName: "lastReboot" },
      lastServerReportedMonitoringLevelChange: {
        type: { name: "DateTime" },
        serializedName: "lastServerReportedMonitoringLevelChange"
      },
      lastUpdated: {
        type: { name: "DateTime" },
        serializedName: "lastUpdated"
      },
      machineId: { type: { name: "String" }, serializedName: "machineId" },
      machineName: { type: { name: "String" }, serializedName: "machineName" },
      monitoringConfigurationsComputed: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "monitoringConfigurationsComputed"
      },
      monitoringConfigurationsCustomized: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "monitoringConfigurationsCustomized"
      },
      osName: { type: { name: "String" }, serializedName: "osName" },
      osVersion: { type: { name: "String" }, serializedName: "osVersion" },
      properties: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "properties"
      },
      recommendedQfes: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Hotfix" } }
        },
        serializedName: "recommendedQfes"
      },
      resolvedAlerts: {
        type: { name: "Number" },
        serializedName: "resolvedAlerts"
      },
      role: { type: { name: "String" }, serializedName: "role" },
      serverReportedMonitoringLevel: {
        type: { name: "Enum", allowedValues: ["Partial", "Full", "Off"] },
        serializedName: "serverReportedMonitoringLevel"
      },
      status: { type: { name: "String" }, serializedName: "status" }
    }
  }
};

export const Hotfix: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Hotfix",
    modelProperties: {
      kbName: { type: { name: "String" }, serializedName: "kbName" },
      link: { type: { name: "String" }, serializedName: "link" },
      installedDate: {
        type: { name: "DateTime" },
        serializedName: "installedDate"
      }
    }
  }
};

export const UserPreference: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserPreference",
    modelProperties: {
      metricNames: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "metricNames"
      }
    }
  }
};

export const ForestSummary: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForestSummary",
    modelProperties: {
      forestName: { type: { name: "String" }, serializedName: "forestName" },
      domainCount: { type: { name: "Number" }, serializedName: "domainCount" },
      siteCount: { type: { name: "Number" }, serializedName: "siteCount" },
      monitoredDcCount: {
        type: { name: "Number" },
        serializedName: "monitoredDcCount"
      },
      totalDcCount: {
        type: { name: "Number" },
        serializedName: "totalDcCount"
      },
      domains: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "domains"
      },
      sites: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "sites"
      }
    }
  }
};

export const MetricSets: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSets",
    modelProperties: {
      sets: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricSet" } }
        },
        serializedName: "sets"
      },
      timeStamps: {
        type: { name: "Sequence", element: { type: { name: "DateTime" } } },
        serializedName: "timeStamps"
      }
    }
  }
};

export const MetricSet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSet",
    modelProperties: {
      setName: { type: { name: "String" }, serializedName: "setName" },
      values: {
        type: { name: "Sequence", element: { type: { name: "Number" } } },
        serializedName: "values"
      }
    }
  }
};

export const Metrics: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const MetricMetadataList: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricMetadataList",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricMetadata" } }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const MetricMetadata: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricMetadata",
    modelProperties: {
      metricsProcessorClassName: {
        type: { name: "String" },
        serializedName: "metricsProcessorClassName"
      },
      metricName: { type: { name: "String" }, serializedName: "metricName" },
      groupings: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricGroup" } }
        },
        serializedName: "groupings"
      },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      valueKind: { type: { name: "String" }, serializedName: "valueKind" },
      minValue: { type: { name: "Number" }, serializedName: "minValue" },
      maxValue: { type: { name: "Number" }, serializedName: "maxValue" },
      kind: { type: { name: "String" }, serializedName: "kind" },
      isDefault: { type: { name: "Boolean" }, serializedName: "isDefault" },
      isPerfCounter: {
        type: { name: "Boolean" },
        serializedName: "isPerfCounter"
      },
      isDevOps: { type: { name: "Boolean" }, serializedName: "isDevOps" }
    }
  }
};

export const MetricGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricGroup",
    modelProperties: {
      key: { type: { name: "String" }, serializedName: "key" },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      invisibleForUi: {
        type: { name: "Boolean" },
        serializedName: "invisibleForUi"
      }
    }
  }
};

export const ReplicationDetailsList: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationDetailsList",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReplicationSummary" }
          }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      },
      nextLink: { type: { name: "String" }, serializedName: "nextLink" }
    }
  }
};

export const ReplicationSummary: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationSummary",
    modelProperties: {
      targetServer: {
        type: { name: "String" },
        serializedName: "targetServer"
      },
      site: { type: { name: "String" }, serializedName: "site" },
      domain: { type: { name: "String" }, serializedName: "domain" },
      status: { type: { name: "Number" }, serializedName: "status" },
      lastAttemptedSync: {
        type: { name: "DateTime" },
        serializedName: "lastAttemptedSync"
      },
      lastSuccessfulSync: {
        type: { name: "DateTime" },
        serializedName: "lastSuccessfulSync"
      },
      inboundNeighborCollection: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "InboundReplicationNeighbor" }
          }
        },
        serializedName: "inboundNeighborCollection"
      }
    }
  }
};

export const InboundReplicationNeighbor: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundReplicationNeighbor",
    modelProperties: {
      sourceDomainController: {
        type: { name: "String" },
        serializedName: "sourceDomainController"
      },
      consecutiveFailureCount: {
        type: { name: "Number" },
        serializedName: "consecutiveFailureCount"
      },
      namingContext: {
        type: { name: "String" },
        serializedName: "namingContext"
      },
      status: { type: { name: "Number" }, serializedName: "status" },
      lastAttemptedSync: {
        type: { name: "DateTime" },
        serializedName: "lastAttemptedSync"
      },
      lastSuccessfulSync: {
        type: { name: "DateTime" },
        serializedName: "lastSuccessfulSync"
      },
      lastErrorCode: {
        type: { name: "Number" },
        serializedName: "lastErrorCode"
      },
      lastErrorMessage: {
        type: { name: "String" },
        serializedName: "lastErrorMessage"
      },
      errorTitle: { type: { name: "String" }, serializedName: "errorTitle" },
      errorDescription: {
        type: { name: "String" },
        serializedName: "errorDescription"
      },
      fixLink: { type: { name: "String" }, serializedName: "fixLink" },
      fixDetails: { type: { name: "String" }, serializedName: "fixDetails" },
      additionalInfo: {
        type: { name: "String" },
        serializedName: "additionalInfo"
      }
    }
  }
};

export const ReplicationStatus: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationStatus",
    modelProperties: {
      forestName: { type: { name: "String" }, serializedName: "forestName" },
      totalDcCount: {
        type: { name: "Number" },
        serializedName: "totalDcCount"
      },
      errorDcCount: { type: { name: "Number" }, serializedName: "errorDcCount" }
    }
  }
};

export const ReplicationSummaryList: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationSummaryList",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReplicationSummary" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const ServiceMembers: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceMembers",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ServiceMember" } }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const ServiceMember: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceMember",
    modelProperties: {
      serviceMemberId: {
        type: { name: "String" },
        serializedName: "serviceMemberId"
      },
      serviceId: { type: { name: "String" }, serializedName: "serviceId" },
      tenantId: { type: { name: "String" }, serializedName: "tenantId" },
      activeAlerts: {
        type: { name: "Number" },
        serializedName: "activeAlerts"
      },
      additionalInformation: {
        type: { name: "String" },
        serializedName: "additionalInformation"
      },
      createdDate: {
        type: { name: "DateTime" },
        serializedName: "createdDate"
      },
      dimensions: { type: { name: "any" }, serializedName: "dimensions" },
      disabled: { type: { name: "Boolean" }, serializedName: "disabled" },
      disabledReason: {
        type: { name: "Number" },
        serializedName: "disabledReason"
      },
      installedQfes: { type: { name: "any" }, serializedName: "installedQfes" },
      lastDisabled: {
        type: { name: "DateTime" },
        serializedName: "lastDisabled"
      },
      lastReboot: { type: { name: "DateTime" }, serializedName: "lastReboot" },
      lastServerReportedMonitoringLevelChange: {
        type: { name: "DateTime" },
        serializedName: "lastServerReportedMonitoringLevelChange"
      },
      lastUpdated: {
        type: { name: "DateTime" },
        serializedName: "lastUpdated"
      },
      machineId: { type: { name: "String" }, serializedName: "machineId" },
      machineName: { type: { name: "String" }, serializedName: "machineName" },
      monitoringConfigurationsComputed: {
        type: { name: "any" },
        serializedName: "monitoringConfigurationsComputed"
      },
      monitoringConfigurationsCustomized: {
        type: { name: "any" },
        serializedName: "monitoringConfigurationsCustomized"
      },
      osName: { type: { name: "String" }, serializedName: "osName" },
      osVersion: { type: { name: "String" }, serializedName: "osVersion" },
      properties: { type: { name: "any" }, serializedName: "properties" },
      recommendedQfes: {
        type: { name: "any" },
        serializedName: "recommendedQfes"
      },
      resolvedAlerts: {
        type: { name: "Number" },
        serializedName: "resolvedAlerts"
      },
      role: { type: { name: "String" }, serializedName: "role" },
      serverReportedMonitoringLevel: {
        type: { name: "Enum", allowedValues: ["Partial", "Full", "Off"] },
        serializedName: "serverReportedMonitoringLevel"
      },
      status: { type: { name: "String" }, serializedName: "status" }
    }
  }
};

export const Credentials: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Credentials",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Credential" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const Credential: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Credential",
    modelProperties: {
      identifier: { type: { name: "String" }, serializedName: "identifier" },
      type: { type: { name: "String" }, serializedName: "type" },
      credentialData: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "credentialData"
      }
    }
  }
};

export const OperationListResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResponse",
    modelProperties: {
      nextLink: {
        type: { name: "String" },
        serializedName: "nextLink",
        readOnly: true
      },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        },
        serializedName: "value",
        readOnly: true
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: { type: { name: "String" }, serializedName: "name" },
      display: { type: { name: "any" }, serializedName: "display" }
    }
  }
};

export const Tenant: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Tenant",
    modelProperties: {
      tenantId: { type: { name: "String" }, serializedName: "tenantId" },
      aadLicense: { type: { name: "String" }, serializedName: "aadLicense" },
      aadPremium: { type: { name: "Boolean" }, serializedName: "aadPremium" },
      agentAutoUpdate: {
        type: { name: "Boolean" },
        serializedName: "agentAutoUpdate"
      },
      alertSuppressionTimeInMins: {
        type: { name: "Number" },
        serializedName: "alertSuppressionTimeInMins"
      },
      consentedToMicrosoftDevOps: {
        type: { name: "Boolean" },
        serializedName: "consentedToMicrosoftDevOps"
      },
      countryLetterCode: {
        type: { name: "String" },
        serializedName: "countryLetterCode"
      },
      createdDate: {
        type: { name: "DateTime" },
        serializedName: "createdDate"
      },
      devOpsTtl: { type: { name: "DateTime" }, serializedName: "devOpsTtl" },
      disabled: { type: { name: "Boolean" }, serializedName: "disabled" },
      disabledReason: {
        type: { name: "Number" },
        serializedName: "disabledReason"
      },
      globalAdminsEmail: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "globalAdminsEmail"
      },
      initialDomain: {
        type: { name: "String" },
        serializedName: "initialDomain"
      },
      lastDisabled: {
        type: { name: "DateTime" },
        serializedName: "lastDisabled"
      },
      lastVerified: {
        type: { name: "DateTime" },
        serializedName: "lastVerified"
      },
      onboardingAllowed: {
        type: { name: "Boolean" },
        serializedName: "onboardingAllowed"
      },
      onboarded: { type: { name: "Boolean" }, serializedName: "onboarded" },
      pksCertificate: {
        type: { name: "any" },
        serializedName: "pksCertificate"
      },
      privatePreviewTenant: {
        type: { name: "Boolean" },
        serializedName: "privatePreviewTenant"
      },
      tenantInQuarantine: {
        type: { name: "Boolean" },
        serializedName: "tenantInQuarantine"
      },
      tenantName: { type: { name: "String" }, serializedName: "tenantName" }
    }
  }
};

export const Result: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Result",
    modelProperties: {
      value: { type: { name: "Boolean" }, serializedName: "value" }
    }
  }
};

export const ErrorCounts: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorCounts",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorCount" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const ErrorCount: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorCount",
    modelProperties: {
      errorBucket: { type: { name: "String" }, serializedName: "errorBucket" },
      count: { type: { name: "Number" }, serializedName: "count" },
      truncated: { type: { name: "Boolean" }, serializedName: "truncated" }
    }
  }
};

export const MergedExportErrors: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MergedExportErrors",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MergedExportError" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const MergedExportError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MergedExportError",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      incomingObjectDisplayName: {
        type: { name: "String" },
        serializedName: "incomingObjectDisplayName"
      },
      incomingObjectType: {
        type: { name: "String" },
        serializedName: "incomingObjectType"
      },
      userPrincipalName: {
        type: { name: "String" },
        serializedName: "userPrincipalName"
      },
      type: { type: { name: "String" }, serializedName: "type" },
      attributeName: {
        type: { name: "String" },
        serializedName: "attributeName"
      },
      attributeValue: {
        type: { name: "String" },
        serializedName: "attributeValue"
      },
      timeOccurred: {
        type: { name: "DateTime" },
        serializedName: "timeOccurred"
      },
      timeFirstOccurred: {
        type: { name: "DateTime" },
        serializedName: "timeFirstOccurred"
      },
      csObjectId: { type: { name: "String" }, serializedName: "csObjectId" },
      dn: { type: { name: "String" }, serializedName: "dn" },
      incomingObject: {
        serializedName: "incomingObject",
        type: { name: "Composite", className: "AssociatedObject" }
      },
      existingObject: {
        serializedName: "existingObject",
        type: { name: "Composite", className: "AssociatedObject" }
      },
      modifiedOrRemovedAttributeValue: {
        type: { name: "String" },
        serializedName: "modifiedOrRemovedAttributeValue"
      },
      runStepResultId: {
        type: { name: "Uuid" },
        serializedName: "runStepResultId"
      },
      samAccountName: {
        type: { name: "String" },
        serializedName: "samAccountName"
      },
      serverErrorDetail: {
        type: { name: "String" },
        serializedName: "serverErrorDetail"
      },
      serviceId: { type: { name: "Uuid" }, serializedName: "serviceId" },
      serviceMemberId: {
        type: { name: "Uuid" },
        serializedName: "serviceMemberId"
      },
      mergedEntityId: {
        type: { name: "Uuid" },
        serializedName: "mergedEntityId"
      },
      createdDate: {
        type: { name: "DateTime" },
        serializedName: "createdDate"
      },
      exportErrorStatus: {
        type: { name: "Number" },
        serializedName: "exportErrorStatus"
      }
    }
  }
};

export const AssociatedObject: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssociatedObject",
    modelProperties: {
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      distinguishedName: {
        type: { name: "String" },
        serializedName: "distinguishedName"
      },
      lastDirSyncTime: {
        type: { name: "DateTime" },
        serializedName: "lastDirSyncTime"
      },
      mail: { type: { name: "String" }, serializedName: "mail" },
      objectGuid: { type: { name: "String" }, serializedName: "objectGuid" },
      objectType: { type: { name: "String" }, serializedName: "objectType" },
      onpremisesUserPrincipalName: {
        type: { name: "String" },
        serializedName: "onpremisesUserPrincipalName"
      },
      proxyAddresses: {
        type: { name: "String" },
        serializedName: "proxyAddresses"
      },
      sourceAnchor: {
        type: { name: "String" },
        serializedName: "sourceAnchor"
      },
      sourceOfAuthority: {
        type: { name: "String" },
        serializedName: "sourceOfAuthority"
      },
      timeOccurred: {
        type: { name: "DateTime" },
        serializedName: "timeOccurred"
      },
      userPrincipalName: {
        type: { name: "String" },
        serializedName: "userPrincipalName"
      }
    }
  }
};

export const ExportStatuses: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportStatuses",
    modelProperties: {
      nextLink: { type: { name: "String" }, serializedName: "nextLink" },
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ExportStatus" } }
        },
        serializedName: "value"
      },
      totalCount: { type: { name: "Number" }, serializedName: "totalCount" },
      continuationToken: {
        type: { name: "String" },
        serializedName: "continuationToken"
      }
    }
  }
};

export const ExportStatus: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportStatus",
    modelProperties: {
      serviceId: { type: { name: "Uuid" }, serializedName: "serviceId" },
      serviceMemberId: {
        type: { name: "Uuid" },
        serializedName: "serviceMemberId"
      },
      endTime: { type: { name: "DateTime" }, serializedName: "endTime" },
      runStepResultId: {
        type: { name: "String" },
        serializedName: "runStepResultId"
      }
    }
  }
};

export const AlertFeedback: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertFeedback",
    modelProperties: {
      level: { type: { name: "String" }, serializedName: "level" },
      state: { type: { name: "String" }, serializedName: "state" },
      shortName: { type: { name: "String" }, serializedName: "shortName" },
      feedback: { type: { name: "String" }, serializedName: "feedback" },
      comment: { type: { name: "String" }, serializedName: "comment" },
      consentedToShare: {
        type: { name: "Boolean" },
        serializedName: "consentedToShare"
      },
      serviceMemberId: {
        type: { name: "String" },
        serializedName: "serviceMemberId"
      },
      createdDate: { type: { name: "DateTime" }, serializedName: "createdDate" }
    }
  }
};

export const AlertFeedbacks: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertFeedbacks",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AlertFeedback" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const Items: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Items",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const ErrorReportUsersEntries: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorReportUsersEntries",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ErrorReportUsersEntry" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const ErrorReportUsersEntry: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorReportUsersEntry",
    modelProperties: {
      userId: { type: { name: "String" }, serializedName: "userId" },
      ipAddress: { type: { name: "String" }, serializedName: "ipAddress" },
      lastUpdated: {
        type: { name: "DateTime" },
        serializedName: "lastUpdated"
      },
      uniqueIpAddresses: {
        type: { name: "String" },
        serializedName: "uniqueIpAddresses"
      },
      totalErrorAttempts: {
        type: { name: "Number" },
        serializedName: "totalErrorAttempts"
      }
    }
  }
};

export const Connectors: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Connectors",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Connector" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const Connector: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Connector",
    modelProperties: {
      connectorId: { type: { name: "String" }, serializedName: "connectorId" },
      id: { type: { name: "String" }, serializedName: "id" },
      name: { type: { name: "String" }, serializedName: "name" },
      version: { type: { name: "Number" }, serializedName: "version" },
      type: { type: { name: "String" }, serializedName: "type" },
      description: { type: { name: "String" }, serializedName: "description" },
      schemaXml: { type: { name: "String" }, serializedName: "schemaXml" },
      passwordManagementSettings: {
        type: { name: "any" },
        serializedName: "passwordManagementSettings"
      },
      passwordHashSyncConfiguration: {
        type: { name: "any" },
        serializedName: "passwordHashSyncConfiguration"
      },
      timeCreated: {
        type: { name: "DateTime" },
        serializedName: "timeCreated"
      },
      timeLastModified: {
        type: { name: "DateTime" },
        serializedName: "timeLastModified"
      },
      partitions: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Partition" } }
        },
        serializedName: "partitions"
      },
      runProfiles: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RunProfile" } }
        },
        serializedName: "runProfiles"
      },
      classesIncluded: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "classesIncluded"
      },
      attributesIncluded: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "attributesIncluded"
      }
    }
  }
};

export const Partition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Partition",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      dn: { type: { name: "String" }, serializedName: "dn" },
      enabled: { type: { name: "Boolean" }, serializedName: "enabled" },
      timeCreated: {
        type: { name: "DateTime" },
        serializedName: "timeCreated"
      },
      timeLastModified: {
        type: { name: "DateTime" },
        serializedName: "timeLastModified"
      },
      partitionScope: {
        serializedName: "partitionScope",
        type: { name: "Composite", className: "PartitionScope" }
      },
      name: { type: { name: "String" }, serializedName: "name" },
      isDomain: { type: { name: "Boolean" }, serializedName: "isDomain" },
      type: { type: { name: "String" }, serializedName: "type" }
    }
  }
};

export const PartitionScope: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionScope",
    modelProperties: {
      isDefault: { type: { name: "Boolean" }, serializedName: "isDefault" },
      objectClasses: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "objectClasses"
      },
      containersIncluded: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "containersIncluded"
      },
      containersExcluded: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "containersExcluded"
      }
    }
  }
};

export const RunProfile: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunProfile",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      name: { type: { name: "String" }, serializedName: "name" },
      runSteps: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RunStep" } }
        },
        serializedName: "runSteps"
      }
    }
  }
};

export const RunStep: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunStep",
    modelProperties: {
      batchSize: { type: { name: "Number" }, serializedName: "batchSize" },
      objectProcessLimit: {
        type: { name: "Number" },
        serializedName: "objectProcessLimit"
      },
      objectDeleteLimit: {
        type: { name: "Number" },
        serializedName: "objectDeleteLimit"
      },
      pageSize: { type: { name: "Number" }, serializedName: "pageSize" },
      partitionId: { type: { name: "String" }, serializedName: "partitionId" },
      operationType: {
        type: { name: "Number" },
        serializedName: "operationType"
      },
      timeout: { type: { name: "Number" }, serializedName: "timeout" }
    }
  }
};

export const DataFreshnessDetails: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataFreshnessDetails",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const GlobalConfigurations: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GlobalConfigurations",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "GlobalConfiguration" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const GlobalConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GlobalConfiguration",
    modelProperties: {
      version: { type: { name: "Number" }, serializedName: "version" },
      schemaXml: { type: { name: "String" }, serializedName: "schemaXml" },
      passwordSyncEnabled: {
        type: { name: "Boolean" },
        serializedName: "passwordSyncEnabled"
      },
      numSavedPwdEvent: {
        type: { name: "Number" },
        serializedName: "numSavedPwdEvent"
      },
      featureSet: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Item" } }
        },
        serializedName: "featureSet"
      }
    }
  }
};

export const ServiceConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceConfiguration",
    modelProperties: {
      version: { type: { name: "String" }, serializedName: "version" },
      serviceType: { type: { name: "Number" }, serializedName: "serviceType" },
      serviceAccount: {
        type: { name: "String" },
        serializedName: "serviceAccount"
      },
      sqlServer: { type: { name: "String" }, serializedName: "sqlServer" },
      sqlVersion: { type: { name: "String" }, serializedName: "sqlVersion" },
      sqlEdition: { type: { name: "String" }, serializedName: "sqlEdition" },
      sqlInstance: { type: { name: "String" }, serializedName: "sqlInstance" },
      sqlDatabaseName: {
        type: { name: "String" },
        serializedName: "sqlDatabaseName"
      },
      sqlDatabaseSize: {
        type: { name: "Number" },
        serializedName: "sqlDatabaseSize"
      }
    }
  }
};

export const RiskyIPBlobUris: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RiskyIPBlobUris",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RiskyIPBlobUri" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const RiskyIPBlobUri: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RiskyIPBlobUri",
    modelProperties: {
      tenantId: { type: { name: "String" }, serializedName: "tenantId" },
      serviceId: { type: { name: "String" }, serializedName: "serviceId" },
      resultSasUri: {
        type: { name: "String" },
        serializedName: "resultSasUri"
      },
      blobCreateDateTime: {
        type: { name: "DateTime" },
        serializedName: "blobCreateDateTime"
      },
      jobCompletionTime: {
        type: { name: "DateTime" },
        serializedName: "jobCompletionTime"
      },
      status: { type: { name: "String" }, serializedName: "status" }
    }
  }
};

export const ConnectorMetadata: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorMetadata",
    modelProperties: {
      connectors: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectorMetadataDetails" }
          }
        },
        serializedName: "connectors"
      },
      runProfileNames: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "runProfileNames"
      }
    }
  }
};

export const ConnectorMetadataDetails: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorMetadataDetails",
    modelProperties: {
      connectorId: { type: { name: "String" }, serializedName: "connectorId" },
      connectorDisplayName: {
        type: { name: "String" },
        serializedName: "connectorDisplayName"
      }
    }
  }
};

export const Agent: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Agent",
    modelProperties: {
      tenantId: { type: { name: "String" }, serializedName: "tenantId" },
      machineId: { type: { name: "String" }, serializedName: "machineId" },
      credential: { type: { name: "any" }, serializedName: "credential" },
      machineName: { type: { name: "String" }, serializedName: "machineName" },
      agentVersion: {
        type: { name: "String" },
        serializedName: "agentVersion"
      },
      createdDate: {
        type: { name: "DateTime" },
        serializedName: "createdDate"
      },
      key: { type: { name: "String" }, serializedName: "key" }
    }
  }
};

export const AttributeDelta: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttributeDelta",
    modelProperties: {
      values: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ValueDelta" } }
        },
        serializedName: "values"
      },
      name: { type: { name: "String" }, serializedName: "name" },
      operationType: {
        type: { name: "String" },
        serializedName: "operationType"
      },
      valueType: { type: { name: "String" }, serializedName: "valueType" },
      multiValued: { type: { name: "Boolean" }, serializedName: "multiValued" }
    }
  }
};

export const ValueDelta: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValueDelta",
    modelProperties: {
      operationType: {
        type: { name: "String" },
        serializedName: "operationType"
      },
      value: { type: { name: "String" }, serializedName: "value" }
    }
  }
};

export const AttributeMapping: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttributeMapping",
    modelProperties: {
      mappingSource: {
        serializedName: "mappingSource",
        type: { name: "Composite", className: "AttributeMppingSource" }
      },
      type: { type: { name: "String" }, serializedName: "type" },
      destinationAttribute: {
        type: { name: "String" },
        serializedName: "destinationAttribute"
      },
      contextId: { type: { name: "String" }, serializedName: "contextId" }
    }
  }
};

export const AttributeMppingSource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttributeMppingSource",
    modelProperties: {
      sourceAttribute: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "sourceAttribute"
      },
      dnPart: { type: { name: "Number" }, serializedName: "dnPart" },
      scriptContext: {
        type: { name: "String" },
        serializedName: "scriptContext"
      },
      constantValue: {
        type: { name: "String" },
        serializedName: "constantValue"
      }
    }
  }
};

export const ChangeNotReimported: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeNotReimported",
    modelProperties: {
      delta: {
        serializedName: "delta",
        type: { name: "Composite", className: "ChangeNotReimportedDelta" }
      },
      entry: {
        serializedName: "entry",
        type: { name: "Composite", className: "ChangeNotReimportedEntry" }
      }
    }
  }
};

export const ChangeNotReimportedDelta: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeNotReimportedDelta",
    modelProperties: {
      anchor: { type: { name: "String" }, serializedName: "anchor" },
      dnAttributes: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AttributeDelta" } }
        },
        serializedName: "dnAttributes"
      },
      attributes: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AttributeDelta" } }
        },
        serializedName: "attributes"
      },
      operationType: {
        type: { name: "String" },
        serializedName: "operationType"
      }
    }
  }
};

export const ChangeNotReimportedEntry: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeNotReimportedEntry",
    modelProperties: {
      anchor: { type: { name: "String" }, serializedName: "anchor" },
      parentAnchor: {
        type: { name: "String" },
        serializedName: "parentAnchor"
      },
      primaryObjectClass: {
        type: { name: "String" },
        serializedName: "primaryObjectClass"
      },
      objectClasses: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "objectClasses"
      },
      dnAttributes: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AttributeDelta" } }
        },
        serializedName: "dnAttributes"
      },
      attributes: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AttributeDelta" } }
        },
        serializedName: "attributes"
      },
      dn: { type: { name: "String" }, serializedName: "dn" }
    }
  }
};

export const ConnectorConnectionError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorConnectionError",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      runStepResultId: {
        type: { name: "String" },
        serializedName: "runStepResultId"
      },
      connectorId: { type: { name: "String" }, serializedName: "connectorId" },
      type: { type: { name: "String" }, serializedName: "type" },
      errorCode: { type: { name: "String" }, serializedName: "errorCode" },
      message: { type: { name: "String" }, serializedName: "message" },
      timeOccured: {
        type: { name: "DateTime" },
        serializedName: "timeOccured"
      },
      server: { type: { name: "String" }, serializedName: "server" }
    }
  }
};

export const ConnectorConnectionErrors: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorConnectionErrors",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectorConnectionError" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const ConnectorObjectError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorObjectError",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      runStepResultId: {
        type: { name: "String" },
        serializedName: "runStepResultId"
      },
      connectorId: { type: { name: "String" }, serializedName: "connectorId" },
      type: { type: { name: "String" }, serializedName: "type" },
      errorCode: { type: { name: "String" }, serializedName: "errorCode" },
      message: { type: { name: "String" }, serializedName: "message" },
      entryNumber: { type: { name: "Number" }, serializedName: "entryNumber" },
      lineNumber: { type: { name: "Number" }, serializedName: "lineNumber" },
      columnNumber: {
        type: { name: "Number" },
        serializedName: "columnNumber"
      },
      dn: { type: { name: "String" }, serializedName: "dn" },
      anchor: { type: { name: "String" }, serializedName: "anchor" },
      attributeName: {
        type: { name: "String" },
        serializedName: "attributeName"
      },
      serverErrorDetail: {
        type: { name: "String" },
        serializedName: "serverErrorDetail"
      },
      values: {
        type: { name: "Sequence", element: { type: { name: "String" } } },
        serializedName: "values"
      }
    }
  }
};

export const ConnectorObjectErrors: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorObjectErrors",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ConnectorObjectError" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      description: { type: { name: "String" }, serializedName: "description" },
      operation: { type: { name: "String" }, serializedName: "operation" },
      provider: { type: { name: "String" }, serializedName: "provider" }
    }
  }
};

export const ErrorDetail: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      description: { type: { name: "String" }, serializedName: "description" },
      kbUrl: { type: { name: "String" }, serializedName: "kbUrl" },
      detail: { type: { name: "String" }, serializedName: "detail" },
      objectsWithSyncError: {
        serializedName: "objectsWithSyncError",
        type: { name: "Composite", className: "ObjectWithSyncError" }
      },
      objectWithSyncError: {
        serializedName: "objectWithSyncError",
        type: { name: "Composite", className: "MergedExportError" }
      }
    }
  }
};

export const ObjectWithSyncError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectWithSyncError",
    modelProperties: {
      sourceOfAuthority: {
        type: { name: "String" },
        serializedName: "sourceOfAuthority"
      },
      displayName: { type: { name: "String" }, serializedName: "displayName" },
      objectType: { type: { name: "String" }, serializedName: "objectType" },
      attributeName: {
        type: { name: "String" },
        serializedName: "attributeName"
      },
      attributeValue: {
        type: { name: "String" },
        serializedName: "attributeValue"
      },
      modififedValue: {
        type: { name: "String" },
        serializedName: "modififedValue"
      },
      userPrincipalName: {
        type: { name: "String" },
        serializedName: "userPrincipalName"
      },
      objectGuid: { type: { name: "String" }, serializedName: "objectGuid" },
      attributeMultiValues: {
        type: { name: "Boolean" },
        serializedName: "attributeMultiValues"
      },
      minLimit: { type: { name: "String" }, serializedName: "minLimit" },
      maxLimit: { type: { name: "String" }, serializedName: "maxLimit" },
      distinguishedName: {
        type: { name: "String" },
        serializedName: "distinguishedName"
      },
      mail: { type: { name: "String" }, serializedName: "mail" },
      timeOccured: {
        type: { name: "DateTime" },
        serializedName: "timeOccured"
      },
      errorType: { type: { name: "String" }, serializedName: "errorType" },
      sourceAnchor: { type: { name: "String" }, serializedName: "sourceAnchor" }
    }
  }
};

export const ExportError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportError",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      runStepResultId: {
        type: { name: "String" },
        serializedName: "runStepResultId"
      },
      connectorId: { type: { name: "String" }, serializedName: "connectorId" },
      type: { type: { name: "String" }, serializedName: "type" },
      errorCode: { type: { name: "String" }, serializedName: "errorCode" },
      message: { type: { name: "String" }, serializedName: "message" },
      serverErrorDetail: {
        type: { name: "String" },
        serializedName: "serverErrorDetail"
      },
      timeFirstOccured: {
        type: { name: "DateTime" },
        serializedName: "timeFirstOccured"
      },
      retryCount: { type: { name: "Number" }, serializedName: "retryCount" },
      csObjectId: { type: { name: "String" }, serializedName: "csObjectId" },
      dn: { type: { name: "String" }, serializedName: "dn" },
      minLimit: { type: { name: "String" }, serializedName: "minLimit" },
      maxLimit: { type: { name: "String" }, serializedName: "maxLimit" },
      cloudAnchor: { type: { name: "String" }, serializedName: "cloudAnchor" },
      attributeName: {
        type: { name: "String" },
        serializedName: "attributeName"
      },
      attributeValue: {
        type: { name: "String" },
        serializedName: "attributeValue"
      },
      attributeMultiValue: {
        type: { name: "Boolean" },
        serializedName: "attributeMultiValue"
      },
      objectIdConflict: {
        type: { name: "String" },
        serializedName: "objectIdConflict"
      },
      samAccountName: {
        type: { name: "String" },
        serializedName: "samAccountName"
      },
      adObjectType: {
        type: { name: "String" },
        serializedName: "adObjectType"
      },
      adObjectGuid: {
        type: { name: "String" },
        serializedName: "adObjectGuid"
      },
      adDisplayName: {
        type: { name: "String" },
        serializedName: "adDisplayName"
      },
      adSourceOfAuthority: {
        type: { name: "String" },
        serializedName: "adSourceOfAuthority"
      },
      adSourceAnchor: {
        type: { name: "String" },
        serializedName: "adSourceAnchor"
      },
      adUserPrincipalName: {
        type: { name: "String" },
        serializedName: "adUserPrincipalName"
      },
      adDistinguishedName: {
        type: { name: "String" },
        serializedName: "adDistinguishedName"
      },
      adMail: { type: { name: "String" }, serializedName: "adMail" },
      timeOccured: {
        type: { name: "DateTime" },
        serializedName: "timeOccured"
      },
      aadObjectType: {
        type: { name: "String" },
        serializedName: "aadObjectType"
      },
      aadObjectGuid: {
        type: { name: "String" },
        serializedName: "aadObjectGuid"
      },
      aadDisplayName: {
        type: { name: "String" },
        serializedName: "aadDisplayName"
      },
      aadSourceOfAuthority: {
        type: { name: "String" },
        serializedName: "aadSourceOfAuthority"
      },
      aadUserPrincipalName: {
        type: { name: "String" },
        serializedName: "aadUserPrincipalName"
      },
      aadDistinguishedName: {
        type: { name: "String" },
        serializedName: "aadDistinguishedName"
      },
      aadMail: { type: { name: "String" }, serializedName: "aadMail" },
      lastDirSyncTime: {
        type: { name: "DateTime" },
        serializedName: "lastDirSyncTime"
      },
      modifiedAttributeValue: {
        type: { name: "String" },
        serializedName: "modifiedAttributeValue"
      }
    }
  }
};

export const ExportErrors: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportErrors",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ExportError" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const ExtensionErrorInfo: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionErrorInfo",
    modelProperties: {
      extensionName: {
        type: { name: "String" },
        serializedName: "extensionName"
      },
      extensionContext: {
        type: { name: "String" },
        serializedName: "extensionContext"
      },
      callStack: { type: { name: "String" }, serializedName: "callStack" }
    }
  }
};

export const Hotfixes: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Hotfixes",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Hotfix" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const ImportErrors: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportErrors",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ImportError" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const ImportError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportError",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id" },
      runStepResultId: {
        type: { name: "String" },
        serializedName: "runStepResultId"
      },
      connectorId: { type: { name: "String" }, serializedName: "connectorId" },
      type: { type: { name: "String" }, serializedName: "type" },
      timeOccurred: {
        type: { name: "DateTime" },
        serializedName: "timeOccurred"
      },
      timeFirstOccurred: {
        type: { name: "DateTime" },
        serializedName: "timeFirstOccurred"
      },
      retryCount: { type: { name: "Number" }, serializedName: "retryCount" },
      algorithmStepType: {
        type: { name: "String" },
        serializedName: "algorithmStepType"
      },
      changeNotReimported: {
        serializedName: "changeNotReimported",
        type: { name: "Composite", className: "ChangeNotReimported" }
      },
      extensionErrorInfo: {
        serializedName: "extensionErrorInfo",
        type: { name: "Composite", className: "ExtensionErrorInfo" }
      },
      ruleErrorInfo: {
        serializedName: "ruleErrorInfo",
        type: { name: "Composite", className: "RuleErrorInfo" }
      },
      csObjectId: { type: { name: "String" }, serializedName: "csObjectId" },
      dn: { type: { name: "String" }, serializedName: "dn" }
    }
  }
};

export const RuleErrorInfo: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleErrorInfo",
    modelProperties: {
      attributeMapping: {
        serializedName: "attributeMapping",
        type: { name: "Composite", className: "AttributeMapping" }
      },
      connectorId: { type: { name: "String" }, serializedName: "connectorId" },
      connectorName: {
        type: { name: "String" },
        serializedName: "connectorName"
      },
      csObjectId: { type: { name: "String" }, serializedName: "csObjectId" },
      dn: { type: { name: "String" }, serializedName: "dn" }
    }
  }
};

export const InboundReplicationNeighbors: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundReplicationNeighbors",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "InboundReplicationNeighbor" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const ModuleConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModuleConfiguration",
    modelProperties: {
      agentService: {
        type: { name: "String" },
        serializedName: "agentService"
      },
      moduleName: { type: { name: "String" }, serializedName: "moduleName" },
      properties: {
        type: { name: "Dictionary", value: { type: { name: "String" } } },
        serializedName: "properties"
      }
    }
  }
};

export const ModuleConfigurations: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModuleConfigurations",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ModuleConfiguration" }
          }
        },
        serializedName: "value"
      }
    }
  }
};

export const PasswordManagementSettings: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PasswordManagementSettings",
    modelProperties: {
      enabled: { type: { name: "Boolean" }, serializedName: "enabled" },
      extensionFilePath: {
        type: { name: "String" },
        serializedName: "extensionFilePath"
      },
      connectTo: { type: { name: "String" }, serializedName: "connectTo" },
      connectionTimeout: {
        type: { name: "Number" },
        serializedName: "connectionTimeout"
      },
      user: { type: { name: "String" }, serializedName: "user" },
      supportedPasswordOperations: {
        type: { name: "String" },
        serializedName: "supportedPasswordOperations"
      },
      maximumRetryCount: {
        type: { name: "Number" },
        serializedName: "maximumRetryCount"
      },
      retryIntervalInSeconds: {
        type: { name: "Number" },
        serializedName: "retryIntervalInSeconds"
      },
      requiresSecureConnection: {
        type: { name: "Boolean" },
        serializedName: "requiresSecureConnection"
      },
      unlockAccount: {
        type: { name: "Boolean" },
        serializedName: "unlockAccount"
      }
    }
  }
};

export const PasswordHashSyncConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PasswordHashSyncConfiguration",
    modelProperties: {
      enabled: { type: { name: "Boolean" }, serializedName: "enabled" },
      target: { type: { name: "String" }, serializedName: "target" }
    }
  }
};

export const RunProfiles: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunProfiles",
    modelProperties: {
      value: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RunProfile" } }
        },
        serializedName: "value"
      }
    }
  }
};

export const TabularExportError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TabularExportError",
    modelProperties: {
      serviceId: { type: { name: "Uuid" }, serializedName: "serviceId" },
      serviceMemberId: {
        type: { name: "Uuid" },
        serializedName: "serviceMemberId"
      },
      mergedEntityId: {
        type: { name: "Uuid" },
        serializedName: "mergedEntityId"
      },
      tabularExportErrorData: {
        type: { name: "String" },
        serializedName: "tabularExportErrorData"
      }
    }
  }
};

export const TenantOnboardingDetails: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TenantOnboardingDetails",
    modelProperties: {
      tenantOnboarded: {
        type: { name: "Boolean" },
        serializedName: "tenantOnboarded"
      },
      onboardingDisplayUrl: {
        type: { name: "String" },
        serializedName: "onboardingDisplayUrl"
      }
    }
  }
};
