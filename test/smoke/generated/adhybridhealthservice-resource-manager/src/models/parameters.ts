/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const serviceType: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "serviceType"],
  mapper: {
    serializedName: "serviceType",
    type: {
      name: "String"
    }
  }
};

export const skipCount: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "skipCount"],
  mapper: {
    serializedName: "skipCount",
    type: {
      name: "Number"
    }
  }
};

export const takeCount: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "takeCount"],
  mapper: {
    serializedName: "takeCount",
    type: {
      name: "Number"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2014-01-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const service: coreHttp.OperationParameter = {
  parameterPath: "service",
  mapper: Mappers.ServiceProperties
};

export const serviceName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceName1: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const confirm: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "confirm"],
  mapper: {
    serializedName: "confirm",
    type: {
      name: "Boolean"
    }
  }
};

export const metricName: coreHttp.OperationURLParameter = {
  parameterPath: "metricName",
  mapper: {
    serializedName: "metricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const groupName: coreHttp.OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const perfCounter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "perfCounter"],
  mapper: {
    serializedName: "perfCounter",
    type: {
      name: "Boolean"
    }
  }
};

export const groupKey: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "groupKey"],
  mapper: {
    serializedName: "groupKey",
    type: {
      name: "String"
    }
  }
};

export const fromDate: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "fromDate"],
  mapper: {
    serializedName: "fromDate",
    type: {
      name: "DateTime"
    }
  }
};

export const toDate: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "toDate"],
  mapper: {
    serializedName: "toDate",
    type: {
      name: "DateTime"
    }
  }
};

export const filter2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const withDetails: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "withDetails"],
  mapper: {
    serializedName: "withDetails",
    type: {
      name: "Boolean"
    }
  }
};

export const isGroupbySite: coreHttp.OperationQueryParameter = {
  parameterPath: "isGroupbySite",
  mapper: {
    serializedName: "isGroupbySite",
    required: true,
    type: {
      name: "Boolean"
    }
  }
};

export const query: coreHttp.OperationQueryParameter = {
  parameterPath: "query",
  mapper: {
    serializedName: "query",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextPartitionKey: coreHttp.OperationQueryParameter = {
  parameterPath: "nextPartitionKey",
  mapper: {
    defaultValue: " ",
    isConstant: true,
    serializedName: "nextPartitionKey",
    type: {
      name: "String"
    }
  }
};

export const nextRowKey: coreHttp.OperationQueryParameter = {
  parameterPath: "nextRowKey",
  mapper: {
    defaultValue: " ",
    isConstant: true,
    serializedName: "nextRowKey",
    type: {
      name: "String"
    }
  }
};

export const serviceMemberId: coreHttp.OperationURLParameter = {
  parameterPath: "serviceMemberId",
  mapper: {
    serializedName: "serviceMemberId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const filter3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const state: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "state"],
  mapper: {
    serializedName: "state",
    type: {
      name: "String"
    }
  }
};

export const fromParam: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "fromParam"],
  mapper: {
    serializedName: "from",
    type: {
      name: "DateTime"
    }
  }
};

export const to: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "to"],
  mapper: {
    serializedName: "to",
    type: {
      name: "DateTime"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const grouping: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "grouping"],
  mapper: {
    serializedName: "grouping",
    type: {
      name: "String"
    }
  }
};

export const tenant: coreHttp.OperationParameter = {
  parameterPath: "tenant",
  mapper: Mappers.Tenant
};

export const nextLink7: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const dimension: coreHttp.OperationURLParameter = {
  parameterPath: "dimension",
  mapper: {
    serializedName: "dimension",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink8: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const serviceMemberId1: coreHttp.OperationURLParameter = {
  parameterPath: "serviceMemberId",
  mapper: {
    serializedName: "serviceMemberId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const confirm1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "confirm"],
  mapper: {
    serializedName: "confirm",
    type: {
      name: "Boolean"
    }
  }
};

export const filter4: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const query1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "query"],
  mapper: {
    serializedName: "query",
    type: {
      name: "String"
    }
  }
};

export const featureName: coreHttp.OperationURLParameter = {
  parameterPath: "featureName",
  mapper: {
    serializedName: "featureName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const setting: coreHttp.OperationParameter = {
  parameterPath: "setting",
  mapper: Mappers.UserPreference
};

export const dimensionType: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "dimensionType"],
  mapper: {
    serializedName: "dimensionType",
    type: {
      name: "String"
    }
  }
};

export const dimensionSignature: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "dimensionSignature"],
  mapper: {
    serializedName: "dimensionSignature",
    type: {
      name: "String"
    }
  }
};

export const serviceMember: coreHttp.OperationParameter = {
  parameterPath: "serviceMember",
  mapper: Mappers.ServiceMember
};

export const serviceName2: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const errorBucket: coreHttp.OperationQueryParameter = {
  parameterPath: "errorBucket",
  mapper: {
    serializedName: "errorBucket",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const alertFeedback: coreHttp.OperationParameter = {
  parameterPath: "alertFeedback",
  mapper: Mappers.AlertFeedback
};

export const shortName: coreHttp.OperationURLParameter = {
  parameterPath: "shortName",
  mapper: {
    serializedName: "shortName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const configurationSetting: coreHttp.OperationParameter = {
  parameterPath: "configurationSetting",
  mapper: Mappers.Item
};

export const dataSource: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "dataSource"],
  mapper: {
    serializedName: "dataSource",
    type: {
      name: "String"
    }
  }
};

export const nextLink9: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink10: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink11: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const serviceMemberId2: coreHttp.OperationURLParameter = {
  parameterPath: "serviceMemberId",
  mapper: {
    serializedName: "serviceMemberId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceMemberId3: coreHttp.OperationURLParameter = {
  parameterPath: "serviceMemberId",
  mapper: {
    serializedName: "serviceMemberId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const serviceMemberId4: coreHttp.OperationURLParameter = {
  parameterPath: "serviceMemberId",
  mapper: {
    serializedName: "serviceMemberId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceMemberId5: coreHttp.OperationURLParameter = {
  parameterPath: "serviceMemberId",
  mapper: {
    serializedName: "serviceMemberId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const metricName1: coreHttp.OperationURLParameter = {
  parameterPath: "metricName",
  mapper: {
    serializedName: "metricName",
    required: true,
    type: {
      name: "String"
    }
  }
};
