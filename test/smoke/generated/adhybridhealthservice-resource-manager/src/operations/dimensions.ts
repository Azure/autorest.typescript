/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ADHybridHealthService } from "../aDHybridHealthService";
import {
  DimensionsListAddsDimensionsResponse,
  DimensionsListAddsDimensionsNextResponse
} from "../models";

/**
 * Class representing a Dimensions.
 */
export class Dimensions {
  private readonly client: ADHybridHealthService;

  /**
   * Initialize a new instance of the class Dimensions class.
   * @param client Reference to the service client
   */
  constructor(client: ADHybridHealthService) {
    this.client = client;
  }

  /**
   * Gets the dimensions for a given dimension type in a server.
   * @param serviceName The name of the service.
   * @param dimension The dimension type.
   * @param options The options parameters.
   */
  listAddsDimensions(
    serviceName: string,
    dimension: string,
    options?: coreHttp.OperationOptions
  ): Promise<DimensionsListAddsDimensionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, dimension, options: operationOptions },
      listAddsDimensionsOperationSpec
    ) as Promise<DimensionsListAddsDimensionsResponse>;
  }

  /**
   * ListAddsDimensionsNext
   * @param serviceName The name of the service.
   * @param dimension The dimension type.
   * @param nextLink The nextLink from the previous successful call to the ListAddsDimensions method.
   * @param options The options parameters.
   */
  listAddsDimensionsNext(
    serviceName: string,
    dimension: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DimensionsListAddsDimensionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, dimension, nextLink, options: operationOptions },
      listAddsDimensionsNextOperationSpec
    ) as Promise<DimensionsListAddsDimensionsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listAddsDimensionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/dimensions/{dimension}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Dimensions
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.dimension
  ],
  serializer
};
const listAddsDimensionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Dimensions
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.dimension,
    Parameters.nextLink8
  ],
  serializer
};
