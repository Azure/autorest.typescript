/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ADHybridHealthService } from "../aDHybridHealthService";
import {
  AddsServicesListOptionalParams,
  AddsServicesListResponse,
  ServiceProperties,
  AddsServicesAddResponse,
  AddsServicesGetResponse,
  AddsServicesDeleteOptionalParams,
  AddsServicesUpdateResponse,
  AddsServicesGetForestSummaryResponse,
  AddsServicesListMetricsAverageResponse,
  AddsServicesListMetricsSumResponse,
  AddsServicesListMetricMetadataOptionalParams,
  AddsServicesListMetricMetadataResponse,
  AddsServicesGetMetricMetadataResponse,
  AddsServicesGetMetricMetadataForGroupOptionalParams,
  AddsServicesGetMetricMetadataForGroupResponse,
  AddsServicesListReplicationDetailsOptionalParams,
  AddsServicesListReplicationDetailsResponse,
  AddsServicesListReplicationSummaryOptionalParams,
  AddsServicesListReplicationSummaryResponse,
  AddsServicesListServerAlertsOptionalParams,
  AddsServicesListServerAlertsResponse,
  AddsServicesListPremiumServicesOptionalParams,
  AddsServicesListPremiumServicesResponse,
  AddsServicesListNextOptionalParams,
  AddsServicesListNextResponse,
  AddsServicesListMetricsAverageNextResponse,
  AddsServicesListMetricsSumNextResponse,
  AddsServicesListMetricMetadataNextOptionalParams,
  AddsServicesListMetricMetadataNextResponse,
  AddsServicesListServerAlertsNextOptionalParams,
  AddsServicesListServerAlertsNextResponse,
  AddsServicesListPremiumServicesNextOptionalParams,
  AddsServicesListPremiumServicesNextResponse
} from "../models";

/**
 * Class representing a AddsServices.
 */
export class AddsServices {
  private readonly client: ADHybridHealthService;

  /**
   * Initialize a new instance of the class AddsServices class.
   * @param client Reference to the service client
   */
  constructor(client: ADHybridHealthService) {
    this.client = client;
  }

  /**
   * Gets the details of Active Directory Domain Service, for a tenant, that are onboarded to Azure
   * Active Directory Connect Health.
   * @param options The options parameters.
   */
  list(
    options?: AddsServicesListOptionalParams
  ): Promise<AddsServicesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<AddsServicesListResponse>;
  }

  /**
   * Onboards a service for a given tenant in Azure Active Directory Connect Health.
   * @param service The service object.
   * @param options The options parameters.
   */
  add(
    service: ServiceProperties,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesAddResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { service, options: operationOptions },
      addOperationSpec
    ) as Promise<AddsServicesAddResponse>;
  }

  /**
   * Gets the details of an Active Directory Domain Service for a tenant having Azure AD Premium license
   * and is onboarded to Azure Active Directory Connect Health.
   * @param serviceName The name of the service.
   * @param options The options parameters.
   */
  get(
    serviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      getOperationSpec
    ) as Promise<AddsServicesGetResponse>;
  }

  /**
   * Deletes an Active Directory Domain Service which is onboarded to Azure Active Directory Connect
   * Health.
   * @param serviceName The name of the service which needs to be deleted.
   * @param options The options parameters.
   */
  delete(
    serviceName: string,
    options?: AddsServicesDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Updates an Active Directory Domain Service properties of an onboarded service.
   * @param service The service object.
   * @param serviceName The name of the service which needs to be deleted.
   * @param options The options parameters.
   */
  update(
    service: ServiceProperties,
    serviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { service, serviceName, options: operationOptions },
      updateOperationSpec
    ) as Promise<AddsServicesUpdateResponse>;
  }

  /**
   * Gets the forest summary for a given Active Directory Domain Service, that is onboarded to Azure
   * Active Directory Connect Health.
   * @param serviceName The name of the service.
   * @param options The options parameters.
   */
  getForestSummary(
    serviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesGetForestSummaryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      getForestSummaryOperationSpec
    ) as Promise<AddsServicesGetForestSummaryResponse>;
  }

  /**
   * Gets the average of the metric values for a given metric and group combination.
   * @param serviceName The name of the service.
   * @param metricName The metric name
   * @param groupName The group name
   * @param options The options parameters.
   */
  listMetricsAverage(
    serviceName: string,
    metricName: string,
    groupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesListMetricsAverageResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, metricName, groupName, options: operationOptions },
      listMetricsAverageOperationSpec
    ) as Promise<AddsServicesListMetricsAverageResponse>;
  }

  /**
   * Gets the sum of the metric values for a given metric and group combination.
   * @param serviceName The name of the service.
   * @param metricName The metric name
   * @param groupName The group name
   * @param options The options parameters.
   */
  listMetricsSum(
    serviceName: string,
    metricName: string,
    groupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesListMetricsSumResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, metricName, groupName, options: operationOptions },
      listMetricsSumOperationSpec
    ) as Promise<AddsServicesListMetricsSumResponse>;
  }

  /**
   * Gets the service related metrics information.
   * @param serviceName The name of the service.
   * @param options The options parameters.
   */
  listMetricMetadata(
    serviceName: string,
    options?: AddsServicesListMetricMetadataOptionalParams
  ): Promise<AddsServicesListMetricMetadataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      listMetricMetadataOperationSpec
    ) as Promise<AddsServicesListMetricMetadataResponse>;
  }

  /**
   * Gets the service related metric information.
   * @param serviceName The name of the service.
   * @param metricName The metric name
   * @param options The options parameters.
   */
  getMetricMetadata(
    serviceName: string,
    metricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesGetMetricMetadataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, metricName, options: operationOptions },
      getMetricMetadataOperationSpec
    ) as Promise<AddsServicesGetMetricMetadataResponse>;
  }

  /**
   * Gets the service related metrics for a given metric and group combination.
   * @param serviceName The name of the service.
   * @param metricName The metric name
   * @param groupName The group name
   * @param options The options parameters.
   */
  getMetricMetadataForGroup(
    serviceName: string,
    metricName: string,
    groupName: string,
    options?: AddsServicesGetMetricMetadataForGroupOptionalParams
  ): Promise<AddsServicesGetMetricMetadataForGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, metricName, groupName, options: operationOptions },
      getMetricMetadataForGroupOperationSpec
    ) as Promise<AddsServicesGetMetricMetadataForGroupResponse>;
  }

  /**
   * Gets complete domain controller list along with replication details for a given Active Directory
   * Domain Service, that is onboarded to Azure Active Directory Connect Health.
   * @param serviceName The name of the service.
   * @param options The options parameters.
   */
  listReplicationDetails(
    serviceName: string,
    options?: AddsServicesListReplicationDetailsOptionalParams
  ): Promise<AddsServicesListReplicationDetailsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      listReplicationDetailsOperationSpec
    ) as Promise<AddsServicesListReplicationDetailsResponse>;
  }

  /**
   * Gets complete domain controller list along with replication details for a given Active Directory
   * Domain Service, that is onboarded to Azure Active Directory Connect Health.
   * @param serviceName The name of the service.
   * @param isGroupbySite Indicates if the result should be grouped by site or not.
   * @param query The custom query.
   * @param options The options parameters.
   */
  listReplicationSummary(
    serviceName: string,
    isGroupbySite: boolean,
    query: string,
    options?: AddsServicesListReplicationSummaryOptionalParams
  ): Promise<AddsServicesListReplicationSummaryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, isGroupbySite, query, options: operationOptions },
      listReplicationSummaryOperationSpec
    ) as Promise<AddsServicesListReplicationSummaryResponse>;
  }

  /**
   * Gets the details of an alert for a given Active Directory Domain Controller service and server
   * combination.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id for which the alert details needs to be queried.
   * @param options The options parameters.
   */
  listServerAlerts(
    serviceName: string,
    serviceMemberId: string,
    options?: AddsServicesListServerAlertsOptionalParams
  ): Promise<AddsServicesListServerAlertsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      listServerAlertsOperationSpec
    ) as Promise<AddsServicesListServerAlertsResponse>;
  }

  /**
   * Gets the details of Active Directory Domain Services for a tenant having Azure AD Premium license
   * and is onboarded to Azure Active Directory Connect Health.
   * @param options The options parameters.
   */
  listPremiumServices(
    options?: AddsServicesListPremiumServicesOptionalParams
  ): Promise<AddsServicesListPremiumServicesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listPremiumServicesOperationSpec
    ) as Promise<AddsServicesListPremiumServicesResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: AddsServicesListNextOptionalParams
  ): Promise<AddsServicesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<AddsServicesListNextResponse>;
  }

  /**
   * ListMetricsAverageNext
   * @param serviceName The name of the service.
   * @param metricName The metric name
   * @param groupName The group name
   * @param nextLink The nextLink from the previous successful call to the ListMetricsAverage method.
   * @param options The options parameters.
   */
  listMetricsAverageNext(
    serviceName: string,
    metricName: string,
    groupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesListMetricsAverageNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        serviceName,
        metricName,
        groupName,
        nextLink,
        options: operationOptions
      },
      listMetricsAverageNextOperationSpec
    ) as Promise<AddsServicesListMetricsAverageNextResponse>;
  }

  /**
   * ListMetricsSumNext
   * @param serviceName The name of the service.
   * @param metricName The metric name
   * @param groupName The group name
   * @param nextLink The nextLink from the previous successful call to the ListMetricsSum method.
   * @param options The options parameters.
   */
  listMetricsSumNext(
    serviceName: string,
    metricName: string,
    groupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesListMetricsSumNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        serviceName,
        metricName,
        groupName,
        nextLink,
        options: operationOptions
      },
      listMetricsSumNextOperationSpec
    ) as Promise<AddsServicesListMetricsSumNextResponse>;
  }

  /**
   * ListMetricMetadataNext
   * @param serviceName The name of the service.
   * @param nextLink The nextLink from the previous successful call to the ListMetricMetadata method.
   * @param options The options parameters.
   */
  listMetricMetadataNext(
    serviceName: string,
    nextLink: string,
    options?: AddsServicesListMetricMetadataNextOptionalParams
  ): Promise<AddsServicesListMetricMetadataNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, nextLink, options: operationOptions },
      listMetricMetadataNextOperationSpec
    ) as Promise<AddsServicesListMetricMetadataNextResponse>;
  }

  /**
   * ListServerAlertsNext
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id for which the alert details needs to be queried.
   * @param nextLink The nextLink from the previous successful call to the ListServerAlerts method.
   * @param options The options parameters.
   */
  listServerAlertsNext(
    serviceName: string,
    serviceMemberId: string,
    nextLink: string,
    options?: AddsServicesListServerAlertsNextOptionalParams
  ): Promise<AddsServicesListServerAlertsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, nextLink, options: operationOptions },
      listServerAlertsNextOperationSpec
    ) as Promise<AddsServicesListServerAlertsNextResponse>;
  }

  /**
   * ListPremiumServicesNext
   * @param nextLink The nextLink from the previous successful call to the ListPremiumServices method.
   * @param options The options parameters.
   */
  listPremiumServicesNext(
    nextLink: string,
    options?: AddsServicesListPremiumServicesNextOptionalParams
  ): Promise<AddsServicesListPremiumServicesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listPremiumServicesNextOperationSpec
    ) as Promise<AddsServicesListPremiumServicesNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/addsservices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Services
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.serviceType,
    Parameters.skipCount,
    Parameters.takeCount,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.$host],
  serializer
};
const addOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/addsservices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceProperties
    }
  },
  requestBody: Parameters.service,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceProperties
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}",
  httpMethod: "DELETE",
  responses: { 204: {} },
  queryParameters: [Parameters.apiVersion, Parameters.confirm],
  urlParameters: [Parameters.$host, Parameters.serviceName1],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceProperties
    }
  },
  requestBody: Parameters.service,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.serviceName1],
  headerParameters: [Parameters.contentType],
  serializer
};
const getForestSummaryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/forestsummary",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ForestSummary
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
const listMetricsAverageOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}/average",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Metrics
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.metricName,
    Parameters.groupName
  ],
  serializer
};
const listMetricsSumOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}/sum",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Metrics
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.metricName,
    Parameters.groupName
  ],
  serializer
};
const listMetricMetadataOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricMetadataList
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter1,
    Parameters.perfCounter
  ],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
const getMetricMetadataOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata/{metricName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricMetadata
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.metricName
  ],
  serializer
};
const getMetricMetadataForGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata/{metricName}/groups/{groupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricSets
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.groupKey,
    Parameters.fromDate,
    Parameters.toDate
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.metricName,
    Parameters.groupName
  ],
  serializer
};
const listReplicationDetailsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationdetails",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationDetailsList
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter2,
    Parameters.withDetails
  ],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
const listReplicationSummaryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationsummary",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationSummaryList
    }
  },
  queryParameters: [
    Parameters.takeCount,
    Parameters.apiVersion,
    Parameters.filter2,
    Parameters.isGroupbySite,
    Parameters.query,
    Parameters.nextPartitionKey,
    Parameters.nextRowKey
  ],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
const listServerAlertsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alerts
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter3,
    Parameters.state,
    Parameters.fromParam,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId
  ],
  serializer
};
const listPremiumServicesOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/addsservices/premiumCheck",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Services
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.serviceType,
    Parameters.skipCount,
    Parameters.takeCount,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.$host],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Services
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.serviceType,
    Parameters.skipCount,
    Parameters.takeCount,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  serializer
};
const listMetricsAverageNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Metrics
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.metricName,
    Parameters.groupName,
    Parameters.nextLink1
  ],
  serializer
};
const listMetricsSumNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Metrics
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.metricName,
    Parameters.groupName,
    Parameters.nextLink2
  ],
  serializer
};
const listMetricMetadataNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricMetadataList
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter1,
    Parameters.perfCounter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.nextLink3
  ],
  serializer
};
const listServerAlertsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alerts
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter3,
    Parameters.state,
    Parameters.fromParam,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId,
    Parameters.nextLink4
  ],
  serializer
};
const listPremiumServicesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Services
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.serviceType,
    Parameters.skipCount,
    Parameters.takeCount,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink5],
  serializer
};
