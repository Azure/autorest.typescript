/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ADHybridHealthService } from "../aDHybridHealthService";
import {
  AddsServiceMembersListOptionalParams,
  AddsServiceMembersListResponse,
  AddsServiceMembersGetResponse,
  AddsServiceMembersDeleteOptionalParams,
  AddsServiceMembersListCredentialsOptionalParams,
  AddsServiceMembersListCredentialsResponse,
  AddsServiceMembersListNextOptionalParams,
  AddsServiceMembersListNextResponse
} from "../models";

/**
 * Class representing a AddsServiceMembers.
 */
export class AddsServiceMembers {
  private readonly client: ADHybridHealthService;

  /**
   * Initialize a new instance of the class AddsServiceMembers class.
   * @param client Reference to the service client
   */
  constructor(client: ADHybridHealthService) {
    this.client = client;
  }

  /**
   * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain
   * Service, that are onboarded to Azure Active Directory Connect Health.
   * @param serviceName The name of the service.
   * @param options The options parameters.
   */
  list(
    serviceName: string,
    options?: AddsServiceMembersListOptionalParams
  ): Promise<AddsServiceMembersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      listOperationSpec
    ) as Promise<AddsServiceMembersListResponse>;
  }

  /**
   * Gets the details of a server, for a given Active Directory Domain Controller service, that are
   * onboarded to Azure Active Directory Connect Health Service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  get(
    serviceName: string,
    serviceMemberId: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServiceMembersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      getOperationSpec
    ) as Promise<AddsServiceMembersGetResponse>;
  }

  /**
   * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active
   * Directory Connect Health Service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  delete(
    serviceName: string,
    serviceMemberId: string,
    options?: AddsServiceMembersDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory
   * Connect Health Service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  listCredentials(
    serviceName: string,
    serviceMemberId: string,
    options?: AddsServiceMembersListCredentialsOptionalParams
  ): Promise<AddsServiceMembersListCredentialsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      listCredentialsOperationSpec
    ) as Promise<AddsServiceMembersListCredentialsResponse>;
  }

  /**
   * ListNext
   * @param serviceName The name of the service.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    serviceName: string,
    nextLink: string,
    options?: AddsServiceMembersListNextOptionalParams
  ): Promise<AddsServiceMembersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<AddsServiceMembersListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/addsservicemembers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AddsServiceMembers
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter2],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceMember
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion, Parameters.confirm1],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const listCredentialsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}/credentials",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Credentials
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter4],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AddsServiceMembers
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter2],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.nextLink
  ],
  serializer
};
