/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ADHybridHealthService } from "../aDHybridHealthService";
import {
  ServiceMembersListOptionalParams,
  ServiceMembersListResponse,
  ServiceMember,
  ServiceMembersAddResponse,
  ServiceMembersGetResponse,
  ServiceMembersDeleteOptionalParams,
  ServiceMembersListAlertsOptionalParams,
  ServiceMembersListAlertsResponse,
  ServiceMembersListConnectorsResponse,
  ServiceMembersListCredentialsOptionalParams,
  ServiceMembersListCredentialsResponse,
  ServiceMembersListDataFreshnessResponse,
  ServiceMembersListExportStatusResponse,
  ServiceMembersListGlobalConfigurationResponse,
  ServiceMembersGetMetricsOptionalParams,
  ServiceMembersGetMetricsResponse,
  ServiceMembersGetServiceConfigurationResponse,
  ServiceMembersGetConnectorMetadataResponse,
  ServiceMembersListNextOptionalParams,
  ServiceMembersListNextResponse,
  ServiceMembersListAlertsNextOptionalParams,
  ServiceMembersListAlertsNextResponse,
  ServiceMembersListExportStatusNextResponse
} from "../models";

/**
 * Class representing a ServiceMembers.
 */
export class ServiceMembers {
  private readonly client: ADHybridHealthService;

  /**
   * Initialize a new instance of the class ServiceMembers class.
   * @param client Reference to the service client
   */
  constructor(client: ADHybridHealthService) {
    this.client = client;
  }

  /**
   * Gets the details of the servers, for a given service, that are onboarded to Azure Active Directory
   * Connect Health Service.
   * @param serviceName The name of the service.
   * @param options The options parameters.
   */
  list(
    serviceName: string,
    options?: ServiceMembersListOptionalParams
  ): Promise<ServiceMembersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      listOperationSpec
    ) as Promise<ServiceMembersListResponse>;
  }

  /**
   * Onboards  a server, for a given service, to Azure Active Directory Connect Health Service.
   * @param serviceMember The server object.
   * @param serviceName The name of the service under which the server is to be onboarded.
   * @param options The options parameters.
   */
  add(
    serviceMember: ServiceMember,
    serviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersAddResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceMember, serviceName, options: operationOptions },
      addOperationSpec
    ) as Promise<ServiceMembersAddResponse>;
  }

  /**
   * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory
   * Connect Health Service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  get(
    serviceName: string,
    serviceMemberId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      getOperationSpec
    ) as Promise<ServiceMembersGetResponse>;
  }

  /**
   * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  delete(
    serviceName: string,
    serviceMemberId: string,
    options?: ServiceMembersDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the details of an alert for a given service and server combination.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id for which the alert details needs to be queried.
   * @param options The options parameters.
   */
  listAlerts(
    serviceName: string,
    serviceMemberId: string,
    options?: ServiceMembersListAlertsOptionalParams
  ): Promise<ServiceMembersListAlertsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      listAlertsOperationSpec
    ) as Promise<ServiceMembersListAlertsResponse>;
  }

  /**
   * Gets the connector details for a service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  listConnectors(
    serviceName: string,
    serviceMemberId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersListConnectorsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      listConnectorsOperationSpec
    ) as Promise<ServiceMembersListConnectorsResponse>;
  }

  /**
   * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory
   * Connect Health Service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  listCredentials(
    serviceName: string,
    serviceMemberId: string,
    options?: ServiceMembersListCredentialsOptionalParams
  ): Promise<ServiceMembersListCredentialsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      listCredentialsOperationSpec
    ) as Promise<ServiceMembersListCredentialsResponse>;
  }

  /**
   * Deletes the data uploaded by the server to Azure Active Directory Connect Health Service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  deleteData(
    serviceName: string,
    serviceMemberId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      deleteDataOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the last time when the server uploaded data to Azure Active Directory Connect Health Service.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  listDataFreshness(
    serviceName: string,
    serviceMemberId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersListDataFreshnessResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      listDataFreshnessOperationSpec
    ) as Promise<ServiceMembersListDataFreshnessResponse>;
  }

  /**
   * Gets the export status.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  listExportStatus(
    serviceName: string,
    serviceMemberId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersListExportStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      listExportStatusOperationSpec
    ) as Promise<ServiceMembersListExportStatusResponse>;
  }

  /**
   * Gets the global configuration.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server id.
   * @param options The options parameters.
   */
  listGlobalConfiguration(
    serviceName: string,
    serviceMemberId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersListGlobalConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      listGlobalConfigurationOperationSpec
    ) as Promise<ServiceMembersListGlobalConfigurationResponse>;
  }

  /**
   * Gets the server related metrics for a given metric and group combination.
   * @param serviceName The name of the service.
   * @param metricName The metric name
   * @param groupName The group name
   * @param serviceMemberId The server id.
   * @param options The options parameters.
   */
  getMetrics(
    serviceName: string,
    metricName: string,
    groupName: string,
    serviceMemberId: string,
    options?: ServiceMembersGetMetricsOptionalParams
  ): Promise<ServiceMembersGetMetricsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        serviceName,
        metricName,
        groupName,
        serviceMemberId,
        options: operationOptions
      },
      getMetricsOperationSpec
    ) as Promise<ServiceMembersGetMetricsResponse>;
  }

  /**
   * Gets the service configuration.
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param options The options parameters.
   */
  getServiceConfiguration(
    serviceName: string,
    serviceMemberId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersGetServiceConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, options: operationOptions },
      getServiceConfigurationOperationSpec
    ) as Promise<ServiceMembersGetServiceConfigurationResponse>;
  }

  /**
   * Gets the list of connectors and run profile names.
   * @param serviceName The name of the service.
   * @param serviceMemberId The service member id.
   * @param metricName The name of the metric.
   * @param options The options parameters.
   */
  getConnectorMetadata(
    serviceName: string,
    serviceMemberId: string,
    metricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersGetConnectorMetadataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, metricName, options: operationOptions },
      getConnectorMetadataOperationSpec
    ) as Promise<ServiceMembersGetConnectorMetadataResponse>;
  }

  /**
   * ListNext
   * @param serviceName The name of the service.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    serviceName: string,
    nextLink: string,
    options?: ServiceMembersListNextOptionalParams
  ): Promise<ServiceMembersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ServiceMembersListNextResponse>;
  }

  /**
   * ListAlertsNext
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id for which the alert details needs to be queried.
   * @param nextLink The nextLink from the previous successful call to the ListAlerts method.
   * @param options The options parameters.
   */
  listAlertsNext(
    serviceName: string,
    serviceMemberId: string,
    nextLink: string,
    options?: ServiceMembersListAlertsNextOptionalParams
  ): Promise<ServiceMembersListAlertsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, nextLink, options: operationOptions },
      listAlertsNextOperationSpec
    ) as Promise<ServiceMembersListAlertsNextResponse>;
  }

  /**
   * ListExportStatusNext
   * @param serviceName The name of the service.
   * @param serviceMemberId The server Id.
   * @param nextLink The nextLink from the previous successful call to the ListExportStatus method.
   * @param options The options parameters.
   */
  listExportStatusNext(
    serviceName: string,
    serviceMemberId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServiceMembersListExportStatusNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, serviceMemberId, nextLink, options: operationOptions },
      listExportStatusNextOperationSpec
    ) as Promise<ServiceMembersListExportStatusNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceMembers
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter2,
    Parameters.dimensionType,
    Parameters.dimensionSignature
  ],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
const addOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceMember
    }
  },
  requestBody: Parameters.serviceMember,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.serviceName2],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceMember
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion, Parameters.confirm1],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const listAlertsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alerts
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter3,
    Parameters.state,
    Parameters.fromParam,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId
  ],
  serializer
};
const listConnectorsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/service/{serviceName}/servicemembers/{serviceMemberId}/connectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Connectors
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const listCredentialsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/credentials",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Credentials
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter4],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const deleteDataOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/data",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const listDataFreshnessOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/datafreshness",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFreshnessDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const listExportStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/exportstatus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExportStatuses
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1
  ],
  serializer
};
const listGlobalConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/globalconfiguration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalConfigurations
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId2
  ],
  serializer
};
const getMetricsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/metrics/{metricName}/groups/{groupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricSets
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.groupKey,
    Parameters.fromDate,
    Parameters.toDate
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.metricName,
    Parameters.groupName,
    Parameters.serviceMemberId3
  ],
  serializer
};
const getServiceConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/serviceconfiguration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfiguration
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId4
  ],
  serializer
};
const getConnectorMetadataOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/metrics/{metricName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMetadata
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId5,
    Parameters.metricName1
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceMembers
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter2,
    Parameters.dimensionType,
    Parameters.dimensionSignature
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.nextLink
  ],
  serializer
};
const listAlertsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alerts
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter3,
    Parameters.state,
    Parameters.fromParam,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId,
    Parameters.nextLink10
  ],
  serializer
};
const listExportStatusNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExportStatuses
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.serviceMemberId1,
    Parameters.nextLink11
  ],
  serializer
};
