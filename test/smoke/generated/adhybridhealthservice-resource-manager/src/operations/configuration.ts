/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ADHybridHealthService } from "../aDHybridHealthService";
import {
  ConfigurationListAddsConfigurationsOptionalParams,
  ConfigurationListAddsConfigurationsResponse,
  ConfigurationAddResponse,
  ConfigurationGetResponse,
  Tenant,
  ConfigurationUpdateResponse,
  ConfigurationListAddsConfigurationsNextOptionalParams,
  ConfigurationListAddsConfigurationsNextResponse
} from "../models";

/**
 * Class representing a Configuration.
 */
export class Configuration {
  private readonly client: ADHybridHealthService;

  /**
   * Initialize a new instance of the class Configuration class.
   * @param client Reference to the service client
   */
  constructor(client: ADHybridHealthService) {
    this.client = client;
  }

  /**
   * Gets the service configurations.
   * @param serviceName The name of the service.
   * @param options The options parameters.
   */
  listAddsConfigurations(
    serviceName: string,
    options?: ConfigurationListAddsConfigurationsOptionalParams
  ): Promise<ConfigurationListAddsConfigurationsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, options: operationOptions },
      listAddsConfigurationsOperationSpec
    ) as Promise<ConfigurationListAddsConfigurationsResponse>;
  }

  /**
   * Onboards a tenant in Azure Active Directory Connect Health.
   * @param options The options parameters.
   */
  add(options?: coreHttp.OperationOptions): Promise<ConfigurationAddResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      addOperationSpec
    ) as Promise<ConfigurationAddResponse>;
  }

  /**
   * Gets the details of a tenant onboarded to Azure Active Directory Connect Health.
   * @param options The options parameters.
   */
  get(options?: coreHttp.OperationOptions): Promise<ConfigurationGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOperationSpec
    ) as Promise<ConfigurationGetResponse>;
  }

  /**
   * Updates tenant properties for tenants onboarded to Azure Active Directory Connect Health.
   * @param tenant The tenant object with the properties set to the updated value.
   * @param options The options parameters.
   */
  update(
    tenant: Tenant,
    options?: coreHttp.OperationOptions
  ): Promise<ConfigurationUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { tenant, options: operationOptions },
      updateOperationSpec
    ) as Promise<ConfigurationUpdateResponse>;
  }

  /**
   * ListAddsConfigurationsNext
   * @param serviceName The name of the service.
   * @param nextLink The nextLink from the previous successful call to the ListAddsConfigurations method.
   * @param options The options parameters.
   */
  listAddsConfigurationsNext(
    serviceName: string,
    nextLink: string,
    options?: ConfigurationListAddsConfigurationsNextOptionalParams
  ): Promise<ConfigurationListAddsConfigurationsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, nextLink, options: operationOptions },
      listAddsConfigurationsNextOperationSpec
    ) as Promise<ConfigurationListAddsConfigurationsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listAddsConfigurationsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/configuration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AddsConfiguration
    }
  },
  queryParameters: [Parameters.grouping],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  serializer
};
const addOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/configuration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Tenant
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/configuration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Tenant
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.ADHybridHealthService/configuration",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Tenant
    }
  },
  requestBody: Parameters.tenant,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const listAddsConfigurationsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AddsConfiguration
    }
  },
  queryParameters: [Parameters.grouping],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.nextLink7
  ],
  serializer
};
