/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ADHybridHealthService } from "../aDHybridHealthService";
import {
  AddsServicesUserPreferenceGetResponse,
  UserPreference
} from "../models";

/**
 * Class representing a AddsServicesUserPreference.
 */
export class AddsServicesUserPreference {
  private readonly client: ADHybridHealthService;

  /**
   * Initialize a new instance of the class AddsServicesUserPreference class.
   * @param client Reference to the service client
   */
  constructor(client: ADHybridHealthService) {
    this.client = client;
  }

  /**
   * Gets the user preferences for a given feature.
   * @param serviceName The name of the service.
   * @param featureName The name of the feature.
   * @param options The options parameters.
   */
  get(
    serviceName: string,
    featureName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AddsServicesUserPreferenceGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, featureName, options: operationOptions },
      getOperationSpec
    ) as Promise<AddsServicesUserPreferenceGetResponse>;
  }

  /**
   * Deletes the user preferences for a given feature.
   * @param serviceName The name of the service.
   * @param featureName The name of the feature.
   * @param options The options parameters.
   */
  delete(
    serviceName: string,
    featureName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, featureName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Adds the user preferences for a given feature.
   * @param serviceName The name of the service.
   * @param featureName The name of the feature.
   * @param setting The user preference setting.
   * @param options The options parameters.
   */
  add(
    serviceName: string,
    featureName: string,
    setting: UserPreference,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serviceName, featureName, setting, options: operationOptions },
      addOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserPreference
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.featureName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.featureName
  ],
  serializer
};
const addOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference",
  httpMethod: "POST",
  responses: { 200: {} },
  requestBody: Parameters.setting,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.featureName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
