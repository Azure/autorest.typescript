/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataLakeStoreAccountManagementClient } from "../dataLakeStoreAccountManagementClient";
import {
  TrustedIdProvidersListByAccountResponse,
  CreateOrUpdateTrustedIdProviderParameters,
  TrustedIdProvidersCreateOrUpdateResponse,
  TrustedIdProvidersGetResponse,
  TrustedIdProvidersUpdateOptionalParams,
  TrustedIdProvidersUpdateResponse,
  TrustedIdProvidersListByAccountNextResponse
} from "../models";

/**
 * Class representing a TrustedIdProviders.
 */
export class TrustedIdProviders {
  private readonly client: DataLakeStoreAccountManagementClient;

  /**
   * Initialize a new instance of the class TrustedIdProviders class.
   * @param client Reference to the service client
   */
  constructor(client: DataLakeStoreAccountManagementClient) {
    this.client = client;
  }

  /**
   * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param options The options parameters.
   */
  listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TrustedIdProvidersListByAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listByAccountOperationSpec
    ) as Promise<TrustedIdProvidersListByAccountResponse>;
  }

  /**
   * Creates or updates the specified trusted identity provider. During update, the trusted identity
   * provider with the specified name will be replaced with this new provider
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param parameters Parameters supplied to create or replace the trusted identity provider.
   * @param trustedIdProviderName The name of the trusted identity provider. This is used for
   *                              differentiation of providers in the account.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    parameters: CreateOrUpdateTrustedIdProviderParameters,
    trustedIdProviderName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TrustedIdProvidersCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        parameters,
        trustedIdProviderName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<TrustedIdProvidersCreateOrUpdateResponse>;
  }

  /**
   * Gets the specified Data Lake Store trusted identity provider.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    trustedIdProviderName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TrustedIdProvidersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        trustedIdProviderName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<TrustedIdProvidersGetResponse>;
  }

  /**
   * Updates the specified trusted identity provider.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider. This is used for
   *                              differentiation of providers in the account.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    trustedIdProviderName: string,
    options?: TrustedIdProvidersUpdateOptionalParams
  ): Promise<TrustedIdProvidersUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        trustedIdProviderName,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<TrustedIdProvidersUpdateResponse>;
  }

  /**
   * Deletes the specified trusted identity provider from the specified Data Lake Store account
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider to delete.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    trustedIdProviderName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        trustedIdProviderName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListByAccountNext
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
   * @param options The options parameters.
   */
  listByAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<TrustedIdProvidersListByAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options: operationOptions },
      listByAccountNextOperationSpec
    ) as Promise<TrustedIdProvidersListByAccountNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProviderListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProvider
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.trustedIdProviderName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProvider
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.trustedIdProviderName1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProvider
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.trustedIdProviderName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.trustedIdProviderName2
  ],
  serializer
};
const listByAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProviderListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink2
  ],
  serializer
};
