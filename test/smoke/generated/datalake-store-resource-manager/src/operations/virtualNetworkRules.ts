/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataLakeStoreAccountManagementClient } from "../dataLakeStoreAccountManagementClient";
import {
  VirtualNetworkRulesListByAccountResponse,
  CreateOrUpdateVirtualNetworkRuleParameters,
  VirtualNetworkRulesCreateOrUpdateResponse,
  VirtualNetworkRulesGetResponse,
  VirtualNetworkRulesUpdateOptionalParams,
  VirtualNetworkRulesUpdateResponse,
  VirtualNetworkRulesListByAccountNextResponse
} from "../models";

/**
 * Class representing a VirtualNetworkRules.
 */
export class VirtualNetworkRules {
  private readonly client: DataLakeStoreAccountManagementClient;

  /**
   * Initialize a new instance of the class VirtualNetworkRules class.
   * @param client Reference to the service client
   */
  constructor(client: DataLakeStoreAccountManagementClient) {
    this.client = client;
  }

  /**
   * Lists the Data Lake Store virtual network rules within the specified Data Lake Store account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param options The options parameters.
   */
  listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkRulesListByAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listByAccountOperationSpec
    ) as Promise<VirtualNetworkRulesListByAccountResponse>;
  }

  /**
   * Creates or updates the specified virtual network rule. During update, the virtual network rule with
   * the specified name will be replaced with this new virtual network rule.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param parameters Parameters supplied to create or update the virtual network rule.
   * @param virtualNetworkRuleName The name of the virtual network rule to create or update.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    parameters: CreateOrUpdateVirtualNetworkRuleParameters,
    virtualNetworkRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkRulesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        parameters,
        virtualNetworkRuleName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<VirtualNetworkRulesCreateOrUpdateResponse>;
  }

  /**
   * Gets the specified Data Lake Store virtual network rule.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param virtualNetworkRuleName The name of the virtual network rule to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    virtualNetworkRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkRulesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        virtualNetworkRuleName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<VirtualNetworkRulesGetResponse>;
  }

  /**
   * Updates the specified virtual network rule.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param virtualNetworkRuleName The name of the virtual network rule to update.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    virtualNetworkRuleName: string,
    options?: VirtualNetworkRulesUpdateOptionalParams
  ): Promise<VirtualNetworkRulesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        virtualNetworkRuleName,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<VirtualNetworkRulesUpdateResponse>;
  }

  /**
   * Deletes the specified virtual network rule from the specified Data Lake Store account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param virtualNetworkRuleName The name of the virtual network rule to delete.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    virtualNetworkRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        virtualNetworkRuleName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListByAccountNext
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
   * @param options The options parameters.
   */
  listByAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkRulesListByAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options: operationOptions },
      listByAccountNextOperationSpec
    ) as Promise<VirtualNetworkRulesListByAccountNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRuleListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRule
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.virtualNetworkRuleName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRule
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.virtualNetworkRuleName1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRule
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.virtualNetworkRuleName2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.virtualNetworkRuleName3
  ],
  serializer
};
const listByAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRuleListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink2
  ],
  serializer
};
