/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Data Lake Store account list information response.
 */
export interface DataLakeStoreAccountListResult {
  /**
   * The results of the list operation.
   */
  readonly value?: DataLakeStoreAccountBasic[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The resource model definition.
 */
export interface Resource {
  /**
   * The resource identifier.
   */
  readonly id?: string;
  /**
   * The resource name.
   */
  readonly name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
  /**
   * The resource location.
   */
  readonly location?: string;
  /**
   * The resource tags.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * Basic Data Lake Store account information, returned on list calls.
 */
export type DataLakeStoreAccountBasic = Resource & {
  /**
   * The unique identifier associated with this Data Lake Store account.
   */
  readonly accountId?: string;
  /**
   * The provisioning status of the Data Lake Store account.
   */
  readonly provisioningState?: DataLakeStoreAccountStatus;
  /**
   * The state of the Data Lake Store account.
   */
  readonly state?: DataLakeStoreAccountState;
  /**
   * The account creation time.
   */
  readonly creationTime?: Date;
  /**
   * The account last modified time.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The full CName endpoint for this account.
   */
  readonly endpoint?: string;
};

/**
 * The basic account specific properties that are associated with an underlying Data Lake Store account.
 */
export interface DataLakeStoreAccountPropertiesBasic {
  /**
   * The unique identifier associated with this Data Lake Store account.
   */
  readonly accountId?: string;
  /**
   * The provisioning status of the Data Lake Store account.
   */
  readonly provisioningState?: DataLakeStoreAccountStatus;
  /**
   * The state of the Data Lake Store account.
   */
  readonly state?: DataLakeStoreAccountState;
  /**
   * The account creation time.
   */
  readonly creationTime?: Date;
  /**
   * The account last modified time.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The full CName endpoint for this account.
   */
  readonly endpoint?: string;
}

export interface CreateDataLakeStoreAccountParameters {
  /**
   * The resource location.
   */
  location: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The Key Vault encryption identity, if any.
   */
  identity?: EncryptionIdentity;
  /**
   * The default owner group for all new folders and files created in the Data Lake Store account.
   */
  defaultGroup?: string;
  /**
   * The Key Vault encryption configuration.
   */
  encryptionConfig?: EncryptionConfig;
  /**
   * The current state of encryption for this Data Lake Store account.
   */
  encryptionState?: EncryptionState;
  /**
   * The list of firewall rules associated with this Data Lake Store account.
   */
  firewallRules?: CreateFirewallRuleWithAccountParameters[];
  /**
   * The list of virtual network rules associated with this Data Lake Store account.
   */
  virtualNetworkRules?: CreateVirtualNetworkRuleWithAccountParameters[];
  /**
   * The current state of the IP address firewall for this Data Lake Store account.
   */
  firewallState?: FirewallState;
  /**
   * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
   */
  firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * The list of trusted identity providers associated with this Data Lake Store account.
   */
  trustedIdProviders?: CreateTrustedIdProviderWithAccountParameters[];
  /**
   * The current state of the trusted identity provider feature for this Data Lake Store account.
   */
  trustedIdProviderState?: TrustedIdProviderState;
  /**
   * The commitment tier to use for next month.
   */
  newTier?: TierType;
}

/**
 * The encryption identity properties.
 */
export interface EncryptionIdentity {
  /**
   * The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
   */
  type: "SystemAssigned";
  /**
   * The principal identifier associated with the encryption.
   */
  readonly principalId?: string;
  /**
   * The tenant identifier associated with the encryption.
   */
  readonly tenantId?: string;
}

/**
 * The encryption configuration for the account.
 */
export interface EncryptionConfig {
  /**
   * The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
   */
  type: EncryptionConfigType;
  /**
   * The Key Vault information for connecting to user managed encryption keys.
   */
  keyVaultMetaInfo?: KeyVaultMetaInfo;
}

/**
 * Metadata information used by account encryption.
 */
export interface KeyVaultMetaInfo {
  /**
   * The resource identifier for the user managed Key Vault being used to encrypt.
   */
  keyVaultResourceId: string;
  /**
   * The name of the user managed encryption key.
   */
  encryptionKeyName: string;
  /**
   * The version of the user managed encryption key.
   */
  encryptionKeyVersion: string;
}

/**
 * The parameters used to create a new firewall rule while creating a new Data Lake Store account.
 */
export interface CreateFirewallRuleWithAccountParameters {
  /**
   * The unique name of the firewall rule to create.
   */
  name: string;
  /**
   * The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  startIpAddress: string;
  /**
   * The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  endIpAddress: string;
}

/**
 * The parameters used to create a new virtual network rule while creating a new Data Lake Store account.
 */
export interface CreateVirtualNetworkRuleWithAccountParameters {
  /**
   * The unique name of the virtual network rule to create.
   */
  name: string;
  /**
   * The resource identifier for the subnet.
   */
  subnetId: string;
}

/**
 * The parameters used to create a new trusted identity provider while creating a new Data Lake Store account.
 */
export interface CreateTrustedIdProviderWithAccountParameters {
  /**
   * The unique name of the trusted identity provider to create.
   */
  name: string;
  /**
   * The URL of this trusted identity provider.
   */
  idProvider: string;
}

/**
 * Data Lake Store account information.
 */
export type DataLakeStoreAccount = Resource & {
  /**
   * The Key Vault encryption identity, if any.
   */
  readonly identity?: EncryptionIdentity;
  /**
   * The unique identifier associated with this Data Lake Store account.
   */
  readonly accountId?: string;
  /**
   * The provisioning status of the Data Lake Store account.
   */
  readonly provisioningState?: DataLakeStoreAccountStatus;
  /**
   * The state of the Data Lake Store account.
   */
  readonly state?: DataLakeStoreAccountState;
  /**
   * The account creation time.
   */
  readonly creationTime?: Date;
  /**
   * The account last modified time.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The full CName endpoint for this account.
   */
  readonly endpoint?: string;
  /**
   * The default owner group for all new folders and files created in the Data Lake Store account.
   */
  readonly defaultGroup?: string;
  /**
   * The Key Vault encryption configuration.
   */
  readonly encryptionConfig?: EncryptionConfig;
  /**
   * The current state of encryption for this Data Lake Store account.
   */
  readonly encryptionState?: EncryptionState;
  /**
   * The current state of encryption provisioning for this Data Lake Store account.
   */
  readonly encryptionProvisioningState?: EncryptionProvisioningState;
  /**
   * The list of firewall rules associated with this Data Lake Store account.
   */
  readonly firewallRules?: FirewallRule[];
  /**
   * The list of virtual network rules associated with this Data Lake Store account.
   */
  readonly virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * The current state of the IP address firewall for this Data Lake Store account.
   */
  readonly firewallState?: FirewallState;
  /**
   * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
   */
  readonly firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * The list of trusted identity providers associated with this Data Lake Store account.
   */
  readonly trustedIdProviders?: TrustedIdProvider[];
  /**
   * The current state of the trusted identity provider feature for this Data Lake Store account.
   */
  readonly trustedIdProviderState?: TrustedIdProviderState;
  /**
   * The commitment tier to use for next month.
   */
  readonly newTier?: TierType;
  /**
   * The commitment tier in use for the current month.
   */
  readonly currentTier?: TierType;
};

/**
 * Data Lake Store account properties information.
 */
export type DataLakeStoreAccountProperties = DataLakeStoreAccountPropertiesBasic & {
  /**
   * The default owner group for all new folders and files created in the Data Lake Store account.
   */
  readonly defaultGroup?: string;
  /**
   * The Key Vault encryption configuration.
   */
  readonly encryptionConfig?: EncryptionConfig;
  /**
   * The current state of encryption for this Data Lake Store account.
   */
  readonly encryptionState?: EncryptionState;
  /**
   * The current state of encryption provisioning for this Data Lake Store account.
   */
  readonly encryptionProvisioningState?: EncryptionProvisioningState;
  /**
   * The list of firewall rules associated with this Data Lake Store account.
   */
  readonly firewallRules?: FirewallRule[];
  /**
   * The list of virtual network rules associated with this Data Lake Store account.
   */
  readonly virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * The current state of the IP address firewall for this Data Lake Store account.
   */
  readonly firewallState?: FirewallState;
  /**
   * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
   */
  readonly firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * The list of trusted identity providers associated with this Data Lake Store account.
   */
  readonly trustedIdProviders?: TrustedIdProvider[];
  /**
   * The current state of the trusted identity provider feature for this Data Lake Store account.
   */
  readonly trustedIdProviderState?: TrustedIdProviderState;
  /**
   * The commitment tier to use for next month.
   */
  readonly newTier?: TierType;
  /**
   * The commitment tier in use for the current month.
   */
  readonly currentTier?: TierType;
};

/**
 * The resource model definition for a nested resource.
 */
export interface SubResource {
  /**
   * The resource identifier.
   */
  readonly id?: string;
  /**
   * The resource name.
   */
  readonly name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
}

/**
 * Data Lake Store firewall rule information.
 */
export type FirewallRule = SubResource & {
  /**
   * The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  readonly startIpAddress?: string;
  /**
   * The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  readonly endIpAddress?: string;
};

/**
 * Data Lake Store virtual network rule information.
 */
export type VirtualNetworkRule = SubResource & {
  /**
   * The resource identifier for the subnet.
   */
  readonly subnetId?: string;
};

/**
 * Data Lake Store trusted identity provider information.
 */
export type TrustedIdProvider = SubResource & {
  /**
   * The URL of this trusted identity provider.
   */
  readonly idProvider?: string;
};

/**
 * Data Lake Store account information to update.
 */
export interface UpdateDataLakeStoreAccountParameters {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * The default owner group for all new folders and files created in the Data Lake Store account.
   */
  defaultGroup?: string;
  /**
   * Used for rotation of user managed Key Vault keys. Can only be used to rotate a user managed encryption Key Vault key.
   */
  encryptionConfig?: UpdateEncryptionConfig;
  /**
   * The list of firewall rules associated with this Data Lake Store account.
   */
  firewallRules?: UpdateFirewallRuleWithAccountParameters[];
  /**
   * The list of virtual network rules associated with this Data Lake Store account.
   */
  virtualNetworkRules?: UpdateVirtualNetworkRuleWithAccountParameters[];
  /**
   * The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
   */
  firewallState?: FirewallState;
  /**
   * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
   */
  firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * The list of trusted identity providers associated with this Data Lake Store account.
   */
  trustedIdProviders?: UpdateTrustedIdProviderWithAccountParameters[];
  /**
   * The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
   */
  trustedIdProviderState?: TrustedIdProviderState;
  /**
   * The commitment tier to use for next month.
   */
  newTier?: TierType;
}

/**
 * The encryption configuration used to update a user managed Key Vault key.
 */
export interface UpdateEncryptionConfig {
  /**
   * The updated Key Vault key to use in user managed key rotation.
   */
  keyVaultMetaInfo?: UpdateKeyVaultMetaInfo;
}

/**
 * The Key Vault update information used for user managed key rotation.
 */
export interface UpdateKeyVaultMetaInfo {
  /**
   * The version of the user managed encryption key to update through a key rotation.
   */
  encryptionKeyVersion?: string;
}

/**
 * The parameters used to update a firewall rule while updating a Data Lake Store account.
 */
export interface UpdateFirewallRuleWithAccountParameters {
  /**
   * The unique name of the firewall rule to update.
   */
  name: string;
  /**
   * The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  startIpAddress?: string;
  /**
   * The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  endIpAddress?: string;
}

/**
 * The parameters used to update a virtual network rule while updating a Data Lake Store account.
 */
export interface UpdateVirtualNetworkRuleWithAccountParameters {
  /**
   * The unique name of the virtual network rule to update.
   */
  name: string;
  /**
   * The resource identifier for the subnet.
   */
  subnetId?: string;
}

/**
 * The parameters used to update a trusted identity provider while updating a Data Lake Store account.
 */
export interface UpdateTrustedIdProviderWithAccountParameters {
  /**
   * The unique name of the trusted identity provider to update.
   */
  name: string;
  /**
   * The URL of this trusted identity provider.
   */
  idProvider?: string;
}

/**
 * Data Lake Store firewall rule list information.
 */
export interface FirewallRuleListResult {
  /**
   * The results of the list operation.
   */
  readonly value?: FirewallRule[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The parameters used to create a new firewall rule.
 */
export interface CreateOrUpdateFirewallRuleParameters {
  /**
   * The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  startIpAddress: string;
  /**
   * The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  endIpAddress: string;
}

/**
 * The parameters used to update a firewall rule.
 */
export interface UpdateFirewallRuleParameters {
  /**
   * The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  startIpAddress?: string;
  /**
   * The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
   */
  endIpAddress?: string;
}

/**
 * Data Lake Store virtual network rule list information.
 */
export interface VirtualNetworkRuleListResult {
  /**
   * The results of the list operation.
   */
  readonly value?: VirtualNetworkRule[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The parameters used to create a new virtual network rule.
 */
export interface CreateOrUpdateVirtualNetworkRuleParameters {
  /**
   * The resource identifier for the subnet.
   */
  subnetId: string;
}

/**
 * The parameters used to update a virtual network rule.
 */
export interface UpdateVirtualNetworkRuleParameters {
  /**
   * The resource identifier for the subnet.
   */
  subnetId?: string;
}

/**
 * Data Lake Store trusted identity provider list information.
 */
export interface TrustedIdProviderListResult {
  /**
   * The results of the list operation.
   */
  readonly value?: TrustedIdProvider[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The parameters used to create a new trusted identity provider.
 */
export interface CreateOrUpdateTrustedIdProviderParameters {
  /**
   * The URL of this trusted identity provider.
   */
  idProvider: string;
}

/**
 * The parameters used to update a trusted identity provider.
 */
export interface UpdateTrustedIdProviderParameters {
  /**
   * The URL of this trusted identity provider.
   */
  idProvider?: string;
}

/**
 * The list of available operations for Data Lake Store.
 */
export interface OperationListResult {
  /**
   * The results of the list operation.
   */
  readonly value?: Operation[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An available operation for Data Lake Store.
 */
export interface Operation {
  /**
   * The name of the operation.
   */
  readonly name?: string;
  /**
   * The display information for the operation.
   */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation.
   */
  readonly origin?: OperationOrigin;
}

/**
 * The display information for a particular operation.
 */
export interface OperationDisplay {
  /**
   * The resource provider of the operation.
   */
  readonly provider?: string;
  /**
   * The resource type of the operation.
   */
  readonly resource?: string;
  /**
   * A friendly name of the operation.
   */
  readonly operation?: string;
  /**
   * A friendly description of the operation.
   */
  readonly description?: string;
}

/**
 * Subscription-level properties and limits for Data Lake Store.
 */
export interface CapabilityInformation {
  /**
   * The subscription credentials that uniquely identifies the subscription.
   */
  readonly subscriptionId?: string;
  /**
   * The subscription state.
   */
  readonly state?: SubscriptionState;
  /**
   * The maximum supported number of accounts under this subscription.
   */
  readonly maxAccountCount?: number;
  /**
   * The current number of accounts under this subscription.
   */
  readonly accountCount?: number;
  /**
   * The Boolean value of true or false to indicate the maintenance state.
   */
  readonly migrationState?: boolean;
}

/**
 * The response from the List Usages operation.
 */
export interface UsageListResult {
  /**
   * Gets or sets the list of Storage Resource Usages.
   */
  value?: Usage[];
}

/**
 * Describes the Resource Usage.
 */
export interface Usage {
  /**
   * Gets the unit of measurement.
   */
  readonly unit?: UsageUnit;
  /**
   * Resource identifier.
   */
  readonly id?: string;
  /**
   * Gets the current count of the allocated resources in the subscription.
   */
  readonly currentValue?: number;
  /**
   * Gets the maximum count of the resources that can be allocated in the subscription.
   */
  readonly limit?: number;
  /**
   * Gets the name of the type of usage.
   */
  readonly name?: UsageName;
}

/**
 * The usage names that can be used.
 */
export interface UsageName {
  /**
   * Gets a string describing the resource name.
   */
  readonly value?: string;
  /**
   * Gets a localized string describing the resource name.
   */
  readonly localizedValue?: string;
}

/**
 * Data Lake Store account name availability check parameters.
 */
export interface CheckNameAvailabilityParameters {
  /**
   * The Data Lake Store name to check availability for.
   */
  name: string;
  /**
   * The resource type. Note: This should not be set by the user, as the constant value is Microsoft.DataLakeStore/accounts
   */
  type: "Microsoft.DataLakeStore/accounts";
}

/**
 * Data Lake Store account name availability result information.
 */
export interface NameAvailabilityInformation {
  /**
   * The Boolean value of true or false to indicate whether the Data Lake Store account name is available or not.
   */
  readonly nameAvailable?: boolean;
  /**
   * The reason why the Data Lake Store account name is not available, if nameAvailable is false.
   */
  readonly reason?: string;
  /**
   * The message describing why the Data Lake Store account name is not available, if nameAvailable is false.
   */
  readonly message?: string;
}

/**
 * Defines values for OperationOrigin.
 */
export type OperationOrigin = "user" | "system" | "user,system";
/**
 * Defines values for SubscriptionState.
 */
export type SubscriptionState =
  | "Registered"
  | "Suspended"
  | "Deleted"
  | "Unregistered"
  | "Warned";
/**
 * Defines values for DataLakeStoreAccountStatus.
 */
export type DataLakeStoreAccountStatus =
  | "Failed"
  | "Creating"
  | "Running"
  | "Succeeded"
  | "Patching"
  | "Suspending"
  | "Resuming"
  | "Deleting"
  | "Deleted"
  | "Undeleting"
  | "Canceled";
/**
 * Defines values for DataLakeStoreAccountState.
 */
export type DataLakeStoreAccountState = "Active" | "Suspended";
/**
 * Defines values for EncryptionConfigType.
 */
export type EncryptionConfigType = "UserManaged" | "ServiceManaged";
/**
 * Defines values for EncryptionState.
 */
export type EncryptionState = "Enabled" | "Disabled";
/**
 * Defines values for FirewallState.
 */
export type FirewallState = "Enabled" | "Disabled";
/**
 * Defines values for FirewallAllowAzureIpsState.
 */
export type FirewallAllowAzureIpsState = "Enabled" | "Disabled";
/**
 * Defines values for TrustedIdProviderState.
 */
export type TrustedIdProviderState = "Enabled" | "Disabled";
/**
 * Defines values for TierType.
 */
export type TierType =
  | "Consumption"
  | "Commitment_1TB"
  | "Commitment_10TB"
  | "Commitment_100TB"
  | "Commitment_500TB"
  | "Commitment_1PB"
  | "Commitment_5PB";
/**
 * Defines values for EncryptionProvisioningState.
 */
export type EncryptionProvisioningState = "Creating" | "Succeeded";
/**
 * Defines values for UsageUnit.
 */
export type UsageUnit =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "Percent"
  | "CountsPerSecond"
  | "BytesPerSecond";

/**
 * Optional parameters.
 */
export interface AccountsListOptionalParams extends coreHttp.OperationOptions {
  /**
   * OData filter. Optional.
   */
  filter?: string;
  /**
   * The number of items to return. Optional.
   */
  top?: number;
  /**
   * The number of items to skip over before returning elements. Optional.
   */
  skip?: number;
  /**
   * OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
   */
  select?: string;
  /**
   * OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
   */
  orderby?: string;
  /**
   * The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
   */
  count?: boolean;
}

/**
 * Contains response data for the list operation.
 */
export type AccountsListResponse = DataLakeStoreAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataLakeStoreAccountListResult;
  };
};

/**
 * Optional parameters.
 */
export interface AccountsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter. Optional.
   */
  filter?: string;
  /**
   * The number of items to return. Optional.
   */
  top?: number;
  /**
   * The number of items to skip over before returning elements. Optional.
   */
  skip?: number;
  /**
   * OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
   */
  select?: string;
  /**
   * OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
   */
  orderby?: string;
  /**
   * A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
   */
  count?: boolean;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AccountsListByResourceGroupResponse = DataLakeStoreAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataLakeStoreAccountListResult;
  };
};

/**
 * Contains response data for the create operation.
 */
export type AccountsCreateResponse = DataLakeStoreAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataLakeStoreAccount;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AccountsGetResponse = DataLakeStoreAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataLakeStoreAccount;
  };
};

/**
 * Contains response data for the update operation.
 */
export type AccountsUpdateResponse = DataLakeStoreAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataLakeStoreAccount;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type AccountsCheckNameAvailabilityResponse = NameAvailabilityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NameAvailabilityInformation;
  };
};

/**
 * Optional parameters.
 */
export interface AccountsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter. Optional.
   */
  filter?: string;
  /**
   * The number of items to return. Optional.
   */
  top?: number;
  /**
   * The number of items to skip over before returning elements. Optional.
   */
  skip?: number;
  /**
   * OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
   */
  select?: string;
  /**
   * OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
   */
  orderby?: string;
  /**
   * The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
   */
  count?: boolean;
}

/**
 * Contains response data for the listNext operation.
 */
export type AccountsListNextResponse = DataLakeStoreAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataLakeStoreAccountListResult;
  };
};

/**
 * Optional parameters.
 */
export interface AccountsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter. Optional.
   */
  filter?: string;
  /**
   * The number of items to return. Optional.
   */
  top?: number;
  /**
   * The number of items to skip over before returning elements. Optional.
   */
  skip?: number;
  /**
   * OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
   */
  select?: string;
  /**
   * OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
   */
  orderby?: string;
  /**
   * A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
   */
  count?: boolean;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AccountsListByResourceGroupNextResponse = DataLakeStoreAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataLakeStoreAccountListResult;
  };
};

/**
 * Contains response data for the listByAccount operation.
 */
export type FirewallRulesListByAccountResponse = FirewallRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FirewallRulesCreateOrUpdateResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallRule;
  };
};

/**
 * Contains response data for the get operation.
 */
export type FirewallRulesGetResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallRule;
  };
};

/**
 * Optional parameters.
 */
export interface FirewallRulesUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameters supplied to update the firewall rule.
   */
  parameters?: UpdateFirewallRuleParameters;
}

/**
 * Contains response data for the update operation.
 */
export type FirewallRulesUpdateResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallRule;
  };
};

/**
 * Contains response data for the listByAccountNext operation.
 */
export type FirewallRulesListByAccountNextResponse = FirewallRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FirewallRuleListResult;
  };
};

/**
 * Contains response data for the listByAccount operation.
 */
export type VirtualNetworkRulesListByAccountResponse = VirtualNetworkRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRuleListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkRulesCreateOrUpdateResponse = VirtualNetworkRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRule;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkRulesGetResponse = VirtualNetworkRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRule;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualNetworkRulesUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameters supplied to update the virtual network rule.
   */
  parameters?: UpdateVirtualNetworkRuleParameters;
}

/**
 * Contains response data for the update operation.
 */
export type VirtualNetworkRulesUpdateResponse = VirtualNetworkRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRule;
  };
};

/**
 * Contains response data for the listByAccountNext operation.
 */
export type VirtualNetworkRulesListByAccountNextResponse = VirtualNetworkRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworkRuleListResult;
  };
};

/**
 * Contains response data for the listByAccount operation.
 */
export type TrustedIdProvidersListByAccountResponse = TrustedIdProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TrustedIdProviderListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TrustedIdProvidersCreateOrUpdateResponse = TrustedIdProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TrustedIdProvider;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TrustedIdProvidersGetResponse = TrustedIdProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TrustedIdProvider;
  };
};

/**
 * Optional parameters.
 */
export interface TrustedIdProvidersUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameters supplied to update the trusted identity provider.
   */
  parameters?: UpdateTrustedIdProviderParameters;
}

/**
 * Contains response data for the update operation.
 */
export type TrustedIdProvidersUpdateResponse = TrustedIdProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TrustedIdProvider;
  };
};

/**
 * Contains response data for the listByAccountNext operation.
 */
export type TrustedIdProvidersListByAccountNextResponse = TrustedIdProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TrustedIdProviderListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the getCapability operation.
 */
export type LocationsGetCapabilityResponse = CapabilityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapabilityInformation;
  };
};

/**
 * Contains response data for the getUsage operation.
 */
export type LocationsGetUsageResponse = UsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageListResult;
  };
};

/**
 * Optional parameters.
 */
export interface DataLakeStoreAccountManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
