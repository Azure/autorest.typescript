/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const DataLakeStoreAccountListResult: coreHttp.CompositeMapper = {
  serializedName: "DataLakeStoreAccountListResult",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DataLakeStoreAccountBasic" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const DataLakeStoreAccountBasic: coreHttp.CompositeMapper = {
  serializedName: "DataLakeStoreAccountBasic",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountBasic",
    modelProperties: {
      ...Resource.type.modelProperties,
      accountId: {
        serializedName: "properties.accountId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Suspended"]
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeStoreAccountPropertiesBasic: coreHttp.CompositeMapper = {
  serializedName: "DataLakeStoreAccountPropertiesBasic",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountPropertiesBasic",
    modelProperties: {
      accountId: {
        serializedName: "accountId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Suspended"]
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateDataLakeStoreAccountParameters: coreHttp.CompositeMapper = {
  serializedName: "CreateDataLakeStoreAccountParameters",
  type: {
    name: "Composite",
    className: "CreateDataLakeStoreAccountParameters",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EncryptionIdentity"
        }
      },
      defaultGroup: {
        serializedName: "properties.defaultGroup",
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        serializedName: "encryptionConfig",
        type: {
          name: "Composite",
          className: "EncryptionConfig"
        }
      },
      encryptionState: {
        serializedName: "properties.encryptionState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateVirtualNetworkRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      trustedIdProviders: {
        serializedName: "properties.trustedIdProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateTrustedIdProviderWithAccountParameters"
            }
          }
        }
      },
      trustedIdProviderState: {
        serializedName: "properties.trustedIdProviderState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const EncryptionIdentity: coreHttp.CompositeMapper = {
  serializedName: "EncryptionIdentity",
  type: {
    name: "Composite",
    className: "EncryptionIdentity",
    modelProperties: {
      type: {
        defaultValue: "SystemAssigned",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const EncryptionConfig: coreHttp.CompositeMapper = {
  serializedName: "EncryptionConfig",
  type: {
    name: "Composite",
    className: "EncryptionConfig",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["UserManaged", "ServiceManaged"]
        }
      },
      keyVaultMetaInfo: {
        serializedName: "keyVaultMetaInfo",
        type: {
          name: "Composite",
          className: "KeyVaultMetaInfo"
        }
      }
    }
  }
};

export const KeyVaultMetaInfo: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultMetaInfo",
  type: {
    name: "Composite",
    className: "KeyVaultMetaInfo",
    modelProperties: {
      keyVaultResourceId: {
        serializedName: "keyVaultResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      encryptionKeyName: {
        serializedName: "encryptionKeyName",
        required: true,
        type: {
          name: "String"
        }
      },
      encryptionKeyVersion: {
        serializedName: "encryptionKeyVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateFirewallRuleWithAccountParameters: coreHttp.CompositeMapper = {
  serializedName: "CreateFirewallRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "CreateFirewallRuleWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateVirtualNetworkRuleWithAccountParameters: coreHttp.CompositeMapper = {
  serializedName: "CreateVirtualNetworkRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "CreateVirtualNetworkRuleWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateTrustedIdProviderWithAccountParameters: coreHttp.CompositeMapper = {
  serializedName: "CreateTrustedIdProviderWithAccountParameters",
  type: {
    name: "Composite",
    className: "CreateTrustedIdProviderWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      idProvider: {
        serializedName: "properties.idProvider",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeStoreAccount: coreHttp.CompositeMapper = {
  serializedName: "DataLakeStoreAccount",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EncryptionIdentity"
        }
      },
      accountId: {
        serializedName: "properties.accountId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Suspended"]
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultGroup: {
        serializedName: "properties.defaultGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        serializedName: "encryptionConfig",
        type: {
          name: "Composite",
          className: "EncryptionConfig"
        }
      },
      encryptionState: {
        serializedName: "properties.encryptionState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      encryptionProvisioningState: {
        serializedName: "properties.encryptionProvisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Creating", "Succeeded"]
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      trustedIdProviders: {
        serializedName: "properties.trustedIdProviders",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TrustedIdProvider" }
          }
        }
      },
      trustedIdProviderState: {
        serializedName: "properties.trustedIdProviderState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      },
      currentTier: {
        serializedName: "properties.currentTier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const DataLakeStoreAccountProperties: coreHttp.CompositeMapper = {
  serializedName: "DataLakeStoreAccountProperties",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountProperties",
    modelProperties: {
      ...DataLakeStoreAccountPropertiesBasic.type.modelProperties,
      defaultGroup: {
        serializedName: "defaultGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        serializedName: "encryptionConfig",
        type: {
          name: "Composite",
          className: "EncryptionConfig"
        }
      },
      encryptionState: {
        serializedName: "encryptionState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      encryptionProvisioningState: {
        serializedName: "encryptionProvisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Creating", "Succeeded"]
        }
      },
      firewallRules: {
        serializedName: "firewallRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      },
      firewallState: {
        serializedName: "firewallState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "firewallAllowAzureIps",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      trustedIdProviders: {
        serializedName: "trustedIdProviders",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TrustedIdProvider" }
          }
        }
      },
      trustedIdProviderState: {
        serializedName: "trustedIdProviderState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      newTier: {
        serializedName: "newTier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      },
      currentTier: {
        serializedName: "currentTier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const SubResource: coreHttp.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRule: coreHttp.CompositeMapper = {
  serializedName: "FirewallRule",
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      subnetId: {
        serializedName: "properties.subnetId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedIdProvider: coreHttp.CompositeMapper = {
  serializedName: "TrustedIdProvider",
  type: {
    name: "Composite",
    className: "TrustedIdProvider",
    modelProperties: {
      ...SubResource.type.modelProperties,
      idProvider: {
        serializedName: "properties.idProvider",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateDataLakeStoreAccountParameters: coreHttp.CompositeMapper = {
  serializedName: "UpdateDataLakeStoreAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateDataLakeStoreAccountParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      defaultGroup: {
        serializedName: "properties.defaultGroup",
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        serializedName: "encryptionConfig",
        type: {
          name: "Composite",
          className: "UpdateEncryptionConfig"
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateVirtualNetworkRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      trustedIdProviders: {
        serializedName: "properties.trustedIdProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateTrustedIdProviderWithAccountParameters"
            }
          }
        }
      },
      trustedIdProviderState: {
        serializedName: "properties.trustedIdProviderState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const UpdateEncryptionConfig: coreHttp.CompositeMapper = {
  serializedName: "UpdateEncryptionConfig",
  type: {
    name: "Composite",
    className: "UpdateEncryptionConfig",
    modelProperties: {
      keyVaultMetaInfo: {
        serializedName: "keyVaultMetaInfo",
        type: {
          name: "Composite",
          className: "UpdateKeyVaultMetaInfo"
        }
      }
    }
  }
};

export const UpdateKeyVaultMetaInfo: coreHttp.CompositeMapper = {
  serializedName: "UpdateKeyVaultMetaInfo",
  type: {
    name: "Composite",
    className: "UpdateKeyVaultMetaInfo",
    modelProperties: {
      encryptionKeyVersion: {
        serializedName: "encryptionKeyVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateFirewallRuleWithAccountParameters: coreHttp.CompositeMapper = {
  serializedName: "UpdateFirewallRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVirtualNetworkRuleWithAccountParameters: coreHttp.CompositeMapper = {
  serializedName: "UpdateVirtualNetworkRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateVirtualNetworkRuleWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateTrustedIdProviderWithAccountParameters: coreHttp.CompositeMapper = {
  serializedName: "UpdateTrustedIdProviderWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateTrustedIdProviderWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      idProvider: {
        serializedName: "properties.idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleListResult: coreHttp.CompositeMapper = {
  serializedName: "FirewallRuleListResult",
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FirewallRule" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateFirewallRuleParameters: coreHttp.CompositeMapper = {
  serializedName: "CreateOrUpdateFirewallRuleParameters",
  type: {
    name: "Composite",
    className: "CreateOrUpdateFirewallRuleParameters",
    modelProperties: {
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateFirewallRuleParameters: coreHttp.CompositeMapper = {
  serializedName: "UpdateFirewallRuleParameters",
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleParameters",
    modelProperties: {
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkRuleListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateVirtualNetworkRuleParameters: coreHttp.CompositeMapper = {
  serializedName: "CreateOrUpdateVirtualNetworkRuleParameters",
  type: {
    name: "Composite",
    className: "CreateOrUpdateVirtualNetworkRuleParameters",
    modelProperties: {
      subnetId: {
        serializedName: "properties.subnetId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVirtualNetworkRuleParameters: coreHttp.CompositeMapper = {
  serializedName: "UpdateVirtualNetworkRuleParameters",
  type: {
    name: "Composite",
    className: "UpdateVirtualNetworkRuleParameters",
    modelProperties: {
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedIdProviderListResult: coreHttp.CompositeMapper = {
  serializedName: "TrustedIdProviderListResult",
  type: {
    name: "Composite",
    className: "TrustedIdProviderListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TrustedIdProvider" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateTrustedIdProviderParameters: coreHttp.CompositeMapper = {
  serializedName: "CreateOrUpdateTrustedIdProviderParameters",
  type: {
    name: "Composite",
    className: "CreateOrUpdateTrustedIdProviderParameters",
    modelProperties: {
      idProvider: {
        serializedName: "properties.idProvider",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateTrustedIdProviderParameters: coreHttp.CompositeMapper = {
  serializedName: "UpdateTrustedIdProviderParameters",
  type: {
    name: "Composite",
    className: "UpdateTrustedIdProviderParameters",
    modelProperties: {
      idProvider: {
        serializedName: "properties.idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityInformation: coreHttp.CompositeMapper = {
  serializedName: "CapabilityInformation",
  type: {
    name: "Composite",
    className: "CapabilityInformation",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxAccountCount: {
        serializedName: "maxAccountCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accountCount: {
        serializedName: "accountCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      migrationState: {
        serializedName: "migrationState",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UsageListResult: coreHttp.CompositeMapper = {
  serializedName: "UsageListResult",
  type: {
    name: "Composite",
    className: "UsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Usage" } }
        }
      }
    }
  }
};

export const Usage: coreHttp.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Count",
            "Bytes",
            "Seconds",
            "Percent",
            "CountsPerSecond",
            "BytesPerSecond"
          ]
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreHttp.CompositeMapper = {
  serializedName: "UsageName",
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.DataLakeStore/accounts",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailabilityInformation: coreHttp.CompositeMapper = {
  serializedName: "NameAvailabilityInformation",
  type: {
    name: "Composite",
    className: "NameAvailabilityInformation",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
