/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AdvisorManagementClient } from "../advisorManagementClient";
import {
  RecommendationMetadataGetResponse,
  RecommendationMetadataListResponse,
  RecommendationMetadataListNextResponse
} from "../models";

/**
 * Class representing a RecommendationMetadata.
 */
export class RecommendationMetadata {
  private readonly client: AdvisorManagementClient;

  /**
   * Initialize a new instance of the class RecommendationMetadata class.
   * @param client Reference to the service client
   */
  constructor(client: AdvisorManagementClient) {
    this.client = client;
  }

  /**
   * Gets the metadata entity.
   * @param name Name of metadata entity.
   * @param options The options parameters.
   */
  get(
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<RecommendationMetadataGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, options: operationOptions },
      getOperationSpec
    ) as Promise<RecommendationMetadataGetResponse>;
  }

  /**
   * Gets the list of metadata entities.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<RecommendationMetadataListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<RecommendationMetadataListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<RecommendationMetadataListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<RecommendationMetadataListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Advisor/metadata/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetadataEntity
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Advisor/metadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetadataEntityListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetadataEntityListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  serializer
};
