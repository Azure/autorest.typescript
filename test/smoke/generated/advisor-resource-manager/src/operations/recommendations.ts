/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AdvisorManagementClient } from "../advisorManagementClient";
import {
  RecommendationsGenerateResponse,
  RecommendationsListOptionalParams,
  RecommendationsListResponse,
  RecommendationsGetResponse,
  RecommendationsListNextOptionalParams,
  RecommendationsListNextResponse
} from "../models";

/**
 * Class representing a Recommendations.
 */
export class Recommendations {
  private readonly client: AdvisorManagementClient;

  /**
   * Initialize a new instance of the class Recommendations class.
   * @param client Reference to the service client
   */
  constructor(client: AdvisorManagementClient) {
    this.client = client;
  }

  /**
   * Initiates the recommendation generation or computation process for a subscription. This operation is
   * asynchronous. The generated recommendations are stored in a cache in the Advisor service.
   * @param options The options parameters.
   */
  generate(
    options?: coreHttp.OperationOptions
  ): Promise<RecommendationsGenerateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      generateOperationSpec
    ) as Promise<RecommendationsGenerateResponse>;
  }

  /**
   * Retrieves the status of the recommendation computation or generation process. Invoke this API after
   * calling the generation recommendation. The URI of this API is returned in the Location field of the
   * response header.
   * @param operationId The operation ID, which can be found from the Location field in the generate
   *                    recommendation response header.
   * @param options The options parameters.
   */
  getGenerateStatus(
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { operationId, options: operationOptions },
      getGenerateStatusOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
   * invoking generateRecommendations.
   * @param options The options parameters.
   */
  list(
    options?: RecommendationsListOptionalParams
  ): Promise<RecommendationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<RecommendationsListResponse>;
  }

  /**
   * Obtains details of a cached recommendation.
   * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
   *                    the recommendation applies.
   * @param recommendationId The recommendation ID.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    recommendationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<RecommendationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceUri, recommendationId, options: operationOptions },
      getOperationSpec
    ) as Promise<RecommendationsGetResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: RecommendationsListNextOptionalParams
  ): Promise<RecommendationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<RecommendationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const generateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.RecommendationsGenerateHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getGenerateStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations/{operationId}",
  httpMethod: "GET",
  responses: { 202: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/recommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBaseListResult
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBase
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.recommendationId
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRecommendationBaseListResult
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  serializer
};
