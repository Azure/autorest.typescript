/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AdvisorManagementClient } from "../advisorManagementClient";
import {
  ConfigurationsListBySubscriptionResponse,
  ConfigData,
  ConfigurationsCreateInSubscriptionResponse,
  ConfigurationsListByResourceGroupResponse,
  ConfigurationsCreateInResourceGroupResponse,
  ConfigurationsListBySubscriptionNextResponse
} from "../models";

/**
 * Class representing a Configurations.
 */
export class Configurations {
  private readonly client: AdvisorManagementClient;

  /**
   * Initialize a new instance of the class Configurations class.
   * @param client Reference to the service client
   */
  constructor(client: AdvisorManagementClient) {
    this.client = client;
  }

  /**
   * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: coreHttp.OperationOptions
  ): Promise<ConfigurationsListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<ConfigurationsListBySubscriptionResponse>;
  }

  /**
   * Create/Overwrite Azure Advisor configuration and also delete all configurations of contained
   * resource groups.
   * @param configContract The Azure Advisor configuration data structure.
   * @param options The options parameters.
   */
  createInSubscription(
    configContract: ConfigData,
    options?: coreHttp.OperationOptions
  ): Promise<ConfigurationsCreateInSubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { configContract, options: operationOptions },
      createInSubscriptionOperationSpec
    ) as Promise<ConfigurationsCreateInSubscriptionResponse>;
  }

  /**
   * Retrieve Azure Advisor configurations.
   * @param resourceGroup The name of the Azure resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroup: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConfigurationsListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<ConfigurationsListByResourceGroupResponse>;
  }

  /**
   * Create/Overwrite Azure Advisor configuration.
   * @param configContract The Azure Advisor configuration data structure.
   * @param resourceGroup The name of the Azure resource group.
   * @param options The options parameters.
   */
  createInResourceGroup(
    configContract: ConfigData,
    resourceGroup: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConfigurationsCreateInResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { configContract, resourceGroup, options: operationOptions },
      createInResourceGroupOperationSpec
    ) as Promise<ConfigurationsCreateInResourceGroupResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ConfigurationsListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<ConfigurationsListBySubscriptionNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const createInSubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations/{configurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigData
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.configContract,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  serializer
};
const createInResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations/{configurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigData
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.configContract,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationName,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
