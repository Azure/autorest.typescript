/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Collection of certificate orders.
 */
export interface AppServiceCertificateOrderCollection {
  /**
   * Collection of resources.
   */
  value: AppServiceCertificateOrder[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Key Vault container for a certificate that is purchased through Azure.
 */
export interface AppServiceCertificate {
  /**
   * Key Vault resource Id.
   */
  keyVaultId?: string;
  /**
   * Key Vault secret name.
   */
  keyVaultSecretName?: string;
  /**
   * Status of the Key Vault secret.
   */
  readonly provisioningState?: KeyVaultSecretStatus;
}

/**
 * SSL certificate details.
 */
export interface CertificateDetails {
  /**
   * Certificate Version.
   */
  readonly version?: number;
  /**
   * Certificate Serial Number.
   */
  readonly serialNumber?: string;
  /**
   * Certificate Thumbprint.
   */
  readonly thumbprint?: string;
  /**
   * Certificate Subject.
   */
  readonly subject?: string;
  /**
   * Date Certificate is valid from.
   */
  readonly notBefore?: Date;
  /**
   * Date Certificate is valid to.
   */
  readonly notAfter?: Date;
  /**
   * Certificate Signature algorithm.
   */
  readonly signatureAlgorithm?: string;
  /**
   * Certificate Issuer.
   */
  readonly issuer?: string;
  /**
   * Raw certificate data.
   */
  readonly rawData?: string;
}

/**
 * Azure resource. This resource is tracked in Azure Resource Manager
 */
export interface Resource {
  /**
   * Resource Id.
   */
  readonly id?: string;
  /**
   * Resource Name.
   */
  readonly name?: string;
  /**
   * Kind of resource.
   */
  kind?: string;
  /**
   * Resource Location.
   */
  location: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * App Service error response.
 */
export interface DefaultErrorResponse {
  /**
   * Error model.
   */
  readonly error?: DefaultErrorResponseError;
}

/**
 * Error model.
 */
export interface DefaultErrorResponseError {
  /**
   * Standardized string to programmatically identify the error.
   */
  readonly code?: string;
  /**
   * Detailed error description and debugging information.
   */
  readonly message?: string;
  /**
   * Detailed error description and debugging information.
   */
  readonly target?: string;
  details?: DefaultErrorResponseErrorDetailsItem[];
  /**
   * More information to debug error.
   */
  readonly innererror?: string;
}

/**
 * Detailed errors.
 */
export interface DefaultErrorResponseErrorDetailsItem {
  /**
   * Standardized string to programmatically identify the error.
   */
  readonly code?: string;
  /**
   * Detailed error description and debugging information.
   */
  readonly message?: string;
  /**
   * Detailed error description and debugging information.
   */
  readonly target?: string;
}

/**
 * Azure proxy only resource. This resource is not tracked by Azure Resource Manager.
 */
export interface ProxyOnlyResource {
  /**
   * Resource Id.
   */
  readonly id?: string;
  /**
   * Resource Name.
   */
  readonly name?: string;
  /**
   * Kind of resource.
   */
  kind?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
}

/**
 * Collection of certificate order certificates.
 */
export interface AppServiceCertificateCollection {
  /**
   * Collection of resources.
   */
  value: AppServiceCertificateResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Identifies an object.
 */
export interface NameIdentifier {
  /**
   * Name of the object.
   */
  name?: string;
}

/**
 * Site seal request.
 */
export interface SiteSealRequest {
  /**
   * If <code>true</code> use the light color theme for site seal; otherwise, use the default color theme.
   */
  lightTheme?: boolean;
  /**
   * Locale of site seal.
   */
  locale?: string;
}

/**
 * Site seal
 */
export interface SiteSeal {
  /**
   * HTML snippet
   */
  html: string;
}

/**
 * Collection of Azure resource manager operation metadata.
 */
export interface CsmOperationCollection {
  /**
   * Collection of resources.
   */
  value: CsmOperationDescription[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Description of an operation available for Microsoft.Web resource provider.
 */
export interface CsmOperationDescription {
  name?: string;
  /**
   * Meta data about operation used for display in portal.
   */
  display?: CsmOperationDisplay;
  origin?: string;
  /**
   * Properties available for a Microsoft.Web resource provider operation.
   */
  properties?: CsmOperationDescriptionProperties;
}

/**
 * Meta data about operation used for display in portal.
 */
export interface CsmOperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/**
 * Properties available for a Microsoft.Web resource provider operation.
 */
export interface CsmOperationDescriptionProperties {
  /**
   * Resource metrics service provided by Microsoft.Insights resource provider.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Resource metrics service provided by Microsoft.Insights resource provider.
 */
export interface ServiceSpecification {
  metricSpecifications?: MetricSpecification[];
  logSpecifications?: LogSpecification[];
}

/**
 * Definition of a single resource metric.
 */
export interface MetricSpecification {
  name?: string;
  displayName?: string;
  displayDescription?: string;
  unit?: string;
  aggregationType?: string;
  supportsInstanceLevelAggregation?: boolean;
  enableRegionalMdmAccount?: boolean;
  sourceMdmAccount?: string;
  sourceMdmNamespace?: string;
  metricFilterPattern?: string;
  fillGapWithZero?: boolean;
  isInternal?: boolean;
  dimensions?: Dimension[];
  category?: string;
  availabilities?: MetricAvailability[];
  supportedTimeGrainTypes?: string[];
}

/**
 * Dimension of a resource metric. For e.g. instance specific HTTP requests for a web app,
 * where instance name is dimension of the metric HTTP request
 */
export interface Dimension {
  name?: string;
  displayName?: string;
  internalName?: string;
  toBeExportedForShoebox?: boolean;
}

/**
 * Retention policy of a resource metric.
 */
export interface MetricAvailability {
  timeGrain?: string;
  blobDuration?: string;
}

/**
 * Log Definition of a single resource metric.
 */
export interface LogSpecification {
  name?: string;
  displayName?: string;
  blobDuration?: string;
}

/**
 * Domain availability check result.
 */
export interface DomainAvailabilityCheckResult {
  /**
   * Name of the domain.
   */
  name?: string;
  /**
   * <code>true</code> if domain can be purchased using CreateDomain API; otherwise, <code>false</code>.
   */
  available?: boolean;
  /**
   * Valid values are Regular domain: Azure will charge the full price of domain registration, SoftDeleted: Purchasing this domain will simply restore it and this operation will not cost anything.
   */
  domainType?: DomainType;
}

/**
 * Collection of domains.
 */
export interface DomainCollection {
  /**
   * Collection of resources.
   */
  value: Domain[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Contact information for domain registration. If 'Domain Privacy' option is not selected then the contact information is made publicly available through the Whois
 * directories as per ICANN requirements.
 */
export interface Contact {
  /**
   * Mailing address.
   */
  addressMailing?: Address;
  /**
   * Email address.
   */
  email: string;
  /**
   * Fax number.
   */
  fax?: string;
  /**
   * Job title.
   */
  jobTitle?: string;
  /**
   * First name.
   */
  nameFirst: string;
  /**
   * Last name.
   */
  nameLast: string;
  /**
   * Middle name.
   */
  nameMiddle?: string;
  /**
   * Organization contact belongs to.
   */
  organization?: string;
  /**
   * Phone number.
   */
  phone: string;
}

/**
 * Address information for domain registration.
 */
export interface Address {
  /**
   * First line of an Address.
   */
  address1: string;
  /**
   * The second line of the Address. Optional.
   */
  address2?: string;
  /**
   * The city for the address.
   */
  city: string;
  /**
   * The country for the address.
   */
  country: string;
  /**
   * The postal code for the address.
   */
  postalCode: string;
  /**
   * The state or province for the address.
   */
  state: string;
}

/**
 * Details of a hostname derived from a domain.
 */
export interface HostName {
  /**
   * Name of the hostname.
   */
  name?: string;
  /**
   * List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager.
   */
  siteNames?: string[];
  /**
   * Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name.
   */
  azureResourceName?: string;
  /**
   * Type of the Azure resource the hostname is assigned to.
   */
  azureResourceType?: AzureResourceType;
  /**
   * Type of the DNS record.
   */
  customHostNameDnsRecordType?: CustomHostNameDnsRecordType;
  /**
   * Type of the hostname.
   */
  hostNameType?: HostNameType;
}

/**
 * Domain purchase consent object, representing acceptance of applicable legal agreements.
 */
export interface DomainPurchaseConsent {
  /**
   * List of applicable legal agreement keys. This list can be retrieved using ListLegalAgreements API under <code>TopLevelDomain</code> resource.
   */
  agreementKeys?: string[];
  /**
   * Client IP address.
   */
  agreedBy?: string;
  /**
   * Timestamp when the agreements were accepted.
   */
  agreedAt?: Date;
}

/**
 * Single sign-on request information for domain management.
 */
export interface DomainControlCenterSsoRequest {
  /**
   * URL where the single sign-on request is to be made.
   */
  readonly url?: string;
  /**
   * Post parameter key.
   */
  readonly postParameterKey?: string;
  /**
   * Post parameter value. Client should use 'application/x-www-form-urlencoded' encoding for this value.
   */
  readonly postParameterValue?: string;
}

/**
 * Domain recommendation search parameters.
 */
export interface DomainRecommendationSearchParameters {
  /**
   * Keywords to be used for generating domain recommendations.
   */
  keywords?: string;
  /**
   * Maximum number of recommendations.
   */
  maxDomainRecommendations?: number;
}

/**
 * Collection of domain name identifiers.
 */
export interface NameIdentifierCollection {
  /**
   * Collection of resources.
   */
  value: NameIdentifier[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of domain ownership identifiers.
 */
export interface DomainOwnershipIdentifierCollection {
  /**
   * Collection of resources.
   */
  value: DomainOwnershipIdentifier[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Top-level domains.
 */
export interface TopLevelDomainCollection {
  /**
   * Collection of resources.
   */
  value: TopLevelDomain[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Options for retrieving the list of top level domain legal agreements.
 */
export interface TopLevelDomainAgreementOption {
  /**
   * If <code>true</code>, then the list of agreements will include agreements for domain privacy as well; otherwise, <code>false</code>.
   */
  includePrivacy?: boolean;
  /**
   * If <code>true</code>, then the list of agreements will include agreements for domain transfer as well; otherwise, <code>false</code>.
   */
  forTransfer?: boolean;
}

/**
 * Collection of top-level domain legal agreements.
 */
export interface TldLegalAgreementCollection {
  /**
   * Collection of resources.
   */
  value: TldLegalAgreement[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Legal agreement for a top level domain.
 */
export interface TldLegalAgreement {
  /**
   * Unique identifier for the agreement.
   */
  agreementKey: string;
  /**
   * Agreement title.
   */
  title: string;
  /**
   * Agreement details.
   */
  content: string;
  /**
   * URL where a copy of the agreement details is hosted.
   */
  url?: string;
}

/**
 * Collection of certificates.
 */
export interface CertificateCollection {
  /**
   * Collection of resources.
   */
  value: Certificate[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Specification for an App Service Environment to use for this resource.
 */
export interface HostingEnvironmentProfile {
  /**
   * Resource ID of the App Service Environment.
   */
  id?: string;
  /**
   * Name of the App Service Environment.
   */
  readonly name?: string;
  /**
   * Resource type of the App Service Environment.
   */
  readonly type?: string;
}

/**
 * Collection of deleted apps.
 */
export interface DeletedWebAppCollection {
  /**
   * Collection of resources.
   */
  value: DeletedSite[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of detector responses
 */
export interface DetectorResponseCollection {
  /**
   * Collection of resources.
   */
  value: DetectorResponse[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Definition of Detector
 */
export interface DetectorInfo {
  /**
   * Short description of the detector and its purpose
   */
  readonly description?: string;
  /**
   * Support Category
   */
  readonly category?: string;
  /**
   * Support Sub Category
   */
  readonly subCategory?: string;
  /**
   * Support Topic Id
   */
  readonly supportTopicId?: string;
}

/**
 * Set of data with rendering instructions
 */
export interface DiagnosticData {
  /**
   * Data in table form
   */
  table?: DataTableResponseObject;
  /**
   * Properties that describe how the table should be rendered
   */
  renderingProperties?: Rendering;
}

/**
 * Data Table which defines columns and raw row values
 */
export interface DataTableResponseObject {
  /**
   * Name of the table
   */
  tableName?: string;
  /**
   * List of columns with data types
   */
  columns?: DataTableResponseColumn[];
  /**
   * Raw row values
   */
  rows?: string[][];
}

/**
 * Column definition
 */
export interface DataTableResponseColumn {
  /**
   * Name of the column
   */
  columnName?: string;
  /**
   * Data type which looks like 'String' or 'Int32'.
   */
  dataType?: string;
  /**
   * Column Type
   */
  columnType?: string;
}

/**
 * Instructions for rendering the data
 */
export interface Rendering {
  /**
   * Rendering Type
   */
  type?: RenderingType;
  /**
   * Title of data
   */
  title?: string;
  /**
   * Description of the data that will help it be interpreted
   */
  description?: string;
}

/**
 * Collection of Diagnostic Categories
 */
export interface DiagnosticCategoryCollection {
  /**
   * Collection of resources.
   */
  value: DiagnosticCategory[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Diagnostic Analyses
 */
export interface DiagnosticAnalysisCollection {
  /**
   * Collection of resources.
   */
  value: AnalysisDefinition[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Class representing Abnormal Time Period identified in diagnosis
 */
export interface AbnormalTimePeriod {
  /**
   * Start time of the downtime
   */
  startTime?: Date;
  /**
   * End time of the downtime
   */
  endTime?: Date;
  /**
   * List of Possible Cause of downtime
   */
  events?: DetectorAbnormalTimePeriod[];
  /**
   * List of proposed solutions
   */
  solutions?: Solution[];
}

/**
 * Class representing Abnormal Time Period detected.
 */
export interface DetectorAbnormalTimePeriod {
  /**
   * Start time of the correlated event
   */
  startTime?: Date;
  /**
   * End time of the correlated event
   */
  endTime?: Date;
  /**
   * Message describing the event
   */
  message?: string;
  /**
   * Represents the name of the Detector
   */
  source?: string;
  /**
   * Represents the rank of the Detector
   */
  priority?: number;
  /**
   * Downtime metadata
   */
  metaData?: NameValuePair[][];
  /**
   * Represents the type of the Detector
   */
  type?: IssueType;
  /**
   * List of proposed solutions
   */
  solutions?: Solution[];
}

/**
 * Name value pair.
 */
export interface NameValuePair {
  /**
   * Pair name.
   */
  name?: string;
  /**
   * Pair value.
   */
  value?: string;
}

/**
 * Class Representing Solution for problems detected.
 */
export interface Solution {
  /**
   * Solution Id.
   */
  id?: number;
  /**
   * Display Name of the solution
   */
  displayName?: string;
  /**
   * Order of the solution.
   */
  order?: number;
  /**
   * Description of the solution
   */
  description?: string;
  /**
   * Type of Solution
   */
  type?: SolutionType;
  /**
   * Solution Data.
   */
  data?: NameValuePair[][];
  /**
   * Solution Metadata.
   */
  metadata?: NameValuePair[][];
}

/**
 * Class Representing Detector Evidence used for analysis
 */
export interface AnalysisData {
  /**
   * Name of the Detector
   */
  source?: string;
  /**
   * Detector Definition
   */
  detectorDefinition?: DetectorDefinition;
  /**
   * Source Metrics
   */
  metrics?: DiagnosticMetricSet[];
  /**
   * Additional Source Data
   */
  data?: NameValuePair[][];
  /**
   * Detector Meta Data
   */
  detectorMetaData?: ResponseMetaData;
}

/**
 * Class representing Diagnostic Metric information
 */
export interface DiagnosticMetricSet {
  /**
   * Name of the metric
   */
  name?: string;
  /**
   * Metric's unit
   */
  unit?: string;
  /**
   * Start time of the period
   */
  startTime?: Date;
  /**
   * End time of the period
   */
  endTime?: Date;
  /**
   * Presented time grain. Supported grains at the moment are PT1M, PT1H, P1D
   */
  timeGrain?: string;
  /**
   * Collection of metric values for the selected period based on the {Microsoft.Web.Hosting.Administration.DiagnosticMetricSet.TimeGrain}
   */
  values?: DiagnosticMetricSample[];
}

/**
 * Class representing Diagnostic Metric
 */
export interface DiagnosticMetricSample {
  /**
   * Time at which metric is measured
   */
  timestamp?: Date;
  /**
   * Role Instance. Null if this counter is not per instance
   * This is returned and should be whichever instance name we desire to be returned
   * i.e. CPU and Memory return RDWORKERNAME (LargeDed..._IN_0)
   * where RDWORKERNAME is Machine name below and RoleInstance name in parenthesis
   */
  roleInstance?: string;
  /**
   * Total value of the metric. If multiple measurements are made this will have sum of all.
   */
  total?: number;
  /**
   * Maximum of the metric sampled during the time period
   */
  maximum?: number;
  /**
   * Minimum of the metric sampled during the time period
   */
  minimum?: number;
  /**
   * Whether the values are aggregates across all workers or not
   */
  isAggregated?: boolean;
}

export interface ResponseMetaData {
  /**
   * Source of the Data
   */
  dataSource?: DataSource;
}

/**
 * Class representing data source used by the detectors
 */
export interface DataSource {
  /**
   * Instructions if any for the data source
   */
  instructions?: string[];
  /**
   * Datasource Uri Links
   */
  dataSourceUri?: NameValuePair[];
}

/**
 * Collection of Diagnostic Detectors
 */
export interface DiagnosticDetectorCollection {
  /**
   * Collection of resources.
   */
  value: DetectorDefinition[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Application Stacks
 */
export interface ApplicationStackCollection {
  /**
   * Collection of resources.
   */
  value: ApplicationStackResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Application stack.
 */
export interface ApplicationStack {
  /**
   * Application stack name.
   */
  name?: string;
  /**
   * Application stack display name.
   */
  display?: string;
  /**
   * Application stack dependency.
   */
  dependency?: string;
  /**
   * List of major versions available.
   */
  majorVersions?: StackMajorVersion[];
  /**
   * List of frameworks associated with application stack.
   */
  frameworks?: ApplicationStack[];
}

/**
 * Application stack major version.
 */
export interface StackMajorVersion {
  /**
   * Application stack major version (display only).
   */
  displayVersion?: string;
  /**
   * Application stack major version (runtime only).
   */
  runtimeVersion?: string;
  /**
   * <code>true</code> if this is the default major version; otherwise, <code>false</code>.
   */
  isDefault?: boolean;
  /**
   * Minor versions associated with the major version.
   */
  minorVersions?: StackMinorVersion[];
  /**
   * <code>true</code> if this supports Application Insights; otherwise, <code>false</code>.
   */
  applicationInsights?: boolean;
  /**
   * <code>true</code> if this stack is in Preview, otherwise <code>false</code>.
   */
  isPreview?: boolean;
  /**
   * <code>true</code> if this stack has been deprecated, otherwise <code>false</code>.
   */
  isDeprecated?: boolean;
  /**
   * <code>true</code> if this stack should be hidden for new customers on portal, otherwise <code>false</code>.
   */
  isHidden?: boolean;
}

/**
 * Application stack minor version.
 */
export interface StackMinorVersion {
  /**
   * Application stack minor version (display only).
   */
  displayVersion?: string;
  /**
   * Application stack minor version (runtime only).
   */
  runtimeVersion?: string;
  /**
   * <code>true</code> if this is the default minor version; otherwise, <code>false</code>.
   */
  isDefault?: boolean;
  /**
   * <code>true</code> if this supports Remote Debugging, otherwise <code>false</code>.
   */
  isRemoteDebuggingEnabled?: boolean;
}

/**
 * Collection of recommendations.
 */
export interface RecommendationCollection {
  /**
   * Collection of resources.
   */
  value: Recommendation[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of source controls.
 */
export interface SourceControlCollection {
  /**
   * Collection of resources.
   */
  value: SourceControl[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Billing Meters
 */
export interface BillingMeterCollection {
  /**
   * Collection of resources.
   */
  value: BillingMeter[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Resource name availability request content.
 */
export interface ResourceNameAvailabilityRequest {
  /**
   * Resource name to verify.
   */
  name: string;
  /**
   * Resource type used for verification.
   */
  type: CheckNameResourceTypes;
  /**
   * Is fully qualified domain name.
   */
  isFqdn?: boolean;
}

/**
 * Information regarding availability of a resource name.
 */
export interface ResourceNameAvailability {
  /**
   * <code>true</code> indicates name is valid and available. <code>false</code> indicates the name is invalid, unavailable, or both.
   */
  nameAvailable?: boolean;
  /**
   * <code>Invalid</code> indicates the name provided does not match Azure App Service naming requirements. <code>AlreadyExists</code> indicates that the name is already in use and is therefore unavailable.
   */
  reason?: InAvailabilityReasonType;
  /**
   * If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name.
   */
  message?: string;
}

/**
 * List of available locations (regions or App Service Environments) for
 * deployment of App Service resources.
 */
export interface DeploymentLocations {
  /**
   * Available regions.
   */
  locations?: GeoRegion[];
  /**
   * Available App Service Environments with full descriptions of the environments.
   */
  hostingEnvironments?: AppServiceEnvironment[];
  /**
   * Available App Service Environments with basic information.
   */
  hostingEnvironmentDeploymentInfos?: HostingEnvironmentDeploymentInfo[];
}

/**
 * Description of an App Service Environment.
 */
export interface AppServiceEnvironment {
  /**
   * Name of the App Service Environment.
   */
  name: string;
  /**
   * Location of the App Service Environment, e.g. "West US".
   */
  location: string;
  /**
   * Provisioning state of the App Service Environment.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Current status of the App Service Environment.
   */
  readonly status?: HostingEnvironmentStatus;
  /**
   * Name of the Virtual Network for the App Service Environment.
   */
  vnetName?: string;
  /**
   * Resource group of the Virtual Network.
   */
  vnetResourceGroupName?: string;
  /**
   * Subnet of the Virtual Network.
   */
  vnetSubnetName?: string;
  /**
   * Description of the Virtual Network.
   */
  virtualNetwork: VirtualNetworkProfile;
  /**
   * Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
   */
  internalLoadBalancingMode?: InternalLoadBalancingMode;
  /**
   * Front-end VM size, e.g. "Medium", "Large".
   */
  multiSize?: string;
  /**
   * Number of front-end instances.
   */
  multiRoleCount?: number;
  /**
   * Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
   */
  workerPools: WorkerPool[];
  /**
   * Number of IP SSL addresses reserved for the App Service Environment.
   */
  ipsslAddressCount?: number;
  /**
   * Edition of the metadata database for the App Service Environment, e.g. "Standard".
   */
  readonly databaseEdition?: string;
  /**
   * Service objective of the metadata database for the App Service Environment, e.g. "S0".
   */
  readonly databaseServiceObjective?: string;
  /**
   * Number of upgrade domains of the App Service Environment.
   */
  readonly upgradeDomains?: number;
  /**
   * Subscription of the App Service Environment.
   */
  readonly subscriptionId?: string;
  /**
   * DNS suffix of the App Service Environment.
   */
  dnsSuffix?: string;
  /**
   * Last deployment action on the App Service Environment.
   */
  readonly lastAction?: string;
  /**
   * Result of the last deployment action on the App Service Environment.
   */
  readonly lastActionResult?: string;
  /**
   * List of comma separated strings describing which VM sizes are allowed for front-ends.
   */
  readonly allowedMultiSizes?: string;
  /**
   * List of comma separated strings describing which VM sizes are allowed for workers.
   */
  readonly allowedWorkerSizes?: string;
  /**
   * Maximum number of VMs in the App Service Environment.
   */
  readonly maximumNumberOfMachines?: number;
  /**
   * Description of IP SSL mapping for the App Service Environment.
   */
  readonly vipMappings?: VirtualIPMapping[];
  /**
   * Current total, used, and available worker capacities.
   */
  readonly environmentCapacities?: StampCapacity[];
  /**
   * Access control list for controlling traffic to the App Service Environment.
   */
  networkAccessControlList?: NetworkAccessControlEntry[];
  /**
   * True/false indicating whether the App Service Environment is healthy.
   */
  readonly environmentIsHealthy?: boolean;
  /**
   * Detailed message about with results of the last check of the App Service Environment.
   */
  readonly environmentStatus?: string;
  /**
   * Resource group of the App Service Environment.
   */
  readonly resourceGroup?: string;
  /**
   * Scale factor for front-ends.
   */
  frontEndScaleFactor?: number;
  /**
   * Default Scale Factor for FrontEnds.
   */
  readonly defaultFrontEndScaleFactor?: number;
  /**
   * API Management Account associated with the App Service Environment.
   */
  apiManagementAccountId?: string;
  /**
   * <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available
   *  (most likely because NSG blocked the incoming traffic).
   */
  suspended?: boolean;
  /**
   * True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
   * (most likely because NSG blocked the incoming traffic).
   */
  dynamicCacheEnabled?: boolean;
  /**
   * Custom settings for changing the behavior of the App Service Environment.
   */
  clusterSettings?: NameValuePair[];
  /**
   * User added ip ranges to whitelist on ASE db
   */
  userWhitelistedIpRanges?: string[];
  /**
   * Flag that displays whether an ASE has linux workers or not
   */
  hasLinuxWorkers?: boolean;
  /**
   * Key Vault ID for ILB App Service Environment default SSL certificate
   */
  sslCertKeyVaultId?: string;
  /**
   * Key Vault Secret Name for ILB App Service Environment default SSL certificate
   */
  sslCertKeyVaultSecretName?: string;
}

/**
 * Specification for using a Virtual Network.
 */
export interface VirtualNetworkProfile {
  /**
   * Resource id of the Virtual Network.
   */
  id?: string;
  /**
   * Name of the Virtual Network (read-only).
   */
  readonly name?: string;
  /**
   * Resource type of the Virtual Network (read-only).
   */
  readonly type?: string;
  /**
   * Subnet within the Virtual Network.
   */
  subnet?: string;
}

/**
 * Worker pool of an App Service Environment.
 */
export interface WorkerPool {
  /**
   * Worker size ID for referencing this worker pool.
   */
  workerSizeId?: number;
  /**
   * Shared or dedicated app hosting.
   */
  computeMode?: ComputeModeOptions;
  /**
   * VM size of the worker pool instances.
   */
  workerSize?: string;
  /**
   * Number of instances in the worker pool.
   */
  workerCount?: number;
  /**
   * Names of all instances in the worker pool (read only).
   */
  readonly instanceNames?: string[];
}

/**
 * Virtual IP mapping.
 */
export interface VirtualIPMapping {
  /**
   * Virtual IP address.
   */
  virtualIP?: string;
  /**
   * Internal HTTP port.
   */
  internalHttpPort?: number;
  /**
   * Internal HTTPS port.
   */
  internalHttpsPort?: number;
  /**
   * Is virtual IP mapping in use.
   */
  inUse?: boolean;
  /**
   * name of the service that virtual IP is assigned to
   */
  serviceName?: string;
}

/**
 * Stamp capacity information.
 */
export interface StampCapacity {
  /**
   * Name of the stamp.
   */
  name?: string;
  /**
   * Available capacity (# of machines, bytes of storage etc...).
   */
  availableCapacity?: number;
  /**
   * Total capacity (# of machines, bytes of storage etc...).
   */
  totalCapacity?: number;
  /**
   * Name of the unit.
   */
  unit?: string;
  /**
   * Shared/dedicated workers.
   */
  computeMode?: ComputeModeOptions;
  /**
   * Size of the machines.
   */
  workerSize?: WorkerSizeOptions;
  /**
   * Size ID of machines:
   * 0 - Small
   * 1 - Medium
   * 2 - Large
   */
  workerSizeId?: number;
  /**
   * If <code>true</code>, it includes basic apps.
   * Basic apps are not used for capacity allocation.
   */
  excludeFromCapacityAllocation?: boolean;
  /**
   * <code>true</code> if capacity is applicable for all apps; otherwise, <code>false</code>.
   */
  isApplicableForAllComputeModes?: boolean;
  /**
   * Shared or Dedicated.
   */
  siteMode?: string;
  /**
   * Is this a linux stamp capacity
   */
  isLinux?: boolean;
}

/**
 * Network access control entry.
 */
export interface NetworkAccessControlEntry {
  /**
   * Action object.
   */
  action?: AccessControlEntryAction;
  /**
   * Description of network access control entry.
   */
  description?: string;
  /**
   * Order of precedence.
   */
  order?: number;
  /**
   * Remote subnet.
   */
  remoteSubnet?: string;
}

/**
 * Information needed to create resources on an App Service Environment.
 */
export interface HostingEnvironmentDeploymentInfo {
  /**
   * Name of the App Service Environment.
   */
  name?: string;
  /**
   * Location of the App Service Environment.
   */
  location?: string;
}

/**
 * Collection of geographical regions.
 */
export interface GeoRegionCollection {
  /**
   * Collection of resources.
   */
  value: GeoRegion[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of identifiers.
 */
export interface IdentifierCollection {
  /**
   * Collection of resources.
   */
  value: Identifier[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of premier add-on offers.
 */
export interface PremierAddOnOfferCollection {
  /**
   * Collection of resources.
   */
  value: PremierAddOnOffer[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of SKU information.
 */
export interface SkuInfos {
  /**
   * Resource type that this SKU applies to.
   */
  resourceType?: string;
  /**
   * List of SKUs the subscription is able to use.
   */
  skus?: GlobalCsmSkuDescription[];
}

/**
 * A Global SKU Description.
 */
export interface GlobalCsmSkuDescription {
  /**
   * Name of the resource SKU.
   */
  name?: string;
  /**
   * Service Tier of the resource SKU.
   */
  tier?: string;
  /**
   * Size specifier of the resource SKU.
   */
  size?: string;
  /**
   * Family code of the resource SKU.
   */
  family?: string;
  /**
   * Min, max, and default scale values of the SKU.
   */
  capacity?: SkuCapacity;
  /**
   * Locations of the SKU.
   */
  locations?: string[];
  /**
   * Capabilities of the SKU, e.g., is traffic manager enabled?
   */
  capabilities?: Capability[];
}

/**
 * Description of the App Service plan scale options.
 */
export interface SkuCapacity {
  /**
   * Minimum number of workers for this App Service plan SKU.
   */
  minimum?: number;
  /**
   * Maximum number of workers for this App Service plan SKU.
   */
  maximum?: number;
  /**
   * Default number of workers for this App Service plan SKU.
   */
  default?: number;
  /**
   * Available scale configurations for an App Service plan.
   */
  scaleType?: string;
}

/**
 * Describes the capabilities/features allowed for a specific SKU.
 */
export interface Capability {
  /**
   * Name of the SKU capability.
   */
  name?: string;
  /**
   * Value of the SKU capability.
   */
  value?: string;
  /**
   * Reason of the SKU capability.
   */
  reason?: string;
}

/**
 * Object with a list of the resources that need to be moved and the resource group they should be moved to.
 */
export interface CsmMoveResourceEnvelope {
  targetResourceGroup?: string;
  resources?: string[];
}

/**
 * Resource validation request content.
 */
export interface ValidateRequest {
  /**
   * Resource name to verify.
   */
  name: string;
  /**
   * Resource type used for verification.
   */
  type: ValidateResourceTypes;
  /**
   * Expected location of the resource.
   */
  location: string;
  /**
   * ARM resource ID of an App Service plan that would host the app.
   */
  serverFarmId?: string;
  /**
   * Name of the target SKU for the App Service plan.
   */
  skuName?: string;
  /**
   * <code>true</code> if App Service plan is for Linux workers; otherwise, <code>false</code>.
   */
  needLinuxWorkers?: boolean;
  /**
   * <code>true</code> if App Service plan is for Spot instances; otherwise, <code>false</code>.
   */
  isSpot?: boolean;
  /**
   * Target capacity of the App Service plan (number of VMs).
   */
  capacity?: number;
  /**
   * Name of App Service Environment where app or App Service plan should be created.
   */
  hostingEnvironment?: string;
  /**
   * <code>true</code> if App Service plan is running as a windows container
   */
  isXenon?: boolean;
  /**
   * Base URL of the container registry
   */
  containerRegistryBaseUrl?: string;
  /**
   * Username for to access the container registry
   */
  containerRegistryUsername?: string;
  /**
   * Password for to access the container registry
   */
  containerRegistryPassword?: string;
  /**
   * Repository name (image name)
   */
  containerImageRepository?: string;
  /**
   * Image tag
   */
  containerImageTag?: string;
  /**
   * Platform (windows or linux)
   */
  containerImagePlatform?: string;
}

/**
 * Describes the result of resource validation.
 */
export interface ValidateResponse {
  /**
   * Result of validation.
   */
  status?: string;
  /**
   * Error details for the case when validation fails.
   */
  error?: ValidateResponseError;
}

/**
 * Error details for when validation fails.
 */
export interface ValidateResponseError {
  /**
   * Validation error code.
   */
  code?: string;
  /**
   * Validation error message.
   */
  message?: string;
}

/**
 * Collection of App Service apps.
 */
export interface WebAppCollection {
  /**
   * Collection of resources.
   */
  value: Site[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * SSL-enabled hostname.
 */
export interface HostNameSslState {
  /**
   * Hostname.
   */
  name?: string;
  /**
   * SSL type.
   */
  sslState?: SslState;
  /**
   * Virtual IP address assigned to the hostname if IP based SSL is enabled.
   */
  virtualIP?: string;
  /**
   * SSL certificate thumbprint.
   */
  thumbprint?: string;
  /**
   * Set to <code>true</code> to update existing hostname.
   */
  toUpdate?: boolean;
  /**
   * Indicates whether the hostname is a standard or repository hostname.
   */
  hostType?: HostType;
}

/**
 * Configuration of an App Service app.
 */
export interface SiteConfig {
  /**
   * Number of workers.
   */
  numberOfWorkers?: number;
  /**
   * Default documents.
   */
  defaultDocuments?: string[];
  /**
   * .NET Framework version.
   */
  netFrameworkVersion?: string;
  /**
   * Version of PHP.
   */
  phpVersion?: string;
  /**
   * Version of Python.
   */
  pythonVersion?: string;
  /**
   * Version of Node.js.
   */
  nodeVersion?: string;
  /**
   * Version of PowerShell.
   */
  powerShellVersion?: string;
  /**
   * Linux App Framework and version
   */
  linuxFxVersion?: string;
  /**
   * Xenon App Framework and version
   */
  windowsFxVersion?: string;
  /**
   * <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
   */
  requestTracingEnabled?: boolean;
  /**
   * Request tracing expiration time.
   */
  requestTracingExpirationTime?: Date;
  /**
   * <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
   */
  remoteDebuggingEnabled?: boolean;
  /**
   * Remote debugging version.
   */
  remoteDebuggingVersion?: string;
  /**
   * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
   */
  httpLoggingEnabled?: boolean;
  /**
   * HTTP logs directory size limit.
   */
  logsDirectorySizeLimit?: number;
  /**
   * <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
   */
  detailedErrorLoggingEnabled?: boolean;
  /**
   * Publishing user name.
   */
  publishingUsername?: string;
  /**
   * Application settings.
   */
  appSettings?: NameValuePair[];
  /**
   * Connection strings.
   */
  connectionStrings?: ConnStringInfo[];
  /**
   * Site MachineKey.
   */
  readonly machineKey?: SiteMachineKey;
  /**
   * Handler mappings.
   */
  handlerMappings?: HandlerMapping[];
  /**
   * Document root.
   */
  documentRoot?: string;
  /**
   * SCM type.
   */
  scmType?: ScmType;
  /**
   * <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
   */
  use32BitWorkerProcess?: boolean;
  /**
   * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
   */
  webSocketsEnabled?: boolean;
  /**
   * <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
   */
  alwaysOn?: boolean;
  /**
   * Java version.
   */
  javaVersion?: string;
  /**
   * Java container.
   */
  javaContainer?: string;
  /**
   * Java container version.
   */
  javaContainerVersion?: string;
  /**
   * App command line to launch.
   */
  appCommandLine?: string;
  /**
   * Managed pipeline mode.
   */
  managedPipelineMode?: ManagedPipelineMode;
  /**
   * Virtual applications.
   */
  virtualApplications?: VirtualApplication[];
  /**
   * Site load balancing.
   */
  loadBalancing?: SiteLoadBalancing;
  /**
   * This is work around for polymorphic types.
   */
  experiments?: Experiments;
  /**
   * Site limits.
   */
  limits?: SiteLimits;
  /**
   * <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
   */
  autoHealEnabled?: boolean;
  /**
   * Auto Heal rules.
   */
  autoHealRules?: AutoHealRules;
  /**
   * Tracing options.
   */
  tracingOptions?: string;
  /**
   * Virtual Network name.
   */
  vnetName?: string;
  /**
   * Cross-Origin Resource Sharing (CORS) settings.
   */
  cors?: CorsSettings;
  /**
   * Push endpoint settings.
   */
  push?: PushSettings;
  /**
   * Information about the formal API definition for the app.
   */
  apiDefinition?: ApiDefinitionInfo;
  /**
   * Azure API management settings linked to the app.
   */
  apiManagementConfig?: ApiManagementConfig;
  /**
   * Auto-swap slot name.
   */
  autoSwapSlotName?: string;
  /**
   * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
   */
  localMySqlEnabled?: boolean;
  /**
   * Managed Service Identity Id
   */
  managedServiceIdentityId?: number;
  /**
   * Explicit Managed Service Identity Id
   */
  xManagedServiceIdentityId?: number;
  /**
   * IP security restrictions for main.
   */
  ipSecurityRestrictions?: IpSecurityRestriction[];
  /**
   * IP security restrictions for scm.
   */
  scmIpSecurityRestrictions?: IpSecurityRestriction[];
  /**
   * IP security restrictions for scm to use main.
   */
  scmIpSecurityRestrictionsUseMain?: boolean;
  /**
   * Http20Enabled: configures a web site to allow clients to connect over http2.0
   */
  http20Enabled?: boolean;
  /**
   * MinTlsVersion: configures the minimum version of TLS required for SSL requests
   */
  minTlsVersion?: SupportedTlsVersions;
  /**
   * State of FTP / FTPS service
   */
  ftpsState?: FtpsState;
  /**
   * Number of preWarmed instances.
   * This setting only applies to the Consumption and Elastic Plans
   */
  preWarmedInstanceCount?: number;
  /**
   * Health check path
   */
  healthCheckPath?: string;
}

/**
 * Database connection string information.
 */
export interface ConnStringInfo {
  /**
   * Name of connection string.
   */
  name?: string;
  /**
   * Connection string value.
   */
  connectionString?: string;
  /**
   * Type of database.
   */
  type?: ConnectionStringType;
}

/**
 * MachineKey of an app.
 */
export interface SiteMachineKey {
  /**
   * MachineKey validation.
   */
  validation?: string;
  /**
   * Validation key.
   */
  validationKey?: string;
  /**
   * Algorithm used for decryption.
   */
  decryption?: string;
  /**
   * Decryption key.
   */
  decryptionKey?: string;
}

/**
 * The IIS handler mappings used to define which handler processes HTTP requests with certain extension.
 * For example, it is used to configure php-cgi.exe process to handle all HTTP requests with *.php extension.
 */
export interface HandlerMapping {
  /**
   * Requests with this extension will be handled using the specified FastCGI application.
   */
  extension?: string;
  /**
   * The absolute path to the FastCGI application.
   */
  scriptProcessor?: string;
  /**
   * Command-line arguments to be passed to the script processor.
   */
  arguments?: string;
}

/**
 * Virtual application in an app.
 */
export interface VirtualApplication {
  /**
   * Virtual path.
   */
  virtualPath?: string;
  /**
   * Physical path.
   */
  physicalPath?: string;
  /**
   * <code>true</code> if preloading is enabled; otherwise, <code>false</code>.
   */
  preloadEnabled?: boolean;
  /**
   * Virtual directories for virtual application.
   */
  virtualDirectories?: VirtualDirectory[];
}

/**
 * Directory for virtual application.
 */
export interface VirtualDirectory {
  /**
   * Path to virtual application.
   */
  virtualPath?: string;
  /**
   * Physical path.
   */
  physicalPath?: string;
}

/**
 * Routing rules in production experiments.
 */
export interface Experiments {
  /**
   * List of ramp-up rules.
   */
  rampUpRules?: RampUpRule[];
}

/**
 * Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.
 */
export interface RampUpRule {
  /**
   * Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.
   */
  actionHostName?: string;
  /**
   * Percentage of the traffic which will be redirected to <code>ActionHostName</code>.
   */
  reroutePercentage?: number;
  /**
   * In auto ramp up scenario this is the step to add/remove from <code>ReroutePercentage</code> until it reaches \n<code>MinReroutePercentage</code> or
   * <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specified in <code>ChangeIntervalInMinutes</code>.\nCustom decision algorithm
   * can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.
   */
  changeStep?: number;
  /**
   * Specifies interval in minutes to reevaluate ReroutePercentage.
   */
  changeIntervalInMinutes?: number;
  /**
   * Specifies lower boundary above which ReroutePercentage will stay.
   */
  minReroutePercentage?: number;
  /**
   * Specifies upper boundary below which ReroutePercentage will stay.
   */
  maxReroutePercentage?: number;
  /**
   * Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.
   * https://www.siteextensions.net/packages/TiPCallback/
   */
  changeDecisionCallbackUrl?: string;
  /**
   * Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.
   */
  name?: string;
}

/**
 * Metric limits set on an app.
 */
export interface SiteLimits {
  /**
   * Maximum allowed CPU usage percentage.
   */
  maxPercentageCpu?: number;
  /**
   * Maximum allowed memory usage in MB.
   */
  maxMemoryInMb?: number;
  /**
   * Maximum allowed disk size usage in MB.
   */
  maxDiskSizeInMb?: number;
}

/**
 * Rules that can be defined for auto-heal.
 */
export interface AutoHealRules {
  /**
   * Conditions that describe when to execute the auto-heal actions.
   */
  triggers?: AutoHealTriggers;
  /**
   * Actions to be executed when a rule is triggered.
   */
  actions?: AutoHealActions;
}

/**
 * Triggers for auto-heal.
 */
export interface AutoHealTriggers {
  /**
   * A rule based on total requests.
   */
  requests?: RequestsBasedTrigger;
  /**
   * A rule based on private bytes.
   */
  privateBytesInKB?: number;
  /**
   * A rule based on status codes.
   */
  statusCodes?: StatusCodesBasedTrigger[];
  /**
   * A rule based on request execution time.
   */
  slowRequests?: SlowRequestsBasedTrigger;
}

/**
 * Trigger based on total requests.
 */
export interface RequestsBasedTrigger {
  /**
   * Request Count.
   */
  count?: number;
  /**
   * Time interval.
   */
  timeInterval?: string;
}

/**
 * Trigger based on status code.
 */
export interface StatusCodesBasedTrigger {
  /**
   * HTTP status code.
   */
  status?: number;
  /**
   * Request Sub Status.
   */
  subStatus?: number;
  /**
   * Win32 error code.
   */
  win32Status?: number;
  /**
   * Request Count.
   */
  count?: number;
  /**
   * Time interval.
   */
  timeInterval?: string;
}

/**
 * Trigger based on request execution time.
 */
export interface SlowRequestsBasedTrigger {
  /**
   * Time taken.
   */
  timeTaken?: string;
  /**
   * Request Count.
   */
  count?: number;
  /**
   * Time interval.
   */
  timeInterval?: string;
}

/**
 * Actions which to take by the auto-heal module when a rule is triggered.
 */
export interface AutoHealActions {
  /**
   * Predefined action to be taken.
   */
  actionType?: AutoHealActionType;
  /**
   * Custom action to be taken.
   */
  customAction?: AutoHealCustomAction;
  /**
   * Minimum time the process must execute
   * before taking the action
   */
  minProcessExecutionTime?: string;
}

/**
 * Custom action to be executed
 * when an auto heal rule is triggered.
 */
export interface AutoHealCustomAction {
  /**
   * Executable to be run.
   */
  exe?: string;
  /**
   * Parameters for the executable.
   */
  parameters?: string;
}

/**
 * Cross-Origin Resource Sharing (CORS) settings for the app.
 */
export interface CorsSettings {
  /**
   * Gets or sets the list of origins that should be allowed to make cross-origin
   * calls (for example: http://example.com:12345). Use "*" to allow all.
   */
  allowedOrigins?: string[];
  /**
   * Gets or sets whether CORS requests with credentials are allowed. See
   * https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials
   * for more details.
   */
  supportCredentials?: boolean;
}

/**
 * Information about the formal API definition for the app.
 */
export interface ApiDefinitionInfo {
  /**
   * The URL of the API definition.
   */
  url?: string;
}

/**
 * Azure API management (APIM) configuration linked to the app.
 */
export interface ApiManagementConfig {
  /**
   * APIM-Api Identifier.
   */
  id?: string;
}

/**
 * IP security restriction on an app.
 */
export interface IpSecurityRestriction {
  /**
   * IP address the security restriction is valid for.
   * It can be in form of pure ipv4 address (required SubnetMask property) or
   * CIDR notation such as ipv4/mask (leading bit match). For CIDR,
   * SubnetMask property must not be specified.
   */
  ipAddress?: string;
  /**
   * Subnet mask for the range of IP addresses the restriction is valid for.
   */
  subnetMask?: string;
  /**
   * Virtual network resource id
   */
  vnetSubnetResourceId?: string;
  /**
   * (internal) Vnet traffic tag
   */
  vnetTrafficTag?: number;
  /**
   * (internal) Subnet traffic tag
   */
  subnetTrafficTag?: number;
  /**
   * Allow or Deny access for this IP range.
   */
  action?: string;
  /**
   * Defines what this IP filter will be used for. This is to support IP filtering on proxies.
   */
  tag?: IpFilterTag;
  /**
   * Priority of IP restriction rule.
   */
  priority?: number;
  /**
   * IP restriction rule name.
   */
  name?: string;
  /**
   * IP restriction rule description.
   */
  description?: string;
}

/**
 * Information needed for cloning operation.
 */
export interface CloningInfo {
  /**
   * Correlation ID of cloning operation. This ID ties multiple cloning operations
   * together to use the same snapshot.
   */
  correlationId?: string;
  /**
   * <code>true</code> to overwrite destination app; otherwise, <code>false</code>.
   */
  overwrite?: boolean;
  /**
   * <code>true</code> to clone custom hostnames from source app; otherwise, <code>false</code>.
   */
  cloneCustomHostNames?: boolean;
  /**
   * <code>true</code> to clone source control from source app; otherwise, <code>false</code>.
   */
  cloneSourceControl?: boolean;
  /**
   * ARM resource ID of the source app. App resource ID is of the form
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.
   */
  sourceWebAppId: string;
  /**
   * Location of source app ex: West US or North Europe
   */
  sourceWebAppLocation?: string;
  /**
   * App Service Environment.
   */
  hostingEnvironment?: string;
  /**
   * Application setting overrides for cloned app. If specified, these settings override the settings cloned
   * from source app. Otherwise, application settings from source app are retained.
   */
  appSettingsOverrides?: { [propertyName: string]: string };
  /**
   * <code>true</code> to configure load balancing for source and destination app.
   */
  configureLoadBalancing?: boolean;
  /**
   * ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
   */
  trafficManagerProfileId?: string;
  /**
   * Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.
   */
  trafficManagerProfileName?: string;
}

/**
 * The status of the last successful slot swap operation.
 */
export interface SlotSwapStatus {
  /**
   * The time the last successful slot swap completed.
   */
  readonly timestampUtc?: Date;
  /**
   * The source slot of the last swap operation.
   */
  readonly sourceSlotName?: string;
  /**
   * The destination slot of the last swap operation.
   */
  readonly destinationSlotName?: string;
}

/**
 * Managed service identity.
 */
export interface ManagedServiceIdentity {
  /**
   * Type of managed service identity.
   */
  type?: ManagedServiceIdentityType;
  /**
   * Tenant of managed service identity.
   */
  readonly tenantId?: string;
  /**
   * Principal Id of managed service identity.
   */
  readonly principalId?: string;
  /**
   * The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
   */
  userAssignedIdentities?: {
    [propertyName: string]: Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties;
  };
}

export interface Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties {
  /**
   * Principal Id of user assigned identity
   */
  readonly principalId?: string;
  /**
   * Client Id of user assigned identity
   */
  readonly clientId?: string;
}

/**
 * Body of the error response returned from the API.
 */
export interface ErrorEntity {
  /**
   * Type of error.
   */
  extendedCode?: string;
  /**
   * Message template.
   */
  messageTemplate?: string;
  /**
   * Parameters for the template.
   */
  parameters?: string[];
  /**
   * Inner errors.
   */
  innerErrors?: ErrorEntity[];
  /**
   * Basic error code.
   */
  code?: string;
  /**
   * Any details of the error.
   */
  message?: string;
}

/**
 * Deployment slot parameters.
 */
export interface CsmSlotEntity {
  /**
   * Destination deployment slot during swap operation.
   */
  targetSlot: string;
  /**
   * <code>true</code> to preserve Virtual Network to the slot during swap; otherwise, <code>false</code>.
   */
  preserveVnet: boolean;
}

/**
 * Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
 */
export interface BackupSchedule {
  /**
   * How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
   */
  frequencyInterval: number;
  /**
   * The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
   */
  frequencyUnit: FrequencyUnit;
  /**
   * True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
   */
  keepAtLeastOneBackup: boolean;
  /**
   * After how many days backups should be deleted.
   */
  retentionPeriodInDays: number;
  /**
   * When the schedule should start working.
   */
  startTime?: Date;
  /**
   * Last time when this schedule was triggered.
   */
  readonly lastExecutionTime?: Date;
}

/**
 * Database backup settings.
 */
export interface DatabaseBackupSetting {
  /**
   * Database type (e.g. SqlAzure / MySql).
   */
  databaseType: DatabaseType;
  name?: string;
  /**
   * Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
   * This is used during restore with overwrite connection strings options.
   */
  connectionStringName?: string;
  /**
   * Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
   */
  connectionString?: string;
}

/**
 * Collection of backup items.
 */
export interface BackupItemCollection {
  /**
   * Collection of resources.
   */
  value: BackupItem[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of site configurations.
 */
export interface SiteConfigResourceCollection {
  /**
   * Collection of resources.
   */
  value: SiteConfigResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Azure Files or Blob Storage access information value for dictionary storage.
 */
export interface AzureStorageInfoValue {
  /**
   * Type of storage.
   */
  type?: AzureStorageType;
  /**
   * Name of the storage account.
   */
  accountName?: string;
  /**
   * Name of the file share (container name, for Blob storage).
   */
  shareName?: string;
  /**
   * Access key for the storage account.
   */
  accessKey?: string;
  /**
   * Path to mount the storage within the site's runtime environment.
   */
  mountPath?: string;
  /**
   * State of the storage account.
   */
  readonly state?: AzureStorageState;
}

/**
 * Description of site key vault references.
 */
export interface ApiKVReference {
  reference?: string;
  status?: ResolveStatus;
  vaultName?: string;
  secretName?: string;
  secretVersion?: string;
  /**
   * Type of managed service identity.
   */
  identityType?: ManagedServiceIdentityType;
  details?: string;
  source?: "KeyVault";
  location?: "ApplicationSetting";
}

/**
 * Database connection string value to type pair.
 */
export interface ConnStringValueTypePair {
  /**
   * Value of pair.
   */
  value: string;
  /**
   * Type of database.
   */
  type: ConnectionStringType;
}

/**
 * Application logs configuration.
 */
export interface ApplicationLogsConfig {
  /**
   * Application logs to file system configuration.
   */
  fileSystem?: FileSystemApplicationLogsConfig;
  /**
   * Application logs to azure table storage configuration.
   */
  azureTableStorage?: AzureTableStorageApplicationLogsConfig;
  /**
   * Application logs to blob storage configuration.
   */
  azureBlobStorage?: AzureBlobStorageApplicationLogsConfig;
}

/**
 * Application logs to file system configuration.
 */
export interface FileSystemApplicationLogsConfig {
  /**
   * Log level.
   */
  level?: LogLevel;
}

/**
 * Application logs to Azure table storage configuration.
 */
export interface AzureTableStorageApplicationLogsConfig {
  /**
   * Log level.
   */
  level?: LogLevel;
  /**
   * SAS URL to an Azure table with add/query/delete permissions.
   */
  sasUrl: string;
}

/**
 * Application logs azure blob storage configuration.
 */
export interface AzureBlobStorageApplicationLogsConfig {
  /**
   * Log level.
   */
  level?: LogLevel;
  /**
   * SAS url to a azure blob container with read/write/list/delete permissions.
   */
  sasUrl?: string;
  /**
   * Retention in days.
   * Remove blobs older than X days.
   * 0 or lower means no retention.
   */
  retentionInDays?: number;
}

/**
 * Http logs configuration.
 */
export interface HttpLogsConfig {
  /**
   * Http logs to file system configuration.
   */
  fileSystem?: FileSystemHttpLogsConfig;
  /**
   * Http logs to azure blob storage configuration.
   */
  azureBlobStorage?: AzureBlobStorageHttpLogsConfig;
}

/**
 * Http logs to file system configuration.
 */
export interface FileSystemHttpLogsConfig {
  /**
   * Maximum size in megabytes that http log files can use.
   * When reached old log files will be removed to make space for new ones.
   * Value can range between 25 and 100.
   */
  retentionInMb?: number;
  /**
   * Retention in days.
   * Remove files older than X days.
   * 0 or lower means no retention.
   */
  retentionInDays?: number;
  /**
   * True if configuration is enabled, false if it is disabled and null if configuration is not set.
   */
  enabled?: boolean;
}

/**
 * Http logs to azure blob storage configuration.
 */
export interface AzureBlobStorageHttpLogsConfig {
  /**
   * SAS url to a azure blob container with read/write/list/delete permissions.
   */
  sasUrl?: string;
  /**
   * Retention in days.
   * Remove blobs older than X days.
   * 0 or lower means no retention.
   */
  retentionInDays?: number;
  /**
   * True if configuration is enabled, false if it is disabled and null if configuration is not set.
   */
  enabled?: boolean;
}

/**
 * Enabled configuration.
 */
export interface EnabledConfig {
  /**
   * True if configuration is enabled, false if it is disabled and null if configuration is not set.
   */
  enabled?: boolean;
}

/**
 * Collection of metadata for the app configuration snapshots that can be restored.
 */
export interface SiteConfigurationSnapshotInfoCollection {
  /**
   * Collection of resources.
   */
  value: SiteConfigurationSnapshotInfo[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Kudu continuous web job information elements.
 */
export interface ContinuousWebJobCollection {
  /**
   * Collection of resources.
   */
  value: ContinuousWebJob[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of app deployments.
 */
export interface DeploymentCollection {
  /**
   * Collection of resources.
   */
  value: Deployment[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * MSDeploy log entry
 */
export interface MSDeployLogEntry {
  /**
   * Timestamp of log entry
   */
  readonly time?: Date;
  /**
   * Log entry type
   */
  readonly type?: MSDeployLogEntryType;
  /**
   * Log entry message
   */
  readonly message?: string;
}

/**
 * Collection of Kudu function information elements.
 */
export interface FunctionEnvelopeCollection {
  /**
   * Collection of resources.
   */
  value: FunctionEnvelope[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Function key info.
 */
export interface KeyInfo {
  /**
   * Key name
   */
  name?: string;
  /**
   * Key value
   */
  value?: string;
}

/**
 * Functions host level keys.
 */
export interface HostKeys {
  /**
   * Secret key.
   */
  masterKey?: string;
  /**
   * Host level function keys.
   */
  functionKeys?: { [propertyName: string]: string };
  /**
   * System keys.
   */
  systemKeys?: { [propertyName: string]: string };
}

/**
 * Collection of hostname bindings.
 */
export interface HostNameBindingCollection {
  /**
   * Collection of resources.
   */
  value: HostNameBinding[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of app instances.
 */
export interface WebAppInstanceCollection {
  /**
   * Collection of resources.
   */
  value: SiteInstance[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

export interface ContainerInfo {
  currentTimeStamp?: Date;
  previousTimeStamp?: Date;
  currentCpuStats?: ContainerCpuStatistics;
  previousCpuStats?: ContainerCpuStatistics;
  memoryStats?: ContainerMemoryStatistics;
  name?: string;
  id?: string;
  eth0?: ContainerNetworkInterfaceStatistics;
}

export interface ContainerCpuStatistics {
  cpuUsage?: ContainerCpuUsage;
  systemCpuUsage?: number;
  onlineCpuCount?: number;
  throttlingData?: ContainerThrottlingData;
}

export interface ContainerCpuUsage {
  totalUsage?: number;
  perCpuUsage?: number[];
  kernelModeUsage?: number;
  userModeUsage?: number;
}

export interface ContainerThrottlingData {
  periods?: number;
  throttledPeriods?: number;
  throttledTime?: number;
}

export interface ContainerMemoryStatistics {
  usage?: number;
  maxUsage?: number;
  limit?: number;
}

export interface ContainerNetworkInterfaceStatistics {
  rxBytes?: number;
  rxPackets?: number;
  rxErrors?: number;
  rxDropped?: number;
  txBytes?: number;
  txPackets?: number;
  txErrors?: number;
  txDropped?: number;
}

/**
 * Collection of Kudu process information elements.
 */
export interface ProcessInfoCollection {
  /**
   * Collection of resources.
   */
  value: ProcessInfo[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Kudu thread information elements.
 */
export interface ProcessModuleInfoCollection {
  /**
   * Collection of resources.
   */
  value: ProcessModuleInfo[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Kudu thread information elements.
 */
export interface ProcessThreadInfoCollection {
  /**
   * Collection of resources.
   */
  value: ProcessThreadInfo[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Represents whether or not an app is cloneable.
 */
export interface SiteCloneability {
  /**
   * Name of app.
   */
  result?: CloneAbilityResult;
  /**
   * List of features enabled on app that prevent cloning.
   */
  blockingFeatures?: SiteCloneabilityCriterion[];
  /**
   * List of features enabled on app that are non-blocking but cannot be cloned. The app can still be cloned
   * but the features in this list will not be set up on cloned app.
   */
  unsupportedFeatures?: SiteCloneabilityCriterion[];
  /**
   * List of blocking application characteristics.
   */
  blockingCharacteristics?: SiteCloneabilityCriterion[];
}

/**
 * An app cloneability criterion.
 */
export interface SiteCloneabilityCriterion {
  /**
   * Name of criterion.
   */
  name?: string;
  /**
   * Description of criterion.
   */
  description?: string;
}

/**
 * An operation on a resource.
 */
export interface Operation {
  /**
   * Operation ID.
   */
  id?: string;
  /**
   * Operation name.
   */
  name?: string;
  /**
   * The current status of the operation.
   */
  status?: OperationStatus;
  /**
   * Any errors associate with the operation.
   */
  errors?: ErrorEntity[];
  /**
   * Time when operation has started.
   */
  createdTime?: Date;
  /**
   * Time when operation has been updated.
   */
  modifiedTime?: Date;
  /**
   * Time when operation will expire.
   */
  expirationTime?: Date;
  /**
   * Applicable only for stamp operation ids.
   */
  geoMasterOperationId?: string;
}

/**
 * Network trace
 */
export interface NetworkTrace {
  /**
   * Local file path for the captured network trace file.
   */
  path?: string;
  /**
   * Current status of the network trace operation, same as Operation.Status (InProgress/Succeeded/Failed).
   */
  status?: string;
  /**
   * Detailed message of a network trace operation, e.g. error message in case of failure.
   */
  message?: string;
}

/**
 * Collection of performance monitor counters.
 */
export interface PerfMonCounterCollection {
  /**
   * Collection of resources.
   */
  value: PerfMonResponse[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Performance monitor API response.
 */
export interface PerfMonResponse {
  /**
   * The response code.
   */
  code?: string;
  /**
   * The message.
   */
  message?: string;
  /**
   * The performance monitor counters.
   */
  data?: PerfMonSet;
}

/**
 * Metric information.
 */
export interface PerfMonSet {
  /**
   * Unique key name of the counter.
   */
  name?: string;
  /**
   * Start time of the period.
   */
  startTime?: Date;
  /**
   * End time of the period.
   */
  endTime?: Date;
  /**
   * Presented time grain.
   */
  timeGrain?: string;
  /**
   * Collection of workers that are active during this time.
   */
  values?: PerfMonSample[];
}

/**
 * Performance monitor sample in a set.
 */
export interface PerfMonSample {
  /**
   * Point in time for which counter was measured.
   */
  time?: Date;
  /**
   * Name of the server on which the measurement is made.
   */
  instanceName?: string;
  /**
   * Value of counter at a certain time.
   */
  value?: number;
}

/**
 * Description of a Virtual Network that is useable for private site access.
 */
export interface PrivateAccessVirtualNetwork {
  /**
   * The name of the Virtual Network.
   */
  name?: string;
  /**
   * The key (ID) of the Virtual Network.
   */
  key?: number;
  /**
   * The ARM uri of the Virtual Network
   */
  resourceId?: string;
  /**
   * A List of subnets that access is allowed to on this Virtual Network. An empty array (but not null) is interpreted to mean that all subnets are allowed within this Virtual Network.
   */
  subnets?: PrivateAccessSubnet[];
}

/**
 * Description of a Virtual Network subnet that is useable for private site access.
 */
export interface PrivateAccessSubnet {
  /**
   * The name of the subnet.
   */
  name?: string;
  /**
   * The key (ID) of the subnet.
   */
  key?: number;
}

/**
 * Collection of public certificates
 */
export interface PublicCertificateCollection {
  /**
   * Collection of resources.
   */
  value: PublicCertificate[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Publishing options for requested profile.
 */
export interface CsmPublishingProfileOptions {
  /**
   * Name of the format. Valid values are:
   * FileZilla3
   * WebDeploy -- default
   * Ftp
   */
  format?: PublishingProfileFormat;
  /**
   * Include the DisasterRecover endpoint if true
   */
  includeDisasterRecoveryEndpoints?: boolean;
}

/**
 * Specifies the web app that snapshot contents will be retrieved from.
 */
export interface SnapshotRecoverySource {
  /**
   * Geographical location of the source web app, e.g. SouthEastAsia, SouthCentralUS
   */
  location?: string;
  /**
   * ARM resource ID of the source app.
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.
   */
  id?: string;
}

/**
 * Collection of Kudu site extension information elements.
 */
export interface SiteExtensionInfoCollection {
  /**
   * Collection of resources.
   */
  value: SiteExtensionInfo[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Copy deployment slot parameters.
 */
export interface CsmCopySlotEntity {
  /**
   * Destination deployment slot during copy operation.
   */
  targetSlot: string;
  /**
   * The site object which will be merged with the source slot site
   * to produce new destination slot site object.
   * <code>null</code> to just copy source slot content. Otherwise a <code>Site</code>
   * object with properties to override source slot site.
   */
  siteConfig: SiteConfig;
}

/**
 * A wrapper for an ARM resource id
 */
export interface ArmIdWrapper {
  readonly id?: string;
}

/**
 * The state of a private link connection
 */
export interface PrivateLinkConnectionState {
  /**
   * Status of a private link connection
   */
  status?: string;
  /**
   * Description of a private link connection
   */
  description?: string;
  /**
   * ActionsRequired for a private link connection
   */
  actionsRequired?: string;
}

/**
 * Wrapper for a collection of private link resources
 */
export interface PrivateLinkResourcesWrapper {
  value: PrivateLinkResource[];
}

/**
 * A private link resource
 */
export interface PrivateLinkResource {
  id: string;
  /**
   * Name of a private link resource
   */
  name: string;
  type: string;
  /**
   * Properties of a private link resource
   */
  properties: PrivateLinkResourceProperties;
}

/**
 * Properties of a private link resource
 */
export interface PrivateLinkResourceProperties {
  /**
   * GroupId of a private link resource
   */
  readonly groupId?: string;
  /**
   * RequiredMembers of a private link resource
   */
  readonly requiredMembers?: string[];
  /**
   * RequiredZoneNames of a private link resource
   */
  readonly requiredZoneNames?: string[];
}

/**
 * Collection of slot differences.
 */
export interface SlotDifferenceCollection {
  /**
   * Collection of resources.
   */
  value: SlotDifference[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of snapshots which can be used to revert an app to a previous time.
 */
export interface SnapshotCollection {
  /**
   * Collection of resources.
   */
  value: Snapshot[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Kudu continuous web job information elements.
 */
export interface TriggeredWebJobCollection {
  /**
   * Collection of resources.
   */
  value: TriggeredWebJob[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Kudu continuous web job information elements.
 */
export interface TriggeredJobHistoryCollection {
  /**
   * Collection of resources.
   */
  value: TriggeredJobHistory[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of CSM usage quotas.
 */
export interface CsmUsageQuotaCollection {
  /**
   * Collection of resources.
   */
  value: CsmUsageQuota[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Usage of the quota resource.
 */
export interface CsmUsageQuota {
  /**
   * Units of measurement for the quota resource.
   */
  unit?: string;
  /**
   * Next reset time for the resource counter.
   */
  nextResetTime?: Date;
  /**
   * The current value of the resource counter.
   */
  currentValue?: number;
  /**
   * The resource limit.
   */
  limit?: number;
  /**
   * Quota name.
   */
  name?: LocalizableString;
}

/**
 * Localizable string object containing the name and a localized value.
 */
export interface LocalizableString {
  /**
   * Non-localized name.
   */
  value?: string;
  /**
   * Localized name.
   */
  localizedValue?: string;
}

/**
 * Collection of Kudu web job information elements.
 */
export interface WebJobCollection {
  /**
   * Collection of resources.
   */
  value: WebJob[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of static sites.
 */
export interface StaticSiteCollection {
  /**
   * Collection of resources.
   */
  value: StaticSiteARMResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Build properties for the static site.
 */
export interface StaticSiteBuildProperties {
  /**
   * The path to the app code within the repository.
   */
  appLocation?: string;
  /**
   * The path to the api code within the repository.
   */
  apiLocation?: string;
  /**
   * The path of the app artifacts after building.
   */
  appArtifactLocation?: string;
}

/**
 * Description of a SKU for a scalable resource.
 */
export interface SkuDescription {
  /**
   * Name of the resource SKU.
   */
  name?: string;
  /**
   * Service tier of the resource SKU.
   */
  tier?: string;
  /**
   * Size specifier of the resource SKU.
   */
  size?: string;
  /**
   * Family code of the resource SKU.
   */
  family?: string;
  /**
   * Current number of instances assigned to the resource.
   */
  capacity?: number;
  /**
   * Min, max, and default scale values of the SKU.
   */
  skuCapacity?: SkuCapacity;
  /**
   * Locations of the SKU.
   */
  locations?: string[];
  /**
   * Capabilities of the SKU, e.g., is traffic manager enabled?
   */
  capabilities?: Capability[];
}

/**
 * Collection of static site custom users.
 */
export interface StaticSiteUserCollection {
  /**
   * Collection of resources.
   */
  value: StaticSiteUserARMResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of static site builds.
 */
export interface StaticSiteBuildCollection {
  /**
   * Collection of resources.
   */
  value: StaticSiteBuildARMResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of static site functions.
 */
export interface StaticSiteFunctionOverviewCollection {
  /**
   * Collection of resources.
   */
  value: StaticSiteFunctionOverviewARMResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of static site custom domains.
 */
export interface StaticSiteCustomDomainOverviewCollection {
  /**
   * Collection of resources.
   */
  value: StaticSiteCustomDomainOverviewARMResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of App Service Environments.
 */
export interface AppServiceEnvironmentCollection {
  /**
   * Collection of resources.
   */
  value: AppServiceEnvironmentResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of stamp capacities.
 */
export interface StampCapacityCollection {
  /**
   * Collection of resources.
   */
  value: StampCapacity[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Diagnostics for an App Service Environment.
 */
export interface HostingEnvironmentDiagnostics {
  /**
   * Name/identifier of the diagnostics.
   */
  name?: string;
  /**
   * Diagnostics output.
   */
  diagnosticsOutput?: string;
}

/**
 * Collection of Inbound Environment Endpoints
 */
export interface InboundEnvironmentEndpointCollection {
  /**
   * Collection of resources.
   */
  value: InboundEnvironmentEndpoint[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * The IP Addresses and Ports that require inbound network access to and within the subnet of the App Service Environment.
 */
export interface InboundEnvironmentEndpoint {
  /**
   * Short text describing the purpose of the network traffic.
   */
  description?: string;
  /**
   * The IP addresses that network traffic will originate from in cidr notation.
   */
  endpoints?: string[];
  /**
   * The ports that network traffic will arrive to the App Service Environment at.
   */
  ports?: string[];
}

/**
 * Collection of worker pools.
 */
export interface WorkerPoolCollection {
  /**
   * Collection of resources.
   */
  value: WorkerPoolResource[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of metric definitions.
 */
export interface ResourceMetricDefinitionCollection {
  /**
   * Collection of resources.
   */
  value: ResourceMetricDefinition[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Metrics availability and retention.
 */
export interface ResourceMetricAvailability {
  /**
   * Time grain .
   */
  readonly timeGrain?: string;
  /**
   * Retention period for the current time grain.
   */
  readonly retention?: string;
}

/**
 * Collection of SKU information.
 */
export interface SkuInfoCollection {
  /**
   * Collection of resources.
   */
  value: SkuInfo[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * SKU discovery information.
 */
export interface SkuInfo {
  /**
   * Resource type that this SKU applies to.
   */
  resourceType?: string;
  /**
   * Name and tier of the SKU.
   */
  sku?: SkuDescription;
  /**
   * Min, max, and default scale values of the SKU.
   */
  capacity?: SkuCapacity;
}

/**
 * Collection of usages.
 */
export interface UsageCollection {
  /**
   * Collection of resources.
   */
  value: Usage[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Outbound Environment Endpoints
 */
export interface OutboundEnvironmentEndpointCollection {
  /**
   * Collection of resources.
   */
  value: OutboundEnvironmentEndpoint[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Endpoints accessed for a common purpose that the App Service Environment requires outbound network access to.
 */
export interface OutboundEnvironmentEndpoint {
  /**
   * The type of service accessed by the App Service Environment, e.g., Azure Storage, Azure SQL Database, and Azure Active Directory.
   */
  category?: string;
  /**
   * The endpoints that the App Service Environment reaches the service at.
   */
  endpoints?: EndpointDependency[];
}

/**
 * A domain name that a service is reached at, including details of the current connection status.
 */
export interface EndpointDependency {
  /**
   * The domain name of the dependency.
   */
  domainName?: string;
  /**
   * The IP Addresses and Ports used when connecting to DomainName.
   */
  endpointDetails?: EndpointDetail[];
}

/**
 * Current TCP connectivity information from the App Service Environment to a single endpoint.
 */
export interface EndpointDetail {
  /**
   * An IP Address that Domain Name currently resolves to.
   */
  ipAddress?: string;
  /**
   * The port an endpoint is connected to.
   */
  port?: number;
  /**
   * The time in milliseconds it takes for a TCP connection to be created from the App Service Environment to this IpAddress at this Port.
   */
  latency?: number;
  /**
   * Whether it is possible to create a TCP connection from the App Service Environment to this IpAddress at this Port.
   */
  isAccessible?: boolean;
}

/**
 * Collection of App Service plans.
 */
export interface AppServicePlanCollection {
  /**
   * Collection of resources.
   */
  value: AppServicePlan[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of resources.
 */
export interface ResourceCollection {
  /**
   * Collection of resources.
   */
  value: string[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of hostname bindings.
 */
export interface HybridConnectionCollection {
  /**
   * Collection of resources.
   */
  value: HybridConnection[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * Collection of resource health metadata.
 */
export interface ResourceHealthMetadataCollection {
  /**
   * Collection of resources.
   */
  value: ResourceHealthMetadata[];
  /**
   * Link to next page of resources.
   */
  readonly nextLink?: string;
}

/**
 * SSL certificate purchase order.
 */
export type AppServiceCertificateOrder = Resource & {
  /**
   * State of the Key Vault secret.
   */
  certificates?: { [propertyName: string]: AppServiceCertificate };
  /**
   * Certificate distinguished name.
   */
  distinguishedName?: string;
  /**
   * Domain verification token.
   */
  readonly domainVerificationToken?: string;
  /**
   * Duration in years (must be between 1 and 3).
   */
  validityInYears?: number;
  /**
   * Certificate key size.
   */
  keySize?: number;
  /**
   * Certificate product type.
   */
  productType?: CertificateProductType;
  /**
   * <code>true</code> if the certificate should be automatically renewed when it expires; otherwise, <code>false</code>.
   */
  autoRenew?: boolean;
  /**
   * Status of certificate order.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Current order status.
   */
  readonly status?: CertificateOrderStatus;
  /**
   * Signed certificate.
   */
  readonly signedCertificate?: CertificateDetails;
  /**
   * Last CSR that was created for this order.
   */
  csr?: string;
  /**
   * Intermediate certificate.
   */
  readonly intermediate?: CertificateDetails;
  /**
   * Root certificate.
   */
  readonly root?: CertificateDetails;
  /**
   * Current serial number of the certificate.
   */
  readonly serialNumber?: string;
  /**
   * Certificate last issuance time.
   */
  readonly lastCertificateIssuanceTime?: Date;
  /**
   * Certificate expiration time.
   */
  readonly expirationTime?: Date;
  /**
   * <code>true</code> if private key is external; otherwise, <code>false</code>.
   */
  readonly isPrivateKeyExternal?: boolean;
  /**
   * Reasons why App Service Certificate is not renewable at the current moment.
   */
  readonly appServiceCertificateNotRenewableReasons?: AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem[];
  /**
   * Time stamp when the certificate would be auto renewed next
   */
  readonly nextAutoRenewalTimeStamp?: Date;
};

/**
 * Key Vault container ARM resource for a certificate that is purchased through Azure.
 */
export type AppServiceCertificateResource = Resource & {
  /**
   * Key Vault resource Id.
   */
  keyVaultId?: string;
  /**
   * Key Vault secret name.
   */
  keyVaultSecretName?: string;
  /**
   * Status of the Key Vault secret.
   */
  readonly provisioningState?: KeyVaultSecretStatus;
};

/**
 * Information about a domain.
 */
export type Domain = Resource & {
  /**
   * Administrative contact.
   */
  contactAdmin?: Contact;
  /**
   * Billing contact.
   */
  contactBilling?: Contact;
  /**
   * Registrant contact.
   */
  contactRegistrant?: Contact;
  /**
   * Technical contact.
   */
  contactTech?: Contact;
  /**
   * Domain registration status.
   */
  readonly registrationStatus?: DomainStatus;
  /**
   * Domain provisioning state.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Name servers.
   */
  readonly nameServers?: string[];
  /**
   * <code>true</code> if domain privacy is enabled for this domain; otherwise, <code>false</code>.
   */
  privacy?: boolean;
  /**
   * Domain creation timestamp.
   */
  readonly createdTime?: Date;
  /**
   * Domain expiration timestamp.
   */
  readonly expirationTime?: Date;
  /**
   * Timestamp when the domain was renewed last time.
   */
  readonly lastRenewedTime?: Date;
  /**
   * <code>true</code> if the domain should be automatically renewed; otherwise, <code>false</code>.
   */
  autoRenew?: boolean;
  /**
   * <code>true</code> if Azure can assign this domain to App Service apps; otherwise, <code>false</code>. This value will be <code>true</code> if domain registration status is active and
   *  it is hosted on name servers Azure has programmatic access to.
   */
  readonly readyForDnsRecordManagement?: boolean;
  /**
   * All hostnames derived from the domain and assigned to Azure resources.
   */
  readonly managedHostNames?: HostName[];
  /**
   * Legal agreement consent.
   */
  consent?: DomainPurchaseConsent;
  /**
   * Reasons why domain is not renewable.
   */
  readonly domainNotRenewableReasons?: DomainPropertiesDomainNotRenewableReasonsItem[];
  /**
   * Current DNS type
   */
  dnsType?: DnsType;
  /**
   * Azure DNS Zone to use
   */
  dnsZoneId?: string;
  /**
   * Target DNS type (would be used for migration)
   */
  targetDnsType?: DnsType;
  authCode?: string;
};

/**
 * SSL certificate for an app.
 */
export type Certificate = Resource & {
  /**
   * Friendly name of the certificate.
   */
  readonly friendlyName?: string;
  /**
   * Subject name of the certificate.
   */
  readonly subjectName?: string;
  /**
   * Host names the certificate applies to.
   */
  hostNames?: string[];
  /**
   * Pfx blob.
   */
  pfxBlob?: Uint8Array;
  /**
   * App name.
   */
  readonly siteName?: string;
  /**
   * Self link.
   */
  readonly selfLink?: string;
  /**
   * Certificate issuer.
   */
  readonly issuer?: string;
  /**
   * Certificate issue Date.
   */
  readonly issueDate?: Date;
  /**
   * Certificate expiration date.
   */
  readonly expirationDate?: Date;
  /**
   * Certificate password.
   */
  password?: string;
  /**
   * Certificate thumbprint.
   */
  readonly thumbprint?: string;
  /**
   * Is the certificate valid?.
   */
  readonly valid?: boolean;
  /**
   * Raw bytes of .cer file
   */
  readonly cerBlob?: Uint8Array;
  /**
   * Public key hash.
   */
  readonly publicKeyHash?: string;
  /**
   * Specification for the App Service Environment to use for the certificate.
   */
  readonly hostingEnvironmentProfile?: HostingEnvironmentProfile;
  /**
   * Key Vault Csm resource Id.
   */
  keyVaultId?: string;
  /**
   * Key Vault secret name.
   */
  keyVaultSecretName?: string;
  /**
   * Status of the Key Vault secret.
   */
  readonly keyVaultSecretStatus?: KeyVaultSecretStatus;
  /**
   * Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
   */
  serverFarmId?: string;
  /**
   * CNAME of the certificate to be issued via free certificate
   */
  canonicalName?: string;
};

/**
 * A web app, a mobile app backend, or an API app.
 */
export type Site = Resource & {
  /**
   * Managed service identity.
   */
  identity?: ManagedServiceIdentity;
  /**
   * Current state of the app.
   */
  readonly state?: string;
  /**
   * Hostnames associated with the app.
   */
  readonly hostNames?: string[];
  /**
   * Name of the repository site.
   */
  readonly repositorySiteName?: string;
  /**
   * State indicating whether the app has exceeded its quota usage. Read-only.
   */
  readonly usageState?: UsageState;
  /**
   * <code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).
   */
  enabled?: boolean;
  /**
   * Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
   * the app is not served on those hostnames.
   */
  readonly enabledHostNames?: string[];
  /**
   * Management information availability state for the app.
   */
  readonly availabilityState?: SiteAvailabilityState;
  /**
   * Hostname SSL states are used to manage the SSL bindings for app's hostnames.
   */
  hostNameSslStates?: HostNameSslState[];
  /**
   * Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
   */
  serverFarmId?: string;
  /**
   * <code>true</code> if reserved; otherwise, <code>false</code>.
   */
  reserved?: boolean;
  /**
   * Obsolete: Hyper-V sandbox.
   */
  isXenon?: boolean;
  /**
   * Hyper-V sandbox.
   */
  hyperV?: boolean;
  /**
   * Last time the app was modified, in UTC. Read-only.
   */
  readonly lastModifiedTimeUtc?: Date;
  /**
   * Configuration of the app.
   */
  siteConfig?: SiteConfig;
  /**
   * Azure Traffic Manager hostnames associated with the app. Read-only.
   */
  readonly trafficManagerHostNames?: string[];
  /**
   * <code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.
   */
  scmSiteAlsoStopped?: boolean;
  /**
   * Specifies which deployment slot this app will swap into. Read-only.
   */
  readonly targetSwapSlot?: string;
  /**
   * App Service Environment to use for the app.
   */
  hostingEnvironmentProfile?: HostingEnvironmentProfile;
  /**
   * <code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.
   */
  clientAffinityEnabled?: boolean;
  /**
   * <code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.
   */
  clientCertEnabled?: boolean;
  /**
   * client certificate authentication comma-separated exclusion paths
   */
  clientCertExclusionPaths?: string;
  /**
   * <code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.
   *  If <code>true</code>, the app is only accessible via API management process.
   */
  hostNamesDisabled?: boolean;
  /**
   * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
   */
  readonly outboundIpAddresses?: string;
  /**
   * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
   */
  readonly possibleOutboundIpAddresses?: string;
  /**
   * Size of the function container.
   */
  containerSize?: number;
  /**
   * Maximum allowed daily memory-time quota (applicable on dynamic apps only).
   */
  dailyMemoryTimeQuota?: number;
  /**
   * App suspended till in case memory-time quota is exceeded.
   */
  readonly suspendedTill?: Date;
  /**
   * Maximum number of workers.
   * This only applies to Functions container.
   */
  readonly maxNumberOfWorkers?: number;
  /**
   * If specified during app creation, the app is cloned from a source app.
   */
  cloningInfo?: CloningInfo;
  /**
   * Name of the resource group the app belongs to. Read-only.
   */
  readonly resourceGroup?: string;
  /**
   * <code>true</code> if the app is a default container; otherwise, <code>false</code>.
   */
  readonly isDefaultContainer?: boolean;
  /**
   * Default hostname of the app. Read-only.
   */
  readonly defaultHostName?: string;
  /**
   * Status of the last deployment slot swap operation.
   */
  readonly slotSwapStatus?: SlotSwapStatus;
  /**
   * HttpsOnly: configures a web site to accept only https requests. Issues redirect for
   * http requests
   */
  httpsOnly?: boolean;
  /**
   * Site redundancy mode
   */
  redundancyMode?: RedundancyMode;
  /**
   * Specifies an operation id if this site has a pending operation.
   */
  readonly inProgressOperationId?: string;
};

/**
 * Premier add-on.
 */
export type PremierAddOn = Resource & {
  /**
   * Premier add on SKU.
   */
  sku?: string;
  /**
   * Premier add on Product.
   */
  product?: string;
  /**
   * Premier add on Vendor.
   */
  vendor?: string;
  /**
   * Premier add on Marketplace publisher.
   */
  marketplacePublisher?: string;
  /**
   * Premier add on Marketplace offer.
   */
  marketplaceOffer?: string;
};

/**
 * Static Site ARM resource.
 */
export type StaticSiteARMResource = Resource & {
  /**
   * Description of a SKU for a scalable resource.
   */
  sku?: SkuDescription;
  /**
   * The default autogenerated hostname for the static site.
   */
  readonly defaultHostname?: string;
  /**
   * URL for the repository of the static site.
   */
  repositoryUrl?: string;
  /**
   * The target branch in the repository.
   */
  branch?: string;
  /**
   * The custom domains associated with this static site.
   */
  readonly customDomains?: string[];
  /**
   * A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
   */
  repositoryToken?: string;
  /**
   * Build properties to configure on the repository.
   */
  buildProperties?: StaticSiteBuildProperties;
};

/**
 * App Service Environment ARM resource.
 */
export type AppServiceEnvironmentResource = Resource & {
  /**
   * Name of the App Service Environment.
   */
  namePropertiesName?: string;
  /**
   * Location of the App Service Environment, e.g. "West US".
   */
  locationPropertiesLocation?: string;
  /**
   * Provisioning state of the App Service Environment.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Current status of the App Service Environment.
   */
  readonly status?: HostingEnvironmentStatus;
  /**
   * Name of the Virtual Network for the App Service Environment.
   */
  vnetName?: string;
  /**
   * Resource group of the Virtual Network.
   */
  vnetResourceGroupName?: string;
  /**
   * Subnet of the Virtual Network.
   */
  vnetSubnetName?: string;
  /**
   * Description of the Virtual Network.
   */
  virtualNetwork?: VirtualNetworkProfile;
  /**
   * Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
   */
  internalLoadBalancingMode?: InternalLoadBalancingMode;
  /**
   * Front-end VM size, e.g. "Medium", "Large".
   */
  multiSize?: string;
  /**
   * Number of front-end instances.
   */
  multiRoleCount?: number;
  /**
   * Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
   */
  workerPools?: WorkerPool[];
  /**
   * Number of IP SSL addresses reserved for the App Service Environment.
   */
  ipsslAddressCount?: number;
  /**
   * Edition of the metadata database for the App Service Environment, e.g. "Standard".
   */
  readonly databaseEdition?: string;
  /**
   * Service objective of the metadata database for the App Service Environment, e.g. "S0".
   */
  readonly databaseServiceObjective?: string;
  /**
   * Number of upgrade domains of the App Service Environment.
   */
  readonly upgradeDomains?: number;
  /**
   * Subscription of the App Service Environment.
   */
  readonly subscriptionId?: string;
  /**
   * DNS suffix of the App Service Environment.
   */
  dnsSuffix?: string;
  /**
   * Last deployment action on the App Service Environment.
   */
  readonly lastAction?: string;
  /**
   * Result of the last deployment action on the App Service Environment.
   */
  readonly lastActionResult?: string;
  /**
   * List of comma separated strings describing which VM sizes are allowed for front-ends.
   */
  readonly allowedMultiSizes?: string;
  /**
   * List of comma separated strings describing which VM sizes are allowed for workers.
   */
  readonly allowedWorkerSizes?: string;
  /**
   * Maximum number of VMs in the App Service Environment.
   */
  readonly maximumNumberOfMachines?: number;
  /**
   * Description of IP SSL mapping for the App Service Environment.
   */
  readonly vipMappings?: VirtualIPMapping[];
  /**
   * Current total, used, and available worker capacities.
   */
  readonly environmentCapacities?: StampCapacity[];
  /**
   * Access control list for controlling traffic to the App Service Environment.
   */
  networkAccessControlList?: NetworkAccessControlEntry[];
  /**
   * True/false indicating whether the App Service Environment is healthy.
   */
  readonly environmentIsHealthy?: boolean;
  /**
   * Detailed message about with results of the last check of the App Service Environment.
   */
  readonly environmentStatus?: string;
  /**
   * Resource group of the App Service Environment.
   */
  readonly resourceGroup?: string;
  /**
   * Scale factor for front-ends.
   */
  frontEndScaleFactor?: number;
  /**
   * Default Scale Factor for FrontEnds.
   */
  readonly defaultFrontEndScaleFactor?: number;
  /**
   * API Management Account associated with the App Service Environment.
   */
  apiManagementAccountId?: string;
  /**
   * <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available
   *  (most likely because NSG blocked the incoming traffic).
   */
  suspended?: boolean;
  /**
   * True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
   * (most likely because NSG blocked the incoming traffic).
   */
  dynamicCacheEnabled?: boolean;
  /**
   * Custom settings for changing the behavior of the App Service Environment.
   */
  clusterSettings?: NameValuePair[];
  /**
   * User added ip ranges to whitelist on ASE db
   */
  userWhitelistedIpRanges?: string[];
  /**
   * Flag that displays whether an ASE has linux workers or not
   */
  hasLinuxWorkers?: boolean;
  /**
   * Key Vault ID for ILB App Service Environment default SSL certificate
   */
  sslCertKeyVaultId?: string;
  /**
   * Key Vault Secret Name for ILB App Service Environment default SSL certificate
   */
  sslCertKeyVaultSecretName?: string;
};

/**
 * App Service plan.
 */
export type AppServicePlan = Resource & {
  /**
   * Description of a SKU for a scalable resource.
   */
  sku?: SkuDescription;
  /**
   * Target worker tier assigned to the App Service plan.
   */
  workerTierName?: string;
  /**
   * App Service plan status.
   */
  readonly status?: StatusOptions;
  /**
   * App Service plan subscription.
   */
  readonly subscription?: string;
  /**
   * Specification for the App Service Environment to use for the App Service plan.
   */
  hostingEnvironmentProfile?: HostingEnvironmentProfile;
  /**
   * Maximum number of instances that can be assigned to this App Service plan.
   */
  readonly maximumNumberOfWorkers?: number;
  /**
   * Geographical location for the App Service plan.
   */
  readonly geoRegion?: string;
  /**
   * If <code>true</code>, apps assigned to this App Service plan can be scaled independently.
   * If <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.
   */
  perSiteScaling?: boolean;
  /**
   * Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
   */
  maximumElasticWorkerCount?: number;
  /**
   * Number of apps assigned to this App Service plan.
   */
  readonly numberOfSites?: number;
  /**
   * If <code>true</code>, this App Service Plan owns spot instances.
   */
  isSpot?: boolean;
  /**
   * The time when the server farm expires. Valid only if it is a spot server farm.
   */
  spotExpirationTime?: Date;
  /**
   * The time when the server farm free offer expires.
   */
  freeOfferExpirationTime?: Date;
  /**
   * Resource group of the App Service plan.
   */
  readonly resourceGroup?: string;
  /**
   * If Linux app service plan <code>true</code>, <code>false</code> otherwise.
   */
  reserved?: boolean;
  /**
   * Obsolete: If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.
   */
  isXenon?: boolean;
  /**
   * If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.
   */
  hyperV?: boolean;
  /**
   * Scaling worker count.
   */
  targetWorkerCount?: number;
  /**
   * Scaling worker size ID.
   */
  targetWorkerSizeId?: number;
  /**
   * Provisioning state of the App Service Environment.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * ARM resource for a certificate order that is purchased through Azure.
 */
export type AppServiceCertificateOrderPatchResource = ProxyOnlyResource & {
  /**
   * State of the Key Vault secret.
   */
  certificates?: { [propertyName: string]: AppServiceCertificate };
  /**
   * Certificate distinguished name.
   */
  distinguishedName?: string;
  /**
   * Domain verification token.
   */
  readonly domainVerificationToken?: string;
  /**
   * Duration in years (must be between 1 and 3).
   */
  validityInYears?: number;
  /**
   * Certificate key size.
   */
  keySize?: number;
  /**
   * Certificate product type.
   */
  productType?: CertificateProductType;
  /**
   * <code>true</code> if the certificate should be automatically renewed when it expires; otherwise, <code>false</code>.
   */
  autoRenew?: boolean;
  /**
   * Status of certificate order.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Current order status.
   */
  readonly status?: CertificateOrderStatus;
  /**
   * Signed certificate.
   */
  readonly signedCertificate?: CertificateDetails;
  /**
   * Last CSR that was created for this order.
   */
  csr?: string;
  /**
   * Intermediate certificate.
   */
  readonly intermediate?: CertificateDetails;
  /**
   * Root certificate.
   */
  readonly root?: CertificateDetails;
  /**
   * Current serial number of the certificate.
   */
  readonly serialNumber?: string;
  /**
   * Certificate last issuance time.
   */
  readonly lastCertificateIssuanceTime?: Date;
  /**
   * Certificate expiration time.
   */
  readonly expirationTime?: Date;
  /**
   * <code>true</code> if private key is external; otherwise, <code>false</code>.
   */
  readonly isPrivateKeyExternal?: boolean;
  /**
   * Reasons why App Service Certificate is not renewable at the current moment.
   */
  readonly appServiceCertificateNotRenewableReasons?: AppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem[];
  /**
   * Time stamp when the certificate would be auto renewed next
   */
  readonly nextAutoRenewalTimeStamp?: Date;
};

/**
 * Key Vault container ARM resource for a certificate that is purchased through Azure.
 */
export type AppServiceCertificatePatchResource = ProxyOnlyResource & {
  /**
   * Key Vault resource Id.
   */
  keyVaultId?: string;
  /**
   * Key Vault secret name.
   */
  keyVaultSecretName?: string;
  /**
   * Status of the Key Vault secret.
   */
  readonly provisioningState?: KeyVaultSecretStatus;
};

/**
 * Class representing certificate reissue request.
 */
export type ReissueCertificateOrderRequest = ProxyOnlyResource & {
  /**
   * Certificate Key Size.
   */
  keySize?: number;
  /**
   * Delay in hours to revoke existing certificate after the new certificate is issued.
   */
  delayExistingRevokeInHours?: number;
  /**
   * Csr to be used for re-key operation.
   */
  csr?: string;
  /**
   * Should we change the ASC type (from managed private key to external private key and vice versa).
   */
  isPrivateKeyExternal?: boolean;
};

/**
 * Class representing certificate renew request.
 */
export type RenewCertificateOrderRequest = ProxyOnlyResource & {
  /**
   * Certificate Key Size.
   */
  keySize?: number;
  /**
   * Csr to be used for re-key operation.
   */
  csr?: string;
  /**
   * Should we change the ASC type (from managed private key to external private key and vice versa).
   */
  isPrivateKeyExternal?: boolean;
};

/**
 * Certificate order action.
 */
export type CertificateOrderAction = ProxyOnlyResource & {
  /**
   * Action type.
   */
  readonly actionType?: CertificateOrderActionType;
  /**
   * Time at which the certificate action was performed.
   */
  readonly createdAt?: Date;
};

/**
 * SSL certificate email.
 */
export type CertificateEmail = ProxyOnlyResource & {
  /**
   * Email id.
   */
  emailId?: string;
  /**
   * Time stamp.
   */
  timeStamp?: Date;
};

/**
 * ARM resource for a domain.
 */
export type DomainPatchResource = ProxyOnlyResource & {
  /**
   * Administrative contact.
   */
  contactAdmin?: Contact;
  /**
   * Billing contact.
   */
  contactBilling?: Contact;
  /**
   * Registrant contact.
   */
  contactRegistrant?: Contact;
  /**
   * Technical contact.
   */
  contactTech?: Contact;
  /**
   * Domain registration status.
   */
  readonly registrationStatus?: DomainStatus;
  /**
   * Domain provisioning state.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Name servers.
   */
  readonly nameServers?: string[];
  /**
   * <code>true</code> if domain privacy is enabled for this domain; otherwise, <code>false</code>.
   */
  privacy?: boolean;
  /**
   * Domain creation timestamp.
   */
  readonly createdTime?: Date;
  /**
   * Domain expiration timestamp.
   */
  readonly expirationTime?: Date;
  /**
   * Timestamp when the domain was renewed last time.
   */
  readonly lastRenewedTime?: Date;
  /**
   * <code>true</code> if the domain should be automatically renewed; otherwise, <code>false</code>.
   */
  autoRenew?: boolean;
  /**
   * <code>true</code> if Azure can assign this domain to App Service apps; otherwise, <code>false</code>. This value will be <code>true</code> if domain registration status is active and
   *  it is hosted on name servers Azure has programmatic access to.
   */
  readonly readyForDnsRecordManagement?: boolean;
  /**
   * All hostnames derived from the domain and assigned to Azure resources.
   */
  readonly managedHostNames?: HostName[];
  /**
   * Legal agreement consent.
   */
  consent?: DomainPurchaseConsent;
  /**
   * Reasons why domain is not renewable.
   */
  readonly domainNotRenewableReasons?: DomainPatchResourcePropertiesDomainNotRenewableReasonsItem[];
  /**
   * Current DNS type
   */
  dnsType?: DnsType;
  /**
   * Azure DNS Zone to use
   */
  dnsZoneId?: string;
  /**
   * Target DNS type (would be used for migration)
   */
  targetDnsType?: DnsType;
  authCode?: string;
};

/**
 * Domain ownership Identifier.
 */
export type DomainOwnershipIdentifier = ProxyOnlyResource & {
  /**
   * Ownership Id.
   */
  ownershipId?: string;
};

/**
 * A top level domain object.
 */
export type TopLevelDomain = ProxyOnlyResource & {
  /**
   * If <code>true</code>, then the top level domain supports domain privacy; otherwise, <code>false</code>.
   */
  privacy?: boolean;
};

/**
 * ARM resource for a certificate.
 */
export type CertificatePatchResource = ProxyOnlyResource & {
  /**
   * Friendly name of the certificate.
   */
  readonly friendlyName?: string;
  /**
   * Subject name of the certificate.
   */
  readonly subjectName?: string;
  /**
   * Host names the certificate applies to.
   */
  hostNames?: string[];
  /**
   * Pfx blob.
   */
  pfxBlob?: Uint8Array;
  /**
   * App name.
   */
  readonly siteName?: string;
  /**
   * Self link.
   */
  readonly selfLink?: string;
  /**
   * Certificate issuer.
   */
  readonly issuer?: string;
  /**
   * Certificate issue Date.
   */
  readonly issueDate?: Date;
  /**
   * Certificate expiration date.
   */
  readonly expirationDate?: Date;
  /**
   * Certificate password.
   */
  password?: string;
  /**
   * Certificate thumbprint.
   */
  readonly thumbprint?: string;
  /**
   * Is the certificate valid?.
   */
  readonly valid?: boolean;
  /**
   * Raw bytes of .cer file
   */
  readonly cerBlob?: Uint8Array;
  /**
   * Public key hash.
   */
  readonly publicKeyHash?: string;
  /**
   * Specification for the App Service Environment to use for the certificate.
   */
  readonly hostingEnvironmentProfile?: HostingEnvironmentProfile;
  /**
   * Key Vault Csm resource Id.
   */
  keyVaultId?: string;
  /**
   * Key Vault secret name.
   */
  keyVaultSecretName?: string;
  /**
   * Status of the Key Vault secret.
   */
  readonly keyVaultSecretStatus?: KeyVaultSecretStatus;
  /**
   * Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
   */
  serverFarmId?: string;
  /**
   * CNAME of the certificate to be issued via free certificate
   */
  canonicalName?: string;
};

/**
 * A deleted app.
 */
export type DeletedSite = ProxyOnlyResource & {
  /**
   * Numeric id for the deleted site
   */
  readonly deletedSiteId?: number;
  /**
   * Time in UTC when the app was deleted.
   */
  readonly deletedTimestamp?: string;
  /**
   * Subscription containing the deleted site
   */
  readonly subscription?: string;
  /**
   * ResourceGroup that contained the deleted site
   */
  readonly resourceGroup?: string;
  /**
   * Name of the deleted site
   */
  readonly deletedSiteName?: string;
  /**
   * Slot of the deleted site
   */
  readonly slot?: string;
  /**
   * Kind of site that was deleted
   */
  readonly kindPropertiesKind?: string;
  /**
   * Geo Region of the deleted site
   */
  readonly geoRegionName?: string;
};

/**
 * Class representing Response from Detector
 */
export type DetectorResponse = ProxyOnlyResource & {
  /**
   * metadata for the detector
   */
  metadata?: DetectorInfo;
  /**
   * Data Set
   */
  dataset?: DiagnosticData[];
};

/**
 * Class representing detector definition
 */
export type DiagnosticCategory = ProxyOnlyResource & {
  /**
   * Description of the diagnostic category
   */
  readonly description?: string;
};

/**
 * Definition of Analysis
 */
export type AnalysisDefinition = ProxyOnlyResource & {
  /**
   * Description of the Analysis
   */
  readonly description?: string;
};

/**
 * Class representing detector definition
 */
export type DetectorDefinition = ProxyOnlyResource & {
  /**
   * Display name of the detector
   */
  readonly displayName?: string;
  /**
   * Description of the detector
   */
  readonly description?: string;
  /**
   * Detector Rank
   */
  readonly rank?: number;
  /**
   * Flag representing whether detector is enabled or not.
   */
  readonly isEnabled?: boolean;
};

/**
 * Class representing a diagnostic analysis done on an application
 */
export type DiagnosticAnalysis = ProxyOnlyResource & {
  /**
   * Start time of the period
   */
  startTime?: Date;
  /**
   * End time of the period
   */
  endTime?: Date;
  /**
   * List of time periods.
   */
  abnormalTimePeriods?: AbnormalTimePeriod[];
  /**
   * Data by each detector
   */
  payload?: AnalysisData[];
  /**
   * Data by each detector for detectors that did not corelate
   */
  nonCorrelatedDetectors?: DetectorDefinition[];
};

/**
 * Class representing Response from Diagnostic Detectors
 */
export type DiagnosticDetectorResponse = ProxyOnlyResource & {
  /**
   * Start time of the period
   */
  startTime?: Date;
  /**
   * End time of the period
   */
  endTime?: Date;
  /**
   * Flag representing Issue was detected.
   */
  issueDetected?: boolean;
  /**
   * Detector's definition
   */
  detectorDefinition?: DetectorDefinition;
  /**
   * Metrics provided by the detector
   */
  metrics?: DiagnosticMetricSet[];
  /**
   * List of Correlated events found by the detector
   */
  abnormalTimePeriods?: DetectorAbnormalTimePeriod[];
  /**
   * Additional Data that detector wants to send.
   */
  data?: NameValuePair[][];
  /**
   * Meta Data
   */
  responseMetaData?: ResponseMetaData;
};

/**
 * ARM resource for a ApplicationStack.
 */
export type ApplicationStackResource = ProxyOnlyResource & {
  /**
   * Application stack name.
   */
  namePropertiesName?: string;
  /**
   * Application stack display name.
   */
  display?: string;
  /**
   * Application stack dependency.
   */
  dependency?: string;
  /**
   * List of major versions available.
   */
  majorVersions?: StackMajorVersion[];
  /**
   * List of frameworks associated with application stack.
   */
  frameworks?: ApplicationStack[];
};

/**
 * Represents a recommendation result generated by the recommendation engine.
 */
export type Recommendation = ProxyOnlyResource & {
  /**
   * Timestamp when this instance was created.
   */
  creationTime?: Date;
  /**
   * A GUID value that each recommendation object is associated with.
   */
  recommendationId?: string;
  /**
   * Full ARM resource ID string that this recommendation object is associated with.
   */
  resourceId?: string;
  /**
   * Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.
   */
  resourceScope?: ResourceScopeType;
  /**
   * Unique name of the rule.
   */
  ruleName?: string;
  /**
   * UI friendly name of the rule (may not be unique).
   */
  displayName?: string;
  /**
   * Recommendation text.
   */
  message?: string;
  /**
   * Level indicating how critical this recommendation can impact.
   */
  level?: NotificationLevel;
  /**
   * List of channels that this recommendation can apply.
   */
  channels?: Channels;
  /**
   * The list of category tags that this recommendation belongs to.
   */
  readonly categoryTags?: string[];
  /**
   * Name of action recommended by this object.
   */
  actionName?: string;
  /**
   * True if this recommendation is still valid (i.e. "actionable"). False if it is invalid.
   */
  enabled?: number;
  /**
   * The list of states of this recommendation. If it's null then it should be considered "Active".
   */
  states?: string[];
  /**
   * The beginning time in UTC of a range that the recommendation refers to.
   */
  startTime?: Date;
  /**
   * The end time in UTC of a range that the recommendation refers to.
   */
  endTime?: Date;
  /**
   * When to notify this recommendation next in UTC. Null means that this will never be notified anymore.
   */
  nextNotificationTime?: Date;
  /**
   * Date and time in UTC when this notification expires.
   */
  notificationExpirationTime?: Date;
  /**
   * Last timestamp in UTC this instance was actually notified. Null means that this recommendation hasn't been notified yet.
   */
  notifiedTime?: Date;
  /**
   * A metric value measured by the rule.
   */
  score?: number;
  /**
   * True if this is associated with a dynamically added rule
   */
  isDynamic?: boolean;
  /**
   * Extension name of the portal if exists.
   */
  extensionName?: string;
  /**
   * Deep link to a blade on the portal.
   */
  bladeName?: string;
  /**
   * Forward link to an external document associated with the rule.
   */
  forwardLink?: string;
};

/**
 * Represents a recommendation rule that the recommendation engine can perform.
 */
export type RecommendationRule = ProxyOnlyResource & {
  /**
   * Unique name of the rule.
   */
  recommendationName?: string;
  /**
   * UI friendly name of the rule.
   */
  displayName?: string;
  /**
   * Localized name of the rule (Good for UI).
   */
  message?: string;
  /**
   * Recommendation ID of an associated recommendation object tied to the rule, if exists.
   * If such an object doesn't exist, it is set to null.
   */
  recommendationId?: string;
  /**
   * Localized detailed description of the rule.
   */
  description?: string;
  /**
   * Name of action that is recommended by this rule in string.
   */
  actionName?: string;
  /**
   * Level of impact indicating how critical this rule is.
   */
  level?: NotificationLevel;
  /**
   * List of available channels that this rule applies.
   */
  channels?: Channels;
  /**
   * The list of category tags that this recommendation rule belongs to.
   */
  readonly categoryTags?: string[];
  /**
   * True if this is associated with a dynamically added rule
   */
  isDynamic?: boolean;
  /**
   * Extension name of the portal if exists. Applicable to dynamic rule only.
   */
  extensionName?: string;
  /**
   * Deep link to a blade on the portal. Applicable to dynamic rule only.
   */
  bladeName?: string;
  /**
   * Forward link to an external document associated with the rule. Applicable to dynamic rule only.
   */
  forwardLink?: string;
};

/**
 * User credentials used for publishing activity.
 */
export type User = ProxyOnlyResource & {
  /**
   * Username used for publishing.
   */
  publishingUserName?: string;
  /**
   * Password used for publishing.
   * This value contains a credential. Consider obscuring before showing to users
   */
  publishingPassword?: string;
  /**
   * Password hash used for publishing.
   * This value contains a credential. Consider obscuring before showing to users
   */
  publishingPasswordHash?: string;
  /**
   * Password hash salt used for publishing.
   * This value contains a credential. Consider obscuring before showing to users
   */
  publishingPasswordHashSalt?: string;
  /**
   * Url of SCM site.
   */
  scmUri?: string;
};

/**
 * The source control OAuth token.
 */
export type SourceControl = ProxyOnlyResource & {
  /**
   * OAuth access token.
   */
  token?: string;
  /**
   * OAuth access token secret.
   */
  tokenSecret?: string;
  /**
   * OAuth refresh token.
   */
  refreshToken?: string;
  /**
   * OAuth token expiration.
   */
  expirationTime?: Date;
};

/**
 * App Service billing entity that contains information about meter which the Azure billing system utilizes to charge users for services.
 */
export type BillingMeter = ProxyOnlyResource & {
  /**
   * Meter GUID onboarded in Commerce
   */
  meterId?: string;
  /**
   * Azure Location of billable resource
   */
  billingLocation?: string;
  /**
   * Short Name from App Service Azure pricing Page
   */
  shortName?: string;
  /**
   * Friendly name of the meter
   */
  friendlyName?: string;
  /**
   * App Service ResourceType meter used for
   */
  resourceType?: string;
  /**
   * App Service OS type meter used for
   */
  osType?: string;
};

/**
 * Geographical region.
 */
export type GeoRegion = ProxyOnlyResource & {
  /**
   * Region description.
   */
  readonly description?: string;
  /**
   * Display name for region.
   */
  readonly displayName?: string;
  /**
   * Display name for region.
   */
  readonly orgDomain?: string;
};

/**
 * A domain specific resource identifier.
 */
export type Identifier = ProxyOnlyResource & {
  /**
   * String representation of the identity.
   */
  value?: string;
};

/**
 * Premier add-on offer.
 */
export type PremierAddOnOffer = ProxyOnlyResource & {
  /**
   * Premier add on SKU.
   */
  sku?: string;
  /**
   * Premier add on offer Product.
   */
  product?: string;
  /**
   * Premier add on offer Vendor.
   */
  vendor?: string;
  /**
   * <code>true</code> if promotion code is required; otherwise, <code>false</code>.
   */
  promoCodeRequired?: boolean;
  /**
   * Premier add on offer Quota.
   */
  quota?: number;
  /**
   * App Service plans this offer is restricted to.
   */
  webHostingPlanRestrictions?: AppServicePlanRestrictions;
  /**
   * Privacy policy URL.
   */
  privacyPolicyUrl?: string;
  /**
   * Legal terms URL.
   */
  legalTermsUrl?: string;
  /**
   * Marketplace publisher.
   */
  marketplacePublisher?: string;
  /**
   * Marketplace offer.
   */
  marketplaceOffer?: string;
};

/**
 * The required set of inputs to validate a VNET
 */
export type VnetParameters = ProxyOnlyResource & {
  /**
   * The Resource Group of the VNET to be validated
   */
  vnetResourceGroup?: string;
  /**
   * The name of the VNET to be validated
   */
  vnetName?: string;
  /**
   * The subnet name to be validated
   */
  vnetSubnetName?: string;
};

/**
 * A class that describes a test that failed during NSG and UDR validation.
 */
export type VnetValidationTestFailure = ProxyOnlyResource & {
  /**
   * The name of the test that failed.
   */
  testName?: string;
  /**
   * The details of what caused the failure, e.g. the blocking rule name, etc.
   */
  details?: string;
};

/**
 * A class that describes the reason for a validation failure.
 */
export type VnetValidationFailureDetails = ProxyOnlyResource & {
  /**
   * A flag describing whether or not validation failed.
   */
  failed?: boolean;
  /**
   * A list of tests that failed in the validation.
   */
  failedTests?: VnetValidationTestFailure[];
};

/**
 * Push settings for the App.
 */
export type PushSettings = ProxyOnlyResource & {
  /**
   * Gets or sets a flag indicating whether the Push endpoint is enabled.
   */
  isPushEnabled?: boolean;
  /**
   * Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
   */
  tagWhitelistJson?: string;
  /**
   * Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
   * Tags can consist of alphanumeric characters and the following:
   * '_', '@', '#', '.', ':', '-'.
   * Validation should be performed at the PushRequestHandler.
   */
  tagsRequiringAuth?: string;
  /**
   * Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
   */
  dynamicTagsJson?: string;
};

/**
 * ARM resource for a site.
 */
export type SitePatchResource = ProxyOnlyResource & {
  /**
   * Managed service identity.
   */
  identity?: ManagedServiceIdentity;
  /**
   * Current state of the app.
   */
  readonly state?: string;
  /**
   * Hostnames associated with the app.
   */
  readonly hostNames?: string[];
  /**
   * Name of the repository site.
   */
  readonly repositorySiteName?: string;
  /**
   * State indicating whether the app has exceeded its quota usage. Read-only.
   */
  readonly usageState?: UsageState;
  /**
   * <code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).
   */
  enabled?: boolean;
  /**
   * Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
   * the app is not served on those hostnames.
   */
  readonly enabledHostNames?: string[];
  /**
   * Management information availability state for the app.
   */
  readonly availabilityState?: SiteAvailabilityState;
  /**
   * Hostname SSL states are used to manage the SSL bindings for app's hostnames.
   */
  hostNameSslStates?: HostNameSslState[];
  /**
   * Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
   */
  serverFarmId?: string;
  /**
   * <code>true</code> if reserved; otherwise, <code>false</code>.
   */
  reserved?: boolean;
  /**
   * Obsolete: Hyper-V sandbox.
   */
  isXenon?: boolean;
  /**
   * Hyper-V sandbox.
   */
  hyperV?: boolean;
  /**
   * Last time the app was modified, in UTC. Read-only.
   */
  readonly lastModifiedTimeUtc?: Date;
  /**
   * Configuration of the app.
   */
  siteConfig?: SiteConfig;
  /**
   * Azure Traffic Manager hostnames associated with the app. Read-only.
   */
  readonly trafficManagerHostNames?: string[];
  /**
   * <code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.
   */
  scmSiteAlsoStopped?: boolean;
  /**
   * Specifies which deployment slot this app will swap into. Read-only.
   */
  readonly targetSwapSlot?: string;
  /**
   * App Service Environment to use for the app.
   */
  hostingEnvironmentProfile?: HostingEnvironmentProfile;
  /**
   * <code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.
   */
  clientAffinityEnabled?: boolean;
  /**
   * <code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.
   */
  clientCertEnabled?: boolean;
  /**
   * client certificate authentication comma-separated exclusion paths
   */
  clientCertExclusionPaths?: string;
  /**
   * <code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.
   *  If <code>true</code>, the app is only accessible via API management process.
   */
  hostNamesDisabled?: boolean;
  /**
   * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
   */
  readonly outboundIpAddresses?: string;
  /**
   * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
   */
  readonly possibleOutboundIpAddresses?: string;
  /**
   * Size of the function container.
   */
  containerSize?: number;
  /**
   * Maximum allowed daily memory-time quota (applicable on dynamic apps only).
   */
  dailyMemoryTimeQuota?: number;
  /**
   * App suspended till in case memory-time quota is exceeded.
   */
  readonly suspendedTill?: Date;
  /**
   * Maximum number of workers.
   * This only applies to Functions container.
   */
  readonly maxNumberOfWorkers?: number;
  /**
   * If specified during app creation, the app is cloned from a source app.
   */
  cloningInfo?: CloningInfo;
  /**
   * Name of the resource group the app belongs to. Read-only.
   */
  readonly resourceGroup?: string;
  /**
   * <code>true</code> if the app is a default container; otherwise, <code>false</code>.
   */
  readonly isDefaultContainer?: boolean;
  /**
   * Default hostname of the app. Read-only.
   */
  readonly defaultHostName?: string;
  /**
   * Status of the last deployment slot swap operation.
   */
  readonly slotSwapStatus?: SlotSwapStatus;
  /**
   * HttpsOnly: configures a web site to accept only https requests. Issues redirect for
   * http requests
   */
  httpsOnly?: boolean;
  /**
   * Site redundancy mode
   */
  redundancyMode?: RedundancyMode;
  /**
   * Specifies an operation id if this site has a pending operation.
   */
  readonly inProgressOperationId?: string;
};

/**
 * Custom domain analysis.
 */
export type CustomHostnameAnalysisResult = ProxyOnlyResource & {
  /**
   * <code>true</code> if hostname is already verified; otherwise, <code>false</code>.
   */
  readonly isHostnameAlreadyVerified?: boolean;
  /**
   * DNS verification test result.
   */
  readonly customDomainVerificationTest?: DnsVerificationTestResult;
  /**
   * Raw failure information if DNS verification fails.
   */
  readonly customDomainVerificationFailureInfo?: ErrorEntity;
  /**
   * <code>true</code> if there is a conflict on a scale unit; otherwise, <code>false</code>.
   */
  readonly hasConflictOnScaleUnit?: boolean;
  /**
   * <code>true</code> if there is a conflict across subscriptions; otherwise, <code>false</code>.
   */
  readonly hasConflictAcrossSubscription?: boolean;
  /**
   * Name of the conflicting app on scale unit if it's within the same subscription.
   */
  readonly conflictingAppResourceId?: string;
  /**
   * CName records controller can see for this hostname.
   */
  cNameRecords?: string[];
  /**
   * TXT records controller can see for this hostname.
   */
  txtRecords?: string[];
  /**
   * A records controller can see for this hostname.
   */
  aRecords?: string[];
  /**
   * Alternate CName records controller can see for this hostname.
   */
  alternateCNameRecords?: string[];
  /**
   * Alternate TXT records controller can see for this hostname.
   */
  alternateTxtRecords?: string[];
};

/**
 * Description of a backup which will be performed.
 */
export type BackupRequest = ProxyOnlyResource & {
  /**
   * Name of the backup.
   */
  backupName?: string;
  /**
   * True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled.
   */
  enabled?: boolean;
  /**
   * SAS URL to the container.
   */
  storageAccountUrl?: string;
  /**
   * Schedule for the backup if it is executed periodically.
   */
  backupSchedule?: BackupSchedule;
  /**
   * Databases included in the backup.
   */
  databases?: DatabaseBackupSetting[];
};

/**
 * Backup description.
 */
export type BackupItem = ProxyOnlyResource & {
  /**
   * Id of the backup.
   */
  readonly backupId?: number;
  /**
   * SAS URL for the storage account container which contains this backup.
   */
  readonly storageAccountUrl?: string;
  /**
   * Name of the blob which contains data for this backup.
   */
  readonly blobName?: string;
  /**
   * Name of this backup.
   */
  readonly namePropertiesName?: string;
  /**
   * Backup status.
   */
  readonly status?: BackupItemStatus;
  /**
   * Size of the backup in bytes.
   */
  readonly sizeInBytes?: number;
  /**
   * Timestamp of the backup creation.
   */
  readonly created?: Date;
  /**
   * Details regarding this backup. Might contain an error message.
   */
  readonly log?: string;
  /**
   * List of databases included in the backup.
   */
  readonly databases?: DatabaseBackupSetting[];
  /**
   * True if this backup has been created due to a schedule being triggered.
   */
  readonly scheduled?: boolean;
  /**
   * Timestamp of a last restore operation which used this backup.
   */
  readonly lastRestoreTimeStamp?: Date;
  /**
   * Timestamp when this backup finished.
   */
  readonly finishedTimeStamp?: Date;
  /**
   * Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support.
   */
  readonly correlationId?: string;
  /**
   * Size of the original web app which has been backed up.
   */
  readonly websiteSizeInBytes?: number;
};

/**
 * Description of a restore request.
 */
export type RestoreRequest = ProxyOnlyResource & {
  /**
   * SAS URL to the container.
   */
  storageAccountUrl?: string;
  /**
   * Name of a blob which contains the backup.
   */
  blobName?: string;
  /**
   * <code>true</code> if the restore operation can overwrite target app; otherwise, <code>false</code>. <code>true</code> is needed if trying to restore over an existing app.
   */
  overwrite?: boolean;
  /**
   * Name of an app.
   */
  siteName?: string;
  /**
   * Collection of databases which should be restored. This list has to match the list of databases included in the backup.
   */
  databases?: DatabaseBackupSetting[];
  /**
   * Changes a logic when restoring an app with custom domains. <code>true</code> to remove custom domains automatically. If <code>false</code>, custom domains are added to
   * the app's object when it is being restored, but that might fail due to conflicts during the operation.
   */
  ignoreConflictingHostNames?: boolean;
  /**
   * Ignore the databases and only restore the site content
   */
  ignoreDatabases?: boolean;
  /**
   * Specify app service plan that will own restored site.
   */
  appServicePlan?: string;
  /**
   * Operation type.
   */
  operationType?: BackupRestoreOperationType;
  /**
   * <code>true</code> if SiteConfig.ConnectionStrings should be set in new app; otherwise, <code>false</code>.
   */
  adjustConnectionStrings?: boolean;
  /**
   * App Service Environment name, if needed (only when restoring an app to an App Service Environment).
   */
  hostingEnvironment?: string;
};

/**
 * Web app configuration ARM resource.
 */
export type SiteConfigResource = ProxyOnlyResource & {
  /**
   * Number of workers.
   */
  numberOfWorkers?: number;
  /**
   * Default documents.
   */
  defaultDocuments?: string[];
  /**
   * .NET Framework version.
   */
  netFrameworkVersion?: string;
  /**
   * Version of PHP.
   */
  phpVersion?: string;
  /**
   * Version of Python.
   */
  pythonVersion?: string;
  /**
   * Version of Node.js.
   */
  nodeVersion?: string;
  /**
   * Version of PowerShell.
   */
  powerShellVersion?: string;
  /**
   * Linux App Framework and version
   */
  linuxFxVersion?: string;
  /**
   * Xenon App Framework and version
   */
  windowsFxVersion?: string;
  /**
   * <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
   */
  requestTracingEnabled?: boolean;
  /**
   * Request tracing expiration time.
   */
  requestTracingExpirationTime?: Date;
  /**
   * <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
   */
  remoteDebuggingEnabled?: boolean;
  /**
   * Remote debugging version.
   */
  remoteDebuggingVersion?: string;
  /**
   * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
   */
  httpLoggingEnabled?: boolean;
  /**
   * HTTP logs directory size limit.
   */
  logsDirectorySizeLimit?: number;
  /**
   * <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
   */
  detailedErrorLoggingEnabled?: boolean;
  /**
   * Publishing user name.
   */
  publishingUsername?: string;
  /**
   * Application settings.
   */
  appSettings?: NameValuePair[];
  /**
   * Connection strings.
   */
  connectionStrings?: ConnStringInfo[];
  /**
   * Site MachineKey.
   */
  readonly machineKey?: SiteMachineKey;
  /**
   * Handler mappings.
   */
  handlerMappings?: HandlerMapping[];
  /**
   * Document root.
   */
  documentRoot?: string;
  /**
   * SCM type.
   */
  scmType?: ScmType;
  /**
   * <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
   */
  use32BitWorkerProcess?: boolean;
  /**
   * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
   */
  webSocketsEnabled?: boolean;
  /**
   * <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
   */
  alwaysOn?: boolean;
  /**
   * Java version.
   */
  javaVersion?: string;
  /**
   * Java container.
   */
  javaContainer?: string;
  /**
   * Java container version.
   */
  javaContainerVersion?: string;
  /**
   * App command line to launch.
   */
  appCommandLine?: string;
  /**
   * Managed pipeline mode.
   */
  managedPipelineMode?: ManagedPipelineMode;
  /**
   * Virtual applications.
   */
  virtualApplications?: VirtualApplication[];
  /**
   * Site load balancing.
   */
  loadBalancing?: SiteLoadBalancing;
  /**
   * This is work around for polymorphic types.
   */
  experiments?: Experiments;
  /**
   * Site limits.
   */
  limits?: SiteLimits;
  /**
   * <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
   */
  autoHealEnabled?: boolean;
  /**
   * Auto Heal rules.
   */
  autoHealRules?: AutoHealRules;
  /**
   * Tracing options.
   */
  tracingOptions?: string;
  /**
   * Virtual Network name.
   */
  vnetName?: string;
  /**
   * Cross-Origin Resource Sharing (CORS) settings.
   */
  cors?: CorsSettings;
  /**
   * Push endpoint settings.
   */
  push?: PushSettings;
  /**
   * Information about the formal API definition for the app.
   */
  apiDefinition?: ApiDefinitionInfo;
  /**
   * Azure API management settings linked to the app.
   */
  apiManagementConfig?: ApiManagementConfig;
  /**
   * Auto-swap slot name.
   */
  autoSwapSlotName?: string;
  /**
   * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
   */
  localMySqlEnabled?: boolean;
  /**
   * Managed Service Identity Id
   */
  managedServiceIdentityId?: number;
  /**
   * Explicit Managed Service Identity Id
   */
  xManagedServiceIdentityId?: number;
  /**
   * IP security restrictions for main.
   */
  ipSecurityRestrictions?: IpSecurityRestriction[];
  /**
   * IP security restrictions for scm.
   */
  scmIpSecurityRestrictions?: IpSecurityRestriction[];
  /**
   * IP security restrictions for scm to use main.
   */
  scmIpSecurityRestrictionsUseMain?: boolean;
  /**
   * Http20Enabled: configures a web site to allow clients to connect over http2.0
   */
  http20Enabled?: boolean;
  /**
   * MinTlsVersion: configures the minimum version of TLS required for SSL requests
   */
  minTlsVersion?: SupportedTlsVersions;
  /**
   * State of FTP / FTPS service
   */
  ftpsState?: FtpsState;
  /**
   * Number of preWarmed instances.
   * This setting only applies to the Consumption and Elastic Plans
   */
  preWarmedInstanceCount?: number;
  /**
   * Health check path
   */
  healthCheckPath?: string;
};

/**
 * String dictionary resource.
 */
export type StringDictionary = ProxyOnlyResource & {
  /**
   * Settings.
   */
  properties?: { [propertyName: string]: string };
};

/**
 * Configuration settings for the Azure App Service Authentication / Authorization feature.
 */
export type SiteAuthSettings = ProxyOnlyResource & {
  /**
   * <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
   */
  enabled?: boolean;
  /**
   * The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
   * The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
   */
  runtimeVersion?: string;
  /**
   * The action to take when an unauthenticated client attempts to access the app.
   */
  unauthenticatedClientAction?: UnauthenticatedClientAction;
  /**
   * <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
   *  The default is <code>false</code>.
   */
  tokenStoreEnabled?: boolean;
  /**
   * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
   * This is an advanced setting typically only needed by Windows Store application backends.
   * Note that URLs within the current domain are always implicitly allowed.
   */
  allowedExternalRedirectUrls?: string[];
  /**
   * The default authentication provider to use when multiple providers are configured.
   * This setting is only needed if multiple providers are configured and the unauthenticated client
   * action is set to "RedirectToLoginPage".
   */
  defaultProvider?: BuiltInAuthenticationProvider;
  /**
   * The number of hours after session token expiration that a session token can be used to
   * call the token refresh API. The default is 72 hours.
   */
  tokenRefreshExtensionHours?: number;
  /**
   * The Client ID of this relying party application, known as the client_id.
   * This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
   * other 3rd party OpenID Connect providers.
   * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
   */
  clientId?: string;
  /**
   * The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).
   * This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.
   * Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.
   * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
   */
  clientSecret?: string;
  /**
   * An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
   * a replacement for the Client Secret. It is also optional.
   */
  clientSecretCertificateThumbprint?: string;
  /**
   * The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
   * When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
   * This URI is a case-sensitive identifier for the token issuer.
   * More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
   */
  issuer?: string;
  /**
   * Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such.
   */
  validateIssuer?: boolean;
  /**
   * Allowed audience values to consider when validating JWTs issued by
   * Azure Active Directory. Note that the <code>ClientID</code> value is always considered an
   * allowed audience, regardless of this setting.
   */
  allowedAudiences?: string[];
  /**
   * Login parameters to send to the OpenID Connect authorization endpoint when
   * a user logs in. Each parameter must be in the form "key=value".
   */
  additionalLoginParams?: string[];
  /**
   * The OpenID Connect Client ID for the Google web application.
   * This setting is required for enabling Google Sign-In.
   * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
   */
  googleClientId?: string;
  /**
   * The client secret associated with the Google web application.
   * This setting is required for enabling Google Sign-In.
   * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
   */
  googleClientSecret?: string;
  /**
   * The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication.
   * This setting is optional. If not specified, "openid", "profile", and "email" are used as default scopes.
   * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
   */
  googleOAuthScopes?: string[];
  /**
   * The App ID of the Facebook app used for login.
   * This setting is required for enabling Facebook Login.
   * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
   */
  facebookAppId?: string;
  /**
   * The App Secret of the Facebook app used for Facebook Login.
   * This setting is required for enabling Facebook Login.
   * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
   */
  facebookAppSecret?: string;
  /**
   * The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication.
   * This setting is optional.
   * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
   */
  facebookOAuthScopes?: string[];
  /**
   * The OAuth 1.0a consumer key of the Twitter application used for sign-in.
   * This setting is required for enabling Twitter Sign-In.
   * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
   */
  twitterConsumerKey?: string;
  /**
   * The OAuth 1.0a consumer secret of the Twitter application used for sign-in.
   * This setting is required for enabling Twitter Sign-In.
   * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
   */
  twitterConsumerSecret?: string;
  /**
   * The OAuth 2.0 client ID that was created for the app used for authentication.
   * This setting is required for enabling Microsoft Account authentication.
   * Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
   */
  microsoftAccountClientId?: string;
  /**
   * The OAuth 2.0 client secret that was created for the app used for authentication.
   * This setting is required for enabling Microsoft Account authentication.
   * Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
   */
  microsoftAccountClientSecret?: string;
  /**
   * The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication.
   * This setting is optional. If not specified, "wl.basic" is used as the default scope.
   * Microsoft Account Scopes and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx
   */
  microsoftAccountOAuthScopes?: string[];
};

/**
 * AzureStorageInfo dictionary resource.
 */
export type AzureStoragePropertyDictionaryResource = ProxyOnlyResource & {
  /**
   * Azure storage accounts.
   */
  properties?: { [propertyName: string]: AzureStorageInfoValue };
};

/**
 * Web app key vault reference and status ARM resource.
 */
export type KeyVaultReferenceCollection = ProxyOnlyResource & {
  /**
   * Dictionary of <ApiKVReference>
   */
  keyToReferenceStatuses?: { [propertyName: string]: ApiKVReference };
};

/**
 * Web app key vault reference and status ARM resource.
 */
export type KeyVaultReferenceResource = ProxyOnlyResource & {
  reference?: string;
  status?: ResolveStatus;
  vaultName?: string;
  secretName?: string;
  secretVersion?: string;
  /**
   * Type of managed service identity.
   */
  identityType?: ManagedServiceIdentityType;
  details?: string;
  source?: "KeyVault";
  location?: "ApplicationSetting";
};

/**
 * String dictionary resource.
 */
export type ConnectionStringDictionary = ProxyOnlyResource & {
  /**
   * Connection strings.
   */
  properties?: { [propertyName: string]: ConnStringValueTypePair };
};

/**
 * Configuration of App Service site logs.
 */
export type SiteLogsConfig = ProxyOnlyResource & {
  /**
   * Application logs configuration.
   */
  applicationLogs?: ApplicationLogsConfig;
  /**
   * HTTP logs configuration.
   */
  httpLogs?: HttpLogsConfig;
  /**
   * Failed requests tracing configuration.
   */
  failedRequestsTracing?: EnabledConfig;
  /**
   * Detailed error messages configuration.
   */
  detailedErrorMessages?: EnabledConfig;
};

/**
 * Slot Config names azure resource.
 */
export type SlotConfigNamesResource = ProxyOnlyResource & {
  /**
   * List of connection string names.
   */
  connectionStringNames?: string[];
  /**
   * List of application settings names.
   */
  appSettingNames?: string[];
  /**
   * List of external Azure storage account identifiers.
   */
  azureStorageConfigNames?: string[];
};

/**
 * A snapshot of a web app configuration.
 */
export type SiteConfigurationSnapshotInfo = ProxyOnlyResource & {
  /**
   * The time the snapshot was taken.
   */
  readonly time?: Date;
  /**
   * The id of the snapshot
   */
  readonly snapshotId?: number;
};

/**
 * Continuous Web Job Information.
 */
export type ContinuousWebJob = ProxyOnlyResource & {
  /**
   * Job status.
   */
  status?: ContinuousWebJobStatus;
  /**
   * Detailed status.
   */
  detailedStatus?: string;
  /**
   * Log URL.
   */
  logUrl?: string;
  /**
   * Run command.
   */
  runCommand?: string;
  /**
   * Job URL.
   */
  url?: string;
  /**
   * Extra Info URL.
   */
  extraInfoUrl?: string;
  /**
   * Job type.
   */
  webJobType?: WebJobType;
  /**
   * Error information.
   */
  error?: string;
  /**
   * Using SDK?
   */
  usingSdk?: boolean;
  /**
   * Job settings.
   */
  settings?: { [propertyName: string]: any };
};

/**
 * User credentials used for publishing activity.
 */
export type Deployment = ProxyOnlyResource & {
  /**
   * Deployment status.
   */
  status?: number;
  /**
   * Details about deployment status.
   */
  message?: string;
  /**
   * Who authored the deployment.
   */
  author?: string;
  /**
   * Who performed the deployment.
   */
  deployer?: string;
  /**
   * Author email.
   */
  authorEmail?: string;
  /**
   * Start time.
   */
  startTime?: Date;
  /**
   * End time.
   */
  endTime?: Date;
  /**
   * True if deployment is currently active, false if completed and null if not started.
   */
  active?: boolean;
  /**
   * Details on deployment.
   */
  details?: string;
};

/**
 * MSDeploy ARM response
 */
export type MSDeployStatus = ProxyOnlyResource & {
  /**
   * Username of deployer
   */
  readonly deployer?: string;
  /**
   * Provisioning state
   */
  readonly provisioningState?: MSDeployProvisioningState;
  /**
   * Start time of deploy operation
   */
  readonly startTime?: Date;
  /**
   * End time of deploy operation
   */
  readonly endTime?: Date;
  /**
   * Whether the deployment operation has completed
   */
  readonly complete?: boolean;
};

/**
 * MSDeploy ARM PUT information
 */
export type MSDeploy = ProxyOnlyResource & {
  /**
   * Package URI
   */
  packageUri?: string;
  /**
   * SQL Connection String
   */
  connectionString?: string;
  /**
   * Database Type
   */
  dbType?: string;
  /**
   * URI of MSDeploy Parameters file. Must not be set if SetParameters is used.
   */
  setParametersXmlFileUri?: string;
  /**
   * MSDeploy Parameters. Must not be set if SetParametersXmlFileUri is used.
   */
  setParameters?: { [propertyName: string]: string };
  /**
   * Controls whether the MSDeploy operation skips the App_Data directory.
   * If set to <code>true</code>, the existing App_Data directory on the destination
   * will not be deleted, and any App_Data directory in the source will be ignored.
   * Setting is <code>false</code> by default.
   */
  skipAppData?: boolean;
  /**
   * Sets the AppOffline rule while the MSDeploy operation executes.
   * Setting is <code>false</code> by default.
   */
  appOffline?: boolean;
};

/**
 * MSDeploy log
 */
export type MSDeployLog = ProxyOnlyResource & {
  /**
   * List of log entry messages
   */
  readonly entries?: MSDeployLogEntry[];
};

/**
 * Function information.
 */
export type FunctionEnvelope = ProxyOnlyResource & {
  /**
   * Function App ID.
   */
  functionAppId?: string;
  /**
   * Script root path URI.
   */
  scriptRootPathHref?: string;
  /**
   * Script URI.
   */
  scriptHref?: string;
  /**
   * Config URI.
   */
  configHref?: string;
  /**
   * Test data URI.
   */
  testDataHref?: string;
  /**
   * Secrets file URI.
   */
  secretsFileHref?: string;
  /**
   * Function URI.
   */
  href?: string;
  /**
   * Config information.
   */
  config?: any;
  /**
   * File list.
   */
  files?: { [propertyName: string]: string };
  /**
   * Test data used when testing via the Azure Portal.
   */
  testData?: string;
  /**
   * The invocation URL
   */
  invokeUrlTemplate?: string;
  /**
   * The function language
   */
  language?: string;
  /**
   * Gets or sets a value indicating whether the function is disabled
   */
  isDisabled?: boolean;
};

/**
 * Function secrets.
 */
export type FunctionSecrets = ProxyOnlyResource & {
  /**
   * Secret key.
   */
  key?: string;
  /**
   * Trigger URL.
   */
  triggerUrl?: string;
};

/**
 * A hostname binding object.
 */
export type HostNameBinding = ProxyOnlyResource & {
  /**
   * App Service app name.
   */
  siteName?: string;
  /**
   * Fully qualified ARM domain resource URI.
   */
  domainId?: string;
  /**
   * Azure resource name.
   */
  azureResourceName?: string;
  /**
   * Azure resource type.
   */
  azureResourceType?: AzureResourceType;
  /**
   * Custom DNS record type.
   */
  customHostNameDnsRecordType?: CustomHostNameDnsRecordType;
  /**
   * Hostname type.
   */
  hostNameType?: HostNameType;
  /**
   * SSL type
   */
  sslState?: SslState;
  /**
   * SSL certificate thumbprint
   */
  thumbprint?: string;
  /**
   * Virtual IP address assigned to the hostname if IP based SSL is enabled.
   */
  readonly virtualIP?: string;
};

/**
 * Hybrid Connection contract. This is used to configure a Hybrid Connection.
 */
export type HybridConnection = ProxyOnlyResource & {
  /**
   * The name of the Service Bus namespace.
   */
  serviceBusNamespace?: string;
  /**
   * The name of the Service Bus relay.
   */
  relayName?: string;
  /**
   * The ARM URI to the Service Bus relay.
   */
  relayArmUri?: string;
  /**
   * The hostname of the endpoint.
   */
  hostname?: string;
  /**
   * The port of the endpoint.
   */
  port?: number;
  /**
   * The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.
   */
  sendKeyName?: string;
  /**
   * The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned
   * normally, use the POST /listKeys API instead.
   */
  sendKeyValue?: string;
  /**
   * The suffix for the service bus endpoint. By default this is .servicebus.windows.net
   */
  serviceBusSuffix?: string;
};

/**
 * Hybrid Connection for an App Service app.
 */
export type RelayServiceConnectionEntity = ProxyOnlyResource & {
  entityName?: string;
  entityConnectionString?: string;
  resourceType?: string;
  resourceConnectionString?: string;
  hostname?: string;
  port?: number;
  biztalkUri?: string;
};

/**
 * Instance of an app.
 */
export type SiteInstance = ProxyOnlyResource & {
  /**
   * Name of instance.
   */
  readonly siteInstanceName?: string;
};

export type WebSiteInstanceStatus = ProxyOnlyResource & {
  state?: SiteRuntimeState;
  /**
   * Link to the GetStatusApi in Kudu
   */
  statusUrl?: string;
  /**
   * Link to the Diagnose and Solve Portal
   */
  detectorUrl?: string;
  /**
   * Link to the Diagnose and Solve Portal
   */
  consoleUrl?: string;
  /**
   * Dictionary of <ContainerInfo>
   */
  containers?: { [propertyName: string]: ContainerInfo };
};

/**
 * Process Thread Information.
 */
export type ProcessThreadInfo = ProxyOnlyResource & {
  /**
   * Site extension ID.
   */
  readonly identifier?: number;
  /**
   * HRef URI.
   */
  href?: string;
  /**
   * Process URI.
   */
  process?: string;
  /**
   * Start address.
   */
  startAddress?: string;
  /**
   * Current thread priority.
   */
  currentPriority?: number;
  /**
   * Thread priority level.
   */
  priorityLevel?: string;
  /**
   * Base priority.
   */
  basePriority?: number;
  /**
   * Start time.
   */
  startTime?: Date;
  /**
   * Total processor time.
   */
  totalProcessorTime?: string;
  /**
   * User processor time.
   */
  userProcessorTime?: string;
  /**
   * Thread state.
   */
  state?: string;
  /**
   * Wait reason.
   */
  waitReason?: string;
};

/**
 * Process Module Information.
 */
export type ProcessModuleInfo = ProxyOnlyResource & {
  /**
   * Base address. Used as module identifier in ARM resource URI.
   */
  baseAddress?: string;
  /**
   * File name.
   */
  fileName?: string;
  /**
   * HRef URI.
   */
  href?: string;
  /**
   * File path.
   */
  filePath?: string;
  /**
   * Module memory size.
   */
  moduleMemorySize?: number;
  /**
   * File version.
   */
  fileVersion?: string;
  /**
   * File description.
   */
  fileDescription?: string;
  /**
   * Product name.
   */
  product?: string;
  /**
   * Product version.
   */
  productVersion?: string;
  /**
   * Is debug?
   */
  isDebug?: boolean;
  /**
   * Module language (locale).
   */
  language?: string;
};

/**
 * Process Information.
 */
export type ProcessInfo = ProxyOnlyResource & {
  /**
   * ARM Identifier for deployment.
   */
  readonly identifier?: number;
  /**
   * Deployment name.
   */
  deploymentName?: string;
  /**
   * HRef URI.
   */
  href?: string;
  /**
   * Minidump URI.
   */
  minidump?: string;
  /**
   * Is profile running?
   */
  isProfileRunning?: boolean;
  /**
   * Is the IIS Profile running?
   */
  isIisProfileRunning?: boolean;
  /**
   * IIS Profile timeout (seconds).
   */
  iisProfileTimeoutInSeconds?: number;
  /**
   * Parent process.
   */
  parent?: string;
  /**
   * Child process list.
   */
  children?: string[];
  /**
   * Thread list.
   */
  threads?: ProcessThreadInfo[];
  /**
   * List of open files.
   */
  openFileHandles?: string[];
  /**
   * List of modules.
   */
  modules?: ProcessModuleInfo[];
  /**
   * File name of this process.
   */
  fileName?: string;
  /**
   * Command line.
   */
  commandLine?: string;
  /**
   * User name.
   */
  userName?: string;
  /**
   * Handle count.
   */
  handleCount?: number;
  /**
   * Module count.
   */
  moduleCount?: number;
  /**
   * Thread count.
   */
  threadCount?: number;
  /**
   * Start time.
   */
  startTime?: Date;
  /**
   * Total CPU time.
   */
  totalCpuTime?: string;
  /**
   * User CPU time.
   */
  userCpuTime?: string;
  /**
   * Privileged CPU time.
   */
  privilegedCpuTime?: string;
  /**
   * Working set.
   */
  workingSet?: number;
  /**
   * Peak working set.
   */
  peakWorkingSet?: number;
  /**
   * Private memory size.
   */
  privateMemory?: number;
  /**
   * Virtual memory size.
   */
  virtualMemory?: number;
  /**
   * Peak virtual memory usage.
   */
  peakVirtualMemory?: number;
  /**
   * Paged system memory.
   */
  pagedSystemMemory?: number;
  /**
   * Non-paged system memory.
   */
  nonPagedSystemMemory?: number;
  /**
   * Paged memory.
   */
  pagedMemory?: number;
  /**
   * Peak paged memory.
   */
  peakPagedMemory?: number;
  /**
   * Time stamp.
   */
  timeStamp?: Date;
  /**
   * List of environment variables.
   */
  environmentVariables?: { [propertyName: string]: string };
  /**
   * Is this the SCM site?
   */
  isScmSite?: boolean;
  /**
   * Is this a Web Job?
   */
  isWebjob?: boolean;
  /**
   * Description of process.
   */
  description?: string;
};

/**
 * Options for app content migration.
 */
export type StorageMigrationOptions = ProxyOnlyResource & {
  /**
   * AzureFiles connection string.
   */
  azurefilesConnectionString?: string;
  /**
   * AzureFiles share.
   */
  azurefilesShare?: string;
  /**
   * <code>true</code>if the app should be switched over; otherwise, <code>false</code>.
   */
  switchSiteAfterMigration?: boolean;
  /**
   * <code>true</code> if the app should be read only during copy operation; otherwise, <code>false</code>.
   */
  blockWriteAccessToSite?: boolean;
};

/**
 * Response for a migration of app content request.
 */
export type StorageMigrationResponse = ProxyOnlyResource & {
  /**
   * When server starts the migration process, it will return an operation ID identifying that particular migration operation.
   */
  readonly operationId?: string;
};

/**
 * MySQL migration request.
 */
export type MigrateMySqlRequest = ProxyOnlyResource & {
  /**
   * Connection string to the remote MySQL database.
   */
  connectionString?: string;
  /**
   * The type of migration operation to be done
   */
  migrationType?: MySqlMigrationType;
};

/**
 * MySQL migration status.
 */
export type MigrateMySqlStatus = ProxyOnlyResource & {
  /**
   * Status of the migration task.
   */
  readonly migrationOperationStatus?: OperationStatus;
  /**
   * Operation ID for the migration task.
   */
  readonly operationId?: string;
  /**
   * True if the web app has in app MySql enabled
   */
  readonly localMySqlEnabled?: boolean;
};

/**
 * Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
 */
export type SwiftVirtualNetwork = ProxyOnlyResource & {
  /**
   * The Virtual Network subnet's resource ID. This is the subnet that this Web App will join. This subnet must have a delegation to Microsoft.Web/serverFarms defined first.
   */
  subnetResourceId?: string;
  /**
   * A flag that specifies if the scale unit this Web App is on supports Swift integration.
   */
  swiftSupported?: boolean;
};

/**
 * Virtual Network route contract used to pass routing information for a Virtual Network.
 */
export type VnetRoute = ProxyOnlyResource & {
  /**
   * The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
   */
  startAddress?: string;
  /**
   * The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
   */
  endAddress?: string;
  /**
   * The type of route this is:
   * DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918
   * INHERITED - Routes inherited from the real Virtual Network routes
   * STATIC - Static route set on the app only
   *
   * These values will be used for syncing an app's routes with those from a Virtual Network.
   */
  routeType?: RouteType;
};

/**
 * Virtual Network information contract.
 */
export type VnetInfo = ProxyOnlyResource & {
  /**
   * The Virtual Network's resource ID.
   */
  vnetResourceId?: string;
  /**
   * The client certificate thumbprint.
   */
  readonly certThumbprint?: string;
  /**
   * A certificate file (.cer) blob containing the public key of the private key used to authenticate a
   * Point-To-Site VPN connection.
   */
  certBlob?: string;
  /**
   * The routes that this Virtual Network connection uses.
   */
  readonly routes?: VnetRoute[];
  /**
   * <code>true</code> if a resync is required; otherwise, <code>false</code>.
   */
  readonly resyncRequired?: boolean;
  /**
   * DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
   */
  dnsServers?: string;
  /**
   * Flag that is used to denote if this is VNET injection
   */
  isSwift?: boolean;
};

/**
 * Full view of network features for an app (presently VNET integration and Hybrid Connections).
 */
export type NetworkFeatures = ProxyOnlyResource & {
  /**
   * The Virtual Network name.
   */
  readonly virtualNetworkName?: string;
  /**
   * The Virtual Network summary view.
   */
  readonly virtualNetworkConnection?: VnetInfo;
  /**
   * The Hybrid Connections summary view.
   */
  readonly hybridConnections?: RelayServiceConnectionEntity[];
  /**
   * The Hybrid Connection V2 (Service Bus) view.
   */
  readonly hybridConnectionsV2?: HybridConnection[];
};

/**
 * Used for getting PHP error logging flag.
 */
export type SitePhpErrorLogFlag = ProxyOnlyResource & {
  /**
   * Local log_errors setting.
   */
  localLogErrors?: string;
  /**
   * Master log_errors setting.
   */
  masterLogErrors?: string;
  /**
   * Local log_errors_max_len setting.
   */
  localLogErrorsMaxLength?: string;
  /**
   * Master log_errors_max_len setting.
   */
  masterLogErrorsMaxLength?: string;
};

/**
 * ARM resource for a PremierAddOn.
 */
export type PremierAddOnPatchResource = ProxyOnlyResource & {
  /**
   * Premier add on SKU.
   */
  sku?: string;
  /**
   * Premier add on Product.
   */
  product?: string;
  /**
   * Premier add on Vendor.
   */
  vendor?: string;
  /**
   * Premier add on Marketplace publisher.
   */
  marketplacePublisher?: string;
  /**
   * Premier add on Marketplace offer.
   */
  marketplaceOffer?: string;
};

/**
 * Description of the parameters of Private Access for a Web Site.
 */
export type PrivateAccess = ProxyOnlyResource & {
  /**
   * Whether private access is enabled or not.
   */
  enabled?: boolean;
  /**
   * The Virtual Networks (and subnets) allowed to access the site privately.
   */
  virtualNetworks?: PrivateAccessVirtualNetwork[];
};

/**
 * Public certificate object
 */
export type PublicCertificate = ProxyOnlyResource & {
  /**
   * Public Certificate byte array
   */
  blob?: Uint8Array;
  /**
   * Public Certificate Location
   */
  publicCertificateLocation?: PublicCertificateLocation;
  /**
   * Certificate Thumbprint
   */
  readonly thumbprint?: string;
};

/**
 * Details about restoring a deleted app.
 */
export type DeletedAppRestoreRequest = ProxyOnlyResource & {
  /**
   * ARM resource ID of the deleted app. Example:
   * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
   */
  deletedSiteId?: string;
  /**
   * If true, deleted site configuration, in addition to content, will be restored.
   */
  recoverConfiguration?: boolean;
  /**
   * Point in time to restore the deleted app from, formatted as a DateTime string.
   * If unspecified, default value is the time that the app was deleted.
   */
  snapshotTime?: string;
  /**
   * If true, the snapshot is retrieved from DRSecondary endpoint.
   */
  useDRSecondary?: boolean;
};

/**
 * Details about app recovery operation.
 */
export type SnapshotRestoreRequest = ProxyOnlyResource & {
  /**
   * Point in time in which the app restore should be done, formatted as a DateTime string.
   */
  snapshotTime?: string;
  /**
   * Optional. Specifies the web app that snapshot contents will be retrieved from.
   * If empty, the targeted web app will be used as the source.
   */
  recoverySource?: SnapshotRecoverySource;
  /**
   * If <code>true</code> the restore operation can overwrite source app; otherwise, <code>false</code>.
   */
  overwrite?: boolean;
  /**
   * If true, site configuration, in addition to content, will be reverted.
   */
  recoverConfiguration?: boolean;
  /**
   * If true, custom hostname conflicts will be ignored when recovering to a target web app.
   * This setting is only necessary when RecoverConfiguration is enabled.
   */
  ignoreConflictingHostNames?: boolean;
  /**
   * If true, the snapshot is retrieved from DRSecondary endpoint.
   */
  useDRSecondary?: boolean;
};

/**
 * Site Extension Information.
 */
export type SiteExtensionInfo = ProxyOnlyResource & {
  /**
   * Site extension ID.
   */
  extensionId?: string;
  title?: string;
  /**
   * Site extension type.
   */
  extensionType?: SiteExtensionType;
  /**
   * Summary description.
   */
  summary?: string;
  /**
   * Detailed description.
   */
  description?: string;
  /**
   * Version information.
   */
  version?: string;
  /**
   * Extension URL.
   */
  extensionUrl?: string;
  /**
   * Project URL.
   */
  projectUrl?: string;
  /**
   * Icon URL.
   */
  iconUrl?: string;
  /**
   * License URL.
   */
  licenseUrl?: string;
  /**
   * Feed URL.
   */
  feedUrl?: string;
  /**
   * List of authors.
   */
  authors?: string[];
  /**
   * Installer command line parameters.
   */
  installerCommandLineParams?: string;
  /**
   * Published timestamp.
   */
  publishedDateTime?: Date;
  /**
   * Count of downloads.
   */
  downloadCount?: number;
  /**
   * <code>true</code> if the local version is the latest version; <code>false</code> otherwise.
   */
  localIsLatestVersion?: boolean;
  /**
   * Local path.
   */
  localPath?: string;
  /**
   * Installed timestamp.
   */
  installedDateTime?: Date;
  /**
   * Provisioning state.
   */
  provisioningState?: string;
  /**
   * Site Extension comment.
   */
  comment?: string;
};

/**
 * Private Endpoint Connection ARM resource.
 */
export type PrivateEndpointConnectionResource = ProxyOnlyResource & {
  readonly provisioningState?: string;
  /**
   * PrivateEndpoint of a remote private endpoint connection
   */
  privateEndpoint?: ArmIdWrapper;
  /**
   * The state of a private link connection
   */
  privateLinkServiceConnectionState?: PrivateLinkConnectionState;
};

/**
 * Private Endpoint Connection Approval ARM resource.
 */
export type PrivateLinkConnectionApprovalRequestResource = ProxyOnlyResource & {
  /**
   * The state of a private link connection
   */
  privateLinkServiceConnectionState?: PrivateLinkConnectionState;
};

/**
 * A setting difference between two deployment slots of an app.
 */
export type SlotDifference = ProxyOnlyResource & {
  /**
   * Level of the difference: Information, Warning or Error.
   */
  readonly level?: string;
  /**
   * The type of the setting: General, AppSetting or ConnectionString.
   */
  readonly settingType?: string;
  /**
   * Rule that describes how to process the setting difference during a slot swap.
   */
  readonly diffRule?: string;
  /**
   * Name of the setting.
   */
  readonly settingName?: string;
  /**
   * Value of the setting in the current slot.
   */
  readonly valueInCurrentSlot?: string;
  /**
   * Value of the setting in the target slot.
   */
  readonly valueInTargetSlot?: string;
  /**
   * Description of the setting difference.
   */
  readonly description?: string;
};

/**
 * A snapshot of an app.
 */
export type Snapshot = ProxyOnlyResource & {
  /**
   * The time the snapshot was taken.
   */
  readonly time?: string;
};

/**
 * Source control configuration for an app.
 */
export type SiteSourceControl = ProxyOnlyResource & {
  /**
   * Repository or source control URL.
   */
  repoUrl?: string;
  /**
   * Name of branch to use for deployment.
   */
  branch?: string;
  /**
   * <code>true</code> to limit to manual integration; <code>false</code> to enable continuous integration (which configures webhooks into online repos like GitHub).
   */
  isManualIntegration?: boolean;
  /**
   * <code>true</code> to enable deployment rollback; otherwise, <code>false</code>.
   */
  deploymentRollbackEnabled?: boolean;
  /**
   * <code>true</code> for a Mercurial repository; <code>false</code> for a Git repository.
   */
  isMercurial?: boolean;
};

/**
 * Triggered Web Job Run Information.
 */
export type TriggeredJobRun = ProxyOnlyResource & {
  /**
   * Job ID.
   */
  webJobId?: string;
  /**
   * Job name.
   */
  webJobName?: string;
  /**
   * Job status.
   */
  status?: TriggeredWebJobStatus;
  /**
   * Start time.
   */
  startTime?: Date;
  /**
   * End time.
   */
  endTime?: Date;
  /**
   * Job duration.
   */
  duration?: string;
  /**
   * Output URL.
   */
  outputUrl?: string;
  /**
   * Error URL.
   */
  errorUrl?: string;
  /**
   * Job URL.
   */
  url?: string;
  /**
   * Job name.
   */
  jobName?: string;
  /**
   * Job trigger.
   */
  trigger?: string;
};

/**
 * Triggered Web Job Information.
 */
export type TriggeredWebJob = ProxyOnlyResource & {
  /**
   * Latest job run information.
   */
  latestRun?: TriggeredJobRun;
  /**
   * History URL.
   */
  historyUrl?: string;
  /**
   * Scheduler Logs URL.
   */
  schedulerLogsUrl?: string;
  /**
   * Run command.
   */
  runCommand?: string;
  /**
   * Job URL.
   */
  url?: string;
  /**
   * Extra Info URL.
   */
  extraInfoUrl?: string;
  /**
   * Job type.
   */
  webJobType?: WebJobType;
  /**
   * Error information.
   */
  error?: string;
  /**
   * Using SDK?
   */
  usingSdk?: boolean;
  /**
   * Job settings.
   */
  settings?: { [propertyName: string]: any };
};

/**
 * Triggered Web Job History. List of Triggered Web Job Run Information elements.
 */
export type TriggeredJobHistory = ProxyOnlyResource & {
  /**
   * List of triggered web job runs.
   */
  runs?: TriggeredJobRun[];
};

/**
 * The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
 */
export type VnetGateway = ProxyOnlyResource & {
  /**
   * The Virtual Network name.
   */
  vnetName?: string;
  /**
   * The URI where the VPN package can be downloaded.
   */
  vpnPackageUri?: string;
};

/**
 * Web Job Information.
 */
export type WebJob = ProxyOnlyResource & {
  /**
   * Run command.
   */
  runCommand?: string;
  /**
   * Job URL.
   */
  url?: string;
  /**
   * Extra Info URL.
   */
  extraInfoUrl?: string;
  /**
   * Job type.
   */
  webJobType?: WebJobType;
  /**
   * Error information.
   */
  error?: string;
  /**
   * Using SDK?
   */
  usingSdk?: boolean;
  /**
   * Job settings.
   */
  settings?: { [propertyName: string]: any };
};

/**
 * ARM resource for a static site when patching
 */
export type StaticSitePatchResource = ProxyOnlyResource & {
  /**
   * The default autogenerated hostname for the static site.
   */
  readonly defaultHostname?: string;
  /**
   * URL for the repository of the static site.
   */
  repositoryUrl?: string;
  /**
   * The target branch in the repository.
   */
  branch?: string;
  /**
   * The custom domains associated with this static site.
   */
  readonly customDomains?: string[];
  /**
   * A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
   */
  repositoryToken?: string;
  /**
   * Build properties to configure on the repository.
   */
  buildProperties?: StaticSiteBuildProperties;
};

/**
 * Static Site User ARM resource.
 */
export type StaticSiteUserARMResource = ProxyOnlyResource & {
  /**
   * The identity provider for the static site user.
   */
  readonly provider?: string;
  /**
   * The user id for the static site user.
   */
  readonly userId?: string;
  /**
   * The display name for the static site user.
   */
  readonly displayName?: string;
  /**
   * The roles for the static site user, in free-form string format
   */
  roles?: string;
};

/**
 * Static Site Build ARM resource.
 */
export type StaticSiteBuildARMResource = ProxyOnlyResource & {
  /**
   * An identifier for the static site build.
   */
  readonly buildId?: string;
  /**
   * The source branch.
   */
  readonly sourceBranch?: string;
  /**
   * The title of a pull request that a static site build is related to.
   */
  readonly pullRequestTitle?: string;
  /**
   * The hostname for a static site build.
   */
  readonly hostname?: string;
  /**
   * When this build was created.
   */
  readonly createdTimeUtc?: Date;
  /**
   * When this build was updated.
   */
  readonly lastUpdatedOn?: Date;
  /**
   * The status of the static site build.
   */
  readonly status?: BuildStatus;
};

/**
 * Static Site Function Overview ARM resource.
 */
export type StaticSiteFunctionOverviewARMResource = ProxyOnlyResource & {
  /**
   * The name for the function
   */
  readonly functionName?: string;
  /**
   * The trigger type of the function
   */
  readonly triggerType?: TriggerTypes;
};

/**
 * Static sites user roles invitation resource.
 */
export type StaticSiteUserInvitationRequestResource = ProxyOnlyResource & {
  /**
   * The domain name for the static site custom domain.
   */
  domain?: string;
  /**
   * The identity provider for the static site user.
   */
  provider?: string;
  /**
   * The user id for the static site user.
   */
  userDetails?: string;
  /**
   * The roles for the static site user, in free-form string format
   */
  roles?: string;
  /**
   * The number of hours the sas token stays valid
   */
  numHoursToExpiration?: number;
};

/**
 * Static sites user roles invitation link resource.
 */
export type StaticSiteUserInvitationResponseResource = ProxyOnlyResource & {
  /**
   * The expiration time of the invitation
   */
  readonly expiresOn?: Date;
  /**
   * The url for the invitation link
   */
  readonly invitationUrl?: string;
};

/**
 * Static Site Custom Domain Overview ARM resource.
 */
export type StaticSiteCustomDomainOverviewARMResource = ProxyOnlyResource & {
  /**
   * The domain name for the static site custom domain.
   */
  readonly domainName?: string;
  /**
   * The date and time on which the custom domain was created for the static site.
   */
  readonly createdOn?: Date;
};

/**
 * Static Site Reset Properties ARM resource.
 */
export type StaticSiteResetPropertiesARMResource = ProxyOnlyResource & {
  /**
   * The token which proves admin privileges to the repository.
   */
  repositoryToken?: string;
  /**
   * Determines whether the repository should be updated with the new properties.
   */
  shouldUpdateRepository?: boolean;
};

/**
 * ARM resource for a app service environment.
 */
export type AppServiceEnvironmentPatchResource = ProxyOnlyResource & {
  /**
   * Name of the App Service Environment.
   */
  namePropertiesName?: string;
  /**
   * Location of the App Service Environment, e.g. "West US".
   */
  location?: string;
  /**
   * Provisioning state of the App Service Environment.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Current status of the App Service Environment.
   */
  readonly status?: HostingEnvironmentStatus;
  /**
   * Name of the Virtual Network for the App Service Environment.
   */
  vnetName?: string;
  /**
   * Resource group of the Virtual Network.
   */
  vnetResourceGroupName?: string;
  /**
   * Subnet of the Virtual Network.
   */
  vnetSubnetName?: string;
  /**
   * Description of the Virtual Network.
   */
  virtualNetwork?: VirtualNetworkProfile;
  /**
   * Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
   */
  internalLoadBalancingMode?: InternalLoadBalancingMode;
  /**
   * Front-end VM size, e.g. "Medium", "Large".
   */
  multiSize?: string;
  /**
   * Number of front-end instances.
   */
  multiRoleCount?: number;
  /**
   * Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
   */
  workerPools?: WorkerPool[];
  /**
   * Number of IP SSL addresses reserved for the App Service Environment.
   */
  ipsslAddressCount?: number;
  /**
   * Edition of the metadata database for the App Service Environment, e.g. "Standard".
   */
  readonly databaseEdition?: string;
  /**
   * Service objective of the metadata database for the App Service Environment, e.g. "S0".
   */
  readonly databaseServiceObjective?: string;
  /**
   * Number of upgrade domains of the App Service Environment.
   */
  readonly upgradeDomains?: number;
  /**
   * Subscription of the App Service Environment.
   */
  readonly subscriptionId?: string;
  /**
   * DNS suffix of the App Service Environment.
   */
  dnsSuffix?: string;
  /**
   * Last deployment action on the App Service Environment.
   */
  readonly lastAction?: string;
  /**
   * Result of the last deployment action on the App Service Environment.
   */
  readonly lastActionResult?: string;
  /**
   * List of comma separated strings describing which VM sizes are allowed for front-ends.
   */
  readonly allowedMultiSizes?: string;
  /**
   * List of comma separated strings describing which VM sizes are allowed for workers.
   */
  readonly allowedWorkerSizes?: string;
  /**
   * Maximum number of VMs in the App Service Environment.
   */
  readonly maximumNumberOfMachines?: number;
  /**
   * Description of IP SSL mapping for the App Service Environment.
   */
  readonly vipMappings?: VirtualIPMapping[];
  /**
   * Current total, used, and available worker capacities.
   */
  readonly environmentCapacities?: StampCapacity[];
  /**
   * Access control list for controlling traffic to the App Service Environment.
   */
  networkAccessControlList?: NetworkAccessControlEntry[];
  /**
   * True/false indicating whether the App Service Environment is healthy.
   */
  readonly environmentIsHealthy?: boolean;
  /**
   * Detailed message about with results of the last check of the App Service Environment.
   */
  readonly environmentStatus?: string;
  /**
   * Resource group of the App Service Environment.
   */
  readonly resourceGroup?: string;
  /**
   * Scale factor for front-ends.
   */
  frontEndScaleFactor?: number;
  /**
   * Default Scale Factor for FrontEnds.
   */
  readonly defaultFrontEndScaleFactor?: number;
  /**
   * API Management Account associated with the App Service Environment.
   */
  apiManagementAccountId?: string;
  /**
   * <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available
   *  (most likely because NSG blocked the incoming traffic).
   */
  suspended?: boolean;
  /**
   * True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
   * (most likely because NSG blocked the incoming traffic).
   */
  dynamicCacheEnabled?: boolean;
  /**
   * Custom settings for changing the behavior of the App Service Environment.
   */
  clusterSettings?: NameValuePair[];
  /**
   * User added ip ranges to whitelist on ASE db
   */
  userWhitelistedIpRanges?: string[];
  /**
   * Flag that displays whether an ASE has linux workers or not
   */
  hasLinuxWorkers?: boolean;
  /**
   * Key Vault ID for ILB App Service Environment default SSL certificate
   */
  sslCertKeyVaultId?: string;
  /**
   * Key Vault Secret Name for ILB App Service Environment default SSL certificate
   */
  sslCertKeyVaultSecretName?: string;
};

/**
 * Describes main public IP address and any extra virtual IPs.
 */
export type AddressResponse = ProxyOnlyResource & {
  /**
   * Main public virtual IP.
   */
  serviceIpAddress?: string;
  /**
   * Virtual Network internal IP address of the App Service Environment if it is in internal load-balancing mode.
   */
  internalIpAddress?: string;
  /**
   * IP addresses appearing on outbound connections.
   */
  outboundIpAddresses?: string[];
  /**
   * Additional virtual IPs.
   */
  vipMappings?: VirtualIPMapping[];
};

/**
 * Worker pool of an App Service Environment ARM resource.
 */
export type WorkerPoolResource = ProxyOnlyResource & {
  /**
   * Description of a SKU for a scalable resource.
   */
  sku?: SkuDescription;
  /**
   * Worker size ID for referencing this worker pool.
   */
  workerSizeId?: number;
  /**
   * Shared or dedicated app hosting.
   */
  computeMode?: ComputeModeOptions;
  /**
   * VM size of the worker pool instances.
   */
  workerSize?: string;
  /**
   * Number of instances in the worker pool.
   */
  workerCount?: number;
  /**
   * Names of all instances in the worker pool (read only).
   */
  readonly instanceNames?: string[];
};

/**
 * Metadata for the metrics.
 */
export type ResourceMetricDefinition = ProxyOnlyResource & {
  /**
   * Unit of the metric.
   */
  readonly unit?: string;
  /**
   * Primary aggregation type.
   */
  readonly primaryAggregationType?: string;
  /**
   * List of time grains supported for the metric together with retention period.
   */
  readonly metricAvailabilities?: ResourceMetricAvailability[];
  /**
   * Resource URI.
   */
  readonly resourceUri?: string;
  /**
   * Resource metric definition properties.
   */
  readonly properties?: { [propertyName: string]: string };
};

/**
 * Usage of the quota resource.
 */
export type Usage = ProxyOnlyResource & {
  /**
   * Friendly name shown in the UI.
   */
  readonly displayName?: string;
  /**
   * Name of the quota resource.
   */
  readonly resourceName?: string;
  /**
   * Units of measurement for the quota resource.
   */
  readonly unit?: string;
  /**
   * The current value of the resource counter.
   */
  readonly currentValue?: number;
  /**
   * The resource limit.
   */
  readonly limit?: number;
  /**
   * Next reset time for the resource counter.
   */
  readonly nextResetTime?: Date;
  /**
   * Compute mode used for this usage.
   */
  readonly computeMode?: ComputeModeOptions;
  /**
   * Site mode used for this usage.
   */
  readonly siteMode?: string;
};

/**
 * ARM resource for a app service plan.
 */
export type AppServicePlanPatchResource = ProxyOnlyResource & {
  /**
   * Target worker tier assigned to the App Service plan.
   */
  workerTierName?: string;
  /**
   * App Service plan status.
   */
  readonly status?: StatusOptions;
  /**
   * App Service plan subscription.
   */
  readonly subscription?: string;
  /**
   * Specification for the App Service Environment to use for the App Service plan.
   */
  hostingEnvironmentProfile?: HostingEnvironmentProfile;
  /**
   * Maximum number of instances that can be assigned to this App Service plan.
   */
  readonly maximumNumberOfWorkers?: number;
  /**
   * Geographical location for the App Service plan.
   */
  readonly geoRegion?: string;
  /**
   * If <code>true</code>, apps assigned to this App Service plan can be scaled independently.
   * If <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.
   */
  perSiteScaling?: boolean;
  /**
   * Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
   */
  maximumElasticWorkerCount?: number;
  /**
   * Number of apps assigned to this App Service plan.
   */
  readonly numberOfSites?: number;
  /**
   * If <code>true</code>, this App Service Plan owns spot instances.
   */
  isSpot?: boolean;
  /**
   * The time when the server farm expires. Valid only if it is a spot server farm.
   */
  spotExpirationTime?: Date;
  /**
   * The time when the server farm free offer expires.
   */
  freeOfferExpirationTime?: Date;
  /**
   * Resource group of the App Service plan.
   */
  readonly resourceGroup?: string;
  /**
   * If Linux app service plan <code>true</code>, <code>false</code> otherwise.
   */
  reserved?: boolean;
  /**
   * Obsolete: If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.
   */
  isXenon?: boolean;
  /**
   * If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.
   */
  hyperV?: boolean;
  /**
   * Scaling worker count.
   */
  targetWorkerCount?: number;
  /**
   * Scaling worker size ID.
   */
  targetWorkerSizeId?: number;
  /**
   * Provisioning state of the App Service Environment.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Hybrid Connection key contract. This has the send key name and value for a Hybrid Connection.
 */
export type HybridConnectionKey = ProxyOnlyResource & {
  /**
   * The name of the send key.
   */
  readonly sendKeyName?: string;
  /**
   * The value of the send key.
   */
  readonly sendKeyValue?: string;
};

/**
 * Hybrid Connection limits contract. This is used to return the plan limits of Hybrid Connections.
 */
export type HybridConnectionLimits = ProxyOnlyResource & {
  /**
   * The current number of Hybrid Connections.
   */
  readonly current?: number;
  /**
   * The maximum number of Hybrid Connections allowed.
   */
  readonly maximum?: number;
};

/**
 * Used for getting ResourceHealthCheck settings.
 */
export type ResourceHealthMetadata = ProxyOnlyResource & {
  /**
   * The category that the resource matches in the RHC Policy File
   */
  category?: string;
  /**
   * Is there a health signal for the resource
   */
  signalAvailability?: boolean;
};
/**
 * Defines values for AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem.
 */
export type AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem =
  | "RegistrationStatusNotSupportedForRenewal"
  | "ExpirationNotInRenewalTimeRange"
  | "SubscriptionNotActive";
/**
 * Defines values for AppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem.
 */
export type AppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem =
  | "RegistrationStatusNotSupportedForRenewal"
  | "ExpirationNotInRenewalTimeRange"
  | "SubscriptionNotActive";
/**
 * Defines values for DomainPropertiesDomainNotRenewableReasonsItem.
 */
export type DomainPropertiesDomainNotRenewableReasonsItem =
  | "RegistrationStatusNotSupportedForRenewal"
  | "ExpirationNotInRenewalTimeRange"
  | "SubscriptionNotActive";
/**
 * Defines values for DomainPatchResourcePropertiesDomainNotRenewableReasonsItem.
 */
export type DomainPatchResourcePropertiesDomainNotRenewableReasonsItem =
  | "RegistrationStatusNotSupportedForRenewal"
  | "ExpirationNotInRenewalTimeRange"
  | "SubscriptionNotActive";
/**
 * Defines values for Enum4.
 */
export type Enum4 = "Windows" | "Linux" | "WindowsFunctions" | "LinuxFunctions";
/**
 * Defines values for Enum5.
 */
export type Enum5 = "Windows" | "Linux" | "WindowsFunctions" | "LinuxFunctions";
/**
 * Defines values for ResourceScopeType.
 */
export type ResourceScopeType = "ServerFarm" | "Subscription" | "WebSite";
/**
 * Defines values for CheckNameResourceTypes.
 */
export type CheckNameResourceTypes =
  | "Site"
  | "Slot"
  | "HostingEnvironment"
  | "PublishingUser"
  | "Microsoft.Web/sites"
  | "Microsoft.Web/sites/slots"
  | "Microsoft.Web/hostingEnvironments"
  | "Microsoft.Web/publishingUsers";
/**
 * Defines values for InAvailabilityReasonType.
 */
export type InAvailabilityReasonType = "Invalid" | "AlreadyExists";
/**
 * Defines values for SkuName.
 */
export type SkuName =
  | "Free"
  | "Shared"
  | "Basic"
  | "Standard"
  | "Premium"
  | "Dynamic"
  | "Isolated"
  | "PremiumV2"
  | "ElasticPremium"
  | "ElasticIsolated";
/**
 * Defines values for ValidateResourceTypes.
 */
export type ValidateResourceTypes = "ServerFarm" | "Site";
/**
 * Defines values for ScmType.
 */
export type ScmType =
  | "None"
  | "Dropbox"
  | "Tfs"
  | "LocalGit"
  | "GitHub"
  | "CodePlexGit"
  | "CodePlexHg"
  | "BitbucketGit"
  | "BitbucketHg"
  | "ExternalGit"
  | "ExternalHg"
  | "OneDrive"
  | "VSO"
  | "VSTSRM";
/**
 * Defines values for SupportedTlsVersions.
 */
export type SupportedTlsVersions = "1.0" | "1.1" | "1.2";
/**
 * Defines values for FtpsState.
 */
export type FtpsState = "AllAllowed" | "FtpsOnly" | "Disabled";
/**
 * Defines values for DatabaseType.
 */
export type DatabaseType = "SqlAzure" | "MySql" | "LocalMySql" | "PostgreSql";
/**
 * Defines values for RouteType.
 */
export type RouteType = "DEFAULT" | "INHERITED" | "STATIC";
/**
 * Defines values for PublishingProfileFormat.
 */
export type PublishingProfileFormat = "FileZilla3" | "WebDeploy" | "Ftp";
/**
 * Defines values for BuildStatus.
 */
export type BuildStatus =
  | "WaitingForDeployment"
  | "Uploading"
  | "Deploying"
  | "Ready"
  | "Failed"
  | "Deleting"
  | "Detached";
/**
 * Defines values for TriggerTypes.
 */
export type TriggerTypes = "HttpTrigger" | "Unknown";
/**
 * Defines values for KeyVaultSecretStatus.
 */
export type KeyVaultSecretStatus =
  | "Initialized"
  | "WaitingOnCertificateOrder"
  | "Succeeded"
  | "CertificateOrderFailed"
  | "OperationNotPermittedOnKeyVault"
  | "AzureServiceUnauthorizedToAccessKeyVault"
  | "KeyVaultDoesNotExist"
  | "KeyVaultSecretDoesNotExist"
  | "UnknownError"
  | "ExternalPrivateKey"
  | "Unknown";
/**
 * Defines values for CertificateProductType.
 */
export type CertificateProductType =
  | "StandardDomainValidatedSsl"
  | "StandardDomainValidatedWildCardSsl";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Succeeded"
  | "Failed"
  | "Canceled"
  | "InProgress"
  | "Deleting";
/**
 * Defines values for CertificateOrderStatus.
 */
export type CertificateOrderStatus =
  | "Pendingissuance"
  | "Issued"
  | "Revoked"
  | "Canceled"
  | "Denied"
  | "Pendingrevocation"
  | "PendingRekey"
  | "Unused"
  | "Expired"
  | "NotSubmitted";
/**
 * Defines values for CertificateOrderActionType.
 */
export type CertificateOrderActionType =
  | "CertificateIssued"
  | "CertificateOrderCanceled"
  | "CertificateOrderCreated"
  | "CertificateRevoked"
  | "DomainValidationComplete"
  | "FraudDetected"
  | "OrgNameChange"
  | "OrgValidationComplete"
  | "SanDrop"
  | "FraudCleared"
  | "CertificateExpired"
  | "CertificateExpirationWarning"
  | "FraudDocumentationRequired"
  | "Unknown";
/**
 * Defines values for DomainType.
 */
export type DomainType = "Regular" | "SoftDeleted";
/**
 * Defines values for DomainStatus.
 */
export type DomainStatus =
  | "Active"
  | "Awaiting"
  | "Cancelled"
  | "Confiscated"
  | "Disabled"
  | "Excluded"
  | "Expired"
  | "Failed"
  | "Held"
  | "Locked"
  | "Parked"
  | "Pending"
  | "Reserved"
  | "Reverted"
  | "Suspended"
  | "Transferred"
  | "Unknown"
  | "Unlocked"
  | "Unparked"
  | "Updated"
  | "JsonConverterFailed";
/**
 * Defines values for AzureResourceType.
 */
export type AzureResourceType = "Website" | "TrafficManager";
/**
 * Defines values for CustomHostNameDnsRecordType.
 */
export type CustomHostNameDnsRecordType = "CName" | "A";
/**
 * Defines values for HostNameType.
 */
export type HostNameType = "Verified" | "Managed";
/**
 * Defines values for DnsType.
 */
export type DnsType = "AzureDns" | "DefaultDomainRegistrarDns";
/**
 * Defines values for RenderingType.
 */
export type RenderingType =
  | "NoGraph"
  | "Table"
  | "TimeSeries"
  | "TimeSeriesPerInstance";
/**
 * Defines values for IssueType.
 */
export type IssueType =
  | "ServiceIncident"
  | "AppDeployment"
  | "AppCrash"
  | "RuntimeIssueDetected"
  | "AseDeployment"
  | "UserIssue"
  | "PlatformIssue"
  | "Other";
/**
 * Defines values for SolutionType.
 */
export type SolutionType =
  | "QuickSolution"
  | "DeepInvestigation"
  | "BestPractices";
/**
 * Defines values for NotificationLevel.
 */
export type NotificationLevel =
  | "Critical"
  | "Warning"
  | "Information"
  | "NonUrgentSuggestion";
/**
 * Defines values for Channels.
 */
export type Channels = "Notification" | "Api" | "Email" | "Webhook" | "All";
/**
 * Defines values for HostingEnvironmentStatus.
 */
export type HostingEnvironmentStatus =
  | "Preparing"
  | "Ready"
  | "Scaling"
  | "Deleting";
/**
 * Defines values for InternalLoadBalancingMode.
 */
export type InternalLoadBalancingMode = "None" | "Web" | "Publishing";
/**
 * Defines values for ComputeModeOptions.
 */
export type ComputeModeOptions = "Shared" | "Dedicated" | "Dynamic";
/**
 * Defines values for WorkerSizeOptions.
 */
export type WorkerSizeOptions =
  | "Small"
  | "Medium"
  | "Large"
  | "D1"
  | "D2"
  | "D3"
  | "NestedSmall"
  | "Default";
/**
 * Defines values for AccessControlEntryAction.
 */
export type AccessControlEntryAction = "Permit" | "Deny";
/**
 * Defines values for AppServicePlanRestrictions.
 */
export type AppServicePlanRestrictions =
  | "None"
  | "Free"
  | "Shared"
  | "Basic"
  | "Standard"
  | "Premium";
/**
 * Defines values for UsageState.
 */
export type UsageState = "Normal" | "Exceeded";
/**
 * Defines values for SiteAvailabilityState.
 */
export type SiteAvailabilityState =
  | "Normal"
  | "Limited"
  | "DisasterRecoveryMode";
/**
 * Defines values for SslState.
 */
export type SslState = "Disabled" | "SniEnabled" | "IpBasedEnabled";
/**
 * Defines values for HostType.
 */
export type HostType = "Standard" | "Repository";
/**
 * Defines values for ConnectionStringType.
 */
export type ConnectionStringType =
  | "MySql"
  | "SQLServer"
  | "SQLAzure"
  | "Custom"
  | "NotificationHub"
  | "ServiceBus"
  | "EventHub"
  | "ApiHub"
  | "DocDb"
  | "RedisCache"
  | "PostgreSQL";
/**
 * Defines values for ManagedPipelineMode.
 */
export type ManagedPipelineMode = "Integrated" | "Classic";
/**
 * Defines values for SiteLoadBalancing.
 */
export type SiteLoadBalancing =
  | "WeightedRoundRobin"
  | "LeastRequests"
  | "LeastResponseTime"
  | "WeightedTotalTraffic"
  | "RequestHash";
/**
 * Defines values for AutoHealActionType.
 */
export type AutoHealActionType = "Recycle" | "LogEvent" | "CustomAction";
/**
 * Defines values for IpFilterTag.
 */
export type IpFilterTag = "Default" | "XffProxy";
/**
 * Defines values for RedundancyMode.
 */
export type RedundancyMode =
  | "None"
  | "Manual"
  | "Failover"
  | "ActiveActive"
  | "GeoRedundant";
/**
 * Defines values for ManagedServiceIdentityType.
 */
export type ManagedServiceIdentityType =
  | "None"
  | "SystemAssigned"
  | "UserAssigned";
/**
 * Defines values for DnsVerificationTestResult.
 */
export type DnsVerificationTestResult = "Passed" | "Failed" | "Skipped";
/**
 * Defines values for FrequencyUnit.
 */
export type FrequencyUnit = "Day" | "Hour";
/**
 * Defines values for BackupItemStatus.
 */
export type BackupItemStatus =
  | "InProgress"
  | "Failed"
  | "Succeeded"
  | "TimedOut"
  | "Created"
  | "Skipped"
  | "PartiallySucceeded"
  | "DeleteInProgress"
  | "DeleteFailed"
  | "Deleted";
/**
 * Defines values for BackupRestoreOperationType.
 */
export type BackupRestoreOperationType =
  | "Default"
  | "Clone"
  | "Relocation"
  | "Snapshot"
  | "CloudFS";
/**
 * Defines values for UnauthenticatedClientAction.
 */
export type UnauthenticatedClientAction =
  | "RedirectToLoginPage"
  | "AllowAnonymous";
/**
 * Defines values for BuiltInAuthenticationProvider.
 */
export type BuiltInAuthenticationProvider =
  | "AzureActiveDirectory"
  | "Facebook"
  | "Google"
  | "MicrosoftAccount"
  | "Twitter";
/**
 * Defines values for AzureStorageType.
 */
export type AzureStorageType = "AzureFiles" | "AzureBlob";
/**
 * Defines values for AzureStorageState.
 */
export type AzureStorageState = "Ok" | "InvalidCredentials" | "InvalidShare";
/**
 * Defines values for ResolveStatus.
 */
export type ResolveStatus =
  | "Initialized"
  | "Resolved"
  | "InvalidSyntax"
  | "MSINotEnabled"
  | "VaultNotFound"
  | "SecretNotFound"
  | "SecretVersionNotFound"
  | "AccessToKeyVaultDenied"
  | "OtherReasons";
/**
 * Defines values for LogLevel.
 */
export type LogLevel = "Off" | "Verbose" | "Information" | "Warning" | "Error";
/**
 * Defines values for ContinuousWebJobStatus.
 */
export type ContinuousWebJobStatus =
  | "Initializing"
  | "Starting"
  | "Running"
  | "PendingRestart"
  | "Stopped";
/**
 * Defines values for WebJobType.
 */
export type WebJobType = "Continuous" | "Triggered";
/**
 * Defines values for MSDeployProvisioningState.
 */
export type MSDeployProvisioningState =
  | "accepted"
  | "running"
  | "succeeded"
  | "failed"
  | "canceled";
/**
 * Defines values for MSDeployLogEntryType.
 */
export type MSDeployLogEntryType = "Message" | "Warning" | "Error";
/**
 * Defines values for SiteRuntimeState.
 */
export type SiteRuntimeState = "READY" | "STOPPED" | "UNKNOWN";
/**
 * Defines values for CloneAbilityResult.
 */
export type CloneAbilityResult =
  | "Cloneable"
  | "PartiallyCloneable"
  | "NotCloneable";
/**
 * Defines values for MySqlMigrationType.
 */
export type MySqlMigrationType = "LocalToRemote" | "RemoteToLocal";
/**
 * Defines values for OperationStatus.
 */
export type OperationStatus =
  | "InProgress"
  | "Failed"
  | "Succeeded"
  | "TimedOut"
  | "Created";
/**
 * Defines values for PublicCertificateLocation.
 */
export type PublicCertificateLocation =
  | "CurrentUserMy"
  | "LocalMachineMy"
  | "Unknown";
/**
 * Defines values for SiteExtensionType.
 */
export type SiteExtensionType = "Gallery" | "WebRoot";
/**
 * Defines values for TriggeredWebJobStatus.
 */
export type TriggeredWebJobStatus = "Success" | "Failed" | "Error";
/**
 * Defines values for StatusOptions.
 */
export type StatusOptions = "Ready" | "Pending" | "Creating";

/**
 * Contains response data for the list operation.
 */
export type AppServiceCertificateOrdersListResponse = AppServiceCertificateOrderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateOrderCollection;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AppServiceCertificateOrdersListByResourceGroupResponse = AppServiceCertificateOrderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateOrderCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AppServiceCertificateOrdersGetResponse = AppServiceCertificateOrder & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateOrder;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AppServiceCertificateOrdersCreateOrUpdateResponse = AppServiceCertificateOrder & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateOrder;
  };
};

/**
 * Contains response data for the update operation.
 */
export type AppServiceCertificateOrdersUpdateResponse = AppServiceCertificateOrder & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateOrder;
  };
};

/**
 * Contains response data for the listCertificates operation.
 */
export type AppServiceCertificateOrdersListCertificatesResponse = AppServiceCertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateCollection;
  };
};

/**
 * Contains response data for the getCertificate operation.
 */
export type AppServiceCertificateOrdersGetCertificateResponse = AppServiceCertificateResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateResource;
  };
};

/**
 * Contains response data for the createOrUpdateCertificate operation.
 */
export type AppServiceCertificateOrdersCreateOrUpdateCertificateResponse = AppServiceCertificateResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateResource;
  };
};

/**
 * Contains response data for the updateCertificate operation.
 */
export type AppServiceCertificateOrdersUpdateCertificateResponse = AppServiceCertificateResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateResource;
  };
};

/**
 * Contains response data for the retrieveSiteSeal operation.
 */
export type AppServiceCertificateOrdersRetrieveSiteSealResponse = SiteSeal & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteSeal;
  };
};

/**
 * Contains response data for the retrieveCertificateActions operation.
 */
export type AppServiceCertificateOrdersRetrieveCertificateActionsResponse = CertificateOrderAction[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOrderAction[];
  };
};

/**
 * Contains response data for the retrieveCertificateEmailHistory operation.
 */
export type AppServiceCertificateOrdersRetrieveCertificateEmailHistoryResponse = CertificateEmail[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateEmail[];
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AppServiceCertificateOrdersListNextResponse = AppServiceCertificateOrderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateOrderCollection;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AppServiceCertificateOrdersListByResourceGroupNextResponse = AppServiceCertificateOrderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateOrderCollection;
  };
};

/**
 * Contains response data for the listCertificatesNext operation.
 */
export type AppServiceCertificateOrdersListCertificatesNextResponse = AppServiceCertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceCertificateCollection;
  };
};

/**
 * Contains response data for the listOperations operation.
 */
export type CertificateRegistrationProviderListOperationsResponse = CsmOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmOperationCollection;
  };
};

/**
 * Contains response data for the listOperationsNext operation.
 */
export type CertificateRegistrationProviderListOperationsNextResponse = CsmOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmOperationCollection;
  };
};

/**
 * Contains response data for the checkAvailability operation.
 */
export type DomainsCheckAvailabilityResponse = DomainAvailabilityCheckResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainAvailabilityCheckResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DomainsListResponse = DomainCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainCollection;
  };
};

/**
 * Contains response data for the getControlCenterSsoRequest operation.
 */
export type DomainsGetControlCenterSsoRequestResponse = DomainControlCenterSsoRequest & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainControlCenterSsoRequest;
  };
};

/**
 * Contains response data for the listRecommendations operation.
 */
export type DomainsListRecommendationsResponse = NameIdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NameIdentifierCollection;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DomainsListByResourceGroupResponse = DomainCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DomainsGetResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Domain;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DomainsCreateOrUpdateResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Domain;
  };
};

/**
 * Optional parameters.
 */
export interface DomainsDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to delete the domain immediately. The default is <code>false</code> which deletes the domain after 24 hours.
   */
  forceHardDeleteDomain?: boolean;
}

/**
 * Contains response data for the update operation.
 */
export type DomainsUpdateResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Domain;
  };
};

/**
 * Contains response data for the listOwnershipIdentifiers operation.
 */
export type DomainsListOwnershipIdentifiersResponse = DomainOwnershipIdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainOwnershipIdentifierCollection;
  };
};

/**
 * Contains response data for the getOwnershipIdentifier operation.
 */
export type DomainsGetOwnershipIdentifierResponse = DomainOwnershipIdentifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainOwnershipIdentifier;
  };
};

/**
 * Contains response data for the createOrUpdateOwnershipIdentifier operation.
 */
export type DomainsCreateOrUpdateOwnershipIdentifierResponse = DomainOwnershipIdentifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainOwnershipIdentifier;
  };
};

/**
 * Contains response data for the updateOwnershipIdentifier operation.
 */
export type DomainsUpdateOwnershipIdentifierResponse = DomainOwnershipIdentifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainOwnershipIdentifier;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DomainsListNextResponse = DomainCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainCollection;
  };
};

/**
 * Contains response data for the listRecommendationsNext operation.
 */
export type DomainsListRecommendationsNextResponse = NameIdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NameIdentifierCollection;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DomainsListByResourceGroupNextResponse = DomainCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainCollection;
  };
};

/**
 * Contains response data for the listOwnershipIdentifiersNext operation.
 */
export type DomainsListOwnershipIdentifiersNextResponse = DomainOwnershipIdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DomainOwnershipIdentifierCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type TopLevelDomainsListResponse = TopLevelDomainCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopLevelDomainCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TopLevelDomainsGetResponse = TopLevelDomain & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopLevelDomain;
  };
};

/**
 * Contains response data for the listAgreements operation.
 */
export type TopLevelDomainsListAgreementsResponse = TldLegalAgreementCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TldLegalAgreementCollection;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type TopLevelDomainsListNextResponse = TopLevelDomainCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TopLevelDomainCollection;
  };
};

/**
 * Contains response data for the listAgreementsNext operation.
 */
export type TopLevelDomainsListAgreementsNextResponse = TldLegalAgreementCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TldLegalAgreementCollection;
  };
};

/**
 * Contains response data for the listOperations operation.
 */
export type DomainRegistrationProviderListOperationsResponse = CsmOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmOperationCollection;
  };
};

/**
 * Contains response data for the listOperationsNext operation.
 */
export type DomainRegistrationProviderListOperationsNextResponse = CsmOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmOperationCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type CertificatesListResponse = CertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateCollection;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type CertificatesListByResourceGroupResponse = CertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type CertificatesGetResponse = Certificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Certificate;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type CertificatesCreateOrUpdateResponse = Certificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Certificate;
  };
};

/**
 * Contains response data for the update operation.
 */
export type CertificatesUpdateResponse = Certificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Certificate;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type CertificatesListNextResponse = CertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateCollection;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type CertificatesListByResourceGroupNextResponse = CertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DeletedWebAppsListResponse = DeletedWebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedWebAppCollection;
  };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type DeletedWebAppsListByLocationResponse = DeletedWebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedWebAppCollection;
  };
};

/**
 * Contains response data for the getDeletedWebAppByLocation operation.
 */
export type DeletedWebAppsGetDeletedWebAppByLocationResponse = DeletedSite & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSite;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DeletedWebAppsListNextResponse = DeletedWebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedWebAppCollection;
  };
};

/**
 * Contains response data for the listByLocationNext operation.
 */
export type DeletedWebAppsListByLocationNextResponse = DeletedWebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedWebAppCollection;
  };
};

/**
 * Contains response data for the listHostingEnvironmentDetectorResponses operation.
 */
export type DiagnosticsListHostingEnvironmentDetectorResponsesResponse = DetectorResponseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponseCollection;
  };
};

/**
 * Optional parameters.
 */
export interface DiagnosticsGetHostingEnvironmentDetectorResponseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start Time
   */
  startTime?: Date;
  /**
   * End Time
   */
  endTime?: Date;
  /**
   * Time Grain
   */
  timeGrain?: string;
}

/**
 * Contains response data for the getHostingEnvironmentDetectorResponse operation.
 */
export type DiagnosticsGetHostingEnvironmentDetectorResponseResponse = DetectorResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponse;
  };
};

/**
 * Contains response data for the listSiteDetectorResponses operation.
 */
export type DiagnosticsListSiteDetectorResponsesResponse = DetectorResponseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponseCollection;
  };
};

/**
 * Optional parameters.
 */
export interface DiagnosticsGetSiteDetectorResponseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start Time
   */
  startTime?: Date;
  /**
   * End Time
   */
  endTime?: Date;
  /**
   * Time Grain
   */
  timeGrain?: string;
}

/**
 * Contains response data for the getSiteDetectorResponse operation.
 */
export type DiagnosticsGetSiteDetectorResponseResponse = DetectorResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponse;
  };
};

/**
 * Contains response data for the listSiteDiagnosticCategories operation.
 */
export type DiagnosticsListSiteDiagnosticCategoriesResponse = DiagnosticCategoryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCategoryCollection;
  };
};

/**
 * Contains response data for the getSiteDiagnosticCategory operation.
 */
export type DiagnosticsGetSiteDiagnosticCategoryResponse = DiagnosticCategory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCategory;
  };
};

/**
 * Contains response data for the listSiteAnalyses operation.
 */
export type DiagnosticsListSiteAnalysesResponse = DiagnosticAnalysisCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticAnalysisCollection;
  };
};

/**
 * Contains response data for the getSiteAnalysis operation.
 */
export type DiagnosticsGetSiteAnalysisResponse = AnalysisDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AnalysisDefinition;
  };
};

/**
 * Optional parameters.
 */
export interface DiagnosticsExecuteSiteAnalysisOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start Time
   */
  startTime?: Date;
  /**
   * End Time
   */
  endTime?: Date;
  /**
   * Time Grain
   */
  timeGrain?: string;
}

/**
 * Contains response data for the executeSiteAnalysis operation.
 */
export type DiagnosticsExecuteSiteAnalysisResponse = DiagnosticAnalysis & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticAnalysis;
  };
};

/**
 * Contains response data for the listSiteDetectors operation.
 */
export type DiagnosticsListSiteDetectorsResponse = DiagnosticDetectorCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticDetectorCollection;
  };
};

/**
 * Contains response data for the getSiteDetector operation.
 */
export type DiagnosticsGetSiteDetectorResponse = DetectorDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorDefinition;
  };
};

/**
 * Optional parameters.
 */
export interface DiagnosticsExecuteSiteDetectorOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start Time
   */
  startTime?: Date;
  /**
   * End Time
   */
  endTime?: Date;
  /**
   * Time Grain
   */
  timeGrain?: string;
}

/**
 * Contains response data for the executeSiteDetector operation.
 */
export type DiagnosticsExecuteSiteDetectorResponse = DiagnosticDetectorResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticDetectorResponse;
  };
};

/**
 * Contains response data for the listSiteDetectorResponsesSlot operation.
 */
export type DiagnosticsListSiteDetectorResponsesSlotResponse = DetectorResponseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponseCollection;
  };
};

/**
 * Optional parameters.
 */
export interface DiagnosticsGetSiteDetectorResponseSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start Time
   */
  startTime?: Date;
  /**
   * End Time
   */
  endTime?: Date;
  /**
   * Time Grain
   */
  timeGrain?: string;
}

/**
 * Contains response data for the getSiteDetectorResponseSlot operation.
 */
export type DiagnosticsGetSiteDetectorResponseSlotResponse = DetectorResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponse;
  };
};

/**
 * Contains response data for the listSiteDiagnosticCategoriesSlot operation.
 */
export type DiagnosticsListSiteDiagnosticCategoriesSlotResponse = DiagnosticCategoryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCategoryCollection;
  };
};

/**
 * Contains response data for the getSiteDiagnosticCategorySlot operation.
 */
export type DiagnosticsGetSiteDiagnosticCategorySlotResponse = DiagnosticCategory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCategory;
  };
};

/**
 * Contains response data for the listSiteAnalysesSlot operation.
 */
export type DiagnosticsListSiteAnalysesSlotResponse = DiagnosticAnalysisCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticAnalysisCollection;
  };
};

/**
 * Contains response data for the getSiteAnalysisSlot operation.
 */
export type DiagnosticsGetSiteAnalysisSlotResponse = AnalysisDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AnalysisDefinition;
  };
};

/**
 * Optional parameters.
 */
export interface DiagnosticsExecuteSiteAnalysisSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start Time
   */
  startTime?: Date;
  /**
   * End Time
   */
  endTime?: Date;
  /**
   * Time Grain
   */
  timeGrain?: string;
}

/**
 * Contains response data for the executeSiteAnalysisSlot operation.
 */
export type DiagnosticsExecuteSiteAnalysisSlotResponse = DiagnosticAnalysis & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticAnalysis;
  };
};

/**
 * Contains response data for the listSiteDetectorsSlot operation.
 */
export type DiagnosticsListSiteDetectorsSlotResponse = DiagnosticDetectorCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticDetectorCollection;
  };
};

/**
 * Contains response data for the getSiteDetectorSlot operation.
 */
export type DiagnosticsGetSiteDetectorSlotResponse = DetectorDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorDefinition;
  };
};

/**
 * Optional parameters.
 */
export interface DiagnosticsExecuteSiteDetectorSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start Time
   */
  startTime?: Date;
  /**
   * End Time
   */
  endTime?: Date;
  /**
   * Time Grain
   */
  timeGrain?: string;
}

/**
 * Contains response data for the executeSiteDetectorSlot operation.
 */
export type DiagnosticsExecuteSiteDetectorSlotResponse = DiagnosticDetectorResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticDetectorResponse;
  };
};

/**
 * Contains response data for the listHostingEnvironmentDetectorResponsesNext operation.
 */
export type DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse = DetectorResponseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponseCollection;
  };
};

/**
 * Contains response data for the listSiteDetectorResponsesNext operation.
 */
export type DiagnosticsListSiteDetectorResponsesNextResponse = DetectorResponseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponseCollection;
  };
};

/**
 * Contains response data for the listSiteDiagnosticCategoriesNext operation.
 */
export type DiagnosticsListSiteDiagnosticCategoriesNextResponse = DiagnosticCategoryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCategoryCollection;
  };
};

/**
 * Contains response data for the listSiteAnalysesNext operation.
 */
export type DiagnosticsListSiteAnalysesNextResponse = DiagnosticAnalysisCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticAnalysisCollection;
  };
};

/**
 * Contains response data for the listSiteDetectorsNext operation.
 */
export type DiagnosticsListSiteDetectorsNextResponse = DiagnosticDetectorCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticDetectorCollection;
  };
};

/**
 * Contains response data for the listSiteDetectorResponsesSlotNext operation.
 */
export type DiagnosticsListSiteDetectorResponsesSlotNextResponse = DetectorResponseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DetectorResponseCollection;
  };
};

/**
 * Contains response data for the listSiteDiagnosticCategoriesSlotNext operation.
 */
export type DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse = DiagnosticCategoryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticCategoryCollection;
  };
};

/**
 * Contains response data for the listSiteAnalysesSlotNext operation.
 */
export type DiagnosticsListSiteAnalysesSlotNextResponse = DiagnosticAnalysisCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticAnalysisCollection;
  };
};

/**
 * Contains response data for the listSiteDetectorsSlotNext operation.
 */
export type DiagnosticsListSiteDetectorsSlotNextResponse = DiagnosticDetectorCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnosticDetectorCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProviderGetAvailableStacksOptionalParams
  extends coreHttp.OperationOptions {
  osTypeSelected?: Enum4;
}

/**
 * Contains response data for the getAvailableStacks operation.
 */
export type ProviderGetAvailableStacksResponse = ApplicationStackCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationStackCollection;
  };
};

/**
 * Contains response data for the listOperations operation.
 */
export type ProviderListOperationsResponse = CsmOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmOperationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProviderGetAvailableStacksOnPremOptionalParams
  extends coreHttp.OperationOptions {
  osTypeSelected?: Enum5;
}

/**
 * Contains response data for the getAvailableStacksOnPrem operation.
 */
export type ProviderGetAvailableStacksOnPremResponse = ApplicationStackCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationStackCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProviderGetAvailableStacksNextOptionalParams
  extends coreHttp.OperationOptions {
  osTypeSelected?: Enum4;
}

/**
 * Contains response data for the getAvailableStacksNext operation.
 */
export type ProviderGetAvailableStacksNextResponse = ApplicationStackCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationStackCollection;
  };
};

/**
 * Contains response data for the listOperationsNext operation.
 */
export type ProviderListOperationsNextResponse = CsmOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmOperationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ProviderGetAvailableStacksOnPremNextOptionalParams
  extends coreHttp.OperationOptions {
  osTypeSelected?: Enum5;
}

/**
 * Contains response data for the getAvailableStacksOnPremNext operation.
 */
export type ProviderGetAvailableStacksOnPremNextResponse = ApplicationStackCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApplicationStackCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
   */
  featured?: boolean;
  /**
   * Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type RecommendationsListResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListHistoryForHostingEnvironmentOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
   */
  filter?: string;
  /**
   * Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
   */
  expiredOnly?: boolean;
}

/**
 * Contains response data for the listHistoryForHostingEnvironment operation.
 */
export type RecommendationsListHistoryForHostingEnvironmentResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListRecommendedRulesForHostingEnvironmentOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
   */
  featured?: boolean;
  /**
   * Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
   */
  filter?: string;
}

/**
 * Contains response data for the listRecommendedRulesForHostingEnvironment operation.
 */
export type RecommendationsListRecommendedRulesForHostingEnvironmentResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsGetRuleDetailsByHostingEnvironmentOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to update the last-seen timestamp of the recommendation object.
   */
  updateSeen?: boolean;
  /**
   * The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.
   */
  recommendationId?: string;
}

/**
 * Contains response data for the getRuleDetailsByHostingEnvironment operation.
 */
export type RecommendationsGetRuleDetailsByHostingEnvironmentResponse = RecommendationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationRule;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListHistoryForWebAppOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
   */
  filter?: string;
  /**
   * Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
   */
  expiredOnly?: boolean;
}

/**
 * Contains response data for the listHistoryForWebApp operation.
 */
export type RecommendationsListHistoryForWebAppResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListRecommendedRulesForWebAppOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
   */
  featured?: boolean;
  /**
   * Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
   */
  filter?: string;
}

/**
 * Contains response data for the listRecommendedRulesForWebApp operation.
 */
export type RecommendationsListRecommendedRulesForWebAppResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsGetRuleDetailsByWebAppOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to update the last-seen timestamp of the recommendation object.
   */
  updateSeen?: boolean;
  /**
   * The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.
   */
  recommendationId?: string;
}

/**
 * Contains response data for the getRuleDetailsByWebApp operation.
 */
export type RecommendationsGetRuleDetailsByWebAppResponse = RecommendationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationRule;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
   */
  featured?: boolean;
  /**
   * Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type RecommendationsListNextResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListHistoryForHostingEnvironmentNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
   */
  filter?: string;
  /**
   * Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
   */
  expiredOnly?: boolean;
}

/**
 * Contains response data for the listHistoryForHostingEnvironmentNext operation.
 */
export type RecommendationsListHistoryForHostingEnvironmentNextResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListRecommendedRulesForHostingEnvironmentNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
   */
  featured?: boolean;
  /**
   * Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
   */
  filter?: string;
}

/**
 * Contains response data for the listRecommendedRulesForHostingEnvironmentNext operation.
 */
export type RecommendationsListRecommendedRulesForHostingEnvironmentNextResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListHistoryForWebAppNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
   */
  filter?: string;
  /**
   * Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
   */
  expiredOnly?: boolean;
}

/**
 * Contains response data for the listHistoryForWebAppNext operation.
 */
export type RecommendationsListHistoryForWebAppNextResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Optional parameters.
 */
export interface RecommendationsListRecommendedRulesForWebAppNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
   */
  featured?: boolean;
  /**
   * Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
   */
  filter?: string;
}

/**
 * Contains response data for the listRecommendedRulesForWebAppNext operation.
 */
export type RecommendationsListRecommendedRulesForWebAppNextResponse = RecommendationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RecommendationCollection;
  };
};

/**
 * Contains response data for the getPublishingUser operation.
 */
export type WebSiteManagementClientGetPublishingUserResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Contains response data for the updatePublishingUser operation.
 */
export type WebSiteManagementClientUpdatePublishingUserResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Contains response data for the listSourceControls operation.
 */
export type WebSiteManagementClientListSourceControlsResponse = SourceControlCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SourceControlCollection;
  };
};

/**
 * Contains response data for the getSourceControl operation.
 */
export type WebSiteManagementClientGetSourceControlResponse = SourceControl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SourceControl;
  };
};

/**
 * Contains response data for the updateSourceControl operation.
 */
export type WebSiteManagementClientUpdateSourceControlResponse = SourceControl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SourceControl;
  };
};

/**
 * Optional parameters.
 */
export interface WebSiteManagementClientListBillingMetersOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Azure Location of billable resource
   */
  billingLocation?: string;
  /**
   * App Service OS type meters used for
   */
  osType?: string;
}

/**
 * Contains response data for the listBillingMeters operation.
 */
export type WebSiteManagementClientListBillingMetersResponse = BillingMeterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BillingMeterCollection;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type WebSiteManagementClientCheckNameAvailabilityResponse = ResourceNameAvailability & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceNameAvailability;
  };
};

/**
 * Contains response data for the getSubscriptionDeploymentLocations operation.
 */
export type WebSiteManagementClientGetSubscriptionDeploymentLocationsResponse = DeploymentLocations & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentLocations;
  };
};

/**
 * Optional parameters.
 */
export interface WebSiteManagementClientListGeoRegionsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Name of SKU used to filter the regions.
   */
  sku?: SkuName;
  /**
   * Specify <code>true</code> if you want to filter to only regions that support Linux workers.
   */
  linuxWorkersEnabled?: boolean;
  /**
   * Specify <code>true</code> if you want to filter to only regions that support Xenon workers.
   */
  xenonWorkersEnabled?: boolean;
  /**
   * Specify <code>true</code> if you want to filter to only regions that support Linux Consumption Workers.
   */
  linuxDynamicWorkersEnabled?: boolean;
}

/**
 * Contains response data for the listGeoRegions operation.
 */
export type WebSiteManagementClientListGeoRegionsResponse = GeoRegionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GeoRegionCollection;
  };
};

/**
 * Contains response data for the listSiteIdentifiersAssignedToHostName operation.
 */
export type WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse = IdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentifierCollection;
  };
};

/**
 * Contains response data for the listPremierAddOnOffers operation.
 */
export type WebSiteManagementClientListPremierAddOnOffersResponse = PremierAddOnOfferCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOnOfferCollection;
  };
};

/**
 * Contains response data for the listSkus operation.
 */
export type WebSiteManagementClientListSkusResponse = SkuInfos & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SkuInfos;
  };
};

/**
 * Contains response data for the verifyHostingEnvironmentVnet operation.
 */
export type WebSiteManagementClientVerifyHostingEnvironmentVnetResponse = VnetValidationFailureDetails & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetValidationFailureDetails;
  };
};

/**
 * Contains response data for the validate operation.
 */
export type WebSiteManagementClientValidateResponse = ValidateResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ValidateResponse;
  };
};

/**
 * Contains response data for the listSourceControlsNext operation.
 */
export type WebSiteManagementClientListSourceControlsNextResponse = SourceControlCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SourceControlCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebSiteManagementClientListBillingMetersNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Azure Location of billable resource
   */
  billingLocation?: string;
  /**
   * App Service OS type meters used for
   */
  osType?: string;
}

/**
 * Contains response data for the listBillingMetersNext operation.
 */
export type WebSiteManagementClientListBillingMetersNextResponse = BillingMeterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BillingMeterCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebSiteManagementClientListGeoRegionsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Name of SKU used to filter the regions.
   */
  sku?: SkuName;
  /**
   * Specify <code>true</code> if you want to filter to only regions that support Linux workers.
   */
  linuxWorkersEnabled?: boolean;
  /**
   * Specify <code>true</code> if you want to filter to only regions that support Xenon workers.
   */
  xenonWorkersEnabled?: boolean;
  /**
   * Specify <code>true</code> if you want to filter to only regions that support Linux Consumption Workers.
   */
  linuxDynamicWorkersEnabled?: boolean;
}

/**
 * Contains response data for the listGeoRegionsNext operation.
 */
export type WebSiteManagementClientListGeoRegionsNextResponse = GeoRegionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GeoRegionCollection;
  };
};

/**
 * Contains response data for the listSiteIdentifiersAssignedToHostNameNext operation.
 */
export type WebSiteManagementClientListSiteIdentifiersAssignedToHostNameNextResponse = IdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentifierCollection;
  };
};

/**
 * Contains response data for the listPremierAddOnOffersNext operation.
 */
export type WebSiteManagementClientListPremierAddOnOffersNextResponse = PremierAddOnOfferCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOnOfferCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type WebAppsListResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
   */
  includeSlots?: boolean;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type WebAppsListByResourceGroupResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WebAppsGetResponse = Site & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Site;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WebAppsCreateOrUpdateResponse = Site & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Site;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsDeleteOptionalParams extends coreHttp.OperationOptions {
  /**
   * If true, web app metrics are also deleted.
   */
  deleteMetrics?: boolean;
  /**
   * Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted.
   */
  deleteEmptyServerFarm?: boolean;
}

/**
 * Contains response data for the update operation.
 */
export type WebAppsUpdateResponse = Site & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Site;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsAnalyzeCustomHostnameOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Custom hostname.
   */
  hostName?: string;
}

/**
 * Contains response data for the analyzeCustomHostname operation.
 */
export type WebAppsAnalyzeCustomHostnameResponse = CustomHostnameAnalysisResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CustomHostnameAnalysisResult;
  };
};

/**
 * Contains response data for the backup operation.
 */
export type WebAppsBackupResponse = BackupItem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItem;
  };
};

/**
 * Contains response data for the listBackups operation.
 */
export type WebAppsListBackupsResponse = BackupItemCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItemCollection;
  };
};

/**
 * Contains response data for the getBackupStatus operation.
 */
export type WebAppsGetBackupStatusResponse = BackupItem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItem;
  };
};

/**
 * Contains response data for the listBackupStatusSecrets operation.
 */
export type WebAppsListBackupStatusSecretsResponse = BackupItem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItem;
  };
};

/**
 * Contains response data for the listConfigurations operation.
 */
export type WebAppsListConfigurationsResponse = SiteConfigResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResourceCollection;
  };
};

/**
 * Contains response data for the updateApplicationSettings operation.
 */
export type WebAppsUpdateApplicationSettingsResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listApplicationSettings operation.
 */
export type WebAppsListApplicationSettingsResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the updateAuthSettings operation.
 */
export type WebAppsUpdateAuthSettingsResponse = SiteAuthSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteAuthSettings;
  };
};

/**
 * Contains response data for the getAuthSettings operation.
 */
export type WebAppsGetAuthSettingsResponse = SiteAuthSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteAuthSettings;
  };
};

/**
 * Contains response data for the updateAzureStorageAccounts operation.
 */
export type WebAppsUpdateAzureStorageAccountsResponse = AzureStoragePropertyDictionaryResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureStoragePropertyDictionaryResource;
  };
};

/**
 * Contains response data for the listAzureStorageAccounts operation.
 */
export type WebAppsListAzureStorageAccountsResponse = AzureStoragePropertyDictionaryResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureStoragePropertyDictionaryResource;
  };
};

/**
 * Contains response data for the updateBackupConfiguration operation.
 */
export type WebAppsUpdateBackupConfigurationResponse = BackupRequest & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupRequest;
  };
};

/**
 * Contains response data for the getBackupConfiguration operation.
 */
export type WebAppsGetBackupConfigurationResponse = BackupRequest & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupRequest;
  };
};

/**
 * Contains response data for the getAppSettingsKeyVaultReferences operation.
 */
export type WebAppsGetAppSettingsKeyVaultReferencesResponse = KeyVaultReferenceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyVaultReferenceCollection;
  };
};

/**
 * Contains response data for the getAppSettingKeyVaultReference operation.
 */
export type WebAppsGetAppSettingKeyVaultReferenceResponse = KeyVaultReferenceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyVaultReferenceResource;
  };
};

/**
 * Contains response data for the updateConnectionStrings operation.
 */
export type WebAppsUpdateConnectionStringsResponse = ConnectionStringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionStringDictionary;
  };
};

/**
 * Contains response data for the listConnectionStrings operation.
 */
export type WebAppsListConnectionStringsResponse = ConnectionStringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionStringDictionary;
  };
};

/**
 * Contains response data for the getDiagnosticLogsConfiguration operation.
 */
export type WebAppsGetDiagnosticLogsConfigurationResponse = SiteLogsConfig & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteLogsConfig;
  };
};

/**
 * Contains response data for the updateDiagnosticLogsConfig operation.
 */
export type WebAppsUpdateDiagnosticLogsConfigResponse = SiteLogsConfig & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteLogsConfig;
  };
};

/**
 * Contains response data for the updateMetadata operation.
 */
export type WebAppsUpdateMetadataResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listMetadata operation.
 */
export type WebAppsListMetadataResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listPublishingCredentials operation.
 */
export type WebAppsListPublishingCredentialsResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Contains response data for the updateSitePushSettings operation.
 */
export type WebAppsUpdateSitePushSettingsResponse = PushSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PushSettings;
  };
};

/**
 * Contains response data for the listSitePushSettings operation.
 */
export type WebAppsListSitePushSettingsResponse = PushSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PushSettings;
  };
};

/**
 * Contains response data for the listSlotConfigurationNames operation.
 */
export type WebAppsListSlotConfigurationNamesResponse = SlotConfigNamesResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlotConfigNamesResource;
  };
};

/**
 * Contains response data for the updateSlotConfigurationNames operation.
 */
export type WebAppsUpdateSlotConfigurationNamesResponse = SlotConfigNamesResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlotConfigNamesResource;
  };
};

/**
 * Contains response data for the getConfiguration operation.
 */
export type WebAppsGetConfigurationResponse = SiteConfigResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResource;
  };
};

/**
 * Contains response data for the createOrUpdateConfiguration operation.
 */
export type WebAppsCreateOrUpdateConfigurationResponse = SiteConfigResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResource;
  };
};

/**
 * Contains response data for the updateConfiguration operation.
 */
export type WebAppsUpdateConfigurationResponse = SiteConfigResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResource;
  };
};

/**
 * Contains response data for the listConfigurationSnapshotInfo operation.
 */
export type WebAppsListConfigurationSnapshotInfoResponse = SiteConfigurationSnapshotInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigurationSnapshotInfoCollection;
  };
};

/**
 * Contains response data for the getConfigurationSnapshot operation.
 */
export type WebAppsGetConfigurationSnapshotResponse = SiteConfigResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResource;
  };
};

/**
 * Contains response data for the getWebSiteContainerLogs operation.
 */
export type WebAppsGetWebSiteContainerLogsResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Contains response data for the getContainerLogsZip operation.
 */
export type WebAppsGetContainerLogsZipResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Contains response data for the listContinuousWebJobs operation.
 */
export type WebAppsListContinuousWebJobsResponse = ContinuousWebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContinuousWebJobCollection;
  };
};

/**
 * Contains response data for the getContinuousWebJob operation.
 */
export type WebAppsGetContinuousWebJobResponse = ContinuousWebJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContinuousWebJob;
  };
};

/**
 * Contains response data for the listDeployments operation.
 */
export type WebAppsListDeploymentsResponse = DeploymentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentCollection;
  };
};

/**
 * Contains response data for the getDeployment operation.
 */
export type WebAppsGetDeploymentResponse = Deployment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Deployment;
  };
};

/**
 * Contains response data for the createDeployment operation.
 */
export type WebAppsCreateDeploymentResponse = Deployment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Deployment;
  };
};

/**
 * Contains response data for the listDeploymentLog operation.
 */
export type WebAppsListDeploymentLogResponse = Deployment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Deployment;
  };
};

/**
 * Contains response data for the discoverBackup operation.
 */
export type WebAppsDiscoverBackupResponse = RestoreRequest & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestoreRequest;
  };
};

/**
 * Contains response data for the listDomainOwnershipIdentifiers operation.
 */
export type WebAppsListDomainOwnershipIdentifiersResponse = IdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentifierCollection;
  };
};

/**
 * Contains response data for the getDomainOwnershipIdentifier operation.
 */
export type WebAppsGetDomainOwnershipIdentifierResponse = Identifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Identifier;
  };
};

/**
 * Contains response data for the createOrUpdateDomainOwnershipIdentifier operation.
 */
export type WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse = Identifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Identifier;
  };
};

/**
 * Contains response data for the updateDomainOwnershipIdentifier operation.
 */
export type WebAppsUpdateDomainOwnershipIdentifierResponse = Identifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Identifier;
  };
};

/**
 * Contains response data for the getMSDeployStatus operation.
 */
export type WebAppsGetMSDeployStatusResponse = MSDeployStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployStatus;
  };
};

/**
 * Contains response data for the createMSDeployOperation operation.
 */
export type WebAppsCreateMSDeployOperationResponse = MSDeployStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployStatus;
  };
};

/**
 * Contains response data for the getMSDeployLog operation.
 */
export type WebAppsGetMSDeployLogResponse = MSDeployLog & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployLog;
  };
};

/**
 * Contains response data for the listFunctions operation.
 */
export type WebAppsListFunctionsResponse = FunctionEnvelopeCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionEnvelopeCollection;
  };
};

/**
 * Contains response data for the getFunctionsAdminToken operation.
 */
export type WebAppsGetFunctionsAdminTokenResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the getFunction operation.
 */
export type WebAppsGetFunctionResponse = FunctionEnvelope & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionEnvelope;
  };
};

/**
 * Contains response data for the createFunction operation.
 */
export type WebAppsCreateFunctionResponse = FunctionEnvelope & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionEnvelope;
  };
};

/**
 * Contains response data for the createOrUpdateFunctionSecret operation.
 */
export type WebAppsCreateOrUpdateFunctionSecretResponse = KeyInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyInfo;
  };
};

/**
 * Contains response data for the listFunctionKeys operation.
 */
export type WebAppsListFunctionKeysResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listFunctionSecrets operation.
 */
export type WebAppsListFunctionSecretsResponse = FunctionSecrets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionSecrets;
  };
};

/**
 * Contains response data for the listHostKeys operation.
 */
export type WebAppsListHostKeysResponse = HostKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostKeys;
  };
};

/**
 * Contains response data for the createOrUpdateHostSecret operation.
 */
export type WebAppsCreateOrUpdateHostSecretResponse = KeyInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyInfo;
  };
};

/**
 * Contains response data for the listHostNameBindings operation.
 */
export type WebAppsListHostNameBindingsResponse = HostNameBindingCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostNameBindingCollection;
  };
};

/**
 * Contains response data for the getHostNameBinding operation.
 */
export type WebAppsGetHostNameBindingResponse = HostNameBinding & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostNameBinding;
  };
};

/**
 * Contains response data for the createOrUpdateHostNameBinding operation.
 */
export type WebAppsCreateOrUpdateHostNameBindingResponse = HostNameBinding & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostNameBinding;
  };
};

/**
 * Contains response data for the getHybridConnection operation.
 */
export type WebAppsGetHybridConnectionResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the createOrUpdateHybridConnection operation.
 */
export type WebAppsCreateOrUpdateHybridConnectionResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the updateHybridConnection operation.
 */
export type WebAppsUpdateHybridConnectionResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the listHybridConnections operation.
 */
export type WebAppsListHybridConnectionsResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the listRelayServiceConnections operation.
 */
export type WebAppsListRelayServiceConnectionsResponse = RelayServiceConnectionEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayServiceConnectionEntity;
  };
};

/**
 * Contains response data for the getRelayServiceConnection operation.
 */
export type WebAppsGetRelayServiceConnectionResponse = RelayServiceConnectionEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayServiceConnectionEntity;
  };
};

/**
 * Contains response data for the createOrUpdateRelayServiceConnection operation.
 */
export type WebAppsCreateOrUpdateRelayServiceConnectionResponse = RelayServiceConnectionEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayServiceConnectionEntity;
  };
};

/**
 * Contains response data for the updateRelayServiceConnection operation.
 */
export type WebAppsUpdateRelayServiceConnectionResponse = RelayServiceConnectionEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayServiceConnectionEntity;
  };
};

/**
 * Contains response data for the listInstanceIdentifiers operation.
 */
export type WebAppsListInstanceIdentifiersResponse = WebAppInstanceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppInstanceCollection;
  };
};

/**
 * Contains response data for the getInstanceInfo operation.
 */
export type WebAppsGetInstanceInfoResponse = WebSiteInstanceStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebSiteInstanceStatus;
  };
};

/**
 * Contains response data for the getInstanceMsDeployStatus operation.
 */
export type WebAppsGetInstanceMsDeployStatusResponse = MSDeployStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployStatus;
  };
};

/**
 * Contains response data for the createInstanceMSDeployOperation operation.
 */
export type WebAppsCreateInstanceMSDeployOperationResponse = MSDeployStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployStatus;
  };
};

/**
 * Contains response data for the getInstanceMSDeployLog operation.
 */
export type WebAppsGetInstanceMSDeployLogResponse = MSDeployLog & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployLog;
  };
};

/**
 * Contains response data for the listInstanceProcesses operation.
 */
export type WebAppsListInstanceProcessesResponse = ProcessInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfoCollection;
  };
};

/**
 * Contains response data for the getInstanceProcess operation.
 */
export type WebAppsGetInstanceProcessResponse = ProcessInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfo;
  };
};

/**
 * Contains response data for the getInstanceProcessDump operation.
 */
export type WebAppsGetInstanceProcessDumpResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Contains response data for the listInstanceProcessModules operation.
 */
export type WebAppsListInstanceProcessModulesResponse = ProcessModuleInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfoCollection;
  };
};

/**
 * Contains response data for the getInstanceProcessModule operation.
 */
export type WebAppsGetInstanceProcessModuleResponse = ProcessModuleInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfo;
  };
};

/**
 * Contains response data for the listInstanceProcessThreads operation.
 */
export type WebAppsListInstanceProcessThreadsResponse = ProcessThreadInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessThreadInfoCollection;
  };
};

/**
 * Contains response data for the isCloneable operation.
 */
export type WebAppsIsCloneableResponse = SiteCloneability & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteCloneability;
  };
};

/**
 * Contains response data for the listSiteBackups operation.
 */
export type WebAppsListSiteBackupsResponse = BackupItemCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItemCollection;
  };
};

/**
 * Contains response data for the listSyncFunctionTriggers operation.
 */
export type WebAppsListSyncFunctionTriggersResponse = FunctionSecrets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionSecrets;
  };
};

/**
 * Contains response data for the migrateStorage operation.
 */
export type WebAppsMigrateStorageResponse = StorageMigrationResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageMigrationResponse;
  };
};

/**
 * Contains response data for the migrateMySql operation.
 */
export type WebAppsMigrateMySqlResponse = Operation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Operation;
  };
};

/**
 * Contains response data for the getMigrateMySqlStatus operation.
 */
export type WebAppsGetMigrateMySqlStatusResponse = MigrateMySqlStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MigrateMySqlStatus;
  };
};

/**
 * Contains response data for the getSwiftVirtualNetworkConnection operation.
 */
export type WebAppsGetSwiftVirtualNetworkConnectionResponse = SwiftVirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SwiftVirtualNetwork;
  };
};

/**
 * Contains response data for the createOrUpdateSwiftVirtualNetworkConnection operation.
 */
export type WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse = SwiftVirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SwiftVirtualNetwork;
  };
};

/**
 * Contains response data for the updateSwiftVirtualNetworkConnection operation.
 */
export type WebAppsUpdateSwiftVirtualNetworkConnectionResponse = SwiftVirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SwiftVirtualNetwork;
  };
};

/**
 * Contains response data for the listNetworkFeatures operation.
 */
export type WebAppsListNetworkFeaturesResponse = NetworkFeatures & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkFeatures;
  };
};

/**
 * Contains response data for the getNetworkTraceOperation operation.
 */
export type WebAppsGetNetworkTraceOperationResponse = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsStartWebSiteNetworkTraceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The duration to keep capturing in seconds.
   */
  durationInSeconds?: number;
  /**
   * The maximum frame length in bytes (Optional).
   */
  maxFrameLength?: number;
  /**
   * The Blob URL to store capture file.
   */
  sasUrl?: string;
}

/**
 * Contains response data for the startWebSiteNetworkTrace operation.
 */
export type WebAppsStartWebSiteNetworkTraceResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsStartWebSiteNetworkTraceOperationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The duration to keep capturing in seconds.
   */
  durationInSeconds?: number;
  /**
   * The maximum frame length in bytes (Optional).
   */
  maxFrameLength?: number;
  /**
   * The Blob URL to store capture file.
   */
  sasUrl?: string;
}

/**
 * Contains response data for the startWebSiteNetworkTraceOperation operation.
 */
export type WebAppsStartWebSiteNetworkTraceOperationResponse = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Contains response data for the getNetworkTraces operation.
 */
export type WebAppsGetNetworkTracesResponse = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Contains response data for the getNetworkTraceOperationV2 operation.
 */
export type WebAppsGetNetworkTraceOperationV2Response = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Contains response data for the getNetworkTracesV2 operation.
 */
export type WebAppsGetNetworkTracesV2Response = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListPerfMonCountersOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listPerfMonCounters operation.
 */
export type WebAppsListPerfMonCountersResponse = PerfMonCounterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PerfMonCounterCollection;
  };
};

/**
 * Contains response data for the getSitePhpErrorLogFlag operation.
 */
export type WebAppsGetSitePhpErrorLogFlagResponse = SitePhpErrorLogFlag & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SitePhpErrorLogFlag;
  };
};

/**
 * Contains response data for the listPremierAddOns operation.
 */
export type WebAppsListPremierAddOnsResponse = PremierAddOn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOn;
  };
};

/**
 * Contains response data for the getPremierAddOn operation.
 */
export type WebAppsGetPremierAddOnResponse = PremierAddOn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOn;
  };
};

/**
 * Contains response data for the addPremierAddOn operation.
 */
export type WebAppsAddPremierAddOnResponse = PremierAddOn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOn;
  };
};

/**
 * Contains response data for the updatePremierAddOn operation.
 */
export type WebAppsUpdatePremierAddOnResponse = PremierAddOn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOn;
  };
};

/**
 * Contains response data for the getPrivateAccess operation.
 */
export type WebAppsGetPrivateAccessResponse = PrivateAccess & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateAccess;
  };
};

/**
 * Contains response data for the putPrivateAccessVnet operation.
 */
export type WebAppsPutPrivateAccessVnetResponse = PrivateAccess & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateAccess;
  };
};

/**
 * Contains response data for the listProcesses operation.
 */
export type WebAppsListProcessesResponse = ProcessInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfoCollection;
  };
};

/**
 * Contains response data for the getProcess operation.
 */
export type WebAppsGetProcessResponse = ProcessInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfo;
  };
};

/**
 * Contains response data for the getProcessDump operation.
 */
export type WebAppsGetProcessDumpResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Contains response data for the listProcessModules operation.
 */
export type WebAppsListProcessModulesResponse = ProcessModuleInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfoCollection;
  };
};

/**
 * Contains response data for the getProcessModule operation.
 */
export type WebAppsGetProcessModuleResponse = ProcessModuleInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfo;
  };
};

/**
 * Contains response data for the listProcessThreads operation.
 */
export type WebAppsListProcessThreadsResponse = ProcessThreadInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessThreadInfoCollection;
  };
};

/**
 * Contains response data for the listPublicCertificates operation.
 */
export type WebAppsListPublicCertificatesResponse = PublicCertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicCertificateCollection;
  };
};

/**
 * Contains response data for the getPublicCertificate operation.
 */
export type WebAppsGetPublicCertificateResponse = PublicCertificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicCertificate;
  };
};

/**
 * Contains response data for the createOrUpdatePublicCertificate operation.
 */
export type WebAppsCreateOrUpdatePublicCertificateResponse = PublicCertificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicCertificate;
  };
};

/**
 * Contains response data for the listPublishingProfileXmlWithSecrets operation.
 */
export type WebAppsListPublishingProfileXmlWithSecretsResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Optional parameters.
 */
export interface WebAppsRestartOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
   */
  softRestart?: boolean;
  /**
   * Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
   */
  synchronous?: boolean;
}

/**
 * Contains response data for the listSiteExtensions operation.
 */
export type WebAppsListSiteExtensionsResponse = SiteExtensionInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteExtensionInfoCollection;
  };
};

/**
 * Contains response data for the getSiteExtension operation.
 */
export type WebAppsGetSiteExtensionResponse = SiteExtensionInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteExtensionInfo;
  };
};

/**
 * Contains response data for the installSiteExtension operation.
 */
export type WebAppsInstallSiteExtensionResponse = SiteExtensionInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteExtensionInfo;
  };
};

/**
 * Contains response data for the listSlots operation.
 */
export type WebAppsListSlotsResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the getSlot operation.
 */
export type WebAppsGetSlotResponse = Site & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Site;
  };
};

/**
 * Contains response data for the createOrUpdateSlot operation.
 */
export type WebAppsCreateOrUpdateSlotResponse = Site & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Site;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsDeleteSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * If true, web app metrics are also deleted.
   */
  deleteMetrics?: boolean;
  /**
   * Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
   */
  deleteEmptyServerFarm?: boolean;
}

/**
 * Contains response data for the updateSlot operation.
 */
export type WebAppsUpdateSlotResponse = Site & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Site;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsAnalyzeCustomHostnameSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Custom hostname.
   */
  hostName?: string;
}

/**
 * Contains response data for the analyzeCustomHostnameSlot operation.
 */
export type WebAppsAnalyzeCustomHostnameSlotResponse = CustomHostnameAnalysisResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CustomHostnameAnalysisResult;
  };
};

/**
 * Contains response data for the backupSlot operation.
 */
export type WebAppsBackupSlotResponse = BackupItem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItem;
  };
};

/**
 * Contains response data for the listBackupsSlot operation.
 */
export type WebAppsListBackupsSlotResponse = BackupItemCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItemCollection;
  };
};

/**
 * Contains response data for the getBackupStatusSlot operation.
 */
export type WebAppsGetBackupStatusSlotResponse = BackupItem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItem;
  };
};

/**
 * Contains response data for the listBackupStatusSecretsSlot operation.
 */
export type WebAppsListBackupStatusSecretsSlotResponse = BackupItem & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItem;
  };
};

/**
 * Contains response data for the listConfigurationsSlot operation.
 */
export type WebAppsListConfigurationsSlotResponse = SiteConfigResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResourceCollection;
  };
};

/**
 * Contains response data for the updateApplicationSettingsSlot operation.
 */
export type WebAppsUpdateApplicationSettingsSlotResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listApplicationSettingsSlot operation.
 */
export type WebAppsListApplicationSettingsSlotResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the updateAuthSettingsSlot operation.
 */
export type WebAppsUpdateAuthSettingsSlotResponse = SiteAuthSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteAuthSettings;
  };
};

/**
 * Contains response data for the getAuthSettingsSlot operation.
 */
export type WebAppsGetAuthSettingsSlotResponse = SiteAuthSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteAuthSettings;
  };
};

/**
 * Contains response data for the updateAzureStorageAccountsSlot operation.
 */
export type WebAppsUpdateAzureStorageAccountsSlotResponse = AzureStoragePropertyDictionaryResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureStoragePropertyDictionaryResource;
  };
};

/**
 * Contains response data for the listAzureStorageAccountsSlot operation.
 */
export type WebAppsListAzureStorageAccountsSlotResponse = AzureStoragePropertyDictionaryResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AzureStoragePropertyDictionaryResource;
  };
};

/**
 * Contains response data for the updateBackupConfigurationSlot operation.
 */
export type WebAppsUpdateBackupConfigurationSlotResponse = BackupRequest & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupRequest;
  };
};

/**
 * Contains response data for the getBackupConfigurationSlot operation.
 */
export type WebAppsGetBackupConfigurationSlotResponse = BackupRequest & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupRequest;
  };
};

/**
 * Contains response data for the updateConnectionStringsSlot operation.
 */
export type WebAppsUpdateConnectionStringsSlotResponse = ConnectionStringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionStringDictionary;
  };
};

/**
 * Contains response data for the listConnectionStringsSlot operation.
 */
export type WebAppsListConnectionStringsSlotResponse = ConnectionStringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ConnectionStringDictionary;
  };
};

/**
 * Contains response data for the getDiagnosticLogsConfigurationSlot operation.
 */
export type WebAppsGetDiagnosticLogsConfigurationSlotResponse = SiteLogsConfig & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteLogsConfig;
  };
};

/**
 * Contains response data for the updateDiagnosticLogsConfigSlot operation.
 */
export type WebAppsUpdateDiagnosticLogsConfigSlotResponse = SiteLogsConfig & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteLogsConfig;
  };
};

/**
 * Contains response data for the updateMetadataSlot operation.
 */
export type WebAppsUpdateMetadataSlotResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listMetadataSlot operation.
 */
export type WebAppsListMetadataSlotResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listPublishingCredentialsSlot operation.
 */
export type WebAppsListPublishingCredentialsSlotResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Contains response data for the updateSitePushSettingsSlot operation.
 */
export type WebAppsUpdateSitePushSettingsSlotResponse = PushSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PushSettings;
  };
};

/**
 * Contains response data for the listSitePushSettingsSlot operation.
 */
export type WebAppsListSitePushSettingsSlotResponse = PushSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PushSettings;
  };
};

/**
 * Contains response data for the getConfigurationSlot operation.
 */
export type WebAppsGetConfigurationSlotResponse = SiteConfigResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResource;
  };
};

/**
 * Contains response data for the createOrUpdateConfigurationSlot operation.
 */
export type WebAppsCreateOrUpdateConfigurationSlotResponse = SiteConfigResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResource;
  };
};

/**
 * Contains response data for the updateConfigurationSlot operation.
 */
export type WebAppsUpdateConfigurationSlotResponse = SiteConfigResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResource;
  };
};

/**
 * Contains response data for the listConfigurationSnapshotInfoSlot operation.
 */
export type WebAppsListConfigurationSnapshotInfoSlotResponse = SiteConfigurationSnapshotInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigurationSnapshotInfoCollection;
  };
};

/**
 * Contains response data for the getConfigurationSnapshotSlot operation.
 */
export type WebAppsGetConfigurationSnapshotSlotResponse = SiteConfigResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResource;
  };
};

/**
 * Contains response data for the getWebSiteContainerLogsSlot operation.
 */
export type WebAppsGetWebSiteContainerLogsSlotResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Contains response data for the getContainerLogsZipSlot operation.
 */
export type WebAppsGetContainerLogsZipSlotResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Contains response data for the listContinuousWebJobsSlot operation.
 */
export type WebAppsListContinuousWebJobsSlotResponse = ContinuousWebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContinuousWebJobCollection;
  };
};

/**
 * Contains response data for the getContinuousWebJobSlot operation.
 */
export type WebAppsGetContinuousWebJobSlotResponse = ContinuousWebJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContinuousWebJob;
  };
};

/**
 * Contains response data for the listDeploymentsSlot operation.
 */
export type WebAppsListDeploymentsSlotResponse = DeploymentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentCollection;
  };
};

/**
 * Contains response data for the getDeploymentSlot operation.
 */
export type WebAppsGetDeploymentSlotResponse = Deployment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Deployment;
  };
};

/**
 * Contains response data for the createDeploymentSlot operation.
 */
export type WebAppsCreateDeploymentSlotResponse = Deployment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Deployment;
  };
};

/**
 * Contains response data for the listDeploymentLogSlot operation.
 */
export type WebAppsListDeploymentLogSlotResponse = Deployment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Deployment;
  };
};

/**
 * Contains response data for the discoverBackupSlot operation.
 */
export type WebAppsDiscoverBackupSlotResponse = RestoreRequest & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RestoreRequest;
  };
};

/**
 * Contains response data for the listDomainOwnershipIdentifiersSlot operation.
 */
export type WebAppsListDomainOwnershipIdentifiersSlotResponse = IdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentifierCollection;
  };
};

/**
 * Contains response data for the getDomainOwnershipIdentifierSlot operation.
 */
export type WebAppsGetDomainOwnershipIdentifierSlotResponse = Identifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Identifier;
  };
};

/**
 * Contains response data for the createOrUpdateDomainOwnershipIdentifierSlot operation.
 */
export type WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse = Identifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Identifier;
  };
};

/**
 * Contains response data for the updateDomainOwnershipIdentifierSlot operation.
 */
export type WebAppsUpdateDomainOwnershipIdentifierSlotResponse = Identifier & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Identifier;
  };
};

/**
 * Contains response data for the getMSDeployStatusSlot operation.
 */
export type WebAppsGetMSDeployStatusSlotResponse = MSDeployStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployStatus;
  };
};

/**
 * Contains response data for the createMSDeployOperationSlot operation.
 */
export type WebAppsCreateMSDeployOperationSlotResponse = MSDeployStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployStatus;
  };
};

/**
 * Contains response data for the getMSDeployLogSlot operation.
 */
export type WebAppsGetMSDeployLogSlotResponse = MSDeployLog & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployLog;
  };
};

/**
 * Contains response data for the listInstanceFunctionsSlot operation.
 */
export type WebAppsListInstanceFunctionsSlotResponse = FunctionEnvelopeCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionEnvelopeCollection;
  };
};

/**
 * Contains response data for the getFunctionsAdminTokenSlot operation.
 */
export type WebAppsGetFunctionsAdminTokenSlotResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Contains response data for the getInstanceFunctionSlot operation.
 */
export type WebAppsGetInstanceFunctionSlotResponse = FunctionEnvelope & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionEnvelope;
  };
};

/**
 * Contains response data for the createInstanceFunctionSlot operation.
 */
export type WebAppsCreateInstanceFunctionSlotResponse = FunctionEnvelope & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionEnvelope;
  };
};

/**
 * Contains response data for the createOrUpdateFunctionSecretSlot operation.
 */
export type WebAppsCreateOrUpdateFunctionSecretSlotResponse = KeyInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyInfo;
  };
};

/**
 * Contains response data for the listFunctionKeysSlot operation.
 */
export type WebAppsListFunctionKeysSlotResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listFunctionSecretsSlot operation.
 */
export type WebAppsListFunctionSecretsSlotResponse = FunctionSecrets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionSecrets;
  };
};

/**
 * Contains response data for the listHostKeysSlot operation.
 */
export type WebAppsListHostKeysSlotResponse = HostKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostKeys;
  };
};

/**
 * Contains response data for the createOrUpdateHostSecretSlot operation.
 */
export type WebAppsCreateOrUpdateHostSecretSlotResponse = KeyInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyInfo;
  };
};

/**
 * Contains response data for the listHostNameBindingsSlot operation.
 */
export type WebAppsListHostNameBindingsSlotResponse = HostNameBindingCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostNameBindingCollection;
  };
};

/**
 * Contains response data for the getHostNameBindingSlot operation.
 */
export type WebAppsGetHostNameBindingSlotResponse = HostNameBinding & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostNameBinding;
  };
};

/**
 * Contains response data for the createOrUpdateHostNameBindingSlot operation.
 */
export type WebAppsCreateOrUpdateHostNameBindingSlotResponse = HostNameBinding & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostNameBinding;
  };
};

/**
 * Contains response data for the getHybridConnectionSlot operation.
 */
export type WebAppsGetHybridConnectionSlotResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the createOrUpdateHybridConnectionSlot operation.
 */
export type WebAppsCreateOrUpdateHybridConnectionSlotResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the updateHybridConnectionSlot operation.
 */
export type WebAppsUpdateHybridConnectionSlotResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the listHybridConnectionsSlot operation.
 */
export type WebAppsListHybridConnectionsSlotResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the listRelayServiceConnectionsSlot operation.
 */
export type WebAppsListRelayServiceConnectionsSlotResponse = RelayServiceConnectionEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayServiceConnectionEntity;
  };
};

/**
 * Contains response data for the getRelayServiceConnectionSlot operation.
 */
export type WebAppsGetRelayServiceConnectionSlotResponse = RelayServiceConnectionEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayServiceConnectionEntity;
  };
};

/**
 * Contains response data for the createOrUpdateRelayServiceConnectionSlot operation.
 */
export type WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse = RelayServiceConnectionEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayServiceConnectionEntity;
  };
};

/**
 * Contains response data for the updateRelayServiceConnectionSlot operation.
 */
export type WebAppsUpdateRelayServiceConnectionSlotResponse = RelayServiceConnectionEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelayServiceConnectionEntity;
  };
};

/**
 * Contains response data for the listInstanceIdentifiersSlot operation.
 */
export type WebAppsListInstanceIdentifiersSlotResponse = WebAppInstanceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppInstanceCollection;
  };
};

/**
 * Contains response data for the getInstanceInfoSlot operation.
 */
export type WebAppsGetInstanceInfoSlotResponse = WebSiteInstanceStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebSiteInstanceStatus;
  };
};

/**
 * Contains response data for the getInstanceMsDeployStatusSlot operation.
 */
export type WebAppsGetInstanceMsDeployStatusSlotResponse = MSDeployStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployStatus;
  };
};

/**
 * Contains response data for the createInstanceMSDeployOperationSlot operation.
 */
export type WebAppsCreateInstanceMSDeployOperationSlotResponse = MSDeployStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployStatus;
  };
};

/**
 * Contains response data for the getInstanceMSDeployLogSlot operation.
 */
export type WebAppsGetInstanceMSDeployLogSlotResponse = MSDeployLog & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MSDeployLog;
  };
};

/**
 * Contains response data for the listInstanceProcessesSlot operation.
 */
export type WebAppsListInstanceProcessesSlotResponse = ProcessInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfoCollection;
  };
};

/**
 * Contains response data for the getInstanceProcessSlot operation.
 */
export type WebAppsGetInstanceProcessSlotResponse = ProcessInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfo;
  };
};

/**
 * Contains response data for the getInstanceProcessDumpSlot operation.
 */
export type WebAppsGetInstanceProcessDumpSlotResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Contains response data for the listInstanceProcessModulesSlot operation.
 */
export type WebAppsListInstanceProcessModulesSlotResponse = ProcessModuleInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfoCollection;
  };
};

/**
 * Contains response data for the getInstanceProcessModuleSlot operation.
 */
export type WebAppsGetInstanceProcessModuleSlotResponse = ProcessModuleInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfo;
  };
};

/**
 * Contains response data for the listInstanceProcessThreadsSlot operation.
 */
export type WebAppsListInstanceProcessThreadsSlotResponse = ProcessThreadInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessThreadInfoCollection;
  };
};

/**
 * Contains response data for the isCloneableSlot operation.
 */
export type WebAppsIsCloneableSlotResponse = SiteCloneability & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteCloneability;
  };
};

/**
 * Contains response data for the listSiteBackupsSlot operation.
 */
export type WebAppsListSiteBackupsSlotResponse = BackupItemCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItemCollection;
  };
};

/**
 * Contains response data for the listSyncFunctionTriggersSlot operation.
 */
export type WebAppsListSyncFunctionTriggersSlotResponse = FunctionSecrets & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionSecrets;
  };
};

/**
 * Contains response data for the getMigrateMySqlStatusSlot operation.
 */
export type WebAppsGetMigrateMySqlStatusSlotResponse = MigrateMySqlStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MigrateMySqlStatus;
  };
};

/**
 * Contains response data for the getSwiftVirtualNetworkConnectionSlot operation.
 */
export type WebAppsGetSwiftVirtualNetworkConnectionSlotResponse = SwiftVirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SwiftVirtualNetwork;
  };
};

/**
 * Contains response data for the createOrUpdateSwiftVirtualNetworkConnectionSlot operation.
 */
export type WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse = SwiftVirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SwiftVirtualNetwork;
  };
};

/**
 * Contains response data for the updateSwiftVirtualNetworkConnectionSlot operation.
 */
export type WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse = SwiftVirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SwiftVirtualNetwork;
  };
};

/**
 * Contains response data for the listNetworkFeaturesSlot operation.
 */
export type WebAppsListNetworkFeaturesSlotResponse = NetworkFeatures & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkFeatures;
  };
};

/**
 * Contains response data for the getNetworkTraceOperationSlot operation.
 */
export type WebAppsGetNetworkTraceOperationSlotResponse = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsStartWebSiteNetworkTraceSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The duration to keep capturing in seconds.
   */
  durationInSeconds?: number;
  /**
   * The maximum frame length in bytes (Optional).
   */
  maxFrameLength?: number;
  /**
   * The Blob URL to store capture file.
   */
  sasUrl?: string;
}

/**
 * Contains response data for the startWebSiteNetworkTraceSlot operation.
 */
export type WebAppsStartWebSiteNetworkTraceSlotResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsStartWebSiteNetworkTraceOperationSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The duration to keep capturing in seconds.
   */
  durationInSeconds?: number;
  /**
   * The maximum frame length in bytes (Optional).
   */
  maxFrameLength?: number;
  /**
   * The Blob URL to store capture file.
   */
  sasUrl?: string;
}

/**
 * Contains response data for the startWebSiteNetworkTraceOperationSlot operation.
 */
export type WebAppsStartWebSiteNetworkTraceOperationSlotResponse = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Contains response data for the getNetworkTracesSlot operation.
 */
export type WebAppsGetNetworkTracesSlotResponse = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Contains response data for the getNetworkTraceOperationSlotV2 operation.
 */
export type WebAppsGetNetworkTraceOperationSlotV2Response = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Contains response data for the getNetworkTracesSlotV2 operation.
 */
export type WebAppsGetNetworkTracesSlotV2Response = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListPerfMonCountersSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listPerfMonCountersSlot operation.
 */
export type WebAppsListPerfMonCountersSlotResponse = PerfMonCounterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PerfMonCounterCollection;
  };
};

/**
 * Contains response data for the getSitePhpErrorLogFlagSlot operation.
 */
export type WebAppsGetSitePhpErrorLogFlagSlotResponse = SitePhpErrorLogFlag & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SitePhpErrorLogFlag;
  };
};

/**
 * Contains response data for the listPremierAddOnsSlot operation.
 */
export type WebAppsListPremierAddOnsSlotResponse = PremierAddOn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOn;
  };
};

/**
 * Contains response data for the getPremierAddOnSlot operation.
 */
export type WebAppsGetPremierAddOnSlotResponse = PremierAddOn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOn;
  };
};

/**
 * Contains response data for the addPremierAddOnSlot operation.
 */
export type WebAppsAddPremierAddOnSlotResponse = PremierAddOn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOn;
  };
};

/**
 * Contains response data for the updatePremierAddOnSlot operation.
 */
export type WebAppsUpdatePremierAddOnSlotResponse = PremierAddOn & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PremierAddOn;
  };
};

/**
 * Contains response data for the getPrivateAccessSlot operation.
 */
export type WebAppsGetPrivateAccessSlotResponse = PrivateAccess & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateAccess;
  };
};

/**
 * Contains response data for the putPrivateAccessVnetSlot operation.
 */
export type WebAppsPutPrivateAccessVnetSlotResponse = PrivateAccess & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateAccess;
  };
};

/**
 * Contains response data for the getPrivateEndpointConnection operation.
 */
export type WebAppsGetPrivateEndpointConnectionResponse = PrivateEndpointConnectionResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionResource;
  };
};

/**
 * Contains response data for the approveOrRejectPrivateEndpointConnection operation.
 */
export type WebAppsApproveOrRejectPrivateEndpointConnectionResponse = PrivateEndpointConnectionResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionResource;
  };
};

/**
 * Contains response data for the deletePrivateEndpointConnection operation.
 */
export type WebAppsDeletePrivateEndpointConnectionResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the getPrivateLinkResources operation.
 */
export type WebAppsGetPrivateLinkResourcesResponse = PrivateLinkResourcesWrapper & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResourcesWrapper;
  };
};

/**
 * Contains response data for the listProcessesSlot operation.
 */
export type WebAppsListProcessesSlotResponse = ProcessInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfoCollection;
  };
};

/**
 * Contains response data for the getProcessSlot operation.
 */
export type WebAppsGetProcessSlotResponse = ProcessInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfo;
  };
};

/**
 * Contains response data for the getProcessDumpSlot operation.
 */
export type WebAppsGetProcessDumpSlotResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Contains response data for the listProcessModulesSlot operation.
 */
export type WebAppsListProcessModulesSlotResponse = ProcessModuleInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfoCollection;
  };
};

/**
 * Contains response data for the getProcessModuleSlot operation.
 */
export type WebAppsGetProcessModuleSlotResponse = ProcessModuleInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfo;
  };
};

/**
 * Contains response data for the listProcessThreadsSlot operation.
 */
export type WebAppsListProcessThreadsSlotResponse = ProcessThreadInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessThreadInfoCollection;
  };
};

/**
 * Contains response data for the listPublicCertificatesSlot operation.
 */
export type WebAppsListPublicCertificatesSlotResponse = PublicCertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicCertificateCollection;
  };
};

/**
 * Contains response data for the getPublicCertificateSlot operation.
 */
export type WebAppsGetPublicCertificateSlotResponse = PublicCertificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicCertificate;
  };
};

/**
 * Contains response data for the createOrUpdatePublicCertificateSlot operation.
 */
export type WebAppsCreateOrUpdatePublicCertificateSlotResponse = PublicCertificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicCertificate;
  };
};

/**
 * Contains response data for the listPublishingProfileXmlWithSecretsSlot operation.
 */
export type WebAppsListPublishingProfileXmlWithSecretsSlotResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse;
};

/**
 * Optional parameters.
 */
export interface WebAppsRestartSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
   */
  softRestart?: boolean;
  /**
   * Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
   */
  synchronous?: boolean;
}

/**
 * Contains response data for the listSiteExtensionsSlot operation.
 */
export type WebAppsListSiteExtensionsSlotResponse = SiteExtensionInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteExtensionInfoCollection;
  };
};

/**
 * Contains response data for the getSiteExtensionSlot operation.
 */
export type WebAppsGetSiteExtensionSlotResponse = SiteExtensionInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteExtensionInfo;
  };
};

/**
 * Contains response data for the installSiteExtensionSlot operation.
 */
export type WebAppsInstallSiteExtensionSlotResponse = SiteExtensionInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteExtensionInfo;
  };
};

/**
 * Contains response data for the listSlotDifferencesSlot operation.
 */
export type WebAppsListSlotDifferencesSlotResponse = SlotDifferenceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlotDifferenceCollection;
  };
};

/**
 * Contains response data for the listSnapshotsSlot operation.
 */
export type WebAppsListSnapshotsSlotResponse = SnapshotCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotCollection;
  };
};

/**
 * Contains response data for the listSnapshotsFromDRSecondarySlot operation.
 */
export type WebAppsListSnapshotsFromDRSecondarySlotResponse = SnapshotCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotCollection;
  };
};

/**
 * Contains response data for the getSourceControlSlot operation.
 */
export type WebAppsGetSourceControlSlotResponse = SiteSourceControl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteSourceControl;
  };
};

/**
 * Contains response data for the createOrUpdateSourceControlSlot operation.
 */
export type WebAppsCreateOrUpdateSourceControlSlotResponse = SiteSourceControl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteSourceControl;
  };
};

/**
 * Contains response data for the updateSourceControlSlot operation.
 */
export type WebAppsUpdateSourceControlSlotResponse = SiteSourceControl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteSourceControl;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsStartNetworkTraceSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The duration to keep capturing in seconds.
   */
  durationInSeconds?: number;
  /**
   * The maximum frame length in bytes (Optional).
   */
  maxFrameLength?: number;
  /**
   * The Blob URL to store capture file.
   */
  sasUrl?: string;
}

/**
 * Contains response data for the startNetworkTraceSlot operation.
 */
export type WebAppsStartNetworkTraceSlotResponse = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Contains response data for the listTriggeredWebJobsSlot operation.
 */
export type WebAppsListTriggeredWebJobsSlotResponse = TriggeredWebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredWebJobCollection;
  };
};

/**
 * Contains response data for the getTriggeredWebJobSlot operation.
 */
export type WebAppsGetTriggeredWebJobSlotResponse = TriggeredWebJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredWebJob;
  };
};

/**
 * Contains response data for the listTriggeredWebJobHistorySlot operation.
 */
export type WebAppsListTriggeredWebJobHistorySlotResponse = TriggeredJobHistoryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredJobHistoryCollection;
  };
};

/**
 * Contains response data for the getTriggeredWebJobHistorySlot operation.
 */
export type WebAppsGetTriggeredWebJobHistorySlotResponse = TriggeredJobHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredJobHistory;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListUsagesSlotOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listUsagesSlot operation.
 */
export type WebAppsListUsagesSlotResponse = CsmUsageQuotaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmUsageQuotaCollection;
  };
};

/**
 * Contains response data for the listVnetConnectionsSlot operation.
 */
export type WebAppsListVnetConnectionsSlotResponse = VnetInfo[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo[];
  };
};

/**
 * Contains response data for the getVnetConnectionSlot operation.
 */
export type WebAppsGetVnetConnectionSlotResponse = VnetInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo;
  };
};

/**
 * Contains response data for the createOrUpdateVnetConnectionSlot operation.
 */
export type WebAppsCreateOrUpdateVnetConnectionSlotResponse = VnetInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo;
  };
};

/**
 * Contains response data for the updateVnetConnectionSlot operation.
 */
export type WebAppsUpdateVnetConnectionSlotResponse = VnetInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo;
  };
};

/**
 * Contains response data for the getVnetConnectionGatewaySlot operation.
 */
export type WebAppsGetVnetConnectionGatewaySlotResponse = VnetGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetGateway;
  };
};

/**
 * Contains response data for the createOrUpdateVnetConnectionGatewaySlot operation.
 */
export type WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse = VnetGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetGateway;
  };
};

/**
 * Contains response data for the updateVnetConnectionGatewaySlot operation.
 */
export type WebAppsUpdateVnetConnectionGatewaySlotResponse = VnetGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetGateway;
  };
};

/**
 * Contains response data for the listWebJobsSlot operation.
 */
export type WebAppsListWebJobsSlotResponse = WebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebJobCollection;
  };
};

/**
 * Contains response data for the getWebJobSlot operation.
 */
export type WebAppsGetWebJobSlotResponse = WebJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebJob;
  };
};

/**
 * Contains response data for the listSlotDifferencesFromProduction operation.
 */
export type WebAppsListSlotDifferencesFromProductionResponse = SlotDifferenceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlotDifferenceCollection;
  };
};

/**
 * Contains response data for the listSnapshots operation.
 */
export type WebAppsListSnapshotsResponse = SnapshotCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotCollection;
  };
};

/**
 * Contains response data for the listSnapshotsFromDRSecondary operation.
 */
export type WebAppsListSnapshotsFromDRSecondaryResponse = SnapshotCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotCollection;
  };
};

/**
 * Contains response data for the getSourceControl operation.
 */
export type WebAppsGetSourceControlResponse = SiteSourceControl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteSourceControl;
  };
};

/**
 * Contains response data for the createOrUpdateSourceControl operation.
 */
export type WebAppsCreateOrUpdateSourceControlResponse = SiteSourceControl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteSourceControl;
  };
};

/**
 * Contains response data for the updateSourceControl operation.
 */
export type WebAppsUpdateSourceControlResponse = SiteSourceControl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteSourceControl;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsStartNetworkTraceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The duration to keep capturing in seconds.
   */
  durationInSeconds?: number;
  /**
   * The maximum frame length in bytes (Optional).
   */
  maxFrameLength?: number;
  /**
   * The Blob URL to store capture file.
   */
  sasUrl?: string;
}

/**
 * Contains response data for the startNetworkTrace operation.
 */
export type WebAppsStartNetworkTraceResponse = NetworkTrace[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkTrace[];
  };
};

/**
 * Contains response data for the listTriggeredWebJobs operation.
 */
export type WebAppsListTriggeredWebJobsResponse = TriggeredWebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredWebJobCollection;
  };
};

/**
 * Contains response data for the getTriggeredWebJob operation.
 */
export type WebAppsGetTriggeredWebJobResponse = TriggeredWebJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredWebJob;
  };
};

/**
 * Contains response data for the listTriggeredWebJobHistory operation.
 */
export type WebAppsListTriggeredWebJobHistoryResponse = TriggeredJobHistoryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredJobHistoryCollection;
  };
};

/**
 * Contains response data for the getTriggeredWebJobHistory operation.
 */
export type WebAppsGetTriggeredWebJobHistoryResponse = TriggeredJobHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredJobHistory;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListUsagesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listUsages operation.
 */
export type WebAppsListUsagesResponse = CsmUsageQuotaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmUsageQuotaCollection;
  };
};

/**
 * Contains response data for the listVnetConnections operation.
 */
export type WebAppsListVnetConnectionsResponse = VnetInfo[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo[];
  };
};

/**
 * Contains response data for the getVnetConnection operation.
 */
export type WebAppsGetVnetConnectionResponse = VnetInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo;
  };
};

/**
 * Contains response data for the createOrUpdateVnetConnection operation.
 */
export type WebAppsCreateOrUpdateVnetConnectionResponse = VnetInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo;
  };
};

/**
 * Contains response data for the updateVnetConnection operation.
 */
export type WebAppsUpdateVnetConnectionResponse = VnetInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo;
  };
};

/**
 * Contains response data for the getVnetConnectionGateway operation.
 */
export type WebAppsGetVnetConnectionGatewayResponse = VnetGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetGateway;
  };
};

/**
 * Contains response data for the createOrUpdateVnetConnectionGateway operation.
 */
export type WebAppsCreateOrUpdateVnetConnectionGatewayResponse = VnetGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetGateway;
  };
};

/**
 * Contains response data for the updateVnetConnectionGateway operation.
 */
export type WebAppsUpdateVnetConnectionGatewayResponse = VnetGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetGateway;
  };
};

/**
 * Contains response data for the listWebJobs operation.
 */
export type WebAppsListWebJobsResponse = WebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebJobCollection;
  };
};

/**
 * Contains response data for the getWebJob operation.
 */
export type WebAppsGetWebJobResponse = WebJob & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebJob;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type WebAppsListNextResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
   */
  includeSlots?: boolean;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type WebAppsListByResourceGroupNextResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the listBackupsNext operation.
 */
export type WebAppsListBackupsNextResponse = BackupItemCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItemCollection;
  };
};

/**
 * Contains response data for the listConfigurationsNext operation.
 */
export type WebAppsListConfigurationsNextResponse = SiteConfigResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResourceCollection;
  };
};

/**
 * Contains response data for the listConfigurationSnapshotInfoNext operation.
 */
export type WebAppsListConfigurationSnapshotInfoNextResponse = SiteConfigurationSnapshotInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigurationSnapshotInfoCollection;
  };
};

/**
 * Contains response data for the listContinuousWebJobsNext operation.
 */
export type WebAppsListContinuousWebJobsNextResponse = ContinuousWebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContinuousWebJobCollection;
  };
};

/**
 * Contains response data for the listDeploymentsNext operation.
 */
export type WebAppsListDeploymentsNextResponse = DeploymentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentCollection;
  };
};

/**
 * Contains response data for the listDomainOwnershipIdentifiersNext operation.
 */
export type WebAppsListDomainOwnershipIdentifiersNextResponse = IdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentifierCollection;
  };
};

/**
 * Contains response data for the listFunctionsNext operation.
 */
export type WebAppsListFunctionsNextResponse = FunctionEnvelopeCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionEnvelopeCollection;
  };
};

/**
 * Contains response data for the listHostNameBindingsNext operation.
 */
export type WebAppsListHostNameBindingsNextResponse = HostNameBindingCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostNameBindingCollection;
  };
};

/**
 * Contains response data for the listInstanceIdentifiersNext operation.
 */
export type WebAppsListInstanceIdentifiersNextResponse = WebAppInstanceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppInstanceCollection;
  };
};

/**
 * Contains response data for the listInstanceProcessesNext operation.
 */
export type WebAppsListInstanceProcessesNextResponse = ProcessInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfoCollection;
  };
};

/**
 * Contains response data for the listInstanceProcessModulesNext operation.
 */
export type WebAppsListInstanceProcessModulesNextResponse = ProcessModuleInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfoCollection;
  };
};

/**
 * Contains response data for the listInstanceProcessThreadsNext operation.
 */
export type WebAppsListInstanceProcessThreadsNextResponse = ProcessThreadInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessThreadInfoCollection;
  };
};

/**
 * Contains response data for the listSiteBackupsNext operation.
 */
export type WebAppsListSiteBackupsNextResponse = BackupItemCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItemCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListPerfMonCountersNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listPerfMonCountersNext operation.
 */
export type WebAppsListPerfMonCountersNextResponse = PerfMonCounterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PerfMonCounterCollection;
  };
};

/**
 * Contains response data for the listProcessesNext operation.
 */
export type WebAppsListProcessesNextResponse = ProcessInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfoCollection;
  };
};

/**
 * Contains response data for the listProcessModulesNext operation.
 */
export type WebAppsListProcessModulesNextResponse = ProcessModuleInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfoCollection;
  };
};

/**
 * Contains response data for the listProcessThreadsNext operation.
 */
export type WebAppsListProcessThreadsNextResponse = ProcessThreadInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessThreadInfoCollection;
  };
};

/**
 * Contains response data for the listPublicCertificatesNext operation.
 */
export type WebAppsListPublicCertificatesNextResponse = PublicCertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicCertificateCollection;
  };
};

/**
 * Contains response data for the listSiteExtensionsNext operation.
 */
export type WebAppsListSiteExtensionsNextResponse = SiteExtensionInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteExtensionInfoCollection;
  };
};

/**
 * Contains response data for the listSlotsNext operation.
 */
export type WebAppsListSlotsNextResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the listBackupsSlotNext operation.
 */
export type WebAppsListBackupsSlotNextResponse = BackupItemCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItemCollection;
  };
};

/**
 * Contains response data for the listConfigurationsSlotNext operation.
 */
export type WebAppsListConfigurationsSlotNextResponse = SiteConfigResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigResourceCollection;
  };
};

/**
 * Contains response data for the listConfigurationSnapshotInfoSlotNext operation.
 */
export type WebAppsListConfigurationSnapshotInfoSlotNextResponse = SiteConfigurationSnapshotInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteConfigurationSnapshotInfoCollection;
  };
};

/**
 * Contains response data for the listContinuousWebJobsSlotNext operation.
 */
export type WebAppsListContinuousWebJobsSlotNextResponse = ContinuousWebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContinuousWebJobCollection;
  };
};

/**
 * Contains response data for the listDeploymentsSlotNext operation.
 */
export type WebAppsListDeploymentsSlotNextResponse = DeploymentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeploymentCollection;
  };
};

/**
 * Contains response data for the listDomainOwnershipIdentifiersSlotNext operation.
 */
export type WebAppsListDomainOwnershipIdentifiersSlotNextResponse = IdentifierCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentifierCollection;
  };
};

/**
 * Contains response data for the listInstanceFunctionsSlotNext operation.
 */
export type WebAppsListInstanceFunctionsSlotNextResponse = FunctionEnvelopeCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FunctionEnvelopeCollection;
  };
};

/**
 * Contains response data for the listHostNameBindingsSlotNext operation.
 */
export type WebAppsListHostNameBindingsSlotNextResponse = HostNameBindingCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostNameBindingCollection;
  };
};

/**
 * Contains response data for the listInstanceIdentifiersSlotNext operation.
 */
export type WebAppsListInstanceIdentifiersSlotNextResponse = WebAppInstanceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppInstanceCollection;
  };
};

/**
 * Contains response data for the listInstanceProcessesSlotNext operation.
 */
export type WebAppsListInstanceProcessesSlotNextResponse = ProcessInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfoCollection;
  };
};

/**
 * Contains response data for the listInstanceProcessModulesSlotNext operation.
 */
export type WebAppsListInstanceProcessModulesSlotNextResponse = ProcessModuleInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfoCollection;
  };
};

/**
 * Contains response data for the listInstanceProcessThreadsSlotNext operation.
 */
export type WebAppsListInstanceProcessThreadsSlotNextResponse = ProcessThreadInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessThreadInfoCollection;
  };
};

/**
 * Contains response data for the listSiteBackupsSlotNext operation.
 */
export type WebAppsListSiteBackupsSlotNextResponse = BackupItemCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupItemCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListPerfMonCountersSlotNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listPerfMonCountersSlotNext operation.
 */
export type WebAppsListPerfMonCountersSlotNextResponse = PerfMonCounterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PerfMonCounterCollection;
  };
};

/**
 * Contains response data for the listProcessesSlotNext operation.
 */
export type WebAppsListProcessesSlotNextResponse = ProcessInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessInfoCollection;
  };
};

/**
 * Contains response data for the listProcessModulesSlotNext operation.
 */
export type WebAppsListProcessModulesSlotNextResponse = ProcessModuleInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessModuleInfoCollection;
  };
};

/**
 * Contains response data for the listProcessThreadsSlotNext operation.
 */
export type WebAppsListProcessThreadsSlotNextResponse = ProcessThreadInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ProcessThreadInfoCollection;
  };
};

/**
 * Contains response data for the listPublicCertificatesSlotNext operation.
 */
export type WebAppsListPublicCertificatesSlotNextResponse = PublicCertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicCertificateCollection;
  };
};

/**
 * Contains response data for the listSiteExtensionsSlotNext operation.
 */
export type WebAppsListSiteExtensionsSlotNextResponse = SiteExtensionInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SiteExtensionInfoCollection;
  };
};

/**
 * Contains response data for the listSlotDifferencesSlotNext operation.
 */
export type WebAppsListSlotDifferencesSlotNextResponse = SlotDifferenceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlotDifferenceCollection;
  };
};

/**
 * Contains response data for the listSnapshotsSlotNext operation.
 */
export type WebAppsListSnapshotsSlotNextResponse = SnapshotCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotCollection;
  };
};

/**
 * Contains response data for the listSnapshotsFromDRSecondarySlotNext operation.
 */
export type WebAppsListSnapshotsFromDRSecondarySlotNextResponse = SnapshotCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotCollection;
  };
};

/**
 * Contains response data for the listTriggeredWebJobsSlotNext operation.
 */
export type WebAppsListTriggeredWebJobsSlotNextResponse = TriggeredWebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredWebJobCollection;
  };
};

/**
 * Contains response data for the listTriggeredWebJobHistorySlotNext operation.
 */
export type WebAppsListTriggeredWebJobHistorySlotNextResponse = TriggeredJobHistoryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredJobHistoryCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListUsagesSlotNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listUsagesSlotNext operation.
 */
export type WebAppsListUsagesSlotNextResponse = CsmUsageQuotaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmUsageQuotaCollection;
  };
};

/**
 * Contains response data for the listWebJobsSlotNext operation.
 */
export type WebAppsListWebJobsSlotNextResponse = WebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebJobCollection;
  };
};

/**
 * Contains response data for the listSlotDifferencesFromProductionNext operation.
 */
export type WebAppsListSlotDifferencesFromProductionNextResponse = SlotDifferenceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SlotDifferenceCollection;
  };
};

/**
 * Contains response data for the listSnapshotsNext operation.
 */
export type WebAppsListSnapshotsNextResponse = SnapshotCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotCollection;
  };
};

/**
 * Contains response data for the listSnapshotsFromDRSecondaryNext operation.
 */
export type WebAppsListSnapshotsFromDRSecondaryNextResponse = SnapshotCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotCollection;
  };
};

/**
 * Contains response data for the listTriggeredWebJobsNext operation.
 */
export type WebAppsListTriggeredWebJobsNextResponse = TriggeredWebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredWebJobCollection;
  };
};

/**
 * Contains response data for the listTriggeredWebJobHistoryNext operation.
 */
export type WebAppsListTriggeredWebJobHistoryNextResponse = TriggeredJobHistoryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggeredJobHistoryCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebAppsListUsagesNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listUsagesNext operation.
 */
export type WebAppsListUsagesNextResponse = CsmUsageQuotaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmUsageQuotaCollection;
  };
};

/**
 * Contains response data for the listWebJobsNext operation.
 */
export type WebAppsListWebJobsNextResponse = WebJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebJobCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type StaticSitesListResponse = StaticSiteCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteCollection;
  };
};

/**
 * Contains response data for the getStaticSitesByResourceGroup operation.
 */
export type StaticSitesGetStaticSitesByResourceGroupResponse = StaticSiteCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteCollection;
  };
};

/**
 * Contains response data for the getStaticSite operation.
 */
export type StaticSitesGetStaticSiteResponse = StaticSiteARMResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteARMResource;
  };
};

/**
 * Contains response data for the createOrUpdateStaticSite operation.
 */
export type StaticSitesCreateOrUpdateStaticSiteResponse = StaticSiteARMResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteARMResource;
  };
};

/**
 * Contains response data for the updateStaticSite operation.
 */
export type StaticSitesUpdateStaticSiteResponse = StaticSiteARMResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteARMResource;
  };
};

/**
 * Contains response data for the listStaticSiteUsers operation.
 */
export type StaticSitesListStaticSiteUsersResponse = StaticSiteUserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteUserCollection;
  };
};

/**
 * Contains response data for the updateStaticSiteUser operation.
 */
export type StaticSitesUpdateStaticSiteUserResponse = StaticSiteUserARMResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteUserARMResource;
  };
};

/**
 * Contains response data for the getStaticSiteBuilds operation.
 */
export type StaticSitesGetStaticSiteBuildsResponse = StaticSiteBuildCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteBuildCollection;
  };
};

/**
 * Contains response data for the getStaticSiteBuild operation.
 */
export type StaticSitesGetStaticSiteBuildResponse = StaticSiteBuildARMResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteBuildARMResource;
  };
};

/**
 * Contains response data for the createOrUpdateStaticSiteBuildFunctionAppSettings operation.
 */
export type StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listStaticSiteBuildFunctions operation.
 */
export type StaticSitesListStaticSiteBuildFunctionsResponse = StaticSiteFunctionOverviewCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteFunctionOverviewCollection;
  };
};

/**
 * Contains response data for the listStaticSiteBuildFunctionAppSettings operation.
 */
export type StaticSitesListStaticSiteBuildFunctionAppSettingsResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the createOrUpdateStaticSiteFunctionAppSettings operation.
 */
export type StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the createUserRolesInvitationLink operation.
 */
export type StaticSitesCreateUserRolesInvitationLinkResponse = StaticSiteUserInvitationResponseResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteUserInvitationResponseResource;
  };
};

/**
 * Contains response data for the listStaticSiteCustomDomains operation.
 */
export type StaticSitesListStaticSiteCustomDomainsResponse = StaticSiteCustomDomainOverviewCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteCustomDomainOverviewCollection;
  };
};

/**
 * Contains response data for the createOrUpdateStaticSiteCustomDomain operation.
 */
export type StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse = StaticSiteCustomDomainOverviewARMResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteCustomDomainOverviewARMResource;
  };
};

/**
 * Contains response data for the listStaticSiteFunctions operation.
 */
export type StaticSitesListStaticSiteFunctionsResponse = StaticSiteFunctionOverviewCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteFunctionOverviewCollection;
  };
};

/**
 * Contains response data for the listStaticSiteFunctionAppSettings operation.
 */
export type StaticSitesListStaticSiteFunctionAppSettingsResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listStaticSiteSecrets operation.
 */
export type StaticSitesListStaticSiteSecretsResponse = StringDictionary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StringDictionary;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type StaticSitesListNextResponse = StaticSiteCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteCollection;
  };
};

/**
 * Contains response data for the getStaticSitesByResourceGroupNext operation.
 */
export type StaticSitesGetStaticSitesByResourceGroupNextResponse = StaticSiteCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteCollection;
  };
};

/**
 * Contains response data for the listStaticSiteUsersNext operation.
 */
export type StaticSitesListStaticSiteUsersNextResponse = StaticSiteUserCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteUserCollection;
  };
};

/**
 * Contains response data for the getStaticSiteBuildsNext operation.
 */
export type StaticSitesGetStaticSiteBuildsNextResponse = StaticSiteBuildCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteBuildCollection;
  };
};

/**
 * Contains response data for the listStaticSiteBuildFunctionsNext operation.
 */
export type StaticSitesListStaticSiteBuildFunctionsNextResponse = StaticSiteFunctionOverviewCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteFunctionOverviewCollection;
  };
};

/**
 * Contains response data for the listStaticSiteCustomDomainsNext operation.
 */
export type StaticSitesListStaticSiteCustomDomainsNextResponse = StaticSiteCustomDomainOverviewCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteCustomDomainOverviewCollection;
  };
};

/**
 * Contains response data for the listStaticSiteFunctionsNext operation.
 */
export type StaticSitesListStaticSiteFunctionsNextResponse = StaticSiteFunctionOverviewCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StaticSiteFunctionOverviewCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AppServiceEnvironmentsListResponse = AppServiceEnvironmentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceEnvironmentCollection;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AppServiceEnvironmentsListByResourceGroupResponse = AppServiceEnvironmentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceEnvironmentCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AppServiceEnvironmentsGetResponse = AppServiceEnvironmentResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceEnvironmentResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AppServiceEnvironmentsCreateOrUpdateResponse = AppServiceEnvironmentResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceEnvironmentResource;
  };
};

/**
 * Optional parameters.
 */
export interface AppServiceEnvironmentsDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to force the deletion even if the App Service Environment contains resources. The default is <code>false</code>.
   */
  forceDelete?: boolean;
}

/**
 * Contains response data for the update operation.
 */
export type AppServiceEnvironmentsUpdateResponse = AppServiceEnvironmentResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceEnvironmentResource;
  };
};

/**
 * Contains response data for the listCapacities operation.
 */
export type AppServiceEnvironmentsListCapacitiesResponse = StampCapacityCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StampCapacityCollection;
  };
};

/**
 * Contains response data for the getVipInfo operation.
 */
export type AppServiceEnvironmentsGetVipInfoResponse = AddressResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AddressResponse;
  };
};

/**
 * Contains response data for the changeVnet operation.
 */
export type AppServiceEnvironmentsChangeVnetResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the listDiagnostics operation.
 */
export type AppServiceEnvironmentsListDiagnosticsResponse = HostingEnvironmentDiagnostics[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostingEnvironmentDiagnostics[];
  };
};

/**
 * Contains response data for the getDiagnosticsItem operation.
 */
export type AppServiceEnvironmentsGetDiagnosticsItemResponse = HostingEnvironmentDiagnostics & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HostingEnvironmentDiagnostics;
  };
};

/**
 * Contains response data for the getInboundNetworkDependenciesEndpoints operation.
 */
export type AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse = InboundEnvironmentEndpointCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InboundEnvironmentEndpointCollection;
  };
};

/**
 * Contains response data for the listMultiRolePools operation.
 */
export type AppServiceEnvironmentsListMultiRolePoolsResponse = WorkerPoolCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolCollection;
  };
};

/**
 * Contains response data for the getMultiRolePool operation.
 */
export type AppServiceEnvironmentsGetMultiRolePoolResponse = WorkerPoolResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolResource;
  };
};

/**
 * Contains response data for the createOrUpdateMultiRolePool operation.
 */
export type AppServiceEnvironmentsCreateOrUpdateMultiRolePoolResponse = WorkerPoolResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolResource;
  };
};

/**
 * Contains response data for the updateMultiRolePool operation.
 */
export type AppServiceEnvironmentsUpdateMultiRolePoolResponse = WorkerPoolResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolResource;
  };
};

/**
 * Contains response data for the listMultiRolePoolInstanceMetricDefinitions operation.
 */
export type AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse = ResourceMetricDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceMetricDefinitionCollection;
  };
};

/**
 * Contains response data for the listMultiRoleMetricDefinitions operation.
 */
export type AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse = ResourceMetricDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceMetricDefinitionCollection;
  };
};

/**
 * Contains response data for the listMultiRolePoolSkus operation.
 */
export type AppServiceEnvironmentsListMultiRolePoolSkusResponse = SkuInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SkuInfoCollection;
  };
};

/**
 * Contains response data for the listMultiRoleUsages operation.
 */
export type AppServiceEnvironmentsListMultiRoleUsagesResponse = UsageCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageCollection;
  };
};

/**
 * Contains response data for the listOperations operation.
 */
export type AppServiceEnvironmentsListOperationsResponse = Operation[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Operation[];
  };
};

/**
 * Contains response data for the getOutboundNetworkDependenciesEndpoints operation.
 */
export type AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse = OutboundEnvironmentEndpointCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OutboundEnvironmentEndpointCollection;
  };
};

/**
 * Contains response data for the resume operation.
 */
export type AppServiceEnvironmentsResumeResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the listAppServicePlans operation.
 */
export type AppServiceEnvironmentsListAppServicePlansResponse = AppServicePlanCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlanCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AppServiceEnvironmentsListWebAppsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Comma separated list of app properties to include.
   */
  propertiesToInclude?: string;
}

/**
 * Contains response data for the listWebApps operation.
 */
export type AppServiceEnvironmentsListWebAppsResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the suspend operation.
 */
export type AppServiceEnvironmentsSuspendResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AppServiceEnvironmentsListUsagesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listUsages operation.
 */
export type AppServiceEnvironmentsListUsagesResponse = CsmUsageQuotaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmUsageQuotaCollection;
  };
};

/**
 * Contains response data for the listWorkerPools operation.
 */
export type AppServiceEnvironmentsListWorkerPoolsResponse = WorkerPoolCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolCollection;
  };
};

/**
 * Contains response data for the getWorkerPool operation.
 */
export type AppServiceEnvironmentsGetWorkerPoolResponse = WorkerPoolResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolResource;
  };
};

/**
 * Contains response data for the createOrUpdateWorkerPool operation.
 */
export type AppServiceEnvironmentsCreateOrUpdateWorkerPoolResponse = WorkerPoolResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolResource;
  };
};

/**
 * Contains response data for the updateWorkerPool operation.
 */
export type AppServiceEnvironmentsUpdateWorkerPoolResponse = WorkerPoolResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolResource;
  };
};

/**
 * Contains response data for the listWorkerPoolInstanceMetricDefinitions operation.
 */
export type AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse = ResourceMetricDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceMetricDefinitionCollection;
  };
};

/**
 * Contains response data for the listWebWorkerMetricDefinitions operation.
 */
export type AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse = ResourceMetricDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceMetricDefinitionCollection;
  };
};

/**
 * Contains response data for the listWorkerPoolSkus operation.
 */
export type AppServiceEnvironmentsListWorkerPoolSkusResponse = SkuInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SkuInfoCollection;
  };
};

/**
 * Contains response data for the listWebWorkerUsages operation.
 */
export type AppServiceEnvironmentsListWebWorkerUsagesResponse = UsageCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageCollection;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AppServiceEnvironmentsListNextResponse = AppServiceEnvironmentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceEnvironmentCollection;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AppServiceEnvironmentsListByResourceGroupNextResponse = AppServiceEnvironmentCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServiceEnvironmentCollection;
  };
};

/**
 * Contains response data for the listCapacitiesNext operation.
 */
export type AppServiceEnvironmentsListCapacitiesNextResponse = StampCapacityCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StampCapacityCollection;
  };
};

/**
 * Contains response data for the changeVnetNext operation.
 */
export type AppServiceEnvironmentsChangeVnetNextResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the getInboundNetworkDependenciesEndpointsNext operation.
 */
export type AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsNextResponse = InboundEnvironmentEndpointCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: InboundEnvironmentEndpointCollection;
  };
};

/**
 * Contains response data for the listMultiRolePoolsNext operation.
 */
export type AppServiceEnvironmentsListMultiRolePoolsNextResponse = WorkerPoolCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolCollection;
  };
};

/**
 * Contains response data for the listMultiRolePoolInstanceMetricDefinitionsNext operation.
 */
export type AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsNextResponse = ResourceMetricDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceMetricDefinitionCollection;
  };
};

/**
 * Contains response data for the listMultiRoleMetricDefinitionsNext operation.
 */
export type AppServiceEnvironmentsListMultiRoleMetricDefinitionsNextResponse = ResourceMetricDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceMetricDefinitionCollection;
  };
};

/**
 * Contains response data for the listMultiRolePoolSkusNext operation.
 */
export type AppServiceEnvironmentsListMultiRolePoolSkusNextResponse = SkuInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SkuInfoCollection;
  };
};

/**
 * Contains response data for the listMultiRoleUsagesNext operation.
 */
export type AppServiceEnvironmentsListMultiRoleUsagesNextResponse = UsageCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageCollection;
  };
};

/**
 * Contains response data for the getOutboundNetworkDependenciesEndpointsNext operation.
 */
export type AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsNextResponse = OutboundEnvironmentEndpointCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OutboundEnvironmentEndpointCollection;
  };
};

/**
 * Contains response data for the resumeNext operation.
 */
export type AppServiceEnvironmentsResumeNextResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the listAppServicePlansNext operation.
 */
export type AppServiceEnvironmentsListAppServicePlansNextResponse = AppServicePlanCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlanCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AppServiceEnvironmentsListWebAppsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Comma separated list of app properties to include.
   */
  propertiesToInclude?: string;
}

/**
 * Contains response data for the listWebAppsNext operation.
 */
export type AppServiceEnvironmentsListWebAppsNextResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the suspendNext operation.
 */
export type AppServiceEnvironmentsSuspendNextResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AppServiceEnvironmentsListUsagesNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
   */
  filter?: string;
}

/**
 * Contains response data for the listUsagesNext operation.
 */
export type AppServiceEnvironmentsListUsagesNextResponse = CsmUsageQuotaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmUsageQuotaCollection;
  };
};

/**
 * Contains response data for the listWorkerPoolsNext operation.
 */
export type AppServiceEnvironmentsListWorkerPoolsNextResponse = WorkerPoolCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkerPoolCollection;
  };
};

/**
 * Contains response data for the listWorkerPoolInstanceMetricDefinitionsNext operation.
 */
export type AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsNextResponse = ResourceMetricDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceMetricDefinitionCollection;
  };
};

/**
 * Contains response data for the listWebWorkerMetricDefinitionsNext operation.
 */
export type AppServiceEnvironmentsListWebWorkerMetricDefinitionsNextResponse = ResourceMetricDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceMetricDefinitionCollection;
  };
};

/**
 * Contains response data for the listWorkerPoolSkusNext operation.
 */
export type AppServiceEnvironmentsListWorkerPoolSkusNextResponse = SkuInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SkuInfoCollection;
  };
};

/**
 * Contains response data for the listWebWorkerUsagesNext operation.
 */
export type AppServiceEnvironmentsListWebWorkerUsagesNextResponse = UsageCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AppServicePlansListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to return all App Service plan properties. The default is <code>false</code>, which returns a subset of the properties.
   *  Retrieval of all properties may increase the API latency.
   */
  detailed?: boolean;
}

/**
 * Contains response data for the list operation.
 */
export type AppServicePlansListResponse = AppServicePlanCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlanCollection;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AppServicePlansListByResourceGroupResponse = AppServicePlanCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlanCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AppServicePlansGetResponse = AppServicePlan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlan;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AppServicePlansCreateOrUpdateResponse = AppServicePlan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlan;
  };
};

/**
 * Contains response data for the update operation.
 */
export type AppServicePlansUpdateResponse = AppServicePlan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlan;
  };
};

/**
 * Contains response data for the listCapabilities operation.
 */
export type AppServicePlansListCapabilitiesResponse = Capability[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Capability[];
  };
};

/**
 * Contains response data for the getHybridConnection operation.
 */
export type AppServicePlansGetHybridConnectionResponse = HybridConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnection;
  };
};

/**
 * Contains response data for the listHybridConnectionKeys operation.
 */
export type AppServicePlansListHybridConnectionKeysResponse = HybridConnectionKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnectionKey;
  };
};

/**
 * Contains response data for the listWebAppsByHybridConnection operation.
 */
export type AppServicePlansListWebAppsByHybridConnectionResponse = ResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceCollection;
  };
};

/**
 * Contains response data for the getHybridConnectionPlanLimit operation.
 */
export type AppServicePlansGetHybridConnectionPlanLimitResponse = HybridConnectionLimits & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnectionLimits;
  };
};

/**
 * Contains response data for the listHybridConnections operation.
 */
export type AppServicePlansListHybridConnectionsResponse = HybridConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnectionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AppServicePlansRestartWebAppsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to perform a soft restart, applies the configuration settings and restarts the apps if necessary. The default is <code>false</code>, which always restarts and reprovisions the apps
   */
  softRestart?: boolean;
}

/**
 * Optional parameters.
 */
export interface AppServicePlansListWebAppsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Supported filter: $filter=state eq running. Returns only web apps that are currently running
   */
  filter?: string;
  /**
   * Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list
   */
  skipToken?: string;
  /**
   * List page size. If specified, results are paged.
   */
  top?: string;
}

/**
 * Contains response data for the listWebApps operation.
 */
export type AppServicePlansListWebAppsResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Contains response data for the getServerFarmSkus operation.
 */
export type AppServicePlansGetServerFarmSkusResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Optional parameters.
 */
export interface AppServicePlansListUsagesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2').
   */
  filter?: string;
}

/**
 * Contains response data for the listUsages operation.
 */
export type AppServicePlansListUsagesResponse = CsmUsageQuotaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmUsageQuotaCollection;
  };
};

/**
 * Contains response data for the listVnets operation.
 */
export type AppServicePlansListVnetsResponse = VnetInfo[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo[];
  };
};

/**
 * Contains response data for the getVnetFromServerFarm operation.
 */
export type AppServicePlansGetVnetFromServerFarmResponse = VnetInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetInfo;
  };
};

/**
 * Contains response data for the getVnetGateway operation.
 */
export type AppServicePlansGetVnetGatewayResponse = VnetGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetGateway;
  };
};

/**
 * Contains response data for the updateVnetGateway operation.
 */
export type AppServicePlansUpdateVnetGatewayResponse = VnetGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetGateway;
  };
};

/**
 * Contains response data for the listRoutesForVnet operation.
 */
export type AppServicePlansListRoutesForVnetResponse = VnetRoute[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetRoute[];
  };
};

/**
 * Contains response data for the getRouteForVnet operation.
 */
export type AppServicePlansGetRouteForVnetResponse = VnetRoute[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetRoute[];
  };
};

/**
 * Contains response data for the createOrUpdateVnetRoute operation.
 */
export type AppServicePlansCreateOrUpdateVnetRouteResponse = VnetRoute & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetRoute;
  };
};

/**
 * Contains response data for the updateVnetRoute operation.
 */
export type AppServicePlansUpdateVnetRouteResponse = VnetRoute & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VnetRoute;
  };
};

/**
 * Optional parameters.
 */
export interface AppServicePlansListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify <code>true</code> to return all App Service plan properties. The default is <code>false</code>, which returns a subset of the properties.
   *  Retrieval of all properties may increase the API latency.
   */
  detailed?: boolean;
}

/**
 * Contains response data for the listNext operation.
 */
export type AppServicePlansListNextResponse = AppServicePlanCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlanCollection;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AppServicePlansListByResourceGroupNextResponse = AppServicePlanCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppServicePlanCollection;
  };
};

/**
 * Contains response data for the listWebAppsByHybridConnectionNext operation.
 */
export type AppServicePlansListWebAppsByHybridConnectionNextResponse = ResourceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceCollection;
  };
};

/**
 * Contains response data for the listHybridConnectionsNext operation.
 */
export type AppServicePlansListHybridConnectionsNextResponse = HybridConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HybridConnectionCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AppServicePlansListWebAppsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Supported filter: $filter=state eq running. Returns only web apps that are currently running
   */
  filter?: string;
  /**
   * Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list
   */
  skipToken?: string;
  /**
   * List page size. If specified, results are paged.
   */
  top?: string;
}

/**
 * Contains response data for the listWebAppsNext operation.
 */
export type AppServicePlansListWebAppsNextResponse = WebAppCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WebAppCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AppServicePlansListUsagesNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2').
   */
  filter?: string;
}

/**
 * Contains response data for the listUsagesNext operation.
 */
export type AppServicePlansListUsagesNextResponse = CsmUsageQuotaCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CsmUsageQuotaCollection;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ResourceHealthMetadataListResponse = ResourceHealthMetadataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadataCollection;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ResourceHealthMetadataListByResourceGroupResponse = ResourceHealthMetadataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadataCollection;
  };
};

/**
 * Contains response data for the listBySite operation.
 */
export type ResourceHealthMetadataListBySiteResponse = ResourceHealthMetadataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadataCollection;
  };
};

/**
 * Contains response data for the getBySite operation.
 */
export type ResourceHealthMetadataGetBySiteResponse = ResourceHealthMetadata & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadata;
  };
};

/**
 * Contains response data for the listBySiteSlot operation.
 */
export type ResourceHealthMetadataListBySiteSlotResponse = ResourceHealthMetadataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadataCollection;
  };
};

/**
 * Contains response data for the getBySiteSlot operation.
 */
export type ResourceHealthMetadataGetBySiteSlotResponse = ResourceHealthMetadata & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadata;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ResourceHealthMetadataListNextResponse = ResourceHealthMetadataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadataCollection;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ResourceHealthMetadataListByResourceGroupNextResponse = ResourceHealthMetadataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadataCollection;
  };
};

/**
 * Contains response data for the listBySiteNext operation.
 */
export type ResourceHealthMetadataListBySiteNextResponse = ResourceHealthMetadataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadataCollection;
  };
};

/**
 * Contains response data for the listBySiteSlotNext operation.
 */
export type ResourceHealthMetadataListBySiteSlotNextResponse = ResourceHealthMetadataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceHealthMetadataCollection;
  };
};

/**
 * Optional parameters.
 */
export interface WebSiteManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
