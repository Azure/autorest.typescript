/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClient } from "../webSiteManagementClient";
import {
  DiagnosticsListHostingEnvironmentDetectorResponsesResponse,
  DiagnosticsGetHostingEnvironmentDetectorResponseOptionalParams,
  DiagnosticsGetHostingEnvironmentDetectorResponseResponse,
  DiagnosticsListSiteDetectorResponsesResponse,
  DiagnosticsGetSiteDetectorResponseOptionalParams,
  DiagnosticsGetSiteDetectorResponseResponse,
  DiagnosticsListSiteDiagnosticCategoriesResponse,
  DiagnosticsGetSiteDiagnosticCategoryResponse,
  DiagnosticsListSiteAnalysesResponse,
  DiagnosticsGetSiteAnalysisResponse,
  DiagnosticsExecuteSiteAnalysisOptionalParams,
  DiagnosticsExecuteSiteAnalysisResponse,
  DiagnosticsListSiteDetectorsResponse,
  DiagnosticsGetSiteDetectorResponse,
  DiagnosticsExecuteSiteDetectorOptionalParams,
  DiagnosticsExecuteSiteDetectorResponse,
  DiagnosticsListSiteDetectorResponsesSlotResponse,
  DiagnosticsGetSiteDetectorResponseSlotOptionalParams,
  DiagnosticsGetSiteDetectorResponseSlotResponse,
  DiagnosticsListSiteDiagnosticCategoriesSlotResponse,
  DiagnosticsGetSiteDiagnosticCategorySlotResponse,
  DiagnosticsListSiteAnalysesSlotResponse,
  DiagnosticsGetSiteAnalysisSlotResponse,
  DiagnosticsExecuteSiteAnalysisSlotOptionalParams,
  DiagnosticsExecuteSiteAnalysisSlotResponse,
  DiagnosticsListSiteDetectorsSlotResponse,
  DiagnosticsGetSiteDetectorSlotResponse,
  DiagnosticsExecuteSiteDetectorSlotOptionalParams,
  DiagnosticsExecuteSiteDetectorSlotResponse,
  DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse,
  DiagnosticsListSiteDetectorResponsesNextResponse,
  DiagnosticsListSiteDiagnosticCategoriesNextResponse,
  DiagnosticsListSiteAnalysesNextResponse,
  DiagnosticsListSiteDetectorsNextResponse,
  DiagnosticsListSiteDetectorResponsesSlotNextResponse,
  DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse,
  DiagnosticsListSiteAnalysesSlotNextResponse,
  DiagnosticsListSiteDetectorsSlotNextResponse
} from "../models";

/**
 * Class representing a Diagnostics.
 */
export class Diagnostics {
  private readonly client: WebSiteManagementClient;

  /**
   * Initialize a new instance of the class Diagnostics class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClient) {
    this.client = client;
  }

  /**
   * Description for List Hosting Environment Detector Responses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site Name
   * @param options The options parameters.
   */
  listHostingEnvironmentDetectorResponses(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListHostingEnvironmentDetectorResponsesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listHostingEnvironmentDetectorResponsesOperationSpec
    ) as Promise<DiagnosticsListHostingEnvironmentDetectorResponsesResponse>;
  }

  /**
   * Description for Get Hosting Environment Detector Response
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name App Service Environment Name
   * @param detectorName Detector Resource Name
   * @param options The options parameters.
   */
  getHostingEnvironmentDetectorResponse(
    resourceGroupName: string,
    name: string,
    detectorName: string,
    options?: DiagnosticsGetHostingEnvironmentDetectorResponseOptionalParams
  ): Promise<DiagnosticsGetHostingEnvironmentDetectorResponseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, detectorName, options: operationOptions },
      getHostingEnvironmentDetectorResponseOperationSpec
    ) as Promise<DiagnosticsGetHostingEnvironmentDetectorResponseResponse>;
  }

  /**
   * Description for List Site Detector Responses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param options The options parameters.
   */
  listSiteDetectorResponses(
    resourceGroupName: string,
    siteName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDetectorResponsesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options: operationOptions },
      listSiteDetectorResponsesOperationSpec
    ) as Promise<DiagnosticsListSiteDetectorResponsesResponse>;
  }

  /**
   * Description for Get site detector response
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param options The options parameters.
   */
  getSiteDetectorResponse(
    resourceGroupName: string,
    siteName: string,
    detectorName: string,
    options?: DiagnosticsGetSiteDetectorResponseOptionalParams
  ): Promise<DiagnosticsGetSiteDetectorResponseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, detectorName, options: operationOptions },
      getSiteDetectorResponseOperationSpec
    ) as Promise<DiagnosticsGetSiteDetectorResponseResponse>;
  }

  /**
   * Description for Get Diagnostics Categories
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param options The options parameters.
   */
  listSiteDiagnosticCategories(
    resourceGroupName: string,
    siteName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDiagnosticCategoriesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options: operationOptions },
      listSiteDiagnosticCategoriesOperationSpec
    ) as Promise<DiagnosticsListSiteDiagnosticCategoriesResponse>;
  }

  /**
   * Description for Get Diagnostics Category
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param options The options parameters.
   */
  getSiteDiagnosticCategory(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsGetSiteDiagnosticCategoryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        options: operationOptions
      },
      getSiteDiagnosticCategoryOperationSpec
    ) as Promise<DiagnosticsGetSiteDiagnosticCategoryResponse>;
  }

  /**
   * Description for Get Site Analyses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param options The options parameters.
   */
  listSiteAnalyses(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteAnalysesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        options: operationOptions
      },
      listSiteAnalysesOperationSpec
    ) as Promise<DiagnosticsListSiteAnalysesResponse>;
  }

  /**
   * Description for Get Site Analysis
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param analysisName Analysis Name
   * @param options The options parameters.
   */
  getSiteAnalysis(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    analysisName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsGetSiteAnalysisResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        analysisName,
        options: operationOptions
      },
      getSiteAnalysisOperationSpec
    ) as Promise<DiagnosticsGetSiteAnalysisResponse>;
  }

  /**
   * Description for Execute Analysis
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Category Name
   * @param analysisName Analysis Resource Name
   * @param options The options parameters.
   */
  executeSiteAnalysis(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    analysisName: string,
    options?: DiagnosticsExecuteSiteAnalysisOptionalParams
  ): Promise<DiagnosticsExecuteSiteAnalysisResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        analysisName,
        options: operationOptions
      },
      executeSiteAnalysisOperationSpec
    ) as Promise<DiagnosticsExecuteSiteAnalysisResponse>;
  }

  /**
   * Description for Get Detectors
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param options The options parameters.
   */
  listSiteDetectors(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDetectorsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        options: operationOptions
      },
      listSiteDetectorsOperationSpec
    ) as Promise<DiagnosticsListSiteDetectorsResponse>;
  }

  /**
   * Description for Get Detector
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param detectorName Detector Name
   * @param options The options parameters.
   */
  getSiteDetector(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    detectorName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsGetSiteDetectorResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        detectorName,
        options: operationOptions
      },
      getSiteDetectorOperationSpec
    ) as Promise<DiagnosticsGetSiteDetectorResponse>;
  }

  /**
   * Description for Execute Detector
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param diagnosticCategory Category Name
   * @param options The options parameters.
   */
  executeSiteDetector(
    resourceGroupName: string,
    siteName: string,
    detectorName: string,
    diagnosticCategory: string,
    options?: DiagnosticsExecuteSiteDetectorOptionalParams
  ): Promise<DiagnosticsExecuteSiteDetectorResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        detectorName,
        diagnosticCategory,
        options: operationOptions
      },
      executeSiteDetectorOperationSpec
    ) as Promise<DiagnosticsExecuteSiteDetectorResponse>;
  }

  /**
   * Description for List Site Detector Responses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param options The options parameters.
   */
  listSiteDetectorResponsesSlot(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDetectorResponsesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, slot, options: operationOptions },
      listSiteDetectorResponsesSlotOperationSpec
    ) as Promise<DiagnosticsListSiteDetectorResponsesSlotResponse>;
  }

  /**
   * Description for Get site detector response
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param slot Slot Name
   * @param options The options parameters.
   */
  getSiteDetectorResponseSlot(
    resourceGroupName: string,
    siteName: string,
    detectorName: string,
    slot: string,
    options?: DiagnosticsGetSiteDetectorResponseSlotOptionalParams
  ): Promise<DiagnosticsGetSiteDetectorResponseSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        detectorName,
        slot,
        options: operationOptions
      },
      getSiteDetectorResponseSlotOperationSpec
    ) as Promise<DiagnosticsGetSiteDetectorResponseSlotResponse>;
  }

  /**
   * Description for Get Diagnostics Categories
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param options The options parameters.
   */
  listSiteDiagnosticCategoriesSlot(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDiagnosticCategoriesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, slot, options: operationOptions },
      listSiteDiagnosticCategoriesSlotOperationSpec
    ) as Promise<DiagnosticsListSiteDiagnosticCategoriesSlotResponse>;
  }

  /**
   * Description for Get Diagnostics Category
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param options The options parameters.
   */
  getSiteDiagnosticCategorySlot(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsGetSiteDiagnosticCategorySlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        slot,
        options: operationOptions
      },
      getSiteDiagnosticCategorySlotOperationSpec
    ) as Promise<DiagnosticsGetSiteDiagnosticCategorySlotResponse>;
  }

  /**
   * Description for Get Site Analyses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param options The options parameters.
   */
  listSiteAnalysesSlot(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteAnalysesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        slot,
        options: operationOptions
      },
      listSiteAnalysesSlotOperationSpec
    ) as Promise<DiagnosticsListSiteAnalysesSlotResponse>;
  }

  /**
   * Description for Get Site Analysis
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param analysisName Analysis Name
   * @param slot Slot - optional
   * @param options The options parameters.
   */
  getSiteAnalysisSlot(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    analysisName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsGetSiteAnalysisSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        analysisName,
        slot,
        options: operationOptions
      },
      getSiteAnalysisSlotOperationSpec
    ) as Promise<DiagnosticsGetSiteAnalysisSlotResponse>;
  }

  /**
   * Description for Execute Analysis
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Category Name
   * @param analysisName Analysis Resource Name
   * @param slot Slot Name
   * @param options The options parameters.
   */
  executeSiteAnalysisSlot(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    analysisName: string,
    slot: string,
    options?: DiagnosticsExecuteSiteAnalysisSlotOptionalParams
  ): Promise<DiagnosticsExecuteSiteAnalysisSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        analysisName,
        slot,
        options: operationOptions
      },
      executeSiteAnalysisSlotOperationSpec
    ) as Promise<DiagnosticsExecuteSiteAnalysisSlotResponse>;
  }

  /**
   * Description for Get Detectors
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param options The options parameters.
   */
  listSiteDetectorsSlot(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDetectorsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        slot,
        options: operationOptions
      },
      listSiteDetectorsSlotOperationSpec
    ) as Promise<DiagnosticsListSiteDetectorsSlotResponse>;
  }

  /**
   * Description for Get Detector
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param detectorName Detector Name
   * @param slot Slot Name
   * @param options The options parameters.
   */
  getSiteDetectorSlot(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    detectorName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsGetSiteDetectorSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        detectorName,
        slot,
        options: operationOptions
      },
      getSiteDetectorSlotOperationSpec
    ) as Promise<DiagnosticsGetSiteDetectorSlotResponse>;
  }

  /**
   * Description for Execute Detector
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param diagnosticCategory Category Name
   * @param slot Slot Name
   * @param options The options parameters.
   */
  executeSiteDetectorSlot(
    resourceGroupName: string,
    siteName: string,
    detectorName: string,
    diagnosticCategory: string,
    slot: string,
    options?: DiagnosticsExecuteSiteDetectorSlotOptionalParams
  ): Promise<DiagnosticsExecuteSiteDetectorSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        detectorName,
        diagnosticCategory,
        slot,
        options: operationOptions
      },
      executeSiteDetectorSlotOperationSpec
    ) as Promise<DiagnosticsExecuteSiteDetectorSlotResponse>;
  }

  /**
   * ListHostingEnvironmentDetectorResponsesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site Name
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListHostingEnvironmentDetectorResponses method.
   * @param options The options parameters.
   */
  listHostingEnvironmentDetectorResponsesNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listHostingEnvironmentDetectorResponsesNextOperationSpec
    ) as Promise<
      DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse
    >;
  }

  /**
   * ListSiteDetectorResponsesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorResponses
   *                 method.
   * @param options The options parameters.
   */
  listSiteDetectorResponsesNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDetectorResponsesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options: operationOptions },
      listSiteDetectorResponsesNextOperationSpec
    ) as Promise<DiagnosticsListSiteDetectorResponsesNextResponse>;
  }

  /**
   * ListSiteDiagnosticCategoriesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param nextLink The nextLink from the previous successful call to the ListSiteDiagnosticCategories
   *                 method.
   * @param options The options parameters.
   */
  listSiteDiagnosticCategoriesNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDiagnosticCategoriesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options: operationOptions },
      listSiteDiagnosticCategoriesNextOperationSpec
    ) as Promise<DiagnosticsListSiteDiagnosticCategoriesNextResponse>;
  }

  /**
   * ListSiteAnalysesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param nextLink The nextLink from the previous successful call to the ListSiteAnalyses method.
   * @param options The options parameters.
   */
  listSiteAnalysesNext(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteAnalysesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        nextLink,
        options: operationOptions
      },
      listSiteAnalysesNextOperationSpec
    ) as Promise<DiagnosticsListSiteAnalysesNextResponse>;
  }

  /**
   * ListSiteDetectorsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param nextLink The nextLink from the previous successful call to the ListSiteDetectors method.
   * @param options The options parameters.
   */
  listSiteDetectorsNext(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDetectorsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        nextLink,
        options: operationOptions
      },
      listSiteDetectorsNextOperationSpec
    ) as Promise<DiagnosticsListSiteDetectorsNextResponse>;
  }

  /**
   * ListSiteDetectorResponsesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorResponsesSlot
   *                 method.
   * @param options The options parameters.
   */
  listSiteDetectorResponsesSlotNext(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDetectorResponsesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        slot,
        nextLink,
        options: operationOptions
      },
      listSiteDetectorResponsesSlotNextOperationSpec
    ) as Promise<DiagnosticsListSiteDetectorResponsesSlotNextResponse>;
  }

  /**
   * ListSiteDiagnosticCategoriesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListSiteDiagnosticCategoriesSlot method.
   * @param options The options parameters.
   */
  listSiteDiagnosticCategoriesSlotNext(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        slot,
        nextLink,
        options: operationOptions
      },
      listSiteDiagnosticCategoriesSlotNextOperationSpec
    ) as Promise<DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse>;
  }

  /**
   * ListSiteAnalysesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param nextLink The nextLink from the previous successful call to the ListSiteAnalysesSlot method.
   * @param options The options parameters.
   */
  listSiteAnalysesSlotNext(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteAnalysesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        slot,
        nextLink,
        options: operationOptions
      },
      listSiteAnalysesSlotNextOperationSpec
    ) as Promise<DiagnosticsListSiteAnalysesSlotNextResponse>;
  }

  /**
   * ListSiteDetectorsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorsSlot method.
   * @param options The options parameters.
   */
  listSiteDetectorsSlotNext(
    resourceGroupName: string,
    siteName: string,
    diagnosticCategory: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticsListSiteDetectorsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        slot,
        nextLink,
        options: operationOptions
      },
      listSiteDetectorsSlotNextOperationSpec
    ) as Promise<DiagnosticsListSiteDetectorsSlotNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listHostingEnvironmentDetectorResponsesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getHostingEnvironmentDetectorResponseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.detectorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDetectorResponsesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSiteDetectorResponseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.detectorName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDiagnosticCategoriesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategoryCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSiteDiagnosticCategoryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategory
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteAnalysesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysisCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSiteAnalysisOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisDefinition
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.analysisName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const executeSiteAnalysisOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysis
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.analysisName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDetectorsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSiteDetectorOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorDefinition
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.detectorName,
    Parameters.siteName,
    Parameters.diagnosticCategory
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const executeSiteDetectorOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.detectorName,
    Parameters.siteName,
    Parameters.diagnosticCategory
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDetectorResponsesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSiteDetectorResponseSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.detectorName,
    Parameters.siteName,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDiagnosticCategoriesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategoryCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSiteDiagnosticCategorySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategory
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteAnalysesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysisCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSiteAnalysisSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisDefinition
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.analysisName,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const executeSiteAnalysisSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysis
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.analysisName,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDetectorsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSiteDetectorSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorDefinition
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.detectorName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const executeSiteDetectorSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.detectorName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listHostingEnvironmentDetectorResponsesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDetectorResponsesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDiagnosticCategoriesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategoryCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteAnalysesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysisCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName,
    Parameters.diagnosticCategory
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDetectorsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName,
    Parameters.diagnosticCategory
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDetectorResponsesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDiagnosticCategoriesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategoryCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteAnalysesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysisCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSiteDetectorsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot
  ],
  headerParameters: [Parameters.accept],
  serializer
};
