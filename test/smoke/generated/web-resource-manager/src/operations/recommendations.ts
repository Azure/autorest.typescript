/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClient } from "../webSiteManagementClient";
import {
  RecommendationsListOptionalParams,
  RecommendationsListResponse,
  RecommendationsListHistoryForHostingEnvironmentOptionalParams,
  RecommendationsListHistoryForHostingEnvironmentResponse,
  RecommendationsListRecommendedRulesForHostingEnvironmentOptionalParams,
  RecommendationsListRecommendedRulesForHostingEnvironmentResponse,
  RecommendationsGetRuleDetailsByHostingEnvironmentOptionalParams,
  RecommendationsGetRuleDetailsByHostingEnvironmentResponse,
  RecommendationsListHistoryForWebAppOptionalParams,
  RecommendationsListHistoryForWebAppResponse,
  RecommendationsListRecommendedRulesForWebAppOptionalParams,
  RecommendationsListRecommendedRulesForWebAppResponse,
  RecommendationsGetRuleDetailsByWebAppOptionalParams,
  RecommendationsGetRuleDetailsByWebAppResponse,
  RecommendationsListNextOptionalParams,
  RecommendationsListNextResponse,
  RecommendationsListHistoryForHostingEnvironmentNextOptionalParams,
  RecommendationsListHistoryForHostingEnvironmentNextResponse,
  RecommendationsListRecommendedRulesForHostingEnvironmentNextOptionalParams,
  RecommendationsListRecommendedRulesForHostingEnvironmentNextResponse,
  RecommendationsListHistoryForWebAppNextOptionalParams,
  RecommendationsListHistoryForWebAppNextResponse,
  RecommendationsListRecommendedRulesForWebAppNextOptionalParams,
  RecommendationsListRecommendedRulesForWebAppNextResponse
} from "../models";

/**
 * Class representing a Recommendations.
 */
export class Recommendations {
  private readonly client: WebSiteManagementClient;

  /**
   * Initialize a new instance of the class Recommendations class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClient) {
    this.client = client;
  }

  /**
   * Description for List all recommendations for a subscription.
   * @param options The options parameters.
   */
  list(
    options?: RecommendationsListOptionalParams
  ): Promise<RecommendationsListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<RecommendationsListResponse>;
  }

  /**
   * Description for Reset all recommendation opt-out settings for a subscription.
   * @param options The options parameters.
   */
  resetAllFilters(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      resetAllFiltersOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Disables the specified rule so it will not apply to a subscription in the future.
   * @param name Rule name
   * @param options The options parameters.
   */
  disableRecommendationForSubscription(
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      disableRecommendationForSubscriptionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get past recommendations for an app, optionally specified by the time range.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param hostingEnvironmentName Name of the hosting environment.
   * @param options The options parameters.
   */
  listHistoryForHostingEnvironment(
    resourceGroupName: string,
    hostingEnvironmentName: string,
    options?: RecommendationsListHistoryForHostingEnvironmentOptionalParams
  ): Promise<RecommendationsListHistoryForHostingEnvironmentResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      hostingEnvironmentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listHistoryForHostingEnvironmentOperationSpec
    ) as Promise<RecommendationsListHistoryForHostingEnvironmentResponse>;
  }

  /**
   * Description for Get all recommendations for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param hostingEnvironmentName Name of the app.
   * @param options The options parameters.
   */
  listRecommendedRulesForHostingEnvironment(
    resourceGroupName: string,
    hostingEnvironmentName: string,
    options?: RecommendationsListRecommendedRulesForHostingEnvironmentOptionalParams
  ): Promise<RecommendationsListRecommendedRulesForHostingEnvironmentResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      hostingEnvironmentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listRecommendedRulesForHostingEnvironmentOperationSpec
    ) as Promise<
      RecommendationsListRecommendedRulesForHostingEnvironmentResponse
    >;
  }

  /**
   * Description for Disable all recommendations for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param environmentName Name of the app.
   * @param hostingEnvironmentName
   * @param options The options parameters.
   */
  disableAllForHostingEnvironment(
    resourceGroupName: string,
    environmentName: string,
    hostingEnvironmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      environmentName,
      hostingEnvironmentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      disableAllForHostingEnvironmentOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Reset all recommendation opt-out settings for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param environmentName Name of the app.
   * @param hostingEnvironmentName
   * @param options The options parameters.
   */
  resetAllFiltersForHostingEnvironment(
    resourceGroupName: string,
    environmentName: string,
    hostingEnvironmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      environmentName,
      hostingEnvironmentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      resetAllFiltersForHostingEnvironmentOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get a recommendation rule for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param hostingEnvironmentName Name of the hosting environment.
   * @param name Name of the recommendation.
   * @param options The options parameters.
   */
  getRuleDetailsByHostingEnvironment(
    resourceGroupName: string,
    hostingEnvironmentName: string,
    name: string,
    options?: RecommendationsGetRuleDetailsByHostingEnvironmentOptionalParams
  ): Promise<RecommendationsGetRuleDetailsByHostingEnvironmentResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      hostingEnvironmentName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getRuleDetailsByHostingEnvironmentOperationSpec
    ) as Promise<RecommendationsGetRuleDetailsByHostingEnvironmentResponse>;
  }

  /**
   * Description for Disables the specific rule for a web site permanently.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param environmentName Site name
   * @param name Rule name
   * @param hostingEnvironmentName
   * @param options The options parameters.
   */
  disableRecommendationForHostingEnvironment(
    resourceGroupName: string,
    environmentName: string,
    name: string,
    hostingEnvironmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      environmentName,
      name,
      hostingEnvironmentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      disableRecommendationForHostingEnvironmentOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get past recommendations for an app, optionally specified by the time range.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the app.
   * @param options The options parameters.
   */
  listHistoryForWebApp(
    resourceGroupName: string,
    siteName: string,
    options?: RecommendationsListHistoryForWebAppOptionalParams
  ): Promise<RecommendationsListHistoryForWebAppResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      siteName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listHistoryForWebAppOperationSpec
    ) as Promise<RecommendationsListHistoryForWebAppResponse>;
  }

  /**
   * Description for Get all recommendations for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the app.
   * @param options The options parameters.
   */
  listRecommendedRulesForWebApp(
    resourceGroupName: string,
    siteName: string,
    options?: RecommendationsListRecommendedRulesForWebAppOptionalParams
  ): Promise<RecommendationsListRecommendedRulesForWebAppResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      siteName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listRecommendedRulesForWebAppOperationSpec
    ) as Promise<RecommendationsListRecommendedRulesForWebAppResponse>;
  }

  /**
   * Description for Disable all recommendations for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the app.
   * @param options The options parameters.
   */
  disableAllForWebApp(
    resourceGroupName: string,
    siteName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      siteName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      disableAllForWebAppOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Reset all recommendation opt-out settings for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the app.
   * @param options The options parameters.
   */
  resetAllFiltersForWebApp(
    resourceGroupName: string,
    siteName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      siteName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      resetAllFiltersForWebAppOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get a recommendation rule for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the app.
   * @param name Name of the recommendation.
   * @param options The options parameters.
   */
  getRuleDetailsByWebApp(
    resourceGroupName: string,
    siteName: string,
    name: string,
    options?: RecommendationsGetRuleDetailsByWebAppOptionalParams
  ): Promise<RecommendationsGetRuleDetailsByWebAppResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      siteName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getRuleDetailsByWebAppOperationSpec
    ) as Promise<RecommendationsGetRuleDetailsByWebAppResponse>;
  }

  /**
   * Description for Disables the specific rule for a web site permanently.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site name
   * @param name Rule name
   * @param options The options parameters.
   */
  disableRecommendationForSite(
    resourceGroupName: string,
    siteName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      siteName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      disableRecommendationForSiteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: RecommendationsListNextOptionalParams
  ): Promise<RecommendationsListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<RecommendationsListNextResponse>;
  }

  /**
   * ListHistoryForHostingEnvironmentNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param hostingEnvironmentName Name of the hosting environment.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListHistoryForHostingEnvironment method.
   * @param options The options parameters.
   */
  listHistoryForHostingEnvironmentNext(
    resourceGroupName: string,
    hostingEnvironmentName: string,
    nextLink: string,
    options?: RecommendationsListHistoryForHostingEnvironmentNextOptionalParams
  ): Promise<RecommendationsListHistoryForHostingEnvironmentNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      hostingEnvironmentName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listHistoryForHostingEnvironmentNextOperationSpec
    ) as Promise<RecommendationsListHistoryForHostingEnvironmentNextResponse>;
  }

  /**
   * ListRecommendedRulesForHostingEnvironmentNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param hostingEnvironmentName Name of the app.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListRecommendedRulesForHostingEnvironment method.
   * @param options The options parameters.
   */
  listRecommendedRulesForHostingEnvironmentNext(
    resourceGroupName: string,
    hostingEnvironmentName: string,
    nextLink: string,
    options?: RecommendationsListRecommendedRulesForHostingEnvironmentNextOptionalParams
  ): Promise<
    RecommendationsListRecommendedRulesForHostingEnvironmentNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      hostingEnvironmentName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listRecommendedRulesForHostingEnvironmentNextOperationSpec
    ) as Promise<
      RecommendationsListRecommendedRulesForHostingEnvironmentNextResponse
    >;
  }

  /**
   * ListHistoryForWebAppNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListHistoryForWebApp method.
   * @param options The options parameters.
   */
  listHistoryForWebAppNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: RecommendationsListHistoryForWebAppNextOptionalParams
  ): Promise<RecommendationsListHistoryForWebAppNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      siteName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listHistoryForWebAppNextOperationSpec
    ) as Promise<RecommendationsListHistoryForWebAppNextResponse>;
  }

  /**
   * ListRecommendedRulesForWebAppNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListRecommendedRulesForWebApp
   *                 method.
   * @param options The options parameters.
   */
  listRecommendedRulesForWebAppNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: RecommendationsListRecommendedRulesForWebAppNextOptionalParams
  ): Promise<RecommendationsListRecommendedRulesForWebAppNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      siteName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listRecommendedRulesForWebAppNextOperationSpec
    ) as Promise<RecommendationsListRecommendedRulesForWebAppNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.featured,
    Parameters.filter
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const resetAllFiltersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const disableRecommendationForSubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const listHistoryForHostingEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendationHistory",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expiredOnly
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostingEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRecommendedRulesForHostingEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.featured,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostingEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const disableAllForHostingEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/disable",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.environmentName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostingEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resetAllFiltersForHostingEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/reset",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.environmentName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostingEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getRuleDetailsByHostingEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationRule
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.updateSeen,
    Parameters.recommendationId
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostingEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const disableRecommendationForHostingEnvironmentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}/disable",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.environmentName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostingEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listHistoryForWebAppOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expiredOnly
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRecommendedRulesForWebAppOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.featured,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const disableAllForWebAppOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/disable",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resetAllFiltersForWebAppOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/reset",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getRuleDetailsByWebAppOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationRule
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.updateSeen,
    Parameters.recommendationId
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const disableRecommendationForSiteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}/disable",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.featured,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listHistoryForHostingEnvironmentNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expiredOnly
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.hostingEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRecommendedRulesForHostingEnvironmentNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.featured,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.hostingEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listHistoryForWebAppNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expiredOnly
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRecommendedRulesForWebAppNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.featured,
    Parameters.filter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
