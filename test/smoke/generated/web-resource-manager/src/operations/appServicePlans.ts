/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClient } from "../webSiteManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  AppServicePlansListOptionalParams,
  AppServicePlansListResponse,
  AppServicePlansListByResourceGroupResponse,
  AppServicePlansGetResponse,
  AppServicePlan,
  AppServicePlansCreateOrUpdateResponse,
  AppServicePlanPatchResource,
  AppServicePlansUpdateResponse,
  AppServicePlansListCapabilitiesResponse,
  AppServicePlansGetHybridConnectionResponse,
  AppServicePlansListHybridConnectionKeysResponse,
  AppServicePlansListWebAppsByHybridConnectionResponse,
  AppServicePlansGetHybridConnectionPlanLimitResponse,
  AppServicePlansListHybridConnectionsResponse,
  AppServicePlansRestartWebAppsOptionalParams,
  AppServicePlansListWebAppsOptionalParams,
  AppServicePlansListWebAppsResponse,
  AppServicePlansGetServerFarmSkusResponse,
  AppServicePlansListUsagesOptionalParams,
  AppServicePlansListUsagesResponse,
  AppServicePlansListVnetsResponse,
  AppServicePlansGetVnetFromServerFarmResponse,
  AppServicePlansGetVnetGatewayResponse,
  VnetGateway,
  AppServicePlansUpdateVnetGatewayResponse,
  AppServicePlansListRoutesForVnetResponse,
  AppServicePlansGetRouteForVnetResponse,
  VnetRoute,
  AppServicePlansCreateOrUpdateVnetRouteResponse,
  AppServicePlansUpdateVnetRouteResponse,
  AppServicePlansListNextOptionalParams,
  AppServicePlansListNextResponse,
  AppServicePlansListByResourceGroupNextResponse,
  AppServicePlansListWebAppsByHybridConnectionNextResponse,
  AppServicePlansListHybridConnectionsNextResponse,
  AppServicePlansListWebAppsNextOptionalParams,
  AppServicePlansListWebAppsNextResponse,
  AppServicePlansListUsagesNextOptionalParams,
  AppServicePlansListUsagesNextResponse
} from "../models";

/**
 * Class representing a AppServicePlans.
 */
export class AppServicePlans {
  private readonly client: WebSiteManagementClient;

  /**
   * Initialize a new instance of the class AppServicePlans class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClient) {
    this.client = client;
  }

  /**
   * Description for Get all App Service plans for a subscription.
   * @param options The options parameters.
   */
  list(
    options?: AppServicePlansListOptionalParams
  ): Promise<AppServicePlansListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<AppServicePlansListResponse>;
  }

  /**
   * Description for Get all App Service plans in a resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<AppServicePlansListByResourceGroupResponse>;
  }

  /**
   * Description for Get an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getOperationSpec
    ) as Promise<AppServicePlansGetResponse>;
  }

  /**
   * Description for Creates or updates an App Service Plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param appServicePlan Details of the App Service plan.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    name: string,
    appServicePlan: AppServicePlan,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<AppServicePlansCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      appServicePlan,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        AppServicePlansCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Delete an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates or updates an App Service Plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param appServicePlan Details of the App Service plan.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    name: string,
    appServicePlan: AppServicePlanPatchResource,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, appServicePlan, options: operationOptions },
      updateOperationSpec
    ) as Promise<AppServicePlansUpdateResponse>;
  }

  /**
   * Description for List all capabilities of an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The options parameters.
   */
  listCapabilities(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListCapabilitiesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listCapabilitiesOperationSpec
    ) as Promise<AppServicePlansListCapabilitiesResponse>;
  }

  /**
   * Description for Retrieve a Hybrid Connection in use in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Service Bus namespace.
   * @param relayName Name of the Service Bus relay.
   * @param options The options parameters.
   */
  getHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansGetHybridConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options: operationOptions
      },
      getHybridConnectionOperationSpec
    ) as Promise<AppServicePlansGetHybridConnectionResponse>;
  }

  /**
   * Description for Delete a Hybrid Connection in use in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Service Bus namespace.
   * @param relayName Name of the Service Bus relay.
   * @param options The options parameters.
   */
  deleteHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options: operationOptions
      },
      deleteHybridConnectionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get the send key name and value of a Hybrid Connection.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName The name of the Service Bus namespace.
   * @param relayName The name of the Service Bus relay.
   * @param options The options parameters.
   */
  listHybridConnectionKeys(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListHybridConnectionKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options: operationOptions
      },
      listHybridConnectionKeysOperationSpec
    ) as Promise<AppServicePlansListHybridConnectionKeysResponse>;
  }

  /**
   * Description for Get all apps that use a Hybrid Connection in an App Service Plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Hybrid Connection namespace.
   * @param relayName Name of the Hybrid Connection relay.
   * @param options The options parameters.
   */
  listWebAppsByHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListWebAppsByHybridConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options: operationOptions
      },
      listWebAppsByHybridConnectionOperationSpec
    ) as Promise<AppServicePlansListWebAppsByHybridConnectionResponse>;
  }

  /**
   * Description for Get the maximum number of Hybrid Connections allowed in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The options parameters.
   */
  getHybridConnectionPlanLimit(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansGetHybridConnectionPlanLimitResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getHybridConnectionPlanLimitOperationSpec
    ) as Promise<AppServicePlansGetHybridConnectionPlanLimitResponse>;
  }

  /**
   * Description for Retrieve all Hybrid Connections in use in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The options parameters.
   */
  listHybridConnections(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListHybridConnectionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listHybridConnectionsOperationSpec
    ) as Promise<AppServicePlansListHybridConnectionsResponse>;
  }

  /**
   * Description for Restart all apps in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The options parameters.
   */
  restartWebApps(
    resourceGroupName: string,
    name: string,
    options?: AppServicePlansRestartWebAppsOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      restartWebAppsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get all apps associated with an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The options parameters.
   */
  listWebApps(
    resourceGroupName: string,
    name: string,
    options?: AppServicePlansListWebAppsOptionalParams
  ): Promise<AppServicePlansListWebAppsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listWebAppsOperationSpec
    ) as Promise<AppServicePlansListWebAppsResponse>;
  }

  /**
   * Description for Gets all selectable SKUs for a given App Service Plan
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param options The options parameters.
   */
  getServerFarmSkus(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansGetServerFarmSkusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getServerFarmSkusOperationSpec
    ) as Promise<AppServicePlansGetServerFarmSkusResponse>;
  }

  /**
   * Description for Gets server farm usage information
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param options The options parameters.
   */
  listUsages(
    resourceGroupName: string,
    name: string,
    options?: AppServicePlansListUsagesOptionalParams
  ): Promise<AppServicePlansListUsagesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listUsagesOperationSpec
    ) as Promise<AppServicePlansListUsagesResponse>;
  }

  /**
   * Description for Get all Virtual Networks associated with an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param options The options parameters.
   */
  listVnets(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListVnetsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listVnetsOperationSpec
    ) as Promise<AppServicePlansListVnetsResponse>;
  }

  /**
   * Description for Get a Virtual Network associated with an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param options The options parameters.
   */
  getVnetFromServerFarm(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansGetVnetFromServerFarmResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, vnetName, options: operationOptions },
      getVnetFromServerFarmOperationSpec
    ) as Promise<AppServicePlansGetVnetFromServerFarmResponse>;
  }

  /**
   * Description for Get a Virtual Network gateway.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param options The options parameters.
   */
  getVnetGateway(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    gatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansGetVnetGatewayResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        options: operationOptions
      },
      getVnetGatewayOperationSpec
    ) as Promise<AppServicePlansGetVnetGatewayResponse>;
  }

  /**
   * Description for Update a Virtual Network gateway.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param connectionEnvelope Definition of the gateway.
   * @param options The options parameters.
   */
  updateVnetGateway(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    gatewayName: string,
    connectionEnvelope: VnetGateway,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansUpdateVnetGatewayResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options: operationOptions
      },
      updateVnetGatewayOperationSpec
    ) as Promise<AppServicePlansUpdateVnetGatewayResponse>;
  }

  /**
   * Description for Get all routes that are associated with a Virtual Network in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param options The options parameters.
   */
  listRoutesForVnet(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListRoutesForVnetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, vnetName, options: operationOptions },
      listRoutesForVnetOperationSpec
    ) as Promise<AppServicePlansListRoutesForVnetResponse>;
  }

  /**
   * Description for Get a Virtual Network route in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param options The options parameters.
   */
  getRouteForVnet(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    routeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansGetRouteForVnetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        options: operationOptions
      },
      getRouteForVnetOperationSpec
    ) as Promise<AppServicePlansGetRouteForVnetResponse>;
  }

  /**
   * Description for Create or update a Virtual Network route in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param route Definition of the Virtual Network route.
   * @param options The options parameters.
   */
  createOrUpdateVnetRoute(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    routeName: string,
    route: VnetRoute,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansCreateOrUpdateVnetRouteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        route,
        options: operationOptions
      },
      createOrUpdateVnetRouteOperationSpec
    ) as Promise<AppServicePlansCreateOrUpdateVnetRouteResponse>;
  }

  /**
   * Description for Delete a Virtual Network route in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param options The options parameters.
   */
  deleteVnetRoute(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    routeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        options: operationOptions
      },
      deleteVnetRouteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Create or update a Virtual Network route in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param vnetName Name of the Virtual Network.
   * @param routeName Name of the Virtual Network route.
   * @param route Definition of the Virtual Network route.
   * @param options The options parameters.
   */
  updateVnetRoute(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    routeName: string,
    route: VnetRoute,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansUpdateVnetRouteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        route,
        options: operationOptions
      },
      updateVnetRouteOperationSpec
    ) as Promise<AppServicePlansUpdateVnetRouteResponse>;
  }

  /**
   * Description for Reboot a worker machine in an App Service plan.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param workerName Name of worker machine, which typically starts with RD.
   * @param options The options parameters.
   */
  rebootWorker(
    resourceGroupName: string,
    name: string,
    workerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, workerName, options: operationOptions },
      rebootWorkerOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: AppServicePlansListNextOptionalParams
  ): Promise<AppServicePlansListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<AppServicePlansListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<AppServicePlansListByResourceGroupNextResponse>;
  }

  /**
   * ListWebAppsByHybridConnectionNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param namespaceName Name of the Hybrid Connection namespace.
   * @param relayName Name of the Hybrid Connection relay.
   * @param nextLink The nextLink from the previous successful call to the ListWebAppsByHybridConnection
   *                 method.
   * @param options The options parameters.
   */
  listWebAppsByHybridConnectionNext(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListWebAppsByHybridConnectionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        nextLink,
        options: operationOptions
      },
      listWebAppsByHybridConnectionNextOperationSpec
    ) as Promise<AppServicePlansListWebAppsByHybridConnectionNextResponse>;
  }

  /**
   * ListHybridConnectionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param nextLink The nextLink from the previous successful call to the ListHybridConnections method.
   * @param options The options parameters.
   */
  listHybridConnectionsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServicePlansListHybridConnectionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listHybridConnectionsNextOperationSpec
    ) as Promise<AppServicePlansListHybridConnectionsNextResponse>;
  }

  /**
   * ListWebAppsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service plan.
   * @param nextLink The nextLink from the previous successful call to the ListWebApps method.
   * @param options The options parameters.
   */
  listWebAppsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: AppServicePlansListWebAppsNextOptionalParams
  ): Promise<AppServicePlansListWebAppsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listWebAppsNextOperationSpec
    ) as Promise<AppServicePlansListWebAppsNextResponse>;
  }

  /**
   * ListUsagesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of App Service Plan
   * @param nextLink The nextLink from the previous successful call to the ListUsages method.
   * @param options The options parameters.
   */
  listUsagesNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: AppServicePlansListUsagesNextOptionalParams
  ): Promise<AppServicePlansListUsagesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listUsagesNextOperationSpec
    ) as Promise<AppServicePlansListUsagesNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.detailed],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlan
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlan
    },
    201: {
      bodyMapper: Mappers.AppServicePlan
    },
    202: {
      bodyMapper: Mappers.AppServicePlan
    },
    204: {
      bodyMapper: Mappers.AppServicePlan
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.appServicePlan,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlan
    },
    202: {
      bodyMapper: Mappers.AppServicePlan
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.appServicePlan1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listCapabilitiesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Capability" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getHybridConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const deleteHybridConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const listHybridConnectionKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionKey
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const listWebAppsByHybridConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const getHybridConnectionPlanLimitOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionLimits
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listHybridConnectionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const restartWebAppsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.softRestart],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listWebAppsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken,
    Parameters.top
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getServerFarmSkusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listUsagesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listVnetsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VnetInfo" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getVnetFromServerFarmOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName
  ],
  serializer
};
const getVnetGatewayOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName
  ],
  serializer
};
const updateVnetGatewayOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listRoutesForVnetOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VnetRoute" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName
  ],
  serializer
};
const getRouteForVnetOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VnetRoute" } }
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName
  ],
  serializer
};
const createOrUpdateVnetRouteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VnetRoute
    },
    400: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.route,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteVnetRouteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName
  ],
  serializer
};
const updateVnetRouteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VnetRoute
    },
    400: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.route,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const rebootWorkerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.detailed],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  serializer
};
const listWebAppsByHybridConnectionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const listHybridConnectionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnectionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listWebAppsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken,
    Parameters.top
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listUsagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
