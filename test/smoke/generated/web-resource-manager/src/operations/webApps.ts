/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClient } from "../webSiteManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  WebAppsListResponse,
  WebAppsListByResourceGroupOptionalParams,
  WebAppsListByResourceGroupResponse,
  WebAppsGetResponse,
  Site,
  WebAppsCreateOrUpdateResponse,
  WebAppsDeleteOptionalParams,
  SitePatchResource,
  WebAppsUpdateResponse,
  WebAppsAnalyzeCustomHostnameOptionalParams,
  WebAppsAnalyzeCustomHostnameResponse,
  CsmSlotEntity,
  BackupRequest,
  WebAppsBackupResponse,
  WebAppsListBackupsResponse,
  WebAppsGetBackupStatusResponse,
  WebAppsListBackupStatusSecretsResponse,
  RestoreRequest,
  WebAppsListConfigurationsResponse,
  StringDictionary,
  WebAppsUpdateApplicationSettingsResponse,
  WebAppsListApplicationSettingsResponse,
  SiteAuthSettings,
  WebAppsUpdateAuthSettingsResponse,
  WebAppsGetAuthSettingsResponse,
  AzureStoragePropertyDictionaryResource,
  WebAppsUpdateAzureStorageAccountsResponse,
  WebAppsListAzureStorageAccountsResponse,
  WebAppsUpdateBackupConfigurationResponse,
  WebAppsGetBackupConfigurationResponse,
  WebAppsGetAppSettingsKeyVaultReferencesResponse,
  WebAppsGetAppSettingKeyVaultReferenceResponse,
  ConnectionStringDictionary,
  WebAppsUpdateConnectionStringsResponse,
  WebAppsListConnectionStringsResponse,
  WebAppsGetDiagnosticLogsConfigurationResponse,
  SiteLogsConfig,
  WebAppsUpdateDiagnosticLogsConfigResponse,
  WebAppsUpdateMetadataResponse,
  WebAppsListMetadataResponse,
  WebAppsListPublishingCredentialsResponse,
  PushSettings,
  WebAppsUpdateSitePushSettingsResponse,
  WebAppsListSitePushSettingsResponse,
  WebAppsListSlotConfigurationNamesResponse,
  SlotConfigNamesResource,
  WebAppsUpdateSlotConfigurationNamesResponse,
  WebAppsGetConfigurationResponse,
  SiteConfigResource,
  WebAppsCreateOrUpdateConfigurationResponse,
  WebAppsUpdateConfigurationResponse,
  WebAppsListConfigurationSnapshotInfoResponse,
  WebAppsGetConfigurationSnapshotResponse,
  WebAppsGetWebSiteContainerLogsResponse,
  WebAppsGetContainerLogsZipResponse,
  WebAppsListContinuousWebJobsResponse,
  WebAppsGetContinuousWebJobResponse,
  WebAppsListDeploymentsResponse,
  WebAppsGetDeploymentResponse,
  Deployment,
  WebAppsCreateDeploymentResponse,
  WebAppsListDeploymentLogResponse,
  WebAppsDiscoverBackupResponse,
  WebAppsListDomainOwnershipIdentifiersResponse,
  WebAppsGetDomainOwnershipIdentifierResponse,
  Identifier,
  WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse,
  WebAppsUpdateDomainOwnershipIdentifierResponse,
  WebAppsGetMSDeployStatusResponse,
  MSDeploy,
  WebAppsCreateMSDeployOperationResponse,
  WebAppsGetMSDeployLogResponse,
  WebAppsListFunctionsResponse,
  WebAppsGetFunctionsAdminTokenResponse,
  WebAppsGetFunctionResponse,
  FunctionEnvelope,
  WebAppsCreateFunctionResponse,
  KeyInfo,
  WebAppsCreateOrUpdateFunctionSecretResponse,
  WebAppsListFunctionKeysResponse,
  WebAppsListFunctionSecretsResponse,
  WebAppsListHostKeysResponse,
  WebAppsCreateOrUpdateHostSecretResponse,
  WebAppsListHostNameBindingsResponse,
  WebAppsGetHostNameBindingResponse,
  HostNameBinding,
  WebAppsCreateOrUpdateHostNameBindingResponse,
  WebAppsGetHybridConnectionResponse,
  HybridConnection,
  WebAppsCreateOrUpdateHybridConnectionResponse,
  WebAppsUpdateHybridConnectionResponse,
  WebAppsListHybridConnectionsResponse,
  WebAppsListRelayServiceConnectionsResponse,
  WebAppsGetRelayServiceConnectionResponse,
  RelayServiceConnectionEntity,
  WebAppsCreateOrUpdateRelayServiceConnectionResponse,
  WebAppsUpdateRelayServiceConnectionResponse,
  WebAppsListInstanceIdentifiersResponse,
  WebAppsGetInstanceInfoResponse,
  WebAppsGetInstanceMsDeployStatusResponse,
  WebAppsCreateInstanceMSDeployOperationResponse,
  WebAppsGetInstanceMSDeployLogResponse,
  WebAppsListInstanceProcessesResponse,
  WebAppsGetInstanceProcessResponse,
  WebAppsGetInstanceProcessDumpResponse,
  WebAppsListInstanceProcessModulesResponse,
  WebAppsGetInstanceProcessModuleResponse,
  WebAppsListInstanceProcessThreadsResponse,
  WebAppsIsCloneableResponse,
  WebAppsListSiteBackupsResponse,
  WebAppsListSyncFunctionTriggersResponse,
  StorageMigrationOptions,
  WebAppsMigrateStorageResponse,
  MigrateMySqlRequest,
  WebAppsMigrateMySqlResponse,
  WebAppsGetMigrateMySqlStatusResponse,
  WebAppsGetSwiftVirtualNetworkConnectionResponse,
  SwiftVirtualNetwork,
  WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse,
  WebAppsUpdateSwiftVirtualNetworkConnectionResponse,
  WebAppsListNetworkFeaturesResponse,
  WebAppsGetNetworkTraceOperationResponse,
  WebAppsStartWebSiteNetworkTraceOptionalParams,
  WebAppsStartWebSiteNetworkTraceResponse,
  WebAppsStartWebSiteNetworkTraceOperationOptionalParams,
  WebAppsStartWebSiteNetworkTraceOperationResponse,
  WebAppsGetNetworkTracesResponse,
  WebAppsGetNetworkTraceOperationV2Response,
  WebAppsGetNetworkTracesV2Response,
  WebAppsListPerfMonCountersOptionalParams,
  WebAppsListPerfMonCountersResponse,
  WebAppsGetSitePhpErrorLogFlagResponse,
  WebAppsListPremierAddOnsResponse,
  WebAppsGetPremierAddOnResponse,
  PremierAddOn,
  WebAppsAddPremierAddOnResponse,
  PremierAddOnPatchResource,
  WebAppsUpdatePremierAddOnResponse,
  WebAppsGetPrivateAccessResponse,
  PrivateAccess,
  WebAppsPutPrivateAccessVnetResponse,
  WebAppsListProcessesResponse,
  WebAppsGetProcessResponse,
  WebAppsGetProcessDumpResponse,
  WebAppsListProcessModulesResponse,
  WebAppsGetProcessModuleResponse,
  WebAppsListProcessThreadsResponse,
  WebAppsListPublicCertificatesResponse,
  WebAppsGetPublicCertificateResponse,
  PublicCertificate,
  WebAppsCreateOrUpdatePublicCertificateResponse,
  CsmPublishingProfileOptions,
  WebAppsListPublishingProfileXmlWithSecretsResponse,
  WebAppsRestartOptionalParams,
  DeletedAppRestoreRequest,
  SnapshotRestoreRequest,
  WebAppsListSiteExtensionsResponse,
  WebAppsGetSiteExtensionResponse,
  WebAppsInstallSiteExtensionResponse,
  CsmCopySlotEntity,
  WebAppsListSlotsResponse,
  WebAppsGetSlotResponse,
  WebAppsCreateOrUpdateSlotResponse,
  WebAppsDeleteSlotOptionalParams,
  WebAppsUpdateSlotResponse,
  WebAppsAnalyzeCustomHostnameSlotOptionalParams,
  WebAppsAnalyzeCustomHostnameSlotResponse,
  WebAppsBackupSlotResponse,
  WebAppsListBackupsSlotResponse,
  WebAppsGetBackupStatusSlotResponse,
  WebAppsListBackupStatusSecretsSlotResponse,
  WebAppsListConfigurationsSlotResponse,
  WebAppsUpdateApplicationSettingsSlotResponse,
  WebAppsListApplicationSettingsSlotResponse,
  WebAppsUpdateAuthSettingsSlotResponse,
  WebAppsGetAuthSettingsSlotResponse,
  WebAppsUpdateAzureStorageAccountsSlotResponse,
  WebAppsListAzureStorageAccountsSlotResponse,
  WebAppsUpdateBackupConfigurationSlotResponse,
  WebAppsGetBackupConfigurationSlotResponse,
  WebAppsUpdateConnectionStringsSlotResponse,
  WebAppsListConnectionStringsSlotResponse,
  WebAppsGetDiagnosticLogsConfigurationSlotResponse,
  WebAppsUpdateDiagnosticLogsConfigSlotResponse,
  WebAppsUpdateMetadataSlotResponse,
  WebAppsListMetadataSlotResponse,
  WebAppsListPublishingCredentialsSlotResponse,
  WebAppsUpdateSitePushSettingsSlotResponse,
  WebAppsListSitePushSettingsSlotResponse,
  WebAppsGetConfigurationSlotResponse,
  WebAppsCreateOrUpdateConfigurationSlotResponse,
  WebAppsUpdateConfigurationSlotResponse,
  WebAppsListConfigurationSnapshotInfoSlotResponse,
  WebAppsGetConfigurationSnapshotSlotResponse,
  WebAppsGetWebSiteContainerLogsSlotResponse,
  WebAppsGetContainerLogsZipSlotResponse,
  WebAppsListContinuousWebJobsSlotResponse,
  WebAppsGetContinuousWebJobSlotResponse,
  WebAppsListDeploymentsSlotResponse,
  WebAppsGetDeploymentSlotResponse,
  WebAppsCreateDeploymentSlotResponse,
  WebAppsListDeploymentLogSlotResponse,
  WebAppsDiscoverBackupSlotResponse,
  WebAppsListDomainOwnershipIdentifiersSlotResponse,
  WebAppsGetDomainOwnershipIdentifierSlotResponse,
  WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse,
  WebAppsUpdateDomainOwnershipIdentifierSlotResponse,
  WebAppsGetMSDeployStatusSlotResponse,
  WebAppsCreateMSDeployOperationSlotResponse,
  WebAppsGetMSDeployLogSlotResponse,
  WebAppsListInstanceFunctionsSlotResponse,
  WebAppsGetFunctionsAdminTokenSlotResponse,
  WebAppsGetInstanceFunctionSlotResponse,
  WebAppsCreateInstanceFunctionSlotResponse,
  WebAppsCreateOrUpdateFunctionSecretSlotResponse,
  WebAppsListFunctionKeysSlotResponse,
  WebAppsListFunctionSecretsSlotResponse,
  WebAppsListHostKeysSlotResponse,
  WebAppsCreateOrUpdateHostSecretSlotResponse,
  WebAppsListHostNameBindingsSlotResponse,
  WebAppsGetHostNameBindingSlotResponse,
  WebAppsCreateOrUpdateHostNameBindingSlotResponse,
  WebAppsGetHybridConnectionSlotResponse,
  WebAppsCreateOrUpdateHybridConnectionSlotResponse,
  WebAppsUpdateHybridConnectionSlotResponse,
  WebAppsListHybridConnectionsSlotResponse,
  WebAppsListRelayServiceConnectionsSlotResponse,
  WebAppsGetRelayServiceConnectionSlotResponse,
  WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse,
  WebAppsUpdateRelayServiceConnectionSlotResponse,
  WebAppsListInstanceIdentifiersSlotResponse,
  WebAppsGetInstanceInfoSlotResponse,
  WebAppsGetInstanceMsDeployStatusSlotResponse,
  WebAppsCreateInstanceMSDeployOperationSlotResponse,
  WebAppsGetInstanceMSDeployLogSlotResponse,
  WebAppsListInstanceProcessesSlotResponse,
  WebAppsGetInstanceProcessSlotResponse,
  WebAppsGetInstanceProcessDumpSlotResponse,
  WebAppsListInstanceProcessModulesSlotResponse,
  WebAppsGetInstanceProcessModuleSlotResponse,
  WebAppsListInstanceProcessThreadsSlotResponse,
  WebAppsIsCloneableSlotResponse,
  WebAppsListSiteBackupsSlotResponse,
  WebAppsListSyncFunctionTriggersSlotResponse,
  WebAppsGetMigrateMySqlStatusSlotResponse,
  WebAppsGetSwiftVirtualNetworkConnectionSlotResponse,
  WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse,
  WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse,
  WebAppsListNetworkFeaturesSlotResponse,
  WebAppsGetNetworkTraceOperationSlotResponse,
  WebAppsStartWebSiteNetworkTraceSlotOptionalParams,
  WebAppsStartWebSiteNetworkTraceSlotResponse,
  WebAppsStartWebSiteNetworkTraceOperationSlotOptionalParams,
  WebAppsStartWebSiteNetworkTraceOperationSlotResponse,
  WebAppsGetNetworkTracesSlotResponse,
  WebAppsGetNetworkTraceOperationSlotV2Response,
  WebAppsGetNetworkTracesSlotV2Response,
  WebAppsListPerfMonCountersSlotOptionalParams,
  WebAppsListPerfMonCountersSlotResponse,
  WebAppsGetSitePhpErrorLogFlagSlotResponse,
  WebAppsListPremierAddOnsSlotResponse,
  WebAppsGetPremierAddOnSlotResponse,
  WebAppsAddPremierAddOnSlotResponse,
  WebAppsUpdatePremierAddOnSlotResponse,
  WebAppsGetPrivateAccessSlotResponse,
  WebAppsPutPrivateAccessVnetSlotResponse,
  WebAppsGetPrivateEndpointConnectionResponse,
  PrivateLinkConnectionApprovalRequestResource,
  WebAppsApproveOrRejectPrivateEndpointConnectionResponse,
  WebAppsDeletePrivateEndpointConnectionResponse,
  WebAppsGetPrivateLinkResourcesResponse,
  WebAppsListProcessesSlotResponse,
  WebAppsGetProcessSlotResponse,
  WebAppsGetProcessDumpSlotResponse,
  WebAppsListProcessModulesSlotResponse,
  WebAppsGetProcessModuleSlotResponse,
  WebAppsListProcessThreadsSlotResponse,
  WebAppsListPublicCertificatesSlotResponse,
  WebAppsGetPublicCertificateSlotResponse,
  WebAppsCreateOrUpdatePublicCertificateSlotResponse,
  WebAppsListPublishingProfileXmlWithSecretsSlotResponse,
  WebAppsRestartSlotOptionalParams,
  WebAppsListSiteExtensionsSlotResponse,
  WebAppsGetSiteExtensionSlotResponse,
  WebAppsInstallSiteExtensionSlotResponse,
  WebAppsListSlotDifferencesSlotResponse,
  WebAppsListSnapshotsSlotResponse,
  WebAppsListSnapshotsFromDRSecondarySlotResponse,
  WebAppsGetSourceControlSlotResponse,
  SiteSourceControl,
  WebAppsCreateOrUpdateSourceControlSlotResponse,
  WebAppsUpdateSourceControlSlotResponse,
  WebAppsStartNetworkTraceSlotOptionalParams,
  WebAppsStartNetworkTraceSlotResponse,
  WebAppsListTriggeredWebJobsSlotResponse,
  WebAppsGetTriggeredWebJobSlotResponse,
  WebAppsListTriggeredWebJobHistorySlotResponse,
  WebAppsGetTriggeredWebJobHistorySlotResponse,
  WebAppsListUsagesSlotOptionalParams,
  WebAppsListUsagesSlotResponse,
  WebAppsListVnetConnectionsSlotResponse,
  WebAppsGetVnetConnectionSlotResponse,
  VnetInfo,
  WebAppsCreateOrUpdateVnetConnectionSlotResponse,
  WebAppsUpdateVnetConnectionSlotResponse,
  WebAppsGetVnetConnectionGatewaySlotResponse,
  VnetGateway,
  WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse,
  WebAppsUpdateVnetConnectionGatewaySlotResponse,
  WebAppsListWebJobsSlotResponse,
  WebAppsGetWebJobSlotResponse,
  WebAppsListSlotDifferencesFromProductionResponse,
  WebAppsListSnapshotsResponse,
  WebAppsListSnapshotsFromDRSecondaryResponse,
  WebAppsGetSourceControlResponse,
  WebAppsCreateOrUpdateSourceControlResponse,
  WebAppsUpdateSourceControlResponse,
  WebAppsStartNetworkTraceOptionalParams,
  WebAppsStartNetworkTraceResponse,
  WebAppsListTriggeredWebJobsResponse,
  WebAppsGetTriggeredWebJobResponse,
  WebAppsListTriggeredWebJobHistoryResponse,
  WebAppsGetTriggeredWebJobHistoryResponse,
  WebAppsListUsagesOptionalParams,
  WebAppsListUsagesResponse,
  WebAppsListVnetConnectionsResponse,
  WebAppsGetVnetConnectionResponse,
  WebAppsCreateOrUpdateVnetConnectionResponse,
  WebAppsUpdateVnetConnectionResponse,
  WebAppsGetVnetConnectionGatewayResponse,
  WebAppsCreateOrUpdateVnetConnectionGatewayResponse,
  WebAppsUpdateVnetConnectionGatewayResponse,
  WebAppsListWebJobsResponse,
  WebAppsGetWebJobResponse,
  WebAppsListNextResponse,
  WebAppsListByResourceGroupNextOptionalParams,
  WebAppsListByResourceGroupNextResponse,
  WebAppsListBackupsNextResponse,
  WebAppsListConfigurationsNextResponse,
  WebAppsListConfigurationSnapshotInfoNextResponse,
  WebAppsListContinuousWebJobsNextResponse,
  WebAppsListDeploymentsNextResponse,
  WebAppsListDomainOwnershipIdentifiersNextResponse,
  WebAppsListFunctionsNextResponse,
  WebAppsListHostNameBindingsNextResponse,
  WebAppsListInstanceIdentifiersNextResponse,
  WebAppsListInstanceProcessesNextResponse,
  WebAppsListInstanceProcessModulesNextResponse,
  WebAppsListInstanceProcessThreadsNextResponse,
  WebAppsListSiteBackupsNextResponse,
  WebAppsListPerfMonCountersNextOptionalParams,
  WebAppsListPerfMonCountersNextResponse,
  WebAppsListProcessesNextResponse,
  WebAppsListProcessModulesNextResponse,
  WebAppsListProcessThreadsNextResponse,
  WebAppsListPublicCertificatesNextResponse,
  WebAppsListSiteExtensionsNextResponse,
  WebAppsListSlotsNextResponse,
  WebAppsListBackupsSlotNextResponse,
  WebAppsListConfigurationsSlotNextResponse,
  WebAppsListConfigurationSnapshotInfoSlotNextResponse,
  WebAppsListContinuousWebJobsSlotNextResponse,
  WebAppsListDeploymentsSlotNextResponse,
  WebAppsListDomainOwnershipIdentifiersSlotNextResponse,
  WebAppsListInstanceFunctionsSlotNextResponse,
  WebAppsListHostNameBindingsSlotNextResponse,
  WebAppsListInstanceIdentifiersSlotNextResponse,
  WebAppsListInstanceProcessesSlotNextResponse,
  WebAppsListInstanceProcessModulesSlotNextResponse,
  WebAppsListInstanceProcessThreadsSlotNextResponse,
  WebAppsListSiteBackupsSlotNextResponse,
  WebAppsListPerfMonCountersSlotNextOptionalParams,
  WebAppsListPerfMonCountersSlotNextResponse,
  WebAppsListProcessesSlotNextResponse,
  WebAppsListProcessModulesSlotNextResponse,
  WebAppsListProcessThreadsSlotNextResponse,
  WebAppsListPublicCertificatesSlotNextResponse,
  WebAppsListSiteExtensionsSlotNextResponse,
  WebAppsListSlotDifferencesSlotNextResponse,
  WebAppsListSnapshotsSlotNextResponse,
  WebAppsListSnapshotsFromDRSecondarySlotNextResponse,
  WebAppsListTriggeredWebJobsSlotNextResponse,
  WebAppsListTriggeredWebJobHistorySlotNextResponse,
  WebAppsListUsagesSlotNextOptionalParams,
  WebAppsListUsagesSlotNextResponse,
  WebAppsListWebJobsSlotNextResponse,
  WebAppsListSlotDifferencesFromProductionNextResponse,
  WebAppsListSnapshotsNextResponse,
  WebAppsListSnapshotsFromDRSecondaryNextResponse,
  WebAppsListTriggeredWebJobsNextResponse,
  WebAppsListTriggeredWebJobHistoryNextResponse,
  WebAppsListUsagesNextOptionalParams,
  WebAppsListUsagesNextResponse,
  WebAppsListWebJobsNextResponse
} from "../models";

/**
 * Class representing a WebApps.
 */
export class WebApps {
  private readonly client: WebSiteManagementClient;

  /**
   * Initialize a new instance of the class WebApps class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClient) {
    this.client = client;
  }

  /**
   * Description for Get all apps for a subscription.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<WebAppsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<WebAppsListResponse>;
  }

  /**
   * Description for Gets all web, mobile, and API apps in the specified resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: WebAppsListByResourceGroupOptionalParams
  ): Promise<WebAppsListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<WebAppsListByResourceGroupResponse>;
  }

  /**
   * Description for Gets the details of a web, mobile, or API app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getOperationSpec
    ) as Promise<WebAppsGetResponse>;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    name: string,
    siteEnvelope: Site,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      siteEnvelope,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    name: string,
    options?: WebAppsDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    name: string,
    siteEnvelope: SitePatchResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteEnvelope, options: operationOptions },
      updateOperationSpec
    ) as Promise<WebAppsUpdateResponse>;
  }

  /**
   * Description for Analyze a custom hostname.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  analyzeCustomHostname(
    resourceGroupName: string,
    name: string,
    options?: WebAppsAnalyzeCustomHostnameOptionalParams
  ): Promise<WebAppsAnalyzeCustomHostnameResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      analyzeCustomHostnameOperationSpec
    ) as Promise<WebAppsAnalyzeCustomHostnameResponse>;
  }

  /**
   * Description for Applies the configuration settings from the target slot onto the current slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  applySlotConfigToProduction(
    resourceGroupName: string,
    name: string,
    slotSwapEntity: CsmSlotEntity,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slotSwapEntity, options: operationOptions },
      applySlotConfigToProductionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a backup of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   *                here.
   * @param options The options parameters.
   */
  backup(
    resourceGroupName: string,
    name: string,
    request: BackupRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsBackupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, request, options: operationOptions },
      backupOperationSpec
    ) as Promise<WebAppsBackupResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listBackups(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListBackupsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listBackupsOperationSpec
    ) as Promise<WebAppsListBackupsResponse>;
  }

  /**
   * Description for Gets a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param options The options parameters.
   */
  getBackupStatus(
    resourceGroupName: string,
    name: string,
    backupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetBackupStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, options: operationOptions },
      getBackupStatusOperationSpec
    ) as Promise<WebAppsGetBackupStatusResponse>;
  }

  /**
   * Description for Deletes a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param options The options parameters.
   */
  deleteBackup(
    resourceGroupName: string,
    name: string,
    backupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, options: operationOptions },
      deleteBackupOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets status of a web app backup that may be in progress, including secrets
   * associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS
   * URL for the backup if a new URL is passed in the request body.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param request Information on backup request.
   * @param options The options parameters.
   */
  listBackupStatusSecrets(
    resourceGroupName: string,
    name: string,
    backupId: string,
    request: BackupRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListBackupStatusSecretsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, request, options: operationOptions },
      listBackupStatusSecretsOperationSpec
    ) as Promise<WebAppsListBackupStatusSecretsResponse>;
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async restore(
    resourceGroupName: string,
    name: string,
    backupId: string,
    request: RestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      backupId,
      request,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for List the configurations of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listConfigurations(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConfigurationsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listConfigurationsOperationSpec
    ) as Promise<WebAppsListConfigurationsResponse>;
  }

  /**
   * Description for Replaces the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettings Application settings of the app.
   * @param options The options parameters.
   */
  updateApplicationSettings(
    resourceGroupName: string,
    name: string,
    appSettings: StringDictionary,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateApplicationSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, appSettings, options: operationOptions },
      updateApplicationSettingsOperationSpec
    ) as Promise<WebAppsUpdateApplicationSettingsResponse>;
  }

  /**
   * Description for Gets the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listApplicationSettings(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListApplicationSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listApplicationSettingsOperationSpec
    ) as Promise<WebAppsListApplicationSettingsResponse>;
  }

  /**
   * Description for Updates the Authentication / Authorization settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param options The options parameters.
   */
  updateAuthSettings(
    resourceGroupName: string,
    name: string,
    siteAuthSettings: SiteAuthSettings,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateAuthSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteAuthSettings, options: operationOptions },
      updateAuthSettingsOperationSpec
    ) as Promise<WebAppsUpdateAuthSettingsResponse>;
  }

  /**
   * Description for Gets the Authentication/Authorization settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getAuthSettings(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetAuthSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getAuthSettingsOperationSpec
    ) as Promise<WebAppsGetAuthSettingsResponse>;
  }

  /**
   * Description for Updates the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param options The options parameters.
   */
  updateAzureStorageAccounts(
    resourceGroupName: string,
    name: string,
    azureStorageAccounts: AzureStoragePropertyDictionaryResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateAzureStorageAccountsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        azureStorageAccounts,
        options: operationOptions
      },
      updateAzureStorageAccountsOperationSpec
    ) as Promise<WebAppsUpdateAzureStorageAccountsResponse>;
  }

  /**
   * Description for Gets the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listAzureStorageAccounts(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListAzureStorageAccountsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listAzureStorageAccountsOperationSpec
    ) as Promise<WebAppsListAzureStorageAccountsResponse>;
  }

  /**
   * Description for Updates the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Edited backup configuration.
   * @param options The options parameters.
   */
  updateBackupConfiguration(
    resourceGroupName: string,
    name: string,
    request: BackupRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateBackupConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, request, options: operationOptions },
      updateBackupConfigurationOperationSpec
    ) as Promise<WebAppsUpdateBackupConfigurationResponse>;
  }

  /**
   * Description for Deletes the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  deleteBackupConfiguration(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      deleteBackupConfigurationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getBackupConfiguration(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetBackupConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getBackupConfigurationOperationSpec
    ) as Promise<WebAppsGetBackupConfigurationResponse>;
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getAppSettingsKeyVaultReferences(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetAppSettingsKeyVaultReferencesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getAppSettingsKeyVaultReferencesOperationSpec
    ) as Promise<WebAppsGetAppSettingsKeyVaultReferencesResponse>;
  }

  /**
   * Description for Gets the config reference and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettingKey App Setting key name.
   * @param options The options parameters.
   */
  getAppSettingKeyVaultReference(
    resourceGroupName: string,
    name: string,
    appSettingKey: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetAppSettingKeyVaultReferenceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, appSettingKey, options: operationOptions },
      getAppSettingKeyVaultReferenceOperationSpec
    ) as Promise<WebAppsGetAppSettingKeyVaultReferenceResponse>;
  }

  /**
   * Description for Replaces the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param options The options parameters.
   */
  updateConnectionStrings(
    resourceGroupName: string,
    name: string,
    connectionStrings: ConnectionStringDictionary,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateConnectionStringsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, connectionStrings, options: operationOptions },
      updateConnectionStringsOperationSpec
    ) as Promise<WebAppsUpdateConnectionStringsResponse>;
  }

  /**
   * Description for Gets the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listConnectionStrings(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConnectionStringsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listConnectionStringsOperationSpec
    ) as Promise<WebAppsListConnectionStringsResponse>;
  }

  /**
   * Description for Gets the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getDiagnosticLogsConfiguration(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetDiagnosticLogsConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getDiagnosticLogsConfigurationOperationSpec
    ) as Promise<WebAppsGetDiagnosticLogsConfigurationResponse>;
  }

  /**
   * Description for Updates the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change
   *                       in the "properties" property.
   * @param options The options parameters.
   */
  updateDiagnosticLogsConfig(
    resourceGroupName: string,
    name: string,
    siteLogsConfig: SiteLogsConfig,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateDiagnosticLogsConfigResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteLogsConfig, options: operationOptions },
      updateDiagnosticLogsConfigOperationSpec
    ) as Promise<WebAppsUpdateDiagnosticLogsConfigResponse>;
  }

  /**
   * Description for Replaces the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param options The options parameters.
   */
  updateMetadata(
    resourceGroupName: string,
    name: string,
    metadata: StringDictionary,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateMetadataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, metadata, options: operationOptions },
      updateMetadataOperationSpec
    ) as Promise<WebAppsUpdateMetadataResponse>;
  }

  /**
   * Description for Gets the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listMetadata(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListMetadataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listMetadataOperationSpec
    ) as Promise<WebAppsListMetadataResponse>;
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  async listPublishingCredentials(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsListPublishingCredentialsResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsListPublishingCredentialsResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      listPublishingCredentialsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: listPublishingCredentialsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Updates the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param pushSettings Push settings associated with web app.
   * @param options The options parameters.
   */
  updateSitePushSettings(
    resourceGroupName: string,
    name: string,
    pushSettings: PushSettings,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateSitePushSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, pushSettings, options: operationOptions },
      updateSitePushSettingsOperationSpec
    ) as Promise<WebAppsUpdateSitePushSettingsResponse>;
  }

  /**
   * Description for Gets the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  listSitePushSettings(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSitePushSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSitePushSettingsOperationSpec
    ) as Promise<WebAppsListSitePushSettingsResponse>;
  }

  /**
   * Description for Gets the names of app settings and connection strings that stick to the slot (not
   * swapped).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listSlotConfigurationNames(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSlotConfigurationNamesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSlotConfigurationNamesOperationSpec
    ) as Promise<WebAppsListSlotConfigurationNamesResponse>;
  }

  /**
   * Description for Updates the names of application settings and connection string that remain with the
   * slot during swap operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotConfigNames Names of application settings and connection strings. See example.
   * @param options The options parameters.
   */
  updateSlotConfigurationNames(
    resourceGroupName: string,
    name: string,
    slotConfigNames: SlotConfigNamesResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateSlotConfigurationNamesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slotConfigNames, options: operationOptions },
      updateSlotConfigurationNamesOperationSpec
    ) as Promise<WebAppsUpdateSlotConfigurationNamesResponse>;
  }

  /**
   * Description for Gets the configuration of an app, such as platform version and bitness, default
   * documents, virtual applications, Always On, etc.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getConfiguration(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getConfigurationOperationSpec
    ) as Promise<WebAppsGetConfigurationResponse>;
  }

  /**
   * Description for Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The options parameters.
   */
  createOrUpdateConfiguration(
    resourceGroupName: string,
    name: string,
    siteConfig: SiteConfigResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteConfig, options: operationOptions },
      createOrUpdateConfigurationOperationSpec
    ) as Promise<WebAppsCreateOrUpdateConfigurationResponse>;
  }

  /**
   * Description for Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The options parameters.
   */
  updateConfiguration(
    resourceGroupName: string,
    name: string,
    siteConfig: SiteConfigResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteConfig, options: operationOptions },
      updateConfigurationOperationSpec
    ) as Promise<WebAppsUpdateConfigurationResponse>;
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listConfigurationSnapshotInfo(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConfigurationSnapshotInfoResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listConfigurationSnapshotInfoOperationSpec
    ) as Promise<WebAppsListConfigurationSnapshotInfoResponse>;
  }

  /**
   * Description for Gets a snapshot of the configuration of an app at a previous point in time.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param options The options parameters.
   */
  getConfigurationSnapshot(
    resourceGroupName: string,
    name: string,
    snapshotId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetConfigurationSnapshotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, snapshotId, options: operationOptions },
      getConfigurationSnapshotOperationSpec
    ) as Promise<WebAppsGetConfigurationSnapshotResponse>;
  }

  /**
   * Description for Reverts the configuration of an app to a previous snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param options The options parameters.
   */
  recoverSiteConfigurationSnapshot(
    resourceGroupName: string,
    name: string,
    snapshotId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, snapshotId, options: operationOptions },
      recoverSiteConfigurationSnapshotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the last lines of docker logs for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getWebSiteContainerLogs(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetWebSiteContainerLogsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getWebSiteContainerLogsOperationSpec
    ) as Promise<WebAppsGetWebSiteContainerLogsResponse>;
  }

  /**
   * Description for Gets the ZIP archived docker log files for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getContainerLogsZip(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetContainerLogsZipResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getContainerLogsZipOperationSpec
    ) as Promise<WebAppsGetContainerLogsZipResponse>;
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  listContinuousWebJobs(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListContinuousWebJobsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listContinuousWebJobsOperationSpec
    ) as Promise<WebAppsListContinuousWebJobsResponse>;
  }

  /**
   * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  getContinuousWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetContinuousWebJobResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      getContinuousWebJobOperationSpec
    ) as Promise<WebAppsGetContinuousWebJobResponse>;
  }

  /**
   * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  deleteContinuousWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      deleteContinuousWebJobOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Start a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  startContinuousWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      startContinuousWebJobOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Stop a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  stopContinuousWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      stopContinuousWebJobOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listDeployments(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDeploymentsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listDeploymentsOperationSpec
    ) as Promise<WebAppsListDeploymentsResponse>;
  }

  /**
   * Description for Get a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param options The options parameters.
   */
  getDeployment(
    resourceGroupName: string,
    name: string,
    id: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetDeploymentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, options: operationOptions },
      getDeploymentOperationSpec
    ) as Promise<WebAppsGetDeploymentResponse>;
  }

  /**
   * Description for Create a deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param deployment Deployment details.
   * @param options The options parameters.
   */
  createDeployment(
    resourceGroupName: string,
    name: string,
    id: string,
    deployment: Deployment,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateDeploymentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, deployment, options: operationOptions },
      createDeploymentOperationSpec
    ) as Promise<WebAppsCreateDeploymentResponse>;
  }

  /**
   * Description for Delete a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param options The options parameters.
   */
  deleteDeployment(
    resourceGroupName: string,
    name: string,
    id: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, options: operationOptions },
      deleteDeploymentOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for List deployment log for specific deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   *           response from "GET /api/sites/{siteName}/deployments".
   * @param options The options parameters.
   */
  listDeploymentLog(
    resourceGroupName: string,
    name: string,
    id: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDeploymentLogResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, options: operationOptions },
      listDeploymentLogOperationSpec
    ) as Promise<WebAppsListDeploymentLogResponse>;
  }

  /**
   * Description for Discovers an existing app backup that can be restored from a blob in Azure storage.
   * Use this to get information about the databases stored in a backup.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery
   *                of backup.
   * @param options The options parameters.
   */
  discoverBackup(
    resourceGroupName: string,
    name: string,
    request: RestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsDiscoverBackupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, request, options: operationOptions },
      discoverBackupOperationSpec
    ) as Promise<WebAppsDiscoverBackupResponse>;
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listDomainOwnershipIdentifiers(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDomainOwnershipIdentifiersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listDomainOwnershipIdentifiersOperationSpec
    ) as Promise<WebAppsListDomainOwnershipIdentifiersResponse>;
  }

  /**
   * Description for Get domain ownership identifier for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param options The options parameters.
   */
  getDomainOwnershipIdentifier(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetDomainOwnershipIdentifierResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        options: operationOptions
      },
      getDomainOwnershipIdentifierOperationSpec
    ) as Promise<WebAppsGetDomainOwnershipIdentifierResponse>;
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The options parameters.
   */
  createOrUpdateDomainOwnershipIdentifier(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    domainOwnershipIdentifier: Identifier,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        domainOwnershipIdentifier,
        options: operationOptions
      },
      createOrUpdateDomainOwnershipIdentifierOperationSpec
    ) as Promise<WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse>;
  }

  /**
   * Description for Deletes a domain ownership identifier for a web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param options The options parameters.
   */
  deleteDomainOwnershipIdentifier(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        options: operationOptions
      },
      deleteDomainOwnershipIdentifierOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The options parameters.
   */
  updateDomainOwnershipIdentifier(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    domainOwnershipIdentifier: Identifier,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateDomainOwnershipIdentifierResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        domainOwnershipIdentifier,
        options: operationOptions
      },
      updateDomainOwnershipIdentifierOperationSpec
    ) as Promise<WebAppsUpdateDomainOwnershipIdentifierResponse>;
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getMSDeployStatus(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetMSDeployStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getMSDeployStatusOperationSpec
    ) as Promise<WebAppsGetMSDeployStatusResponse>;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async createMSDeployOperation(
    resourceGroupName: string,
    name: string,
    mSDeploy: MSDeploy,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateMSDeployOperationResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      mSDeploy,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateMSDeployOperationResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createMSDeployOperationOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createMSDeployOperationOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getMSDeployLog(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetMSDeployLogResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getMSDeployLogOperationSpec
    ) as Promise<WebAppsGetMSDeployLogResponse>;
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  listFunctions(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListFunctionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listFunctionsOperationSpec
    ) as Promise<WebAppsListFunctionsResponse>;
  }

  /**
   * Description for Fetch a short lived token that can be exchanged for a master key.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getFunctionsAdminToken(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetFunctionsAdminTokenResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getFunctionsAdminTokenOperationSpec
    ) as Promise<WebAppsGetFunctionsAdminTokenResponse>;
  }

  /**
   * Description for Get function information by its ID for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The options parameters.
   */
  getFunction(
    resourceGroupName: string,
    name: string,
    functionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetFunctionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, options: operationOptions },
      getFunctionOperationSpec
    ) as Promise<WebAppsGetFunctionResponse>;
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param functionEnvelope Function details.
   * @param options The options parameters.
   */
  async createFunction(
    resourceGroupName: string,
    name: string,
    functionName: string,
    functionEnvelope: FunctionEnvelope,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateFunctionResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      functionName,
      functionEnvelope,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateFunctionResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createFunctionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createFunctionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Delete a function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The options parameters.
   */
  deleteFunction(
    resourceGroupName: string,
    name: string,
    functionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, options: operationOptions },
      deleteFunctionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Add or update a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param options The options parameters.
   */
  createOrUpdateFunctionSecret(
    resourceGroupName: string,
    name: string,
    functionName: string,
    keyName: string,
    key: KeyInfo,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateFunctionSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        keyName,
        key,
        options: operationOptions
      },
      createOrUpdateFunctionSecretOperationSpec
    ) as Promise<WebAppsCreateOrUpdateFunctionSecretResponse>;
  }

  /**
   * Description for Delete a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param options The options parameters.
   */
  deleteFunctionSecret(
    resourceGroupName: string,
    name: string,
    functionName: string,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        keyName,
        options: operationOptions
      },
      deleteFunctionSecretOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get function keys for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The options parameters.
   */
  listFunctionKeys(
    resourceGroupName: string,
    name: string,
    functionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListFunctionKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, options: operationOptions },
      listFunctionKeysOperationSpec
    ) as Promise<WebAppsListFunctionKeysResponse>;
  }

  /**
   * Description for Get function secrets for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The options parameters.
   */
  listFunctionSecrets(
    resourceGroupName: string,
    name: string,
    functionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListFunctionSecretsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, options: operationOptions },
      listFunctionSecretsOperationSpec
    ) as Promise<WebAppsListFunctionSecretsResponse>;
  }

  /**
   * Description for Get host secrets for a function app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  listHostKeys(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListHostKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listHostKeysOperationSpec
    ) as Promise<WebAppsListHostKeysResponse>;
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listSyncStatus(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSyncStatusOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  syncFunctions(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      syncFunctionsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Add or update a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param options The options parameters.
   */
  createOrUpdateHostSecret(
    resourceGroupName: string,
    name: string,
    keyType: string,
    keyName: string,
    key: KeyInfo,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateHostSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        keyType,
        keyName,
        key,
        options: operationOptions
      },
      createOrUpdateHostSecretOperationSpec
    ) as Promise<WebAppsCreateOrUpdateHostSecretResponse>;
  }

  /**
   * Description for Delete a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param options The options parameters.
   */
  deleteHostSecret(
    resourceGroupName: string,
    name: string,
    keyType: string,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyType, keyName, options: operationOptions },
      deleteHostSecretOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listHostNameBindings(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListHostNameBindingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listHostNameBindingsOperationSpec
    ) as Promise<WebAppsListHostNameBindingsResponse>;
  }

  /**
   * Description for Get the named hostname binding for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param options The options parameters.
   */
  getHostNameBinding(
    resourceGroupName: string,
    name: string,
    hostName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetHostNameBindingResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, hostName, options: operationOptions },
      getHostNameBindingOperationSpec
    ) as Promise<WebAppsGetHostNameBindingResponse>;
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object.
   * @param options The options parameters.
   */
  createOrUpdateHostNameBinding(
    resourceGroupName: string,
    name: string,
    hostName: string,
    hostNameBinding: HostNameBinding,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateHostNameBindingResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        hostNameBinding,
        options: operationOptions
      },
      createOrUpdateHostNameBindingOperationSpec
    ) as Promise<WebAppsCreateOrUpdateHostNameBindingResponse>;
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param options The options parameters.
   */
  deleteHostNameBinding(
    resourceGroupName: string,
    name: string,
    hostName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, hostName, options: operationOptions },
      deleteHostNameBindingOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param options The options parameters.
   */
  getHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetHybridConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options: operationOptions
      },
      getHybridConnectionOperationSpec
    ) as Promise<WebAppsGetHybridConnectionResponse>;
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The options parameters.
   */
  createOrUpdateHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    connectionEnvelope: HybridConnection,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateHybridConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateHybridConnectionOperationSpec
    ) as Promise<WebAppsCreateOrUpdateHybridConnectionResponse>;
  }

  /**
   * Description for Removes a Hybrid Connection from this site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param options The options parameters.
   */
  deleteHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        options: operationOptions
      },
      deleteHybridConnectionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The options parameters.
   */
  updateHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    connectionEnvelope: HybridConnection,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateHybridConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        connectionEnvelope,
        options: operationOptions
      },
      updateHybridConnectionOperationSpec
    ) as Promise<WebAppsUpdateHybridConnectionResponse>;
  }

  /**
   * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  listHybridConnections(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListHybridConnectionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listHybridConnectionsOperationSpec
    ) as Promise<WebAppsListHybridConnectionsResponse>;
  }

  /**
   * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listRelayServiceConnections(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListRelayServiceConnectionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listRelayServiceConnectionsOperationSpec
    ) as Promise<WebAppsListRelayServiceConnectionsResponse>;
  }

  /**
   * Description for Gets a hybrid connection configuration by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param options The options parameters.
   */
  getRelayServiceConnection(
    resourceGroupName: string,
    name: string,
    entityName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetRelayServiceConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, options: operationOptions },
      getRelayServiceConnectionOperationSpec
    ) as Promise<WebAppsGetRelayServiceConnectionResponse>;
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The options parameters.
   */
  createOrUpdateRelayServiceConnection(
    resourceGroupName: string,
    name: string,
    entityName: string,
    connectionEnvelope: RelayServiceConnectionEntity,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateRelayServiceConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateRelayServiceConnectionOperationSpec
    ) as Promise<WebAppsCreateOrUpdateRelayServiceConnectionResponse>;
  }

  /**
   * Description for Deletes a relay service connection by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param options The options parameters.
   */
  deleteRelayServiceConnection(
    resourceGroupName: string,
    name: string,
    entityName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, options: operationOptions },
      deleteRelayServiceConnectionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The options parameters.
   */
  updateRelayServiceConnection(
    resourceGroupName: string,
    name: string,
    entityName: string,
    connectionEnvelope: RelayServiceConnectionEntity,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateRelayServiceConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        options: operationOptions
      },
      updateRelayServiceConnectionOperationSpec
    ) as Promise<WebAppsUpdateRelayServiceConnectionResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listInstanceIdentifiers(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceIdentifiersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listInstanceIdentifiersOperationSpec
    ) as Promise<WebAppsListInstanceIdentifiersResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param options The options parameters.
   */
  getInstanceInfo(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceInfoResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, options: operationOptions },
      getInstanceInfoOperationSpec
    ) as Promise<WebAppsGetInstanceInfoResponse>;
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param options The options parameters.
   */
  getInstanceMsDeployStatus(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceMsDeployStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, options: operationOptions },
      getInstanceMsDeployStatusOperationSpec
    ) as Promise<WebAppsGetInstanceMsDeployStatusResponse>;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async createInstanceMSDeployOperation(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    mSDeploy: MSDeploy,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateInstanceMSDeployOperationResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      instanceId,
      mSDeploy,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateInstanceMSDeployOperationResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createInstanceMSDeployOperationOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createInstanceMSDeployOperationOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param options The options parameters.
   */
  getInstanceMSDeployLog(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceMSDeployLogResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, options: operationOptions },
      getInstanceMSDeployLogOperationSpec
    ) as Promise<WebAppsGetInstanceMSDeployLogResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  listInstanceProcesses(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, options: operationOptions },
      listInstanceProcessesOperationSpec
    ) as Promise<WebAppsListInstanceProcessesResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcess(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceProcessResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options: operationOptions
      },
      getInstanceProcessOperationSpec
    ) as Promise<WebAppsGetInstanceProcessResponse>;
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  deleteInstanceProcess(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options: operationOptions
      },
      deleteInstanceProcessOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessDump(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceProcessDumpResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options: operationOptions
      },
      getInstanceProcessDumpOperationSpec
    ) as Promise<WebAppsGetInstanceProcessDumpResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  listInstanceProcessModules(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessModulesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options: operationOptions
      },
      listInstanceProcessModulesOperationSpec
    ) as Promise<WebAppsListInstanceProcessModulesResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessModule(
    resourceGroupName: string,
    name: string,
    processId: string,
    baseAddress: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceProcessModuleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        instanceId,
        options: operationOptions
      },
      getInstanceProcessModuleOperationSpec
    ) as Promise<WebAppsGetInstanceProcessModuleResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  listInstanceProcessThreads(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessThreadsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        options: operationOptions
      },
      listInstanceProcessThreadsOperationSpec
    ) as Promise<WebAppsListInstanceProcessThreadsResponse>;
  }

  /**
   * Description for Shows whether an app can be cloned to another resource group or subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  isCloneable(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsIsCloneableResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      isCloneableOperationSpec
    ) as Promise<WebAppsIsCloneableResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listSiteBackups(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSiteBackupsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSiteBackupsOperationSpec
    ) as Promise<WebAppsListSiteBackupsResponse>;
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listSyncFunctionTriggers(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSyncFunctionTriggersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSyncFunctionTriggersOperationSpec
    ) as Promise<WebAppsListSyncFunctionTriggersResponse>;
  }

  /**
   * Description for Restores a web app.
   * @param subscriptionName Azure subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationOptions Migration migrationOptions.
   * @param options The options parameters.
   */
  async migrateStorage(
    subscriptionName: string,
    resourceGroupName: string,
    name: string,
    migrationOptions: StorageMigrationOptions,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsMigrateStorageResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      subscriptionName,
      resourceGroupName,
      name,
      migrationOptions,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsMigrateStorageResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      migrateStorageOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: migrateStorageOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Migrates a local (in-app) MySql database to a remote MySql database.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationRequestEnvelope MySql migration options.
   * @param options The options parameters.
   */
  async migrateMySql(
    resourceGroupName: string,
    name: string,
    migrationRequestEnvelope: MigrateMySqlRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsMigrateMySqlResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      migrationRequestEnvelope,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsMigrateMySqlResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      migrateMySqlOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: migrateMySqlOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Returns the status of MySql in app migration, if one is active, and whether or not
   * MySql in app is enabled
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getMigrateMySqlStatus(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetMigrateMySqlStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getMigrateMySqlStatusOperationSpec
    ) as Promise<WebAppsGetMigrateMySqlStatusResponse>;
  }

  /**
   * Description for Gets a Swift Virtual Network connection.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getSwiftVirtualNetworkConnection(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSwiftVirtualNetworkConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getSwiftVirtualNetworkConnectionOperationSpec
    ) as Promise<WebAppsGetSwiftVirtualNetworkConnectionResponse>;
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has
   * already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  createOrUpdateSwiftVirtualNetworkConnection(
    resourceGroupName: string,
    name: string,
    connectionEnvelope: SwiftVirtualNetwork,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateSwiftVirtualNetworkConnectionOperationSpec
    ) as Promise<WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse>;
  }

  /**
   * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  deleteSwiftVirtualNetwork(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      deleteSwiftVirtualNetworkOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has
   * already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  updateSwiftVirtualNetworkConnection(
    resourceGroupName: string,
    name: string,
    connectionEnvelope: SwiftVirtualNetwork,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateSwiftVirtualNetworkConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionEnvelope,
        options: operationOptions
      },
      updateSwiftVirtualNetworkConnectionOperationSpec
    ) as Promise<WebAppsUpdateSwiftVirtualNetworkConnectionResponse>;
  }

  /**
   * Description for Gets all network features used by the app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param options The options parameters.
   */
  listNetworkFeatures(
    resourceGroupName: string,
    name: string,
    view: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListNetworkFeaturesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, view, options: operationOptions },
      listNetworkFeaturesOperationSpec
    ) as Promise<WebAppsListNetworkFeaturesResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The options parameters.
   */
  getNetworkTraceOperation(
    resourceGroupName: string,
    name: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetNetworkTraceOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, options: operationOptions },
      getNetworkTraceOperationOperationSpec
    ) as Promise<WebAppsGetNetworkTraceOperationResponse>;
  }

  /**
   * Description for Start capturing network packets for the site (To be deprecated).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  startWebSiteNetworkTrace(
    resourceGroupName: string,
    name: string,
    options?: WebAppsStartWebSiteNetworkTraceOptionalParams
  ): Promise<WebAppsStartWebSiteNetworkTraceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      startWebSiteNetworkTraceOperationSpec
    ) as Promise<WebAppsStartWebSiteNetworkTraceResponse>;
  }

  /**
   * Description for Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  async startWebSiteNetworkTraceOperation(
    resourceGroupName: string,
    name: string,
    options?: WebAppsStartWebSiteNetworkTraceOperationOptionalParams
  ): Promise<LROPoller<WebAppsStartWebSiteNetworkTraceOperationResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsStartWebSiteNetworkTraceOperationResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      startWebSiteNetworkTraceOperationOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: startWebSiteNetworkTraceOperationOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  stopWebSiteNetworkTrace(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      stopWebSiteNetworkTraceOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The options parameters.
   */
  getNetworkTraces(
    resourceGroupName: string,
    name: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetNetworkTracesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, options: operationOptions },
      getNetworkTracesOperationSpec
    ) as Promise<WebAppsGetNetworkTracesResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The options parameters.
   */
  getNetworkTraceOperationV2(
    resourceGroupName: string,
    name: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetNetworkTraceOperationV2Response> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, options: operationOptions },
      getNetworkTraceOperationV2OperationSpec
    ) as Promise<WebAppsGetNetworkTraceOperationV2Response>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The options parameters.
   */
  getNetworkTracesV2(
    resourceGroupName: string,
    name: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetNetworkTracesV2Response> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, options: operationOptions },
      getNetworkTracesV2OperationSpec
    ) as Promise<WebAppsGetNetworkTracesV2Response>;
  }

  /**
   * Description for Generates a new publishing password for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  generateNewSitePublishingPassword(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      generateNewSitePublishingPasswordOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  listPerfMonCounters(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPerfMonCountersOptionalParams
  ): Promise<WebAppsListPerfMonCountersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listPerfMonCountersOperationSpec
    ) as Promise<WebAppsListPerfMonCountersResponse>;
  }

  /**
   * Description for Gets web app's event logs.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getSitePhpErrorLogFlag(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSitePhpErrorLogFlagResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getSitePhpErrorLogFlagOperationSpec
    ) as Promise<WebAppsGetSitePhpErrorLogFlagResponse>;
  }

  /**
   * Description for Gets the premier add-ons of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listPremierAddOns(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListPremierAddOnsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listPremierAddOnsOperationSpec
    ) as Promise<WebAppsListPremierAddOnsResponse>;
  }

  /**
   * Description for Gets a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param options The options parameters.
   */
  getPremierAddOn(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetPremierAddOnResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, premierAddOnName, options: operationOptions },
      getPremierAddOnOperationSpec
    ) as Promise<WebAppsGetPremierAddOnResponse>;
  }

  /**
   * Description for Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The options parameters.
   */
  addPremierAddOn(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    premierAddOn: PremierAddOn,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsAddPremierAddOnResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        premierAddOn,
        options: operationOptions
      },
      addPremierAddOnOperationSpec
    ) as Promise<WebAppsAddPremierAddOnResponse>;
  }

  /**
   * Description for Delete a premier add-on from an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param options The options parameters.
   */
  deletePremierAddOn(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, premierAddOnName, options: operationOptions },
      deletePremierAddOnOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The options parameters.
   */
  updatePremierAddOn(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    premierAddOn: PremierAddOnPatchResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdatePremierAddOnResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        premierAddOn,
        options: operationOptions
      },
      updatePremierAddOnOperationSpec
    ) as Promise<WebAppsUpdatePremierAddOnResponse>;
  }

  /**
   * Description for Gets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  getPrivateAccess(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetPrivateAccessResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getPrivateAccessOperationSpec
    ) as Promise<WebAppsGetPrivateAccessResponse>;
  }

  /**
   * Description for Sets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param access The information for the private access
   * @param options The options parameters.
   */
  putPrivateAccessVnet(
    resourceGroupName: string,
    name: string,
    access: PrivateAccess,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsPutPrivateAccessVnetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, access, options: operationOptions },
      putPrivateAccessVnetOperationSpec
    ) as Promise<WebAppsPutPrivateAccessVnetResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  listProcesses(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listProcessesOperationSpec
    ) as Promise<WebAppsListProcessesResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  getProcess(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetProcessResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options: operationOptions },
      getProcessOperationSpec
    ) as Promise<WebAppsGetProcessResponse>;
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  deleteProcess(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options: operationOptions },
      deleteProcessOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  getProcessDump(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetProcessDumpResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options: operationOptions },
      getProcessDumpOperationSpec
    ) as Promise<WebAppsGetProcessDumpResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  listProcessModules(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessModulesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options: operationOptions },
      listProcessModulesOperationSpec
    ) as Promise<WebAppsListProcessModulesResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param options The options parameters.
   */
  getProcessModule(
    resourceGroupName: string,
    name: string,
    processId: string,
    baseAddress: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetProcessModuleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        options: operationOptions
      },
      getProcessModuleOperationSpec
    ) as Promise<WebAppsGetProcessModuleResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  listProcessThreads(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessThreadsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options: operationOptions },
      listProcessThreadsOperationSpec
    ) as Promise<WebAppsListProcessThreadsResponse>;
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listPublicCertificates(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListPublicCertificatesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listPublicCertificatesOperationSpec
    ) as Promise<WebAppsListPublicCertificatesResponse>;
  }

  /**
   * Description for Get the named public certificate for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param options The options parameters.
   */
  getPublicCertificate(
    resourceGroupName: string,
    name: string,
    publicCertificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetPublicCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        options: operationOptions
      },
      getPublicCertificateOperationSpec
    ) as Promise<WebAppsGetPublicCertificateResponse>;
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   *                          PublicCertificate object.
   * @param options The options parameters.
   */
  createOrUpdatePublicCertificate(
    resourceGroupName: string,
    name: string,
    publicCertificateName: string,
    publicCertificate: PublicCertificate,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdatePublicCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        publicCertificate,
        options: operationOptions
      },
      createOrUpdatePublicCertificateOperationSpec
    ) as Promise<WebAppsCreateOrUpdatePublicCertificateResponse>;
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param options The options parameters.
   */
  deletePublicCertificate(
    resourceGroupName: string,
    name: string,
    publicCertificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        options: operationOptions
      },
      deletePublicCertificateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the publishing profile for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   *                                 example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param options The options parameters.
   */
  listPublishingProfileXmlWithSecrets(
    resourceGroupName: string,
    name: string,
    publishingProfileOptions: CsmPublishingProfileOptions,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListPublishingProfileXmlWithSecretsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publishingProfileOptions,
        options: operationOptions
      },
      listPublishingProfileXmlWithSecretsOperationSpec
    ) as Promise<WebAppsListPublishingProfileXmlWithSecretsResponse>;
  }

  /**
   * Description for Resets the configuration settings of the current slot if they were previously
   * modified by calling the API with POST.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  resetProductionSlotConfig(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      resetProductionSlotConfigOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Restarts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  restart(
    resourceGroupName: string,
    name: string,
    options?: WebAppsRestartOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      restartOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Restores an app from a backup blob in Azure Storage.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async restoreFromBackupBlob(
    resourceGroupName: string,
    name: string,
    request: RestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      request,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreFromBackupBlobOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreFromBackupBlobOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Restores a deleted web app to this web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Deleted web app restore information.
   * @param options The options parameters.
   */
  async restoreFromDeletedApp(
    resourceGroupName: string,
    name: string,
    restoreRequest: DeletedAppRestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      restoreRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreFromDeletedAppOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreFromDeletedAppOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Restores a web app from a snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
   *                       GetDeletedSites or GetSiteSnapshots API.
   * @param options The options parameters.
   */
  async restoreSnapshot(
    resourceGroupName: string,
    name: string,
    restoreRequest: SnapshotRestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      restoreRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreSnapshotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreSnapshotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  listSiteExtensions(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSiteExtensionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSiteExtensionsOperationSpec
    ) as Promise<WebAppsListSiteExtensionsResponse>;
  }

  /**
   * Description for Get site extension information by its ID for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The options parameters.
   */
  getSiteExtension(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSiteExtensionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteExtensionId, options: operationOptions },
      getSiteExtensionOperationSpec
    ) as Promise<WebAppsGetSiteExtensionResponse>;
  }

  /**
   * Description for Install site extension on a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The options parameters.
   */
  async installSiteExtension(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsInstallSiteExtensionResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      siteExtensionId,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsInstallSiteExtensionResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      installSiteExtensionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: installSiteExtensionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Remove a site extension from a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The options parameters.
   */
  deleteSiteExtension(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteExtensionId, options: operationOptions },
      deleteSiteExtensionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Copies a deployment slot to another deployment slot of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param copySlotEntity JSON object that contains the target slot name and site config properties to
   *                       override the source slot config. See example.
   * @param options The options parameters.
   */
  async copyProductionSlot(
    resourceGroupName: string,
    name: string,
    copySlotEntity: CsmCopySlotEntity,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      copySlotEntity,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      copyProductionSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: copyProductionSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Gets an app's deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listSlots(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSlotsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSlotsOperationSpec
    ) as Promise<WebAppsListSlotsResponse>;
  }

  /**
   * Description for Gets the details of a web, mobile, or API app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns the production slot.
   * @param options The options parameters.
   */
  getSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getSlotOperationSpec
    ) as Promise<WebAppsGetSlotResponse>;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to create
   *             or modify the production slot.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  async createOrUpdateSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteEnvelope: Site,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateOrUpdateSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      siteEnvelope,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateOrUpdateSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param slot Name of the deployment slot to delete. By default, the API deletes the production slot.
   * @param options The options parameters.
   */
  deleteSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsDeleteSlotOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      deleteSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to create
   *             or modify the production slot.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  updateSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteEnvelope: SitePatchResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        siteEnvelope,
        options: operationOptions
      },
      updateSlotOperationSpec
    ) as Promise<WebAppsUpdateSlotResponse>;
  }

  /**
   * Description for Analyze a custom hostname.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  analyzeCustomHostnameSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsAnalyzeCustomHostnameSlotOptionalParams
  ): Promise<WebAppsAnalyzeCustomHostnameSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      analyzeCustomHostnameSlotOperationSpec
    ) as Promise<WebAppsAnalyzeCustomHostnameSlotResponse>;
  }

  /**
   * Description for Applies the configuration settings from the target slot onto the current slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the
   *             source slot.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  applySlotConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    slotSwapEntity: CsmSlotEntity,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        slotSwapEntity,
        options: operationOptions
      },
      applySlotConfigurationSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a backup of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a backup
   *             for the production slot.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   *                here.
   * @param options The options parameters.
   */
  backupSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    request: BackupRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsBackupSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, request, options: operationOptions },
      backupSlotOperationSpec
    ) as Promise<WebAppsBackupSlotResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the
   *             production slot.
   * @param options The options parameters.
   */
  listBackupsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListBackupsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listBackupsSlotOperationSpec
    ) as Promise<WebAppsListBackupsSlotResponse>;
  }

  /**
   * Description for Gets a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup of
   *             the production slot.
   * @param options The options parameters.
   */
  getBackupStatusSlot(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetBackupStatusSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, slot, options: operationOptions },
      getBackupStatusSlotOperationSpec
    ) as Promise<WebAppsGetBackupStatusSlotResponse>;
  }

  /**
   * Description for Deletes a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a backup of
   *             the production slot.
   * @param options The options parameters.
   */
  deleteBackupSlot(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, slot, options: operationOptions },
      deleteBackupSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets status of a web app backup that may be in progress, including secrets
   * associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS
   * URL for the backup if a new URL is passed in the request body.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param request Information on backup request.
   * @param options The options parameters.
   */
  listBackupStatusSecretsSlot(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    request: BackupRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListBackupStatusSecretsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        slot,
        request,
        options: operationOptions
      },
      listBackupStatusSecretsSlotOperationSpec
    ) as Promise<WebAppsListBackupStatusSecretsSlotResponse>;
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup
   *             of the production slot.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async restoreSlot(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    request: RestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      backupId,
      slot,
      request,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for List the configurations of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  listConfigurationsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConfigurationsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listConfigurationsSlotOperationSpec
    ) as Promise<WebAppsListConfigurationsSlotResponse>;
  }

  /**
   * Description for Replaces the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   *             application settings for the production slot.
   * @param appSettings Application settings of the app.
   * @param options The options parameters.
   */
  updateApplicationSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    appSettings: StringDictionary,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateApplicationSettingsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, appSettings, options: operationOptions },
      updateApplicationSettingsSlotOperationSpec
    ) as Promise<WebAppsUpdateApplicationSettingsSlotResponse>;
  }

  /**
   * Description for Gets the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   *             application settings for the production slot.
   * @param options The options parameters.
   */
  listApplicationSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListApplicationSettingsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listApplicationSettingsSlotOperationSpec
    ) as Promise<WebAppsListApplicationSettingsSlotResponse>;
  }

  /**
   * Description for Updates the Authentication / Authorization settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param options The options parameters.
   */
  updateAuthSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteAuthSettings: SiteAuthSettings,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateAuthSettingsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        siteAuthSettings,
        options: operationOptions
      },
      updateAuthSettingsSlotOperationSpec
    ) as Promise<WebAppsUpdateAuthSettingsSlotResponse>;
  }

  /**
   * Description for Gets the Authentication/Authorization settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings
   *             for the production slot.
   * @param options The options parameters.
   */
  getAuthSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetAuthSettingsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getAuthSettingsSlotOperationSpec
    ) as Promise<WebAppsGetAuthSettingsSlotResponse>;
  }

  /**
   * Description for Updates the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure
   *             storage account configurations for the production slot.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param options The options parameters.
   */
  updateAzureStorageAccountsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    azureStorageAccounts: AzureStoragePropertyDictionaryResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateAzureStorageAccountsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        azureStorageAccounts,
        options: operationOptions
      },
      updateAzureStorageAccountsSlotOperationSpec
    ) as Promise<WebAppsUpdateAzureStorageAccountsSlotResponse>;
  }

  /**
   * Description for Gets the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure
   *             storage account configurations for the production slot.
   * @param options The options parameters.
   */
  listAzureStorageAccountsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListAzureStorageAccountsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listAzureStorageAccountsSlotOperationSpec
    ) as Promise<WebAppsListAzureStorageAccountsSlotResponse>;
  }

  /**
   * Description for Updates the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the backup
   *             configuration for the production slot.
   * @param request Edited backup configuration.
   * @param options The options parameters.
   */
  updateBackupConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    request: BackupRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateBackupConfigurationSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, request, options: operationOptions },
      updateBackupConfigurationSlotOperationSpec
    ) as Promise<WebAppsUpdateBackupConfigurationSlotResponse>;
  }

  /**
   * Description for Deletes the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the backup
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  deleteBackupConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      deleteBackupConfigurationSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  getBackupConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetBackupConfigurationSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getBackupConfigurationSlotOperationSpec
    ) as Promise<WebAppsGetBackupConfigurationSlotResponse>;
  }

  /**
   * Description for Replaces the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   *             connection settings for the production slot.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param options The options parameters.
   */
  updateConnectionStringsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    connectionStrings: ConnectionStringDictionary,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateConnectionStringsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        connectionStrings,
        options: operationOptions
      },
      updateConnectionStringsSlotOperationSpec
    ) as Promise<WebAppsUpdateConnectionStringsSlotResponse>;
  }

  /**
   * Description for Gets the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the connection
   *             settings for the production slot.
   * @param options The options parameters.
   */
  listConnectionStringsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConnectionStringsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listConnectionStringsSlotOperationSpec
    ) as Promise<WebAppsListConnectionStringsSlotResponse>;
  }

  /**
   * Description for Gets the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the logging
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  getDiagnosticLogsConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetDiagnosticLogsConfigurationSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getDiagnosticLogsConfigurationSlotOperationSpec
    ) as Promise<WebAppsGetDiagnosticLogsConfigurationSlotResponse>;
  }

  /**
   * Description for Updates the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the logging
   *             configuration for the production slot.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change
   *                       in the "properties" property.
   * @param options The options parameters.
   */
  updateDiagnosticLogsConfigSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteLogsConfig: SiteLogsConfig,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateDiagnosticLogsConfigSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        siteLogsConfig,
        options: operationOptions
      },
      updateDiagnosticLogsConfigSlotOperationSpec
    ) as Promise<WebAppsUpdateDiagnosticLogsConfigSlotResponse>;
  }

  /**
   * Description for Replaces the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   *             metadata for the production slot.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param options The options parameters.
   */
  updateMetadataSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    metadata: StringDictionary,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateMetadataSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, metadata, options: operationOptions },
      updateMetadataSlotOperationSpec
    ) as Promise<WebAppsUpdateMetadataSlotResponse>;
  }

  /**
   * Description for Gets the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the metadata
   *             for the production slot.
   * @param options The options parameters.
   */
  listMetadataSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListMetadataSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listMetadataSlotOperationSpec
    ) as Promise<WebAppsListMetadataSlotResponse>;
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing
   *             credentials for the production slot.
   * @param options The options parameters.
   */
  async listPublishingCredentialsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsListPublishingCredentialsSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsListPublishingCredentialsSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      listPublishingCredentialsSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: listPublishingCredentialsSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Updates the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param pushSettings Push settings associated with web app.
   * @param options The options parameters.
   */
  updateSitePushSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    pushSettings: PushSettings,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateSitePushSettingsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        pushSettings,
        options: operationOptions
      },
      updateSitePushSettingsSlotOperationSpec
    ) as Promise<WebAppsUpdateSitePushSettingsSlotResponse>;
  }

  /**
   * Description for Gets the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  listSitePushSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSitePushSettingsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listSitePushSettingsSlotOperationSpec
    ) as Promise<WebAppsListSitePushSettingsSlotResponse>;
  }

  /**
   * Description for Gets the configuration of an app, such as platform version and bitness, default
   * documents, virtual applications, Always On, etc.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  getConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetConfigurationSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getConfigurationSlotOperationSpec
    ) as Promise<WebAppsGetConfigurationSlotResponse>;
  }

  /**
   * Description for Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   *             configuration for the production slot.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The options parameters.
   */
  createOrUpdateConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteConfig: SiteConfigResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateConfigurationSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, siteConfig, options: operationOptions },
      createOrUpdateConfigurationSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateConfigurationSlotResponse>;
  }

  /**
   * Description for Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   *             configuration for the production slot.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The options parameters.
   */
  updateConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteConfig: SiteConfigResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateConfigurationSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, siteConfig, options: operationOptions },
      updateConfigurationSlotOperationSpec
    ) as Promise<WebAppsUpdateConfigurationSlotResponse>;
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  listConfigurationSnapshotInfoSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConfigurationSnapshotInfoSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listConfigurationSnapshotInfoSlotOperationSpec
    ) as Promise<WebAppsListConfigurationSnapshotInfoSlotResponse>;
  }

  /**
   * Description for Gets a snapshot of the configuration of an app at a previous point in time.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  getConfigurationSnapshotSlot(
    resourceGroupName: string,
    name: string,
    snapshotId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetConfigurationSnapshotSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, snapshotId, slot, options: operationOptions },
      getConfigurationSnapshotSlotOperationSpec
    ) as Promise<WebAppsGetConfigurationSnapshotSlotResponse>;
  }

  /**
   * Description for Reverts the configuration of an app to a previous snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  recoverSiteConfigurationSnapshotSlot(
    resourceGroupName: string,
    name: string,
    snapshotId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, snapshotId, slot, options: operationOptions },
      recoverSiteConfigurationSnapshotSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the last lines of docker logs for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getWebSiteContainerLogsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetWebSiteContainerLogsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getWebSiteContainerLogsSlotOperationSpec
    ) as Promise<WebAppsGetWebSiteContainerLogsSlotResponse>;
  }

  /**
   * Description for Gets the ZIP archived docker log files for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getContainerLogsZipSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetContainerLogsZipSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getContainerLogsZipSlotOperationSpec
    ) as Promise<WebAppsGetContainerLogsZipSlotResponse>;
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  listContinuousWebJobsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListContinuousWebJobsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listContinuousWebJobsSlotOperationSpec
    ) as Promise<WebAppsListContinuousWebJobsSlotResponse>;
  }

  /**
   * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  getContinuousWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetContinuousWebJobSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      getContinuousWebJobSlotOperationSpec
    ) as Promise<WebAppsGetContinuousWebJobSlotResponse>;
  }

  /**
   * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  deleteContinuousWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      deleteContinuousWebJobSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Start a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  startContinuousWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      startContinuousWebJobSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Stop a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  stopContinuousWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      stopContinuousWebJobSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  listDeploymentsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDeploymentsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listDeploymentsSlotOperationSpec
    ) as Promise<WebAppsListDeploymentsSlotResponse>;
  }

  /**
   * Description for Get a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment for
   *             the production slot.
   * @param options The options parameters.
   */
  getDeploymentSlot(
    resourceGroupName: string,
    name: string,
    id: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetDeploymentSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, slot, options: operationOptions },
      getDeploymentSlotOperationSpec
    ) as Promise<WebAppsGetDeploymentSlotResponse>;
  }

  /**
   * Description for Create a deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param slot Name of the deployment slot. If a slot is not specified, the API creates a deployment
   *             for the production slot.
   * @param deployment Deployment details.
   * @param options The options parameters.
   */
  createDeploymentSlot(
    resourceGroupName: string,
    name: string,
    id: string,
    slot: string,
    deployment: Deployment,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateDeploymentSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        deployment,
        options: operationOptions
      },
      createDeploymentSlotOperationSpec
    ) as Promise<WebAppsCreateDeploymentSlotResponse>;
  }

  /**
   * Description for Delete a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  deleteDeploymentSlot(
    resourceGroupName: string,
    name: string,
    id: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, slot, options: operationOptions },
      deleteDeploymentSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for List deployment log for specific deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   *           response from "GET /api/sites/{siteName}/deployments".
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  listDeploymentLogSlot(
    resourceGroupName: string,
    name: string,
    id: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDeploymentLogSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, slot, options: operationOptions },
      listDeploymentLogSlotOperationSpec
    ) as Promise<WebAppsListDeploymentLogSlotResponse>;
  }

  /**
   * Description for Discovers an existing app backup that can be restored from a blob in Azure storage.
   * Use this to get information about the databases stored in a backup.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will perform discovery
   *             for the production slot.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery
   *                of backup.
   * @param options The options parameters.
   */
  discoverBackupSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    request: RestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsDiscoverBackupSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, request, options: operationOptions },
      discoverBackupSlotOperationSpec
    ) as Promise<WebAppsDiscoverBackupSlotResponse>;
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param options The options parameters.
   */
  listDomainOwnershipIdentifiersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDomainOwnershipIdentifiersSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listDomainOwnershipIdentifiersSlotOperationSpec
    ) as Promise<WebAppsListDomainOwnershipIdentifiersSlotResponse>;
  }

  /**
   * Description for Get domain ownership identifier for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param options The options parameters.
   */
  getDomainOwnershipIdentifierSlot(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetDomainOwnershipIdentifierSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        slot,
        options: operationOptions
      },
      getDomainOwnershipIdentifierSlotOperationSpec
    ) as Promise<WebAppsGetDomainOwnershipIdentifierSlotResponse>;
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The options parameters.
   */
  createOrUpdateDomainOwnershipIdentifierSlot(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    slot: string,
    domainOwnershipIdentifier: Identifier,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        slot,
        domainOwnershipIdentifier,
        options: operationOptions
      },
      createOrUpdateDomainOwnershipIdentifierSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse>;
  }

  /**
   * Description for Deletes a domain ownership identifier for a web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param options The options parameters.
   */
  deleteDomainOwnershipIdentifierSlot(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        slot,
        options: operationOptions
      },
      deleteDomainOwnershipIdentifierSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The options parameters.
   */
  updateDomainOwnershipIdentifierSlot(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    slot: string,
    domainOwnershipIdentifier: Identifier,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateDomainOwnershipIdentifierSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        slot,
        domainOwnershipIdentifier,
        options: operationOptions
      },
      updateDomainOwnershipIdentifierSlotOperationSpec
    ) as Promise<WebAppsUpdateDomainOwnershipIdentifierSlotResponse>;
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getMSDeployStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetMSDeployStatusSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getMSDeployStatusSlotOperationSpec
    ) as Promise<WebAppsGetMSDeployStatusSlotResponse>;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async createMSDeployOperationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    mSDeploy: MSDeploy,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateMSDeployOperationSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      mSDeploy,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateMSDeployOperationSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createMSDeployOperationSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createMSDeployOperationSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getMSDeployLogSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetMSDeployLogSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getMSDeployLogSlotOperationSpec
    ) as Promise<WebAppsGetMSDeployLogSlotResponse>;
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listInstanceFunctionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceFunctionsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listInstanceFunctionsSlotOperationSpec
    ) as Promise<WebAppsListInstanceFunctionsSlotResponse>;
  }

  /**
   * Description for Fetch a short lived token that can be exchanged for a master key.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getFunctionsAdminTokenSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetFunctionsAdminTokenSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getFunctionsAdminTokenSlotOperationSpec
    ) as Promise<WebAppsGetFunctionsAdminTokenSlotResponse>;
  }

  /**
   * Description for Get function information by its ID for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  getInstanceFunctionSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceFunctionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        options: operationOptions
      },
      getInstanceFunctionSlotOperationSpec
    ) as Promise<WebAppsGetInstanceFunctionSlotResponse>;
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param functionEnvelope Function details.
   * @param options The options parameters.
   */
  async createInstanceFunctionSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    functionEnvelope: FunctionEnvelope,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateInstanceFunctionSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      functionName,
      slot,
      functionEnvelope,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateInstanceFunctionSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createInstanceFunctionSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createInstanceFunctionSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Delete a function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  deleteInstanceFunctionSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        options: operationOptions
      },
      deleteInstanceFunctionSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Add or update a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param options The options parameters.
   */
  createOrUpdateFunctionSecretSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    keyName: string,
    slot: string,
    key: KeyInfo,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateFunctionSecretSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        keyName,
        slot,
        key,
        options: operationOptions
      },
      createOrUpdateFunctionSecretSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateFunctionSecretSlotResponse>;
  }

  /**
   * Description for Delete a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  deleteFunctionSecretSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    keyName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        keyName,
        slot,
        options: operationOptions
      },
      deleteFunctionSecretSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get function keys for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listFunctionKeysSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListFunctionKeysSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        options: operationOptions
      },
      listFunctionKeysSlotOperationSpec
    ) as Promise<WebAppsListFunctionKeysSlotResponse>;
  }

  /**
   * Description for Get function secrets for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listFunctionSecretsSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListFunctionSecretsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        options: operationOptions
      },
      listFunctionSecretsSlotOperationSpec
    ) as Promise<WebAppsListFunctionSecretsSlotResponse>;
  }

  /**
   * Description for Get host secrets for a function app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listHostKeysSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListHostKeysSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listHostKeysSlotOperationSpec
    ) as Promise<WebAppsListHostKeysSlotResponse>;
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listSyncStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listSyncStatusSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  syncFunctionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      syncFunctionsSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Add or update a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param options The options parameters.
   */
  createOrUpdateHostSecretSlot(
    resourceGroupName: string,
    name: string,
    keyType: string,
    keyName: string,
    slot: string,
    key: KeyInfo,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateHostSecretSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        keyType,
        keyName,
        slot,
        key,
        options: operationOptions
      },
      createOrUpdateHostSecretSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateHostSecretSlotResponse>;
  }

  /**
   * Description for Delete a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  deleteHostSecretSlot(
    resourceGroupName: string,
    name: string,
    keyType: string,
    keyName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        keyType,
        keyName,
        slot,
        options: operationOptions
      },
      deleteHostSecretSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings
   *             for the production slot.
   * @param options The options parameters.
   */
  listHostNameBindingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListHostNameBindingsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listHostNameBindingsSlotOperationSpec
    ) as Promise<WebAppsListHostNameBindingsSlotResponse>;
  }

  /**
   * Description for Get the named hostname binding for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for
   *             the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param options The options parameters.
   */
  getHostNameBindingSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    hostName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetHostNameBindingSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, hostName, options: operationOptions },
      getHostNameBindingSlotOperationSpec
    ) as Promise<WebAppsGetHostNameBindingSlotResponse>;
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object.
   * @param options The options parameters.
   */
  createOrUpdateHostNameBindingSlot(
    resourceGroupName: string,
    name: string,
    hostName: string,
    slot: string,
    hostNameBinding: HostNameBinding,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateHostNameBindingSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        slot,
        hostNameBinding,
        options: operationOptions
      },
      createOrUpdateHostNameBindingSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateHostNameBindingSlotResponse>;
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param options The options parameters.
   */
  deleteHostNameBindingSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    hostName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, hostName, options: operationOptions },
      deleteHostNameBindingSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param options The options parameters.
   */
  getHybridConnectionSlot(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetHybridConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        slot,
        options: operationOptions
      },
      getHybridConnectionSlotOperationSpec
    ) as Promise<WebAppsGetHybridConnectionSlotResponse>;
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The options parameters.
   */
  createOrUpdateHybridConnectionSlot(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    slot: string,
    connectionEnvelope: HybridConnection,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateHybridConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateHybridConnectionSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateHybridConnectionSlotResponse>;
  }

  /**
   * Description for Removes a Hybrid Connection from this site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param options The options parameters.
   */
  deleteHybridConnectionSlot(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        slot,
        options: operationOptions
      },
      deleteHybridConnectionSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The options parameters.
   */
  updateHybridConnectionSlot(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    slot: string,
    connectionEnvelope: HybridConnection,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateHybridConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      updateHybridConnectionSlotOperationSpec
    ) as Promise<WebAppsUpdateHybridConnectionSlotResponse>;
  }

  /**
   * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param options The options parameters.
   */
  listHybridConnectionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListHybridConnectionsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listHybridConnectionsSlotOperationSpec
    ) as Promise<WebAppsListHybridConnectionsSlotResponse>;
  }

  /**
   * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid
   *             connections for the production slot.
   * @param options The options parameters.
   */
  listRelayServiceConnectionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListRelayServiceConnectionsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listRelayServiceConnectionsSlotOperationSpec
    ) as Promise<WebAppsListRelayServiceConnectionsSlotResponse>;
  }

  /**
   * Description for Gets a hybrid connection configuration by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid
   *             connection for the production slot.
   * @param options The options parameters.
   */
  getRelayServiceConnectionSlot(
    resourceGroupName: string,
    name: string,
    entityName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetRelayServiceConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, slot, options: operationOptions },
      getRelayServiceConnectionSlotOperationSpec
    ) as Promise<WebAppsGetRelayServiceConnectionSlotResponse>;
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a
   *             hybrid connection for the production slot.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The options parameters.
   */
  createOrUpdateRelayServiceConnectionSlot(
    resourceGroupName: string,
    name: string,
    entityName: string,
    slot: string,
    connectionEnvelope: RelayServiceConnectionEntity,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateRelayServiceConnectionSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse>;
  }

  /**
   * Description for Deletes a relay service connection by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a hybrid
   *             connection for the production slot.
   * @param options The options parameters.
   */
  deleteRelayServiceConnectionSlot(
    resourceGroupName: string,
    name: string,
    entityName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, slot, options: operationOptions },
      deleteRelayServiceConnectionSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a
   *             hybrid connection for the production slot.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The options parameters.
   */
  updateRelayServiceConnectionSlot(
    resourceGroupName: string,
    name: string,
    entityName: string,
    slot: string,
    connectionEnvelope: RelayServiceConnectionEntity,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateRelayServiceConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      updateRelayServiceConnectionSlotOperationSpec
    ) as Promise<WebAppsUpdateRelayServiceConnectionSlotResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   *             slot instances.
   * @param options The options parameters.
   */
  listInstanceIdentifiersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceIdentifiersSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listInstanceIdentifiersSlotOperationSpec
    ) as Promise<WebAppsListInstanceIdentifiersSlotResponse>;
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   *             slot instances.
   * @param options The options parameters.
   */
  getInstanceInfoSlot(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceInfoSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, slot, options: operationOptions },
      getInstanceInfoSlotOperationSpec
    ) as Promise<WebAppsGetInstanceInfoSlotResponse>;
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param options The options parameters.
   */
  getInstanceMsDeployStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceMsDeployStatusSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, instanceId, options: operationOptions },
      getInstanceMsDeployStatusSlotOperationSpec
    ) as Promise<WebAppsGetInstanceMsDeployStatusSlotResponse>;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async createInstanceMSDeployOperationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    mSDeploy: MSDeploy,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateInstanceMSDeployOperationSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      instanceId,
      mSDeploy,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateInstanceMSDeployOperationSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createInstanceMSDeployOperationSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createInstanceMSDeployOperationSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param options The options parameters.
   */
  getInstanceMSDeployLogSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceMSDeployLogSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, instanceId, options: operationOptions },
      getInstanceMSDeployLogSlotOperationSpec
    ) as Promise<WebAppsGetInstanceMSDeployLogSlotResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  listInstanceProcessesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, instanceId, options: operationOptions },
      listInstanceProcessesSlotOperationSpec
    ) as Promise<WebAppsListInstanceProcessesSlotResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceProcessSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options: operationOptions
      },
      getInstanceProcessSlotOperationSpec
    ) as Promise<WebAppsGetInstanceProcessSlotResponse>;
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  deleteInstanceProcessSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options: operationOptions
      },
      deleteInstanceProcessSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessDumpSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceProcessDumpSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options: operationOptions
      },
      getInstanceProcessDumpSlotOperationSpec
    ) as Promise<WebAppsGetInstanceProcessDumpSlotResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  listInstanceProcessModulesSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessModulesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options: operationOptions
      },
      listInstanceProcessModulesSlotOperationSpec
    ) as Promise<WebAppsListInstanceProcessModulesSlotResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessModuleSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    baseAddress: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetInstanceProcessModuleSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        slot,
        instanceId,
        options: operationOptions
      },
      getInstanceProcessModuleSlotOperationSpec
    ) as Promise<WebAppsGetInstanceProcessModuleSlotResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  listInstanceProcessThreadsSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessThreadsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options: operationOptions
      },
      listInstanceProcessThreadsSlotOperationSpec
    ) as Promise<WebAppsListInstanceProcessThreadsSlotResponse>;
  }

  /**
   * Description for Shows whether an app can be cloned to another resource group or subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns information on the production
   *             slot.
   * @param options The options parameters.
   */
  isCloneableSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsIsCloneableSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      isCloneableSlotOperationSpec
    ) as Promise<WebAppsIsCloneableSlotResponse>;
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the
   *             production slot.
   * @param options The options parameters.
   */
  listSiteBackupsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSiteBackupsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listSiteBackupsSlotOperationSpec
    ) as Promise<WebAppsListSiteBackupsSlotResponse>;
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listSyncFunctionTriggersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSyncFunctionTriggersSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listSyncFunctionTriggersSlotOperationSpec
    ) as Promise<WebAppsListSyncFunctionTriggersSlotResponse>;
  }

  /**
   * Description for Returns the status of MySql in app migration, if one is active, and whether or not
   * MySql in app is enabled
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  getMigrateMySqlStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetMigrateMySqlStatusSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getMigrateMySqlStatusSlotOperationSpec
    ) as Promise<WebAppsGetMigrateMySqlStatusSlotResponse>;
  }

  /**
   * Description for Gets a Swift Virtual Network connection.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for
   *             the production slot's Virtual Network.
   * @param options The options parameters.
   */
  getSwiftVirtualNetworkConnectionSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSwiftVirtualNetworkConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getSwiftVirtualNetworkConnectionSlotOperationSpec
    ) as Promise<WebAppsGetSwiftVirtualNetworkConnectionSlotResponse>;
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has
   * already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   *             connections for the production slot.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  createOrUpdateSwiftVirtualNetworkConnectionSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    connectionEnvelope: SwiftVirtualNetwork,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateSwiftVirtualNetworkConnectionSlotOperationSpec
    ) as Promise<
      WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse
    >;
  }

  /**
   * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   *             connection for the production slot.
   * @param options The options parameters.
   */
  deleteSwiftVirtualNetworkSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      deleteSwiftVirtualNetworkSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has
   * already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   *             connections for the production slot.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  updateSwiftVirtualNetworkConnectionSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    connectionEnvelope: SwiftVirtualNetwork,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      updateSwiftVirtualNetworkConnectionSlotOperationSpec
    ) as Promise<WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse>;
  }

  /**
   * Description for Gets all network features used by the app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get network
   *             features for the production slot.
   * @param options The options parameters.
   */
  listNetworkFeaturesSlot(
    resourceGroupName: string,
    name: string,
    view: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListNetworkFeaturesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, view, slot, options: operationOptions },
      listNetworkFeaturesSlotOperationSpec
    ) as Promise<WebAppsListNetworkFeaturesSlotResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation
   *             for the production slot.
   * @param options The options parameters.
   */
  getNetworkTraceOperationSlot(
    resourceGroupName: string,
    name: string,
    operationId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetNetworkTraceOperationSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, slot, options: operationOptions },
      getNetworkTraceOperationSlotOperationSpec
    ) as Promise<WebAppsGetNetworkTraceOperationSlotResponse>;
  }

  /**
   * Description for Start capturing network packets for the site (To be deprecated).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  startWebSiteNetworkTraceSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsStartWebSiteNetworkTraceSlotOptionalParams
  ): Promise<WebAppsStartWebSiteNetworkTraceSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      startWebSiteNetworkTraceSlotOperationSpec
    ) as Promise<WebAppsStartWebSiteNetworkTraceSlotResponse>;
  }

  /**
   * Description for Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  async startWebSiteNetworkTraceOperationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsStartWebSiteNetworkTraceOperationSlotOptionalParams
  ): Promise<LROPoller<WebAppsStartWebSiteNetworkTraceOperationSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsStartWebSiteNetworkTraceOperationSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      startWebSiteNetworkTraceOperationSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: startWebSiteNetworkTraceOperationSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  stopWebSiteNetworkTraceSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      stopWebSiteNetworkTraceSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation
   *             for the production slot.
   * @param options The options parameters.
   */
  getNetworkTracesSlot(
    resourceGroupName: string,
    name: string,
    operationId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetNetworkTracesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, slot, options: operationOptions },
      getNetworkTracesSlotOperationSpec
    ) as Promise<WebAppsGetNetworkTracesSlotResponse>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation
   *             for the production slot.
   * @param options The options parameters.
   */
  getNetworkTraceOperationSlotV2(
    resourceGroupName: string,
    name: string,
    operationId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetNetworkTraceOperationSlotV2Response> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, slot, options: operationOptions },
      getNetworkTraceOperationSlotV2OperationSpec
    ) as Promise<WebAppsGetNetworkTraceOperationSlotV2Response>;
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation
   *             for the production slot.
   * @param options The options parameters.
   */
  getNetworkTracesSlotV2(
    resourceGroupName: string,
    name: string,
    operationId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetNetworkTracesSlotV2Response> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, slot, options: operationOptions },
      getNetworkTracesSlotV2OperationSpec
    ) as Promise<WebAppsGetNetworkTracesSlotV2Response>;
  }

  /**
   * Description for Generates a new publishing password for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new
   *             publishing password for the production slot.
   * @param options The options parameters.
   */
  generateNewSitePublishingPasswordSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      generateNewSitePublishingPasswordSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  listPerfMonCountersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPerfMonCountersSlotOptionalParams
  ): Promise<WebAppsListPerfMonCountersSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listPerfMonCountersSlotOperationSpec
    ) as Promise<WebAppsListPerfMonCountersSlotResponse>;
  }

  /**
   * Description for Gets web app's event logs.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getSitePhpErrorLogFlagSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSitePhpErrorLogFlagSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getSitePhpErrorLogFlagSlotOperationSpec
    ) as Promise<WebAppsGetSitePhpErrorLogFlagSlotResponse>;
  }

  /**
   * Description for Gets the premier add-ons of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the premier
   *             add-ons for the production slot.
   * @param options The options parameters.
   */
  listPremierAddOnsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListPremierAddOnsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listPremierAddOnsSlotOperationSpec
    ) as Promise<WebAppsListPremierAddOnsSlotResponse>;
  }

  /**
   * Description for Gets a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   *             add-on for the production slot.
   * @param options The options parameters.
   */
  getPremierAddOnSlot(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetPremierAddOnSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        options: operationOptions
      },
      getPremierAddOnSlotOperationSpec
    ) as Promise<WebAppsGetPremierAddOnSlotResponse>;
  }

  /**
   * Description for Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named
   *             add-on for the production slot.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The options parameters.
   */
  addPremierAddOnSlot(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    slot: string,
    premierAddOn: PremierAddOn,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsAddPremierAddOnSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        premierAddOn,
        options: operationOptions
      },
      addPremierAddOnSlotOperationSpec
    ) as Promise<WebAppsAddPremierAddOnSlotResponse>;
  }

  /**
   * Description for Delete a premier add-on from an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the named
   *             add-on for the production slot.
   * @param options The options parameters.
   */
  deletePremierAddOnSlot(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        options: operationOptions
      },
      deletePremierAddOnSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named
   *             add-on for the production slot.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The options parameters.
   */
  updatePremierAddOnSlot(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    slot: string,
    premierAddOn: PremierAddOnPatchResource,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdatePremierAddOnSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        premierAddOn,
        options: operationOptions
      },
      updatePremierAddOnSlotOperationSpec
    ) as Promise<WebAppsUpdatePremierAddOnSlotResponse>;
  }

  /**
   * Description for Gets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param options The options parameters.
   */
  getPrivateAccessSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetPrivateAccessSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getPrivateAccessSlotOperationSpec
    ) as Promise<WebAppsGetPrivateAccessSlotResponse>;
  }

  /**
   * Description for Sets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param access The information for the private access
   * @param options The options parameters.
   */
  putPrivateAccessVnetSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    access: PrivateAccess,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsPutPrivateAccessVnetSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, access, options: operationOptions },
      putPrivateAccessVnetSlotOperationSpec
    ) as Promise<WebAppsPutPrivateAccessVnetSlotResponse>;
  }

  /**
   * Description for Gets a private endpoint connection
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param privateEndpointConnectionName
   * @param options The options parameters.
   */
  getPrivateEndpointConnection(
    resourceGroupName: string,
    name: string,
    privateEndpointConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetPrivateEndpointConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        privateEndpointConnectionName,
        options: operationOptions
      },
      getPrivateEndpointConnectionOperationSpec
    ) as Promise<WebAppsGetPrivateEndpointConnectionResponse>;
  }

  /**
   * Description for Approves or rejects a private endpoint connection
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param privateEndpointConnectionName
   * @param privateEndpointWrapper Private Endpoint Connection Approval ARM resource.
   * @param options The options parameters.
   */
  async approveOrRejectPrivateEndpointConnection(
    resourceGroupName: string,
    name: string,
    privateEndpointConnectionName: string,
    privateEndpointWrapper: PrivateLinkConnectionApprovalRequestResource,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<WebAppsApproveOrRejectPrivateEndpointConnectionResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      privateEndpointConnectionName,
      privateEndpointWrapper,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsApproveOrRejectPrivateEndpointConnectionResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      approveOrRejectPrivateEndpointConnectionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: approveOrRejectPrivateEndpointConnectionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Deletes a private endpoint connection
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param privateEndpointConnectionName
   * @param options The options parameters.
   */
  async deletePrivateEndpointConnection(
    resourceGroupName: string,
    name: string,
    privateEndpointConnectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsDeletePrivateEndpointConnectionResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      privateEndpointConnectionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsDeletePrivateEndpointConnectionResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deletePrivateEndpointConnectionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deletePrivateEndpointConnectionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Gets the private link resources
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param options The options parameters.
   */
  getPrivateLinkResources(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetPrivateLinkResourcesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getPrivateLinkResourcesOperationSpec
    ) as Promise<WebAppsGetPrivateLinkResourcesResponse>;
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  listProcessesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listProcessesSlotOperationSpec
    ) as Promise<WebAppsListProcessesSlotResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  getProcessSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetProcessSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, options: operationOptions },
      getProcessSlotOperationSpec
    ) as Promise<WebAppsGetProcessSlotResponse>;
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  deleteProcessSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, options: operationOptions },
      deleteProcessSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  getProcessDumpSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetProcessDumpSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, options: operationOptions },
      getProcessDumpSlotOperationSpec
    ) as Promise<WebAppsGetProcessDumpSlotResponse>;
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  listProcessModulesSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessModulesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, options: operationOptions },
      listProcessModulesSlotOperationSpec
    ) as Promise<WebAppsListProcessModulesSlotResponse>;
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  getProcessModuleSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    baseAddress: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetProcessModuleSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        slot,
        options: operationOptions
      },
      getProcessModuleSlotOperationSpec
    ) as Promise<WebAppsGetProcessModuleSlotResponse>;
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  listProcessThreadsSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessThreadsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, options: operationOptions },
      listProcessThreadsSlotOperationSpec
    ) as Promise<WebAppsListProcessThreadsSlotResponse>;
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings
   *             for the production slot.
   * @param options The options parameters.
   */
  listPublicCertificatesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListPublicCertificatesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listPublicCertificatesSlotOperationSpec
    ) as Promise<WebAppsListPublicCertificatesSlotResponse>;
  }

  /**
   * Description for Get the named public certificate for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for
   *             the production slot.
   * @param publicCertificateName Public certificate name.
   * @param options The options parameters.
   */
  getPublicCertificateSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    publicCertificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetPublicCertificateSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        publicCertificateName,
        options: operationOptions
      },
      getPublicCertificateSlotOperationSpec
    ) as Promise<WebAppsGetPublicCertificateSlotResponse>;
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   *                          PublicCertificate object.
   * @param options The options parameters.
   */
  createOrUpdatePublicCertificateSlot(
    resourceGroupName: string,
    name: string,
    publicCertificateName: string,
    slot: string,
    publicCertificate: PublicCertificate,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdatePublicCertificateSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        slot,
        publicCertificate,
        options: operationOptions
      },
      createOrUpdatePublicCertificateSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdatePublicCertificateSlotResponse>;
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param publicCertificateName Public certificate name.
   * @param options The options parameters.
   */
  deletePublicCertificateSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    publicCertificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        publicCertificateName,
        options: operationOptions
      },
      deletePublicCertificateSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the publishing profile for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing
   *             profile for the production slot.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   *                                 example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param options The options parameters.
   */
  listPublishingProfileXmlWithSecretsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    publishingProfileOptions: CsmPublishingProfileOptions,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListPublishingProfileXmlWithSecretsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        publishingProfileOptions,
        options: operationOptions
      },
      listPublishingProfileXmlWithSecretsSlotOperationSpec
    ) as Promise<WebAppsListPublishingProfileXmlWithSecretsSlotResponse>;
  }

  /**
   * Description for Resets the configuration settings of the current slot if they were previously
   * modified by calling the API with POST.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API resets configuration
   *             settings for the production slot.
   * @param options The options parameters.
   */
  resetSlotConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      resetSlotConfigurationSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Restarts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the
   *             production slot.
   * @param options The options parameters.
   */
  restartSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsRestartSlotOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      restartSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Restores an app from a backup blob in Azure Storage.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup
   *             of the production slot.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async restoreFromBackupBlobSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    request: RestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      request,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreFromBackupBlobSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreFromBackupBlobSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Restores a deleted web app to this web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param restoreRequest Deleted web app restore information.
   * @param options The options parameters.
   */
  async restoreFromDeletedAppSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    restoreRequest: DeletedAppRestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      restoreRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreFromDeletedAppSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreFromDeletedAppSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Restores a web app from a snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
   *                       GetDeletedSites or GetSiteSnapshots API.
   * @param options The options parameters.
   */
  async restoreSnapshotSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    restoreRequest: SnapshotRestoreRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      restoreRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restoreSnapshotSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restoreSnapshotSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  listSiteExtensionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSiteExtensionsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listSiteExtensionsSlotOperationSpec
    ) as Promise<WebAppsListSiteExtensionsSlotResponse>;
  }

  /**
   * Description for Get site extension information by its ID for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  getSiteExtensionSlot(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSiteExtensionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteExtensionId,
        slot,
        options: operationOptions
      },
      getSiteExtensionSlotOperationSpec
    ) as Promise<WebAppsGetSiteExtensionSlotResponse>;
  }

  /**
   * Description for Install site extension on a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  async installSiteExtensionSlot(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsInstallSiteExtensionSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      siteExtensionId,
      slot,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsInstallSiteExtensionSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      installSiteExtensionSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: installSiteExtensionSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Remove a site extension from a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  deleteSiteExtensionSlot(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteExtensionId,
        slot,
        options: operationOptions
      },
      deleteSiteExtensionSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Copies a deployment slot to another deployment slot of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the
   *             source slot.
   * @param copySlotEntity JSON object that contains the target slot name and site config properties to
   *                       override the source slot config. See example.
   * @param options The options parameters.
   */
  async copySlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    copySlotEntity: CsmCopySlotEntity,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      copySlotEntity,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      copySlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: copySlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get the difference in configuration settings between two web app slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the
   *             source slot.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  listSlotDifferencesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    slotSwapEntity: CsmSlotEntity,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSlotDifferencesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        slotSwapEntity,
        options: operationOptions
      },
      listSlotDifferencesSlotOperationSpec
    ) as Promise<WebAppsListSlotDifferencesSlotResponse>;
  }

  /**
   * Description for Swaps two deployment slots of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the
   *             source slot.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  async swapSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    slotSwapEntity: CsmSlotEntity,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      slotSwapEntity,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      swapSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: swapSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Returns all Snapshots to the user.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param options The options parameters.
   */
  listSnapshotsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSnapshotsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listSnapshotsSlotOperationSpec
    ) as Promise<WebAppsListSnapshotsSlotResponse>;
  }

  /**
   * Description for Returns all Snapshots to the user from DRSecondary endpoint.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param options The options parameters.
   */
  listSnapshotsFromDRSecondarySlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSnapshotsFromDRSecondarySlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listSnapshotsFromDRSecondarySlotOperationSpec
    ) as Promise<WebAppsListSnapshotsFromDRSecondarySlotResponse>;
  }

  /**
   * Description for Gets the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source
   *             control configuration for the production slot.
   * @param options The options parameters.
   */
  getSourceControlSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSourceControlSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      getSourceControlSlotOperationSpec
    ) as Promise<WebAppsGetSourceControlSlotResponse>;
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source
   *             control configuration for the production slot.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param options The options parameters.
   */
  async createOrUpdateSourceControlSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteSourceControl: SiteSourceControl,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateOrUpdateSourceControlSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      siteSourceControl,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateOrUpdateSourceControlSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateSourceControlSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateSourceControlSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Deletes the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the source
   *             control configuration for the production slot.
   * @param options The options parameters.
   */
  deleteSourceControlSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      deleteSourceControlSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source
   *             control configuration for the production slot.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param options The options parameters.
   */
  updateSourceControlSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteSourceControl: SiteSourceControl,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateSourceControlSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        siteSourceControl,
        options: operationOptions
      },
      updateSourceControlSlotOperationSpec
    ) as Promise<WebAppsUpdateSourceControlSlotResponse>;
  }

  /**
   * Description for Starts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will start the
   *             production slot.
   * @param options The options parameters.
   */
  startSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      startSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  async startNetworkTraceSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsStartNetworkTraceSlotOptionalParams
  ): Promise<LROPoller<WebAppsStartNetworkTraceSlotResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slot,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsStartNetworkTraceSlotResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      startNetworkTraceSlotOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: startNetworkTraceSlotOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Stops an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the
   *             production slot.
   * @param options The options parameters.
   */
  stopSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      stopSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  stopNetworkTraceSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      stopNetworkTraceSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Sync web app repository.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  syncRepositorySlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      syncRepositorySlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  syncFunctionTriggersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      syncFunctionTriggersSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for List triggered web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  listTriggeredWebJobsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListTriggeredWebJobsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listTriggeredWebJobsSlotOperationSpec
    ) as Promise<WebAppsListTriggeredWebJobsSlotResponse>;
  }

  /**
   * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  getTriggeredWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetTriggeredWebJobSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      getTriggeredWebJobSlotOperationSpec
    ) as Promise<WebAppsGetTriggeredWebJobSlotResponse>;
  }

  /**
   * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes web job for the
   *             production slot.
   * @param options The options parameters.
   */
  deleteTriggeredWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      deleteTriggeredWebJobSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for List a triggered web job's history for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  listTriggeredWebJobHistorySlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListTriggeredWebJobHistorySlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      listTriggeredWebJobHistorySlotOperationSpec
    ) as Promise<WebAppsListTriggeredWebJobHistorySlotResponse>;
  }

  /**
   * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param id History ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  getTriggeredWebJobHistorySlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    id: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetTriggeredWebJobHistorySlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        id,
        slot,
        options: operationOptions
      },
      getTriggeredWebJobHistorySlotOperationSpec
    ) as Promise<WebAppsGetTriggeredWebJobHistorySlotResponse>;
  }

  /**
   * Description for Run a triggered web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  runTriggeredWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      runTriggeredWebJobSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the quota usage information of an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
   *             information of the production slot.
   * @param options The options parameters.
   */
  listUsagesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListUsagesSlotOptionalParams
  ): Promise<WebAppsListUsagesSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listUsagesSlotOperationSpec
    ) as Promise<WebAppsListUsagesSlotResponse>;
  }

  /**
   * Description for Gets the virtual networks the app (or deployment slot) is connected to.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual
   *             network connections for the production slot.
   * @param options The options parameters.
   */
  listVnetConnectionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListVnetConnectionsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listVnetConnectionsSlotOperationSpec
    ) as Promise<WebAppsListVnetConnectionsSlotResponse>;
  }

  /**
   * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   *             virtual network for the production slot.
   * @param options The options parameters.
   */
  getVnetConnectionSlot(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetVnetConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, vnetName, slot, options: operationOptions },
      getVnetConnectionSlotOperationSpec
    ) as Promise<WebAppsGetVnetConnectionSlotResponse>;
  }

  /**
   * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
   * properties (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   *             connections for the production slot.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  createOrUpdateVnetConnectionSlot(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    slot: string,
    connectionEnvelope: VnetInfo,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateVnetConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateVnetConnectionSlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateVnetConnectionSlotResponse>;
  }

  /**
   * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   *             connection for the production slot.
   * @param options The options parameters.
   */
  deleteVnetConnectionSlot(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, vnetName, slot, options: operationOptions },
      deleteVnetConnectionSlotOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
   * properties (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   *             connections for the production slot.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  updateVnetConnectionSlot(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    slot: string,
    connectionEnvelope: VnetInfo,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateVnetConnectionSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      updateVnetConnectionSlotOperationSpec
    ) as Promise<WebAppsUpdateVnetConnectionSlotResponse>;
  }

  /**
   * Description for Gets an app's Virtual Network gateway.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for
   *             the production slot's Virtual Network.
   * @param options The options parameters.
   */
  getVnetConnectionGatewaySlot(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    gatewayName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetVnetConnectionGatewaySlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        slot,
        options: operationOptions
      },
      getVnetConnectionGatewaySlotOperationSpec
    ) as Promise<WebAppsGetVnetConnectionGatewaySlotResponse>;
  }

  /**
   * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a
   *             gateway for the production slot's Virtual Network.
   * @param connectionEnvelope The properties to update this gateway with.
   * @param options The options parameters.
   */
  createOrUpdateVnetConnectionGatewaySlot(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    gatewayName: string,
    slot: string,
    connectionEnvelope: VnetGateway,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateVnetConnectionGatewaySlotOperationSpec
    ) as Promise<WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse>;
  }

  /**
   * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a
   *             gateway for the production slot's Virtual Network.
   * @param connectionEnvelope The properties to update this gateway with.
   * @param options The options parameters.
   */
  updateVnetConnectionGatewaySlot(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    gatewayName: string,
    slot: string,
    connectionEnvelope: VnetGateway,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateVnetConnectionGatewaySlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        slot,
        connectionEnvelope,
        options: operationOptions
      },
      updateVnetConnectionGatewaySlotOperationSpec
    ) as Promise<WebAppsUpdateVnetConnectionGatewaySlotResponse>;
  }

  /**
   * Description for List webjobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  listWebJobsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListWebJobsSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options: operationOptions },
      listWebJobsSlotOperationSpec
    ) as Promise<WebAppsListWebJobsSlotResponse>;
  }

  /**
   * Description for Get webjob information for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of the web job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  getWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetWebJobSlotResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options: operationOptions },
      getWebJobSlotOperationSpec
    ) as Promise<WebAppsGetWebJobSlotResponse>;
  }

  /**
   * Description for Get the difference in configuration settings between two web app slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  listSlotDifferencesFromProduction(
    resourceGroupName: string,
    name: string,
    slotSwapEntity: CsmSlotEntity,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSlotDifferencesFromProductionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slotSwapEntity, options: operationOptions },
      listSlotDifferencesFromProductionOperationSpec
    ) as Promise<WebAppsListSlotDifferencesFromProductionResponse>;
  }

  /**
   * Description for Swaps two deployment slots of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  async swapSlotWithProduction(
    resourceGroupName: string,
    name: string,
    slotSwapEntity: CsmSlotEntity,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      slotSwapEntity,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      swapSlotWithProductionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: swapSlotWithProductionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Returns all Snapshots to the user.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param options The options parameters.
   */
  listSnapshots(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSnapshotsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSnapshotsOperationSpec
    ) as Promise<WebAppsListSnapshotsResponse>;
  }

  /**
   * Description for Returns all Snapshots to the user from DRSecondary endpoint.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param options The options parameters.
   */
  listSnapshotsFromDRSecondary(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSnapshotsFromDRSecondaryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listSnapshotsFromDRSecondaryOperationSpec
    ) as Promise<WebAppsListSnapshotsFromDRSecondaryResponse>;
  }

  /**
   * Description for Gets the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getSourceControl(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetSourceControlResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      getSourceControlOperationSpec
    ) as Promise<WebAppsGetSourceControlResponse>;
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param options The options parameters.
   */
  async createOrUpdateSourceControl(
    resourceGroupName: string,
    name: string,
    siteSourceControl: SiteSourceControl,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<WebAppsCreateOrUpdateSourceControlResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      siteSourceControl,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsCreateOrUpdateSourceControlResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateSourceControlOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateSourceControlOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Deletes the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  deleteSourceControl(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      deleteSourceControlOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Updates the source control configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
   * @param options The options parameters.
   */
  updateSourceControl(
    resourceGroupName: string,
    name: string,
    siteSourceControl: SiteSourceControl,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateSourceControlResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteSourceControl, options: operationOptions },
      updateSourceControlOperationSpec
    ) as Promise<WebAppsUpdateSourceControlResponse>;
  }

  /**
   * Description for Starts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  start(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      startOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  async startNetworkTrace(
    resourceGroupName: string,
    name: string,
    options?: WebAppsStartNetworkTraceOptionalParams
  ): Promise<LROPoller<WebAppsStartNetworkTraceResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        WebAppsStartNetworkTraceResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      startNetworkTraceOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: startNetworkTraceOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Stops an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  stop(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      stopOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  stopNetworkTrace(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      stopNetworkTraceOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Sync web app repository.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  syncRepository(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      syncRepositoryOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  syncFunctionTriggers(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      syncFunctionTriggersOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for List triggered web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  listTriggeredWebJobs(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListTriggeredWebJobsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listTriggeredWebJobsOperationSpec
    ) as Promise<WebAppsListTriggeredWebJobsResponse>;
  }

  /**
   * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  getTriggeredWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetTriggeredWebJobResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      getTriggeredWebJobOperationSpec
    ) as Promise<WebAppsGetTriggeredWebJobResponse>;
  }

  /**
   * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  deleteTriggeredWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      deleteTriggeredWebJobOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for List a triggered web job's history for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  listTriggeredWebJobHistory(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListTriggeredWebJobHistoryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      listTriggeredWebJobHistoryOperationSpec
    ) as Promise<WebAppsListTriggeredWebJobHistoryResponse>;
  }

  /**
   * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param id History ID.
   * @param options The options parameters.
   */
  getTriggeredWebJobHistory(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    id: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetTriggeredWebJobHistoryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, id, options: operationOptions },
      getTriggeredWebJobHistoryOperationSpec
    ) as Promise<WebAppsGetTriggeredWebJobHistoryResponse>;
  }

  /**
   * Description for Run a triggered web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  runTriggeredWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      runTriggeredWebJobOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the quota usage information of an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listUsages(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListUsagesOptionalParams
  ): Promise<WebAppsListUsagesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listUsagesOperationSpec
    ) as Promise<WebAppsListUsagesResponse>;
  }

  /**
   * Description for Gets the virtual networks the app (or deployment slot) is connected to.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listVnetConnections(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListVnetConnectionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listVnetConnectionsOperationSpec
    ) as Promise<WebAppsListVnetConnectionsResponse>;
  }

  /**
   * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param options The options parameters.
   */
  getVnetConnection(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetVnetConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, vnetName, options: operationOptions },
      getVnetConnectionOperationSpec
    ) as Promise<WebAppsGetVnetConnectionResponse>;
  }

  /**
   * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
   * properties (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  createOrUpdateVnetConnection(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    connectionEnvelope: VnetInfo,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateVnetConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateVnetConnectionOperationSpec
    ) as Promise<WebAppsCreateOrUpdateVnetConnectionResponse>;
  }

  /**
   * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the virtual network.
   * @param options The options parameters.
   */
  deleteVnetConnection(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, vnetName, options: operationOptions },
      deleteVnetConnectionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
   * properties (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of an existing Virtual Network.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  updateVnetConnection(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    connectionEnvelope: VnetInfo,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateVnetConnectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        options: operationOptions
      },
      updateVnetConnectionOperationSpec
    ) as Promise<WebAppsUpdateVnetConnectionResponse>;
  }

  /**
   * Description for Gets an app's Virtual Network gateway.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param options The options parameters.
   */
  getVnetConnectionGateway(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    gatewayName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetVnetConnectionGatewayResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        options: operationOptions
      },
      getVnetConnectionGatewayOperationSpec
    ) as Promise<WebAppsGetVnetConnectionGatewayResponse>;
  }

  /**
   * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param options The options parameters.
   */
  createOrUpdateVnetConnectionGateway(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    gatewayName: string,
    connectionEnvelope: VnetGateway,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsCreateOrUpdateVnetConnectionGatewayResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options: operationOptions
      },
      createOrUpdateVnetConnectionGatewayOperationSpec
    ) as Promise<WebAppsCreateOrUpdateVnetConnectionGatewayResponse>;
  }

  /**
   * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param vnetName Name of the Virtual Network.
   * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
   * @param connectionEnvelope The properties to update this gateway with.
   * @param options The options parameters.
   */
  updateVnetConnectionGateway(
    resourceGroupName: string,
    name: string,
    vnetName: string,
    gatewayName: string,
    connectionEnvelope: VnetGateway,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsUpdateVnetConnectionGatewayResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options: operationOptions
      },
      updateVnetConnectionGatewayOperationSpec
    ) as Promise<WebAppsUpdateVnetConnectionGatewayResponse>;
  }

  /**
   * Description for List webjobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  listWebJobs(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListWebJobsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listWebJobsOperationSpec
    ) as Promise<WebAppsListWebJobsResponse>;
  }

  /**
   * Description for Get webjob information for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of the web job.
   * @param options The options parameters.
   */
  getWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsGetWebJobResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options: operationOptions },
      getWebJobOperationSpec
    ) as Promise<WebAppsGetWebJobResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<WebAppsListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: WebAppsListByResourceGroupNextOptionalParams
  ): Promise<WebAppsListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<WebAppsListByResourceGroupNextResponse>;
  }

  /**
   * ListBackupsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListBackups method.
   * @param options The options parameters.
   */
  listBackupsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListBackupsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listBackupsNextOperationSpec
    ) as Promise<WebAppsListBackupsNextResponse>;
  }

  /**
   * ListConfigurationsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListConfigurations method.
   * @param options The options parameters.
   */
  listConfigurationsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConfigurationsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listConfigurationsNextOperationSpec
    ) as Promise<WebAppsListConfigurationsNextResponse>;
  }

  /**
   * ListConfigurationSnapshotInfoNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListConfigurationSnapshotInfo
   *                 method.
   * @param options The options parameters.
   */
  listConfigurationSnapshotInfoNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConfigurationSnapshotInfoNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listConfigurationSnapshotInfoNextOperationSpec
    ) as Promise<WebAppsListConfigurationSnapshotInfoNextResponse>;
  }

  /**
   * ListContinuousWebJobsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param nextLink The nextLink from the previous successful call to the ListContinuousWebJobs method.
   * @param options The options parameters.
   */
  listContinuousWebJobsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListContinuousWebJobsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listContinuousWebJobsNextOperationSpec
    ) as Promise<WebAppsListContinuousWebJobsNextResponse>;
  }

  /**
   * ListDeploymentsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListDeployments method.
   * @param options The options parameters.
   */
  listDeploymentsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDeploymentsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listDeploymentsNextOperationSpec
    ) as Promise<WebAppsListDeploymentsNextResponse>;
  }

  /**
   * ListDomainOwnershipIdentifiersNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListDomainOwnershipIdentifiers
   *                 method.
   * @param options The options parameters.
   */
  listDomainOwnershipIdentifiersNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDomainOwnershipIdentifiersNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listDomainOwnershipIdentifiersNextOperationSpec
    ) as Promise<WebAppsListDomainOwnershipIdentifiersNextResponse>;
  }

  /**
   * ListFunctionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param nextLink The nextLink from the previous successful call to the ListFunctions method.
   * @param options The options parameters.
   */
  listFunctionsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListFunctionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listFunctionsNextOperationSpec
    ) as Promise<WebAppsListFunctionsNextResponse>;
  }

  /**
   * ListHostNameBindingsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListHostNameBindings method.
   * @param options The options parameters.
   */
  listHostNameBindingsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListHostNameBindingsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listHostNameBindingsNextOperationSpec
    ) as Promise<WebAppsListHostNameBindingsNextResponse>;
  }

  /**
   * ListInstanceIdentifiersNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListInstanceIdentifiers
   *                 method.
   * @param options The options parameters.
   */
  listInstanceIdentifiersNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceIdentifiersNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listInstanceIdentifiersNextOperationSpec
    ) as Promise<WebAppsListInstanceIdentifiersNextResponse>;
  }

  /**
   * ListInstanceProcessesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param nextLink The nextLink from the previous successful call to the ListInstanceProcesses method.
   * @param options The options parameters.
   */
  listInstanceProcessesNext(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instanceId,
        nextLink,
        options: operationOptions
      },
      listInstanceProcessesNextOperationSpec
    ) as Promise<WebAppsListInstanceProcessesNextResponse>;
  }

  /**
   * ListInstanceProcessModulesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param nextLink The nextLink from the previous successful call to the ListInstanceProcessModules
   *                 method.
   * @param options The options parameters.
   */
  listInstanceProcessModulesNext(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessModulesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        nextLink,
        options: operationOptions
      },
      listInstanceProcessModulesNextOperationSpec
    ) as Promise<WebAppsListInstanceProcessModulesNextResponse>;
  }

  /**
   * ListInstanceProcessThreadsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param nextLink The nextLink from the previous successful call to the ListInstanceProcessThreads
   *                 method.
   * @param options The options parameters.
   */
  listInstanceProcessThreadsNext(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessThreadsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        instanceId,
        nextLink,
        options: operationOptions
      },
      listInstanceProcessThreadsNextOperationSpec
    ) as Promise<WebAppsListInstanceProcessThreadsNextResponse>;
  }

  /**
   * ListSiteBackupsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListSiteBackups method.
   * @param options The options parameters.
   */
  listSiteBackupsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSiteBackupsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listSiteBackupsNextOperationSpec
    ) as Promise<WebAppsListSiteBackupsNextResponse>;
  }

  /**
   * ListPerfMonCountersNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param nextLink The nextLink from the previous successful call to the ListPerfMonCounters method.
   * @param options The options parameters.
   */
  listPerfMonCountersNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: WebAppsListPerfMonCountersNextOptionalParams
  ): Promise<WebAppsListPerfMonCountersNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listPerfMonCountersNextOperationSpec
    ) as Promise<WebAppsListPerfMonCountersNextResponse>;
  }

  /**
   * ListProcessesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param nextLink The nextLink from the previous successful call to the ListProcesses method.
   * @param options The options parameters.
   */
  listProcessesNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listProcessesNextOperationSpec
    ) as Promise<WebAppsListProcessesNextResponse>;
  }

  /**
   * ListProcessModulesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param nextLink The nextLink from the previous successful call to the ListProcessModules method.
   * @param options The options parameters.
   */
  listProcessModulesNext(
    resourceGroupName: string,
    name: string,
    processId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessModulesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        nextLink,
        options: operationOptions
      },
      listProcessModulesNextOperationSpec
    ) as Promise<WebAppsListProcessModulesNextResponse>;
  }

  /**
   * ListProcessThreadsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param nextLink The nextLink from the previous successful call to the ListProcessThreads method.
   * @param options The options parameters.
   */
  listProcessThreadsNext(
    resourceGroupName: string,
    name: string,
    processId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessThreadsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        nextLink,
        options: operationOptions
      },
      listProcessThreadsNextOperationSpec
    ) as Promise<WebAppsListProcessThreadsNextResponse>;
  }

  /**
   * ListPublicCertificatesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListPublicCertificates method.
   * @param options The options parameters.
   */
  listPublicCertificatesNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListPublicCertificatesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listPublicCertificatesNextOperationSpec
    ) as Promise<WebAppsListPublicCertificatesNextResponse>;
  }

  /**
   * ListSiteExtensionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param nextLink The nextLink from the previous successful call to the ListSiteExtensions method.
   * @param options The options parameters.
   */
  listSiteExtensionsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSiteExtensionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listSiteExtensionsNextOperationSpec
    ) as Promise<WebAppsListSiteExtensionsNextResponse>;
  }

  /**
   * ListSlotsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListSlots method.
   * @param options The options parameters.
   */
  listSlotsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSlotsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listSlotsNextOperationSpec
    ) as Promise<WebAppsListSlotsNextResponse>;
  }

  /**
   * ListBackupsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the
   *             production slot.
   * @param nextLink The nextLink from the previous successful call to the ListBackupsSlot method.
   * @param options The options parameters.
   */
  listBackupsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListBackupsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listBackupsSlotNextOperationSpec
    ) as Promise<WebAppsListBackupsSlotNextResponse>;
  }

  /**
   * ListConfigurationsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListConfigurationsSlot method.
   * @param options The options parameters.
   */
  listConfigurationsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConfigurationsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listConfigurationsSlotNextOperationSpec
    ) as Promise<WebAppsListConfigurationsSlotNextResponse>;
  }

  /**
   * ListConfigurationSnapshotInfoSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListConfigurationSnapshotInfoSlot method.
   * @param options The options parameters.
   */
  listConfigurationSnapshotInfoSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListConfigurationSnapshotInfoSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listConfigurationSnapshotInfoSlotNextOperationSpec
    ) as Promise<WebAppsListConfigurationSnapshotInfoSlotNextResponse>;
  }

  /**
   * ListContinuousWebJobsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListContinuousWebJobsSlot
   *                 method.
   * @param options The options parameters.
   */
  listContinuousWebJobsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListContinuousWebJobsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listContinuousWebJobsSlotNextOperationSpec
    ) as Promise<WebAppsListContinuousWebJobsSlotNextResponse>;
  }

  /**
   * ListDeploymentsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListDeploymentsSlot method.
   * @param options The options parameters.
   */
  listDeploymentsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDeploymentsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listDeploymentsSlotNextOperationSpec
    ) as Promise<WebAppsListDeploymentsSlotNextResponse>;
  }

  /**
   * ListDomainOwnershipIdentifiersSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListDomainOwnershipIdentifiersSlot method.
   * @param options The options parameters.
   */
  listDomainOwnershipIdentifiersSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListDomainOwnershipIdentifiersSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listDomainOwnershipIdentifiersSlotNextOperationSpec
    ) as Promise<WebAppsListDomainOwnershipIdentifiersSlotNextResponse>;
  }

  /**
   * ListInstanceFunctionsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param nextLink The nextLink from the previous successful call to the ListInstanceFunctionsSlot
   *                 method.
   * @param options The options parameters.
   */
  listInstanceFunctionsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceFunctionsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listInstanceFunctionsSlotNextOperationSpec
    ) as Promise<WebAppsListInstanceFunctionsSlotNextResponse>;
  }

  /**
   * ListHostNameBindingsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings
   *             for the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListHostNameBindingsSlot
   *                 method.
   * @param options The options parameters.
   */
  listHostNameBindingsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListHostNameBindingsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listHostNameBindingsSlotNextOperationSpec
    ) as Promise<WebAppsListHostNameBindingsSlotNextResponse>;
  }

  /**
   * ListInstanceIdentifiersSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   *             slot instances.
   * @param nextLink The nextLink from the previous successful call to the ListInstanceIdentifiersSlot
   *                 method.
   * @param options The options parameters.
   */
  listInstanceIdentifiersSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceIdentifiersSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listInstanceIdentifiersSlotNextOperationSpec
    ) as Promise<WebAppsListInstanceIdentifiersSlotNextResponse>;
  }

  /**
   * ListInstanceProcessesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param nextLink The nextLink from the previous successful call to the ListInstanceProcessesSlot
   *                 method.
   * @param options The options parameters.
   */
  listInstanceProcessesSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        instanceId,
        nextLink,
        options: operationOptions
      },
      listInstanceProcessesSlotNextOperationSpec
    ) as Promise<WebAppsListInstanceProcessesSlotNextResponse>;
  }

  /**
   * ListInstanceProcessModulesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param nextLink The nextLink from the previous successful call to the ListInstanceProcessModulesSlot
   *                 method.
   * @param options The options parameters.
   */
  listInstanceProcessModulesSlotNext(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessModulesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        nextLink,
        options: operationOptions
      },
      listInstanceProcessModulesSlotNextOperationSpec
    ) as Promise<WebAppsListInstanceProcessModulesSlotNextResponse>;
  }

  /**
   * ListInstanceProcessThreadsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param nextLink The nextLink from the previous successful call to the ListInstanceProcessThreadsSlot
   *                 method.
   * @param options The options parameters.
   */
  listInstanceProcessThreadsSlotNext(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListInstanceProcessThreadsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        nextLink,
        options: operationOptions
      },
      listInstanceProcessThreadsSlotNextOperationSpec
    ) as Promise<WebAppsListInstanceProcessThreadsSlotNextResponse>;
  }

  /**
   * ListSiteBackupsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the
   *             production slot.
   * @param nextLink The nextLink from the previous successful call to the ListSiteBackupsSlot method.
   * @param options The options parameters.
   */
  listSiteBackupsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSiteBackupsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listSiteBackupsSlotNextOperationSpec
    ) as Promise<WebAppsListSiteBackupsSlotNextResponse>;
  }

  /**
   * ListPerfMonCountersSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param nextLink The nextLink from the previous successful call to the ListPerfMonCountersSlot
   *                 method.
   * @param options The options parameters.
   */
  listPerfMonCountersSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: WebAppsListPerfMonCountersSlotNextOptionalParams
  ): Promise<WebAppsListPerfMonCountersSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listPerfMonCountersSlotNextOperationSpec
    ) as Promise<WebAppsListPerfMonCountersSlotNextResponse>;
  }

  /**
   * ListProcessesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListProcessesSlot method.
   * @param options The options parameters.
   */
  listProcessesSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listProcessesSlotNextOperationSpec
    ) as Promise<WebAppsListProcessesSlotNextResponse>;
  }

  /**
   * ListProcessModulesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListProcessModulesSlot method.
   * @param options The options parameters.
   */
  listProcessModulesSlotNext(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessModulesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        nextLink,
        options: operationOptions
      },
      listProcessModulesSlotNextOperationSpec
    ) as Promise<WebAppsListProcessModulesSlotNextResponse>;
  }

  /**
   * ListProcessThreadsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListProcessThreadsSlot method.
   * @param options The options parameters.
   */
  listProcessThreadsSlotNext(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListProcessThreadsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        slot,
        nextLink,
        options: operationOptions
      },
      listProcessThreadsSlotNextOperationSpec
    ) as Promise<WebAppsListProcessThreadsSlotNextResponse>;
  }

  /**
   * ListPublicCertificatesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings
   *             for the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListPublicCertificatesSlot
   *                 method.
   * @param options The options parameters.
   */
  listPublicCertificatesSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListPublicCertificatesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listPublicCertificatesSlotNextOperationSpec
    ) as Promise<WebAppsListPublicCertificatesSlotNextResponse>;
  }

  /**
   * ListSiteExtensionsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param nextLink The nextLink from the previous successful call to the ListSiteExtensionsSlot method.
   * @param options The options parameters.
   */
  listSiteExtensionsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSiteExtensionsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listSiteExtensionsSlotNextOperationSpec
    ) as Promise<WebAppsListSiteExtensionsSlotNextResponse>;
  }

  /**
   * ListSlotDifferencesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the
   *             source slot.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param nextLink The nextLink from the previous successful call to the ListSlotDifferencesSlot
   *                 method.
   * @param options The options parameters.
   */
  listSlotDifferencesSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    slotSwapEntity: CsmSlotEntity,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSlotDifferencesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        slotSwapEntity,
        nextLink,
        options: operationOptions
      },
      listSlotDifferencesSlotNextOperationSpec
    ) as Promise<WebAppsListSlotDifferencesSlotNextResponse>;
  }

  /**
   * ListSnapshotsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param nextLink The nextLink from the previous successful call to the ListSnapshotsSlot method.
   * @param options The options parameters.
   */
  listSnapshotsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSnapshotsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listSnapshotsSlotNextOperationSpec
    ) as Promise<WebAppsListSnapshotsSlotNextResponse>;
  }

  /**
   * ListSnapshotsFromDRSecondarySlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListSnapshotsFromDRSecondarySlot method.
   * @param options The options parameters.
   */
  listSnapshotsFromDRSecondarySlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSnapshotsFromDRSecondarySlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listSnapshotsFromDRSecondarySlotNextOperationSpec
    ) as Promise<WebAppsListSnapshotsFromDRSecondarySlotNextResponse>;
  }

  /**
   * ListTriggeredWebJobsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListTriggeredWebJobsSlot
   *                 method.
   * @param options The options parameters.
   */
  listTriggeredWebJobsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListTriggeredWebJobsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listTriggeredWebJobsSlotNextOperationSpec
    ) as Promise<WebAppsListTriggeredWebJobsSlotNextResponse>;
  }

  /**
   * ListTriggeredWebJobHistorySlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param nextLink The nextLink from the previous successful call to the ListTriggeredWebJobHistorySlot
   *                 method.
   * @param options The options parameters.
   */
  listTriggeredWebJobHistorySlotNext(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListTriggeredWebJobHistorySlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        slot,
        nextLink,
        options: operationOptions
      },
      listTriggeredWebJobHistorySlotNextOperationSpec
    ) as Promise<WebAppsListTriggeredWebJobHistorySlotNextResponse>;
  }

  /**
   * ListUsagesSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
   *             information of the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListUsagesSlot method.
   * @param options The options parameters.
   */
  listUsagesSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: WebAppsListUsagesSlotNextOptionalParams
  ): Promise<WebAppsListUsagesSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listUsagesSlotNextOperationSpec
    ) as Promise<WebAppsListUsagesSlotNextResponse>;
  }

  /**
   * ListWebJobsSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListWebJobsSlot method.
   * @param options The options parameters.
   */
  listWebJobsSlotNext(
    resourceGroupName: string,
    name: string,
    slot: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListWebJobsSlotNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, nextLink, options: operationOptions },
      listWebJobsSlotNextOperationSpec
    ) as Promise<WebAppsListWebJobsSlotNextResponse>;
  }

  /**
   * ListSlotDifferencesFromProductionNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListSlotDifferencesFromProduction method.
   * @param options The options parameters.
   */
  listSlotDifferencesFromProductionNext(
    resourceGroupName: string,
    name: string,
    slotSwapEntity: CsmSlotEntity,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSlotDifferencesFromProductionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        nextLink,
        options: operationOptions
      },
      listSlotDifferencesFromProductionNextOperationSpec
    ) as Promise<WebAppsListSlotDifferencesFromProductionNextResponse>;
  }

  /**
   * ListSnapshotsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param nextLink The nextLink from the previous successful call to the ListSnapshots method.
   * @param options The options parameters.
   */
  listSnapshotsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSnapshotsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listSnapshotsNextOperationSpec
    ) as Promise<WebAppsListSnapshotsNextResponse>;
  }

  /**
   * ListSnapshotsFromDRSecondaryNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param nextLink The nextLink from the previous successful call to the ListSnapshotsFromDRSecondary
   *                 method.
   * @param options The options parameters.
   */
  listSnapshotsFromDRSecondaryNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListSnapshotsFromDRSecondaryNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listSnapshotsFromDRSecondaryNextOperationSpec
    ) as Promise<WebAppsListSnapshotsFromDRSecondaryNextResponse>;
  }

  /**
   * ListTriggeredWebJobsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param nextLink The nextLink from the previous successful call to the ListTriggeredWebJobs method.
   * @param options The options parameters.
   */
  listTriggeredWebJobsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListTriggeredWebJobsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listTriggeredWebJobsNextOperationSpec
    ) as Promise<WebAppsListTriggeredWebJobsNextResponse>;
  }

  /**
   * ListTriggeredWebJobHistoryNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param nextLink The nextLink from the previous successful call to the ListTriggeredWebJobHistory
   *                 method.
   * @param options The options parameters.
   */
  listTriggeredWebJobHistoryNext(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListTriggeredWebJobHistoryNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        webJobName,
        nextLink,
        options: operationOptions
      },
      listTriggeredWebJobHistoryNextOperationSpec
    ) as Promise<WebAppsListTriggeredWebJobHistoryNextResponse>;
  }

  /**
   * ListUsagesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param nextLink The nextLink from the previous successful call to the ListUsages method.
   * @param options The options parameters.
   */
  listUsagesNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: WebAppsListUsagesNextOptionalParams
  ): Promise<WebAppsListUsagesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listUsagesNextOperationSpec
    ) as Promise<WebAppsListUsagesNextResponse>;
  }

  /**
   * ListWebJobsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param nextLink The nextLink from the previous successful call to the ListWebJobs method.
   * @param options The options parameters.
   */
  listWebJobsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<WebAppsListWebJobsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options: operationOptions },
      listWebJobsNextOperationSpec
    ) as Promise<WebAppsListWebJobsNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.includeSlots],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    201: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    204: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.deleteMetrics,
    Parameters.deleteEmptyServerFarm
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const analyzeCustomHostnameOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomHostnameAnalysisResult
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.hostName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const applySlotConfigToProductionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.slotSwapEntity,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const backupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBackupsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getBackupStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId
  ],
  serializer
};
const deleteBackupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId
  ],
  serializer
};
const listBackupStatusSecretsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listConfigurationsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateApplicationSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.appSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listApplicationSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateAuthSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteAuthSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAuthSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateAzureStorageAccountsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.azureStorageAccounts,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listAzureStorageAccountsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateBackupConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteBackupConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getBackupConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getAppSettingsKeyVaultReferencesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyVaultReferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getAppSettingKeyVaultReferenceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings/{appSettingKey}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyVaultReferenceResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.appSettingKey
  ],
  serializer
};
const updateConnectionStringsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionStrings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listConnectionStringsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getDiagnosticLogsConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateDiagnosticLogsConfigOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteLogsConfig,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateMetadataOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.metadata,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listMetadataOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listPublishingCredentialsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    201: {
      bodyMapper: Mappers.User
    },
    202: {
      bodyMapper: Mappers.User
    },
    204: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateSitePushSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PushSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.pushSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSitePushSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PushSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listSlotConfigurationNamesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SlotConfigNamesResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateSlotConfigurationNamesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SlotConfigNamesResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.slotConfigNames,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createOrUpdateConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteConfig,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteConfig,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listConfigurationSnapshotInfoOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getConfigurationSnapshotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.snapshotId
  ],
  serializer
};
const recoverSiteConfigurationSnapshotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.snapshotId
  ],
  serializer
};
const getWebSiteContainerLogsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    204: {},
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getContainerLogsZipOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    204: {},
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listContinuousWebJobsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getContinuousWebJobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJob
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const deleteContinuousWebJobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const startContinuousWebJobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const stopContinuousWebJobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const listDeploymentsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getDeploymentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id
  ],
  serializer
};
const createDeploymentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.deployment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDeploymentOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id
  ],
  serializer
};
const listDeploymentLogOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id
  ],
  serializer
};
const discoverBackupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RestoreRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listDomainOwnershipIdentifiersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getDomainOwnershipIdentifierOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName
  ],
  serializer
};
const createOrUpdateDomainOwnershipIdentifierOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.domainOwnershipIdentifier1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDomainOwnershipIdentifierOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName
  ],
  serializer
};
const updateDomainOwnershipIdentifierOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.domainOwnershipIdentifier1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainOwnershipIdentifierName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getMSDeployStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createMSDeployOperationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    201: {
      bodyMapper: Mappers.MSDeployStatus
    },
    202: {
      bodyMapper: Mappers.MSDeployStatus
    },
    204: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.mSDeploy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getMSDeployLogOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployLog
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listFunctionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelopeCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getFunctionsAdminTokenOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getFunctionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName
  ],
  serializer
};
const createFunctionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    201: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    202: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    204: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.functionEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteFunctionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName
  ],
  serializer
};
const createOrUpdateFunctionSecretOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyInfo
    },
    201: {
      bodyMapper: Mappers.KeyInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.key,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.keyName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteFunctionSecretOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName,
    Parameters.keyName
  ],
  serializer
};
const listFunctionKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listkeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName
  ],
  serializer
};
const listFunctionSecretsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.functionName
  ],
  serializer
};
const listHostKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listkeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.HostKeys
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listSyncStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listsyncstatus",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const syncFunctionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/sync",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createOrUpdateHostSecretOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyInfo
    },
    201: {
      bodyMapper: Mappers.KeyInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.key,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.keyName,
    Parameters.keyType
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteHostSecretOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.keyName,
    Parameters.keyType
  ],
  serializer
};
const listHostNameBindingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getHostNameBindingOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName1
  ],
  serializer
};
const createOrUpdateHostNameBindingOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.hostNameBinding,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName1
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteHostNameBindingOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName1
  ],
  serializer
};
const getHybridConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const createOrUpdateHybridConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteHybridConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const updateHybridConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listHybridConnectionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listRelayServiceConnectionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getRelayServiceConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName
  ],
  serializer
};
const createOrUpdateRelayServiceConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteRelayServiceConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName
  ],
  serializer
};
const updateRelayServiceConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listInstanceIdentifiersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppInstanceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getInstanceInfoOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebSiteInstanceStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId
  ],
  serializer
};
const getInstanceMsDeployStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId
  ],
  serializer
};
const createInstanceMSDeployOperationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    201: {
      bodyMapper: Mappers.MSDeployStatus
    },
    202: {
      bodyMapper: Mappers.MSDeployStatus
    },
    204: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.mSDeploy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getInstanceMSDeployLogOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployLog
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId
  ],
  serializer
};
const listInstanceProcessesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId
  ],
  serializer
};
const getInstanceProcessOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const deleteInstanceProcessOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const getInstanceProcessDumpOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const listInstanceProcessModulesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const getInstanceProcessModuleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.processId,
    Parameters.baseAddress
  ],
  serializer
};
const listInstanceProcessThreadsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const isCloneableOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SiteCloneability
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listSiteBackupsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listbackups",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listSyncFunctionTriggersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const migrateStorageOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StorageMigrationResponse
    },
    201: {
      bodyMapper: Mappers.StorageMigrationResponse
    },
    202: {
      bodyMapper: Mappers.StorageMigrationResponse
    },
    204: {
      bodyMapper: Mappers.StorageMigrationResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.migrationOptions,
  queryParameters: [Parameters.apiVersion, Parameters.subscriptionName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const migrateMySqlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Operation
    },
    201: {
      bodyMapper: Mappers.Operation
    },
    202: {
      bodyMapper: Mappers.Operation
    },
    204: {
      bodyMapper: Mappers.Operation
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.migrationRequestEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getMigrateMySqlStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateMySqlStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getSwiftVirtualNetworkConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createOrUpdateSwiftVirtualNetworkConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteSwiftVirtualNetworkOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateSwiftVirtualNetworkConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNetworkFeaturesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFeatures
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.view
  ],
  serializer
};
const getNetworkTraceOperationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId
  ],
  serializer
};
const startWebSiteNetworkTraceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const startWebSiteNetworkTraceOperationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    201: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    204: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const stopWebSiteNetworkTraceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getNetworkTracesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId
  ],
  serializer
};
const getNetworkTraceOperationV2OperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId
  ],
  serializer
};
const getNetworkTracesV2OperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId
  ],
  serializer
};
const generateNewSitePublishingPasswordOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
  httpMethod: "POST",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listPerfMonCountersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PerfMonCounterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getSitePhpErrorLogFlagOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SitePhpErrorLogFlag
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listPremierAddOnsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getPremierAddOnOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName
  ],
  serializer
};
const addPremierAddOnOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.premierAddOn,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deletePremierAddOnOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName
  ],
  serializer
};
const updatePremierAddOnOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.premierAddOn1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getPrivateAccessOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const putPrivateAccessVnetOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.access,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listProcessesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getProcessOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId
  ],
  serializer
};
const deleteProcessOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId
  ],
  serializer
};
const getProcessDumpOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId
  ],
  serializer
};
const listProcessModulesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId
  ],
  serializer
};
const getProcessModuleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId,
    Parameters.baseAddress
  ],
  serializer
};
const listProcessThreadsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.processId
  ],
  serializer
};
const listPublicCertificatesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getPublicCertificateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.publicCertificateName
  ],
  serializer
};
const createOrUpdatePublicCertificateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.publicCertificate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.publicCertificateName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deletePublicCertificateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.publicCertificateName
  ],
  serializer
};
const listPublishingProfileXmlWithSecretsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.publishingProfileOptions,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const resetProductionSlotConfigOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const restartOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.softRestart,
    Parameters.synchronous
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const restoreFromBackupBlobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreFromDeletedAppOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.restoreRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreSnapshotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.restoreRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSiteExtensionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getSiteExtensionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId
  ],
  serializer
};
const installSiteExtensionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    201: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    202: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    204: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId
  ],
  serializer
};
const deleteSiteExtensionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteExtensionId
  ],
  serializer
};
const copyProductionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotcopy",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.copySlotEntity,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSlotsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const createOrUpdateSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    201: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    204: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.deleteMetrics,
    Parameters.deleteEmptyServerFarm
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const analyzeCustomHostnameSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomHostnameAnalysisResult
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.hostName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const applySlotConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.slotSwapEntity,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const backupSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBackupsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getBackupStatusSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.backupId
  ],
  serializer
};
const deleteBackupSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.backupId
  ],
  serializer
};
const listBackupStatusSecretsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.backupId
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.backupId
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listConfigurationsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateApplicationSettingsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.appSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listApplicationSettingsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateAuthSettingsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteAuthSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAuthSettingsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateAzureStorageAccountsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.azureStorageAccounts,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listAzureStorageAccountsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateBackupConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteBackupConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getBackupConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateConnectionStringsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionStrings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listConnectionStringsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getDiagnosticLogsConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateDiagnosticLogsConfigSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteLogsConfig,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateMetadataSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.metadata,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listMetadataSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listPublishingCredentialsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    201: {
      bodyMapper: Mappers.User
    },
    202: {
      bodyMapper: Mappers.User
    },
    204: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateSitePushSettingsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PushSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.pushSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSitePushSettingsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PushSettings
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const createOrUpdateConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteConfig,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteConfig,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listConfigurationSnapshotInfoSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getConfigurationSnapshotSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.snapshotId
  ],
  serializer
};
const recoverSiteConfigurationSnapshotSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.snapshotId
  ],
  serializer
};
const getWebSiteContainerLogsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    204: {},
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getContainerLogsZipSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    204: {},
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listContinuousWebJobsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getContinuousWebJobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJob
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const deleteContinuousWebJobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const startContinuousWebJobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const stopContinuousWebJobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const listDeploymentsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getDeploymentSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.id
  ],
  serializer
};
const createDeploymentSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.deployment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.id
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDeploymentSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.id
  ],
  serializer
};
const listDeploymentLogSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.id
  ],
  serializer
};
const discoverBackupSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RestoreRequest
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listDomainOwnershipIdentifiersSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getDomainOwnershipIdentifierSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.domainOwnershipIdentifierName
  ],
  serializer
};
const createOrUpdateDomainOwnershipIdentifierSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.domainOwnershipIdentifier1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.domainOwnershipIdentifierName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDomainOwnershipIdentifierSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.domainOwnershipIdentifierName
  ],
  serializer
};
const updateDomainOwnershipIdentifierSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Identifier
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.domainOwnershipIdentifier1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.domainOwnershipIdentifierName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getMSDeployStatusSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const createMSDeployOperationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    201: {
      bodyMapper: Mappers.MSDeployStatus
    },
    202: {
      bodyMapper: Mappers.MSDeployStatus
    },
    204: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.mSDeploy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getMSDeployLogSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployLog
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listInstanceFunctionsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelopeCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getFunctionsAdminTokenSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getInstanceFunctionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.functionName
  ],
  serializer
};
const createInstanceFunctionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    201: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    202: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    204: {
      bodyMapper: Mappers.FunctionEnvelope
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.functionEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.functionName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteInstanceFunctionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.functionName
  ],
  serializer
};
const createOrUpdateFunctionSecretSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyInfo
    },
    201: {
      bodyMapper: Mappers.KeyInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.key,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.functionName,
    Parameters.keyName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteFunctionSecretSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.functionName,
    Parameters.keyName
  ],
  serializer
};
const listFunctionKeysSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listkeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.functionName
  ],
  serializer
};
const listFunctionSecretsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.functionName
  ],
  serializer
};
const listHostKeysSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listkeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.HostKeys
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listSyncStatusSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listsyncstatus",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const syncFunctionsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/sync",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const createOrUpdateHostSecretSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyInfo
    },
    201: {
      bodyMapper: Mappers.KeyInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.key,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.keyName,
    Parameters.keyType
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteHostSecretSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.keyName,
    Parameters.keyType
  ],
  serializer
};
const listHostNameBindingsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getHostNameBindingSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.hostName1
  ],
  serializer
};
const createOrUpdateHostNameBindingSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.hostNameBinding,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.hostName1
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteHostNameBindingSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.hostName1
  ],
  serializer
};
const getHybridConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const createOrUpdateHybridConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteHybridConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  serializer
};
const updateHybridConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.namespaceName,
    Parameters.relayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listHybridConnectionsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridConnection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listRelayServiceConnectionsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getRelayServiceConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.entityName
  ],
  serializer
};
const createOrUpdateRelayServiceConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.entityName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteRelayServiceConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.entityName
  ],
  serializer
};
const updateRelayServiceConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.entityName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listInstanceIdentifiersSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppInstanceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getInstanceInfoSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebSiteInstanceStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId
  ],
  serializer
};
const getInstanceMsDeployStatusSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId
  ],
  serializer
};
const createInstanceMSDeployOperationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployStatus
    },
    201: {
      bodyMapper: Mappers.MSDeployStatus
    },
    202: {
      bodyMapper: Mappers.MSDeployStatus
    },
    204: {
      bodyMapper: Mappers.MSDeployStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.mSDeploy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getInstanceMSDeployLogSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MSDeployLog
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId
  ],
  serializer
};
const listInstanceProcessesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId
  ],
  serializer
};
const getInstanceProcessSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const deleteInstanceProcessSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const getInstanceProcessDumpSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const listInstanceProcessModulesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const getInstanceProcessModuleSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.processId,
    Parameters.baseAddress
  ],
  serializer
};
const listInstanceProcessThreadsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const isCloneableSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SiteCloneability
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listSiteBackupsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listbackups",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listSyncFunctionTriggersSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getMigrateMySqlStatusSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateMySqlStatus
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getSwiftVirtualNetworkConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const createOrUpdateSwiftVirtualNetworkConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteSwiftVirtualNetworkSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateSwiftVirtualNetworkConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SwiftVirtualNetwork
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNetworkFeaturesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFeatures
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.view
  ],
  serializer
};
const getNetworkTraceOperationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.operationId
  ],
  serializer
};
const startWebSiteNetworkTraceSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const startWebSiteNetworkTraceOperationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    201: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    204: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const stopWebSiteNetworkTraceSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getNetworkTracesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.operationId
  ],
  serializer
};
const getNetworkTraceOperationSlotV2OperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.operationId
  ],
  serializer
};
const getNetworkTracesSlotV2OperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.operationId
  ],
  serializer
};
const generateNewSitePublishingPasswordSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
  httpMethod: "POST",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listPerfMonCountersSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PerfMonCounterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getSitePhpErrorLogFlagSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SitePhpErrorLogFlag
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listPremierAddOnsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getPremierAddOnSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.premierAddOnName
  ],
  serializer
};
const addPremierAddOnSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.premierAddOn,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.premierAddOnName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deletePremierAddOnSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.premierAddOnName
  ],
  serializer
};
const updatePremierAddOnSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOn
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.premierAddOn1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.premierAddOnName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getPrivateAccessSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const putPrivateAccessVnetSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.access,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getPrivateEndpointConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.privateEndpointConnectionName
  ],
  serializer
};
const approveOrRejectPrivateEndpointConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource
    },
    201: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource
    },
    202: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource
    },
    204: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.privateEndpointWrapper,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.privateEndpointConnectionName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deletePrivateEndpointConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } }
    },
    201: {
      bodyMapper: { type: { name: "any" } }
    },
    202: {
      bodyMapper: { type: { name: "any" } }
    },
    204: {
      bodyMapper: { type: { name: "any" } }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.privateEndpointConnectionName
  ],
  serializer
};
const getPrivateLinkResourcesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateLinkResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourcesWrapper
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listProcessesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getProcessSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.processId
  ],
  serializer
};
const deleteProcessSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.processId
  ],
  serializer
};
const getProcessDumpSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.processId
  ],
  serializer
};
const listProcessModulesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.processId
  ],
  serializer
};
const getProcessModuleSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.processId,
    Parameters.baseAddress
  ],
  serializer
};
const listProcessThreadsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.processId
  ],
  serializer
};
const listPublicCertificatesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getPublicCertificateSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.publicCertificateName
  ],
  serializer
};
const createOrUpdatePublicCertificateSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.publicCertificate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.publicCertificateName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deletePublicCertificateSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.publicCertificateName
  ],
  serializer
};
const listPublishingProfileXmlWithSecretsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.publishingProfileOptions,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const resetSlotConfigurationSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const restartSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.softRestart,
    Parameters.synchronous
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const restoreFromBackupBlobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreFromDeletedAppSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.restoreRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreSnapshotSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.restoreRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSiteExtensionsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getSiteExtensionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.siteExtensionId
  ],
  serializer
};
const installSiteExtensionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    201: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    202: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    204: {
      bodyMapper: Mappers.SiteExtensionInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.siteExtensionId
  ],
  serializer
};
const deleteSiteExtensionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.siteExtensionId
  ],
  serializer
};
const copySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotcopy",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.copySlotEntity,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSlotDifferencesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.slotSwapEntity,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const swapSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.slotSwapEntity,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSnapshotsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listSnapshotsFromDRSecondarySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getSourceControlSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const createOrUpdateSourceControlSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    204: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteSourceControl,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteSourceControlSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const updateSourceControlSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteSourceControl,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const startSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const startNetworkTraceSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    201: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    204: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const stopSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const stopNetworkTraceSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace",
  httpMethod: "POST",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const syncRepositorySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const syncFunctionTriggersSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listTriggeredWebJobsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getTriggeredWebJobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJob
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const deleteTriggeredWebJobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const listTriggeredWebJobHistorySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistoryCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const getTriggeredWebJobHistorySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistory
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName,
    Parameters.id
  ],
  serializer
};
const runTriggeredWebJobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
  httpMethod: "POST",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const listUsagesSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const listVnetConnectionsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VnetInfo" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getVnetConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.vnetName
  ],
  serializer
};
const createOrUpdateVnetConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.vnetName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteVnetConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.vnetName
  ],
  serializer
};
const updateVnetConnectionSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.vnetName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getVnetConnectionGatewaySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.vnetName,
    Parameters.gatewayName
  ],
  serializer
};
const createOrUpdateVnetConnectionGatewaySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.vnetName,
    Parameters.gatewayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateVnetConnectionGatewaySlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.vnetName,
    Parameters.gatewayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listWebJobsSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot
  ],
  serializer
};
const getWebJobSlotOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebJob
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const listSlotDifferencesFromProductionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.slotSwapEntity,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const swapSlotWithProductionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.slotSwapEntity,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSnapshotsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listSnapshotsFromDRSecondaryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getSourceControlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const createOrUpdateSourceControlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    204: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteSourceControl,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteSourceControlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const updateSourceControlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    202: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.siteSourceControl,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const startOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const startNetworkTraceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    201: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    204: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkTrace" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.durationInSeconds,
    Parameters.maxFrameLength,
    Parameters.sasUrl
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const stopOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const stopNetworkTraceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace",
  httpMethod: "POST",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const syncRepositoryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const syncFunctionTriggersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listTriggeredWebJobsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getTriggeredWebJobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJob
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const deleteTriggeredWebJobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const listTriggeredWebJobHistoryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistoryCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const getTriggeredWebJobHistoryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistory
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName,
    Parameters.id
  ],
  serializer
};
const runTriggeredWebJobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
  httpMethod: "POST",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const listUsagesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const listVnetConnectionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VnetInfo" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getVnetConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName
  ],
  serializer
};
const createOrUpdateVnetConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteVnetConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName
  ],
  serializer
};
const updateVnetConnectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getVnetConnectionGatewayOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName
  ],
  serializer
};
const createOrUpdateVnetConnectionGatewayOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateVnetConnectionGatewayOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.connectionEnvelope4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listWebJobsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  serializer
};
const getWebJobOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebJob
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.webJobName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.includeSlots],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  serializer
};
const listBackupsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listConfigurationsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listConfigurationSnapshotInfoNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listContinuousWebJobsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listDeploymentsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listDomainOwnershipIdentifiersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listFunctionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelopeCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listHostNameBindingsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listInstanceIdentifiersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppInstanceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listInstanceProcessesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.instanceId
  ],
  serializer
};
const listInstanceProcessModulesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const listInstanceProcessThreadsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const listSiteBackupsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listPerfMonCountersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PerfMonCounterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listProcessesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listProcessModulesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.processId
  ],
  serializer
};
const listProcessThreadsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.processId
  ],
  serializer
};
const listPublicCertificatesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listSiteExtensionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listSlotsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listBackupsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listConfigurationsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigResourceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listConfigurationSnapshotInfoSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listContinuousWebJobsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContinuousWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listDeploymentsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listDomainOwnershipIdentifiersSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listInstanceFunctionsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FunctionEnvelopeCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listHostNameBindingsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listInstanceIdentifiersSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppInstanceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listInstanceProcessesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot,
    Parameters.instanceId
  ],
  serializer
};
const listInstanceProcessModulesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const listInstanceProcessThreadsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.processId
  ],
  serializer
};
const listSiteBackupsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listPerfMonCountersSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PerfMonCounterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listProcessesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listProcessModulesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessModuleInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot,
    Parameters.processId
  ],
  serializer
};
const listProcessThreadsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProcessThreadInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot,
    Parameters.processId
  ],
  serializer
};
const listPublicCertificatesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublicCertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listSiteExtensionsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteExtensionInfoCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listSlotDifferencesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink1,
    Parameters.slot
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSnapshotsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listSnapshotsFromDRSecondarySlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listTriggeredWebJobsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listTriggeredWebJobHistorySlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistoryCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot,
    Parameters.webJobName
  ],
  serializer
};
const listUsagesSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listWebJobsSlotNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.slot
  ],
  serializer
};
const listSlotDifferencesFromProductionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink1
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSnapshotsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listSnapshotsFromDRSecondaryNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listTriggeredWebJobsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredWebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listTriggeredWebJobHistoryNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TriggeredJobHistoryCollection
    },
    404: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.webJobName
  ],
  serializer
};
const listUsagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
const listWebJobsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebJobCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  serializer
};
