/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";
import {
  StaticSiteARMResource,
  StaticSiteUserARMResource,
  StaticSiteBuildARMResource,
  StaticSiteFunctionOverviewARMResource,
  StaticSiteCustomDomainOverviewARMResource,
  StaticSitesListResponse,
  StaticSitesGetStaticSitesByResourceGroupResponse,
  StaticSitesGetStaticSiteResponse,
  StaticSitesCreateOrUpdateStaticSiteResponse,
  StaticSitePatchResource,
  StaticSitesUpdateStaticSiteResponse,
  StaticSitesListStaticSiteUsersResponse,
  StaticSitesUpdateStaticSiteUserResponse,
  StaticSitesGetStaticSiteBuildsResponse,
  StaticSitesGetStaticSiteBuildResponse,
  StringDictionary,
  StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse,
  StaticSitesListStaticSiteBuildFunctionsResponse,
  StaticSitesListStaticSiteBuildFunctionAppSettingsResponse,
  StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse,
  StaticSiteUserInvitationRequestResource,
  StaticSitesCreateUserRolesInvitationLinkResponse,
  StaticSitesListStaticSiteCustomDomainsResponse,
  StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse,
  StaticSitesListStaticSiteFunctionsResponse,
  StaticSitesListStaticSiteFunctionAppSettingsResponse,
  StaticSitesListStaticSiteSecretsResponse,
  StaticSiteResetPropertiesARMResource,
  StaticSitesListNextResponse,
  StaticSitesGetStaticSitesByResourceGroupNextResponse,
  StaticSitesListStaticSiteUsersNextResponse,
  StaticSitesGetStaticSiteBuildsNextResponse,
  StaticSitesListStaticSiteBuildFunctionsNextResponse,
  StaticSitesListStaticSiteCustomDomainsNextResponse,
  StaticSitesListStaticSiteFunctionsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a StaticSites. */
export class StaticSites {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Initialize a new instance of the class StaticSites class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for Get all Static Sites for a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<StaticSiteARMResource> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteARMResource[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteARMResource> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Description for Gets all static sites in the specified resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  public listStaticSitesByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<StaticSiteARMResource> {
    const iter = this.getStaticSitesByResourceGroupPagingAll(
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getStaticSitesByResourceGroupPagingPage(
          resourceGroupName,
          options
        );
      }
    };
  }

  private async *getStaticSitesByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteARMResource[]> {
    let result = await this._getStaticSitesByResourceGroup(
      resourceGroupName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getStaticSitesByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getStaticSitesByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteARMResource> {
    for await (const page of this.getStaticSitesByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the list of users of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for the users.
   * @param options The options parameters.
   */
  public listStaticSiteUsers(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<StaticSiteUserARMResource> {
    const iter = this.listStaticSiteUsersPagingAll(
      resourceGroupName,
      name,
      authprovider,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listStaticSiteUsersPagingPage(
          resourceGroupName,
          name,
          authprovider,
          options
        );
      }
    };
  }

  private async *listStaticSiteUsersPagingPage(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteUserARMResource[]> {
    let result = await this._listStaticSiteUsers(
      resourceGroupName,
      name,
      authprovider,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listStaticSiteUsersNext(
        resourceGroupName,
        name,
        authprovider,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listStaticSiteUsersPagingAll(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteUserARMResource> {
    for await (const page of this.listStaticSiteUsersPagingPage(
      resourceGroupName,
      name,
      authprovider,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets all static site builds for a particular static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  public listStaticSiteBuilds(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<StaticSiteBuildARMResource> {
    const iter = this.getStaticSiteBuildsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getStaticSiteBuildsPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *getStaticSiteBuildsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteBuildARMResource[]> {
    let result = await this._getStaticSiteBuilds(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getStaticSiteBuildsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getStaticSiteBuildsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteBuildARMResource> {
    for await (const page of this.getStaticSiteBuildsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the functions of a particular static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  public listStaticSiteBuildFunctions(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<StaticSiteFunctionOverviewARMResource> {
    const iter = this.listStaticSiteBuildFunctionsPagingAll(
      resourceGroupName,
      name,
      prId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listStaticSiteBuildFunctionsPagingPage(
          resourceGroupName,
          name,
          prId,
          options
        );
      }
    };
  }

  private async *listStaticSiteBuildFunctionsPagingPage(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteFunctionOverviewARMResource[]> {
    let result = await this._listStaticSiteBuildFunctions(
      resourceGroupName,
      name,
      prId,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listStaticSiteBuildFunctionsNext(
        resourceGroupName,
        name,
        prId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listStaticSiteBuildFunctionsPagingAll(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteFunctionOverviewARMResource> {
    for await (const page of this.listStaticSiteBuildFunctionsPagingPage(
      resourceGroupName,
      name,
      prId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets all static site custom domains for a particular static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site resource to search in.
   * @param options The options parameters.
   */
  public listStaticSiteCustomDomains(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<StaticSiteCustomDomainOverviewARMResource> {
    const iter = this.listStaticSiteCustomDomainsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listStaticSiteCustomDomainsPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *listStaticSiteCustomDomainsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteCustomDomainOverviewARMResource[]> {
    let result = await this._listStaticSiteCustomDomains(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listStaticSiteCustomDomainsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listStaticSiteCustomDomainsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteCustomDomainOverviewARMResource> {
    for await (const page of this.listStaticSiteCustomDomainsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the functions of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  public listStaticSiteFunctions(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<StaticSiteFunctionOverviewARMResource> {
    const iter = this.listStaticSiteFunctionsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listStaticSiteFunctionsPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *listStaticSiteFunctionsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteFunctionOverviewARMResource[]> {
    let result = await this._listStaticSiteFunctions(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listStaticSiteFunctionsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listStaticSiteFunctionsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StaticSiteFunctionOverviewARMResource> {
    for await (const page of this.listStaticSiteFunctionsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get all Static Sites for a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<StaticSitesListResponse>;
  }

  /**
   * Description for Gets all static sites in the specified resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  private _getStaticSitesByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesGetStaticSitesByResourceGroupResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getStaticSitesByResourceGroupOperationSpec
    ) as Promise<StaticSitesGetStaticSitesByResourceGroupResponse>;
  }

  /**
   * Description for Gets the details of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  getStaticSite(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesGetStaticSiteResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getStaticSiteOperationSpec
    ) as Promise<StaticSitesGetStaticSiteResponse>;
  }

  /**
   * Description for Creates a new static site in an existing resource group, or updates an existing
   * static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param options The options parameters.
   */
  createOrUpdateStaticSite(
    resourceGroupName: string,
    name: string,
    staticSiteEnvelope: StaticSiteARMResource,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesCreateOrUpdateStaticSiteResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      staticSiteEnvelope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOrUpdateStaticSiteOperationSpec
    ) as Promise<StaticSitesCreateOrUpdateStaticSiteResponse>;
  }

  /**
   * Description for Deletes a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to delete.
   * @param options The options parameters.
   */
  deleteStaticSite(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteStaticSiteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates a new static site in an existing resource group, or updates an existing
   * static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param options The options parameters.
   */
  updateStaticSite(
    resourceGroupName: string,
    name: string,
    staticSiteEnvelope: StaticSitePatchResource,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesUpdateStaticSiteResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      staticSiteEnvelope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateStaticSiteOperationSpec
    ) as Promise<StaticSitesUpdateStaticSiteResponse>;
  }

  /**
   * Description for Gets the list of users of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for the users.
   * @param options The options parameters.
   */
  private _listStaticSiteUsers(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteUsersResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      authprovider,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteUsersOperationSpec
    ) as Promise<StaticSitesListStaticSiteUsersResponse>;
  }

  /**
   * Description for Deletes the user entry from the static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the staticsite.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param options The options parameters.
   */
  deleteStaticSiteUser(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    userid: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      authprovider,
      userid,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteStaticSiteUserOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Updates a user entry with the listed roles
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See example.
   * @param options The options parameters.
   */
  updateStaticSiteUser(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    userid: string,
    staticSiteUserEnvelope: StaticSiteUserARMResource,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesUpdateStaticSiteUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      authprovider,
      userid,
      staticSiteUserEnvelope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateStaticSiteUserOperationSpec
    ) as Promise<StaticSitesUpdateStaticSiteUserResponse>;
  }

  /**
   * Description for Gets all static site builds for a particular static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  private _getStaticSiteBuilds(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesGetStaticSiteBuildsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getStaticSiteBuildsOperationSpec
    ) as Promise<StaticSitesGetStaticSiteBuildsResponse>;
  }

  /**
   * Description for Gets the details of a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  getStaticSiteBuild(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesGetStaticSiteBuildResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      prId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getStaticSiteBuildOperationSpec
    ) as Promise<StaticSitesGetStaticSiteBuildResponse>;
  }

  /**
   * Description for Deletes a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  deleteStaticSiteBuild(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      prId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteStaticSiteBuildOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Creates or updates the function app settings of a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param appSettings String dictionary resource.
   * @param options The options parameters.
   */
  createOrUpdateStaticSiteBuildFunctionAppSettings(
    resourceGroupName: string,
    name: string,
    prId: string,
    appSettings: StringDictionary,
    options?: coreHttp.OperationOptions
  ): Promise<
    StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      prId,
      appSettings,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOrUpdateStaticSiteBuildFunctionAppSettingsOperationSpec
    ) as Promise<
      StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse
    >;
  }

  /**
   * Description for Gets the functions of a particular static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  private _listStaticSiteBuildFunctions(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteBuildFunctionsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      prId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteBuildFunctionsOperationSpec
    ) as Promise<StaticSitesListStaticSiteBuildFunctionsResponse>;
  }

  /**
   * Description for Gets the application settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  listStaticSiteBuildFunctionAppSettings(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteBuildFunctionAppSettingsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      prId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteBuildFunctionAppSettingsOperationSpec
    ) as Promise<StaticSitesListStaticSiteBuildFunctionAppSettingsResponse>;
  }

  /**
   * Description for Creates or updates the function app settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param appSettings String dictionary resource.
   * @param options The options parameters.
   */
  createOrUpdateStaticSiteFunctionAppSettings(
    resourceGroupName: string,
    name: string,
    appSettings: StringDictionary,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      appSettings,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOrUpdateStaticSiteFunctionAppSettingsOperationSpec
    ) as Promise<
      StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse
    >;
  }

  /**
   * Description for Creates an invitation link for a user with the role
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param staticSiteUserRolesInvitationEnvelope Static sites user roles invitation resource.
   * @param options The options parameters.
   */
  createUserRolesInvitationLink(
    resourceGroupName: string,
    name: string,
    staticSiteUserRolesInvitationEnvelope: StaticSiteUserInvitationRequestResource,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesCreateUserRolesInvitationLinkResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      staticSiteUserRolesInvitationEnvelope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createUserRolesInvitationLinkOperationSpec
    ) as Promise<StaticSitesCreateUserRolesInvitationLinkResponse>;
  }

  /**
   * Description for Gets all static site custom domains for a particular static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site resource to search in.
   * @param options The options parameters.
   */
  private _listStaticSiteCustomDomains(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteCustomDomainsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteCustomDomainsOperationSpec
    ) as Promise<StaticSitesListStaticSiteCustomDomainsResponse>;
  }

  /**
   * Description for Creates a new static site custom domain in an existing resource group and static
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to create.
   * @param options The options parameters.
   */
  createOrUpdateStaticSiteCustomDomain(
    resourceGroupName: string,
    name: string,
    domainName: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      domainName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOrUpdateStaticSiteCustomDomainOperationSpec
    ) as Promise<StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse>;
  }

  /**
   * Description for Deletes a custom domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to delete.
   * @param options The options parameters.
   */
  deleteStaticSiteCustomDomain(
    resourceGroupName: string,
    name: string,
    domainName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      domainName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteStaticSiteCustomDomainOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Validates a particular custom domain can be added to a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to validate.
   * @param options The options parameters.
   */
  validateCustomDomainCanBeAddedToStaticSite(
    resourceGroupName: string,
    name: string,
    domainName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      domainName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      validateCustomDomainCanBeAddedToStaticSiteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Detaches a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to detach.
   * @param options The options parameters.
   */
  detachStaticSite(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      detachStaticSiteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Gets the functions of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  private _listStaticSiteFunctions(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteFunctionsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteFunctionsOperationSpec
    ) as Promise<StaticSitesListStaticSiteFunctionsResponse>;
  }

  /**
   * Description for Gets the application settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  listStaticSiteFunctionAppSettings(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteFunctionAppSettingsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteFunctionAppSettingsOperationSpec
    ) as Promise<StaticSitesListStaticSiteFunctionAppSettingsResponse>;
  }

  /**
   * Description for Lists the secrets for an existing static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  listStaticSiteSecrets(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteSecretsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteSecretsOperationSpec
    ) as Promise<StaticSitesListStaticSiteSecretsResponse>;
  }

  /**
   * Description for Resets the api key for an existing static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param resetPropertiesEnvelope Static Site Reset Properties ARM resource.
   * @param options The options parameters.
   */
  resetStaticSiteApiKey(
    resourceGroupName: string,
    name: string,
    resetPropertiesEnvelope: StaticSiteResetPropertiesARMResource,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      resetPropertiesEnvelope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      resetStaticSiteApiKeyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<StaticSitesListNextResponse>;
  }

  /**
   * GetStaticSitesByResourceGroupNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param nextLink The nextLink from the previous successful call to the GetStaticSitesByResourceGroup
   *                 method.
   * @param options The options parameters.
   */
  private _getStaticSitesByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesGetStaticSitesByResourceGroupNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getStaticSitesByResourceGroupNextOperationSpec
    ) as Promise<StaticSitesGetStaticSitesByResourceGroupNextResponse>;
  }

  /**
   * ListStaticSiteUsersNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for the users.
   * @param nextLink The nextLink from the previous successful call to the ListStaticSiteUsers method.
   * @param options The options parameters.
   */
  private _listStaticSiteUsersNext(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteUsersNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      authprovider,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteUsersNextOperationSpec
    ) as Promise<StaticSitesListStaticSiteUsersNextResponse>;
  }

  /**
   * GetStaticSiteBuildsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param nextLink The nextLink from the previous successful call to the GetStaticSiteBuilds method.
   * @param options The options parameters.
   */
  private _getStaticSiteBuildsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesGetStaticSiteBuildsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getStaticSiteBuildsNextOperationSpec
    ) as Promise<StaticSitesGetStaticSiteBuildsNextResponse>;
  }

  /**
   * ListStaticSiteBuildFunctionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param nextLink The nextLink from the previous successful call to the ListStaticSiteBuildFunctions
   *                 method.
   * @param options The options parameters.
   */
  private _listStaticSiteBuildFunctionsNext(
    resourceGroupName: string,
    name: string,
    prId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteBuildFunctionsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      prId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteBuildFunctionsNextOperationSpec
    ) as Promise<StaticSitesListStaticSiteBuildFunctionsNextResponse>;
  }

  /**
   * ListStaticSiteCustomDomainsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site resource to search in.
   * @param nextLink The nextLink from the previous successful call to the ListStaticSiteCustomDomains
   *                 method.
   * @param options The options parameters.
   */
  private _listStaticSiteCustomDomainsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteCustomDomainsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteCustomDomainsNextOperationSpec
    ) as Promise<StaticSitesListStaticSiteCustomDomainsNextResponse>;
  }

  /**
   * ListStaticSiteFunctionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param nextLink The nextLink from the previous successful call to the ListStaticSiteFunctions
   *                 method.
   * @param options The options parameters.
   */
  private _listStaticSiteFunctionsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<StaticSitesListStaticSiteFunctionsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listStaticSiteFunctionsNextOperationSpec
    ) as Promise<StaticSitesListStaticSiteFunctionsNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/staticSites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getStaticSitesByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStaticSiteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateStaticSiteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    202: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.staticSiteEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteStaticSiteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateStaticSiteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    202: {
      bodyMapper: Mappers.StaticSiteARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.staticSiteEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listStaticSiteUsersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/listUsers",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteUserCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.authprovider
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteStaticSiteUserOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/users/{userid}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.authprovider,
    Parameters.userid
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateStaticSiteUserOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/users/{userid}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteUserARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.staticSiteUserEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.authprovider,
    Parameters.userid
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getStaticSiteBuildsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteBuildCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStaticSiteBuildOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteBuildARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteStaticSiteBuildOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateStaticSiteBuildFunctionAppSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/config/functionappsettings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    202: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.appSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listStaticSiteBuildFunctionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/functions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteFunctionOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStaticSiteBuildFunctionAppSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/listFunctionAppSettings",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    202: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.prId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateStaticSiteFunctionAppSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/config/functionappsettings",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    202: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.appSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createUserRolesInvitationLinkOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/createUserInvitation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteUserInvitationResponseResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.staticSiteUserRolesInvitationEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listStaticSiteCustomDomainsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCustomDomainOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateStaticSiteCustomDomainOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCustomDomainOverviewARMResource
    },
    202: {
      bodyMapper: Mappers.StaticSiteCustomDomainOverviewARMResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteStaticSiteCustomDomainOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const validateCustomDomainCanBeAddedToStaticSiteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}/validate",
  httpMethod: "POST",
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const detachStaticSiteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/detach",
  httpMethod: "POST",
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStaticSiteFunctionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/functions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteFunctionOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStaticSiteFunctionAppSettingsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/listFunctionAppSettings",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    202: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStaticSiteSecretsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/listSecrets",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resetStaticSiteApiKeyOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/resetapikey",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.resetPropertiesEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStaticSitesByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStaticSiteUsersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteUserCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.authprovider
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStaticSiteBuildsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteBuildCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStaticSiteBuildFunctionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteFunctionOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.prId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStaticSiteCustomDomainsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteCustomDomainOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStaticSiteFunctionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StaticSiteFunctionOverviewCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
