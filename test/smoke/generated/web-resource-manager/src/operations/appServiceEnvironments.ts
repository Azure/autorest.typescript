/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  AppServiceEnvironmentResource,
  StampCapacity,
  Site,
  VirtualNetworkProfile,
  InboundEnvironmentEndpoint,
  WorkerPoolResource,
  ResourceMetricDefinition,
  SkuInfo,
  Usage,
  OutboundEnvironmentEndpoint,
  AppServicePlan,
  AppServiceEnvironmentsListWebAppsNextOptionalParams,
  AppServiceEnvironmentsListWebAppsOptionalParams,
  CsmUsageQuota,
  AppServiceEnvironmentsListUsagesNextOptionalParams,
  AppServiceEnvironmentsListUsagesOptionalParams,
  AppServiceEnvironmentsListResponse,
  AppServiceEnvironmentsListByResourceGroupResponse,
  AppServiceEnvironmentsGetResponse,
  AppServiceEnvironmentsCreateOrUpdateResponse,
  AppServiceEnvironmentsDeleteOptionalParams,
  AppServiceEnvironmentPatchResource,
  AppServiceEnvironmentsUpdateResponse,
  AppServiceEnvironmentsListCapacitiesResponse,
  AppServiceEnvironmentsGetVipInfoResponse,
  AppServiceEnvironmentsChangeVnetResponse,
  AppServiceEnvironmentsListDiagnosticsResponse,
  AppServiceEnvironmentsGetDiagnosticsItemResponse,
  AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse,
  AppServiceEnvironmentsListMultiRolePoolsResponse,
  AppServiceEnvironmentsGetMultiRolePoolResponse,
  AppServiceEnvironmentsCreateOrUpdateMultiRolePoolResponse,
  AppServiceEnvironmentsUpdateMultiRolePoolResponse,
  AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse,
  AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse,
  AppServiceEnvironmentsListMultiRolePoolSkusResponse,
  AppServiceEnvironmentsListMultiRoleUsagesResponse,
  AppServiceEnvironmentsListOperationsResponse,
  AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse,
  AppServiceEnvironmentsResumeResponse,
  AppServiceEnvironmentsListAppServicePlansResponse,
  AppServiceEnvironmentsListWebAppsResponse,
  AppServiceEnvironmentsSuspendResponse,
  AppServiceEnvironmentsListUsagesResponse,
  AppServiceEnvironmentsListWorkerPoolsResponse,
  AppServiceEnvironmentsGetWorkerPoolResponse,
  AppServiceEnvironmentsCreateOrUpdateWorkerPoolResponse,
  AppServiceEnvironmentsUpdateWorkerPoolResponse,
  AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse,
  AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse,
  AppServiceEnvironmentsListWorkerPoolSkusResponse,
  AppServiceEnvironmentsListWebWorkerUsagesResponse,
  AppServiceEnvironmentsListNextResponse,
  AppServiceEnvironmentsListByResourceGroupNextResponse,
  AppServiceEnvironmentsListCapacitiesNextResponse,
  AppServiceEnvironmentsChangeVnetNextResponse,
  AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsNextResponse,
  AppServiceEnvironmentsListMultiRolePoolsNextResponse,
  AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsNextResponse,
  AppServiceEnvironmentsListMultiRoleMetricDefinitionsNextResponse,
  AppServiceEnvironmentsListMultiRolePoolSkusNextResponse,
  AppServiceEnvironmentsListMultiRoleUsagesNextResponse,
  AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsNextResponse,
  AppServiceEnvironmentsResumeNextResponse,
  AppServiceEnvironmentsListAppServicePlansNextResponse,
  AppServiceEnvironmentsListWebAppsNextResponse,
  AppServiceEnvironmentsSuspendNextResponse,
  AppServiceEnvironmentsListUsagesNextResponse,
  AppServiceEnvironmentsListWorkerPoolsNextResponse,
  AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsNextResponse,
  AppServiceEnvironmentsListWebWorkerMetricDefinitionsNextResponse,
  AppServiceEnvironmentsListWorkerPoolSkusNextResponse,
  AppServiceEnvironmentsListWebWorkerUsagesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a AppServiceEnvironments. */
export class AppServiceEnvironments {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Initialize a new instance of the class AppServiceEnvironments class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for Get all App Service Environments for a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<AppServiceEnvironmentResource> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<AppServiceEnvironmentResource[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<AppServiceEnvironmentResource> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Description for Get all App Service Environments in a resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<AppServiceEnvironmentResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<AppServiceEnvironmentResource[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<AppServiceEnvironmentResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get the used, available, and total worker capacity an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listCapacities(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<StampCapacity> {
    const iter = this.listCapacitiesPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listCapacitiesPagingPage(resourceGroupName, name, options);
      }
    };
  }

  private async *listCapacitiesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StampCapacity[]> {
    let result = await this._listCapacities(resourceGroupName, name, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listCapacitiesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listCapacitiesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<StampCapacity> {
    for await (const page of this.listCapacitiesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Move an App Service Environment to a different VNET.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param vnetInfo Details for the new virtual network.
   * @param options The options parameters.
   */
  public listChangeVnet(
    resourceGroupName: string,
    name: string,
    vnetInfo: VirtualNetworkProfile,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.changeVnetPagingAll(
      resourceGroupName,
      name,
      vnetInfo,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.changeVnetPagingPage(
          resourceGroupName,
          name,
          vnetInfo,
          options
        );
      }
    };
  }

  private async *changeVnetPagingPage(
    resourceGroupName: string,
    name: string,
    vnetInfo: VirtualNetworkProfile,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Site[]> {
    const poller = await this._changeVnet(
      resourceGroupName,
      name,
      vnetInfo,
      options
    );
    let result: any = await poller.pollUntilDone();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._changeVnetNext(
        resourceGroupName,
        name,
        vnetInfo,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *changeVnetPagingAll(
    resourceGroupName: string,
    name: string,
    vnetInfo: VirtualNetworkProfile,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Site> {
    for await (const page of this.changeVnetPagingPage(
      resourceGroupName,
      name,
      vnetInfo,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get the network endpoints of all inbound dependencies of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listInboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<InboundEnvironmentEndpoint> {
    const iter = this.getInboundNetworkDependenciesEndpointsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getInboundNetworkDependenciesEndpointsPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *getInboundNetworkDependenciesEndpointsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<InboundEnvironmentEndpoint[]> {
    let result = await this._getInboundNetworkDependenciesEndpoints(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getInboundNetworkDependenciesEndpointsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getInboundNetworkDependenciesEndpointsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<InboundEnvironmentEndpoint> {
    for await (const page of this.getInboundNetworkDependenciesEndpointsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get all multi-role pools.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listMultiRolePools(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<WorkerPoolResource> {
    const iter = this.listMultiRolePoolsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listMultiRolePoolsPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *listMultiRolePoolsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<WorkerPoolResource[]> {
    let result = await this._listMultiRolePools(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listMultiRolePoolsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listMultiRolePoolsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<WorkerPoolResource> {
    for await (const page of this.listMultiRolePoolsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get metric definitions for a specific instance of a multi-role pool of an App
   * Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param instance Name of the instance in the multi-role pool.
   * @param options The options parameters.
   */
  public listMultiRolePoolInstanceMetricDefinitions(
    resourceGroupName: string,
    name: string,
    instance: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<ResourceMetricDefinition> {
    const iter = this.listMultiRolePoolInstanceMetricDefinitionsPagingAll(
      resourceGroupName,
      name,
      instance,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listMultiRolePoolInstanceMetricDefinitionsPagingPage(
          resourceGroupName,
          name,
          instance,
          options
        );
      }
    };
  }

  private async *listMultiRolePoolInstanceMetricDefinitionsPagingPage(
    resourceGroupName: string,
    name: string,
    instance: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceMetricDefinition[]> {
    let result = await this._listMultiRolePoolInstanceMetricDefinitions(
      resourceGroupName,
      name,
      instance,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listMultiRolePoolInstanceMetricDefinitionsNext(
        resourceGroupName,
        name,
        instance,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listMultiRolePoolInstanceMetricDefinitionsPagingAll(
    resourceGroupName: string,
    name: string,
    instance: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceMetricDefinition> {
    for await (const page of this.listMultiRolePoolInstanceMetricDefinitionsPagingPage(
      resourceGroupName,
      name,
      instance,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get metric definitions for a multi-role pool of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listMultiRoleMetricDefinitions(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<ResourceMetricDefinition> {
    const iter = this.listMultiRoleMetricDefinitionsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listMultiRoleMetricDefinitionsPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *listMultiRoleMetricDefinitionsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceMetricDefinition[]> {
    let result = await this._listMultiRoleMetricDefinitions(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listMultiRoleMetricDefinitionsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listMultiRoleMetricDefinitionsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceMetricDefinition> {
    for await (const page of this.listMultiRoleMetricDefinitionsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get available SKUs for scaling a multi-role pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listMultiRolePoolSkus(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<SkuInfo> {
    const iter = this.listMultiRolePoolSkusPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listMultiRolePoolSkusPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *listMultiRolePoolSkusPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<SkuInfo[]> {
    let result = await this._listMultiRolePoolSkus(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listMultiRolePoolSkusNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listMultiRolePoolSkusPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<SkuInfo> {
    for await (const page of this.listMultiRolePoolSkusPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get usage metrics for a multi-role pool of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listMultiRoleUsages(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Usage> {
    const iter = this.listMultiRoleUsagesPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listMultiRoleUsagesPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *listMultiRoleUsagesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Usage[]> {
    let result = await this._listMultiRoleUsages(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listMultiRoleUsagesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listMultiRoleUsagesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Usage> {
    for await (const page of this.listMultiRoleUsagesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get the network endpoints of all outbound dependencies of an App Service
   * Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listOutboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<OutboundEnvironmentEndpoint> {
    const iter = this.getOutboundNetworkDependenciesEndpointsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getOutboundNetworkDependenciesEndpointsPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *getOutboundNetworkDependenciesEndpointsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<OutboundEnvironmentEndpoint[]> {
    let result = await this._getOutboundNetworkDependenciesEndpoints(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getOutboundNetworkDependenciesEndpointsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getOutboundNetworkDependenciesEndpointsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<OutboundEnvironmentEndpoint> {
    for await (const page of this.getOutboundNetworkDependenciesEndpointsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Resume an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listResume(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.resumePagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.resumePagingPage(resourceGroupName, name, options);
      }
    };
  }

  private async *resumePagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Site[]> {
    const poller = await this._resume(resourceGroupName, name, options);
    let result: any = await poller.pollUntilDone();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._resumeNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *resumePagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Site> {
    for await (const page of this.resumePagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get all App Service plans in an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listAppServicePlans(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<AppServicePlan> {
    const iter = this.listAppServicePlansPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAppServicePlansPagingPage(
          resourceGroupName,
          name,
          options
        );
      }
    };
  }

  private async *listAppServicePlansPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<AppServicePlan[]> {
    let result = await this._listAppServicePlans(
      resourceGroupName,
      name,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAppServicePlansNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAppServicePlansPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<AppServicePlan> {
    for await (const page of this.listAppServicePlansPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get all apps in an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listWebApps(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsListWebAppsOptionalParams
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.listWebAppsPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listWebAppsPagingPage(resourceGroupName, name, options);
      }
    };
  }

  private async *listWebAppsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsListWebAppsOptionalParams
  ): AsyncIterableIterator<Site[]> {
    let result = await this._listWebApps(resourceGroupName, name, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listWebAppsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listWebAppsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsListWebAppsOptionalParams
  ): AsyncIterableIterator<Site> {
    for await (const page of this.listWebAppsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Suspend an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listSuspend(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.suspendPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.suspendPagingPage(resourceGroupName, name, options);
      }
    };
  }

  private async *suspendPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Site[]> {
    const poller = await this._suspend(resourceGroupName, name, options);
    let result: any = await poller.pollUntilDone();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._suspendNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *suspendPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Site> {
    for await (const page of this.suspendPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get global usage metrics of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listUsages(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsListUsagesOptionalParams
  ): PagedAsyncIterableIterator<CsmUsageQuota> {
    const iter = this.listUsagesPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listUsagesPagingPage(resourceGroupName, name, options);
      }
    };
  }

  private async *listUsagesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsListUsagesOptionalParams
  ): AsyncIterableIterator<CsmUsageQuota[]> {
    let result = await this._listUsages(resourceGroupName, name, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listUsagesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listUsagesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsListUsagesOptionalParams
  ): AsyncIterableIterator<CsmUsageQuota> {
    for await (const page of this.listUsagesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get all worker pools of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  public listWorkerPools(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<WorkerPoolResource> {
    const iter = this.listWorkerPoolsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listWorkerPoolsPagingPage(resourceGroupName, name, options);
      }
    };
  }

  private async *listWorkerPoolsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<WorkerPoolResource[]> {
    let result = await this._listWorkerPools(resourceGroupName, name, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listWorkerPoolsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listWorkerPoolsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<WorkerPoolResource> {
    for await (const page of this.listWorkerPoolsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get metric definitions for a specific instance of a worker pool of an App Service
   * Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param instance Name of the instance in the worker pool.
   * @param options The options parameters.
   */
  public listWorkerPoolInstanceMetricDefinitions(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    instance: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<ResourceMetricDefinition> {
    const iter = this.listWorkerPoolInstanceMetricDefinitionsPagingAll(
      resourceGroupName,
      name,
      workerPoolName,
      instance,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listWorkerPoolInstanceMetricDefinitionsPagingPage(
          resourceGroupName,
          name,
          workerPoolName,
          instance,
          options
        );
      }
    };
  }

  private async *listWorkerPoolInstanceMetricDefinitionsPagingPage(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    instance: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceMetricDefinition[]> {
    let result = await this._listWorkerPoolInstanceMetricDefinitions(
      resourceGroupName,
      name,
      workerPoolName,
      instance,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listWorkerPoolInstanceMetricDefinitionsNext(
        resourceGroupName,
        name,
        workerPoolName,
        instance,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listWorkerPoolInstanceMetricDefinitionsPagingAll(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    instance: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceMetricDefinition> {
    for await (const page of this.listWorkerPoolInstanceMetricDefinitionsPagingPage(
      resourceGroupName,
      name,
      workerPoolName,
      instance,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get metric definitions for a worker pool of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param options The options parameters.
   */
  public listWebWorkerMetricDefinitions(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<ResourceMetricDefinition> {
    const iter = this.listWebWorkerMetricDefinitionsPagingAll(
      resourceGroupName,
      name,
      workerPoolName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listWebWorkerMetricDefinitionsPagingPage(
          resourceGroupName,
          name,
          workerPoolName,
          options
        );
      }
    };
  }

  private async *listWebWorkerMetricDefinitionsPagingPage(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceMetricDefinition[]> {
    let result = await this._listWebWorkerMetricDefinitions(
      resourceGroupName,
      name,
      workerPoolName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listWebWorkerMetricDefinitionsNext(
        resourceGroupName,
        name,
        workerPoolName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listWebWorkerMetricDefinitionsPagingAll(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<ResourceMetricDefinition> {
    for await (const page of this.listWebWorkerMetricDefinitionsPagingPage(
      resourceGroupName,
      name,
      workerPoolName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get available SKUs for scaling a worker pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param options The options parameters.
   */
  public listWorkerPoolSkus(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<SkuInfo> {
    const iter = this.listWorkerPoolSkusPagingAll(
      resourceGroupName,
      name,
      workerPoolName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listWorkerPoolSkusPagingPage(
          resourceGroupName,
          name,
          workerPoolName,
          options
        );
      }
    };
  }

  private async *listWorkerPoolSkusPagingPage(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<SkuInfo[]> {
    let result = await this._listWorkerPoolSkus(
      resourceGroupName,
      name,
      workerPoolName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listWorkerPoolSkusNext(
        resourceGroupName,
        name,
        workerPoolName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listWorkerPoolSkusPagingAll(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<SkuInfo> {
    for await (const page of this.listWorkerPoolSkusPagingPage(
      resourceGroupName,
      name,
      workerPoolName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get usage metrics for a worker pool of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param options The options parameters.
   */
  public listWebWorkerUsages(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Usage> {
    const iter = this.listWebWorkerUsagesPagingAll(
      resourceGroupName,
      name,
      workerPoolName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listWebWorkerUsagesPagingPage(
          resourceGroupName,
          name,
          workerPoolName,
          options
        );
      }
    };
  }

  private async *listWebWorkerUsagesPagingPage(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Usage[]> {
    let result = await this._listWebWorkerUsages(
      resourceGroupName,
      name,
      workerPoolName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listWebWorkerUsagesNext(
        resourceGroupName,
        name,
        workerPoolName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listWebWorkerUsagesPagingAll(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Usage> {
    for await (const page of this.listWebWorkerUsagesPagingPage(
      resourceGroupName,
      name,
      workerPoolName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get all App Service Environments for a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<AppServiceEnvironmentsListResponse>;
  }

  /**
   * Description for Get all App Service Environments in a resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListByResourceGroupResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByResourceGroupOperationSpec
    ) as Promise<AppServiceEnvironmentsListByResourceGroupResponse>;
  }

  /**
   * Description for Get the properties of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<AppServiceEnvironmentsGetResponse>;
  }

  /**
   * Description for Create or update an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    name: string,
    hostingEnvironmentEnvelope: AppServiceEnvironmentResource,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<AppServiceEnvironmentsCreateOrUpdateResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      hostingEnvironmentEnvelope,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        AppServiceEnvironmentsCreateOrUpdateResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      createOrUpdateOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Delete an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsDeleteOptionalParams
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      deleteOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Create or update an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    name: string,
    hostingEnvironmentEnvelope: AppServiceEnvironmentPatchResource,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsUpdateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      hostingEnvironmentEnvelope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateOperationSpec
    ) as Promise<AppServiceEnvironmentsUpdateResponse>;
  }

  /**
   * Description for Get the used, available, and total worker capacity an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listCapacities(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListCapacitiesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listCapacitiesOperationSpec
    ) as Promise<AppServiceEnvironmentsListCapacitiesResponse>;
  }

  /**
   * Description for Get IP addresses assigned to an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  getVipInfo(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsGetVipInfoResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getVipInfoOperationSpec
    ) as Promise<AppServiceEnvironmentsGetVipInfoResponse>;
  }

  /**
   * Description for Move an App Service Environment to a different VNET.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param vnetInfo Details for the new virtual network.
   * @param options The options parameters.
   */
  private async _changeVnet(
    resourceGroupName: string,
    name: string,
    vnetInfo: VirtualNetworkProfile,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<AppServiceEnvironmentsChangeVnetResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      vnetInfo,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        AppServiceEnvironmentsChangeVnetResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      changeVnetOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: changeVnetOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get diagnostic information for an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  listDiagnostics(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListDiagnosticsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listDiagnosticsOperationSpec
    ) as Promise<AppServiceEnvironmentsListDiagnosticsResponse>;
  }

  /**
   * Description for Get a diagnostics item for an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param diagnosticsName Name of the diagnostics item.
   * @param options The options parameters.
   */
  getDiagnosticsItem(
    resourceGroupName: string,
    name: string,
    diagnosticsName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsGetDiagnosticsItemResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      diagnosticsName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getDiagnosticsItemOperationSpec
    ) as Promise<AppServiceEnvironmentsGetDiagnosticsItemResponse>;
  }

  /**
   * Description for Get the network endpoints of all inbound dependencies of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _getInboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getInboundNetworkDependenciesEndpointsOperationSpec
    ) as Promise<
      AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse
    >;
  }

  /**
   * Description for Get all multi-role pools.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listMultiRolePools(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListMultiRolePoolsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRolePoolsOperationSpec
    ) as Promise<AppServiceEnvironmentsListMultiRolePoolsResponse>;
  }

  /**
   * Description for Get properties of a multi-role pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  getMultiRolePool(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsGetMultiRolePoolResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getMultiRolePoolOperationSpec
    ) as Promise<AppServiceEnvironmentsGetMultiRolePoolResponse>;
  }

  /**
   * Description for Create or update a multi-role pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param multiRolePoolEnvelope Properties of the multi-role pool.
   * @param options The options parameters.
   */
  async createOrUpdateMultiRolePool(
    resourceGroupName: string,
    name: string,
    multiRolePoolEnvelope: WorkerPoolResource,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<AppServiceEnvironmentsCreateOrUpdateMultiRolePoolResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      multiRolePoolEnvelope,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        AppServiceEnvironmentsCreateOrUpdateMultiRolePoolResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      createOrUpdateMultiRolePoolOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: createOrUpdateMultiRolePoolOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Create or update a multi-role pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param multiRolePoolEnvelope Properties of the multi-role pool.
   * @param options The options parameters.
   */
  updateMultiRolePool(
    resourceGroupName: string,
    name: string,
    multiRolePoolEnvelope: WorkerPoolResource,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsUpdateMultiRolePoolResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      multiRolePoolEnvelope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateMultiRolePoolOperationSpec
    ) as Promise<AppServiceEnvironmentsUpdateMultiRolePoolResponse>;
  }

  /**
   * Description for Get metric definitions for a specific instance of a multi-role pool of an App
   * Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param instance Name of the instance in the multi-role pool.
   * @param options The options parameters.
   */
  private _listMultiRolePoolInstanceMetricDefinitions(
    resourceGroupName: string,
    name: string,
    instance: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      instance,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRolePoolInstanceMetricDefinitionsOperationSpec
    ) as Promise<
      AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse
    >;
  }

  /**
   * Description for Get metric definitions for a multi-role pool of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listMultiRoleMetricDefinitions(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRoleMetricDefinitionsOperationSpec
    ) as Promise<AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse>;
  }

  /**
   * Description for Get available SKUs for scaling a multi-role pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listMultiRolePoolSkus(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListMultiRolePoolSkusResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRolePoolSkusOperationSpec
    ) as Promise<AppServiceEnvironmentsListMultiRolePoolSkusResponse>;
  }

  /**
   * Description for Get usage metrics for a multi-role pool of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listMultiRoleUsages(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListMultiRoleUsagesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRoleUsagesOperationSpec
    ) as Promise<AppServiceEnvironmentsListMultiRoleUsagesResponse>;
  }

  /**
   * Description for List all currently running operations on the App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  listOperations(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListOperationsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationsOperationSpec
    ) as Promise<AppServiceEnvironmentsListOperationsResponse>;
  }

  /**
   * Description for Get the network endpoints of all outbound dependencies of an App Service
   * Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _getOutboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOutboundNetworkDependenciesEndpointsOperationSpec
    ) as Promise<
      AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse
    >;
  }

  /**
   * Description for Reboot all machines in an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  reboot(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      rebootOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Description for Resume an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private async _resume(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<AppServiceEnvironmentsResumeResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        AppServiceEnvironmentsResumeResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      resumeOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: resumeOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get all App Service plans in an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listAppServicePlans(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListAppServicePlansResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAppServicePlansOperationSpec
    ) as Promise<AppServiceEnvironmentsListAppServicePlansResponse>;
  }

  /**
   * Description for Get all apps in an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listWebApps(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsListWebAppsOptionalParams
  ): Promise<AppServiceEnvironmentsListWebAppsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWebAppsOperationSpec
    ) as Promise<AppServiceEnvironmentsListWebAppsResponse>;
  }

  /**
   * Description for Suspend an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private async _suspend(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<AppServiceEnvironmentsSuspendResponse>> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        AppServiceEnvironmentsSuspendResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      suspendOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: suspendOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Get global usage metrics of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listUsages(
    resourceGroupName: string,
    name: string,
    options?: AppServiceEnvironmentsListUsagesOptionalParams
  ): Promise<AppServiceEnvironmentsListUsagesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listUsagesOperationSpec
    ) as Promise<AppServiceEnvironmentsListUsagesResponse>;
  }

  /**
   * Description for Get all worker pools of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param options The options parameters.
   */
  private _listWorkerPools(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListWorkerPoolsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWorkerPoolsOperationSpec
    ) as Promise<AppServiceEnvironmentsListWorkerPoolsResponse>;
  }

  /**
   * Description for Get properties of a worker pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param options The options parameters.
   */
  getWorkerPool(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsGetWorkerPoolResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getWorkerPoolOperationSpec
    ) as Promise<AppServiceEnvironmentsGetWorkerPoolResponse>;
  }

  /**
   * Description for Create or update a worker pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param workerPoolEnvelope Properties of the worker pool.
   * @param options The options parameters.
   */
  async createOrUpdateWorkerPool(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    workerPoolEnvelope: WorkerPoolResource,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<AppServiceEnvironmentsCreateOrUpdateWorkerPoolResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      workerPoolEnvelope,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        AppServiceEnvironmentsCreateOrUpdateWorkerPoolResponse
      >;
    };

    const initialOperationResult = await sendOperation(
      operationArguments,
      createOrUpdateWorkerPoolOperationSpec
    );
    return new LROPoller({
      initialOperationArguments: operationArguments,
      initialOperationSpec: createOrUpdateWorkerPoolOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Description for Create or update a worker pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param workerPoolEnvelope Properties of the worker pool.
   * @param options The options parameters.
   */
  updateWorkerPool(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    workerPoolEnvelope: WorkerPoolResource,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsUpdateWorkerPoolResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      workerPoolEnvelope,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateWorkerPoolOperationSpec
    ) as Promise<AppServiceEnvironmentsUpdateWorkerPoolResponse>;
  }

  /**
   * Description for Get metric definitions for a specific instance of a worker pool of an App Service
   * Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param instance Name of the instance in the worker pool.
   * @param options The options parameters.
   */
  private _listWorkerPoolInstanceMetricDefinitions(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    instance: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      instance,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWorkerPoolInstanceMetricDefinitionsOperationSpec
    ) as Promise<
      AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse
    >;
  }

  /**
   * Description for Get metric definitions for a worker pool of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param options The options parameters.
   */
  private _listWebWorkerMetricDefinitions(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWebWorkerMetricDefinitionsOperationSpec
    ) as Promise<AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse>;
  }

  /**
   * Description for Get available SKUs for scaling a worker pool.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param options The options parameters.
   */
  private _listWorkerPoolSkus(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListWorkerPoolSkusResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWorkerPoolSkusOperationSpec
    ) as Promise<AppServiceEnvironmentsListWorkerPoolSkusResponse>;
  }

  /**
   * Description for Get usage metrics for a worker pool of an App Service Environment.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param options The options parameters.
   */
  private _listWebWorkerUsages(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListWebWorkerUsagesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWebWorkerUsagesOperationSpec
    ) as Promise<AppServiceEnvironmentsListWebWorkerUsagesResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListByResourceGroupNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listByResourceGroupNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListByResourceGroupNextResponse>;
  }

  /**
   * ListCapacitiesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListCapacities method.
   * @param options The options parameters.
   */
  private _listCapacitiesNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListCapacitiesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listCapacitiesNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListCapacitiesNextResponse>;
  }

  /**
   * ChangeVnetNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param vnetInfo Details for the new virtual network.
   * @param nextLink The nextLink from the previous successful call to the ChangeVnet method.
   * @param options The options parameters.
   */
  private _changeVnetNext(
    resourceGroupName: string,
    name: string,
    vnetInfo: VirtualNetworkProfile,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsChangeVnetNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      vnetInfo,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      changeVnetNextOperationSpec
    ) as Promise<AppServiceEnvironmentsChangeVnetNextResponse>;
  }

  /**
   * GetInboundNetworkDependenciesEndpointsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetInboundNetworkDependenciesEndpoints method.
   * @param options The options parameters.
   */
  private _getInboundNetworkDependenciesEndpointsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getInboundNetworkDependenciesEndpointsNextOperationSpec
    ) as Promise<
      AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsNextResponse
    >;
  }

  /**
   * ListMultiRolePoolsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListMultiRolePools method.
   * @param options The options parameters.
   */
  private _listMultiRolePoolsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListMultiRolePoolsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRolePoolsNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListMultiRolePoolsNextResponse>;
  }

  /**
   * ListMultiRolePoolInstanceMetricDefinitionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param instance Name of the instance in the multi-role pool.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListMultiRolePoolInstanceMetricDefinitions method.
   * @param options The options parameters.
   */
  private _listMultiRolePoolInstanceMetricDefinitionsNext(
    resourceGroupName: string,
    name: string,
    instance: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      instance,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRolePoolInstanceMetricDefinitionsNextOperationSpec
    ) as Promise<
      AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsNextResponse
    >;
  }

  /**
   * ListMultiRoleMetricDefinitionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListMultiRoleMetricDefinitions
   *                 method.
   * @param options The options parameters.
   */
  private _listMultiRoleMetricDefinitionsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListMultiRoleMetricDefinitionsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRoleMetricDefinitionsNextOperationSpec
    ) as Promise<
      AppServiceEnvironmentsListMultiRoleMetricDefinitionsNextResponse
    >;
  }

  /**
   * ListMultiRolePoolSkusNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListMultiRolePoolSkus method.
   * @param options The options parameters.
   */
  private _listMultiRolePoolSkusNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListMultiRolePoolSkusNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRolePoolSkusNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListMultiRolePoolSkusNextResponse>;
  }

  /**
   * ListMultiRoleUsagesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListMultiRoleUsages method.
   * @param options The options parameters.
   */
  private _listMultiRoleUsagesNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListMultiRoleUsagesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listMultiRoleUsagesNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListMultiRoleUsagesNextResponse>;
  }

  /**
   * GetOutboundNetworkDependenciesEndpointsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetOutboundNetworkDependenciesEndpoints method.
   * @param options The options parameters.
   */
  private _getOutboundNetworkDependenciesEndpointsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOutboundNetworkDependenciesEndpointsNextOperationSpec
    ) as Promise<
      AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsNextResponse
    >;
  }

  /**
   * ResumeNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the Resume method.
   * @param options The options parameters.
   */
  private _resumeNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsResumeNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      resumeNextOperationSpec
    ) as Promise<AppServiceEnvironmentsResumeNextResponse>;
  }

  /**
   * ListAppServicePlansNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListAppServicePlans method.
   * @param options The options parameters.
   */
  private _listAppServicePlansNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListAppServicePlansNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listAppServicePlansNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListAppServicePlansNextResponse>;
  }

  /**
   * ListWebAppsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListWebApps method.
   * @param options The options parameters.
   */
  private _listWebAppsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: AppServiceEnvironmentsListWebAppsNextOptionalParams
  ): Promise<AppServiceEnvironmentsListWebAppsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWebAppsNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListWebAppsNextResponse>;
  }

  /**
   * SuspendNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the Suspend method.
   * @param options The options parameters.
   */
  private _suspendNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsSuspendNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      suspendNextOperationSpec
    ) as Promise<AppServiceEnvironmentsSuspendNextResponse>;
  }

  /**
   * ListUsagesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListUsages method.
   * @param options The options parameters.
   */
  private _listUsagesNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: AppServiceEnvironmentsListUsagesNextOptionalParams
  ): Promise<AppServiceEnvironmentsListUsagesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listUsagesNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListUsagesNextResponse>;
  }

  /**
   * ListWorkerPoolsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param nextLink The nextLink from the previous successful call to the ListWorkerPools method.
   * @param options The options parameters.
   */
  private _listWorkerPoolsNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListWorkerPoolsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWorkerPoolsNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListWorkerPoolsNextResponse>;
  }

  /**
   * ListWorkerPoolInstanceMetricDefinitionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param instance Name of the instance in the worker pool.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListWorkerPoolInstanceMetricDefinitions method.
   * @param options The options parameters.
   */
  private _listWorkerPoolInstanceMetricDefinitionsNext(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    instance: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      instance,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWorkerPoolInstanceMetricDefinitionsNextOperationSpec
    ) as Promise<
      AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsNextResponse
    >;
  }

  /**
   * ListWebWorkerMetricDefinitionsNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param nextLink The nextLink from the previous successful call to the ListWebWorkerMetricDefinitions
   *                 method.
   * @param options The options parameters.
   */
  private _listWebWorkerMetricDefinitionsNext(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListWebWorkerMetricDefinitionsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWebWorkerMetricDefinitionsNextOperationSpec
    ) as Promise<
      AppServiceEnvironmentsListWebWorkerMetricDefinitionsNextResponse
    >;
  }

  /**
   * ListWorkerPoolSkusNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param nextLink The nextLink from the previous successful call to the ListWorkerPoolSkus method.
   * @param options The options parameters.
   */
  private _listWorkerPoolSkusNext(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListWorkerPoolSkusNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWorkerPoolSkusNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListWorkerPoolSkusNextResponse>;
  }

  /**
   * ListWebWorkerUsagesNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the App Service Environment.
   * @param workerPoolName Name of the worker pool.
   * @param nextLink The nextLink from the previous successful call to the ListWebWorkerUsages method.
   * @param options The options parameters.
   */
  private _listWebWorkerUsagesNext(
    resourceGroupName: string,
    name: string,
    workerPoolName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AppServiceEnvironmentsListWebWorkerUsagesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      workerPoolName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWebWorkerUsagesNextOperationSpec
    ) as Promise<AppServiceEnvironmentsListWebWorkerUsagesNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceEnvironmentResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceEnvironmentResource
    },
    201: {
      bodyMapper: Mappers.AppServiceEnvironmentResource
    },
    202: {
      bodyMapper: Mappers.AppServiceEnvironmentResource
    },
    204: {
      bodyMapper: Mappers.AppServiceEnvironmentResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.hostingEnvironmentEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.forceDelete],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceEnvironmentResource
    },
    201: {
      bodyMapper: Mappers.AppServiceEnvironmentResource
    },
    202: {
      bodyMapper: Mappers.AppServiceEnvironmentResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.hostingEnvironmentEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listCapacitiesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StampCapacityCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getVipInfoOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AddressResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const changeVnetOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/changeVirtualNetwork",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    201: {
      bodyMapper: Mappers.WebAppCollection
    },
    202: {
      bodyMapper: Mappers.WebAppCollection
    },
    204: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.vnetInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listDiagnosticsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostingEnvironmentDiagnostics"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDiagnosticsItemOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironmentDiagnostics
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.diagnosticsName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getInboundNetworkDependenciesEndpointsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/inboundNetworkDependenciesEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InboundEnvironmentEndpointCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRolePoolsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getMultiRolePoolOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateMultiRolePoolOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    201: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    202: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    204: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.multiRolePoolEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateMultiRolePoolOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    202: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.multiRolePoolEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listMultiRolePoolInstanceMetricDefinitionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instance
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRoleMetricDefinitionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRolePoolSkusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRoleUsagesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOutboundNetworkDependenciesEndpointsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/outboundNetworkDependenciesEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OutboundEnvironmentEndpointCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const rebootOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
  httpMethod: "POST",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resumeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    201: {
      bodyMapper: Mappers.WebAppCollection
    },
    202: {
      bodyMapper: Mappers.WebAppCollection
    },
    204: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAppServicePlansOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWebAppsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.propertiesToInclude],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const suspendOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    201: {
      bodyMapper: Mappers.WebAppCollection
    },
    202: {
      bodyMapper: Mappers.WebAppCollection
    },
    204: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listUsagesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWorkerPoolsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getWorkerPoolOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateWorkerPoolOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    201: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    202: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    204: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.workerPoolEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateWorkerPoolOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    202: {
      bodyMapper: Mappers.WorkerPoolResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.workerPoolEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listWorkerPoolInstanceMetricDefinitionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instance,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWebWorkerMetricDefinitionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWorkerPoolSkusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWebWorkerUsagesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServiceEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listCapacitiesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StampCapacityCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const changeVnetNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    202: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getInboundNetworkDependenciesEndpointsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InboundEnvironmentEndpointCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRolePoolsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRolePoolInstanceMetricDefinitionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.instance
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRoleMetricDefinitionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRolePoolSkusNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMultiRoleUsagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOutboundNetworkDependenciesEndpointsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OutboundEnvironmentEndpointCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resumeNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    202: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAppServicePlansNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicePlanCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWebAppsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.propertiesToInclude],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const suspendNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppCollection
    },
    202: {
      bodyMapper: Mappers.WebAppCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listUsagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWorkerPoolsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWorkerPoolInstanceMetricDefinitionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.instance,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWebWorkerMetricDefinitionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWorkerPoolSkusNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfoCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listWebWorkerUsagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.nextLink,
    Parameters.workerPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
