/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import {
  StaticSiteARMResource,
  StaticSitesListNextOptionalParams,
  StaticSitesListOptionalParams,
  StaticSitesGetStaticSitesByResourceGroupNextOptionalParams,
  StaticSitesGetStaticSitesByResourceGroupOptionalParams,
  StaticSiteUserARMResource,
  StaticSitesListStaticSiteUsersNextOptionalParams,
  StaticSitesListStaticSiteUsersOptionalParams,
  StaticSiteBuildARMResource,
  StaticSitesGetStaticSiteBuildsNextOptionalParams,
  StaticSitesGetStaticSiteBuildsOptionalParams,
  StaticSiteFunctionOverviewARMResource,
  StaticSitesListStaticSiteBuildFunctionsNextOptionalParams,
  StaticSitesListStaticSiteBuildFunctionsOptionalParams,
  StaticSiteCustomDomainOverviewARMResource,
  StaticSitesListStaticSiteCustomDomainsNextOptionalParams,
  StaticSitesListStaticSiteCustomDomainsOptionalParams,
  StaticSitesListStaticSiteFunctionsNextOptionalParams,
  StaticSitesListStaticSiteFunctionsOptionalParams,
  StaticSitesGetStaticSiteOptionalParams,
  StaticSitesGetStaticSiteResponse,
  StaticSitesCreateOrUpdateStaticSiteOptionalParams,
  StaticSitesCreateOrUpdateStaticSiteResponse,
  StaticSitesDeleteStaticSiteOptionalParams,
  StaticSitePatchResource,
  StaticSitesUpdateStaticSiteOptionalParams,
  StaticSitesUpdateStaticSiteResponse,
  StaticSitesDeleteStaticSiteUserOptionalParams,
  StaticSitesUpdateStaticSiteUserOptionalParams,
  StaticSitesUpdateStaticSiteUserResponse,
  StaticSitesGetStaticSiteBuildOptionalParams,
  StaticSitesGetStaticSiteBuildResponse,
  StaticSitesDeleteStaticSiteBuildOptionalParams,
  StringDictionary,
  StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsOptionalParams,
  StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse,
  StaticSitesListStaticSiteBuildFunctionAppSettingsOptionalParams,
  StaticSitesListStaticSiteBuildFunctionAppSettingsResponse,
  StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsOptionalParams,
  StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse,
  StaticSiteUserInvitationRequestResource,
  StaticSitesCreateUserRolesInvitationLinkOptionalParams,
  StaticSitesCreateUserRolesInvitationLinkResponse,
  StaticSitesCreateOrUpdateStaticSiteCustomDomainOptionalParams,
  StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse,
  StaticSitesDeleteStaticSiteCustomDomainOptionalParams,
  StaticSitesValidateCustomDomainCanBeAddedToStaticSiteOptionalParams,
  StaticSitesDetachStaticSiteOptionalParams,
  StaticSitesListStaticSiteFunctionAppSettingsOptionalParams,
  StaticSitesListStaticSiteFunctionAppSettingsResponse,
  StaticSitesListStaticSiteSecretsOptionalParams,
  StaticSitesListStaticSiteSecretsResponse,
  StaticSiteResetPropertiesARMResource,
  StaticSitesResetStaticSiteApiKeyOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a StaticSites. */
export interface StaticSites {
  /**
   * Description for Get all Static Sites for a subscription.
   * @param options The options parameters.
   */
  list(
    options?: StaticSitesListOptionalParams
  ): PagedAsyncIterableIterator<StaticSiteARMResource>;
  /**
   * Description for Gets all static sites in the specified resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  listStaticSitesByResourceGroup(
    resourceGroupName: string,
    options?: StaticSitesGetStaticSitesByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<StaticSiteARMResource>;
  /**
   * Description for Gets the list of users of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for the users.
   * @param options The options parameters.
   */
  listStaticSiteUsers(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    options?: StaticSitesListStaticSiteUsersOptionalParams
  ): PagedAsyncIterableIterator<StaticSiteUserARMResource>;
  /**
   * Description for Gets all static site builds for a particular static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  listStaticSiteBuilds(
    resourceGroupName: string,
    name: string,
    options?: StaticSitesGetStaticSiteBuildsOptionalParams
  ): PagedAsyncIterableIterator<StaticSiteBuildARMResource>;
  /**
   * Description for Gets the functions of a particular static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  listStaticSiteBuildFunctions(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: StaticSitesListStaticSiteBuildFunctionsOptionalParams
  ): PagedAsyncIterableIterator<StaticSiteFunctionOverviewARMResource>;
  /**
   * Description for Gets all static site custom domains for a particular static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site resource to search in.
   * @param options The options parameters.
   */
  listStaticSiteCustomDomains(
    resourceGroupName: string,
    name: string,
    options?: StaticSitesListStaticSiteCustomDomainsOptionalParams
  ): PagedAsyncIterableIterator<StaticSiteCustomDomainOverviewARMResource>;
  /**
   * Description for Gets the functions of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  listStaticSiteFunctions(
    resourceGroupName: string,
    name: string,
    options?: StaticSitesListStaticSiteFunctionsOptionalParams
  ): PagedAsyncIterableIterator<StaticSiteFunctionOverviewARMResource>;
  /**
   * Description for Gets the details of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  getStaticSite(
    resourceGroupName: string,
    name: string,
    options?: StaticSitesGetStaticSiteOptionalParams
  ): Promise<StaticSitesGetStaticSiteResponse>;
  /**
   * Description for Creates a new static site in an existing resource group, or updates an existing
   * static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param options The options parameters.
   */
  createOrUpdateStaticSite(
    resourceGroupName: string,
    name: string,
    staticSiteEnvelope: StaticSiteARMResource,
    options?: StaticSitesCreateOrUpdateStaticSiteOptionalParams
  ): Promise<StaticSitesCreateOrUpdateStaticSiteResponse>;
  /**
   * Description for Deletes a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to delete.
   * @param options The options parameters.
   */
  deleteStaticSite(
    resourceGroupName: string,
    name: string,
    options?: StaticSitesDeleteStaticSiteOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Description for Creates a new static site in an existing resource group, or updates an existing
   * static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to create or update.
   * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
   * @param options The options parameters.
   */
  updateStaticSite(
    resourceGroupName: string,
    name: string,
    staticSiteEnvelope: StaticSitePatchResource,
    options?: StaticSitesUpdateStaticSiteOptionalParams
  ): Promise<StaticSitesUpdateStaticSiteResponse>;
  /**
   * Description for Deletes the user entry from the static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the staticsite.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param options The options parameters.
   */
  deleteStaticSiteUser(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    userid: string,
    options?: StaticSitesDeleteStaticSiteUserOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Description for Updates a user entry with the listed roles
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param authprovider The auth provider for this user.
   * @param userid The user id of the user.
   * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See example.
   * @param options The options parameters.
   */
  updateStaticSiteUser(
    resourceGroupName: string,
    name: string,
    authprovider: string,
    userid: string,
    staticSiteUserEnvelope: StaticSiteUserARMResource,
    options?: StaticSitesUpdateStaticSiteUserOptionalParams
  ): Promise<StaticSitesUpdateStaticSiteUserResponse>;
  /**
   * Description for Gets the details of a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  getStaticSiteBuild(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: StaticSitesGetStaticSiteBuildOptionalParams
  ): Promise<StaticSitesGetStaticSiteBuildResponse>;
  /**
   * Description for Deletes a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  deleteStaticSiteBuild(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: StaticSitesDeleteStaticSiteBuildOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Description for Creates or updates the function app settings of a static site build.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param appSettings String dictionary resource.
   * @param options The options parameters.
   */
  createOrUpdateStaticSiteBuildFunctionAppSettings(
    resourceGroupName: string,
    name: string,
    prId: string,
    appSettings: StringDictionary,
    options?: StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsOptionalParams
  ): Promise<
    StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse
  >;
  /**
   * Description for Gets the application settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param prId The stage site identifier.
   * @param options The options parameters.
   */
  listStaticSiteBuildFunctionAppSettings(
    resourceGroupName: string,
    name: string,
    prId: string,
    options?: StaticSitesListStaticSiteBuildFunctionAppSettingsOptionalParams
  ): Promise<StaticSitesListStaticSiteBuildFunctionAppSettingsResponse>;
  /**
   * Description for Creates or updates the function app settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param appSettings String dictionary resource.
   * @param options The options parameters.
   */
  createOrUpdateStaticSiteFunctionAppSettings(
    resourceGroupName: string,
    name: string,
    appSettings: StringDictionary,
    options?: StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsOptionalParams
  ): Promise<StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse>;
  /**
   * Description for Creates an invitation link for a user with the role
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param staticSiteUserRolesInvitationEnvelope Static sites user roles invitation resource.
   * @param options The options parameters.
   */
  createUserRolesInvitationLink(
    resourceGroupName: string,
    name: string,
    staticSiteUserRolesInvitationEnvelope: StaticSiteUserInvitationRequestResource,
    options?: StaticSitesCreateUserRolesInvitationLinkOptionalParams
  ): Promise<StaticSitesCreateUserRolesInvitationLinkResponse>;
  /**
   * Description for Creates a new static site custom domain in an existing resource group and static
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to create.
   * @param options The options parameters.
   */
  createOrUpdateStaticSiteCustomDomain(
    resourceGroupName: string,
    name: string,
    domainName: string,
    options?: StaticSitesCreateOrUpdateStaticSiteCustomDomainOptionalParams
  ): Promise<StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse>;
  /**
   * Description for Deletes a custom domain.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to delete.
   * @param options The options parameters.
   */
  deleteStaticSiteCustomDomain(
    resourceGroupName: string,
    name: string,
    domainName: string,
    options?: StaticSitesDeleteStaticSiteCustomDomainOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Description for Validates a particular custom domain can be added to a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param domainName The custom domain to validate.
   * @param options The options parameters.
   */
  validateCustomDomainCanBeAddedToStaticSite(
    resourceGroupName: string,
    name: string,
    domainName: string,
    options?: StaticSitesValidateCustomDomainCanBeAddedToStaticSiteOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Description for Detaches a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site to detach.
   * @param options The options parameters.
   */
  detachStaticSite(
    resourceGroupName: string,
    name: string,
    options?: StaticSitesDetachStaticSiteOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Description for Gets the application settings of a static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  listStaticSiteFunctionAppSettings(
    resourceGroupName: string,
    name: string,
    options?: StaticSitesListStaticSiteFunctionAppSettingsOptionalParams
  ): Promise<StaticSitesListStaticSiteFunctionAppSettingsResponse>;
  /**
   * Description for Lists the secrets for an existing static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param options The options parameters.
   */
  listStaticSiteSecrets(
    resourceGroupName: string,
    name: string,
    options?: StaticSitesListStaticSiteSecretsOptionalParams
  ): Promise<StaticSitesListStaticSiteSecretsResponse>;
  /**
   * Description for Resets the api key for an existing static site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the static site.
   * @param resetPropertiesEnvelope Static Site Reset Properties ARM resource.
   * @param options The options parameters.
   */
  resetStaticSiteApiKey(
    resourceGroupName: string,
    name: string,
    resetPropertiesEnvelope: StaticSiteResetPropertiesARMResource,
    options?: StaticSitesResetStaticSiteApiKeyOptionalParams
  ): Promise<coreHttp.RestResponse>;
}
