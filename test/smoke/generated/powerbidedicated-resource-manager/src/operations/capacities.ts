/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PowerBIDedicated } from "../powerBIDedicated";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  CapacitiesGetDetailsResponse,
  DedicatedCapacity,
  CapacitiesCreateResponse,
  DedicatedCapacityUpdateParameters,
  CapacitiesUpdateResponse,
  CapacitiesListByResourceGroupResponse,
  CapacitiesListResponse,
  CapacitiesListSkusResponse,
  CapacitiesListSkusForCapacityResponse,
  CheckCapacityNameAvailabilityParameters,
  CapacitiesCheckNameAvailabilityResponse
} from "../models";

/**
 * Class representing a Capacities.
 */
export class Capacities {
  private readonly client: PowerBIDedicated;

  /**
   * Initialize a new instance of the class Capacities class.
   * @param client Reference to the service client
   */
  constructor(client: PowerBIDedicated) {
    this.client = client;
  }

  /**
   * Gets details about the specified dedicated capacity.
   * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
   *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
   * @param dedicatedCapacityName The name of the dedicated capacity. It must be a minimum of 3
   *                              characters, and a maximum of 63.
   * @param options The options parameters.
   */
  getDetails(
    resourceGroupName: string,
    dedicatedCapacityName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CapacitiesGetDetailsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, dedicatedCapacityName, options: operationOptions },
      getDetailsOperationSpec
    ) as Promise<CapacitiesGetDetailsResponse>;
  }

  /**
   * Provisions the specified Dedicated capacity based on the configuration specified in the request.
   * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
   *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
   * @param capacityParameters Contains the information used to provision the Dedicated capacity.
   * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3
   *                              characters, and a maximum of 63.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    capacityParameters: DedicatedCapacity,
    dedicatedCapacityName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CapacitiesCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      capacityParameters,
      dedicatedCapacityName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CapacitiesCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the specified Dedicated capacity.
   * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
   *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
   * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
   *                              length, and no more than 63.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    dedicatedCapacityName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dedicatedCapacityName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates the current state of the specified Dedicated capacity.
   * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
   *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
   * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
   *                              length, and no more than 63.
   * @param capacityUpdateParameters Request object that contains the updated information for the
   *                                 capacity.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    dedicatedCapacityName: string,
    capacityUpdateParameters: DedicatedCapacityUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CapacitiesUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dedicatedCapacityName,
      capacityUpdateParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CapacitiesUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Suspends operation of the specified dedicated capacity instance.
   * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
   *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
   * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
   *                              length, and no more than 63.
   * @param options The options parameters.
   */
  async suspend(
    resourceGroupName: string,
    dedicatedCapacityName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dedicatedCapacityName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      suspendOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: suspendOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Resumes operation of the specified Dedicated capacity instance.
   * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
   *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
   * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
   *                              length, and no more than 63.
   * @param options The options parameters.
   */
  async resume(
    resourceGroupName: string,
    dedicatedCapacityName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      dedicatedCapacityName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      resumeOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: resumeOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets all the Dedicated capacities for the given resource group.
   * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
   *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CapacitiesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<CapacitiesListByResourceGroupResponse>;
  }

  /**
   * Lists all the Dedicated capacities for the given subscription.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<CapacitiesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<CapacitiesListResponse>;
  }

  /**
   * Lists eligible SKUs for PowerBI Dedicated resource provider.
   * @param options The options parameters.
   */
  listSkus(
    options?: coreHttp.OperationOptions
  ): Promise<CapacitiesListSkusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listSkusOperationSpec
    ) as Promise<CapacitiesListSkusResponse>;
  }

  /**
   * Lists eligible SKUs for a PowerBI Dedicated resource.
   * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated
   *                          capacity is part. This name must be at least 1 character in length, and no more than 90.
   * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in
   *                              length, and no more than 63.
   * @param options The options parameters.
   */
  listSkusForCapacity(
    resourceGroupName: string,
    dedicatedCapacityName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CapacitiesListSkusForCapacityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, dedicatedCapacityName, options: operationOptions },
      listSkusForCapacityOperationSpec
    ) as Promise<CapacitiesListSkusForCapacityResponse>;
  }

  /**
   * Check the name availability in the target location.
   * @param capacityParameters The name of the capacity.
   * @param location The region name which the operation will lookup into.
   * @param options The options parameters.
   */
  checkNameAvailability(
    capacityParameters: CheckCapacityNameAvailabilityParameters,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<CapacitiesCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { capacityParameters, location, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<CapacitiesCheckNameAvailabilityResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getDetailsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCapacity
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.dedicatedCapacityName,
    Parameters.subscriptionId
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCapacity
    },
    201: {
      bodyMapper: Mappers.DedicatedCapacity
    },
    202: {
      bodyMapper: Mappers.DedicatedCapacity
    },
    204: {
      bodyMapper: Mappers.DedicatedCapacity
    }
  },
  requestBody: Parameters.capacityParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dedicatedCapacityName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dedicatedCapacityName2
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCapacity
    },
    201: {
      bodyMapper: Mappers.DedicatedCapacity
    },
    202: {
      bodyMapper: Mappers.DedicatedCapacity
    },
    204: {
      bodyMapper: Mappers.DedicatedCapacity
    }
  },
  requestBody: Parameters.capacityUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dedicatedCapacityName2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const suspendOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/suspend",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dedicatedCapacityName2
  ],
  serializer
};
const resumeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/resume",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dedicatedCapacityName2
  ],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCapacities
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/capacities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCapacities
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listSkusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuEnumerationForNewResourceResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listSkusForCapacityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuEnumerationForExistingResourceResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dedicatedCapacityName2
  ],
  serializer
};
const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckCapacityNameAvailabilityResult
    }
  },
  requestBody: Parameters.capacityParameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
