/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ResourceSku: coreHttp.CompositeMapper = {
  serializedName: "ResourceSku",
  type: {
    name: "Composite",
    className: "ResourceSku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        defaultValue: "PBIE_Azure",
        serializedName: "tier",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DedicatedCapacity: coreHttp.CompositeMapper = {
  serializedName: "DedicatedCapacity",
  type: {
    name: "Composite",
    className: "DedicatedCapacity",
    modelProperties: {
      ...Resource.type.modelProperties,
      administration: {
        serializedName: "administration",
        type: {
          name: "Composite",
          className: "DedicatedCapacityAdministrators"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DedicatedCapacityMutableProperties: coreHttp.CompositeMapper = {
  serializedName: "DedicatedCapacityMutableProperties",
  type: {
    name: "Composite",
    className: "DedicatedCapacityMutableProperties",
    modelProperties: {
      administration: {
        serializedName: "administration",
        type: {
          name: "Composite",
          className: "DedicatedCapacityAdministrators"
        }
      }
    }
  }
};

export const DedicatedCapacityAdministrators: coreHttp.CompositeMapper = {
  serializedName: "DedicatedCapacityAdministrators",
  type: {
    name: "Composite",
    className: "DedicatedCapacityAdministrators",
    modelProperties: {
      members: {
        serializedName: "members",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "DedicatedCapacityAdministratorsMembersItem"
          }
        }
      }
    }
  }
};

export const DedicatedCapacityProperties: coreHttp.CompositeMapper = {
  serializedName: "DedicatedCapacityProperties",
  type: {
    name: "Composite",
    className: "DedicatedCapacityProperties",
    modelProperties: {
      ...DedicatedCapacityMutableProperties.type.modelProperties,
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DedicatedCapacityUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "DedicatedCapacityUpdateParameters",
  type: {
    name: "Composite",
    className: "DedicatedCapacityUpdateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      administration: {
        serializedName: "administration",
        type: {
          name: "Composite",
          className: "DedicatedCapacityAdministrators"
        }
      }
    }
  }
};

export const DedicatedCapacities: coreHttp.CompositeMapper = {
  serializedName: "DedicatedCapacities",
  type: {
    name: "Composite",
    className: "DedicatedCapacities",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DedicatedCapacity" }
          }
        }
      }
    }
  }
};

export const SkuEnumerationForNewResourceResult: coreHttp.CompositeMapper = {
  serializedName: "SkuEnumerationForNewResourceResult",
  type: {
    name: "Composite",
    className: "SkuEnumerationForNewResourceResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceSku" } }
        }
      }
    }
  }
};

export const SkuEnumerationForExistingResourceResult: coreHttp.CompositeMapper = {
  serializedName: "SkuEnumerationForExistingResourceResult",
  type: {
    name: "Composite",
    className: "SkuEnumerationForExistingResourceResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuDetailsForExistingResource"
            }
          }
        }
      }
    }
  }
};

export const SkuDetailsForExistingResource: coreHttp.CompositeMapper = {
  serializedName: "SkuDetailsForExistingResource",
  type: {
    name: "Composite",
    className: "SkuDetailsForExistingResource",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckCapacityNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckCapacityNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckCapacityNameAvailabilityParameters",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[a-z][a-z0-9]*$"),
          MaxLength: 63,
          MinLength: 3
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.PowerBIDedicated/capacities",
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckCapacityNameAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckCapacityNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckCapacityNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};
