/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The result of the request to list REST API operations. It contains a list of operations and a URL  to get the next set of results.
 */
export interface OperationListResult {
  /**
   * The list of operations supported by the resource provider.
   */
  readonly value?: Operation[];
  /**
   * The URL to get the next set of operation list results, if any.
   */
  readonly nextLink?: string;
}

/**
 * Describes a REST API operation.
 */
export interface Operation {
  /**
   * The name of the operation. This name is of the form {provider}/{resource}/{operation}.
   */
  readonly name?: string;
  /**
   * The object that describes the operation.
   */
  readonly display?: OperationDisplay;
}

/**
 * The object that describes the operation.
 */
export interface OperationDisplay {
  /**
   * The friendly name of the resource provider.
   */
  readonly provider?: string;
  /**
   * The operation type: read, write, delete, listKeys/action, etc.
   */
  readonly operation?: string;
  /**
   * The resource type on which the operation is performed.
   */
  readonly resource?: string;
  /**
   * The friendly name of the operation.
   */
  readonly description?: string;
}

/**
 * Response containing the primary and secondary admin API keys for a given Azure Cognitive Search service.
 */
export interface AdminKeyResult {
  /**
   * The primary admin API key of the Search service.
   */
  readonly primaryKey?: string;
  /**
   * The secondary admin API key of the Search service.
   */
  readonly secondaryKey?: string;
}

/**
 * Contains information about an API error.
 */
export interface CloudError {
  /**
   * Describes a particular API error with an error code and a message.
   */
  error?: CloudErrorBody;
}

/**
 * Describes a particular API error with an error code and a message.
 */
export interface CloudErrorBody {
  /**
   * An error code that describes the error condition more precisely than an HTTP status code. Can be used to programmatically handle specific error cases.
   */
  code?: string;
  /**
   * A message that describes the error in detail and provides debugging information.
   */
  message?: string;
  /**
   * The target of the particular error (for example, the name of the property in error).
   */
  target?: string;
  /**
   * Contains nested errors that are related to this error.
   */
  details?: CloudErrorBody[];
}

/**
 * Describes an API key for a given Azure Cognitive Search service that has permissions for query operations only.
 */
export interface QueryKey {
  /**
   * The name of the query API key; may be empty.
   */
  readonly name?: string;
  /**
   * The value of the query API key.
   */
  readonly key?: string;
}

/**
 * Response containing the query API keys for a given Azure Cognitive Search service.
 */
export interface ListQueryKeysResult {
  /**
   * The query keys for the Azure Cognitive Search service.
   */
  readonly value?: QueryKey[];
}

/**
 * Base type for all Azure resources.
 */
export interface Resource {
  /**
   * The ID of the resource. This can be used with the Azure Resource Manager to link resources together.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
  /**
   * The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth). This property is required when creating a new resource.
   */
  location?: string;
  /**
   * Tags to help categorize the resource in the Azure portal.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The identity of the resource.
   */
  identity?: Identity;
}

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The principal ID of resource identity.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   */
  readonly tenantId?: string;
  /**
   * The identity type.
   */
  type: IdentityType;
}

/**
 * Describes an Azure Cognitive Search service and its current state.
 */
export type SearchService = Resource & {
  /**
   * The SKU of the Search Service, which determines price tier and capacity limits. This property is required when creating a new Search Service.
   */
  sku?: Sku;
  /**
   * The number of replicas in the Search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
   */
  replicaCount?: number;
  /**
   * The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.
   */
  partitionCount?: number;
  /**
   * Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
   */
  hostingMode?: HostingMode;
  /**
   * The status of the Search service. Possible values include: 'running': The Search service is running and no provisioning operations are underway. 'provisioning': The Search service is being provisioned or scaled up or down. 'deleting': The Search service is being deleted. 'degraded': The Search service is degraded. This can occur when the underlying search units are not healthy. The Search service is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': The Search service is disabled. In this state, the service will reject all API requests. 'error': The Search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Cognitive Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
   */
  readonly status?: SearchServiceStatus;
  /**
   * The details of the Search service status.
   */
  readonly statusDetails?: string;
  /**
   * The state of the last provisioning operation performed on the Search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses capacity that is already set up.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
 */
export interface Sku {
  /**
   * The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
   */
  name?: SkuName;
}

/**
 * Response containing a list of Azure Cognitive Search services.
 */
export interface SearchServiceListResult {
  /**
   * The list of Search services.
   */
  readonly value?: SearchService[];
}

/**
 * Input of check name availability API.
 */
export interface CheckNameAvailabilityInput {
  /**
   * The Search service name to validate. Search service names must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and must be between 2 and 60 characters in length.
   */
  name: string;
  /**
   * The type of the resource whose name is to be validated. This value must always be 'searchServices'.
   */
  type: "searchServices";
}

/**
 * Output of check name availability API.
 */
export interface CheckNameAvailabilityOutput {
  /**
   * A value indicating whether the name is available.
   */
  readonly isNameAvailable?: boolean;
  /**
   * The reason why the name is not available. 'Invalid' indicates the name provided does not match the naming requirements (incorrect length, unsupported characters, etc.). 'AlreadyExists' indicates that the name is already in use and is therefore unavailable.
   */
  readonly reason?: UnavailableNameReason;
  /**
   * A message that explains why the name is invalid and provides resource naming requirements. Available only if 'Invalid' is returned in the 'reason' property.
   */
  readonly message?: string;
}

/**
 * Parameter group
 */
export interface SearchManagementRequestOptions {
  /**
   * A client-generated GUID value that identifies this request. If specified, this will be included in response information as a way to track the request.
   */
  clientRequestId?: string;
}

/**
 * Defines values for UnavailableNameReason.
 */
export type UnavailableNameReason = "Invalid" | "AlreadyExists";
/**
 * Defines values for AdminKeyKind.
 */
export type AdminKeyKind = "primary" | "secondary";
/**
 * Defines values for IdentityType.
 */
export type IdentityType = "None" | "SystemAssigned";
/**
 * Defines values for HostingMode.
 */
export type HostingMode = "default" | "highDensity";
/**
 * Defines values for SearchServiceStatus.
 */
export type SearchServiceStatus =
  | "running"
  | "provisioning"
  | "deleting"
  | "degraded"
  | "disabled"
  | "error";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState = "succeeded" | "provisioning" | "failed";
/**
 * Defines values for SkuName.
 */
export type SkuName =
  | "free"
  | "basic"
  | "standard"
  | "standard2"
  | "standard3"
  | "storage_optimized_l1"
  | "storage_optimized_l2";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface AdminKeysGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the get operation.
 */
export type AdminKeysGetResponse = AdminKeyResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AdminKeyResult;
  };
};

/**
 * Optional parameters.
 */
export interface AdminKeysRegenerateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the regenerate operation.
 */
export type AdminKeysRegenerateResponse = AdminKeyResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AdminKeyResult;
  };
};

/**
 * Optional parameters.
 */
export interface QueryKeysCreateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the create operation.
 */
export type QueryKeysCreateResponse = QueryKey & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QueryKey;
  };
};

/**
 * Optional parameters.
 */
export interface QueryKeysListBySearchServiceGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the listBySearchServiceGet operation.
 */
export type QueryKeysListBySearchServiceGetResponse = ListQueryKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListQueryKeysResult;
  };
};

/**
 * Optional parameters.
 */
export interface QueryKeysListBySearchServiceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the listBySearchService operation.
 */
export type QueryKeysListBySearchServiceResponse = ListQueryKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListQueryKeysResult;
  };
};

/**
 * Optional parameters.
 */
export interface QueryKeysDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Optional parameters.
 */
export interface ServicesCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServicesCreateOrUpdateResponse = SearchService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SearchService;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the update operation.
 */
export type ServicesUpdateResponse = SearchService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SearchService;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the get operation.
 */
export type ServicesGetResponse = SearchService & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SearchService;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Optional parameters.
 */
export interface ServicesListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServicesListByResourceGroupResponse = SearchServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SearchServiceListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type ServicesListBySubscriptionResponse = SearchServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SearchServiceListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ServicesCheckNameAvailabilityOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  searchManagementRequestOptions?: SearchManagementRequestOptions;
}

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ServicesCheckNameAvailabilityResponse = CheckNameAvailabilityOutput & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityOutput;
  };
};

/**
 * Optional parameters.
 */
export interface SearchManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
