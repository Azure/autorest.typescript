/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SearchManagementClient } from "../searchManagementClient";
import {
  AdminKeysGetOptionalParams,
  AdminKeysGetResponse,
  AdminKeyKind,
  AdminKeysRegenerateOptionalParams,
  AdminKeysRegenerateResponse
} from "../models";

/**
 * Class representing a AdminKeys.
 */
export class AdminKeys {
  private readonly client: SearchManagementClient;

  /**
   * Initialize a new instance of the class AdminKeys class.
   * @param client Reference to the service client
   */
  constructor(client: SearchManagementClient) {
    this.client = client;
  }

  /**
   * Gets the primary and secondary admin API keys for the specified Azure Cognitive Search service.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   *                          obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Cognitive Search service associated with the
   *                          specified resource group.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    searchServiceName: string,
    options?: AdminKeysGetOptionalParams
  ): Promise<AdminKeysGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, searchServiceName, options: operationOptions },
      getOperationSpec
    ) as Promise<AdminKeysGetResponse>;
  }

  /**
   * Regenerates either the primary or secondary admin API key. You can only regenerate one key at a
   * time.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   *                          obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Cognitive Search service associated with the
   *                          specified resource group.
   * @param keyKind Specifies which key to regenerate. Valid values include 'primary' and 'secondary'.
   * @param options The options parameters.
   */
  regenerate(
    resourceGroupName: string,
    searchServiceName: string,
    keyKind: AdminKeyKind,
    options?: AdminKeysRegenerateOptionalParams
  ): Promise<AdminKeysRegenerateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        searchServiceName,
        keyKind,
        options: operationOptions
      },
      regenerateOperationSpec
    ) as Promise<AdminKeysRegenerateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/listAdminKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AdminKeyResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.clientRequestId],
  serializer
};
const regenerateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/regenerateAdminKey/{keyKind}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AdminKeyResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId,
    Parameters.keyKind
  ],
  headerParameters: [Parameters.clientRequestId],
  serializer
};
