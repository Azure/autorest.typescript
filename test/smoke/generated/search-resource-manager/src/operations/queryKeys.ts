/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SearchManagementClient } from "../searchManagementClient";
import {
  QueryKeysCreateOptionalParams,
  QueryKeysCreateResponse,
  QueryKeysListBySearchServiceGetOptionalParams,
  QueryKeysListBySearchServiceGetResponse,
  QueryKeysListBySearchServiceOptionalParams,
  QueryKeysListBySearchServiceResponse,
  QueryKeysDeleteOptionalParams
} from "../models";

/**
 * Class representing a QueryKeys.
 */
export class QueryKeys {
  private readonly client: SearchManagementClient;

  /**
   * Initialize a new instance of the class QueryKeys class.
   * @param client Reference to the service client
   */
  constructor(client: SearchManagementClient) {
    this.client = client;
  }

  /**
   * Generates a new query key for the specified Search service. You can create up to 50 query keys per
   * service.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   *                          obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Cognitive Search service associated with the
   *                          specified resource group.
   * @param name The name of the new query API key.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    searchServiceName: string,
    name: string,
    options?: QueryKeysCreateOptionalParams
  ): Promise<QueryKeysCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, searchServiceName, name, options: operationOptions },
      createOperationSpec
    ) as Promise<QueryKeysCreateResponse>;
  }

  /**
   * Returns the list of query API keys for the given Azure Cognitive Search service.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   *                          obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Cognitive Search service associated with the
   *                          specified resource group.
   * @param options The options parameters.
   */
  listBySearchServiceGet(
    resourceGroupName: string,
    searchServiceName: string,
    options?: QueryKeysListBySearchServiceGetOptionalParams
  ): Promise<QueryKeysListBySearchServiceGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, searchServiceName, options: operationOptions },
      listBySearchServiceGetOperationSpec
    ) as Promise<QueryKeysListBySearchServiceGetResponse>;
  }

  /**
   * Returns the list of query API keys for the given Azure Cognitive Search service.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   *                          obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Cognitive Search service associated with the
   *                          specified resource group.
   * @param options The options parameters.
   */
  listBySearchService(
    resourceGroupName: string,
    searchServiceName: string,
    options?: QueryKeysListBySearchServiceOptionalParams
  ): Promise<QueryKeysListBySearchServiceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, searchServiceName, options: operationOptions },
      listBySearchServiceOperationSpec
    ) as Promise<QueryKeysListBySearchServiceResponse>;
  }

  /**
   * Deletes the specified query key. Unlike admin keys, query keys are not regenerated. The process for
   * regenerating a query key is to delete and then recreate it.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   *                          obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Cognitive Search service associated with the
   *                          specified resource group.
   * @param key The query key to be deleted. Query keys are identified by value, not by name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    searchServiceName: string,
    key: string,
    options?: QueryKeysDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, searchServiceName, key, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/createQueryKey/{name}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.QueryKey
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId,
    Parameters.name
  ],
  headerParameters: [Parameters.clientRequestId],
  serializer
};
const listBySearchServiceGetOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/listQueryKeys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListQueryKeysResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.clientRequestId],
  serializer
};
const listBySearchServiceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/listQueryKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListQueryKeysResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.clientRequestId],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/deleteQueryKey/{key}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId,
    Parameters.key
  ],
  headerParameters: [Parameters.clientRequestId],
  serializer
};
