/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const vaultBaseUrl: coreHttp.OperationURLParameter = {
  parameterPath: "vaultBaseUrl",
  mapper: {
    serializedName: "vaultBaseUrl",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const maxresults: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "maxresults"],
  mapper: {
    constraints: {
      InclusiveMaximum: 25,
      InclusiveMinimum: 1
    },
    serializedName: "maxresults",
    type: {
      name: "Number"
    }
  }
};

export const includePending: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "includePending"],
  mapper: {
    serializedName: "includePending",
    type: {
      name: "Boolean"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "7.2-preview",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const certificateName: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificate-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const contacts: coreHttp.OperationParameter = {
  parameterPath: "contacts",
  mapper: Mappers.Contacts
};

export const parameter: coreHttp.OperationParameter = {
  parameterPath: "parameter",
  mapper: Mappers.CertificateIssuerSetParameters
};

export const issuerName: coreHttp.OperationURLParameter = {
  parameterPath: "issuerName",
  mapper: {
    serializedName: "issuer-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameter1: coreHttp.OperationParameter = {
  parameterPath: "parameter",
  mapper: Mappers.CertificateIssuerUpdateParameters
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CertificateCreateParameters
};

export const certificateName1: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[0-9a-zA-Z-]+$")
    },
    serializedName: "certificate-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CertificateImportParameters
};

export const certificateName2: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificate-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificatePolicy: coreHttp.OperationParameter = {
  parameterPath: "certificatePolicy",
  mapper: Mappers.CertificatePolicy
};

export const certificateName3: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificate-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CertificateUpdateParameters
};

export const certificateName4: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificate-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateVersion: coreHttp.OperationURLParameter = {
  parameterPath: "certificateVersion",
  mapper: {
    serializedName: "certificate-version",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateOperation: coreHttp.OperationParameter = {
  parameterPath: "certificateOperation",
  mapper: Mappers.CertificateOperationUpdateParameter
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CertificateMergeParameters
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CertificateRestoreParameters
};

export const certificateName5: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificate-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateName6: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificate-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyCreateParameters
};

export const keyName: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[0-9a-zA-Z-]+$")
    },
    serializedName: "key-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyImportParameters
};

export const keyName1: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[0-9a-zA-Z-]+$")
    },
    serializedName: "key-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyName2: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "key-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyUpdateParameters
};

export const keyName3: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "key-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyVersion: coreHttp.OperationURLParameter = {
  parameterPath: "keyVersion",
  mapper: {
    serializedName: "key-version",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyName4: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "key-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyVersion1: coreHttp.OperationURLParameter = {
  parameterPath: "keyVersion",
  mapper: {
    serializedName: "key-version",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyName5: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "key-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyRestoreParameters
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyOperationsParameters
};

export const keyVersion2: coreHttp.OperationURLParameter = {
  parameterPath: "keyVersion",
  mapper: {
    serializedName: "key-version",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters10: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyOperationsParameters
};

export const parameters11: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeySignParameters
};

export const parameters12: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyVerifyParameters
};

export const parameters13: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyOperationsParameters
};

export const parameters14: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.KeyOperationsParameters
};

export const keyName6: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "key-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyName7: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "key-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters15: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SecretSetParameters
};

export const secretName: coreHttp.OperationURLParameter = {
  parameterPath: "secretName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[0-9a-zA-Z-]+$")
    },
    serializedName: "secret-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const secretName1: coreHttp.OperationURLParameter = {
  parameterPath: "secretName",
  mapper: {
    serializedName: "secret-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters16: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SecretUpdateParameters
};

export const secretVersion: coreHttp.OperationURLParameter = {
  parameterPath: "secretVersion",
  mapper: {
    serializedName: "secret-version",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const maxresults1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "maxresults"],
  mapper: {
    constraints: {
      InclusiveMaximum: 25,
      InclusiveMinimum: 1
    },
    serializedName: "maxresults",
    type: {
      name: "Number"
    }
  }
};

export const secretName2: coreHttp.OperationURLParameter = {
  parameterPath: "secretName",
  mapper: {
    serializedName: "secret-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters17: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SecretRestoreParameters
};

export const storageAccountName: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[0-9a-zA-Z]+$")
    },
    serializedName: "storage-account-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageAccountName1: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountName",
  mapper: {
    serializedName: "storage-account-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters18: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.StorageRestoreParameters
};

export const parameters19: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.StorageAccountCreateParameters
};

export const parameters20: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.StorageAccountUpdateParameters
};

export const parameters21: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.StorageAccountRegenerteKeyParameters
};

export const sasDefinitionName: coreHttp.OperationURLParameter = {
  parameterPath: "sasDefinitionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[0-9a-zA-Z]+$")
    },
    serializedName: "sas-definition-name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters22: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SasDefinitionCreateParameters
};

export const parameters23: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.SasDefinitionUpdateParameters
};

export const azureStorageBlobContainerUri: coreHttp.OperationParameter = {
  parameterPath: ["options", "azureStorageBlobContainerUri"],
  mapper: Mappers.SASTokenParameter
};

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const jobId: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const restoreBlobDetails: coreHttp.OperationParameter = {
  parameterPath: ["options", "restoreBlobDetails"],
  mapper: Mappers.RestoreOperationParameters
};

export const jobId1: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink7: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink8: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink9: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink10: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink11: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink12: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink13: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const scope: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const nextLink14: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const scope1: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const roleAssignmentName: coreHttp.OperationURLParameter = {
  parameterPath: "roleAssignmentName",
  mapper: {
    serializedName: "roleAssignmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters24: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.RoleAssignmentCreateParameters
};

export const scope2: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const roleAssignmentName1: coreHttp.OperationURLParameter = {
  parameterPath: "roleAssignmentName",
  mapper: {
    serializedName: "roleAssignmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const scope3: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const roleAssignmentName2: coreHttp.OperationURLParameter = {
  parameterPath: "roleAssignmentName",
  mapper: {
    serializedName: "roleAssignmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const scope4: coreHttp.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const nextLink15: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
