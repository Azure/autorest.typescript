/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const CertificateListResult: coreHttp.CompositeMapper = {
  serializedName: "CertificateListResult",
  type: {
    name: "Composite",
    className: "CertificateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CertificateItem" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateItem: coreHttp.CompositeMapper = {
  serializedName: "CertificateItem",
  type: {
    name: "Composite",
    className: "CertificateItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "CertificateAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      x509Thumbprint: {
        serializedName: "x5t",
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const Attributes: coreHttp.CompositeMapper = {
  serializedName: "Attributes",
  type: {
    name: "Composite",
    className: "Attributes",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      notBefore: {
        serializedName: "nbf",
        type: {
          name: "UnixTime"
        }
      },
      expires: {
        serializedName: "exp",
        type: {
          name: "UnixTime"
        }
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      updated: {
        serializedName: "updated",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const CertificateAttributes: coreHttp.CompositeMapper = {
  serializedName: "CertificateAttributes",
  type: {
    name: "Composite",
    className: "CertificateAttributes",
    modelProperties: {
      ...Attributes.type.modelProperties,
      recoverableDays: {
        serializedName: "recoverableDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recoveryLevel: {
        serializedName: "recoveryLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultError: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultError",
  type: {
    name: "Composite",
    className: "KeyVaultError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ErrorModel: coreHttp.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const CertificateBundle: coreHttp.CompositeMapper = {
  serializedName: "CertificateBundle",
  type: {
    name: "Composite",
    className: "CertificateBundle",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kid: {
        serializedName: "kid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sid: {
        serializedName: "sid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      x509Thumbprint: {
        serializedName: "x5t",
        readOnly: true,
        type: {
          name: "Base64Url"
        }
      },
      policy: {
        serializedName: "policy",
        type: {
          name: "Composite",
          className: "CertificatePolicy"
        }
      },
      cer: {
        serializedName: "cer",
        type: {
          name: "ByteArray"
        }
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "CertificateAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const CertificatePolicy: coreHttp.CompositeMapper = {
  serializedName: "CertificatePolicy",
  type: {
    name: "Composite",
    className: "CertificatePolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyProperties: {
        serializedName: "key_props",
        type: {
          name: "Composite",
          className: "KeyProperties"
        }
      },
      secretProperties: {
        serializedName: "secret_props",
        type: {
          name: "Composite",
          className: "SecretProperties"
        }
      },
      x509CertificateProperties: {
        serializedName: "x509_props",
        type: {
          name: "Composite",
          className: "X509CertificateProperties"
        }
      },
      lifetimeActions: {
        serializedName: "lifetime_actions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LifetimeAction" } }
        }
      },
      issuerParameters: {
        serializedName: "issuer",
        type: {
          name: "Composite",
          className: "IssuerParameters"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "CertificateAttributes"
        }
      }
    }
  }
};

export const KeyProperties: coreHttp.CompositeMapper = {
  serializedName: "KeyProperties",
  type: {
    name: "Composite",
    className: "KeyProperties",
    modelProperties: {
      exportable: {
        serializedName: "exportable",
        type: {
          name: "Boolean"
        }
      },
      keyType: {
        serializedName: "kty",
        type: {
          name: "String"
        }
      },
      keySize: {
        serializedName: "key_size",
        type: {
          name: "Number"
        }
      },
      reuseKey: {
        serializedName: "reuse_key",
        type: {
          name: "Boolean"
        }
      },
      curve: {
        serializedName: "crv",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretProperties: coreHttp.CompositeMapper = {
  serializedName: "SecretProperties",
  type: {
    name: "Composite",
    className: "SecretProperties",
    modelProperties: {
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const X509CertificateProperties: coreHttp.CompositeMapper = {
  serializedName: "X509CertificateProperties",
  type: {
    name: "Composite",
    className: "X509CertificateProperties",
    modelProperties: {
      subject: {
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      ekus: {
        serializedName: "ekus",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "X509CertificatePropertiesEkusItem"
          }
        }
      },
      subjectAlternativeNames: {
        serializedName: "sans",
        type: {
          name: "Composite",
          className: "SubjectAlternativeNames"
        }
      },
      keyUsage: {
        serializedName: "key_usage",
        type: {
          name: "Sequence",
          element: { type: { name: "String" }, serializedName: "KeyUsageType" }
        }
      },
      validityInMonths: {
        constraints: {},
        serializedName: "validity_months",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SubjectAlternativeNames: coreHttp.CompositeMapper = {
  serializedName: "SubjectAlternativeNames",
  type: {
    name: "Composite",
    className: "SubjectAlternativeNames",
    modelProperties: {
      emails: {
        serializedName: "emails",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SubjectAlternativeNamesEmailsItem"
          }
        }
      },
      dnsNames: {
        serializedName: "dns_names",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SubjectAlternativeNamesDnsNamesItem"
          }
        }
      },
      upns: {
        serializedName: "upns",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SubjectAlternativeNamesUpnsItem"
          }
        }
      }
    }
  }
};

export const LifetimeAction: coreHttp.CompositeMapper = {
  serializedName: "LifetimeAction",
  type: {
    name: "Composite",
    className: "LifetimeAction",
    modelProperties: {
      trigger: {
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "Trigger"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "Action"
        }
      }
    }
  }
};

export const Trigger: coreHttp.CompositeMapper = {
  serializedName: "Trigger",
  type: {
    name: "Composite",
    className: "Trigger",
    modelProperties: {
      lifetimePercentage: {
        constraints: {
          InclusiveMaximum: 99,
          InclusiveMinimum: 1
        },
        serializedName: "lifetime_percentage",
        type: {
          name: "Number"
        }
      },
      daysBeforeExpiry: {
        serializedName: "days_before_expiry",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Action: coreHttp.CompositeMapper = {
  serializedName: "Action",
  type: {
    name: "Composite",
    className: "Action",
    modelProperties: {
      actionType: {
        serializedName: "action_type",
        type: {
          name: "Enum",
          allowedValues: ["EmailContacts", "AutoRenew"]
        }
      }
    }
  }
};

export const IssuerParameters: coreHttp.CompositeMapper = {
  serializedName: "IssuerParameters",
  type: {
    name: "Composite",
    className: "IssuerParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      certificateType: {
        serializedName: "cty",
        type: {
          name: "String"
        }
      },
      certificateTransparency: {
        serializedName: "cert_transparency",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DeletedCertificateBundle: coreHttp.CompositeMapper = {
  serializedName: "DeletedCertificateBundle",
  type: {
    name: "Composite",
    className: "DeletedCertificateBundle",
    modelProperties: {
      ...CertificateBundle.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const Contacts: coreHttp.CompositeMapper = {
  serializedName: "Contacts",
  type: {
    name: "Composite",
    className: "Contacts",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      contactList: {
        serializedName: "contacts",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Contact" } }
        }
      }
    }
  }
};

export const Contact: coreHttp.CompositeMapper = {
  serializedName: "Contact",
  type: {
    name: "Composite",
    className: "Contact",
    modelProperties: {
      emailAddress: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateIssuerListResult: coreHttp.CompositeMapper = {
  serializedName: "CertificateIssuerListResult",
  type: {
    name: "Composite",
    className: "CertificateIssuerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CertificateIssuerItem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateIssuerItem: coreHttp.CompositeMapper = {
  serializedName: "CertificateIssuerItem",
  type: {
    name: "Composite",
    className: "CertificateIssuerItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateIssuerSetParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateIssuerSetParameters",
  type: {
    name: "Composite",
    className: "CertificateIssuerSetParameters",
    modelProperties: {
      provider: {
        serializedName: "provider",
        required: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "IssuerCredentials"
        }
      },
      organizationDetails: {
        serializedName: "org_details",
        type: {
          name: "Composite",
          className: "OrganizationDetails"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "IssuerAttributes"
        }
      }
    }
  }
};

export const IssuerCredentials: coreHttp.CompositeMapper = {
  serializedName: "IssuerCredentials",
  type: {
    name: "Composite",
    className: "IssuerCredentials",
    modelProperties: {
      accountId: {
        serializedName: "account_id",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "pwd",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrganizationDetails: coreHttp.CompositeMapper = {
  serializedName: "OrganizationDetails",
  type: {
    name: "Composite",
    className: "OrganizationDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      adminDetails: {
        serializedName: "admin_details",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AdministratorDetails" }
          }
        }
      }
    }
  }
};

export const AdministratorDetails: coreHttp.CompositeMapper = {
  serializedName: "AdministratorDetails",
  type: {
    name: "Composite",
    className: "AdministratorDetails",
    modelProperties: {
      firstName: {
        serializedName: "first_name",
        type: {
          name: "String"
        }
      },
      lastName: {
        serializedName: "last_name",
        type: {
          name: "String"
        }
      },
      emailAddress: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IssuerAttributes: coreHttp.CompositeMapper = {
  serializedName: "IssuerAttributes",
  type: {
    name: "Composite",
    className: "IssuerAttributes",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      updated: {
        serializedName: "updated",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const IssuerBundle: coreHttp.CompositeMapper = {
  serializedName: "IssuerBundle",
  type: {
    name: "Composite",
    className: "IssuerBundle",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "IssuerCredentials"
        }
      },
      organizationDetails: {
        serializedName: "org_details",
        type: {
          name: "Composite",
          className: "OrganizationDetails"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "IssuerAttributes"
        }
      }
    }
  }
};

export const CertificateIssuerUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateIssuerUpdateParameters",
  type: {
    name: "Composite",
    className: "CertificateIssuerUpdateParameters",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "IssuerCredentials"
        }
      },
      organizationDetails: {
        serializedName: "org_details",
        type: {
          name: "Composite",
          className: "OrganizationDetails"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "IssuerAttributes"
        }
      }
    }
  }
};

export const CertificateCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateCreateParameters",
  type: {
    name: "Composite",
    className: "CertificateCreateParameters",
    modelProperties: {
      certificatePolicy: {
        serializedName: "policy",
        type: {
          name: "Composite",
          className: "CertificatePolicy"
        }
      },
      certificateAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "CertificateAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const CertificateOperation: coreHttp.CompositeMapper = {
  serializedName: "CertificateOperation",
  type: {
    name: "Composite",
    className: "CertificateOperation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      issuerParameters: {
        serializedName: "issuer",
        type: {
          name: "Composite",
          className: "IssuerParameters"
        }
      },
      csr: {
        serializedName: "csr",
        type: {
          name: "ByteArray"
        }
      },
      cancellationRequested: {
        serializedName: "cancellation_requested",
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "status_details",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request_id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateImportParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateImportParameters",
  type: {
    name: "Composite",
    className: "CertificateImportParameters",
    modelProperties: {
      base64EncodedCertificate: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "pwd",
        type: {
          name: "String"
        }
      },
      certificatePolicy: {
        serializedName: "policy",
        type: {
          name: "Composite",
          className: "CertificatePolicy"
        }
      },
      certificateAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "CertificateAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const CertificateUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateUpdateParameters",
  type: {
    name: "Composite",
    className: "CertificateUpdateParameters",
    modelProperties: {
      certificatePolicy: {
        serializedName: "policy",
        type: {
          name: "Composite",
          className: "CertificatePolicy"
        }
      },
      certificateAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "CertificateAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const CertificateOperationUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "CertificateOperationUpdateParameter",
  type: {
    name: "Composite",
    className: "CertificateOperationUpdateParameter",
    modelProperties: {
      cancellationRequested: {
        serializedName: "cancellation_requested",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CertificateMergeParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateMergeParameters",
  type: {
    name: "Composite",
    className: "CertificateMergeParameters",
    modelProperties: {
      x509Certificates: {
        serializedName: "x5c",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "ByteArray" },
            serializedName: "CertificateMergeParametersX5CItem"
          }
        }
      },
      certificateAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "CertificateAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const BackupCertificateResult: coreHttp.CompositeMapper = {
  serializedName: "BackupCertificateResult",
  type: {
    name: "Composite",
    className: "BackupCertificateResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const CertificateRestoreParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateRestoreParameters",
  type: {
    name: "Composite",
    className: "CertificateRestoreParameters",
    modelProperties: {
      certificateBundleBackup: {
        serializedName: "value",
        required: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const DeletedCertificateListResult: coreHttp.CompositeMapper = {
  serializedName: "DeletedCertificateListResult",
  type: {
    name: "Composite",
    className: "DeletedCertificateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DeletedCertificateItem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedCertificateItem: coreHttp.CompositeMapper = {
  serializedName: "DeletedCertificateItem",
  type: {
    name: "Composite",
    className: "DeletedCertificateItem",
    modelProperties: {
      ...CertificateItem.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const KeyCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "KeyCreateParameters",
  type: {
    name: "Composite",
    className: "KeyCreateParameters",
    modelProperties: {
      kty: {
        serializedName: "kty",
        required: true,
        type: {
          name: "String"
        }
      },
      keySize: {
        serializedName: "key_size",
        type: {
          name: "Number"
        }
      },
      keyOps: {
        serializedName: "key_ops",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "JsonWebKeyOperation"
          }
        }
      },
      keyAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "KeyAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      curve: {
        serializedName: "crv",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyAttributes: coreHttp.CompositeMapper = {
  serializedName: "KeyAttributes",
  type: {
    name: "Composite",
    className: "KeyAttributes",
    modelProperties: {
      ...Attributes.type.modelProperties,
      recoverableDays: {
        serializedName: "recoverableDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recoveryLevel: {
        serializedName: "recoveryLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyBundle: coreHttp.CompositeMapper = {
  serializedName: "KeyBundle",
  type: {
    name: "Composite",
    className: "KeyBundle",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "JsonWebKey"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "KeyAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      managed: {
        serializedName: "managed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const JsonWebKey: coreHttp.CompositeMapper = {
  serializedName: "JsonWebKey",
  type: {
    name: "Composite",
    className: "JsonWebKey",
    modelProperties: {
      kid: {
        serializedName: "kid",
        type: {
          name: "String"
        }
      },
      kty: {
        serializedName: "kty",
        type: {
          name: "String"
        }
      },
      keyOps: {
        serializedName: "key_ops",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "JsonWebKeyOpsItem"
          }
        }
      },
      n: {
        serializedName: "n",
        type: {
          name: "Base64Url"
        }
      },
      e: {
        serializedName: "e",
        type: {
          name: "Base64Url"
        }
      },
      d: {
        serializedName: "d",
        type: {
          name: "Base64Url"
        }
      },
      dp: {
        serializedName: "dp",
        type: {
          name: "Base64Url"
        }
      },
      dq: {
        serializedName: "dq",
        type: {
          name: "Base64Url"
        }
      },
      qi: {
        serializedName: "qi",
        type: {
          name: "Base64Url"
        }
      },
      p: {
        serializedName: "p",
        type: {
          name: "Base64Url"
        }
      },
      q: {
        serializedName: "q",
        type: {
          name: "Base64Url"
        }
      },
      k: {
        serializedName: "k",
        type: {
          name: "Base64Url"
        }
      },
      t: {
        serializedName: "key_hsm",
        type: {
          name: "Base64Url"
        }
      },
      crv: {
        serializedName: "crv",
        type: {
          name: "String"
        }
      },
      x: {
        serializedName: "x",
        type: {
          name: "Base64Url"
        }
      },
      y: {
        serializedName: "y",
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const KeyImportParameters: coreHttp.CompositeMapper = {
  serializedName: "KeyImportParameters",
  type: {
    name: "Composite",
    className: "KeyImportParameters",
    modelProperties: {
      hsm: {
        serializedName: "Hsm",
        type: {
          name: "Boolean"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "JsonWebKey"
        }
      },
      keyAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "KeyAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const DeletedKeyBundle: coreHttp.CompositeMapper = {
  serializedName: "DeletedKeyBundle",
  type: {
    name: "Composite",
    className: "DeletedKeyBundle",
    modelProperties: {
      ...KeyBundle.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const KeyUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "KeyUpdateParameters",
  type: {
    name: "Composite",
    className: "KeyUpdateParameters",
    modelProperties: {
      keyOps: {
        serializedName: "key_ops",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "JsonWebKeyOperation"
          }
        }
      },
      keyAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "KeyAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const KeyListResult: coreHttp.CompositeMapper = {
  serializedName: "KeyListResult",
  type: {
    name: "Composite",
    className: "KeyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "KeyItem" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyItem: coreHttp.CompositeMapper = {
  serializedName: "KeyItem",
  type: {
    name: "Composite",
    className: "KeyItem",
    modelProperties: {
      kid: {
        serializedName: "kid",
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "KeyAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      managed: {
        serializedName: "managed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BackupKeyResult: coreHttp.CompositeMapper = {
  serializedName: "BackupKeyResult",
  type: {
    name: "Composite",
    className: "BackupKeyResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const KeyRestoreParameters: coreHttp.CompositeMapper = {
  serializedName: "KeyRestoreParameters",
  type: {
    name: "Composite",
    className: "KeyRestoreParameters",
    modelProperties: {
      keyBundleBackup: {
        serializedName: "value",
        required: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const KeyOperationsParameters: coreHttp.CompositeMapper = {
  serializedName: "KeyOperationsParameters",
  type: {
    name: "Composite",
    className: "KeyOperationsParameters",
    modelProperties: {
      algorithm: {
        serializedName: "alg",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Base64Url"
        }
      },
      iv: {
        serializedName: "iv",
        type: {
          name: "Base64Url"
        }
      },
      aad: {
        serializedName: "aad",
        type: {
          name: "Base64Url"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const KeyOperationResult: coreHttp.CompositeMapper = {
  serializedName: "KeyOperationResult",
  type: {
    name: "Composite",
    className: "KeyOperationResult",
    modelProperties: {
      kid: {
        serializedName: "kid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      result: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const KeySignParameters: coreHttp.CompositeMapper = {
  serializedName: "KeySignParameters",
  type: {
    name: "Composite",
    className: "KeySignParameters",
    modelProperties: {
      algorithm: {
        serializedName: "alg",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const KeyVerifyParameters: coreHttp.CompositeMapper = {
  serializedName: "KeyVerifyParameters",
  type: {
    name: "Composite",
    className: "KeyVerifyParameters",
    modelProperties: {
      algorithm: {
        serializedName: "alg",
        required: true,
        type: {
          name: "String"
        }
      },
      digest: {
        serializedName: "digest",
        required: true,
        type: {
          name: "Base64Url"
        }
      },
      signature: {
        serializedName: "value",
        required: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const KeyVerifyResult: coreHttp.CompositeMapper = {
  serializedName: "KeyVerifyResult",
  type: {
    name: "Composite",
    className: "KeyVerifyResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DeletedKeyListResult: coreHttp.CompositeMapper = {
  serializedName: "DeletedKeyListResult",
  type: {
    name: "Composite",
    className: "DeletedKeyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DeletedKeyItem" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedKeyItem: coreHttp.CompositeMapper = {
  serializedName: "DeletedKeyItem",
  type: {
    name: "Composite",
    className: "DeletedKeyItem",
    modelProperties: {
      ...KeyItem.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const RoleDefinitionListResult: coreHttp.CompositeMapper = {
  serializedName: "RoleDefinitionListResult",
  type: {
    name: "Composite",
    className: "RoleDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RoleDefinition" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleDefinition: coreHttp.CompositeMapper = {
  serializedName: "RoleDefinition",
  type: {
    name: "Composite",
    className: "RoleDefinition",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      roleName: {
        serializedName: "properties.roleName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roleType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Permission" } }
        }
      },
      assignableScopes: {
        serializedName: "properties.assignableScopes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "RoleDefinitionPropertiesAssignableScopesItem"
          }
        }
      }
    }
  }
};

export const Permission: coreHttp.CompositeMapper = {
  serializedName: "Permission",
  type: {
    name: "Composite",
    className: "Permission",
    modelProperties: {
      actions: {
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PermissionActionsItem"
          }
        }
      },
      notActions: {
        serializedName: "notActions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PermissionNotActionsItem"
          }
        }
      },
      dataActions: {
        serializedName: "dataActions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PermissionDataActionsItem"
          }
        }
      },
      notDataActions: {
        serializedName: "notDataActions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PermissionNotDataActionsItem"
          }
        }
      }
    }
  }
};

export const RoleAssignment: coreHttp.CompositeMapper = {
  serializedName: "RoleAssignment",
  type: {
    name: "Composite",
    className: "RoleAssignment",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RoleAssignmentPropertiesWithScope"
        }
      }
    }
  }
};

export const RoleAssignmentPropertiesWithScope: coreHttp.CompositeMapper = {
  serializedName: "RoleAssignmentPropertiesWithScope",
  type: {
    name: "Composite",
    className: "RoleAssignmentPropertiesWithScope",
    modelProperties: {
      scope: {
        serializedName: "scope",
        type: {
          name: "String"
        }
      },
      roleDefinitionId: {
        serializedName: "roleDefinitionId",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignmentCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "RoleAssignmentCreateParameters",
  type: {
    name: "Composite",
    className: "RoleAssignmentCreateParameters",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RoleAssignmentProperties"
        }
      }
    }
  }
};

export const RoleAssignmentProperties: coreHttp.CompositeMapper = {
  serializedName: "RoleAssignmentProperties",
  type: {
    name: "Composite",
    className: "RoleAssignmentProperties",
    modelProperties: {
      roleDefinitionId: {
        serializedName: "roleDefinitionId",
        required: true,
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignmentListResult: coreHttp.CompositeMapper = {
  serializedName: "RoleAssignmentListResult",
  type: {
    name: "Composite",
    className: "RoleAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RoleAssignment" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretSetParameters: coreHttp.CompositeMapper = {
  serializedName: "SecretSetParameters",
  type: {
    name: "Composite",
    className: "SecretSetParameters",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      secretAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SecretAttributes"
        }
      }
    }
  }
};

export const SecretAttributes: coreHttp.CompositeMapper = {
  serializedName: "SecretAttributes",
  type: {
    name: "Composite",
    className: "SecretAttributes",
    modelProperties: {
      ...Attributes.type.modelProperties,
      recoverableDays: {
        serializedName: "recoverableDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recoveryLevel: {
        serializedName: "recoveryLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretBundle: coreHttp.CompositeMapper = {
  serializedName: "SecretBundle",
  type: {
    name: "Composite",
    className: "SecretBundle",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SecretAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      kid: {
        serializedName: "kid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managed: {
        serializedName: "managed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DeletedSecretBundle: coreHttp.CompositeMapper = {
  serializedName: "DeletedSecretBundle",
  type: {
    name: "Composite",
    className: "DeletedSecretBundle",
    modelProperties: {
      ...SecretBundle.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const SecretUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "SecretUpdateParameters",
  type: {
    name: "Composite",
    className: "SecretUpdateParameters",
    modelProperties: {
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      secretAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SecretAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const SecretListResult: coreHttp.CompositeMapper = {
  serializedName: "SecretListResult",
  type: {
    name: "Composite",
    className: "SecretListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SecretItem" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretItem: coreHttp.CompositeMapper = {
  serializedName: "SecretItem",
  type: {
    name: "Composite",
    className: "SecretItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SecretAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      managed: {
        serializedName: "managed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DeletedSecretListResult: coreHttp.CompositeMapper = {
  serializedName: "DeletedSecretListResult",
  type: {
    name: "Composite",
    className: "DeletedSecretListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DeletedSecretItem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedSecretItem: coreHttp.CompositeMapper = {
  serializedName: "DeletedSecretItem",
  type: {
    name: "Composite",
    className: "DeletedSecretItem",
    modelProperties: {
      ...SecretItem.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const BackupSecretResult: coreHttp.CompositeMapper = {
  serializedName: "BackupSecretResult",
  type: {
    name: "Composite",
    className: "BackupSecretResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const SecretRestoreParameters: coreHttp.CompositeMapper = {
  serializedName: "SecretRestoreParameters",
  type: {
    name: "Composite",
    className: "SecretRestoreParameters",
    modelProperties: {
      secretBundleBackup: {
        serializedName: "value",
        required: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const StorageListResult: coreHttp.CompositeMapper = {
  serializedName: "StorageListResult",
  type: {
    name: "Composite",
    className: "StorageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "StorageAccountItem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountItem: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountItem",
  type: {
    name: "Composite",
    className: "StorageAccountItem",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "StorageAccountAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const StorageAccountAttributes: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountAttributes",
  type: {
    name: "Composite",
    className: "StorageAccountAttributes",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      updated: {
        serializedName: "updated",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      recoverableDays: {
        serializedName: "recoverableDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recoveryLevel: {
        serializedName: "recoveryLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedStorageListResult: coreHttp.CompositeMapper = {
  serializedName: "DeletedStorageListResult",
  type: {
    name: "Composite",
    className: "DeletedStorageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DeletedStorageAccountItem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedStorageAccountItem: coreHttp.CompositeMapper = {
  serializedName: "DeletedStorageAccountItem",
  type: {
    name: "Composite",
    className: "DeletedStorageAccountItem",
    modelProperties: {
      ...StorageAccountItem.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const StorageBundle: coreHttp.CompositeMapper = {
  serializedName: "StorageBundle",
  type: {
    name: "Composite",
    className: "StorageBundle",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activeKeyName: {
        serializedName: "activeKeyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      autoRegenerateKey: {
        serializedName: "autoRegenerateKey",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      regenerationPeriod: {
        serializedName: "regenerationPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "StorageAccountAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const DeletedStorageBundle: coreHttp.CompositeMapper = {
  serializedName: "DeletedStorageBundle",
  type: {
    name: "Composite",
    className: "DeletedStorageBundle",
    modelProperties: {
      ...StorageBundle.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const BackupStorageResult: coreHttp.CompositeMapper = {
  serializedName: "BackupStorageResult",
  type: {
    name: "Composite",
    className: "BackupStorageResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const StorageRestoreParameters: coreHttp.CompositeMapper = {
  serializedName: "StorageRestoreParameters",
  type: {
    name: "Composite",
    className: "StorageRestoreParameters",
    modelProperties: {
      storageBundleBackup: {
        serializedName: "value",
        required: true,
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const StorageAccountCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountCreateParameters",
  type: {
    name: "Composite",
    className: "StorageAccountCreateParameters",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      activeKeyName: {
        serializedName: "activeKeyName",
        required: true,
        type: {
          name: "String"
        }
      },
      autoRegenerateKey: {
        serializedName: "autoRegenerateKey",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      regenerationPeriod: {
        serializedName: "regenerationPeriod",
        type: {
          name: "String"
        }
      },
      storageAccountAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "StorageAccountAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const StorageAccountUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountUpdateParameters",
  type: {
    name: "Composite",
    className: "StorageAccountUpdateParameters",
    modelProperties: {
      activeKeyName: {
        serializedName: "activeKeyName",
        type: {
          name: "String"
        }
      },
      autoRegenerateKey: {
        serializedName: "autoRegenerateKey",
        type: {
          name: "Boolean"
        }
      },
      regenerationPeriod: {
        serializedName: "regenerationPeriod",
        type: {
          name: "String"
        }
      },
      storageAccountAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "StorageAccountAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const StorageAccountRegenerteKeyParameters: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountRegenerteKeyParameters",
  type: {
    name: "Composite",
    className: "StorageAccountRegenerteKeyParameters",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SasDefinitionListResult: coreHttp.CompositeMapper = {
  serializedName: "SasDefinitionListResult",
  type: {
    name: "Composite",
    className: "SasDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SasDefinitionItem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SasDefinitionItem: coreHttp.CompositeMapper = {
  serializedName: "SasDefinitionItem",
  type: {
    name: "Composite",
    className: "SasDefinitionItem",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secretId: {
        serializedName: "sid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SasDefinitionAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const SasDefinitionAttributes: coreHttp.CompositeMapper = {
  serializedName: "SasDefinitionAttributes",
  type: {
    name: "Composite",
    className: "SasDefinitionAttributes",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      updated: {
        serializedName: "updated",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      recoverableDays: {
        serializedName: "recoverableDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recoveryLevel: {
        serializedName: "recoveryLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedSasDefinitionListResult: coreHttp.CompositeMapper = {
  serializedName: "DeletedSasDefinitionListResult",
  type: {
    name: "Composite",
    className: "DeletedSasDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DeletedSasDefinitionItem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedSasDefinitionItem: coreHttp.CompositeMapper = {
  serializedName: "DeletedSasDefinitionItem",
  type: {
    name: "Composite",
    className: "DeletedSasDefinitionItem",
    modelProperties: {
      ...SasDefinitionItem.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const SasDefinitionBundle: coreHttp.CompositeMapper = {
  serializedName: "SasDefinitionBundle",
  type: {
    name: "Composite",
    className: "SasDefinitionBundle",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secretId: {
        serializedName: "sid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      templateUri: {
        serializedName: "templateUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sasType: {
        serializedName: "sasType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      validityPeriod: {
        serializedName: "validityPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SasDefinitionAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const DeletedSasDefinitionBundle: coreHttp.CompositeMapper = {
  serializedName: "DeletedSasDefinitionBundle",
  type: {
    name: "Composite",
    className: "DeletedSasDefinitionBundle",
    modelProperties: {
      ...SasDefinitionBundle.type.modelProperties,
      recoveryId: {
        serializedName: "recoveryId",
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      },
      deletedDate: {
        serializedName: "deletedDate",
        readOnly: true,
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const SasDefinitionCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "SasDefinitionCreateParameters",
  type: {
    name: "Composite",
    className: "SasDefinitionCreateParameters",
    modelProperties: {
      templateUri: {
        serializedName: "templateUri",
        required: true,
        type: {
          name: "String"
        }
      },
      sasType: {
        serializedName: "sasType",
        required: true,
        type: {
          name: "String"
        }
      },
      validityPeriod: {
        serializedName: "validityPeriod",
        required: true,
        type: {
          name: "String"
        }
      },
      sasDefinitionAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SasDefinitionAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const SasDefinitionUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "SasDefinitionUpdateParameters",
  type: {
    name: "Composite",
    className: "SasDefinitionUpdateParameters",
    modelProperties: {
      templateUri: {
        serializedName: "templateUri",
        type: {
          name: "String"
        }
      },
      sasType: {
        serializedName: "sasType",
        type: {
          name: "String"
        }
      },
      validityPeriod: {
        serializedName: "validityPeriod",
        type: {
          name: "String"
        }
      },
      sasDefinitionAttributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SasDefinitionAttributes"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const SASTokenParameter: coreHttp.CompositeMapper = {
  serializedName: "SASTokenParameter",
  type: {
    name: "Composite",
    className: "SASTokenParameter",
    modelProperties: {
      storageResourceUri: {
        serializedName: "storageResourceUri",
        required: true,
        type: {
          name: "String"
        }
      },
      token: {
        serializedName: "token",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FullBackupOperation: coreHttp.CompositeMapper = {
  serializedName: "FullBackupOperation",
  type: {
    name: "Composite",
    className: "FullBackupOperation",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "UnixTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "UnixTime"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      azureStorageBlobContainerUri: {
        serializedName: "azureStorageBlobContainerUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreOperationParameters: coreHttp.CompositeMapper = {
  serializedName: "RestoreOperationParameters",
  type: {
    name: "Composite",
    className: "RestoreOperationParameters",
    modelProperties: {
      sasTokenParameters: {
        serializedName: "sasTokenParameters",
        type: {
          name: "Composite",
          className: "SASTokenParameter"
        }
      },
      folderToRestore: {
        serializedName: "folderToRestore",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FullRestoreOperation: coreHttp.CompositeMapper = {
  serializedName: "FullRestoreOperation",
  type: {
    name: "Composite",
    className: "FullRestoreOperation",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "UnixTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "UnixTime"
        }
      }
    }
  }
};

export const PendingCertificateSigningRequestResult: coreHttp.CompositeMapper = {
  serializedName: "PendingCertificateSigningRequestResult",
  type: {
    name: "Composite",
    className: "PendingCertificateSigningRequestResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignmentFilter: coreHttp.CompositeMapper = {
  serializedName: "RoleAssignmentFilter",
  type: {
    name: "Composite",
    className: "RoleAssignmentFilter",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleDefinitionFilter: coreHttp.CompositeMapper = {
  serializedName: "RoleDefinitionFilter",
  type: {
    name: "Composite",
    className: "RoleDefinitionFilter",
    modelProperties: {
      roleName: {
        serializedName: "roleName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultClientFullBackupHeaders: coreHttp.CompositeMapper = {
  serializedName: "keyVaultClient_fullBackupHeaders",
  type: {
    name: "Composite",
    className: "KeyVaultClientFullBackupHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultClientFullRestoreOperationHeaders: coreHttp.CompositeMapper = {
  serializedName: "keyVaultClient_fullRestoreOperationHeaders",
  type: {
    name: "Composite",
    className: "KeyVaultClientFullRestoreOperationHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};
