/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The certificate list result.
 */
export interface CertificateListResult {
  /**
   * A response message containing a list of certificates in the key vault along with a link to the next page of certificates.
   */
  readonly value?: CertificateItem[];
  /**
   * The URL to get the next set of certificates.
   */
  readonly nextLink?: string;
}

/**
 * The certificate item containing certificate metadata.
 */
export interface CertificateItem {
  /**
   * Certificate identifier.
   */
  id?: string;
  /**
   * The certificate management attributes.
   */
  attributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Thumbprint of the certificate.
   */
  x509Thumbprint?: Uint8Array;
}

/**
 * The object attributes managed by the KeyVault service.
 */
export interface Attributes {
  /**
   * Determines whether the object is enabled.
   */
  enabled?: boolean;
  /**
   * Not before date in UTC.
   */
  notBefore?: Date;
  /**
   * Expiry date in UTC.
   */
  expires?: Date;
  /**
   * Creation time in UTC.
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   */
  readonly updated?: Date;
}

/**
 * The certificate management attributes.
 */
export type CertificateAttributes = Attributes & {
  /**
   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.
   */
  readonly recoverableDays?: number;
  /**
   * Reflects the deletion recovery level currently in effect for certificates in the current vault. If it contains 'Purgeable', the certificate can be permanently deleted by a privileged user; otherwise, only the system can purge the certificate, at the end of the retention interval.
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
};

/**
 * The key vault error exception.
 */
export interface KeyVaultError {
  /**
   * The key vault server error.
   */
  readonly error?: ErrorModel;
}

/**
 * The key vault server error.
 */
export interface ErrorModel {
  /**
   * The error code.
   */
  readonly code?: string;
  /**
   * The error message.
   */
  readonly message?: string;
  /**
   * The key vault server error.
   */
  readonly innerError?: ErrorModel;
}

/**
 * A certificate bundle consists of a certificate (X509) plus its attributes.
 */
export interface CertificateBundle {
  /**
   * The certificate id.
   */
  readonly id?: string;
  /**
   * The key id.
   */
  readonly kid?: string;
  /**
   * The secret id.
   */
  readonly sid?: string;
  /**
   * Thumbprint of the certificate.
   */
  readonly x509Thumbprint?: Uint8Array;
  /**
   * The management policy.
   */
  readonly policy?: CertificatePolicy;
  /**
   * CER contents of x509 certificate.
   */
  cer?: Uint8Array;
  /**
   * The content type of the secret.
   */
  contentType?: string;
  /**
   * The certificate attributes.
   */
  attributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Management policy for a certificate.
 */
export interface CertificatePolicy {
  /**
   * The certificate id.
   */
  readonly id?: string;
  /**
   * Properties of the key backing a certificate.
   */
  keyProperties?: KeyProperties;
  /**
   * Properties of the secret backing a certificate.
   */
  secretProperties?: SecretProperties;
  /**
   * Properties of the X509 component of a certificate.
   */
  x509CertificateProperties?: X509CertificateProperties;
  /**
   * Actions that will be performed by Key Vault over the lifetime of a certificate.
   */
  lifetimeActions?: LifetimeAction[];
  /**
   * Parameters for the issuer of the X509 component of a certificate.
   */
  issuerParameters?: IssuerParameters;
  /**
   * The certificate attributes.
   */
  attributes?: CertificateAttributes;
}

/**
 * Properties of the key pair backing a certificate.
 */
export interface KeyProperties {
  /**
   * Indicates if the private key can be exported.
   */
  exportable?: boolean;
  /**
   * The type of key pair to be used for the certificate.
   */
  keyType?: JsonWebKeyType;
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
   */
  keySize?: number;
  /**
   * Indicates if the same key pair will be used on certificate renewal.
   */
  reuseKey?: boolean;
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
   */
  curve?: JsonWebKeyCurveName;
}

/**
 * Properties of the key backing a certificate.
 */
export interface SecretProperties {
  /**
   * The media type (MIME type).
   */
  contentType?: string;
}

/**
 * Properties of the X509 component of a certificate.
 */
export interface X509CertificateProperties {
  /**
   * The subject name. Should be a valid X509 distinguished Name.
   */
  subject?: string;
  /**
   * The enhanced key usage.
   */
  ekus?: string[];
  /**
   * The subject alternative names.
   */
  subjectAlternativeNames?: SubjectAlternativeNames;
  /**
   * List of key usages.
   */
  keyUsage?: KeyUsageType[];
  /**
   * The duration that the certificate is valid in months.
   */
  validityInMonths?: number;
}

/**
 * The subject alternate names of a X509 object.
 */
export interface SubjectAlternativeNames {
  /**
   * Email addresses.
   */
  emails?: string[];
  /**
   * Domain names.
   */
  dnsNames?: string[];
  /**
   * User principal names.
   */
  upns?: string[];
}

/**
 * Action and its trigger that will be performed by Key Vault over the lifetime of a certificate.
 */
export interface LifetimeAction {
  /**
   * The condition that will execute the action.
   */
  trigger?: Trigger;
  /**
   * The action that will be executed.
   */
  action?: Action;
}

/**
 * A condition to be satisfied for an action to be executed.
 */
export interface Trigger {
  /**
   * Percentage of lifetime at which to trigger. Value should be between 1 and 99.
   */
  lifetimePercentage?: number;
  /**
   * Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 * 27).
   */
  daysBeforeExpiry?: number;
}

/**
 * The action that will be executed.
 */
export interface Action {
  /**
   * The type of the action.
   */
  actionType?: ActionType;
}

/**
 * Parameters for the issuer of the X509 component of a certificate.
 */
export interface IssuerParameters {
  /**
   * Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
   */
  name?: string;
  /**
   * Certificate type as supported by the provider (optional); for example 'OV-SSL', 'EV-SSL'
   */
  certificateType?: string;
  /**
   * Indicates if the certificates generated under this policy should be published to certificate transparency logs.
   */
  certificateTransparency?: boolean;
}

/**
 * A Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
 */
export type DeletedCertificateBundle = CertificateBundle & {
  /**
   * The url of the recovery object, used to identify and recover the deleted certificate.
   */
  recoveryId?: string;
  /**
   * The time when the certificate is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the certificate was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * The contacts for the vault certificates.
 */
export interface Contacts {
  /**
   * Identifier for the contacts collection.
   */
  readonly id?: string;
  /**
   * The contact list for the vault certificates.
   */
  contactList?: Contact[];
}

/**
 * The contact information for the vault certificates.
 */
export interface Contact {
  /**
   * Email address.
   */
  emailAddress?: string;
  /**
   * Name.
   */
  name?: string;
  /**
   * Phone number.
   */
  phone?: string;
}

/**
 * The certificate issuer list result.
 */
export interface CertificateIssuerListResult {
  /**
   * A response message containing a list of certificate issuers in the key vault along with a link to the next page of certificate issuers.
   */
  readonly value?: CertificateIssuerItem[];
  /**
   * The URL to get the next set of certificate issuers.
   */
  readonly nextLink?: string;
}

/**
 * The certificate issuer item containing certificate issuer metadata.
 */
export interface CertificateIssuerItem {
  /**
   * Certificate Identifier.
   */
  id?: string;
  /**
   * The issuer provider.
   */
  provider?: string;
}

/**
 * The certificate issuer set parameters.
 */
export interface CertificateIssuerSetParameters {
  /**
   * The issuer provider.
   */
  provider: string;
  /**
   * The credentials to be used for the issuer.
   */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
   */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
   */
  attributes?: IssuerAttributes;
}

/**
 * The credentials to be used for the certificate issuer.
 */
export interface IssuerCredentials {
  /**
   * The user name/account name/account id.
   */
  accountId?: string;
  /**
   * The password/secret/account key.
   */
  password?: string;
}

/**
 * Details of the organization of the certificate issuer.
 */
export interface OrganizationDetails {
  /**
   * Id of the organization.
   */
  id?: string;
  /**
   * Details of the organization administrator.
   */
  adminDetails?: AdministratorDetails[];
}

/**
 * Details of the organization administrator of the certificate issuer.
 */
export interface AdministratorDetails {
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
  /**
   * Email address.
   */
  emailAddress?: string;
  /**
   * Phone number.
   */
  phone?: string;
}

/**
 * The attributes of an issuer managed by the Key Vault service.
 */
export interface IssuerAttributes {
  /**
   * Determines whether the issuer is enabled.
   */
  enabled?: boolean;
  /**
   * Creation time in UTC.
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   */
  readonly updated?: Date;
}

/**
 * The issuer for Key Vault certificate.
 */
export interface IssuerBundle {
  /**
   * Identifier for the issuer object.
   */
  readonly id?: string;
  /**
   * The issuer provider.
   */
  provider?: string;
  /**
   * The credentials to be used for the issuer.
   */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
   */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
   */
  attributes?: IssuerAttributes;
}

/**
 * The certificate issuer update parameters.
 */
export interface CertificateIssuerUpdateParameters {
  /**
   * The issuer provider.
   */
  provider?: string;
  /**
   * The credentials to be used for the issuer.
   */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
   */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
   */
  attributes?: IssuerAttributes;
}

/**
 * The certificate create parameters.
 */
export interface CertificateCreateParameters {
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A certificate operation is returned in case of asynchronous requests.
 */
export interface CertificateOperation {
  /**
   * The certificate id.
   */
  readonly id?: string;
  /**
   * Parameters for the issuer of the X509 component of a certificate.
   */
  issuerParameters?: IssuerParameters;
  /**
   * The certificate signing request (CSR) that is being used in the certificate operation.
   */
  csr?: Uint8Array;
  /**
   * Indicates if cancellation was requested on the certificate operation.
   */
  cancellationRequested?: boolean;
  /**
   * Status of the certificate operation.
   */
  status?: string;
  /**
   * The status details of the certificate operation.
   */
  statusDetails?: string;
  /**
   * Error encountered, if any, during the certificate operation.
   */
  error?: ErrorModel;
  /**
   * Location which contains the result of the certificate operation.
   */
  target?: string;
  /**
   * Identifier for the certificate operation.
   */
  requestId?: string;
}

/**
 * The certificate import parameters.
 */
export interface CertificateImportParameters {
  /**
   * Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
   */
  base64EncodedCertificate: string;
  /**
   * If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
   */
  password?: string;
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate update parameters.
 */
export interface CertificateUpdateParameters {
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate operation update parameters.
 */
export interface CertificateOperationUpdateParameter {
  /**
   * Indicates if cancellation was requested on the certificate operation.
   */
  cancellationRequested: boolean;
}

/**
 * The certificate merge parameters
 */
export interface CertificateMergeParameters {
  /**
   * The certificate or the certificate chain to merge.
   */
  x509Certificates: Uint8Array[];
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The backup certificate result, containing the backup blob.
 */
export interface BackupCertificateResult {
  /**
   * The backup blob containing the backed up certificate.
   */
  readonly value?: Uint8Array;
}

/**
 * The certificate restore parameters.
 */
export interface CertificateRestoreParameters {
  /**
   * The backup blob associated with a certificate bundle.
   */
  certificateBundleBackup: Uint8Array;
}

/**
 * A list of certificates that have been deleted in this vault.
 */
export interface DeletedCertificateListResult {
  /**
   * A response message containing a list of deleted certificates in the vault along with a link to the next page of deleted certificates
   */
  readonly value?: DeletedCertificateItem[];
  /**
   * The URL to get the next set of deleted certificates.
   */
  readonly nextLink?: string;
}

/**
 * The deleted certificate item containing metadata about the deleted certificate.
 */
export type DeletedCertificateItem = CertificateItem & {
  /**
   * The url of the recovery object, used to identify and recover the deleted certificate.
   */
  recoveryId?: string;
  /**
   * The time when the certificate is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the certificate was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * The key create parameters.
 */
export interface KeyCreateParameters {
  /**
   * The type of key to create. For valid values, see JsonWebKeyType.
   */
  kty: JsonWebKeyType;
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
   */
  keySize?: number;
  keyOps?: JsonWebKeyOperation[];
  /**
   * The attributes of a key managed by the key vault service.
   */
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
   */
  curve?: JsonWebKeyCurveName;
}

/**
 * The attributes of a key managed by the key vault service.
 */
export type KeyAttributes = Attributes & {
  /**
   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.
   */
  readonly recoverableDays?: number;
  /**
   * Reflects the deletion recovery level currently in effect for keys in the current vault. If it contains 'Purgeable' the key can be permanently deleted by a privileged user; otherwise, only the system can purge the key, at the end of the retention interval.
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
};

/**
 * A KeyBundle consisting of a WebKey plus its attributes.
 */
export interface KeyBundle {
  /**
   * The Json web key.
   */
  key?: JsonWebKey;
  /**
   * The key management attributes.
   */
  attributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.
   */
  readonly managed?: boolean;
}

/**
 * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18
 */
export interface JsonWebKey {
  /**
   * Key identifier.
   */
  kid?: string;
  /**
   * JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
   */
  kty?: JsonWebKeyType;
  keyOps?: string[];
  /**
   * RSA modulus.
   */
  n?: Uint8Array;
  /**
   * RSA public exponent.
   */
  e?: Uint8Array;
  /**
   * RSA private exponent, or the D component of an EC private key.
   */
  d?: Uint8Array;
  /**
   * RSA private key parameter.
   */
  dp?: Uint8Array;
  /**
   * RSA private key parameter.
   */
  dq?: Uint8Array;
  /**
   * RSA private key parameter.
   */
  qi?: Uint8Array;
  /**
   * RSA secret prime.
   */
  p?: Uint8Array;
  /**
   * RSA secret prime, with p < q.
   */
  q?: Uint8Array;
  /**
   * Symmetric key.
   */
  k?: Uint8Array;
  /**
   * HSM Token, used with 'Bring Your Own Key'.
   */
  t?: Uint8Array;
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
   */
  crv?: JsonWebKeyCurveName;
  /**
   * X component of an EC public key.
   */
  x?: Uint8Array;
  /**
   * Y component of an EC public key.
   */
  y?: Uint8Array;
}

/**
 * The key import parameters.
 */
export interface KeyImportParameters {
  /**
   * Whether to import as a hardware key (HSM) or software key.
   */
  hsm?: boolean;
  /**
   * The Json web key
   */
  key: JsonWebKey;
  /**
   * The key management attributes.
   */
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info
 */
export type DeletedKeyBundle = KeyBundle & {
  /**
   * The url of the recovery object, used to identify and recover the deleted key.
   */
  recoveryId?: string;
  /**
   * The time when the key is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the key was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * The key update parameters.
 */
export interface KeyUpdateParameters {
  /**
   * Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
   */
  keyOps?: JsonWebKeyOperation[];
  /**
   * The attributes of a key managed by the key vault service.
   */
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The key list result.
 */
export interface KeyListResult {
  /**
   * A response message containing a list of keys in the key vault along with a link to the next page of keys.
   */
  readonly value?: KeyItem[];
  /**
   * The URL to get the next set of keys.
   */
  readonly nextLink?: string;
}

/**
 * The key item containing key metadata.
 */
export interface KeyItem {
  /**
   * Key identifier.
   */
  kid?: string;
  /**
   * The key management attributes.
   */
  attributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.
   */
  readonly managed?: boolean;
}

/**
 * The backup key result, containing the backup blob.
 */
export interface BackupKeyResult {
  /**
   * The backup blob containing the backed up key.
   */
  readonly value?: Uint8Array;
}

/**
 * The key restore parameters.
 */
export interface KeyRestoreParameters {
  /**
   * The backup blob associated with a key bundle.
   */
  keyBundleBackup: Uint8Array;
}

/**
 * The key operations parameters.
 */
export interface KeyOperationsParameters {
  /**
   * algorithm identifier
   */
  algorithm: JsonWebKeyEncryptionAlgorithm;
  value: Uint8Array;
  /**
   * Initialization vector for symmetric algorithms.
   */
  iv?: Uint8Array;
  /**
   * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.
   */
  aad?: Uint8Array;
  /**
   * The tag to authenticate when performing decryption with an authenticated algorithm.
   */
  tag?: Uint8Array;
}

/**
 * The key operation result.
 */
export interface KeyOperationResult {
  /**
   * Key identifier
   */
  readonly kid?: string;
  readonly result?: Uint8Array;
}

/**
 * The key operations parameters.
 */
export interface KeySignParameters {
  /**
   * The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
   */
  algorithm: JsonWebKeySignatureAlgorithm;
  value: Uint8Array;
}

/**
 * The key verify parameters.
 */
export interface KeyVerifyParameters {
  /**
   * The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
   */
  algorithm: JsonWebKeySignatureAlgorithm;
  /**
   * The digest used for signing.
   */
  digest: Uint8Array;
  /**
   * The signature to be verified.
   */
  signature: Uint8Array;
}

/**
 * The key verify result.
 */
export interface KeyVerifyResult {
  /**
   * True if the signature is verified, otherwise false.
   */
  readonly value?: boolean;
}

/**
 * A list of keys that have been deleted in this vault.
 */
export interface DeletedKeyListResult {
  /**
   * A response message containing a list of deleted keys in the vault along with a link to the next page of deleted keys
   */
  readonly value?: DeletedKeyItem[];
  /**
   * The URL to get the next set of deleted keys.
   */
  readonly nextLink?: string;
}

/**
 * The deleted key item containing the deleted key metadata and information about deletion.
 */
export type DeletedKeyItem = KeyItem & {
  /**
   * The url of the recovery object, used to identify and recover the deleted key.
   */
  recoveryId?: string;
  /**
   * The time when the key is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the key was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * Role definition list operation result.
 */
export interface RoleDefinitionListResult {
  /**
   * Role definition list.
   */
  value?: RoleDefinition[];
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * Role definition.
 */
export interface RoleDefinition {
  /**
   * The role definition ID.
   */
  readonly id?: string;
  /**
   * The role definition name.
   */
  readonly name?: string;
  /**
   * The role definition type.
   */
  readonly type?: string;
  /**
   * The role name.
   */
  roleName?: string;
  /**
   * The role definition description.
   */
  description?: string;
  /**
   * The role type.
   */
  roleType?: string;
  /**
   * Role definition permissions.
   */
  permissions?: Permission[];
  /**
   * Role definition assignable scopes.
   */
  assignableScopes?: string[];
}

/**
 * Role definition permissions.
 */
export interface Permission {
  /**
   * Allowed actions.
   */
  actions?: string[];
  /**
   * Denied actions.
   */
  notActions?: string[];
  /**
   * Allowed Data actions.
   */
  dataActions?: string[];
  /**
   * Denied Data actions.
   */
  notDataActions?: string[];
}

/**
 * Role Assignments
 */
export interface RoleAssignment {
  /**
   * The role assignment ID.
   */
  readonly id?: string;
  /**
   * The role assignment name.
   */
  readonly name?: string;
  /**
   * The role assignment type.
   */
  readonly type?: string;
  /**
   * Role assignment properties.
   */
  properties?: RoleAssignmentPropertiesWithScope;
}

/**
 * Role assignment properties with scope.
 */
export interface RoleAssignmentPropertiesWithScope {
  /**
   * The role assignment scope.
   */
  scope?: string;
  /**
   * The role definition ID.
   */
  roleDefinitionId?: string;
  /**
   * The principal ID.
   */
  principalId?: string;
}

/**
 * Role assignment create parameters.
 */
export interface RoleAssignmentCreateParameters {
  /**
   * Role assignment properties.
   */
  properties: RoleAssignmentProperties;
}

/**
 * Role assignment properties.
 */
export interface RoleAssignmentProperties {
  /**
   * The role definition ID used in the role assignment.
   */
  roleDefinitionId: string;
  /**
   * The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
   */
  principalId: string;
}

/**
 * Role assignment list operation result.
 */
export interface RoleAssignmentListResult {
  /**
   * Role assignment list.
   */
  value?: RoleAssignment[];
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * The secret set parameters.
 */
export interface SecretSetParameters {
  /**
   * The value of the secret.
   */
  value: string;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
}

/**
 * The secret management attributes.
 */
export type SecretAttributes = Attributes & {
  /**
   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.
   */
  readonly recoverableDays?: number;
  /**
   * Reflects the deletion recovery level currently in effect for secrets in the current vault. If it contains 'Purgeable', the secret can be permanently deleted by a privileged user; otherwise, only the system can purge the secret, at the end of the retention interval.
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
};

/**
 * A secret consisting of a value, id and its attributes.
 */
export interface SecretBundle {
  /**
   * The secret value.
   */
  value?: string;
  /**
   * The secret id.
   */
  id?: string;
  /**
   * The content type of the secret.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  attributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate.
   */
  readonly kid?: string;
  /**
   * True if the secret's lifetime is managed by key vault. If this is a secret backing a certificate, then managed will be true.
   */
  readonly managed?: boolean;
}

/**
 * A Deleted Secret consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
 */
export type DeletedSecretBundle = SecretBundle & {
  /**
   * The url of the recovery object, used to identify and recover the deleted secret.
   */
  recoveryId?: string;
  /**
   * The time when the secret is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the secret was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * The secret update parameters.
 */
export interface SecretUpdateParameters {
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The secret list result.
 */
export interface SecretListResult {
  /**
   * A response message containing a list of secrets in the key vault along with a link to the next page of secrets.
   */
  readonly value?: SecretItem[];
  /**
   * The URL to get the next set of secrets.
   */
  readonly nextLink?: string;
}

/**
 * The secret item containing secret metadata.
 */
export interface SecretItem {
  /**
   * Secret identifier.
   */
  id?: string;
  /**
   * The secret management attributes.
   */
  attributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * True if the secret's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.
   */
  readonly managed?: boolean;
}

/**
 * The deleted secret list result
 */
export interface DeletedSecretListResult {
  /**
   * A response message containing a list of the deleted secrets in the vault along with a link to the next page of deleted secrets
   */
  readonly value?: DeletedSecretItem[];
  /**
   * The URL to get the next set of deleted secrets.
   */
  readonly nextLink?: string;
}

/**
 * The deleted secret item containing metadata about the deleted secret.
 */
export type DeletedSecretItem = SecretItem & {
  /**
   * The url of the recovery object, used to identify and recover the deleted secret.
   */
  recoveryId?: string;
  /**
   * The time when the secret is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the secret was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * The backup secret result, containing the backup blob.
 */
export interface BackupSecretResult {
  /**
   * The backup blob containing the backed up secret.
   */
  readonly value?: Uint8Array;
}

/**
 * The secret restore parameters.
 */
export interface SecretRestoreParameters {
  /**
   * The backup blob associated with a secret bundle.
   */
  secretBundleBackup: Uint8Array;
}

/**
 * The storage accounts list result.
 */
export interface StorageListResult {
  /**
   * A response message containing a list of storage accounts in the key vault along with a link to the next page of storage accounts.
   */
  readonly value?: StorageAccountItem[];
  /**
   * The URL to get the next set of storage accounts.
   */
  readonly nextLink?: string;
}

/**
 * The storage account item containing storage account metadata.
 */
export interface StorageAccountItem {
  /**
   * Storage identifier.
   */
  readonly id?: string;
  /**
   * Storage account resource Id.
   */
  readonly resourceId?: string;
  /**
   * The storage account management attributes.
   */
  readonly attributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * The storage account management attributes.
 */
export interface StorageAccountAttributes {
  /**
   * the enabled state of the object.
   */
  enabled?: boolean;
  /**
   * Creation time in UTC.
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   */
  readonly updated?: Date;
  /**
   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.
   */
  readonly recoverableDays?: number;
  /**
   * Reflects the deletion recovery level currently in effect for storage accounts in the current vault. If it contains 'Purgeable' the storage account can be permanently deleted by a privileged user; otherwise, only the system can purge the storage account, at the end of the retention interval.
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * The deleted storage account list result
 */
export interface DeletedStorageListResult {
  /**
   * A response message containing a list of the deleted storage accounts in the vault along with a link to the next page of deleted storage accounts
   */
  readonly value?: DeletedStorageAccountItem[];
  /**
   * The URL to get the next set of deleted storage accounts.
   */
  readonly nextLink?: string;
}

/**
 * The deleted storage account item containing metadata about the deleted storage account.
 */
export type DeletedStorageAccountItem = StorageAccountItem & {
  /**
   * The url of the recovery object, used to identify and recover the deleted storage account.
   */
  recoveryId?: string;
  /**
   * The time when the storage account is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the storage account was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * A Storage account bundle consists of key vault storage account details plus its attributes.
 */
export interface StorageBundle {
  /**
   * The storage account id.
   */
  readonly id?: string;
  /**
   * The storage account resource id.
   */
  readonly resourceId?: string;
  /**
   * The current active storage account key name.
   */
  readonly activeKeyName?: string;
  /**
   * whether keyvault should manage the storage account for the user.
   */
  readonly autoRegenerateKey?: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
   */
  readonly regenerationPeriod?: string;
  /**
   * The storage account attributes.
   */
  readonly attributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * A deleted storage account bundle consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
 */
export type DeletedStorageBundle = StorageBundle & {
  /**
   * The url of the recovery object, used to identify and recover the deleted storage account.
   */
  recoveryId?: string;
  /**
   * The time when the storage account is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the storage account was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * The backup storage result, containing the backup blob.
 */
export interface BackupStorageResult {
  /**
   * The backup blob containing the backed up storage account.
   */
  readonly value?: Uint8Array;
}

/**
 * The secret restore parameters.
 */
export interface StorageRestoreParameters {
  /**
   * The backup blob associated with a storage account.
   */
  storageBundleBackup: Uint8Array;
}

/**
 * The storage account create parameters.
 */
export interface StorageAccountCreateParameters {
  /**
   * Storage account resource id.
   */
  resourceId: string;
  /**
   * Current active storage account key name.
   */
  activeKeyName: string;
  /**
   * whether keyvault should manage the storage account for the user.
   */
  autoRegenerateKey: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
   */
  regenerationPeriod?: string;
  /**
   * The attributes of the storage account.
   */
  storageAccountAttributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The storage account update parameters.
 */
export interface StorageAccountUpdateParameters {
  /**
   * The current active storage account key name.
   */
  activeKeyName?: string;
  /**
   * whether keyvault should manage the storage account for the user.
   */
  autoRegenerateKey?: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
   */
  regenerationPeriod?: string;
  /**
   * The attributes of the storage account.
   */
  storageAccountAttributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The storage account key regenerate parameters.
 */
export interface StorageAccountRegenerteKeyParameters {
  /**
   * The storage account key name.
   */
  keyName: string;
}

/**
 * The storage account SAS definition list result.
 */
export interface SasDefinitionListResult {
  /**
   * A response message containing a list of SAS definitions along with a link to the next page of SAS definitions.
   */
  readonly value?: SasDefinitionItem[];
  /**
   * The URL to get the next set of SAS definitions.
   */
  readonly nextLink?: string;
}

/**
 * The SAS definition item containing storage SAS definition metadata.
 */
export interface SasDefinitionItem {
  /**
   * The storage SAS identifier.
   */
  readonly id?: string;
  /**
   * The storage account SAS definition secret id.
   */
  readonly secretId?: string;
  /**
   * The SAS definition management attributes.
   */
  readonly attributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * The SAS definition management attributes.
 */
export interface SasDefinitionAttributes {
  /**
   * the enabled state of the object.
   */
  enabled?: boolean;
  /**
   * Creation time in UTC.
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   */
  readonly updated?: Date;
  /**
   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.
   */
  readonly recoverableDays?: number;
  /**
   * Reflects the deletion recovery level currently in effect for SAS definitions in the current vault. If it contains 'Purgeable' the SAS definition can be permanently deleted by a privileged user; otherwise, only the system can purge the SAS definition, at the end of the retention interval.
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * The deleted SAS definition list result
 */
export interface DeletedSasDefinitionListResult {
  /**
   * A response message containing a list of the deleted SAS definitions in the vault along with a link to the next page of deleted sas definitions
   */
  readonly value?: DeletedSasDefinitionItem[];
  /**
   * The URL to get the next set of deleted SAS definitions.
   */
  readonly nextLink?: string;
}

/**
 * The deleted SAS definition item containing metadata about the deleted SAS definition.
 */
export type DeletedSasDefinitionItem = SasDefinitionItem & {
  /**
   * The url of the recovery object, used to identify and recover the deleted SAS definition.
   */
  recoveryId?: string;
  /**
   * The time when the SAS definition is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the SAS definition was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * A SAS definition bundle consists of key vault SAS definition details plus its attributes.
 */
export interface SasDefinitionBundle {
  /**
   * The SAS definition id.
   */
  readonly id?: string;
  /**
   * Storage account SAS definition secret id.
   */
  readonly secretId?: string;
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
   */
  readonly templateUri?: string;
  /**
   * The type of SAS token the SAS definition will create.
   */
  readonly sasType?: SasTokenType;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
   */
  readonly validityPeriod?: string;
  /**
   * The SAS definition attributes.
   */
  readonly attributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * A deleted SAS definition bundle consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
 */
export type DeletedSasDefinitionBundle = SasDefinitionBundle & {
  /**
   * The url of the recovery object, used to identify and recover the deleted SAS definition.
   */
  recoveryId?: string;
  /**
   * The time when the SAS definition is scheduled to be purged, in UTC
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the SAS definition was deleted, in UTC
   */
  readonly deletedDate?: Date;
};

/**
 * The SAS definition create parameters.
 */
export interface SasDefinitionCreateParameters {
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
   */
  templateUri: string;
  /**
   * The type of SAS token the SAS definition will create.
   */
  sasType: SasTokenType;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
   */
  validityPeriod: string;
  /**
   * The attributes of the SAS definition.
   */
  sasDefinitionAttributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The SAS definition update parameters.
 */
export interface SasDefinitionUpdateParameters {
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
   */
  templateUri?: string;
  /**
   * The type of SAS token the SAS definition will create.
   */
  sasType?: SasTokenType;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
   */
  validityPeriod?: string;
  /**
   * The attributes of the SAS definition.
   */
  sasDefinitionAttributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

export interface SASTokenParameter {
  /**
   * Azure Blob storage container Uri
   */
  storageResourceUri: string;
  /**
   * The SAS token pointing to an Azure Blob storage container
   */
  token: string;
}

/**
 * Full backup operation
 */
export interface FullBackupOperation {
  /**
   * Status of the backup operation.
   */
  status?: string;
  /**
   * The status details of backup operation.
   */
  statusDetails?: string;
  /**
   * Error encountered, if any, during the full backup operation.
   */
  error?: ErrorModel;
  /**
   * The start time of the backup operation in UTC
   */
  startTime?: Date;
  /**
   * The end time of the backup operation in UTC
   */
  endTime?: Date;
  /**
   * Identifier for the full backup operation.
   */
  jobId?: string;
  /**
   * The Azure blob storage container Uri which contains the full backup
   */
  azureStorageBlobContainerUri?: string;
}

export interface RestoreOperationParameters {
  sasTokenParameters: SASTokenParameter;
  /**
   * The Folder name of the blob where the previous successful full backup was stored
   */
  folderToRestore: string;
}

/**
 * Full restore operation
 */
export interface FullRestoreOperation {
  /**
   * Status of the restore operation.
   */
  status?: string;
  /**
   * The status details of restore operation.
   */
  statusDetails?: string;
  /**
   * Error encountered, if any, during the full restore operation.
   */
  error?: ErrorModel;
  /**
   * Identifier for the full restore operation.
   */
  jobId?: string;
  /**
   * The start time of the restore operation
   */
  startTime?: Date;
  /**
   * The end time of the restore operation
   */
  endTime?: Date;
}

/**
 * The pending certificate signing request result.
 */
export interface PendingCertificateSigningRequestResult {
  /**
   * The pending certificate signing request as Base64 encoded string.
   */
  readonly value?: string;
}

/**
 * Role Assignments filter
 */
export interface RoleAssignmentFilter {
  /**
   * Returns role assignment of the specific principal.
   */
  principalId?: string;
}

/**
 * Role Definitions filter
 */
export interface RoleDefinitionFilter {
  /**
   * Returns role definition with the specific name.
   */
  roleName?: string;
}

/**
 * Defines headers for keyVaultClient_fullBackup operation.
 */
export interface KeyVaultClientFullBackupHeaders {
  retryAfter?: number;
  azureAsyncOperation?: string;
}

/**
 * Defines headers for keyVaultClient_fullRestoreOperation operation.
 */
export interface KeyVaultClientFullRestoreOperationHeaders {
  retryAfter?: number;
  azureAsyncOperation?: string;
}

/**
 * Defines values for DeletionRecoveryLevel.
 */
export type DeletionRecoveryLevel =
  | "Purgeable"
  | "Recoverable+Purgeable"
  | "Recoverable"
  | "Recoverable+ProtectedSubscription"
  | "CustomizedRecoverable+Purgeable"
  | "CustomizedRecoverable"
  | "CustomizedRecoverable+ProtectedSubscription";
/**
 * Defines values for JsonWebKeyType.
 */
export type JsonWebKeyType =
  | "EC"
  | "EC-HSM"
  | "RSA"
  | "RSA-HSM"
  | "oct"
  | "oct-HSM";
/**
 * Defines values for JsonWebKeyCurveName.
 */
export type JsonWebKeyCurveName = "P-256" | "P-384" | "P-521" | "P-256K";
/**
 * Defines values for KeyUsageType.
 */
export type KeyUsageType =
  | "digitalSignature"
  | "nonRepudiation"
  | "keyEncipherment"
  | "dataEncipherment"
  | "keyAgreement"
  | "keyCertSign"
  | "cRLSign"
  | "encipherOnly"
  | "decipherOnly";
/**
 * Defines values for JsonWebKeyOperation.
 */
export type JsonWebKeyOperation =
  | "encrypt"
  | "decrypt"
  | "sign"
  | "verify"
  | "wrapKey"
  | "unwrapKey"
  | "import";
/**
 * Defines values for JsonWebKeyEncryptionAlgorithm.
 */
export type JsonWebKeyEncryptionAlgorithm =
  | "RSA-OAEP"
  | "RSA-OAEP-256"
  | "RSA1_5"
  | "A128GCM"
  | "A192GCM"
  | "A256GCM"
  | "A128KW"
  | "A192KW"
  | "A256KW";
/**
 * Defines values for JsonWebKeySignatureAlgorithm.
 */
export type JsonWebKeySignatureAlgorithm =
  | "PS256"
  | "PS384"
  | "PS512"
  | "RS256"
  | "RS384"
  | "RS512"
  | "RSNULL"
  | "ES256"
  | "ES384"
  | "ES512"
  | "ES256K";
/**
 * Defines values for SasTokenType.
 */
export type SasTokenType = "account" | "service";
/**
 * Defines values for ActionType.
 */
export type ActionType = "EmailContacts" | "AutoRenew";

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetCertificatesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
  /**
   * Specifies whether to include certificates which are not completely provisioned.
   */
  includePending?: boolean;
}

/**
 * Contains response data for the getCertificates operation.
 */
export type KeyVaultClientGetCertificatesResponse = CertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateListResult;
  };
};

/**
 * Contains response data for the deleteCertificate operation.
 */
export type KeyVaultClientDeleteCertificateResponse = DeletedCertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedCertificateBundle;
  };
};

/**
 * Contains response data for the setCertificateContacts operation.
 */
export type KeyVaultClientSetCertificateContactsResponse = Contacts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Contacts;
  };
};

/**
 * Contains response data for the getCertificateContacts operation.
 */
export type KeyVaultClientGetCertificateContactsResponse = Contacts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Contacts;
  };
};

/**
 * Contains response data for the deleteCertificateContacts operation.
 */
export type KeyVaultClientDeleteCertificateContactsResponse = Contacts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Contacts;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetCertificateIssuersOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getCertificateIssuers operation.
 */
export type KeyVaultClientGetCertificateIssuersResponse = CertificateIssuerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateIssuerListResult;
  };
};

/**
 * Contains response data for the setCertificateIssuer operation.
 */
export type KeyVaultClientSetCertificateIssuerResponse = IssuerBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssuerBundle;
  };
};

/**
 * Contains response data for the updateCertificateIssuer operation.
 */
export type KeyVaultClientUpdateCertificateIssuerResponse = IssuerBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssuerBundle;
  };
};

/**
 * Contains response data for the getCertificateIssuer operation.
 */
export type KeyVaultClientGetCertificateIssuerResponse = IssuerBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssuerBundle;
  };
};

/**
 * Contains response data for the deleteCertificateIssuer operation.
 */
export type KeyVaultClientDeleteCertificateIssuerResponse = IssuerBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssuerBundle;
  };
};

/**
 * Contains response data for the createCertificate operation.
 */
export type KeyVaultClientCreateCertificateResponse = CertificateOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOperation;
  };
};

/**
 * Contains response data for the importCertificate operation.
 */
export type KeyVaultClientImportCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetCertificateVersionsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getCertificateVersions operation.
 */
export type KeyVaultClientGetCertificateVersionsResponse = CertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateListResult;
  };
};

/**
 * Contains response data for the getCertificatePolicy operation.
 */
export type KeyVaultClientGetCertificatePolicyResponse = CertificatePolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificatePolicy;
  };
};

/**
 * Contains response data for the updateCertificatePolicy operation.
 */
export type KeyVaultClientUpdateCertificatePolicyResponse = CertificatePolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificatePolicy;
  };
};

/**
 * Contains response data for the updateCertificate operation.
 */
export type KeyVaultClientUpdateCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the getCertificate operation.
 */
export type KeyVaultClientGetCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the updateCertificateOperation operation.
 */
export type KeyVaultClientUpdateCertificateOperationResponse = CertificateOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOperation;
  };
};

/**
 * Contains response data for the getCertificateOperation operation.
 */
export type KeyVaultClientGetCertificateOperationResponse = CertificateOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOperation;
  };
};

/**
 * Contains response data for the deleteCertificateOperation operation.
 */
export type KeyVaultClientDeleteCertificateOperationResponse = CertificateOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOperation;
  };
};

/**
 * Contains response data for the mergeCertificate operation.
 */
export type KeyVaultClientMergeCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the backupCertificate operation.
 */
export type KeyVaultClientBackupCertificateResponse = BackupCertificateResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupCertificateResult;
  };
};

/**
 * Contains response data for the restoreCertificate operation.
 */
export type KeyVaultClientRestoreCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedCertificatesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
  /**
   * Specifies whether to include certificates which are not completely provisioned.
   */
  includePending?: boolean;
}

/**
 * Contains response data for the getDeletedCertificates operation.
 */
export type KeyVaultClientGetDeletedCertificatesResponse = DeletedCertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedCertificateListResult;
  };
};

/**
 * Contains response data for the getDeletedCertificate operation.
 */
export type KeyVaultClientGetDeletedCertificateResponse = DeletedCertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedCertificateBundle;
  };
};

/**
 * Contains response data for the recoverDeletedCertificate operation.
 */
export type KeyVaultClientRecoverDeletedCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the createKey operation.
 */
export type KeyVaultClientCreateKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the importKey operation.
 */
export type KeyVaultClientImportKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the deleteKey operation.
 */
export type KeyVaultClientDeleteKeyResponse = DeletedKeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedKeyBundle;
  };
};

/**
 * Contains response data for the updateKey operation.
 */
export type KeyVaultClientUpdateKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the getKey operation.
 */
export type KeyVaultClientGetKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetKeyVersionsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getKeyVersions operation.
 */
export type KeyVaultClientGetKeyVersionsResponse = KeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetKeysOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getKeys operation.
 */
export type KeyVaultClientGetKeysResponse = KeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyListResult;
  };
};

/**
 * Contains response data for the backupKey operation.
 */
export type KeyVaultClientBackupKeyResponse = BackupKeyResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupKeyResult;
  };
};

/**
 * Contains response data for the restoreKey operation.
 */
export type KeyVaultClientRestoreKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the encrypt operation.
 */
export type KeyVaultClientEncryptResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the decrypt operation.
 */
export type KeyVaultClientDecryptResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the sign operation.
 */
export type KeyVaultClientSignResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the verify operation.
 */
export type KeyVaultClientVerifyResponse = KeyVerifyResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyVerifyResult;
  };
};

/**
 * Contains response data for the wrapKey operation.
 */
export type KeyVaultClientWrapKeyResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the unwrapKey operation.
 */
export type KeyVaultClientUnwrapKeyResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedKeysOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getDeletedKeys operation.
 */
export type KeyVaultClientGetDeletedKeysResponse = DeletedKeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedKeyListResult;
  };
};

/**
 * Contains response data for the getDeletedKey operation.
 */
export type KeyVaultClientGetDeletedKeyResponse = DeletedKeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedKeyBundle;
  };
};

/**
 * Contains response data for the recoverDeletedKey operation.
 */
export type KeyVaultClientRecoverDeletedKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the setSecret operation.
 */
export type KeyVaultClientSetSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Contains response data for the deleteSecret operation.
 */
export type KeyVaultClientDeleteSecretResponse = DeletedSecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSecretBundle;
  };
};

/**
 * Contains response data for the updateSecret operation.
 */
export type KeyVaultClientUpdateSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Contains response data for the getSecret operation.
 */
export type KeyVaultClientGetSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetSecretsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getSecrets operation.
 */
export type KeyVaultClientGetSecretsResponse = SecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetSecretVersionsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getSecretVersions operation.
 */
export type KeyVaultClientGetSecretVersionsResponse = SecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedSecretsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getDeletedSecrets operation.
 */
export type KeyVaultClientGetDeletedSecretsResponse = DeletedSecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSecretListResult;
  };
};

/**
 * Contains response data for the getDeletedSecret operation.
 */
export type KeyVaultClientGetDeletedSecretResponse = DeletedSecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSecretBundle;
  };
};

/**
 * Contains response data for the recoverDeletedSecret operation.
 */
export type KeyVaultClientRecoverDeletedSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Contains response data for the backupSecret operation.
 */
export type KeyVaultClientBackupSecretResponse = BackupSecretResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupSecretResult;
  };
};

/**
 * Contains response data for the restoreSecret operation.
 */
export type KeyVaultClientRestoreSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetStorageAccountsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getStorageAccounts operation.
 */
export type KeyVaultClientGetStorageAccountsResponse = StorageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedStorageAccountsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getDeletedStorageAccounts operation.
 */
export type KeyVaultClientGetDeletedStorageAccountsResponse = DeletedStorageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedStorageListResult;
  };
};

/**
 * Contains response data for the getDeletedStorageAccount operation.
 */
export type KeyVaultClientGetDeletedStorageAccountResponse = DeletedStorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedStorageBundle;
  };
};

/**
 * Contains response data for the recoverDeletedStorageAccount operation.
 */
export type KeyVaultClientRecoverDeletedStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the backupStorageAccount operation.
 */
export type KeyVaultClientBackupStorageAccountResponse = BackupStorageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupStorageResult;
  };
};

/**
 * Contains response data for the restoreStorageAccount operation.
 */
export type KeyVaultClientRestoreStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the deleteStorageAccount operation.
 */
export type KeyVaultClientDeleteStorageAccountResponse = DeletedStorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedStorageBundle;
  };
};

/**
 * Contains response data for the getStorageAccount operation.
 */
export type KeyVaultClientGetStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the setStorageAccount operation.
 */
export type KeyVaultClientSetStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the updateStorageAccount operation.
 */
export type KeyVaultClientUpdateStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the regenerateStorageAccountKey operation.
 */
export type KeyVaultClientRegenerateStorageAccountKeyResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetSasDefinitionsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getSasDefinitions operation.
 */
export type KeyVaultClientGetSasDefinitionsResponse = SasDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedSasDefinitionsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getDeletedSasDefinitions operation.
 */
export type KeyVaultClientGetDeletedSasDefinitionsResponse = DeletedSasDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSasDefinitionListResult;
  };
};

/**
 * Contains response data for the getDeletedSasDefinition operation.
 */
export type KeyVaultClientGetDeletedSasDefinitionResponse = DeletedSasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSasDefinitionBundle;
  };
};

/**
 * Contains response data for the recoverDeletedSasDefinition operation.
 */
export type KeyVaultClientRecoverDeletedSasDefinitionResponse = SasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionBundle;
  };
};

/**
 * Contains response data for the deleteSasDefinition operation.
 */
export type KeyVaultClientDeleteSasDefinitionResponse = DeletedSasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSasDefinitionBundle;
  };
};

/**
 * Contains response data for the getSasDefinition operation.
 */
export type KeyVaultClientGetSasDefinitionResponse = SasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionBundle;
  };
};

/**
 * Contains response data for the setSasDefinition operation.
 */
export type KeyVaultClientSetSasDefinitionResponse = SasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionBundle;
  };
};

/**
 * Contains response data for the updateSasDefinition operation.
 */
export type KeyVaultClientUpdateSasDefinitionResponse = SasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionBundle;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientFullBackupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Azure blob shared access signature token pointing to a valid Azure blob container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the time of making this call
   */
  azureStorageBlobContainerUri?: SASTokenParameter;
}

/**
 * Contains response data for the fullBackup operation.
 */
export type KeyVaultClientFullBackupResponse = KeyVaultClientFullBackupHeaders &
  FullBackupOperation & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FullBackupOperation;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: KeyVaultClientFullBackupHeaders;
    };
  };

/**
 * Contains response data for the fullBackupStatus operation.
 */
export type KeyVaultClientFullBackupStatusResponse = FullBackupOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FullBackupOperation;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientFullRestoreOperationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The Azure blob SAS token pointing to a folder where the previous successful full backup was stored
   */
  restoreBlobDetails?: RestoreOperationParameters;
}

/**
 * Contains response data for the fullRestoreOperation operation.
 */
export type KeyVaultClientFullRestoreOperationResponse = KeyVaultClientFullRestoreOperationHeaders &
  FullRestoreOperation & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FullRestoreOperation;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: KeyVaultClientFullRestoreOperationHeaders;
    };
  };

/**
 * Contains response data for the fullRestoreStatus operation.
 */
export type KeyVaultClientFullRestoreStatusResponse = FullRestoreOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FullRestoreOperation;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetCertificatesNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
  /**
   * Specifies whether to include certificates which are not completely provisioned.
   */
  includePending?: boolean;
}

/**
 * Contains response data for the getCertificatesNext operation.
 */
export type KeyVaultClientGetCertificatesNextResponse = CertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetCertificateIssuersNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getCertificateIssuersNext operation.
 */
export type KeyVaultClientGetCertificateIssuersNextResponse = CertificateIssuerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateIssuerListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetCertificateVersionsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getCertificateVersionsNext operation.
 */
export type KeyVaultClientGetCertificateVersionsNextResponse = CertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedCertificatesNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
  /**
   * Specifies whether to include certificates which are not completely provisioned.
   */
  includePending?: boolean;
}

/**
 * Contains response data for the getDeletedCertificatesNext operation.
 */
export type KeyVaultClientGetDeletedCertificatesNextResponse = DeletedCertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedCertificateListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetKeyVersionsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getKeyVersionsNext operation.
 */
export type KeyVaultClientGetKeyVersionsNextResponse = KeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetKeysNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getKeysNext operation.
 */
export type KeyVaultClientGetKeysNextResponse = KeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedKeysNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getDeletedKeysNext operation.
 */
export type KeyVaultClientGetDeletedKeysNextResponse = DeletedKeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedKeyListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetSecretsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getSecretsNext operation.
 */
export type KeyVaultClientGetSecretsNextResponse = SecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetSecretVersionsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getSecretVersionsNext operation.
 */
export type KeyVaultClientGetSecretVersionsNextResponse = SecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedSecretsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getDeletedSecretsNext operation.
 */
export type KeyVaultClientGetDeletedSecretsNextResponse = DeletedSecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSecretListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetStorageAccountsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getStorageAccountsNext operation.
 */
export type KeyVaultClientGetStorageAccountsNextResponse = StorageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedStorageAccountsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getDeletedStorageAccountsNext operation.
 */
export type KeyVaultClientGetDeletedStorageAccountsNextResponse = DeletedStorageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedStorageListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetSasDefinitionsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getSasDefinitionsNext operation.
 */
export type KeyVaultClientGetSasDefinitionsNextResponse = SasDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientGetDeletedSasDefinitionsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to 25 results.
   */
  maxresults?: number;
}

/**
 * Contains response data for the getDeletedSasDefinitionsNext operation.
 */
export type KeyVaultClientGetDeletedSasDefinitionsNextResponse = DeletedSasDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSasDefinitionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface RoleDefinitionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type RoleDefinitionsListResponse = RoleDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleDefinitionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface RoleDefinitionsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type RoleDefinitionsListNextResponse = RoleDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleDefinitionListResult;
  };
};

/**
 * Contains response data for the delete operation.
 */
export type RoleAssignmentsDeleteResponse = RoleAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleAssignment;
  };
};

/**
 * Contains response data for the create operation.
 */
export type RoleAssignmentsCreateResponse = RoleAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleAssignment;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RoleAssignmentsGetResponse = RoleAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleAssignment;
  };
};

/**
 * Optional parameters.
 */
export interface RoleAssignmentsListForScopeOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
   */
  filter?: string;
}

/**
 * Contains response data for the listForScope operation.
 */
export type RoleAssignmentsListForScopeResponse = RoleAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleAssignmentListResult;
  };
};

/**
 * Optional parameters.
 */
export interface RoleAssignmentsListForScopeNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
   */
  filter?: string;
}

/**
 * Contains response data for the listForScopeNext operation.
 */
export type RoleAssignmentsListForScopeNextResponse = RoleAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleAssignmentListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KeyVaultClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
