/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { KeyVaultClientContext } from "./keyVaultClientContext";
import {
  KeyVaultClientGetCertificatesOptionalParams,
  KeyVaultClientGetCertificatesResponse,
  KeyVaultClientDeleteCertificateResponse,
  Contacts,
  KeyVaultClientSetCertificateContactsResponse,
  KeyVaultClientGetCertificateContactsResponse,
  KeyVaultClientDeleteCertificateContactsResponse,
  KeyVaultClientGetCertificateIssuersOptionalParams,
  KeyVaultClientGetCertificateIssuersResponse,
  CertificateIssuerSetParameters,
  KeyVaultClientSetCertificateIssuerResponse,
  CertificateIssuerUpdateParameters,
  KeyVaultClientUpdateCertificateIssuerResponse,
  KeyVaultClientGetCertificateIssuerResponse,
  KeyVaultClientDeleteCertificateIssuerResponse,
  CertificateCreateParameters,
  KeyVaultClientCreateCertificateResponse,
  CertificateImportParameters,
  KeyVaultClientImportCertificateResponse,
  KeyVaultClientGetCertificateVersionsOptionalParams,
  KeyVaultClientGetCertificateVersionsResponse,
  KeyVaultClientGetCertificatePolicyResponse,
  CertificatePolicy,
  KeyVaultClientUpdateCertificatePolicyResponse,
  CertificateUpdateParameters,
  KeyVaultClientUpdateCertificateResponse,
  KeyVaultClientGetCertificateResponse,
  CertificateOperationUpdateParameter,
  KeyVaultClientUpdateCertificateOperationResponse,
  KeyVaultClientGetCertificateOperationResponse,
  KeyVaultClientDeleteCertificateOperationResponse,
  CertificateMergeParameters,
  KeyVaultClientMergeCertificateResponse,
  KeyVaultClientBackupCertificateResponse,
  CertificateRestoreParameters,
  KeyVaultClientRestoreCertificateResponse,
  KeyVaultClientGetDeletedCertificatesOptionalParams,
  KeyVaultClientGetDeletedCertificatesResponse,
  KeyVaultClientGetDeletedCertificateResponse,
  KeyVaultClientRecoverDeletedCertificateResponse,
  KeyCreateParameters,
  KeyVaultClientCreateKeyResponse,
  KeyImportParameters,
  KeyVaultClientImportKeyResponse,
  KeyVaultClientDeleteKeyResponse,
  KeyUpdateParameters,
  KeyVaultClientUpdateKeyResponse,
  KeyVaultClientGetKeyResponse,
  KeyVaultClientGetKeyVersionsOptionalParams,
  KeyVaultClientGetKeyVersionsResponse,
  KeyVaultClientGetKeysOptionalParams,
  KeyVaultClientGetKeysResponse,
  KeyVaultClientBackupKeyResponse,
  KeyRestoreParameters,
  KeyVaultClientRestoreKeyResponse,
  KeyOperationsParameters,
  KeyVaultClientEncryptResponse,
  KeyVaultClientDecryptResponse,
  KeySignParameters,
  KeyVaultClientSignResponse,
  KeyVerifyParameters,
  KeyVaultClientVerifyResponse,
  KeyVaultClientWrapKeyResponse,
  KeyVaultClientUnwrapKeyResponse,
  KeyVaultClientGetDeletedKeysOptionalParams,
  KeyVaultClientGetDeletedKeysResponse,
  KeyVaultClientGetDeletedKeyResponse,
  KeyVaultClientRecoverDeletedKeyResponse,
  SecretSetParameters,
  KeyVaultClientSetSecretResponse,
  KeyVaultClientDeleteSecretResponse,
  SecretUpdateParameters,
  KeyVaultClientUpdateSecretResponse,
  KeyVaultClientGetSecretResponse,
  KeyVaultClientGetSecretsOptionalParams,
  KeyVaultClientGetSecretsResponse,
  KeyVaultClientGetSecretVersionsOptionalParams,
  KeyVaultClientGetSecretVersionsResponse,
  KeyVaultClientGetDeletedSecretsOptionalParams,
  KeyVaultClientGetDeletedSecretsResponse,
  KeyVaultClientGetDeletedSecretResponse,
  KeyVaultClientRecoverDeletedSecretResponse,
  KeyVaultClientBackupSecretResponse,
  SecretRestoreParameters,
  KeyVaultClientRestoreSecretResponse,
  KeyVaultClientGetStorageAccountsOptionalParams,
  KeyVaultClientGetStorageAccountsResponse,
  KeyVaultClientGetDeletedStorageAccountsOptionalParams,
  KeyVaultClientGetDeletedStorageAccountsResponse,
  KeyVaultClientGetDeletedStorageAccountResponse,
  KeyVaultClientRecoverDeletedStorageAccountResponse,
  KeyVaultClientBackupStorageAccountResponse,
  StorageRestoreParameters,
  KeyVaultClientRestoreStorageAccountResponse,
  KeyVaultClientDeleteStorageAccountResponse,
  KeyVaultClientGetStorageAccountResponse,
  StorageAccountCreateParameters,
  KeyVaultClientSetStorageAccountResponse,
  StorageAccountUpdateParameters,
  KeyVaultClientUpdateStorageAccountResponse,
  StorageAccountRegenerteKeyParameters,
  KeyVaultClientRegenerateStorageAccountKeyResponse,
  KeyVaultClientGetSasDefinitionsOptionalParams,
  KeyVaultClientGetSasDefinitionsResponse,
  KeyVaultClientGetDeletedSasDefinitionsOptionalParams,
  KeyVaultClientGetDeletedSasDefinitionsResponse,
  KeyVaultClientGetDeletedSasDefinitionResponse,
  KeyVaultClientRecoverDeletedSasDefinitionResponse,
  KeyVaultClientDeleteSasDefinitionResponse,
  KeyVaultClientGetSasDefinitionResponse,
  SasDefinitionCreateParameters,
  KeyVaultClientSetSasDefinitionResponse,
  SasDefinitionUpdateParameters,
  KeyVaultClientUpdateSasDefinitionResponse,
  KeyVaultClientFullBackupOptionalParams,
  KeyVaultClientFullBackupResponse,
  KeyVaultClientFullBackupStatusResponse,
  KeyVaultClientFullRestoreOperationOptionalParams,
  KeyVaultClientFullRestoreOperationResponse,
  KeyVaultClientFullRestoreStatusResponse,
  KeyVaultClientGetCertificatesNextOptionalParams,
  KeyVaultClientGetCertificatesNextResponse,
  KeyVaultClientGetCertificateIssuersNextOptionalParams,
  KeyVaultClientGetCertificateIssuersNextResponse,
  KeyVaultClientGetCertificateVersionsNextOptionalParams,
  KeyVaultClientGetCertificateVersionsNextResponse,
  KeyVaultClientGetDeletedCertificatesNextOptionalParams,
  KeyVaultClientGetDeletedCertificatesNextResponse,
  KeyVaultClientGetKeyVersionsNextOptionalParams,
  KeyVaultClientGetKeyVersionsNextResponse,
  KeyVaultClientGetKeysNextOptionalParams,
  KeyVaultClientGetKeysNextResponse,
  KeyVaultClientGetDeletedKeysNextOptionalParams,
  KeyVaultClientGetDeletedKeysNextResponse,
  KeyVaultClientGetSecretsNextOptionalParams,
  KeyVaultClientGetSecretsNextResponse,
  KeyVaultClientGetSecretVersionsNextOptionalParams,
  KeyVaultClientGetSecretVersionsNextResponse,
  KeyVaultClientGetDeletedSecretsNextOptionalParams,
  KeyVaultClientGetDeletedSecretsNextResponse,
  KeyVaultClientGetStorageAccountsNextOptionalParams,
  KeyVaultClientGetStorageAccountsNextResponse,
  KeyVaultClientGetDeletedStorageAccountsNextOptionalParams,
  KeyVaultClientGetDeletedStorageAccountsNextResponse,
  KeyVaultClientGetSasDefinitionsNextOptionalParams,
  KeyVaultClientGetSasDefinitionsNextResponse,
  KeyVaultClientGetDeletedSasDefinitionsNextOptionalParams,
  KeyVaultClientGetDeletedSasDefinitionsNextResponse
} from "./models";

class KeyVaultClient extends KeyVaultClientContext {
  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    $host: string,
    options?: Models.KeyVaultClientOptionalParams
  ) {
    super(credentials, $host, options);
    this.roleDefinitions = new operations.RoleDefinitions(this);
    this.roleAssignments = new operations.RoleAssignments(this);
  }

  /**
   * The GetCertificates operation returns the set of certificates resources in the specified key vault.
   * This operation requires the certificates/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificates(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetCertificatesOptionalParams
  ): Promise<KeyVaultClientGetCertificatesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getCertificatesOperationSpec
    ) as Promise<KeyVaultClientGetCertificatesResponse>;
  }

  /**
   * Deletes all versions of a certificate object along with its associated policy. Delete certificate
   * cannot be used to remove individual versions of a certificate object. This operation requires the
   * certificates/delete permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  deleteCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      deleteCertificateOperationSpec
    ) as Promise<KeyVaultClientDeleteCertificateResponse>;
  }

  /**
   * Sets the certificate contacts for the specified key vault. This operation requires the
   * certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param contacts The contacts for the key vault certificate.
   * @param options The options parameters.
   */
  setCertificateContacts(
    vaultBaseUrl: string,
    contacts: Contacts,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientSetCertificateContactsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, contacts, options: operationOptions },
      setCertificateContactsOperationSpec
    ) as Promise<KeyVaultClientSetCertificateContactsResponse>;
  }

  /**
   * The GetCertificateContacts operation returns the set of certificate contact resources in the
   * specified key vault. This operation requires the certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificateContacts(
    vaultBaseUrl: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificateContactsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getCertificateContactsOperationSpec
    ) as Promise<KeyVaultClientGetCertificateContactsResponse>;
  }

  /**
   * Deletes the certificate contacts for a specified key vault certificate. This operation requires the
   * certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  deleteCertificateContacts(
    vaultBaseUrl: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteCertificateContactsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      deleteCertificateContactsOperationSpec
    ) as Promise<KeyVaultClientDeleteCertificateContactsResponse>;
  }

  /**
   * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified
   * key vault. This operation requires the certificates/manageissuers/getissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificateIssuers(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetCertificateIssuersOptionalParams
  ): Promise<KeyVaultClientGetCertificateIssuersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getCertificateIssuersOperationSpec
    ) as Promise<KeyVaultClientGetCertificateIssuersResponse>;
  }

  /**
   * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation
   * requires the certificates/setissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameter Certificate issuer set parameter.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  setCertificateIssuer(
    vaultBaseUrl: string,
    parameter: CertificateIssuerSetParameters,
    issuerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientSetCertificateIssuerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameter, issuerName, options: operationOptions },
      setCertificateIssuerOperationSpec
    ) as Promise<KeyVaultClientSetCertificateIssuerResponse>;
  }

  /**
   * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity.
   * This operation requires the certificates/setissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param parameter Certificate issuer update parameter.
   * @param options The options parameters.
   */
  updateCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    parameter: CertificateIssuerUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateCertificateIssuerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, parameter, options: operationOptions },
      updateCertificateIssuerOperationSpec
    ) as Promise<KeyVaultClientUpdateCertificateIssuerResponse>;
  }

  /**
   * The GetCertificateIssuer operation returns the specified certificate issuer resources in the
   * specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  getCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificateIssuerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, options: operationOptions },
      getCertificateIssuerOperationSpec
    ) as Promise<KeyVaultClientGetCertificateIssuerResponse>;
  }

  /**
   * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the
   * vault. This operation requires the certificates/manageissuers/deleteissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  deleteCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteCertificateIssuerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, options: operationOptions },
      deleteCertificateIssuerOperationSpec
    ) as Promise<KeyVaultClientDeleteCertificateIssuerResponse>;
  }

  /**
   * If this is the first version, the certificate resource is created. This operation requires the
   * certificates/create permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters to create a certificate.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  createCertificate(
    vaultBaseUrl: string,
    parameters: CertificateCreateParameters,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientCreateCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, certificateName, options: operationOptions },
      createCertificateOperationSpec
    ) as Promise<KeyVaultClientCreateCertificateResponse>;
  }

  /**
   * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The
   * certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format
   * the PEM file must contain the key as well as x509 certificates. This operation requires the
   * certificates/import permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param parameters The parameters to import the certificate.
   * @param options The options parameters.
   */
  importCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    parameters: CertificateImportParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientImportCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, parameters, options: operationOptions },
      importCertificateOperationSpec
    ) as Promise<KeyVaultClientImportCertificateResponse>;
  }

  /**
   * The GetCertificateVersions operation returns the versions of a certificate in the specified key
   * vault. This operation requires the certificates/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  getCertificateVersions(
    vaultBaseUrl: string,
    certificateName: string,
    options?: KeyVaultClientGetCertificateVersionsOptionalParams
  ): Promise<KeyVaultClientGetCertificateVersionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      getCertificateVersionsOperationSpec
    ) as Promise<KeyVaultClientGetCertificateVersionsResponse>;
  }

  /**
   * The GetCertificatePolicy operation returns the specified certificate policy resources in the
   * specified key vault. This operation requires the certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in a given key vault.
   * @param options The options parameters.
   */
  getCertificatePolicy(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificatePolicyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      getCertificatePolicyOperationSpec
    ) as Promise<KeyVaultClientGetCertificatePolicyResponse>;
  }

  /**
   * Set specified members in the certificate policy. Leave others as null. This operation requires the
   * certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificatePolicy The policy for the certificate.
   * @param certificateName The name of the certificate in the given vault.
   * @param options The options parameters.
   */
  updateCertificatePolicy(
    vaultBaseUrl: string,
    certificatePolicy: CertificatePolicy,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateCertificatePolicyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificatePolicy,
        certificateName,
        options: operationOptions
      },
      updateCertificatePolicyOperationSpec
    ) as Promise<KeyVaultClientUpdateCertificatePolicyResponse>;
  }

  /**
   * The UpdateCertificate operation applies the specified update on the given certificate; the only
   * elements updated are the certificate's attributes. This operation requires the certificates/update
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters for certificate update.
   * @param certificateName The name of the certificate in the given key vault.
   * @param certificateVersion The version of the certificate.
   * @param options The options parameters.
   */
  updateCertificate(
    vaultBaseUrl: string,
    parameters: CertificateUpdateParameters,
    certificateName: string,
    certificateVersion: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        parameters,
        certificateName,
        certificateVersion,
        options: operationOptions
      },
      updateCertificateOperationSpec
    ) as Promise<KeyVaultClientUpdateCertificateResponse>;
  }

  /**
   * Gets information about a specific certificate. This operation requires the certificates/get
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificateVersion The version of the certificate.
   * @param options The options parameters.
   */
  getCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    certificateVersion: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificateVersion,
        options: operationOptions
      },
      getCertificateOperationSpec
    ) as Promise<KeyVaultClientGetCertificateResponse>;
  }

  /**
   * Updates a certificate creation operation that is already in progress. This operation requires the
   * certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param certificateOperation The certificate operation response.
   * @param options The options parameters.
   */
  updateCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    certificateOperation: CertificateOperationUpdateParameter,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateCertificateOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificateOperation,
        options: operationOptions
      },
      updateCertificateOperationOperationSpec
    ) as Promise<KeyVaultClientUpdateCertificateOperationResponse>;
  }

  /**
   * Gets the creation operation associated with a specified certificate. This operation requires the
   * certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  getCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificateOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      getCertificateOperationOperationSpec
    ) as Promise<KeyVaultClientGetCertificateOperationResponse>;
  }

  /**
   * Deletes the creation operation for a specified certificate that is in the process of being created.
   * The certificate is no longer created. This operation requires the certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  deleteCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteCertificateOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      deleteCertificateOperationOperationSpec
    ) as Promise<KeyVaultClientDeleteCertificateOperationResponse>;
  }

  /**
   * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key
   * pair currently available in the service. This operation requires the certificates/create permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param parameters The parameters to merge certificate.
   * @param options The options parameters.
   */
  mergeCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    parameters: CertificateMergeParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientMergeCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, parameters, options: operationOptions },
      mergeCertificateOperationSpec
    ) as Promise<KeyVaultClientMergeCertificateResponse>;
  }

  /**
   * Requests that a backup of the specified certificate be downloaded to the client. All versions of the
   * certificate will be downloaded. This operation requires the certificates/backup permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  backupCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientBackupCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      backupCertificateOperationSpec
    ) as Promise<KeyVaultClientBackupCertificateResponse>;
  }

  /**
   * Restores a backed up certificate, and all its versions, to a vault. This operation requires the
   * certificates/restore permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters to restore the certificate.
   * @param options The options parameters.
   */
  restoreCertificate(
    vaultBaseUrl: string,
    parameters: CertificateRestoreParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRestoreCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, options: operationOptions },
      restoreCertificateOperationSpec
    ) as Promise<KeyVaultClientRestoreCertificateResponse>;
  }

  /**
   * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a
   * deleted state and ready for recovery or purging. This operation includes deletion-specific
   * information. This operation requires the certificates/get/list permission. This operation can only
   * be enabled on soft-delete enabled vaults.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getDeletedCertificates(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetDeletedCertificatesOptionalParams
  ): Promise<KeyVaultClientGetDeletedCertificatesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getDeletedCertificatesOperationSpec
    ) as Promise<KeyVaultClientGetDeletedCertificatesResponse>;
  }

  /**
   * The GetDeletedCertificate operation retrieves the deleted certificate information plus its
   * attributes, such as retention interval, scheduled permanent deletion and the current deletion
   * recovery level. This operation requires the certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param options The options parameters.
   */
  getDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetDeletedCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      getDeletedCertificateOperationSpec
    ) as Promise<KeyVaultClientGetDeletedCertificateResponse>;
  }

  /**
   * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified
   * certificate, without possibility for recovery. The operation is not available if the recovery level
   * does not specify 'Purgeable'. This operation requires the certificate/purge permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param options The options parameters.
   */
  purgeDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      purgeDeletedCertificateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation
   * is applicable in vaults enabled for soft-delete, and must be issued during the retention interval
   * (available in the deleted certificate's attributes). This operation requires the
   * certificates/recover permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the deleted certificate
   * @param options The options parameters.
   */
  recoverDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRecoverDeletedCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      recoverDeletedCertificateOperationSpec
    ) as Promise<KeyVaultClientRecoverDeletedCertificateResponse>;
  }

  /**
   * The create key operation can be used to create any key type in Azure Key Vault. If the named key
   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters to create a key.
   * @param keyName The name for the new key. The system will generate the version name for the new key.
   * @param options The options parameters.
   */
  createKey(
    vaultBaseUrl: string,
    parameters: KeyCreateParameters,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientCreateKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, keyName, options: operationOptions },
      createKeyOperationSpec
    ) as Promise<KeyVaultClientCreateKeyResponse>;
  }

  /**
   * The import key operation may be used to import any key type into an Azure Key Vault. If the named
   * key already exists, Azure Key Vault creates a new version of the key. This operation requires the
   * keys/import permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters to import a key.
   * @param keyName Name for the imported key.
   * @param options The options parameters.
   */
  importKey(
    vaultBaseUrl: string,
    parameters: KeyImportParameters,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientImportKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, keyName, options: operationOptions },
      importKeyOperationSpec
    ) as Promise<KeyVaultClientImportKeyResponse>;
  }

  /**
   * The delete key operation cannot be used to remove individual versions of a key. This operation
   * removes the cryptographic material associated with the key, which means the key is not usable for
   * Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to delete.
   * @param options The options parameters.
   */
  deleteKey(
    vaultBaseUrl: string,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, options: operationOptions },
      deleteKeyOperationSpec
    ) as Promise<KeyVaultClientDeleteKeyResponse>;
  }

  /**
   * In order to perform this operation, the key must already exist in the Key Vault. Note: The
   * cryptographic material of a key itself cannot be changed. This operation requires the keys/update
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters of the key to update.
   * @param keyName The name of key to update.
   * @param keyVersion The version of the key to update.
   * @param options The options parameters.
   */
  updateKey(
    vaultBaseUrl: string,
    parameters: KeyUpdateParameters,
    keyName: string,
    keyVersion: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        parameters,
        keyName,
        keyVersion,
        options: operationOptions
      },
      updateKeyOperationSpec
    ) as Promise<KeyVaultClientUpdateKeyResponse>;
  }

  /**
   * The get key operation is applicable to all key types. If the requested key is symmetric, then no key
   * material is released in the response. This operation requires the keys/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to get.
   * @param keyVersion Adding the version parameter retrieves a specific version of a key.
   * @param options The options parameters.
   */
  getKey(
    vaultBaseUrl: string,
    keyName: string,
    keyVersion: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, keyVersion, options: operationOptions },
      getKeyOperationSpec
    ) as Promise<KeyVaultClientGetKeyResponse>;
  }

  /**
   * The full key identifier, attributes, and tags are provided in the response. This operation requires
   * the keys/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param options The options parameters.
   */
  getKeyVersions(
    vaultBaseUrl: string,
    keyName: string,
    options?: KeyVaultClientGetKeyVersionsOptionalParams
  ): Promise<KeyVaultClientGetKeyVersionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, options: operationOptions },
      getKeyVersionsOperationSpec
    ) as Promise<KeyVaultClientGetKeyVersionsResponse>;
  }

  /**
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public
   * part of a stored key. The LIST operation is applicable to all key types, however only the base key
   * identifier, attributes, and tags are provided in the response. Individual versions of a key are not
   * listed in the response. This operation requires the keys/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getKeys(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetKeysOptionalParams
  ): Promise<KeyVaultClientGetKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getKeysOperationSpec
    ) as Promise<KeyVaultClientGetKeysResponse>;
  }

  /**
   * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this
   * operation does NOT return key material in a form that can be used outside the Azure Key Vault
   * system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault
   * itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault
   * instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP
   * operation may be used to export, in protected form, any key type from Azure Key Vault. Individual
   * versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical
   * boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another
   * geographical area. For example, a backup from the US geographical area cannot be restored in an EU
   * geographical area. This operation requires the key/backup permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param options The options parameters.
   */
  backupKey(
    vaultBaseUrl: string,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientBackupKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, options: operationOptions },
      backupKeyOperationSpec
    ) as Promise<KeyVaultClientBackupKeyResponse>;
  }

  /**
   * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,
   * attributes and access control policies. The RESTORE operation may be used to import a previously
   * backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety
   * with the same key name as it had when it was backed up. If the key name is not available in the
   * target Key Vault, the RESTORE operation will be rejected. While the key name is retained during
   * restore, the final key identifier will change if the key is restored to a different vault. Restore
   * will restore all versions and preserve version identifiers. The RESTORE operation is subject to
   * security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as
   * the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation
   * requires the keys/restore permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters to restore the key.
   * @param options The options parameters.
   */
  restoreKey(
    vaultBaseUrl: string,
    parameters: KeyRestoreParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRestoreKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, options: operationOptions },
      restoreKeyOperationSpec
    ) as Promise<KeyVaultClientRestoreKeyResponse>;
  }

  /**
   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored
   * in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size
   * of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT
   * operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection
   * with an asymmetric key can be performed using public portion of the key. This operation is supported
   * for asymmetric keys as a convenience for callers that have a key-reference but do not have access to
   * the public key material. This operation requires the keys/encrypt permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param parameters The parameters for the encryption operation.
   * @param keyVersion The version of the key.
   * @param options The options parameters.
   */
  encrypt(
    vaultBaseUrl: string,
    keyName: string,
    parameters: KeyOperationsParameters,
    keyVersion: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientEncryptResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        parameters,
        keyVersion,
        options: operationOptions
      },
      encryptOperationSpec
    ) as Promise<KeyVaultClientEncryptResponse>;
  }

  /**
   * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and
   * specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of
   * data may be decrypted, the size of this block is dependent on the target key and the algorithm to be
   * used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since
   * it uses the private portion of the key. This operation requires the keys/decrypt permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param parameters The parameters for the decryption operation.
   * @param options The options parameters.
   */
  decrypt(
    vaultBaseUrl: string,
    keyName: string,
    keyVersion: string,
    parameters: KeyOperationsParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDecryptResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        parameters,
        options: operationOptions
      },
      decryptOperationSpec
    ) as Promise<KeyVaultClientDecryptResponse>;
  }

  /**
   * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since
   * this operation uses the private portion of the key. This operation requires the keys/sign
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param parameters The parameters for the signing operation.
   * @param options The options parameters.
   */
  sign(
    vaultBaseUrl: string,
    keyName: string,
    keyVersion: string,
    parameters: KeySignParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientSignResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        parameters,
        options: operationOptions
      },
      signOperationSpec
    ) as Promise<KeyVaultClientSignResponse>;
  }

  /**
   * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not
   * strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be
   * performed using the public portion of the key but this operation is supported as a convenience for
   * callers that only have a key-reference and not the public portion of the key. This operation
   * requires the keys/verify permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param parameters The parameters for verify operations.
   * @param options The options parameters.
   */
  verify(
    vaultBaseUrl: string,
    keyName: string,
    keyVersion: string,
    parameters: KeyVerifyParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientVerifyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        parameters,
        options: operationOptions
      },
      verifyOperationSpec
    ) as Promise<KeyVaultClientVerifyResponse>;
  }

  /**
   * The WRAP operation supports encryption of a symmetric key using a key encryption key that has
   * previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for
   * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed
   * using the public portion of the key. This operation is supported for asymmetric keys as a
   * convenience for callers that have a key-reference but do not have access to the public key material.
   * This operation requires the keys/wrapKey permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param parameters The parameters for wrap operation.
   * @param options The options parameters.
   */
  wrapKey(
    vaultBaseUrl: string,
    keyName: string,
    keyVersion: string,
    parameters: KeyOperationsParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientWrapKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        parameters,
        options: operationOptions
      },
      wrapKeyOperationSpec
    ) as Promise<KeyVaultClientWrapKeyResponse>;
  }

  /**
   * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key.
   * This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and
   * symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This
   * operation requires the keys/unwrapKey permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param parameters The parameters for the key operation.
   * @param options The options parameters.
   */
  unwrapKey(
    vaultBaseUrl: string,
    keyName: string,
    keyVersion: string,
    parameters: KeyOperationsParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUnwrapKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        parameters,
        options: operationOptions
      },
      unwrapKeyOperationSpec
    ) as Promise<KeyVaultClientUnwrapKeyResponse>;
  }

  /**
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public
   * part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys
   * operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on
   * any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation
   * requires the keys/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getDeletedKeys(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetDeletedKeysOptionalParams
  ): Promise<KeyVaultClientGetDeletedKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getDeletedKeysOperationSpec
    ) as Promise<KeyVaultClientGetDeletedKeysResponse>;
  }

  /**
   * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can
   * be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This
   * operation requires the keys/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param options The options parameters.
   */
  getDeletedKey(
    vaultBaseUrl: string,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetDeletedKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, options: operationOptions },
      getDeletedKeyOperationSpec
    ) as Promise<KeyVaultClientGetDeletedKeyResponse>;
  }

  /**
   * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation
   * can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault.
   * This operation requires the keys/purge permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key
   * @param options The options parameters.
   */
  purgeDeletedKey(
    vaultBaseUrl: string,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, options: operationOptions },
      purgeDeletedKeyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It
   * recovers the deleted key back to its latest version under /keys. An attempt to recover an
   * non-deleted key will return an error. Consider this the inverse of the delete operation on
   * soft-delete enabled vaults. This operation requires the keys/recover permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the deleted key.
   * @param options The options parameters.
   */
  recoverDeletedKey(
    vaultBaseUrl: string,
    keyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRecoverDeletedKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, options: operationOptions },
      recoverDeletedKeyOperationSpec
    ) as Promise<KeyVaultClientRecoverDeletedKeyResponse>;
  }

  /**
   *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure
   * Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters for setting the secret.
   * @param secretName The name of the secret.
   * @param options The options parameters.
   */
  setSecret(
    vaultBaseUrl: string,
    parameters: SecretSetParameters,
    secretName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientSetSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, secretName, options: operationOptions },
      setSecretOperationSpec
    ) as Promise<KeyVaultClientSetSecretResponse>;
  }

  /**
   * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an
   * individual version of a secret. This operation requires the secrets/delete permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the secret.
   * @param options The options parameters.
   */
  deleteSecret(
    vaultBaseUrl: string,
    secretName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, secretName, options: operationOptions },
      deleteSecretOperationSpec
    ) as Promise<KeyVaultClientDeleteSecretResponse>;
  }

  /**
   * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are
   * not specified in the request are left unchanged. The value of a secret itself cannot be changed.
   * This operation requires the secrets/set permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the secret.
   * @param parameters The parameters for update secret operation.
   * @param secretVersion The version of the secret.
   * @param options The options parameters.
   */
  updateSecret(
    vaultBaseUrl: string,
    secretName: string,
    parameters: SecretUpdateParameters,
    secretVersion: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        secretName,
        parameters,
        secretVersion,
        options: operationOptions
      },
      updateSecretOperationSpec
    ) as Promise<KeyVaultClientUpdateSecretResponse>;
  }

  /**
   * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the
   * secrets/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the secret.
   * @param secretVersion The version of the secret.
   * @param options The options parameters.
   */
  getSecret(
    vaultBaseUrl: string,
    secretName: string,
    secretVersion: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, secretName, secretVersion, options: operationOptions },
      getSecretOperationSpec
    ) as Promise<KeyVaultClientGetSecretResponse>;
  }

  /**
   * The Get Secrets operation is applicable to the entire vault. However, only the base secret
   * identifier and its attributes are provided in the response. Individual secret versions are not
   * listed in the response. This operation requires the secrets/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getSecrets(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetSecretsOptionalParams
  ): Promise<KeyVaultClientGetSecretsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getSecretsOperationSpec
    ) as Promise<KeyVaultClientGetSecretsResponse>;
  }

  /**
   * The full secret identifier and attributes are provided in the response. No values are returned for
   * the secrets. This operations requires the secrets/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the secret.
   * @param options The options parameters.
   */
  getSecretVersions(
    vaultBaseUrl: string,
    secretName: string,
    options?: KeyVaultClientGetSecretVersionsOptionalParams
  ): Promise<KeyVaultClientGetSecretVersionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, secretName, options: operationOptions },
      getSecretVersionsOperationSpec
    ) as Promise<KeyVaultClientGetSecretVersionsResponse>;
  }

  /**
   * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for
   * soft-delete. This operation requires the secrets/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getDeletedSecrets(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetDeletedSecretsOptionalParams
  ): Promise<KeyVaultClientGetDeletedSecretsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getDeletedSecretsOperationSpec
    ) as Promise<KeyVaultClientGetDeletedSecretsResponse>;
  }

  /**
   * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.
   * This operation requires the secrets/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the secret.
   * @param options The options parameters.
   */
  getDeletedSecret(
    vaultBaseUrl: string,
    secretName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetDeletedSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, secretName, options: operationOptions },
      getDeletedSecretOperationSpec
    ) as Promise<KeyVaultClientGetDeletedSecretResponse>;
  }

  /**
   * The purge deleted secret operation removes the secret permanently, without the possibility of
   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires
   * the secrets/purge permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the secret.
   * @param options The options parameters.
   */
  purgeDeletedSecret(
    vaultBaseUrl: string,
    secretName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, secretName, options: operationOptions },
      purgeDeletedSecretOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Recovers the deleted secret in the specified vault. This operation can only be performed on a
   * soft-delete enabled vault. This operation requires the secrets/recover permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the deleted secret.
   * @param options The options parameters.
   */
  recoverDeletedSecret(
    vaultBaseUrl: string,
    secretName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRecoverDeletedSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, secretName, options: operationOptions },
      recoverDeletedSecretOperationSpec
    ) as Promise<KeyVaultClientRecoverDeletedSecretResponse>;
  }

  /**
   * Requests that a backup of the specified secret be downloaded to the client. All versions of the
   * secret will be downloaded. This operation requires the secrets/backup permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the secret.
   * @param options The options parameters.
   */
  backupSecret(
    vaultBaseUrl: string,
    secretName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientBackupSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, secretName, options: operationOptions },
      backupSecretOperationSpec
    ) as Promise<KeyVaultClientBackupSecretResponse>;
  }

  /**
   * Restores a backed up secret, and all its versions, to a vault. This operation requires the
   * secrets/restore permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters to restore the secret.
   * @param options The options parameters.
   */
  restoreSecret(
    vaultBaseUrl: string,
    parameters: SecretRestoreParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRestoreSecretResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, options: operationOptions },
      restoreSecretOperationSpec
    ) as Promise<KeyVaultClientRestoreSecretResponse>;
  }

  /**
   * List storage accounts managed by the specified key vault. This operation requires the storage/list
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getStorageAccounts(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetStorageAccountsOptionalParams
  ): Promise<KeyVaultClientGetStorageAccountsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getStorageAccountsOperationSpec
    ) as Promise<KeyVaultClientGetStorageAccountsResponse>;
  }

  /**
   * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a
   * vault enabled for soft-delete. This operation requires the storage/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getDeletedStorageAccounts(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetDeletedStorageAccountsOptionalParams
  ): Promise<KeyVaultClientGetDeletedStorageAccountsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getDeletedStorageAccountsOperationSpec
    ) as Promise<KeyVaultClientGetDeletedStorageAccountsResponse>;
  }

  /**
   * The Get Deleted Storage Account operation returns the specified deleted storage account along with
   * its attributes. This operation requires the storage/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param options The options parameters.
   */
  getDeletedStorageAccount(
    vaultBaseUrl: string,
    storageAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetDeletedStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, options: operationOptions },
      getDeletedStorageAccountOperationSpec
    ) as Promise<KeyVaultClientGetDeletedStorageAccountResponse>;
  }

  /**
   * The purge deleted storage account operation removes the secret permanently, without the possibility
   * of recovery. This operation can only be performed on a soft-delete enabled vault. This operation
   * requires the storage/purge permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param options The options parameters.
   */
  purgeDeletedStorageAccount(
    vaultBaseUrl: string,
    storageAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, options: operationOptions },
      purgeDeletedStorageAccountOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Recovers the deleted storage account in the specified vault. This operation can only be performed on
   * a soft-delete enabled vault. This operation requires the storage/recover permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param options The options parameters.
   */
  recoverDeletedStorageAccount(
    vaultBaseUrl: string,
    storageAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRecoverDeletedStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, options: operationOptions },
      recoverDeletedStorageAccountOperationSpec
    ) as Promise<KeyVaultClientRecoverDeletedStorageAccountResponse>;
  }

  /**
   * Requests that a backup of the specified storage account be downloaded to the client. This operation
   * requires the storage/backup permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param options The options parameters.
   */
  backupStorageAccount(
    vaultBaseUrl: string,
    storageAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientBackupStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, options: operationOptions },
      backupStorageAccountOperationSpec
    ) as Promise<KeyVaultClientBackupStorageAccountResponse>;
  }

  /**
   * Restores a backed up storage account to a vault. This operation requires the storage/restore
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters to restore the storage account.
   * @param options The options parameters.
   */
  restoreStorageAccount(
    vaultBaseUrl: string,
    parameters: StorageRestoreParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRestoreStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, options: operationOptions },
      restoreStorageAccountOperationSpec
    ) as Promise<KeyVaultClientRestoreStorageAccountResponse>;
  }

  /**
   * Deletes a storage account. This operation requires the storage/delete permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param options The options parameters.
   */
  deleteStorageAccount(
    vaultBaseUrl: string,
    storageAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, options: operationOptions },
      deleteStorageAccountOperationSpec
    ) as Promise<KeyVaultClientDeleteStorageAccountResponse>;
  }

  /**
   * Gets information about a specified storage account. This operation requires the storage/get
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param options The options parameters.
   */
  getStorageAccount(
    vaultBaseUrl: string,
    storageAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, options: operationOptions },
      getStorageAccountOperationSpec
    ) as Promise<KeyVaultClientGetStorageAccountResponse>;
  }

  /**
   * Creates or updates a new storage account. This operation requires the storage/set permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param parameters The parameters to create a storage account.
   * @param options The options parameters.
   */
  setStorageAccount(
    vaultBaseUrl: string,
    storageAccountName: string,
    parameters: StorageAccountCreateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientSetStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        parameters,
        options: operationOptions
      },
      setStorageAccountOperationSpec
    ) as Promise<KeyVaultClientSetStorageAccountResponse>;
  }

  /**
   * Updates the specified attributes associated with the given storage account. This operation requires
   * the storage/set/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param parameters The parameters to update a storage account.
   * @param options The options parameters.
   */
  updateStorageAccount(
    vaultBaseUrl: string,
    storageAccountName: string,
    parameters: StorageAccountUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        parameters,
        options: operationOptions
      },
      updateStorageAccountOperationSpec
    ) as Promise<KeyVaultClientUpdateStorageAccountResponse>;
  }

  /**
   * Regenerates the specified key value for the given storage account. This operation requires the
   * storage/regeneratekey permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param parameters The parameters to regenerate storage account key.
   * @param options The options parameters.
   */
  regenerateStorageAccountKey(
    vaultBaseUrl: string,
    storageAccountName: string,
    parameters: StorageAccountRegenerteKeyParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRegenerateStorageAccountKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        parameters,
        options: operationOptions
      },
      regenerateStorageAccountKeyOperationSpec
    ) as Promise<KeyVaultClientRegenerateStorageAccountKeyResponse>;
  }

  /**
   * List storage SAS definitions for the given storage account. This operation requires the
   * storage/listsas permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param options The options parameters.
   */
  getSasDefinitions(
    vaultBaseUrl: string,
    storageAccountName: string,
    options?: KeyVaultClientGetSasDefinitionsOptionalParams
  ): Promise<KeyVaultClientGetSasDefinitionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, options: operationOptions },
      getSasDefinitionsOperationSpec
    ) as Promise<KeyVaultClientGetSasDefinitionsResponse>;
  }

  /**
   * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a
   * vault enabled for soft-delete. This operation requires the storage/listsas permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param options The options parameters.
   */
  getDeletedSasDefinitions(
    vaultBaseUrl: string,
    storageAccountName: string,
    options?: KeyVaultClientGetDeletedSasDefinitionsOptionalParams
  ): Promise<KeyVaultClientGetDeletedSasDefinitionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, options: operationOptions },
      getDeletedSasDefinitionsOperationSpec
    ) as Promise<KeyVaultClientGetDeletedSasDefinitionsResponse>;
  }

  /**
   * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its
   * attributes. This operation requires the storage/getsas permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param sasDefinitionName The name of the SAS definition.
   * @param options The options parameters.
   */
  getDeletedSasDefinition(
    vaultBaseUrl: string,
    storageAccountName: string,
    sasDefinitionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetDeletedSasDefinitionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        sasDefinitionName,
        options: operationOptions
      },
      getDeletedSasDefinitionOperationSpec
    ) as Promise<KeyVaultClientGetDeletedSasDefinitionResponse>;
  }

  /**
   * Recovers the deleted SAS definition for the specified storage account. This operation can only be
   * performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param sasDefinitionName The name of the SAS definition.
   * @param options The options parameters.
   */
  recoverDeletedSasDefinition(
    vaultBaseUrl: string,
    storageAccountName: string,
    sasDefinitionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRecoverDeletedSasDefinitionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        sasDefinitionName,
        options: operationOptions
      },
      recoverDeletedSasDefinitionOperationSpec
    ) as Promise<KeyVaultClientRecoverDeletedSasDefinitionResponse>;
  }

  /**
   * Deletes a SAS definition from a specified storage account. This operation requires the
   * storage/deletesas permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param sasDefinitionName The name of the SAS definition.
   * @param options The options parameters.
   */
  deleteSasDefinition(
    vaultBaseUrl: string,
    storageAccountName: string,
    sasDefinitionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteSasDefinitionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        sasDefinitionName,
        options: operationOptions
      },
      deleteSasDefinitionOperationSpec
    ) as Promise<KeyVaultClientDeleteSasDefinitionResponse>;
  }

  /**
   * Gets information about a SAS definition for the specified storage account. This operation requires
   * the storage/getsas permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param sasDefinitionName The name of the SAS definition.
   * @param options The options parameters.
   */
  getSasDefinition(
    vaultBaseUrl: string,
    storageAccountName: string,
    sasDefinitionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetSasDefinitionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        sasDefinitionName,
        options: operationOptions
      },
      getSasDefinitionOperationSpec
    ) as Promise<KeyVaultClientGetSasDefinitionResponse>;
  }

  /**
   * Creates or updates a new SAS definition for the specified storage account. This operation requires
   * the storage/setsas permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param sasDefinitionName The name of the SAS definition.
   * @param parameters The parameters to create a SAS definition.
   * @param options The options parameters.
   */
  setSasDefinition(
    vaultBaseUrl: string,
    storageAccountName: string,
    sasDefinitionName: string,
    parameters: SasDefinitionCreateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientSetSasDefinitionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        sasDefinitionName,
        parameters,
        options: operationOptions
      },
      setSasDefinitionOperationSpec
    ) as Promise<KeyVaultClientSetSasDefinitionResponse>;
  }

  /**
   * Updates the specified attributes associated with the given SAS definition. This operation requires
   * the storage/setsas permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param sasDefinitionName The name of the SAS definition.
   * @param parameters The parameters to update a SAS definition.
   * @param options The options parameters.
   */
  updateSasDefinition(
    vaultBaseUrl: string,
    storageAccountName: string,
    sasDefinitionName: string,
    parameters: SasDefinitionUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateSasDefinitionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        storageAccountName,
        sasDefinitionName,
        parameters,
        options: operationOptions
      },
      updateSasDefinitionOperationSpec
    ) as Promise<KeyVaultClientUpdateSasDefinitionResponse>;
  }

  /**
   * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
   * @param options The options parameters.
   */
  fullBackup(
    options?: KeyVaultClientFullBackupOptionalParams
  ): Promise<KeyVaultClientFullBackupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      fullBackupOperationSpec
    ) as Promise<KeyVaultClientFullBackupResponse>;
  }

  /**
   * Returns the status of full backup operation
   * @param jobId The id returned as part of the backup request
   * @param options The options parameters.
   */
  fullBackupStatus(
    jobId: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientFullBackupStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { jobId, options: operationOptions },
      fullBackupStatusOperationSpec
    ) as Promise<KeyVaultClientFullBackupStatusResponse>;
  }

  /**
   * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage
   * backup folder
   * @param options The options parameters.
   */
  fullRestoreOperation(
    options?: KeyVaultClientFullRestoreOperationOptionalParams
  ): Promise<KeyVaultClientFullRestoreOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      fullRestoreOperationOperationSpec
    ) as Promise<KeyVaultClientFullRestoreOperationResponse>;
  }

  /**
   * Returns the status of full restore operation
   * @param jobId The Job Id returned part of the full restore operation
   * @param options The options parameters.
   */
  fullRestoreStatus(
    jobId: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientFullRestoreStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { jobId, options: operationOptions },
      fullRestoreStatusOperationSpec
    ) as Promise<KeyVaultClientFullRestoreStatusResponse>;
  }

  /**
   * GetCertificatesNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetCertificates method.
   * @param options The options parameters.
   */
  getCertificatesNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetCertificatesNextOptionalParams
  ): Promise<KeyVaultClientGetCertificatesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getCertificatesNextOperationSpec
    ) as Promise<KeyVaultClientGetCertificatesNextResponse>;
  }

  /**
   * GetCertificateIssuersNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetCertificateIssuers method.
   * @param options The options parameters.
   */
  getCertificateIssuersNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetCertificateIssuersNextOptionalParams
  ): Promise<KeyVaultClientGetCertificateIssuersNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getCertificateIssuersNextOperationSpec
    ) as Promise<KeyVaultClientGetCertificateIssuersNextResponse>;
  }

  /**
   * GetCertificateVersionsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param nextLink The nextLink from the previous successful call to the GetCertificateVersions method.
   * @param options The options parameters.
   */
  getCertificateVersionsNext(
    vaultBaseUrl: string,
    certificateName: string,
    nextLink: string,
    options?: KeyVaultClientGetCertificateVersionsNextOptionalParams
  ): Promise<KeyVaultClientGetCertificateVersionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, nextLink, options: operationOptions },
      getCertificateVersionsNextOperationSpec
    ) as Promise<KeyVaultClientGetCertificateVersionsNextResponse>;
  }

  /**
   * GetDeletedCertificatesNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetDeletedCertificates method.
   * @param options The options parameters.
   */
  getDeletedCertificatesNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetDeletedCertificatesNextOptionalParams
  ): Promise<KeyVaultClientGetDeletedCertificatesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getDeletedCertificatesNextOperationSpec
    ) as Promise<KeyVaultClientGetDeletedCertificatesNextResponse>;
  }

  /**
   * GetKeyVersionsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param nextLink The nextLink from the previous successful call to the GetKeyVersions method.
   * @param options The options parameters.
   */
  getKeyVersionsNext(
    vaultBaseUrl: string,
    keyName: string,
    nextLink: string,
    options?: KeyVaultClientGetKeyVersionsNextOptionalParams
  ): Promise<KeyVaultClientGetKeyVersionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, nextLink, options: operationOptions },
      getKeyVersionsNextOperationSpec
    ) as Promise<KeyVaultClientGetKeyVersionsNextResponse>;
  }

  /**
   * GetKeysNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetKeys method.
   * @param options The options parameters.
   */
  getKeysNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetKeysNextOptionalParams
  ): Promise<KeyVaultClientGetKeysNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getKeysNextOperationSpec
    ) as Promise<KeyVaultClientGetKeysNextResponse>;
  }

  /**
   * GetDeletedKeysNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetDeletedKeys method.
   * @param options The options parameters.
   */
  getDeletedKeysNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetDeletedKeysNextOptionalParams
  ): Promise<KeyVaultClientGetDeletedKeysNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getDeletedKeysNextOperationSpec
    ) as Promise<KeyVaultClientGetDeletedKeysNextResponse>;
  }

  /**
   * GetSecretsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetSecrets method.
   * @param options The options parameters.
   */
  getSecretsNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetSecretsNextOptionalParams
  ): Promise<KeyVaultClientGetSecretsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getSecretsNextOperationSpec
    ) as Promise<KeyVaultClientGetSecretsNextResponse>;
  }

  /**
   * GetSecretVersionsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param secretName The name of the secret.
   * @param nextLink The nextLink from the previous successful call to the GetSecretVersions method.
   * @param options The options parameters.
   */
  getSecretVersionsNext(
    vaultBaseUrl: string,
    secretName: string,
    nextLink: string,
    options?: KeyVaultClientGetSecretVersionsNextOptionalParams
  ): Promise<KeyVaultClientGetSecretVersionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, secretName, nextLink, options: operationOptions },
      getSecretVersionsNextOperationSpec
    ) as Promise<KeyVaultClientGetSecretVersionsNextResponse>;
  }

  /**
   * GetDeletedSecretsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetDeletedSecrets method.
   * @param options The options parameters.
   */
  getDeletedSecretsNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetDeletedSecretsNextOptionalParams
  ): Promise<KeyVaultClientGetDeletedSecretsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getDeletedSecretsNextOperationSpec
    ) as Promise<KeyVaultClientGetDeletedSecretsNextResponse>;
  }

  /**
   * GetStorageAccountsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetStorageAccounts method.
   * @param options The options parameters.
   */
  getStorageAccountsNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetStorageAccountsNextOptionalParams
  ): Promise<KeyVaultClientGetStorageAccountsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getStorageAccountsNextOperationSpec
    ) as Promise<KeyVaultClientGetStorageAccountsNextResponse>;
  }

  /**
   * GetDeletedStorageAccountsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetDeletedStorageAccounts
   *                 method.
   * @param options The options parameters.
   */
  getDeletedStorageAccountsNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetDeletedStorageAccountsNextOptionalParams
  ): Promise<KeyVaultClientGetDeletedStorageAccountsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getDeletedStorageAccountsNextOperationSpec
    ) as Promise<KeyVaultClientGetDeletedStorageAccountsNextResponse>;
  }

  /**
   * GetSasDefinitionsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param nextLink The nextLink from the previous successful call to the GetSasDefinitions method.
   * @param options The options parameters.
   */
  getSasDefinitionsNext(
    vaultBaseUrl: string,
    storageAccountName: string,
    nextLink: string,
    options?: KeyVaultClientGetSasDefinitionsNextOptionalParams
  ): Promise<KeyVaultClientGetSasDefinitionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, nextLink, options: operationOptions },
      getSasDefinitionsNextOperationSpec
    ) as Promise<KeyVaultClientGetSasDefinitionsNextResponse>;
  }

  /**
   * GetDeletedSasDefinitionsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param storageAccountName The name of the storage account.
   * @param nextLink The nextLink from the previous successful call to the GetDeletedSasDefinitions
   *                 method.
   * @param options The options parameters.
   */
  getDeletedSasDefinitionsNext(
    vaultBaseUrl: string,
    storageAccountName: string,
    nextLink: string,
    options?: KeyVaultClientGetDeletedSasDefinitionsNextOptionalParams
  ): Promise<KeyVaultClientGetDeletedSasDefinitionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, storageAccountName, nextLink, options: operationOptions },
      getDeletedSasDefinitionsNextOperationSpec
    ) as Promise<KeyVaultClientGetDeletedSasDefinitionsNextResponse>;
  }

  roleDefinitions: operations.RoleDefinitions;
  roleAssignments: operations.RoleAssignments;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getCertificatesOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const deleteCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const setCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.contacts,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  serializer
};
const getCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const deleteCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getCertificateIssuersOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateIssuerListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const setCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameter1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  headerParameters: [Parameters.contentType],
  serializer
};
const getCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  serializer
};
const deleteCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  serializer
};
const createCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/create",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
  headerParameters: [Parameters.contentType],
  serializer
};
const importCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/import",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
  headerParameters: [Parameters.contentType],
  serializer
};
const getCertificateVersionsOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const getCertificatePolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/policy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificatePolicy
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName2],
  serializer
};
const updateCertificatePolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/policy",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificatePolicy
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.certificatePolicy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName3],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/{certificate-version}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName4,
    Parameters.certificateVersion
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/{certificate-version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName3,
    Parameters.certificateVersion
  ],
  serializer
};
const updateCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.certificateOperation,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.contentType],
  serializer
};
const getCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const deleteCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const mergeCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/pending/merge",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.contentType],
  serializer
};
const backupCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupCertificateResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const restoreCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  serializer
};
const getDeletedCertificatesOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedcertificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName5],
  serializer
};
const purgeDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName5],
  serializer
};
const recoverDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}/recover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName6],
  serializer
};
const createKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/create",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],
  headerParameters: [Parameters.contentType],
  serializer
};
const importKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedKeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName2],
  serializer
};
const updateKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/{key-version}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName3,
    Parameters.keyVersion
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/{key-version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName4,
    Parameters.keyVersion1
  ],
  serializer
};
const getKeyVersionsOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName5],
  serializer
};
const getKeysOperationSpec: coreHttp.OperationSpec = {
  path: "/keys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const backupKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupKeyResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName5],
  serializer
};
const restoreKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  serializer
};
const encryptOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/{key-version}/encrypt",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName5,
    Parameters.keyVersion2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const decryptOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/{key-version}/decrypt",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName5,
    Parameters.keyVersion2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const signOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/{key-version}/sign",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName5,
    Parameters.keyVersion2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const verifyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/{key-version}/verify",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyVerifyResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName5,
    Parameters.keyVersion2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const wrapKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/{key-version}/wrapkey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName5,
    Parameters.keyVersion2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const unwrapKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{key-name}/{key-version}/unwrapkey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName5,
    Parameters.keyVersion2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getDeletedKeysOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedkeys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedKeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getDeletedKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedkeys/{key-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedKeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName5],
  serializer
};
const purgeDeletedKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedkeys/{key-name}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName6],
  serializer
};
const recoverDeletedKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedkeys/{key-name}/recover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName7],
  serializer
};
const setSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/secrets/{secret-name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SecretBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/secrets/{secret-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSecretBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
  serializer
};
const updateSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/secrets/{secret-name}/{secret-version}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SecretBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters16,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.secretName1,
    Parameters.secretVersion
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/secrets/{secret-name}/{secret-version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecretBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.secretName1,
    Parameters.secretVersion
  ],
  serializer
};
const getSecretsOperationSpec: coreHttp.OperationSpec = {
  path: "/secrets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecretListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxresults1],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getSecretVersionsOperationSpec: coreHttp.OperationSpec = {
  path: "/secrets/{secret-name}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecretListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxresults1],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
  serializer
};
const getDeletedSecretsOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedsecrets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSecretListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getDeletedSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedsecrets/{secret-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSecretBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
  serializer
};
const purgeDeletedSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedsecrets/{secret-name}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
  serializer
};
const recoverDeletedSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedsecrets/{secret-name}/recover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SecretBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName2],
  serializer
};
const backupSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/secrets/{secret-name}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupSecretResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],
  serializer
};
const restoreSecretOperationSpec: coreHttp.OperationSpec = {
  path: "/secrets/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SecretBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters17,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  serializer
};
const getStorageAccountsOperationSpec: coreHttp.OperationSpec = {
  path: "/storage",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getDeletedStorageAccountsOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedstorage",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedStorageListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedstorage/{storage-account-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedStorageBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  serializer
};
const purgeDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedstorage/{storage-account-name}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  serializer
};
const recoverDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedstorage/{storage-account-name}/recover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StorageBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  serializer
};
const backupStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupStorageResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName1],
  serializer
};
const restoreStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StorageBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters18,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedStorageBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  serializer
};
const getStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  serializer
};
const setStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StorageBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters19,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.StorageBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters20,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  headerParameters: [Parameters.contentType],
  serializer
};
const regenerateStorageAccountKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}/regeneratekey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StorageBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters21,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  headerParameters: [Parameters.contentType],
  serializer
};
const getSasDefinitionsOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}/sas",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SasDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  serializer
};
const getDeletedSasDefinitionsOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedstorage/{storage-account-name}/sas",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSasDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName],
  serializer
};
const getDeletedSasDefinitionOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedstorage/{storage-account-name}/sas/{sas-definition-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSasDefinitionBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.storageAccountName,
    Parameters.sasDefinitionName
  ],
  serializer
};
const recoverDeletedSasDefinitionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SasDefinitionBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.storageAccountName,
    Parameters.sasDefinitionName
  ],
  serializer
};
const deleteSasDefinitionOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}/sas/{sas-definition-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSasDefinitionBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.storageAccountName,
    Parameters.sasDefinitionName
  ],
  serializer
};
const getSasDefinitionOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}/sas/{sas-definition-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SasDefinitionBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.storageAccountName,
    Parameters.sasDefinitionName
  ],
  serializer
};
const setSasDefinitionOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}/sas/{sas-definition-name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SasDefinitionBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters22,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.storageAccountName,
    Parameters.sasDefinitionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateSasDefinitionOperationSpec: coreHttp.OperationSpec = {
  path: "/storage/{storage-account-name}/sas/{sas-definition-name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SasDefinitionBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters23,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.storageAccountName,
    Parameters.sasDefinitionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const fullBackupOperationSpec: coreHttp.OperationSpec = {
  path: "/backup",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.FullBackupOperation,
      headersMapper: Mappers.KeyVaultClientFullBackupHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.azureStorageBlobContainerUri,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const fullBackupStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/backup/{jobId}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FullBackupOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.jobId],
  serializer
};
const fullRestoreOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/restore",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.FullRestoreOperation,
      headersMapper: Mappers.KeyVaultClientFullRestoreOperationHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.restoreBlobDetails,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const fullRestoreStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/restore/{jobId}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FullRestoreOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.jobId1],
  serializer
};
const getCertificatesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
  serializer
};
const getCertificateIssuersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateIssuerListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink1],
  serializer
};
const getCertificateVersionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName,
    Parameters.nextLink2
  ],
  serializer
};
const getDeletedCertificatesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink3],
  serializer
};
const getKeyVersionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName5,
    Parameters.nextLink4
  ],
  serializer
};
const getKeysNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink5],
  serializer
};
const getDeletedKeysNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedKeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink6],
  serializer
};
const getSecretsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecretListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxresults1],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink7],
  serializer
};
const getSecretVersionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecretListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxresults1],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.secretName1,
    Parameters.nextLink8
  ],
  serializer
};
const getDeletedSecretsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSecretListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink9],
  serializer
};
const getStorageAccountsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink10],
  serializer
};
const getDeletedStorageAccountsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedStorageListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink11],
  serializer
};
const getSasDefinitionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SasDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.storageAccountName,
    Parameters.nextLink12
  ],
  serializer
};
const getDeletedSasDefinitionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSasDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.storageAccountName,
    Parameters.nextLink13
  ],
  serializer
};

// Operation Specifications

export {
  KeyVaultClient,
  KeyVaultClientContext,
  Models as KeyVaultModels,
  Mappers as KeyVaultMappers
};
export * from "./operations";
