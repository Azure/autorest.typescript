/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureAddonsResourceProvider } from "../azureAddonsResourceProvider";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  PlanTypeName,
  SupportPlanTypesGetResponse,
  SupportPlanTypesCreateOrUpdateResponse,
  SupportPlanTypesListInfoResponse
} from "../models";

/**
 * Class representing a SupportPlanTypes.
 */
export class SupportPlanTypes {
  private readonly client: AzureAddonsResourceProvider;

  /**
   * Initialize a new instance of the class SupportPlanTypes class.
   * @param client Reference to the service client
   */
  constructor(client: AzureAddonsResourceProvider) {
    this.client = client;
  }

  /**
   * Returns whether or not the canonical support plan of type {type} is enabled for the subscription.
   * @param providerName The support plan type. For now the only valid type is "canonical".
   * @param planTypeName The Canonical support plan type.
   * @param options The options parameters.
   */
  get(
    providerName: string,
    planTypeName: PlanTypeName,
    options?: coreHttp.OperationOptions
  ): Promise<SupportPlanTypesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { providerName, planTypeName, options: operationOptions },
      getOperationSpec
    ) as Promise<SupportPlanTypesGetResponse>;
  }

  /**
   * Creates or updates the Canonical support plan of type {type} for the subscription.
   * @param providerName The support plan type. For now the only valid type is "canonical".
   * @param planTypeName The Canonical support plan type.
   * @param options The options parameters.
   */
  async createOrUpdate(
    providerName: string,
    planTypeName: PlanTypeName,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SupportPlanTypesCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      providerName,
      planTypeName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SupportPlanTypesCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Cancels the Canonical support plan of type {type} for the subscription.
   * @param providerName The support plan type. For now the only valid type is "canonical".
   * @param planTypeName The Canonical support plan type.
   * @param options The options parameters.
   */
  async delete(
    providerName: string,
    planTypeName: PlanTypeName,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      providerName,
      planTypeName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Returns the canonical support plan information for all types for the subscription.
   * @param options The options parameters.
   */
  listInfo(
    options?: coreHttp.OperationOptions
  ): Promise<SupportPlanTypesListInfoResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listInfoOperationSpec
    ) as Promise<SupportPlanTypesListInfoResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Addons/supportProviders/{providerName}/supportPlanTypes/{planTypeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CanonicalSupportPlanResponseEnvelope
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.providerName,
    Parameters.planTypeName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Addons/supportProviders/{providerName}/supportPlanTypes/{planTypeName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CanonicalSupportPlanResponseEnvelope
    },
    201: {
      bodyMapper: Mappers.CanonicalSupportPlanResponseEnvelope
    },
    202: {
      bodyMapper: Mappers.CanonicalSupportPlanResponseEnvelope
    },
    204: {
      bodyMapper: Mappers.CanonicalSupportPlanResponseEnvelope
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.providerName,
    Parameters.planTypeName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Addons/supportProviders/{providerName}/supportPlanTypes/{planTypeName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.providerName,
    Parameters.planTypeName
  ],
  serializer
};
const listInfoOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Addons/supportProviders/canonical/listSupportPlanInfo",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CanonicalSupportPlanInfoDefinition"
            }
          }
        },
        serializedName: "CanonicalSupportPlanInfo"
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
