/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ReplicationJobsListOptionalParams,
  ReplicationJobsListResponse,
  ReplicationJobsGetResponse,
  ReplicationJobsCancelResponse,
  ReplicationJobsRestartResponse,
  ResumeJobParams,
  ReplicationJobsResumeResponse,
  ReplicationJobsExportResponse,
  ReplicationJobsListNextOptionalParams,
  ReplicationJobsListNextResponse
} from "../models";

/**
 * Class representing a ReplicationJobs.
 */
export class ReplicationJobs {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationJobs class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of Azure Site Recovery Jobs for the vault.
   * @param options The options parameters.
   */
  list(
    options?: ReplicationJobsListOptionalParams
  ): Promise<ReplicationJobsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ReplicationJobsListResponse>;
  }

  /**
   * Get the details of an Azure Site Recovery job.
   * @param jobName Job identifier
   * @param options The options parameters.
   */
  get(
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationJobsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { jobName, options: operationOptions },
      getOperationSpec
    ) as Promise<ReplicationJobsGetResponse>;
  }

  /**
   * The operation to cancel an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param options The options parameters.
   */
  async cancel(
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationJobsCancelResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      jobName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationJobsCancelResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      cancelOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: cancelOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to restart an Azure Site Recovery job.
   * @param jobName Job identifier.
   * @param options The options parameters.
   */
  async restart(
    jobName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationJobsRestartResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      jobName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationJobsRestartResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      restartOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: restartOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to resume an Azure Site Recovery job
   * @param jobName Job identifier.
   * @param resumeJobParams Resume rob comments.
   * @param options The options parameters.
   */
  async resume(
    jobName: string,
    resumeJobParams: ResumeJobParams,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationJobsResumeResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      jobName,
      resumeJobParams,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationJobsResumeResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      resumeOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: resumeOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to export the details of the Azure Site Recovery jobs of the vault.
   * @param options The options parameters.
   */
  async exportModel(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationJobsExportResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationJobsExportResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      exportModelOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: exportModelOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: ReplicationJobsListNextOptionalParams
  ): Promise<ReplicationJobsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReplicationJobsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobCollection
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.jobName
  ],
  serializer
};
const cancelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.jobName1
  ],
  serializer
};
const restartOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/restart",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.jobName1
  ],
  serializer
};
const resumeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/resume",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    }
  },
  requestBody: Parameters.resumeJobParams,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.jobName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const exportModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/export",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    201: {
      bodyMapper: Mappers.Job
    },
    202: {
      bodyMapper: Mappers.Job
    },
    204: {
      bodyMapper: Mappers.Job
    }
  },
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobCollection
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  serializer
};
