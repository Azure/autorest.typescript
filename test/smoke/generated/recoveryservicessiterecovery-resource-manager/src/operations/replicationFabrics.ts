/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ReplicationFabricsListResponse,
  ReplicationFabricsGetResponse,
  FabricCreationInput,
  ReplicationFabricsCreateResponse,
  ReplicationFabricsCheckConsistencyResponse,
  FailoverProcessServerRequest,
  ReplicationFabricsReassociateGatewayResponse,
  RenewCertificateInput,
  ReplicationFabricsRenewCertificateResponse,
  ReplicationFabricsListNextResponse
} from "../models";

/**
 * Class representing a ReplicationFabrics.
 */
export class ReplicationFabrics {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationFabrics class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of the Azure Site Recovery fabrics in the vault.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationFabricsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ReplicationFabricsListResponse>;
  }

  /**
   * Gets the details of an Azure Site Recovery fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  get(
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationFabricsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, options: operationOptions },
      getOperationSpec
    ) as Promise<ReplicationFabricsGetResponse>;
  }

  /**
   * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site)
   * @param input Fabric creation input.
   * @param fabricName Name of the ASR fabric.
   * @param options The options parameters.
   */
  async create(
    input: FabricCreationInput,
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationFabricsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      input,
      fabricName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationFabricsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to purge(force delete) an Azure Site Recovery fabric.
   * @param fabricName ASR fabric to purge.
   * @param options The options parameters.
   */
  async purge(
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      purgeOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: purgeOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to perform a consistency check on the fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  async checkConsistency(
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationFabricsCheckConsistencyResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationFabricsCheckConsistencyResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      checkConsistencyOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: checkConsistencyOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to migrate an Azure Site Recovery fabric to AAD.
   * @param fabricName ASR fabric to migrate.
   * @param options The options parameters.
   */
  async migrateToAad(
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      migrateToAadOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: migrateToAadOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to move replications from a process server to another process server.
   * @param failoverProcessServerRequest The input to the failover process server operation.
   * @param fabricName The name of the fabric containing the process server.
   * @param options The options parameters.
   */
  async reassociateGateway(
    failoverProcessServerRequest: FailoverProcessServerRequest,
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationFabricsReassociateGatewayResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      failoverProcessServerRequest,
      fabricName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationFabricsReassociateGatewayResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      reassociateGatewayOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: reassociateGatewayOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to delete or remove an Azure Site Recovery fabric.
   * @param fabricName ASR fabric to delete
   * @param options The options parameters.
   */
  async delete(
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Renews the connection certificate for the ASR replication fabric.
   * @param renewCertificate Renew certificate input.
   * @param fabricName fabric name to renew certs for.
   * @param options The options parameters.
   */
  async renewCertificate(
    renewCertificate: RenewCertificateInput,
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationFabricsRenewCertificateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      renewCertificate,
      fabricName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationFabricsRenewCertificateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      renewCertificateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: renewCertificateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationFabricsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReplicationFabricsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    201: {
      bodyMapper: Mappers.Fabric
    },
    202: {
      bodyMapper: Mappers.Fabric
    },
    204: {
      bodyMapper: Mappers.Fabric
    }
  },
  requestBody: Parameters.input,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const purgeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName2
  ],
  serializer
};
const checkConsistencyOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    201: {
      bodyMapper: Mappers.Fabric
    },
    202: {
      bodyMapper: Mappers.Fabric
    },
    204: {
      bodyMapper: Mappers.Fabric
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  serializer
};
const migrateToAadOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName3
  ],
  serializer
};
const reassociateGatewayOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    201: {
      bodyMapper: Mappers.Fabric
    },
    202: {
      bodyMapper: Mappers.Fabric
    },
    204: {
      bodyMapper: Mappers.Fabric
    }
  },
  requestBody: Parameters.failoverProcessServerRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName4
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName5
  ],
  serializer
};
const renewCertificateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    201: {
      bodyMapper: Mappers.Fabric
    },
    202: {
      bodyMapper: Mappers.Fabric
    },
    204: {
      bodyMapper: Mappers.Fabric
    }
  },
  requestBody: Parameters.renewCertificate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName6
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  serializer
};
