/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ReplicationProtectionContainersListByReplicationFabricsResponse,
  ReplicationProtectionContainersGetResponse,
  CreateProtectionContainerInput,
  ReplicationProtectionContainersCreateResponse,
  DiscoverProtectableItemRequest,
  ReplicationProtectionContainersDiscoverProtectableItemResponse,
  SwitchProtectionInput,
  ReplicationProtectionContainersSwitchProtectionResponse,
  ReplicationProtectionContainersListResponse,
  ReplicationProtectionContainersListByReplicationFabricsNextResponse,
  ReplicationProtectionContainersListNextResponse
} from "../models";

/**
 * Class representing a ReplicationProtectionContainers.
 */
export class ReplicationProtectionContainers {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationProtectionContainers class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the protection containers in the specified fabric.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  listByReplicationFabrics(
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationProtectionContainersListByReplicationFabricsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, options: operationOptions },
      listByReplicationFabricsOperationSpec
    ) as Promise<
      ReplicationProtectionContainersListByReplicationFabricsResponse
    >;
  }

  /**
   * Gets the details of a protection container.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  get(
    fabricName: string,
    protectionContainerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationProtectionContainersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, protectionContainerName, options: operationOptions },
      getOperationSpec
    ) as Promise<ReplicationProtectionContainersGetResponse>;
  }

  /**
   * Operation to create a protection container.
   * @param creationInput Creation input.
   * @param fabricName Unique fabric ARM name.
   * @param protectionContainerName Unique protection container ARM name.
   * @param options The options parameters.
   */
  async create(
    creationInput: CreateProtectionContainerInput,
    fabricName: string,
    protectionContainerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectionContainersCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      creationInput,
      fabricName,
      protectionContainerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectionContainersCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to a add a protectable item to a protection container(Add physical server.)
   * @param discoverProtectableItemRequest The request object to add a protectable item.
   * @param fabricName The name of the fabric.
   * @param protectionContainerName The name of the protection container.
   * @param options The options parameters.
   */
  async discoverProtectableItem(
    discoverProtectableItemRequest: DiscoverProtectableItemRequest,
    fabricName: string,
    protectionContainerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<ReplicationProtectionContainersDiscoverProtectableItemResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      discoverProtectableItemRequest,
      fabricName,
      protectionContainerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectionContainersDiscoverProtectableItemResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      discoverProtectableItemOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: discoverProtectableItemOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to remove a protection container.
   * @param fabricName Unique fabric ARM name.
   * @param protectionContainerName Unique protection container ARM name.
   * @param options The options parameters.
   */
  async delete(
    fabricName: string,
    protectionContainerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to switch protection from one container to another or one replication provider to another.
   * @param protectionContainerName Protection container name.
   * @param switchInput Switch protection input.
   * @param fabricName Unique fabric name.
   * @param options The options parameters.
   */
  async switchProtection(
    protectionContainerName: string,
    switchInput: SwitchProtectionInput,
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<ReplicationProtectionContainersSwitchProtectionResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      switchInput,
      fabricName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectionContainersSwitchProtectionResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      switchProtectionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: switchProtectionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Lists the protection containers in a vault.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationProtectionContainersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ReplicationProtectionContainersListResponse>;
  }

  /**
   * ListByReplicationFabricsNext
   * @param fabricName Fabric name.
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
   *                 method.
   * @param options The options parameters.
   */
  listByReplicationFabricsNext(
    fabricName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ReplicationProtectionContainersListByReplicationFabricsNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, nextLink, options: operationOptions },
      listByReplicationFabricsNextOperationSpec
    ) as Promise<
      ReplicationProtectionContainersListByReplicationFabricsNextResponse
    >;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationProtectionContainersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReplicationProtectionContainersListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByReplicationFabricsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainerCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainer
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainer
    },
    201: {
      bodyMapper: Mappers.ProtectionContainer
    },
    202: {
      bodyMapper: Mappers.ProtectionContainer
    },
    204: {
      bodyMapper: Mappers.ProtectionContainer
    }
  },
  requestBody: Parameters.creationInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName10,
    Parameters.protectionContainerName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const discoverProtectableItemOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/discoverProtectableItem",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainer
    },
    201: {
      bodyMapper: Mappers.ProtectionContainer
    },
    202: {
      bodyMapper: Mappers.ProtectionContainer
    },
    204: {
      bodyMapper: Mappers.ProtectionContainer
    }
  },
  requestBody: Parameters.discoverProtectableItemRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName11,
    Parameters.protectionContainerName2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/remove",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName10,
    Parameters.protectionContainerName1
  ],
  serializer
};
const switchProtectionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/switchprotection",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainer
    },
    201: {
      bodyMapper: Mappers.ProtectionContainer
    },
    202: {
      bodyMapper: Mappers.ProtectionContainer
    },
    204: {
      bodyMapper: Mappers.ProtectionContainer
    }
  },
  requestBody: Parameters.switchInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainerCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  serializer
};
const listByReplicationFabricsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainerCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.nextLink1
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProtectionContainerCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  serializer
};
