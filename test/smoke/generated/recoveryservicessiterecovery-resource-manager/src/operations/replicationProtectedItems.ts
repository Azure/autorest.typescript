/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ReplicationProtectedItemsListByReplicationProtectionContainersResponse,
  ReplicationProtectedItemsGetResponse,
  EnableProtectionInput,
  ReplicationProtectedItemsCreateResponse,
  UpdateReplicationProtectedItemInput,
  ReplicationProtectedItemsUpdateResponse,
  AddDisksInput,
  ReplicationProtectedItemsAddDisksResponse,
  ApplyRecoveryPointInput,
  ReplicationProtectedItemsApplyRecoveryPointResponse,
  ReplicationProtectedItemsFailoverCommitResponse,
  PlannedFailoverInput,
  ReplicationProtectedItemsPlannedFailoverResponse,
  DisableProtectionInput,
  RemoveDisksInput,
  ReplicationProtectedItemsRemoveDisksResponse,
  ReplicationProtectedItemsRepairReplicationResponse,
  ReverseReplicationInput,
  ReplicationProtectedItemsReprotectResponse,
  ResolveHealthInput,
  ReplicationProtectedItemsResolveHealthErrorsResponse,
  TestFailoverInput,
  ReplicationProtectedItemsTestFailoverResponse,
  TestFailoverCleanupInput,
  ReplicationProtectedItemsTestFailoverCleanupResponse,
  UnplannedFailoverInput,
  ReplicationProtectedItemsUnplannedFailoverResponse,
  UpdateMobilityServiceRequest,
  ReplicationProtectedItemsUpdateMobilityServiceResponse,
  ReplicationProtectedItemsListOptionalParams,
  ReplicationProtectedItemsListResponse,
  ReplicationProtectedItemsListByReplicationProtectionContainersNextResponse,
  ReplicationProtectedItemsListNextOptionalParams,
  ReplicationProtectedItemsListNextResponse
} from "../models";

/**
 * Class representing a ReplicationProtectedItems.
 */
export class ReplicationProtectedItems {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationProtectedItems class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of ASR replication protected items in the protection container.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  listByReplicationProtectionContainers(
    fabricName: string,
    protectionContainerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ReplicationProtectedItemsListByReplicationProtectionContainersResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, protectionContainerName, options: operationOptions },
      listByReplicationProtectionContainersOperationSpec
    ) as Promise<
      ReplicationProtectedItemsListByReplicationProtectionContainersResponse
    >;
  }

  /**
   * Gets the details of an ASR replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Fabric unique name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param options The options parameters.
   */
  get(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationProtectedItemsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        protectionContainerName,
        fabricName,
        replicatedProtectedItemName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ReplicationProtectedItemsGetResponse>;
  }

  /**
   * The operation to create an ASR replication protected item (Enable replication).
   * @param protectionContainerName Protection container name.
   * @param input Enable Protection Input.
   * @param fabricName Name of the fabric.
   * @param replicatedProtectedItemName A name for the replication protected item.
   * @param options The options parameters.
   */
  async create(
    protectionContainerName: string,
    input: EnableProtectionInput,
    fabricName: string,
    replicatedProtectedItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      input,
      fabricName,
      replicatedProtectedItemName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to delete or purge a replication protected item. This operation will force delete the
   * replication protected item. Use the remove operation on replication protected item to perform a
   * clean disable replication for the item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param options The options parameters.
   */
  async purge(
    fabricName: string,
    protectionContainerName: string,
    replicatedProtectedItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      replicatedProtectedItemName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      purgeOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: purgeOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to update the recovery settings of an ASR replication protected item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param updateProtectionInput Update protection input.
   * @param options The options parameters.
   */
  async update(
    fabricName: string,
    protectionContainerName: string,
    replicatedProtectedItemName: string,
    updateProtectionInput: UpdateReplicationProtectedItemInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      replicatedProtectedItemName,
      updateProtectionInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to add disks(s) to the replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param addDisksInput Add disks input.
   * @param options The options parameters.
   */
  async addDisks(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    addDisksInput: AddDisksInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsAddDisksResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      addDisksInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsAddDisksResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      addDisksOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: addDisksOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to change the recovery point of a failed over replication protected item.
   * @param applyRecoveryPointInput The ApplyRecoveryPointInput.
   * @param fabricName The ARM fabric name.
   * @param protectionContainerName The protection container name.
   * @param replicatedProtectedItemName The replicated protected item's name.
   * @param options The options parameters.
   */
  async applyRecoveryPoint(
    applyRecoveryPointInput: ApplyRecoveryPointInput,
    fabricName: string,
    protectionContainerName: string,
    replicatedProtectedItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsApplyRecoveryPointResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      applyRecoveryPointInput,
      fabricName,
      protectionContainerName,
      replicatedProtectedItemName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsApplyRecoveryPointResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      applyRecoveryPointOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: applyRecoveryPointOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to commit the failover of the replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param options The options parameters.
   */
  async failoverCommit(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsFailoverCommitResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsFailoverCommitResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      failoverCommitOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: failoverCommitOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to initiate a planned failover of the replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Disable protection input.
   * @param options The options parameters.
   */
  async plannedFailover(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    failoverInput: PlannedFailoverInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsPlannedFailoverResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      failoverInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsPlannedFailoverResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      plannedFailoverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: plannedFailoverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to disable replication on a replication protected item. This will also remove the
   * item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param disableProtectionInput Disable protection input.
   * @param options The options parameters.
   */
  async delete(
    fabricName: string,
    protectionContainerName: string,
    replicatedProtectedItemName: string,
    disableProtectionInput: DisableProtectionInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      replicatedProtectedItemName,
      disableProtectionInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to remove disk(s) from the replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param removeDisksInput Remove disks input.
   * @param options The options parameters.
   */
  async removeDisks(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    removeDisksInput: RemoveDisksInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsRemoveDisksResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      removeDisksInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsRemoveDisksResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      removeDisksOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: removeDisksOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to start resynchronize/repair replication for a replication protected item requiring
   * resynchronization.
   * @param fabricName The name of the fabric.
   * @param protectionContainerName The name of the container.
   * @param replicatedProtectedItemName The name of the replication protected item.
   * @param options The options parameters.
   */
  async repairReplication(
    fabricName: string,
    protectionContainerName: string,
    replicatedProtectedItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsRepairReplicationResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      replicatedProtectedItemName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsRepairReplicationResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      repairReplicationOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: repairReplicationOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to reprotect or reverse replicate a failed over replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param rrInput Disable protection input.
   * @param options The options parameters.
   */
  async reprotect(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    rrInput: ReverseReplicationInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsReprotectResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      rrInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsReprotectResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      reprotectOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: reprotectOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to resolve health issues of the replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param resolveHealthInput Health issue input object.
   * @param options The options parameters.
   */
  async resolveHealthErrors(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    resolveHealthInput: ResolveHealthInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsResolveHealthErrorsResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      resolveHealthInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsResolveHealthErrorsResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      resolveHealthErrorsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: resolveHealthErrorsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to perform a test failover of the replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Test failover input.
   * @param options The options parameters.
   */
  async testFailover(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    failoverInput: TestFailoverInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsTestFailoverResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      failoverInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsTestFailoverResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      testFailoverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: testFailoverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to clean up the test failover of a replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param cleanupInput Test failover cleanup input.
   * @param options The options parameters.
   */
  async testFailoverCleanup(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    cleanupInput: TestFailoverCleanupInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsTestFailoverCleanupResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      cleanupInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsTestFailoverCleanupResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      testFailoverCleanupOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: testFailoverCleanupOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Operation to initiate a failover of the replication protected item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Unique fabric name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Disable protection input.
   * @param options The options parameters.
   */
  async unplannedFailover(
    protectionContainerName: string,
    fabricName: string,
    replicatedProtectedItemName: string,
    failoverInput: UnplannedFailoverInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationProtectedItemsUnplannedFailoverResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      protectionContainerName,
      fabricName,
      replicatedProtectedItemName,
      failoverInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsUnplannedFailoverResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      unplannedFailoverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: unplannedFailoverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to update(push update) the installed mobility service software on a replication
   * protected item to the latest available version.
   * @param updateMobilityServiceRequest Request to update the mobility service on the protected item.
   * @param fabricName The name of the fabric containing the protected item.
   * @param protectionContainerName The name of the container containing the protected item.
   * @param replicationProtectedItemName The name of the protected item on which the agent is to be
   *                                     updated.
   * @param options The options parameters.
   */
  async updateMobilityService(
    updateMobilityServiceRequest: UpdateMobilityServiceRequest,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectedItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<ReplicationProtectedItemsUpdateMobilityServiceResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      updateMobilityServiceRequest,
      fabricName,
      protectionContainerName,
      replicationProtectedItemName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationProtectedItemsUpdateMobilityServiceResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateMobilityServiceOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateMobilityServiceOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the list of ASR replication protected items in the vault.
   * @param options The options parameters.
   */
  list(
    options?: ReplicationProtectedItemsListOptionalParams
  ): Promise<ReplicationProtectedItemsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ReplicationProtectedItemsListResponse>;
  }

  /**
   * ListByReplicationProtectionContainersNext
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByReplicationProtectionContainers method.
   * @param options The options parameters.
   */
  listByReplicationProtectionContainersNext(
    fabricName: string,
    protectionContainerName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ReplicationProtectedItemsListByReplicationProtectionContainersNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        fabricName,
        protectionContainerName,
        nextLink,
        options: operationOptions
      },
      listByReplicationProtectionContainersNextOperationSpec
    ) as Promise<
      ReplicationProtectedItemsListByReplicationProtectionContainersNextResponse
    >;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: ReplicationProtectedItemsListNextOptionalParams
  ): Promise<ReplicationProtectedItemsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReplicationProtectedItemsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByReplicationProtectionContainersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItemCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName13,
    Parameters.replicatedProtectedItemName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.input5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName14,
    Parameters.replicatedProtectedItemName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const purgeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.updateProtectionInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const addDisksOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/addDisks",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.addDisksInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const applyRecoveryPointOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/applyRecoveryPoint",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.applyRecoveryPointInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName15,
    Parameters.protectionContainerName3,
    Parameters.replicatedProtectedItemName2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const failoverCommitOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCommit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  serializer
};
const plannedFailoverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/plannedFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.failoverInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/remove",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.disableProtectionInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const removeDisksOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/removeDisks",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.removeDisksInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const repairReplicationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/repairReplication",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName11,
    Parameters.protectionContainerName4,
    Parameters.replicatedProtectedItemName3
  ],
  serializer
};
const reprotectOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/reProtect",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.rrInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const resolveHealthErrorsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/ResolveHealthErrors",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.resolveHealthInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const testFailoverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.failoverInput1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const testFailoverCleanupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailoverCleanup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.cleanupInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const unplannedFailoverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/unplannedFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.failoverInput2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName12,
    Parameters.replicatedProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateMobilityServiceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicationProtectedItemName}/updateMobilityService",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectedItem
    }
  },
  requestBody: Parameters.updateMobilityServiceRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName16,
    Parameters.protectionContainerName5,
    Parameters.replicationProtectedItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItemCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  serializer
};
const listByReplicationProtectionContainersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItemCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.nextLink3
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItemCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  serializer
};
