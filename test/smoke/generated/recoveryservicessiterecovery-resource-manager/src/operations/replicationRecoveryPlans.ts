/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ReplicationRecoveryPlansListResponse,
  ReplicationRecoveryPlansGetResponse,
  CreateRecoveryPlanInput,
  ReplicationRecoveryPlansCreateResponse,
  UpdateRecoveryPlanInput,
  ReplicationRecoveryPlansUpdateResponse,
  ReplicationRecoveryPlansFailoverCommitResponse,
  RecoveryPlanPlannedFailoverInput,
  ReplicationRecoveryPlansPlannedFailoverResponse,
  ReplicationRecoveryPlansReprotectResponse,
  RecoveryPlanTestFailoverInput,
  ReplicationRecoveryPlansTestFailoverResponse,
  RecoveryPlanTestFailoverCleanupInput,
  ReplicationRecoveryPlansTestFailoverCleanupResponse,
  RecoveryPlanUnplannedFailoverInput,
  ReplicationRecoveryPlansUnplannedFailoverResponse,
  ReplicationRecoveryPlansListNextResponse
} from "../models";

/**
 * Class representing a ReplicationRecoveryPlans.
 */
export class ReplicationRecoveryPlans {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationRecoveryPlans class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the recovery plans in the vault.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationRecoveryPlansListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ReplicationRecoveryPlansListResponse>;
  }

  /**
   * Gets the details of the recovery plan.
   * @param recoveryPlanName Name of the recovery plan.
   * @param options The options parameters.
   */
  get(
    recoveryPlanName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationRecoveryPlansGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { recoveryPlanName, options: operationOptions },
      getOperationSpec
    ) as Promise<ReplicationRecoveryPlansGetResponse>;
  }

  /**
   * The operation to create a recovery plan.
   * @param input Recovery Plan creation input.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async create(
    input: CreateRecoveryPlanInput,
    recoveryPlanName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationRecoveryPlansCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      input,
      recoveryPlanName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationRecoveryPlansCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Delete a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async delete(
    recoveryPlanName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      recoveryPlanName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to update a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Update recovery plan input
   * @param options The options parameters.
   */
  async update(
    recoveryPlanName: string,
    input: UpdateRecoveryPlanInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationRecoveryPlansUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      recoveryPlanName,
      input,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationRecoveryPlansUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to commit the fail over of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async failoverCommit(
    recoveryPlanName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationRecoveryPlansFailoverCommitResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      recoveryPlanName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationRecoveryPlansFailoverCommitResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      failoverCommitOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: failoverCommitOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to start the planned failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Failover input.
   * @param options The options parameters.
   */
  async plannedFailover(
    recoveryPlanName: string,
    input: RecoveryPlanPlannedFailoverInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationRecoveryPlansPlannedFailoverResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      recoveryPlanName,
      input,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationRecoveryPlansPlannedFailoverResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      plannedFailoverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: plannedFailoverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to reprotect(reverse replicate) a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param options The options parameters.
   */
  async reprotect(
    recoveryPlanName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationRecoveryPlansReprotectResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      recoveryPlanName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationRecoveryPlansReprotectResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      reprotectOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: reprotectOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to start the test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Failover input.
   * @param options The options parameters.
   */
  async testFailover(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationRecoveryPlansTestFailoverResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      recoveryPlanName,
      input,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationRecoveryPlansTestFailoverResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      testFailoverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: testFailoverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to cleanup test failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Test failover cleanup input.
   * @param options The options parameters.
   */
  async testFailoverCleanup(
    recoveryPlanName: string,
    input: RecoveryPlanTestFailoverCleanupInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationRecoveryPlansTestFailoverCleanupResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      recoveryPlanName,
      input,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationRecoveryPlansTestFailoverCleanupResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      testFailoverCleanupOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: testFailoverCleanupOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to start the failover of a recovery plan.
   * @param recoveryPlanName Recovery plan name.
   * @param input Failover input.
   * @param options The options parameters.
   */
  async unplannedFailover(
    recoveryPlanName: string,
    input: RecoveryPlanUnplannedFailoverInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationRecoveryPlansUnplannedFailoverResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      recoveryPlanName,
      input,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationRecoveryPlansUnplannedFailoverResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      unplannedFailoverOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: unplannedFailoverOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationRecoveryPlansListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReplicationRecoveryPlansListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlanCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const failoverCommitOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  serializer
};
const plannedFailoverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const reprotectOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  serializer
};
const testFailoverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const testFailoverCleanupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const unplannedFailoverOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlan
    },
    201: {
      bodyMapper: Mappers.RecoveryPlan
    },
    202: {
      bodyMapper: Mappers.RecoveryPlan
    },
    204: {
      bodyMapper: Mappers.RecoveryPlan
    }
  },
  requestBody: Parameters.input13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.recoveryPlanName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecoveryPlanCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  serializer
};
