/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import {
  ReplicationEligibilityResultsListResponse,
  ReplicationEligibilityResultsGetResponse
} from "../models";

/**
 * Class representing a ReplicationEligibilityResults.
 */
export class ReplicationEligibilityResults {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationEligibilityResults class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Validates whether a given VM can be protected or not in which case returns list of errors.
   * @param virtualMachineName Virtual Machine name.
   * @param options The options parameters.
   */
  list(
    virtualMachineName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationEligibilityResultsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { virtualMachineName, options: operationOptions },
      listOperationSpec
    ) as Promise<ReplicationEligibilityResultsListResponse>;
  }

  /**
   * Validates whether a given VM can be protected or not in which case returns list of errors.
   * @param virtualMachineName Virtual Machine name.
   * @param options The options parameters.
   */
  get(
    virtualMachineName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationEligibilityResultsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { virtualMachineName, options: operationOptions },
      getOperationSpec
    ) as Promise<ReplicationEligibilityResultsGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}/providers/Microsoft.RecoveryServices/replicationEligibilityResults",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationEligibilityResultsCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualMachineName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}/providers/Microsoft.RecoveryServices/replicationEligibilityResults/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationEligibilityResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.virtualMachineName
  ],
  serializer
};
