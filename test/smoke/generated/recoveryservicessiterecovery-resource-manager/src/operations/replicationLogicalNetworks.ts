/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import {
  ReplicationLogicalNetworksListByReplicationFabricsResponse,
  ReplicationLogicalNetworksGetResponse,
  ReplicationLogicalNetworksListByReplicationFabricsNextResponse
} from "../models";

/**
 * Class representing a ReplicationLogicalNetworks.
 */
export class ReplicationLogicalNetworks {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationLogicalNetworks class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists all the logical networks of the Azure Site Recovery fabric
   * @param fabricName Server Id.
   * @param options The options parameters.
   */
  listByReplicationFabrics(
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationLogicalNetworksListByReplicationFabricsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, options: operationOptions },
      listByReplicationFabricsOperationSpec
    ) as Promise<ReplicationLogicalNetworksListByReplicationFabricsResponse>;
  }

  /**
   * Gets the details of a logical network.
   * @param fabricName Server Id.
   * @param logicalNetworkName Logical network name.
   * @param options The options parameters.
   */
  get(
    fabricName: string,
    logicalNetworkName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationLogicalNetworksGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, logicalNetworkName, options: operationOptions },
      getOperationSpec
    ) as Promise<ReplicationLogicalNetworksGetResponse>;
  }

  /**
   * ListByReplicationFabricsNext
   * @param fabricName Server Id.
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
   *                 method.
   * @param options The options parameters.
   */
  listByReplicationFabricsNext(
    fabricName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationLogicalNetworksListByReplicationFabricsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, nextLink, options: operationOptions },
      listByReplicationFabricsNextOperationSpec
    ) as Promise<
      ReplicationLogicalNetworksListByReplicationFabricsNextResponse
    >;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByReplicationFabricsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationLogicalNetworks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogicalNetworkCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName7
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationLogicalNetworks/{logicalNetworkName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogicalNetwork
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName7,
    Parameters.logicalNetworkName
  ],
  serializer
};
const listByReplicationFabricsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogicalNetworkCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName7,
    Parameters.nextLink1
  ],
  serializer
};
