/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ReplicationMigrationItemsListByReplicationProtectionContainersResponse,
  ReplicationMigrationItemsGetResponse,
  EnableMigrationInput,
  ReplicationMigrationItemsCreateResponse,
  ReplicationMigrationItemsDeleteOptionalParams,
  UpdateMigrationItemInput,
  ReplicationMigrationItemsUpdateResponse,
  MigrateInput,
  ReplicationMigrationItemsMigrateResponse,
  TestMigrateInput,
  ReplicationMigrationItemsTestMigrateResponse,
  TestMigrateCleanupInput,
  ReplicationMigrationItemsTestMigrateCleanupResponse,
  ReplicationMigrationItemsListOptionalParams,
  ReplicationMigrationItemsListResponse,
  ReplicationMigrationItemsListByReplicationProtectionContainersNextResponse,
  ReplicationMigrationItemsListNextOptionalParams,
  ReplicationMigrationItemsListNextResponse
} from "../models";

/**
 * Class representing a ReplicationMigrationItems.
 */
export class ReplicationMigrationItems {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationMigrationItems class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of ASR migration items in the protection container.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  listByReplicationProtectionContainers(
    fabricName: string,
    protectionContainerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ReplicationMigrationItemsListByReplicationProtectionContainersResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, protectionContainerName, options: operationOptions },
      listByReplicationProtectionContainersOperationSpec
    ) as Promise<
      ReplicationMigrationItemsListByReplicationProtectionContainersResponse
    >;
  }

  /**
   * Gets the details of a migration item.
   * @param protectionContainerName Protection container name.
   * @param fabricName Fabric unique name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  get(
    protectionContainerName: string,
    fabricName: string,
    migrationItemName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationMigrationItemsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        protectionContainerName,
        fabricName,
        migrationItemName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ReplicationMigrationItemsGetResponse>;
  }

  /**
   * The operation to create an ASR migration item (enable migration).
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Enable migration input.
   * @param options The options parameters.
   */
  async create(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: EnableMigrationInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationMigrationItemsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      migrationItemName,
      input,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationMigrationItemsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to delete an ASR migration item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param options The options parameters.
   */
  async delete(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    options?: ReplicationMigrationItemsDeleteOptionalParams
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      migrationItemName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to update the recovery settings of an ASR migration item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param input Update migration item input.
   * @param options The options parameters.
   */
  async update(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    input: UpdateMigrationItemInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationMigrationItemsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      migrationItemName,
      input,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationMigrationItemsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to initiate migration of the item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param migrateInput Migrate input.
   * @param options The options parameters.
   */
  async migrate(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    migrateInput: MigrateInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationMigrationItemsMigrateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      migrationItemName,
      migrateInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationMigrationItemsMigrateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      migrateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: migrateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to initiate test migration of the item.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateInput Test migrate input.
   * @param options The options parameters.
   */
  async testMigrate(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateInput: TestMigrateInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationMigrationItemsTestMigrateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      migrationItemName,
      testMigrateInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationMigrationItemsTestMigrateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      testMigrateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: testMigrateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The operation to initiate test migrate cleanup.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param migrationItemName Migration item name.
   * @param testMigrateCleanupInput Test migrate cleanup input.
   * @param options The options parameters.
   */
  async testMigrateCleanup(
    fabricName: string,
    protectionContainerName: string,
    migrationItemName: string,
    testMigrateCleanupInput: TestMigrateCleanupInput,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ReplicationMigrationItemsTestMigrateCleanupResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      fabricName,
      protectionContainerName,
      migrationItemName,
      testMigrateCleanupInput,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ReplicationMigrationItemsTestMigrateCleanupResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      testMigrateCleanupOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: testMigrateCleanupOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the list of migration items in the vault.
   * @param options The options parameters.
   */
  list(
    options?: ReplicationMigrationItemsListOptionalParams
  ): Promise<ReplicationMigrationItemsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ReplicationMigrationItemsListResponse>;
  }

  /**
   * ListByReplicationProtectionContainersNext
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByReplicationProtectionContainers method.
   * @param options The options parameters.
   */
  listByReplicationProtectionContainersNext(
    fabricName: string,
    protectionContainerName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ReplicationMigrationItemsListByReplicationProtectionContainersNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        fabricName,
        protectionContainerName,
        nextLink,
        options: operationOptions
      },
      listByReplicationProtectionContainersNextOperationSpec
    ) as Promise<
      ReplicationMigrationItemsListByReplicationProtectionContainersNextResponse
    >;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: ReplicationMigrationItemsListNextOptionalParams
  ): Promise<ReplicationMigrationItemsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReplicationMigrationItemsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByReplicationProtectionContainersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.protectionContainerName,
    Parameters.fabricName13,
    Parameters.migrationItemName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.input3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion, Parameters.deleteOption],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.input4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const migrateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.migrateInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const testMigrateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.testMigrateInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const testMigrateCleanupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItem
    },
    201: {
      bodyMapper: Mappers.MigrationItem
    },
    202: {
      bodyMapper: Mappers.MigrationItem
    },
    204: {
      bodyMapper: Mappers.MigrationItem
    }
  },
  requestBody: Parameters.testMigrateCleanupInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.migrationItemName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  serializer
};
const listByReplicationProtectionContainersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.nextLink3
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationItemCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  serializer
};
