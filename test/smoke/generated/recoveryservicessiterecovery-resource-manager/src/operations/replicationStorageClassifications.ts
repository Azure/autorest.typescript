/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import {
  ReplicationStorageClassificationsListByReplicationFabricsResponse,
  ReplicationStorageClassificationsGetResponse,
  ReplicationStorageClassificationsListResponse,
  ReplicationStorageClassificationsListByReplicationFabricsNextResponse,
  ReplicationStorageClassificationsListNextResponse
} from "../models";

/**
 * Class representing a ReplicationStorageClassifications.
 */
export class ReplicationStorageClassifications {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationStorageClassifications class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Lists the storage classifications available in the specified fabric.
   * @param fabricName Site name of interest.
   * @param options The options parameters.
   */
  listByReplicationFabrics(
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ReplicationStorageClassificationsListByReplicationFabricsResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, options: operationOptions },
      listByReplicationFabricsOperationSpec
    ) as Promise<
      ReplicationStorageClassificationsListByReplicationFabricsResponse
    >;
  }

  /**
   * Gets the details of the specified storage classification.
   * @param fabricName Fabric name.
   * @param storageClassificationName Storage classification name.
   * @param options The options parameters.
   */
  get(
    fabricName: string,
    storageClassificationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationStorageClassificationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { fabricName, storageClassificationName, options: operationOptions },
      getOperationSpec
    ) as Promise<ReplicationStorageClassificationsGetResponse>;
  }

  /**
   * Lists the storage classifications in the vault.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationStorageClassificationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ReplicationStorageClassificationsListResponse>;
  }

  /**
   * ListByReplicationFabricsNext
   * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
   *                 method.
   * @param fabricName Site name of interest.
   * @param options The options parameters.
   */
  listByReplicationFabricsNext(
    nextLink: string,
    fabricName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ReplicationStorageClassificationsListByReplicationFabricsNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, fabricName, options: operationOptions },
      listByReplicationFabricsNextOperationSpec
    ) as Promise<
      ReplicationStorageClassificationsListByReplicationFabricsNextResponse
    >;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReplicationStorageClassificationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReplicationStorageClassificationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByReplicationFabricsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageClassificationCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName18
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageClassification
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName,
    Parameters.storageClassificationName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassifications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageClassificationCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  serializer
};
const listByReplicationFabricsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageClassificationCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.nextLink1,
    Parameters.fabricName18
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageClassificationCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  serializer
};
