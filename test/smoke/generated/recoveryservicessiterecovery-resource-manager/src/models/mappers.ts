/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationsDiscoveryCollection: coreHttp.CompositeMapper = {
  serializedName: "OperationsDiscoveryCollection",
  type: {
    name: "Composite",
    className: "OperationsDiscoveryCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "OperationsDiscovery" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDiscovery: coreHttp.CompositeMapper = {
  serializedName: "OperationsDiscovery",
  type: {
    name: "Composite",
    className: "OperationsDiscovery",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertCollection: coreHttp.CompositeMapper = {
  serializedName: "AlertCollection",
  type: {
    name: "Composite",
    className: "AlertCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Alert" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Alert: coreHttp.CompositeMapper = {
  serializedName: "Alert",
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AlertProperties"
        }
      }
    }
  }
};

export const AlertProperties: coreHttp.CompositeMapper = {
  serializedName: "AlertProperties",
  type: {
    name: "Composite",
    className: "AlertProperties",
    modelProperties: {
      sendToOwners: {
        serializedName: "sendToOwners",
        type: {
          name: "String"
        }
      },
      customEmailAddresses: {
        serializedName: "customEmailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AlertPropertiesCustomEmailAddressesItem"
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigureAlertRequest: coreHttp.CompositeMapper = {
  serializedName: "ConfigureAlertRequest",
  type: {
    name: "Composite",
    className: "ConfigureAlertRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConfigureAlertRequestProperties"
        }
      }
    }
  }
};

export const ConfigureAlertRequestProperties: coreHttp.CompositeMapper = {
  serializedName: "ConfigureAlertRequestProperties",
  type: {
    name: "Composite",
    className: "ConfigureAlertRequestProperties",
    modelProperties: {
      sendToOwners: {
        serializedName: "sendToOwners",
        type: {
          name: "String"
        }
      },
      customEmailAddresses: {
        serializedName: "customEmailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "ConfigureAlertRequestPropertiesCustomEmailAddressesItem"
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationEligibilityResultsCollection: coreHttp.CompositeMapper = {
  serializedName: "ReplicationEligibilityResultsCollection",
  type: {
    name: "Composite",
    className: "ReplicationEligibilityResultsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationEligibilityResults"
            }
          }
        }
      }
    }
  }
};

export const ReplicationEligibilityResults: coreHttp.CompositeMapper = {
  serializedName: "ReplicationEligibilityResults",
  type: {
    name: "Composite",
    className: "ReplicationEligibilityResults",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReplicationEligibilityResultsProperties"
        }
      }
    }
  }
};

export const ReplicationEligibilityResultsProperties: coreHttp.CompositeMapper = {
  serializedName: "ReplicationEligibilityResultsProperties",
  type: {
    name: "Composite",
    className: "ReplicationEligibilityResultsProperties",
    modelProperties: {
      clientRequestId: {
        serializedName: "clientRequestId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationEligibilityResultsErrorInfo"
            }
          }
        }
      }
    }
  }
};

export const ReplicationEligibilityResultsErrorInfo: coreHttp.CompositeMapper = {
  serializedName: "ReplicationEligibilityResultsErrorInfo",
  type: {
    name: "Composite",
    className: "ReplicationEligibilityResultsErrorInfo",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventCollection: coreHttp.CompositeMapper = {
  serializedName: "EventCollection",
  type: {
    name: "Composite",
    className: "EventCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Event" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Event: coreHttp.CompositeMapper = {
  serializedName: "Event",
  type: {
    name: "Composite",
    className: "Event",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EventProperties"
        }
      }
    }
  }
};

export const EventProperties: coreHttp.CompositeMapper = {
  serializedName: "EventProperties",
  type: {
    name: "Composite",
    className: "EventProperties",
    modelProperties: {
      eventCode: {
        serializedName: "eventCode",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      affectedObjectFriendlyName: {
        serializedName: "affectedObjectFriendlyName",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      timeOfOccurrence: {
        serializedName: "timeOfOccurrence",
        type: {
          name: "DateTime"
        }
      },
      fabricId: {
        serializedName: "fabricId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "EventProviderSpecificDetails"
        }
      },
      eventSpecificDetails: {
        serializedName: "eventSpecificDetails",
        type: {
          name: "Composite",
          className: "EventSpecificDetails"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      }
    }
  }
};

export const EventProviderSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "EventProviderSpecificDetails",
  type: {
    name: "Composite",
    className: "EventProviderSpecificDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "EventSpecificDetails",
  type: {
    name: "Composite",
    className: "EventSpecificDetails",
    uberParent: "EventSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthError: coreHttp.CompositeMapper = {
  serializedName: "HealthError",
  type: {
    name: "Composite",
    className: "HealthError",
    modelProperties: {
      innerHealthErrors: {
        serializedName: "innerHealthErrors",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "InnerHealthError" }
          }
        }
      },
      errorSource: {
        serializedName: "errorSource",
        type: {
          name: "String"
        }
      },
      errorType: {
        serializedName: "errorType",
        type: {
          name: "String"
        }
      },
      errorLevel: {
        serializedName: "errorLevel",
        type: {
          name: "String"
        }
      },
      errorCategory: {
        serializedName: "errorCategory",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      summaryMessage: {
        serializedName: "summaryMessage",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      },
      creationTimeUtc: {
        serializedName: "creationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      recoveryProviderErrorMessage: {
        serializedName: "recoveryProviderErrorMessage",
        type: {
          name: "String"
        }
      },
      entityId: {
        serializedName: "entityId",
        type: {
          name: "String"
        }
      },
      errorId: {
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      customerResolvability: {
        serializedName: "customerResolvability",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerHealthError: coreHttp.CompositeMapper = {
  serializedName: "InnerHealthError",
  type: {
    name: "Composite",
    className: "InnerHealthError",
    modelProperties: {
      errorSource: {
        serializedName: "errorSource",
        type: {
          name: "String"
        }
      },
      errorType: {
        serializedName: "errorType",
        type: {
          name: "String"
        }
      },
      errorLevel: {
        serializedName: "errorLevel",
        type: {
          name: "String"
        }
      },
      errorCategory: {
        serializedName: "errorCategory",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      summaryMessage: {
        serializedName: "summaryMessage",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      },
      creationTimeUtc: {
        serializedName: "creationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      recoveryProviderErrorMessage: {
        serializedName: "recoveryProviderErrorMessage",
        type: {
          name: "String"
        }
      },
      entityId: {
        serializedName: "entityId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricCollection: coreHttp.CompositeMapper = {
  serializedName: "FabricCollection",
  type: {
    name: "Composite",
    className: "FabricCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Fabric" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Fabric: coreHttp.CompositeMapper = {
  serializedName: "Fabric",
  type: {
    name: "Composite",
    className: "Fabric",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricProperties"
        }
      }
    }
  }
};

export const FabricProperties: coreHttp.CompositeMapper = {
  serializedName: "FabricProperties",
  type: {
    name: "Composite",
    className: "FabricProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      encryptionDetails: {
        serializedName: "encryptionDetails",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      rolloverEncryptionDetails: {
        serializedName: "rolloverEncryptionDetails",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      internalIdentifier: {
        serializedName: "internalIdentifier",
        type: {
          name: "String"
        }
      },
      bcdrState: {
        serializedName: "bcdrState",
        type: {
          name: "String"
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "FabricSpecificDetails"
        }
      },
      healthErrorDetails: {
        serializedName: "healthErrorDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      health: {
        serializedName: "health",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionDetails: coreHttp.CompositeMapper = {
  serializedName: "EncryptionDetails",
  type: {
    name: "Composite",
    className: "EncryptionDetails",
    modelProperties: {
      kekState: {
        serializedName: "kekState",
        type: {
          name: "String"
        }
      },
      kekCertThumbprint: {
        serializedName: "kekCertThumbprint",
        type: {
          name: "String"
        }
      },
      kekCertExpiryDate: {
        serializedName: "kekCertExpiryDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const FabricSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "FabricSpecificDetails",
  type: {
    name: "Composite",
    className: "FabricSpecificDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricCreationInput: coreHttp.CompositeMapper = {
  serializedName: "FabricCreationInput",
  type: {
    name: "Composite",
    className: "FabricCreationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricCreationInputProperties"
        }
      }
    }
  }
};

export const FabricCreationInputProperties: coreHttp.CompositeMapper = {
  serializedName: "FabricCreationInputProperties",
  type: {
    name: "Composite",
    className: "FabricCreationInputProperties",
    modelProperties: {
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "FabricSpecificCreationInput"
        }
      }
    }
  }
};

export const FabricSpecificCreationInput: coreHttp.CompositeMapper = {
  serializedName: "FabricSpecificCreationInput",
  type: {
    name: "Composite",
    className: "FabricSpecificCreationInput",
    uberParent: "FabricSpecificCreationInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverProcessServerRequest: coreHttp.CompositeMapper = {
  serializedName: "FailoverProcessServerRequest",
  type: {
    name: "Composite",
    className: "FailoverProcessServerRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FailoverProcessServerRequestProperties"
        }
      }
    }
  }
};

export const FailoverProcessServerRequestProperties: coreHttp.CompositeMapper = {
  serializedName: "FailoverProcessServerRequestProperties",
  type: {
    name: "Composite",
    className: "FailoverProcessServerRequestProperties",
    modelProperties: {
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      sourceProcessServerId: {
        serializedName: "sourceProcessServerId",
        type: {
          name: "String"
        }
      },
      targetProcessServerId: {
        serializedName: "targetProcessServerId",
        type: {
          name: "String"
        }
      },
      vmsToMigrate: {
        serializedName: "vmsToMigrate",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "FailoverProcessServerRequestPropertiesVmsToMigrateItem"
          }
        }
      },
      updateType: {
        serializedName: "updateType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RenewCertificateInput: coreHttp.CompositeMapper = {
  serializedName: "RenewCertificateInput",
  type: {
    name: "Composite",
    className: "RenewCertificateInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RenewCertificateInputProperties"
        }
      }
    }
  }
};

export const RenewCertificateInputProperties: coreHttp.CompositeMapper = {
  serializedName: "RenewCertificateInputProperties",
  type: {
    name: "Composite",
    className: "RenewCertificateInputProperties",
    modelProperties: {
      renewCertificateType: {
        serializedName: "renewCertificateType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogicalNetworkCollection: coreHttp.CompositeMapper = {
  serializedName: "LogicalNetworkCollection",
  type: {
    name: "Composite",
    className: "LogicalNetworkCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LogicalNetwork" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogicalNetwork: coreHttp.CompositeMapper = {
  serializedName: "LogicalNetwork",
  type: {
    name: "Composite",
    className: "LogicalNetwork",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LogicalNetworkProperties"
        }
      }
    }
  }
};

export const LogicalNetworkProperties: coreHttp.CompositeMapper = {
  serializedName: "LogicalNetworkProperties",
  type: {
    name: "Composite",
    className: "LogicalNetworkProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      networkVirtualizationStatus: {
        serializedName: "networkVirtualizationStatus",
        type: {
          name: "String"
        }
      },
      logicalNetworkUsage: {
        serializedName: "logicalNetworkUsage",
        type: {
          name: "String"
        }
      },
      logicalNetworkDefinitionsStatus: {
        serializedName: "logicalNetworkDefinitionsStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkCollection: coreHttp.CompositeMapper = {
  serializedName: "NetworkCollection",
  type: {
    name: "Composite",
    className: "NetworkCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Network" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Network: coreHttp.CompositeMapper = {
  serializedName: "Network",
  type: {
    name: "Composite",
    className: "Network",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkProperties"
        }
      }
    }
  }
};

export const NetworkProperties: coreHttp.CompositeMapper = {
  serializedName: "NetworkProperties",
  type: {
    name: "Composite",
    className: "NetworkProperties",
    modelProperties: {
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      subnets: {
        serializedName: "subnets",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Subnet" } }
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      networkType: {
        serializedName: "networkType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Subnet: coreHttp.CompositeMapper = {
  serializedName: "Subnet",
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      addressList: {
        serializedName: "addressList",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SubnetAddressListItem"
          }
        }
      }
    }
  }
};

export const NetworkMappingCollection: coreHttp.CompositeMapper = {
  serializedName: "NetworkMappingCollection",
  type: {
    name: "Composite",
    className: "NetworkMappingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkMapping" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkMapping: coreHttp.CompositeMapper = {
  serializedName: "NetworkMapping",
  type: {
    name: "Composite",
    className: "NetworkMapping",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkMappingProperties"
        }
      }
    }
  }
};

export const NetworkMappingProperties: coreHttp.CompositeMapper = {
  serializedName: "NetworkMappingProperties",
  type: {
    name: "Composite",
    className: "NetworkMappingProperties",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      primaryNetworkFriendlyName: {
        serializedName: "primaryNetworkFriendlyName",
        type: {
          name: "String"
        }
      },
      primaryNetworkId: {
        serializedName: "primaryNetworkId",
        type: {
          name: "String"
        }
      },
      primaryFabricFriendlyName: {
        serializedName: "primaryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryNetworkFriendlyName: {
        serializedName: "recoveryNetworkFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryNetworkId: {
        serializedName: "recoveryNetworkId",
        type: {
          name: "String"
        }
      },
      recoveryFabricArmId: {
        serializedName: "recoveryFabricArmId",
        type: {
          name: "String"
        }
      },
      recoveryFabricFriendlyName: {
        serializedName: "recoveryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      fabricSpecificSettings: {
        serializedName: "fabricSpecificSettings",
        type: {
          name: "Composite",
          className: "NetworkMappingFabricSpecificSettings"
        }
      }
    }
  }
};

export const NetworkMappingFabricSpecificSettings: coreHttp.CompositeMapper = {
  serializedName: "NetworkMappingFabricSpecificSettings",
  type: {
    name: "Composite",
    className: "NetworkMappingFabricSpecificSettings",
    uberParent: "NetworkMappingFabricSpecificSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "CreateNetworkMappingInput",
  type: {
    name: "Composite",
    className: "CreateNetworkMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateNetworkMappingInputProperties"
        }
      }
    }
  }
};

export const CreateNetworkMappingInputProperties: coreHttp.CompositeMapper = {
  serializedName: "CreateNetworkMappingInputProperties",
  type: {
    name: "Composite",
    className: "CreateNetworkMappingInputProperties",
    modelProperties: {
      recoveryFabricName: {
        serializedName: "recoveryFabricName",
        type: {
          name: "String"
        }
      },
      recoveryNetworkId: {
        serializedName: "recoveryNetworkId",
        type: {
          name: "String"
        }
      },
      fabricSpecificDetails: {
        serializedName: "fabricSpecificDetails",
        type: {
          name: "Composite",
          className: "FabricSpecificCreateNetworkMappingInput"
        }
      }
    }
  }
};

export const FabricSpecificCreateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "FabricSpecificCreateNetworkMappingInput",
  type: {
    name: "Composite",
    className: "FabricSpecificCreateNetworkMappingInput",
    uberParent: "FabricSpecificCreateNetworkMappingInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "UpdateNetworkMappingInput",
  type: {
    name: "Composite",
    className: "UpdateNetworkMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateNetworkMappingInputProperties"
        }
      }
    }
  }
};

export const UpdateNetworkMappingInputProperties: coreHttp.CompositeMapper = {
  serializedName: "UpdateNetworkMappingInputProperties",
  type: {
    name: "Composite",
    className: "UpdateNetworkMappingInputProperties",
    modelProperties: {
      recoveryFabricName: {
        serializedName: "recoveryFabricName",
        type: {
          name: "String"
        }
      },
      recoveryNetworkId: {
        serializedName: "recoveryNetworkId",
        type: {
          name: "String"
        }
      },
      fabricSpecificDetails: {
        serializedName: "fabricSpecificDetails",
        type: {
          name: "Composite",
          className: "FabricSpecificUpdateNetworkMappingInput"
        }
      }
    }
  }
};

export const FabricSpecificUpdateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "FabricSpecificUpdateNetworkMappingInput",
  type: {
    name: "Composite",
    className: "FabricSpecificUpdateNetworkMappingInput",
    uberParent: "FabricSpecificUpdateNetworkMappingInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerCollection: coreHttp.CompositeMapper = {
  serializedName: "ProtectionContainerCollection",
  type: {
    name: "Composite",
    className: "ProtectionContainerCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ProtectionContainer" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainer: coreHttp.CompositeMapper = {
  serializedName: "ProtectionContainer",
  type: {
    name: "Composite",
    className: "ProtectionContainer",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectionContainerProperties"
        }
      }
    }
  }
};

export const ProtectionContainerProperties: coreHttp.CompositeMapper = {
  serializedName: "ProtectionContainerProperties",
  type: {
    name: "Composite",
    className: "ProtectionContainerProperties",
    modelProperties: {
      fabricFriendlyName: {
        serializedName: "fabricFriendlyName",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        type: {
          name: "Number"
        }
      },
      pairingStatus: {
        serializedName: "pairingStatus",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      },
      fabricSpecificDetails: {
        serializedName: "fabricSpecificDetails",
        type: {
          name: "Composite",
          className: "ProtectionContainerFabricSpecificDetails"
        }
      }
    }
  }
};

export const ProtectionContainerFabricSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "ProtectionContainerFabricSpecificDetails",
  type: {
    name: "Composite",
    className: "ProtectionContainerFabricSpecificDetails",
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateProtectionContainerInput: coreHttp.CompositeMapper = {
  serializedName: "CreateProtectionContainerInput",
  type: {
    name: "Composite",
    className: "CreateProtectionContainerInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateProtectionContainerInputProperties"
        }
      }
    }
  }
};

export const CreateProtectionContainerInputProperties: coreHttp.CompositeMapper = {
  serializedName: "CreateProtectionContainerInputProperties",
  type: {
    name: "Composite",
    className: "CreateProtectionContainerInputProperties",
    modelProperties: {
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationProviderSpecificContainerCreationInput"
            }
          }
        }
      }
    }
  }
};

export const ReplicationProviderSpecificContainerCreationInput: coreHttp.CompositeMapper = {
  serializedName: "ReplicationProviderSpecificContainerCreationInput",
  type: {
    name: "Composite",
    className: "ReplicationProviderSpecificContainerCreationInput",
    uberParent: "ReplicationProviderSpecificContainerCreationInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiscoverProtectableItemRequest: coreHttp.CompositeMapper = {
  serializedName: "DiscoverProtectableItemRequest",
  type: {
    name: "Composite",
    className: "DiscoverProtectableItemRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DiscoverProtectableItemRequestProperties"
        }
      }
    }
  }
};

export const DiscoverProtectableItemRequestProperties: coreHttp.CompositeMapper = {
  serializedName: "DiscoverProtectableItemRequestProperties",
  type: {
    name: "Composite",
    className: "DiscoverProtectableItemRequestProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationItemCollection: coreHttp.CompositeMapper = {
  serializedName: "MigrationItemCollection",
  type: {
    name: "Composite",
    className: "MigrationItemCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MigrationItem" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationItem: coreHttp.CompositeMapper = {
  serializedName: "MigrationItem",
  type: {
    name: "Composite",
    className: "MigrationItem",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MigrationItemProperties"
        }
      }
    }
  }
};

export const MigrationItemProperties: coreHttp.CompositeMapper = {
  serializedName: "MigrationItemProperties",
  type: {
    name: "Composite",
    className: "MigrationItemProperties",
    modelProperties: {
      machineName: {
        serializedName: "machineName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyFriendlyName: {
        serializedName: "policyFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recoveryServicesProviderId: {
        serializedName: "recoveryServicesProviderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationState: {
        serializedName: "migrationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationStateDescription: {
        serializedName: "migrationStateDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testMigrateState: {
        serializedName: "testMigrateState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testMigrateStateDescription: {
        serializedName: "testMigrateStateDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      allowedOperations: {
        serializedName: "allowedOperations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MigrationItemOperation"
          }
        }
      },
      currentJob: {
        serializedName: "currentJob",
        type: {
          name: "Composite",
          className: "CurrentJobDetails"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "MigrationProviderSpecificSettings"
        }
      }
    }
  }
};

export const CurrentJobDetails: coreHttp.CompositeMapper = {
  serializedName: "CurrentJobDetails",
  type: {
    name: "Composite",
    className: "CurrentJobDetails",
    modelProperties: {
      jobName: {
        serializedName: "jobName",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MigrationProviderSpecificSettings: coreHttp.CompositeMapper = {
  serializedName: "MigrationProviderSpecificSettings",
  type: {
    name: "Composite",
    className: "MigrationProviderSpecificSettings",
    uberParent: "MigrationProviderSpecificSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnableMigrationInput: coreHttp.CompositeMapper = {
  serializedName: "EnableMigrationInput",
  type: {
    name: "Composite",
    className: "EnableMigrationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EnableMigrationInputProperties"
        }
      }
    }
  }
};

export const EnableMigrationInputProperties: coreHttp.CompositeMapper = {
  serializedName: "EnableMigrationInputProperties",
  type: {
    name: "Composite",
    className: "EnableMigrationInputProperties",
    modelProperties: {
      policyId: {
        serializedName: "policyId",
        required: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "EnableMigrationProviderSpecificInput"
        }
      }
    }
  }
};

export const EnableMigrationProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "EnableMigrationProviderSpecificInput",
  type: {
    name: "Composite",
    className: "EnableMigrationProviderSpecificInput",
    uberParent: "EnableMigrationProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateMigrationItemInput: coreHttp.CompositeMapper = {
  serializedName: "UpdateMigrationItemInput",
  type: {
    name: "Composite",
    className: "UpdateMigrationItemInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateMigrationItemInputProperties"
        }
      }
    }
  }
};

export const UpdateMigrationItemInputProperties: coreHttp.CompositeMapper = {
  serializedName: "UpdateMigrationItemInputProperties",
  type: {
    name: "Composite",
    className: "UpdateMigrationItemInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "UpdateMigrationItemProviderSpecificInput"
        }
      }
    }
  }
};

export const UpdateMigrationItemProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "UpdateMigrationItemProviderSpecificInput",
  type: {
    name: "Composite",
    className: "UpdateMigrationItemProviderSpecificInput",
    uberParent: "UpdateMigrationItemProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrateInput: coreHttp.CompositeMapper = {
  serializedName: "MigrateInput",
  type: {
    name: "Composite",
    className: "MigrateInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MigrateInputProperties"
        }
      }
    }
  }
};

export const MigrateInputProperties: coreHttp.CompositeMapper = {
  serializedName: "MigrateInputProperties",
  type: {
    name: "Composite",
    className: "MigrateInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "MigrateProviderSpecificInput"
        }
      }
    }
  }
};

export const MigrateProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "MigrateProviderSpecificInput",
  type: {
    name: "Composite",
    className: "MigrateProviderSpecificInput",
    uberParent: "MigrateProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationRecoveryPointCollection: coreHttp.CompositeMapper = {
  serializedName: "MigrationRecoveryPointCollection",
  type: {
    name: "Composite",
    className: "MigrationRecoveryPointCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MigrationRecoveryPoint" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationRecoveryPoint: coreHttp.CompositeMapper = {
  serializedName: "MigrationRecoveryPoint",
  type: {
    name: "Composite",
    className: "MigrationRecoveryPoint",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MigrationRecoveryPointProperties"
        }
      }
    }
  }
};

export const MigrationRecoveryPointProperties: coreHttp.CompositeMapper = {
  serializedName: "MigrationRecoveryPointProperties",
  type: {
    name: "Composite",
    className: "MigrationRecoveryPointProperties",
    modelProperties: {
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestMigrateInput: coreHttp.CompositeMapper = {
  serializedName: "TestMigrateInput",
  type: {
    name: "Composite",
    className: "TestMigrateInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TestMigrateInputProperties"
        }
      }
    }
  }
};

export const TestMigrateInputProperties: coreHttp.CompositeMapper = {
  serializedName: "TestMigrateInputProperties",
  type: {
    name: "Composite",
    className: "TestMigrateInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "TestMigrateProviderSpecificInput"
        }
      }
    }
  }
};

export const TestMigrateProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "TestMigrateProviderSpecificInput",
  type: {
    name: "Composite",
    className: "TestMigrateProviderSpecificInput",
    uberParent: "TestMigrateProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestMigrateCleanupInput: coreHttp.CompositeMapper = {
  serializedName: "TestMigrateCleanupInput",
  type: {
    name: "Composite",
    className: "TestMigrateCleanupInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TestMigrateCleanupInputProperties"
        }
      }
    }
  }
};

export const TestMigrateCleanupInputProperties: coreHttp.CompositeMapper = {
  serializedName: "TestMigrateCleanupInputProperties",
  type: {
    name: "Composite",
    className: "TestMigrateCleanupInputProperties",
    modelProperties: {
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectableItemCollection: coreHttp.CompositeMapper = {
  serializedName: "ProtectableItemCollection",
  type: {
    name: "Composite",
    className: "ProtectableItemCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ProtectableItem" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectableItem: coreHttp.CompositeMapper = {
  serializedName: "ProtectableItem",
  type: {
    name: "Composite",
    className: "ProtectableItem",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectableItemProperties"
        }
      }
    }
  }
};

export const ProtectableItemProperties: coreHttp.CompositeMapper = {
  serializedName: "ProtectableItemProperties",
  type: {
    name: "Composite",
    className: "ProtectableItemProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "String"
        }
      },
      replicationProtectedItemId: {
        serializedName: "replicationProtectedItemId",
        type: {
          name: "String"
        }
      },
      recoveryServicesProviderId: {
        serializedName: "recoveryServicesProviderId",
        type: {
          name: "String"
        }
      },
      protectionReadinessErrors: {
        serializedName: "protectionReadinessErrors",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "ProtectableItemPropertiesProtectionReadinessErrorsItem"
          }
        }
      },
      supportedReplicationProviders: {
        serializedName: "supportedReplicationProviders",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "ProtectableItemPropertiesSupportedReplicationProvidersItem"
          }
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "ConfigurationSettings"
        }
      }
    }
  }
};

export const ConfigurationSettings: coreHttp.CompositeMapper = {
  serializedName: "ConfigurationSettings",
  type: {
    name: "Composite",
    className: "ConfigurationSettings",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationProtectedItemCollection: coreHttp.CompositeMapper = {
  serializedName: "ReplicationProtectedItemCollection",
  type: {
    name: "Composite",
    className: "ReplicationProtectedItemCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReplicationProtectedItem" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationProtectedItem: coreHttp.CompositeMapper = {
  serializedName: "ReplicationProtectedItem",
  type: {
    name: "Composite",
    className: "ReplicationProtectedItem",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReplicationProtectedItemProperties"
        }
      }
    }
  }
};

export const ReplicationProtectedItemProperties: coreHttp.CompositeMapper = {
  serializedName: "ReplicationProtectedItemProperties",
  type: {
    name: "Composite",
    className: "ReplicationProtectedItemProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      protectedItemType: {
        serializedName: "protectedItemType",
        type: {
          name: "String"
        }
      },
      protectableItemId: {
        serializedName: "protectableItemId",
        type: {
          name: "String"
        }
      },
      recoveryServicesProviderId: {
        serializedName: "recoveryServicesProviderId",
        type: {
          name: "String"
        }
      },
      primaryFabricFriendlyName: {
        serializedName: "primaryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      primaryFabricProvider: {
        serializedName: "primaryFabricProvider",
        type: {
          name: "String"
        }
      },
      recoveryFabricFriendlyName: {
        serializedName: "recoveryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryFabricId: {
        serializedName: "recoveryFabricId",
        type: {
          name: "String"
        }
      },
      primaryProtectionContainerFriendlyName: {
        serializedName: "primaryProtectionContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryProtectionContainerFriendlyName: {
        serializedName: "recoveryProtectionContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        type: {
          name: "String"
        }
      },
      protectionStateDescription: {
        serializedName: "protectionStateDescription",
        type: {
          name: "String"
        }
      },
      activeLocation: {
        serializedName: "activeLocation",
        type: {
          name: "String"
        }
      },
      testFailoverState: {
        serializedName: "testFailoverState",
        type: {
          name: "String"
        }
      },
      testFailoverStateDescription: {
        serializedName: "testFailoverStateDescription",
        type: {
          name: "String"
        }
      },
      allowedOperations: {
        serializedName: "allowedOperations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "ReplicationProtectedItemPropertiesAllowedOperationsItem"
          }
        }
      },
      replicationHealth: {
        serializedName: "replicationHealth",
        type: {
          name: "String"
        }
      },
      failoverHealth: {
        serializedName: "failoverHealth",
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      policyFriendlyName: {
        serializedName: "policyFriendlyName",
        type: {
          name: "String"
        }
      },
      lastSuccessfulFailoverTime: {
        serializedName: "lastSuccessfulFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      lastSuccessfulTestFailoverTime: {
        serializedName: "lastSuccessfulTestFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      currentScenario: {
        serializedName: "currentScenario",
        type: {
          name: "Composite",
          className: "CurrentScenarioDetails"
        }
      },
      failoverRecoveryPointId: {
        serializedName: "failoverRecoveryPointId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ReplicationProviderSpecificSettings"
        }
      },
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CurrentScenarioDetails: coreHttp.CompositeMapper = {
  serializedName: "CurrentScenarioDetails",
  type: {
    name: "Composite",
    className: "CurrentScenarioDetails",
    modelProperties: {
      scenarioName: {
        serializedName: "scenarioName",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReplicationProviderSpecificSettings: coreHttp.CompositeMapper = {
  serializedName: "ReplicationProviderSpecificSettings",
  type: {
    name: "Composite",
    className: "ReplicationProviderSpecificSettings",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnableProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "EnableProtectionInput",
  type: {
    name: "Composite",
    className: "EnableProtectionInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EnableProtectionInputProperties"
        }
      }
    }
  }
};

export const EnableProtectionInputProperties: coreHttp.CompositeMapper = {
  serializedName: "EnableProtectionInputProperties",
  type: {
    name: "Composite",
    className: "EnableProtectionInputProperties",
    modelProperties: {
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      protectableItemId: {
        serializedName: "protectableItemId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "EnableProtectionProviderSpecificInput"
        }
      }
    }
  }
};

export const EnableProtectionProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "EnableProtectionProviderSpecificInput",
  type: {
    name: "Composite",
    className: "EnableProtectionProviderSpecificInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateReplicationProtectedItemInput: coreHttp.CompositeMapper = {
  serializedName: "UpdateReplicationProtectedItemInput",
  type: {
    name: "Composite",
    className: "UpdateReplicationProtectedItemInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateReplicationProtectedItemInputProperties"
        }
      }
    }
  }
};

export const UpdateReplicationProtectedItemInputProperties: coreHttp.CompositeMapper = {
  serializedName: "UpdateReplicationProtectedItemInputProperties",
  type: {
    name: "Composite",
    className: "UpdateReplicationProtectedItemInputProperties",
    modelProperties: {
      recoveryAzureVMName: {
        serializedName: "recoveryAzureVMName",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMSize: {
        serializedName: "recoveryAzureVMSize",
        type: {
          name: "String"
        }
      },
      selectedRecoveryAzureNetworkId: {
        serializedName: "selectedRecoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedTfoAzureNetworkId: {
        serializedName: "selectedTfoAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedSourceNicId: {
        serializedName: "selectedSourceNicId",
        type: {
          name: "String"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VMNicInputDetails" }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "UpdateReplicationProtectedItemProviderInput"
        }
      }
    }
  }
};

export const VMNicInputDetails: coreHttp.CompositeMapper = {
  serializedName: "VMNicInputDetails",
  type: {
    name: "Composite",
    className: "VMNicInputDetails",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        type: {
          name: "String"
        }
      },
      recoveryVMSubnetName: {
        serializedName: "recoveryVMSubnetName",
        type: {
          name: "String"
        }
      },
      replicaNicStaticIPAddress: {
        serializedName: "replicaNicStaticIPAddress",
        type: {
          name: "String"
        }
      },
      selectionType: {
        serializedName: "selectionType",
        type: {
          name: "String"
        }
      },
      recoveryPublicIpAddressId: {
        serializedName: "recoveryPublicIpAddressId",
        type: {
          name: "String"
        }
      },
      recoveryNetworkSecurityGroupId: {
        serializedName: "recoveryNetworkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      recoveryLBBackendAddressPoolIds: {
        serializedName: "recoveryLBBackendAddressPoolIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "VMNicInputDetailsRecoveryLBBackendAddressPoolIdsItem"
          }
        }
      },
      enableAcceleratedNetworkingOnRecovery: {
        serializedName: "enableAcceleratedNetworkingOnRecovery",
        type: {
          name: "Boolean"
        }
      },
      tfoVMSubnetName: {
        serializedName: "tfoVMSubnetName",
        type: {
          name: "String"
        }
      },
      tfoNetworkSecurityGroupId: {
        serializedName: "tfoNetworkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      enableAcceleratedNetworkingOnTfo: {
        serializedName: "enableAcceleratedNetworkingOnTfo",
        type: {
          name: "Boolean"
        }
      },
      tfoIPConfigs: {
        serializedName: "tfoIPConfigs",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IPConfig" } }
        }
      },
      recoveryNicName: {
        serializedName: "recoveryNicName",
        type: {
          name: "String"
        }
      },
      recoveryNicResourceGroupName: {
        serializedName: "recoveryNicResourceGroupName",
        type: {
          name: "String"
        }
      },
      reuseExistingNic: {
        serializedName: "reuseExistingNic",
        type: {
          name: "Boolean"
        }
      },
      tfoNicName: {
        serializedName: "tfoNicName",
        type: {
          name: "String"
        }
      },
      tfoNicResourceGroupName: {
        serializedName: "tfoNicResourceGroupName",
        type: {
          name: "String"
        }
      },
      tfoReuseExistingNic: {
        serializedName: "tfoReuseExistingNic",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const IPConfig: coreHttp.CompositeMapper = {
  serializedName: "IPConfig",
  type: {
    name: "Composite",
    className: "IPConfig",
    modelProperties: {
      staticIPAddress: {
        serializedName: "staticIPAddress",
        type: {
          name: "String"
        }
      },
      publicIpAddressId: {
        serializedName: "publicIpAddressId",
        type: {
          name: "String"
        }
      },
      lBBackendAddressPoolIds: {
        serializedName: "lBBackendAddressPoolIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "IPConfigLBBackendAddressPoolIdsItem"
          }
        }
      }
    }
  }
};

export const UpdateReplicationProtectedItemProviderInput: coreHttp.CompositeMapper = {
  serializedName: "UpdateReplicationProtectedItemProviderInput",
  type: {
    name: "Composite",
    className: "UpdateReplicationProtectedItemProviderInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddDisksInput: coreHttp.CompositeMapper = {
  serializedName: "AddDisksInput",
  type: {
    name: "Composite",
    className: "AddDisksInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AddDisksInputProperties"
        }
      }
    }
  }
};

export const AddDisksInputProperties: coreHttp.CompositeMapper = {
  serializedName: "AddDisksInputProperties",
  type: {
    name: "Composite",
    className: "AddDisksInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "AddDisksProviderSpecificInput"
        }
      }
    }
  }
};

export const AddDisksProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "AddDisksProviderSpecificInput",
  type: {
    name: "Composite",
    className: "AddDisksProviderSpecificInput",
    uberParent: "AddDisksProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplyRecoveryPointInput: coreHttp.CompositeMapper = {
  serializedName: "ApplyRecoveryPointInput",
  type: {
    name: "Composite",
    className: "ApplyRecoveryPointInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ApplyRecoveryPointInputProperties"
        }
      }
    }
  }
};

export const ApplyRecoveryPointInputProperties: coreHttp.CompositeMapper = {
  serializedName: "ApplyRecoveryPointInputProperties",
  type: {
    name: "Composite",
    className: "ApplyRecoveryPointInputProperties",
    modelProperties: {
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ApplyRecoveryPointProviderSpecificInput"
        }
      }
    }
  }
};

export const ApplyRecoveryPointProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "ApplyRecoveryPointProviderSpecificInput",
  type: {
    name: "Composite",
    className: "ApplyRecoveryPointProviderSpecificInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlannedFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "PlannedFailoverInput",
  type: {
    name: "Composite",
    className: "PlannedFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PlannedFailoverInputProperties"
        }
      }
    }
  }
};

export const PlannedFailoverInputProperties: coreHttp.CompositeMapper = {
  serializedName: "PlannedFailoverInputProperties",
  type: {
    name: "Composite",
    className: "PlannedFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ProviderSpecificFailoverInput"
        }
      }
    }
  }
};

export const ProviderSpecificFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "ProviderSpecificFailoverInput",
  type: {
    name: "Composite",
    className: "ProviderSpecificFailoverInput",
    uberParent: "ProviderSpecificFailoverInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPointCollection: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPointCollection",
  type: {
    name: "Composite",
    className: "RecoveryPointCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RecoveryPoint" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPoint: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPoint",
  type: {
    name: "Composite",
    className: "RecoveryPoint",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPointProperties"
        }
      }
    }
  }
};

export const RecoveryPointProperties: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPointProperties",
  type: {
    name: "Composite",
    className: "RecoveryPointProperties",
    modelProperties: {
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ProviderSpecificRecoveryPointDetails"
        }
      }
    }
  }
};

export const ProviderSpecificRecoveryPointDetails: coreHttp.CompositeMapper = {
  serializedName: "ProviderSpecificRecoveryPointDetails",
  type: {
    name: "Composite",
    className: "ProviderSpecificRecoveryPointDetails",
    uberParent: "ProviderSpecificRecoveryPointDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DisableProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "DisableProtectionInput",
  type: {
    name: "Composite",
    className: "DisableProtectionInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DisableProtectionInputProperties"
        }
      }
    }
  }
};

export const DisableProtectionInputProperties: coreHttp.CompositeMapper = {
  serializedName: "DisableProtectionInputProperties",
  type: {
    name: "Composite",
    className: "DisableProtectionInputProperties",
    modelProperties: {
      disableProtectionReason: {
        serializedName: "disableProtectionReason",
        type: {
          name: "String"
        }
      },
      replicationProviderInput: {
        serializedName: "replicationProviderInput",
        type: {
          name: "Composite",
          className: "DisableProtectionProviderSpecificInput"
        }
      }
    }
  }
};

export const DisableProtectionProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "DisableProtectionProviderSpecificInput",
  type: {
    name: "Composite",
    className: "DisableProtectionProviderSpecificInput",
    uberParent: "DisableProtectionProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RemoveDisksInput: coreHttp.CompositeMapper = {
  serializedName: "RemoveDisksInput",
  type: {
    name: "Composite",
    className: "RemoveDisksInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RemoveDisksInputProperties"
        }
      }
    }
  }
};

export const RemoveDisksInputProperties: coreHttp.CompositeMapper = {
  serializedName: "RemoveDisksInputProperties",
  type: {
    name: "Composite",
    className: "RemoveDisksInputProperties",
    modelProperties: {
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "RemoveDisksProviderSpecificInput"
        }
      }
    }
  }
};

export const RemoveDisksProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "RemoveDisksProviderSpecificInput",
  type: {
    name: "Composite",
    className: "RemoveDisksProviderSpecificInput",
    uberParent: "RemoveDisksProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReverseReplicationInput: coreHttp.CompositeMapper = {
  serializedName: "ReverseReplicationInput",
  type: {
    name: "Composite",
    className: "ReverseReplicationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReverseReplicationInputProperties"
        }
      }
    }
  }
};

export const ReverseReplicationInputProperties: coreHttp.CompositeMapper = {
  serializedName: "ReverseReplicationInputProperties",
  type: {
    name: "Composite",
    className: "ReverseReplicationInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ReverseReplicationProviderSpecificInput"
        }
      }
    }
  }
};

export const ReverseReplicationProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "ReverseReplicationProviderSpecificInput",
  type: {
    name: "Composite",
    className: "ReverseReplicationProviderSpecificInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResolveHealthInput: coreHttp.CompositeMapper = {
  serializedName: "ResolveHealthInput",
  type: {
    name: "Composite",
    className: "ResolveHealthInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResolveHealthInputProperties"
        }
      }
    }
  }
};

export const ResolveHealthInputProperties: coreHttp.CompositeMapper = {
  serializedName: "ResolveHealthInputProperties",
  type: {
    name: "Composite",
    className: "ResolveHealthInputProperties",
    modelProperties: {
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResolveHealthError" }
          }
        }
      }
    }
  }
};

export const ResolveHealthError: coreHttp.CompositeMapper = {
  serializedName: "ResolveHealthError",
  type: {
    name: "Composite",
    className: "ResolveHealthError",
    modelProperties: {
      healthErrorId: {
        serializedName: "healthErrorId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetComputeSizeCollection: coreHttp.CompositeMapper = {
  serializedName: "TargetComputeSizeCollection",
  type: {
    name: "Composite",
    className: "TargetComputeSizeCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TargetComputeSize" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetComputeSize: coreHttp.CompositeMapper = {
  serializedName: "TargetComputeSize",
  type: {
    name: "Composite",
    className: "TargetComputeSize",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TargetComputeSizeProperties"
        }
      }
    }
  }
};

export const TargetComputeSizeProperties: coreHttp.CompositeMapper = {
  serializedName: "TargetComputeSizeProperties",
  type: {
    name: "Composite",
    className: "TargetComputeSizeProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      cpuCoresCount: {
        serializedName: "cpuCoresCount",
        type: {
          name: "Number"
        }
      },
      vCPUsAvailable: {
        serializedName: "vCPUsAvailable",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memoryInGB: {
        serializedName: "memoryInGB",
        type: {
          name: "Number"
        }
      },
      maxDataDiskCount: {
        serializedName: "maxDataDiskCount",
        type: {
          name: "Number"
        }
      },
      maxNicsCount: {
        serializedName: "maxNicsCount",
        type: {
          name: "Number"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ComputeSizeErrorDetails" }
          }
        }
      },
      highIopsSupported: {
        serializedName: "highIopsSupported",
        type: {
          name: "String"
        }
      },
      hyperVGenerations: {
        serializedName: "hyperVGenerations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "TargetComputeSizePropertiesHyperVGenerationsItem"
          }
        }
      }
    }
  }
};

export const ComputeSizeErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "ComputeSizeErrorDetails",
  type: {
    name: "Composite",
    className: "ComputeSizeErrorDetails",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "TestFailoverInput",
  type: {
    name: "Composite",
    className: "TestFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TestFailoverInputProperties"
        }
      }
    }
  }
};

export const TestFailoverInputProperties: coreHttp.CompositeMapper = {
  serializedName: "TestFailoverInputProperties",
  type: {
    name: "Composite",
    className: "TestFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        type: {
          name: "String"
        }
      },
      networkType: {
        serializedName: "networkType",
        type: {
          name: "String"
        }
      },
      networkId: {
        serializedName: "networkId",
        type: {
          name: "String"
        }
      },
      skipTestFailoverCleanup: {
        serializedName: "skipTestFailoverCleanup",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ProviderSpecificFailoverInput"
        }
      }
    }
  }
};

export const TestFailoverCleanupInput: coreHttp.CompositeMapper = {
  serializedName: "TestFailoverCleanupInput",
  type: {
    name: "Composite",
    className: "TestFailoverCleanupInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TestFailoverCleanupInputProperties"
        }
      }
    }
  }
};

export const TestFailoverCleanupInputProperties: coreHttp.CompositeMapper = {
  serializedName: "TestFailoverCleanupInputProperties",
  type: {
    name: "Composite",
    className: "TestFailoverCleanupInputProperties",
    modelProperties: {
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnplannedFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "UnplannedFailoverInput",
  type: {
    name: "Composite",
    className: "UnplannedFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UnplannedFailoverInputProperties"
        }
      }
    }
  }
};

export const UnplannedFailoverInputProperties: coreHttp.CompositeMapper = {
  serializedName: "UnplannedFailoverInputProperties",
  type: {
    name: "Composite",
    className: "UnplannedFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        type: {
          name: "String"
        }
      },
      sourceSiteOperations: {
        serializedName: "sourceSiteOperations",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ProviderSpecificFailoverInput"
        }
      }
    }
  }
};

export const UpdateMobilityServiceRequest: coreHttp.CompositeMapper = {
  serializedName: "UpdateMobilityServiceRequest",
  type: {
    name: "Composite",
    className: "UpdateMobilityServiceRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateMobilityServiceRequestProperties"
        }
      }
    }
  }
};

export const UpdateMobilityServiceRequestProperties: coreHttp.CompositeMapper = {
  serializedName: "UpdateMobilityServiceRequestProperties",
  type: {
    name: "Composite",
    className: "UpdateMobilityServiceRequestProperties",
    modelProperties: {
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerMappingCollection: coreHttp.CompositeMapper = {
  serializedName: "ProtectionContainerMappingCollection",
  type: {
    name: "Composite",
    className: "ProtectionContainerMappingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ProtectionContainerMapping" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerMapping: coreHttp.CompositeMapper = {
  serializedName: "ProtectionContainerMapping",
  type: {
    name: "Composite",
    className: "ProtectionContainerMapping",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectionContainerMappingProperties"
        }
      }
    }
  }
};

export const ProtectionContainerMappingProperties: coreHttp.CompositeMapper = {
  serializedName: "ProtectionContainerMappingProperties",
  type: {
    name: "Composite",
    className: "ProtectionContainerMappingProperties",
    modelProperties: {
      targetProtectionContainerId: {
        serializedName: "targetProtectionContainerId",
        type: {
          name: "String"
        }
      },
      targetProtectionContainerFriendlyName: {
        serializedName: "targetProtectionContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "ProtectionContainerMappingProviderSpecificDetails"
        }
      },
      health: {
        serializedName: "health",
        type: {
          name: "String"
        }
      },
      healthErrorDetails: {
        serializedName: "healthErrorDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      sourceProtectionContainerFriendlyName: {
        serializedName: "sourceProtectionContainerFriendlyName",
        type: {
          name: "String"
        }
      },
      sourceFabricFriendlyName: {
        serializedName: "sourceFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      targetFabricFriendlyName: {
        serializedName: "targetFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      policyFriendlyName: {
        serializedName: "policyFriendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionContainerMappingProviderSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "ProtectionContainerMappingProviderSpecificDetails",
  type: {
    name: "Composite",
    className: "ProtectionContainerMappingProviderSpecificDetails",
    uberParent: "ProtectionContainerMappingProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateProtectionContainerMappingInput: coreHttp.CompositeMapper = {
  serializedName: "CreateProtectionContainerMappingInput",
  type: {
    name: "Composite",
    className: "CreateProtectionContainerMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateProtectionContainerMappingInputProperties"
        }
      }
    }
  }
};

export const CreateProtectionContainerMappingInputProperties: coreHttp.CompositeMapper = {
  serializedName: "CreateProtectionContainerMappingInputProperties",
  type: {
    name: "Composite",
    className: "CreateProtectionContainerMappingInputProperties",
    modelProperties: {
      targetProtectionContainerId: {
        serializedName: "targetProtectionContainerId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Composite",
          className: "ReplicationProviderSpecificContainerMappingInput"
        }
      }
    }
  }
};

export const ReplicationProviderSpecificContainerMappingInput: coreHttp.CompositeMapper = {
  serializedName: "ReplicationProviderSpecificContainerMappingInput",
  type: {
    name: "Composite",
    className: "ReplicationProviderSpecificContainerMappingInput",
    uberParent: "ReplicationProviderSpecificContainerMappingInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateProtectionContainerMappingInput: coreHttp.CompositeMapper = {
  serializedName: "UpdateProtectionContainerMappingInput",
  type: {
    name: "Composite",
    className: "UpdateProtectionContainerMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateProtectionContainerMappingInputProperties"
        }
      }
    }
  }
};

export const UpdateProtectionContainerMappingInputProperties: coreHttp.CompositeMapper = {
  serializedName: "UpdateProtectionContainerMappingInputProperties",
  type: {
    name: "Composite",
    className: "UpdateProtectionContainerMappingInputProperties",
    modelProperties: {
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Composite",
          className: "ReplicationProviderSpecificUpdateContainerMappingInput"
        }
      }
    }
  }
};

export const ReplicationProviderSpecificUpdateContainerMappingInput: coreHttp.CompositeMapper = {
  serializedName: "ReplicationProviderSpecificUpdateContainerMappingInput",
  type: {
    name: "Composite",
    className: "ReplicationProviderSpecificUpdateContainerMappingInput",
    uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RemoveProtectionContainerMappingInput: coreHttp.CompositeMapper = {
  serializedName: "RemoveProtectionContainerMappingInput",
  type: {
    name: "Composite",
    className: "RemoveProtectionContainerMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RemoveProtectionContainerMappingInputProperties"
        }
      }
    }
  }
};

export const RemoveProtectionContainerMappingInputProperties: coreHttp.CompositeMapper = {
  serializedName: "RemoveProtectionContainerMappingInputProperties",
  type: {
    name: "Composite",
    className: "RemoveProtectionContainerMappingInputProperties",
    modelProperties: {
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Composite",
          className: "ReplicationProviderContainerUnmappingInput"
        }
      }
    }
  }
};

export const ReplicationProviderContainerUnmappingInput: coreHttp.CompositeMapper = {
  serializedName: "ReplicationProviderContainerUnmappingInput",
  type: {
    name: "Composite",
    className: "ReplicationProviderContainerUnmappingInput",
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SwitchProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "SwitchProtectionInput",
  type: {
    name: "Composite",
    className: "SwitchProtectionInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SwitchProtectionInputProperties"
        }
      }
    }
  }
};

export const SwitchProtectionInputProperties: coreHttp.CompositeMapper = {
  serializedName: "SwitchProtectionInputProperties",
  type: {
    name: "Composite",
    className: "SwitchProtectionInputProperties",
    modelProperties: {
      replicationProtectedItemName: {
        serializedName: "replicationProtectedItemName",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "SwitchProtectionProviderSpecificInput"
        }
      }
    }
  }
};

export const SwitchProtectionProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "SwitchProtectionProviderSpecificInput",
  type: {
    name: "Composite",
    className: "SwitchProtectionProviderSpecificInput",
    uberParent: "SwitchProtectionProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryServicesProviderCollection: coreHttp.CompositeMapper = {
  serializedName: "RecoveryServicesProviderCollection",
  type: {
    name: "Composite",
    className: "RecoveryServicesProviderCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoveryServicesProvider" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryServicesProvider: coreHttp.CompositeMapper = {
  serializedName: "RecoveryServicesProvider",
  type: {
    name: "Composite",
    className: "RecoveryServicesProvider",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryServicesProviderProperties"
        }
      }
    }
  }
};

export const RecoveryServicesProviderProperties: coreHttp.CompositeMapper = {
  serializedName: "RecoveryServicesProviderProperties",
  type: {
    name: "Composite",
    className: "RecoveryServicesProviderProperties",
    modelProperties: {
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      providerVersion: {
        serializedName: "providerVersion",
        type: {
          name: "String"
        }
      },
      serverVersion: {
        serializedName: "serverVersion",
        type: {
          name: "String"
        }
      },
      providerVersionState: {
        serializedName: "providerVersionState",
        type: {
          name: "String"
        }
      },
      providerVersionExpiryDate: {
        serializedName: "providerVersionExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      fabricFriendlyName: {
        serializedName: "fabricFriendlyName",
        type: {
          name: "String"
        }
      },
      lastHeartBeat: {
        serializedName: "lastHeartBeat",
        type: {
          name: "DateTime"
        }
      },
      connectionStatus: {
        serializedName: "connectionStatus",
        type: {
          name: "String"
        }
      },
      protectedItemCount: {
        serializedName: "protectedItemCount",
        type: {
          name: "Number"
        }
      },
      allowedScenarios: {
        serializedName: "allowedScenarios",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "RecoveryServicesProviderPropertiesAllowedScenariosItem"
          }
        }
      },
      healthErrorDetails: {
        serializedName: "healthErrorDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      draIdentifier: {
        serializedName: "draIdentifier",
        type: {
          name: "String"
        }
      },
      authenticationIdentityDetails: {
        serializedName: "authenticationIdentityDetails",
        type: {
          name: "Composite",
          className: "IdentityProviderDetails"
        }
      },
      resourceAccessIdentityDetails: {
        serializedName: "resourceAccessIdentityDetails",
        type: {
          name: "Composite",
          className: "IdentityProviderDetails"
        }
      },
      providerVersionDetails: {
        serializedName: "providerVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      }
    }
  }
};

export const IdentityProviderDetails: coreHttp.CompositeMapper = {
  serializedName: "IdentityProviderDetails",
  type: {
    name: "Composite",
    className: "IdentityProviderDetails",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      applicationId: {
        serializedName: "applicationId",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      },
      audience: {
        serializedName: "audience",
        type: {
          name: "String"
        }
      },
      aadAuthority: {
        serializedName: "aadAuthority",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VersionDetails: coreHttp.CompositeMapper = {
  serializedName: "VersionDetails",
  type: {
    name: "Composite",
    className: "VersionDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      expiryDate: {
        serializedName: "expiryDate",
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddRecoveryServicesProviderInput: coreHttp.CompositeMapper = {
  serializedName: "AddRecoveryServicesProviderInput",
  type: {
    name: "Composite",
    className: "AddRecoveryServicesProviderInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AddRecoveryServicesProviderInputProperties"
        }
      }
    }
  }
};

export const AddRecoveryServicesProviderInputProperties: coreHttp.CompositeMapper = {
  serializedName: "AddRecoveryServicesProviderInputProperties",
  type: {
    name: "Composite",
    className: "AddRecoveryServicesProviderInputProperties",
    modelProperties: {
      machineName: {
        serializedName: "machineName",
        required: true,
        type: {
          name: "String"
        }
      },
      authenticationIdentityInput: {
        serializedName: "authenticationIdentityInput",
        type: {
          name: "Composite",
          className: "IdentityProviderInput"
        }
      },
      resourceAccessIdentityInput: {
        serializedName: "resourceAccessIdentityInput",
        type: {
          name: "Composite",
          className: "IdentityProviderInput"
        }
      }
    }
  }
};

export const IdentityProviderInput: coreHttp.CompositeMapper = {
  serializedName: "IdentityProviderInput",
  type: {
    name: "Composite",
    className: "IdentityProviderInput",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      },
      applicationId: {
        serializedName: "applicationId",
        required: true,
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        required: true,
        type: {
          name: "String"
        }
      },
      audience: {
        serializedName: "audience",
        required: true,
        type: {
          name: "String"
        }
      },
      aadAuthority: {
        serializedName: "aadAuthority",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationCollection: coreHttp.CompositeMapper = {
  serializedName: "StorageClassificationCollection",
  type: {
    name: "Composite",
    className: "StorageClassificationCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "StorageClassification" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassification: coreHttp.CompositeMapper = {
  serializedName: "StorageClassification",
  type: {
    name: "Composite",
    className: "StorageClassification",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageClassificationProperties"
        }
      }
    }
  }
};

export const StorageClassificationProperties: coreHttp.CompositeMapper = {
  serializedName: "StorageClassificationProperties",
  type: {
    name: "Composite",
    className: "StorageClassificationProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationMappingCollection: coreHttp.CompositeMapper = {
  serializedName: "StorageClassificationMappingCollection",
  type: {
    name: "Composite",
    className: "StorageClassificationMappingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageClassificationMapping"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationMapping: coreHttp.CompositeMapper = {
  serializedName: "StorageClassificationMapping",
  type: {
    name: "Composite",
    className: "StorageClassificationMapping",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageClassificationMappingProperties"
        }
      }
    }
  }
};

export const StorageClassificationMappingProperties: coreHttp.CompositeMapper = {
  serializedName: "StorageClassificationMappingProperties",
  type: {
    name: "Composite",
    className: "StorageClassificationMappingProperties",
    modelProperties: {
      targetStorageClassificationId: {
        serializedName: "targetStorageClassificationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageClassificationMappingInput: coreHttp.CompositeMapper = {
  serializedName: "StorageClassificationMappingInput",
  type: {
    name: "Composite",
    className: "StorageClassificationMappingInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageMappingInputProperties"
        }
      }
    }
  }
};

export const StorageMappingInputProperties: coreHttp.CompositeMapper = {
  serializedName: "StorageMappingInputProperties",
  type: {
    name: "Composite",
    className: "StorageMappingInputProperties",
    modelProperties: {
      targetStorageClassificationId: {
        serializedName: "targetStorageClassificationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VCenterCollection: coreHttp.CompositeMapper = {
  serializedName: "VCenterCollection",
  type: {
    name: "Composite",
    className: "VCenterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VCenter" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VCenter: coreHttp.CompositeMapper = {
  serializedName: "VCenter",
  type: {
    name: "Composite",
    className: "VCenter",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VCenterProperties"
        }
      }
    }
  }
};

export const VCenterProperties: coreHttp.CompositeMapper = {
  serializedName: "VCenterProperties",
  type: {
    name: "Composite",
    className: "VCenterProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      internalId: {
        serializedName: "internalId",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      discoveryStatus: {
        serializedName: "discoveryStatus",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      infrastructureId: {
        serializedName: "infrastructureId",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      fabricArmResourceName: {
        serializedName: "fabricArmResourceName",
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      }
    }
  }
};

export const AddVCenterRequest: coreHttp.CompositeMapper = {
  serializedName: "AddVCenterRequest",
  type: {
    name: "Composite",
    className: "AddVCenterRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AddVCenterRequestProperties"
        }
      }
    }
  }
};

export const AddVCenterRequestProperties: coreHttp.CompositeMapper = {
  serializedName: "AddVCenterRequestProperties",
  type: {
    name: "Composite",
    className: "AddVCenterRequestProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVCenterRequest: coreHttp.CompositeMapper = {
  serializedName: "UpdateVCenterRequest",
  type: {
    name: "Composite",
    className: "UpdateVCenterRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateVCenterRequestProperties"
        }
      }
    }
  }
};

export const UpdateVCenterRequestProperties: coreHttp.CompositeMapper = {
  serializedName: "UpdateVCenterRequestProperties",
  type: {
    name: "Composite",
    className: "UpdateVCenterRequestProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobCollection: coreHttp.CompositeMapper = {
  serializedName: "JobCollection",
  type: {
    name: "Composite",
    className: "JobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Job" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Job: coreHttp.CompositeMapper = {
  serializedName: "Job",
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobProperties"
        }
      }
    }
  }
};

export const JobProperties: coreHttp.CompositeMapper = {
  serializedName: "JobProperties",
  type: {
    name: "Composite",
    className: "JobProperties",
    modelProperties: {
      activityId: {
        serializedName: "activityId",
        type: {
          name: "String"
        }
      },
      scenarioName: {
        serializedName: "scenarioName",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      stateDescription: {
        serializedName: "stateDescription",
        type: {
          name: "String"
        }
      },
      tasks: {
        serializedName: "tasks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ASRTask" } }
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobErrorDetails" } }
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      allowedActions: {
        serializedName: "allowedActions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "JobPropertiesAllowedActionsItem"
          }
        }
      },
      targetObjectId: {
        serializedName: "targetObjectId",
        type: {
          name: "String"
        }
      },
      targetObjectName: {
        serializedName: "targetObjectName",
        type: {
          name: "String"
        }
      },
      targetInstanceType: {
        serializedName: "targetInstanceType",
        type: {
          name: "String"
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "JobDetails"
        }
      }
    }
  }
};

export const ASRTask: coreHttp.CompositeMapper = {
  serializedName: "ASRTask",
  type: {
    name: "Composite",
    className: "ASRTask",
    modelProperties: {
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      allowedActions: {
        serializedName: "allowedActions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ASRTaskAllowedActionsItem"
          }
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      stateDescription: {
        serializedName: "stateDescription",
        type: {
          name: "String"
        }
      },
      taskType: {
        serializedName: "taskType",
        type: {
          name: "String"
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "TaskTypeDetails"
        }
      },
      groupTaskCustomDetails: {
        serializedName: "groupTaskCustomDetails",
        type: {
          name: "Composite",
          className: "GroupTaskDetails"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobErrorDetails" } }
        }
      }
    }
  }
};

export const TaskTypeDetails: coreHttp.CompositeMapper = {
  serializedName: "TaskTypeDetails",
  type: {
    name: "Composite",
    className: "TaskTypeDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "GroupTaskDetails",
  type: {
    name: "Composite",
    className: "GroupTaskDetails",
    uberParent: "GroupTaskDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      },
      childTasks: {
        serializedName: "childTasks",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ASRTask" } }
        }
      }
    }
  }
};

export const JobErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "JobErrorDetails",
  type: {
    name: "Composite",
    className: "JobErrorDetails",
    modelProperties: {
      serviceErrorDetails: {
        serializedName: "serviceErrorDetails",
        type: {
          name: "Composite",
          className: "ServiceError"
        }
      },
      providerErrorDetails: {
        serializedName: "providerErrorDetails",
        type: {
          name: "Composite",
          className: "ProviderError"
        }
      },
      errorLevel: {
        serializedName: "errorLevel",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceError: coreHttp.CompositeMapper = {
  serializedName: "ServiceError",
  type: {
    name: "Composite",
    className: "ServiceError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      },
      activityId: {
        serializedName: "activityId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderError: coreHttp.CompositeMapper = {
  serializedName: "ProviderError",
  type: {
    name: "Composite",
    className: "ProviderError",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "Number"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      errorId: {
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDetails: coreHttp.CompositeMapper = {
  serializedName: "JobDetails",
  type: {
    name: "Composite",
    className: "JobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      affectedObjectDetails: {
        serializedName: "affectedObjectDetails",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ResumeJobParams: coreHttp.CompositeMapper = {
  serializedName: "ResumeJobParams",
  type: {
    name: "Composite",
    className: "ResumeJobParams",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResumeJobParamsProperties"
        }
      }
    }
  }
};

export const ResumeJobParamsProperties: coreHttp.CompositeMapper = {
  serializedName: "ResumeJobParamsProperties",
  type: {
    name: "Composite",
    className: "ResumeJobParamsProperties",
    modelProperties: {
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobQueryParameter: coreHttp.CompositeMapper = {
  serializedName: "JobQueryParameter",
  type: {
    name: "Composite",
    className: "JobQueryParameter",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      },
      fabricId: {
        serializedName: "fabricId",
        type: {
          name: "String"
        }
      },
      affectedObjectTypes: {
        serializedName: "affectedObjectTypes",
        type: {
          name: "String"
        }
      },
      jobStatus: {
        serializedName: "jobStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyCollection: coreHttp.CompositeMapper = {
  serializedName: "PolicyCollection",
  type: {
    name: "Composite",
    className: "PolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Policy" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Policy: coreHttp.CompositeMapper = {
  serializedName: "Policy",
  type: {
    name: "Composite",
    className: "Policy",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PolicyProperties"
        }
      }
    }
  }
};

export const PolicyProperties: coreHttp.CompositeMapper = {
  serializedName: "PolicyProperties",
  type: {
    name: "Composite",
    className: "PolicyProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Composite",
          className: "PolicyProviderSpecificDetails"
        }
      }
    }
  }
};

export const PolicyProviderSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "PolicyProviderSpecificDetails",
  type: {
    name: "Composite",
    className: "PolicyProviderSpecificDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreatePolicyInput: coreHttp.CompositeMapper = {
  serializedName: "CreatePolicyInput",
  type: {
    name: "Composite",
    className: "CreatePolicyInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreatePolicyInputProperties"
        }
      }
    }
  }
};

export const CreatePolicyInputProperties: coreHttp.CompositeMapper = {
  serializedName: "CreatePolicyInputProperties",
  type: {
    name: "Composite",
    className: "CreatePolicyInputProperties",
    modelProperties: {
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Composite",
          className: "PolicyProviderSpecificInput"
        }
      }
    }
  }
};

export const PolicyProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "PolicyProviderSpecificInput",
  type: {
    name: "Composite",
    className: "PolicyProviderSpecificInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdatePolicyInput: coreHttp.CompositeMapper = {
  serializedName: "UpdatePolicyInput",
  type: {
    name: "Composite",
    className: "UpdatePolicyInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdatePolicyInputProperties"
        }
      }
    }
  }
};

export const UpdatePolicyInputProperties: coreHttp.CompositeMapper = {
  serializedName: "UpdatePolicyInputProperties",
  type: {
    name: "Composite",
    className: "UpdatePolicyInputProperties",
    modelProperties: {
      replicationProviderSettings: {
        serializedName: "replicationProviderSettings",
        type: {
          name: "Composite",
          className: "PolicyProviderSpecificInput"
        }
      }
    }
  }
};

export const RecoveryPlanCollection: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanCollection",
  type: {
    name: "Composite",
    className: "RecoveryPlanCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RecoveryPlan" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlan: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlan",
  type: {
    name: "Composite",
    className: "RecoveryPlan",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanProperties"
        }
      }
    }
  }
};

export const RecoveryPlanProperties: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanProperties",
  type: {
    name: "Composite",
    className: "RecoveryPlanProperties",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      primaryFabricId: {
        serializedName: "primaryFabricId",
        type: {
          name: "String"
        }
      },
      primaryFabricFriendlyName: {
        serializedName: "primaryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      recoveryFabricId: {
        serializedName: "recoveryFabricId",
        type: {
          name: "String"
        }
      },
      recoveryFabricFriendlyName: {
        serializedName: "recoveryFabricFriendlyName",
        type: {
          name: "String"
        }
      },
      failoverDeploymentModel: {
        serializedName: "failoverDeploymentModel",
        type: {
          name: "String"
        }
      },
      replicationProviders: {
        serializedName: "replicationProviders",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "RecoveryPlanPropertiesReplicationProvidersItem"
          }
        }
      },
      allowedOperations: {
        serializedName: "allowedOperations",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "RecoveryPlanPropertiesAllowedOperationsItem"
          }
        }
      },
      lastPlannedFailoverTime: {
        serializedName: "lastPlannedFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      lastUnplannedFailoverTime: {
        serializedName: "lastUnplannedFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      lastTestFailoverTime: {
        serializedName: "lastTestFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      currentScenario: {
        serializedName: "currentScenario",
        type: {
          name: "Composite",
          className: "CurrentScenarioDetails"
        }
      },
      currentScenarioStatus: {
        serializedName: "currentScenarioStatus",
        type: {
          name: "String"
        }
      },
      currentScenarioStatusDescription: {
        serializedName: "currentScenarioStatusDescription",
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoveryPlanGroup" }
          }
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificDetails"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanGroup: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanGroup",
  type: {
    name: "Composite",
    className: "RecoveryPlanGroup",
    modelProperties: {
      groupType: {
        serializedName: "groupType",
        required: true,
        type: {
          name: "String"
        }
      },
      replicationProtectedItems: {
        serializedName: "replicationProtectedItems",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoveryPlanProtectedItem" }
          }
        }
      },
      startGroupActions: {
        serializedName: "startGroupActions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoveryPlanAction" }
          }
        }
      },
      endGroupActions: {
        serializedName: "endGroupActions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoveryPlanAction" }
          }
        }
      }
    }
  }
};

export const RecoveryPlanProtectedItem: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanProtectedItem",
  type: {
    name: "Composite",
    className: "RecoveryPlanProtectedItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      virtualMachineId: {
        serializedName: "virtualMachineId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanAction: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanAction",
  type: {
    name: "Composite",
    className: "RecoveryPlanAction",
    modelProperties: {
      actionName: {
        serializedName: "actionName",
        required: true,
        type: {
          name: "String"
        }
      },
      failoverTypes: {
        serializedName: "failoverTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ReplicationProtectedItemOperation"
          }
        }
      },
      failoverDirections: {
        serializedName: "failoverDirections",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PossibleOperationsDirections"
          }
        }
      },
      customDetails: {
        serializedName: "customDetails",
        type: {
          name: "Composite",
          className: "RecoveryPlanActionDetails"
        }
      }
    }
  }
};

export const RecoveryPlanActionDetails: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanActionDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanActionDetails",
    uberParent: "RecoveryPlanActionDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanProviderSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanProviderSpecificDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanProviderSpecificDetails",
    uberParent: "RecoveryPlanProviderSpecificDetails",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateRecoveryPlanInput: coreHttp.CompositeMapper = {
  serializedName: "CreateRecoveryPlanInput",
  type: {
    name: "Composite",
    className: "CreateRecoveryPlanInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateRecoveryPlanInputProperties"
        }
      }
    }
  }
};

export const CreateRecoveryPlanInputProperties: coreHttp.CompositeMapper = {
  serializedName: "CreateRecoveryPlanInputProperties",
  type: {
    name: "Composite",
    className: "CreateRecoveryPlanInputProperties",
    modelProperties: {
      primaryFabricId: {
        serializedName: "primaryFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryFabricId: {
        serializedName: "recoveryFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      failoverDeploymentModel: {
        serializedName: "failoverDeploymentModel",
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoveryPlanGroup" }
          }
        }
      },
      providerSpecificInput: {
        serializedName: "providerSpecificInput",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificInput"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanProviderSpecificInput",
  type: {
    name: "Composite",
    className: "RecoveryPlanProviderSpecificInput",
    uberParent: "RecoveryPlanProviderSpecificInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRecoveryPlanInput: coreHttp.CompositeMapper = {
  serializedName: "UpdateRecoveryPlanInput",
  type: {
    name: "Composite",
    className: "UpdateRecoveryPlanInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateRecoveryPlanInputProperties"
        }
      }
    }
  }
};

export const UpdateRecoveryPlanInputProperties: coreHttp.CompositeMapper = {
  serializedName: "UpdateRecoveryPlanInputProperties",
  type: {
    name: "Composite",
    className: "UpdateRecoveryPlanInputProperties",
    modelProperties: {
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RecoveryPlanGroup" }
          }
        }
      }
    }
  }
};

export const RecoveryPlanPlannedFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanPlannedFailoverInput",
  type: {
    name: "Composite",
    className: "RecoveryPlanPlannedFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanPlannedFailoverInputProperties"
        }
      }
    }
  }
};

export const RecoveryPlanPlannedFailoverInputProperties: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanPlannedFailoverInputProperties",
  type: {
    name: "Composite",
    className: "RecoveryPlanPlannedFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        required: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificFailoverInput"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanProviderSpecificFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanProviderSpecificFailoverInput",
  type: {
    name: "Composite",
    className: "RecoveryPlanProviderSpecificFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanTestFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanTestFailoverInput",
  type: {
    name: "Composite",
    className: "RecoveryPlanTestFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanTestFailoverInputProperties"
        }
      }
    }
  }
};

export const RecoveryPlanTestFailoverInputProperties: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanTestFailoverInputProperties",
  type: {
    name: "Composite",
    className: "RecoveryPlanTestFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        required: true,
        type: {
          name: "String"
        }
      },
      networkType: {
        serializedName: "networkType",
        required: true,
        type: {
          name: "String"
        }
      },
      networkId: {
        serializedName: "networkId",
        type: {
          name: "String"
        }
      },
      skipTestFailoverCleanup: {
        serializedName: "skipTestFailoverCleanup",
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificFailoverInput"
            }
          }
        }
      }
    }
  }
};

export const RecoveryPlanTestFailoverCleanupInput: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanTestFailoverCleanupInput",
  type: {
    name: "Composite",
    className: "RecoveryPlanTestFailoverCleanupInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanTestFailoverCleanupInputProperties"
        }
      }
    }
  }
};

export const RecoveryPlanTestFailoverCleanupInputProperties: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanTestFailoverCleanupInputProperties",
  type: {
    name: "Composite",
    className: "RecoveryPlanTestFailoverCleanupInputProperties",
    modelProperties: {
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanUnplannedFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanUnplannedFailoverInput",
  type: {
    name: "Composite",
    className: "RecoveryPlanUnplannedFailoverInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPlanUnplannedFailoverInputProperties"
        }
      }
    }
  }
};

export const RecoveryPlanUnplannedFailoverInputProperties: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanUnplannedFailoverInputProperties",
  type: {
    name: "Composite",
    className: "RecoveryPlanUnplannedFailoverInputProperties",
    modelProperties: {
      failoverDirection: {
        serializedName: "failoverDirection",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceSiteOperations: {
        serializedName: "sourceSiteOperations",
        required: true,
        type: {
          name: "String"
        }
      },
      providerSpecificDetails: {
        serializedName: "providerSpecificDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPlanProviderSpecificFailoverInput"
            }
          }
        }
      }
    }
  }
};

export const SupportedOperatingSystems: coreHttp.CompositeMapper = {
  serializedName: "SupportedOperatingSystems",
  type: {
    name: "Composite",
    className: "SupportedOperatingSystems",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SupportedOSProperties"
        }
      }
    }
  }
};

export const SupportedOSProperties: coreHttp.CompositeMapper = {
  serializedName: "SupportedOSProperties",
  type: {
    name: "Composite",
    className: "SupportedOSProperties",
    modelProperties: {
      supportedOsList: {
        serializedName: "supportedOsList",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SupportedOSProperty" }
          }
        }
      }
    }
  }
};

export const SupportedOSProperty: coreHttp.CompositeMapper = {
  serializedName: "SupportedOSProperty",
  type: {
    name: "Composite",
    className: "SupportedOSProperty",
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedOs: {
        serializedName: "supportedOs",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SupportedOSDetails" }
          }
        }
      }
    }
  }
};

export const SupportedOSDetails: coreHttp.CompositeMapper = {
  serializedName: "SupportedOSDetails",
  type: {
    name: "Composite",
    className: "SupportedOSDetails",
    modelProperties: {
      osName: {
        serializedName: "osName",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osVersions: {
        serializedName: "osVersions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "OSVersionWrapper" }
          }
        }
      }
    }
  }
};

export const OSVersionWrapper: coreHttp.CompositeMapper = {
  serializedName: "OSVersionWrapper",
  type: {
    name: "Composite",
    className: "OSVersionWrapper",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      servicePack: {
        serializedName: "servicePack",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultHealthDetails: coreHttp.CompositeMapper = {
  serializedName: "VaultHealthDetails",
  type: {
    name: "Composite",
    className: "VaultHealthDetails",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultHealthProperties"
        }
      }
    }
  }
};

export const VaultHealthProperties: coreHttp.CompositeMapper = {
  serializedName: "VaultHealthProperties",
  type: {
    name: "Composite",
    className: "VaultHealthProperties",
    modelProperties: {
      vaultErrors: {
        serializedName: "vaultErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      protectedItemsHealth: {
        serializedName: "protectedItemsHealth",
        type: {
          name: "Composite",
          className: "ResourceHealthSummary"
        }
      },
      fabricsHealth: {
        serializedName: "fabricsHealth",
        type: {
          name: "Composite",
          className: "ResourceHealthSummary"
        }
      },
      containersHealth: {
        serializedName: "containersHealth",
        type: {
          name: "Composite",
          className: "ResourceHealthSummary"
        }
      }
    }
  }
};

export const ResourceHealthSummary: coreHttp.CompositeMapper = {
  serializedName: "ResourceHealthSummary",
  type: {
    name: "Composite",
    className: "ResourceHealthSummary",
    modelProperties: {
      resourceCount: {
        serializedName: "resourceCount",
        type: {
          name: "Number"
        }
      },
      issues: {
        serializedName: "issues",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "HealthErrorSummary" }
          }
        }
      }
    }
  }
};

export const HealthErrorSummary: coreHttp.CompositeMapper = {
  serializedName: "HealthErrorSummary",
  type: {
    name: "Composite",
    className: "HealthErrorSummary",
    modelProperties: {
      summaryCode: {
        serializedName: "summaryCode",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      summaryMessage: {
        serializedName: "summaryMessage",
        type: {
          name: "String"
        }
      },
      affectedResourceType: {
        serializedName: "affectedResourceType",
        type: {
          name: "String"
        }
      },
      affectedResourceSubtype: {
        serializedName: "affectedResourceSubtype",
        type: {
          name: "String"
        }
      },
      affectedResourceCorrelationIds: {
        serializedName: "affectedResourceCorrelationIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "HealthErrorSummaryAffectedResourceCorrelationIdsItem"
          }
        }
      }
    }
  }
};

export const VaultSettingCollection: coreHttp.CompositeMapper = {
  serializedName: "VaultSettingCollection",
  type: {
    name: "Composite",
    className: "VaultSettingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VaultSetting" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultSetting: coreHttp.CompositeMapper = {
  serializedName: "VaultSetting",
  type: {
    name: "Composite",
    className: "VaultSetting",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultSettingProperties"
        }
      }
    }
  }
};

export const VaultSettingProperties: coreHttp.CompositeMapper = {
  serializedName: "VaultSettingProperties",
  type: {
    name: "Composite",
    className: "VaultSettingProperties",
    modelProperties: {
      migrationSolutionId: {
        serializedName: "migrationSolutionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultSettingCreationInput: coreHttp.CompositeMapper = {
  serializedName: "VaultSettingCreationInput",
  type: {
    name: "Composite",
    className: "VaultSettingCreationInput",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultSettingCreationInputProperties"
        }
      }
    }
  }
};

export const VaultSettingCreationInputProperties: coreHttp.CompositeMapper = {
  serializedName: "VaultSettingCreationInputProperties",
  type: {
    name: "Composite",
    className: "VaultSettingCreationInputProperties",
    modelProperties: {
      migrationSolutionId: {
        serializedName: "migrationSolutionId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AAddDisksInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AAddDisksInput",
    uberParent: "AddDisksProviderSpecificInput",
    polymorphicDiscriminator:
      AddDisksProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...AddDisksProviderSpecificInput.type.modelProperties,
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "A2AVmDiskInputDetails" }
          }
        }
      },
      vmManagedDisks: {
        serializedName: "vmManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmManagedDiskInputDetails"
            }
          }
        }
      }
    }
  }
};

export const A2AVmDiskInputDetails: coreHttp.CompositeMapper = {
  serializedName: "A2AVmDiskInputDetails",
  type: {
    name: "Composite",
    className: "A2AVmDiskInputDetails",
    modelProperties: {
      diskUri: {
        serializedName: "diskUri",
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccountId: {
        serializedName: "recoveryAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      primaryStagingAzureStorageAccountId: {
        serializedName: "primaryStagingAzureStorageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AVmManagedDiskInputDetails: coreHttp.CompositeMapper = {
  serializedName: "A2AVmManagedDiskInputDetails",
  type: {
    name: "Composite",
    className: "A2AVmManagedDiskInputDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      primaryStagingAzureStorageAccountId: {
        serializedName: "primaryStagingAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryReplicaDiskAccountType: {
        serializedName: "recoveryReplicaDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskAccountType: {
        serializedName: "recoveryTargetDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryDiskEncryptionSetId: {
        serializedName: "recoveryDiskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      }
    }
  }
};

export const DiskEncryptionInfo: coreHttp.CompositeMapper = {
  serializedName: "DiskEncryptionInfo",
  type: {
    name: "Composite",
    className: "DiskEncryptionInfo",
    modelProperties: {
      diskEncryptionKeyInfo: {
        serializedName: "diskEncryptionKeyInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionKeyInfo"
        }
      },
      keyEncryptionKeyInfo: {
        serializedName: "keyEncryptionKeyInfo",
        type: {
          name: "Composite",
          className: "KeyEncryptionKeyInfo"
        }
      }
    }
  }
};

export const DiskEncryptionKeyInfo: coreHttp.CompositeMapper = {
  serializedName: "DiskEncryptionKeyInfo",
  type: {
    name: "Composite",
    className: "DiskEncryptionKeyInfo",
    modelProperties: {
      secretIdentifier: {
        serializedName: "secretIdentifier",
        type: {
          name: "String"
        }
      },
      keyVaultResourceArmId: {
        serializedName: "keyVaultResourceArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyEncryptionKeyInfo: coreHttp.CompositeMapper = {
  serializedName: "KeyEncryptionKeyInfo",
  type: {
    name: "Composite",
    className: "KeyEncryptionKeyInfo",
    modelProperties: {
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      keyVaultResourceArmId: {
        serializedName: "keyVaultResourceArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AApplyRecoveryPointInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AApplyRecoveryPointInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator:
      ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplyRecoveryPointProviderSpecificInput.type.modelProperties
    }
  }
};

export const A2AContainerCreationInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AContainerCreationInput",
    uberParent: "ReplicationProviderSpecificContainerCreationInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerCreationInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerCreationInput.type.modelProperties
    }
  }
};

export const A2AContainerMappingInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AContainerMappingInput",
    uberParent: "ReplicationProviderSpecificContainerMappingInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerMappingInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerMappingInput.type.modelProperties,
      agentAutoUpdateStatus: {
        serializedName: "agentAutoUpdateStatus",
        type: {
          name: "String"
        }
      },
      automationAccountArmId: {
        serializedName: "automationAccountArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AEnableProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryCloudServiceId: {
        serializedName: "recoveryCloudServiceId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "A2AVmDiskInputDetails" }
          }
        }
      },
      vmManagedDisks: {
        serializedName: "vmManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmManagedDiskInputDetails"
            }
          }
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      recoveryBootDiagStorageAccountId: {
        serializedName: "recoveryBootDiagStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      },
      recoveryAvailabilityZone: {
        serializedName: "recoveryAvailabilityZone",
        type: {
          name: "String"
        }
      },
      recoveryAzureNetworkId: {
        serializedName: "recoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      recoverySubnetName: {
        serializedName: "recoverySubnetName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AEventDetails: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      protectedItemName: {
        serializedName: "protectedItemName",
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      fabricLocation: {
        serializedName: "fabricLocation",
        type: {
          name: "String"
        }
      },
      remoteFabricName: {
        serializedName: "remoteFabricName",
        type: {
          name: "String"
        }
      },
      remoteFabricLocation: {
        serializedName: "remoteFabricLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AFailoverProviderInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AFailoverProviderInput",
    uberParent: "ProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      cloudServiceCreationOption: {
        serializedName: "cloudServiceCreationOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2APolicyCreationInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2APolicyCreationInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2APolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2APolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const A2AProtectedDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "A2AProtectedDiskDetails",
  type: {
    name: "Composite",
    className: "A2AProtectedDiskDetails",
    modelProperties: {
      diskUri: {
        serializedName: "diskUri",
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccountId: {
        serializedName: "recoveryAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      primaryDiskAzureStorageAccountId: {
        serializedName: "primaryDiskAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      recoveryDiskUri: {
        serializedName: "recoveryDiskUri",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      diskCapacityInBytes: {
        serializedName: "diskCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      primaryStagingAzureStorageAccountId: {
        serializedName: "primaryStagingAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        type: {
          name: "Boolean"
        }
      },
      monitoringPercentageCompletion: {
        serializedName: "monitoringPercentageCompletion",
        type: {
          name: "Number"
        }
      },
      monitoringJobType: {
        serializedName: "monitoringJobType",
        type: {
          name: "String"
        }
      },
      dataPendingInStagingStorageAccountInMB: {
        serializedName: "dataPendingInStagingStorageAccountInMB",
        type: {
          name: "Number"
        }
      },
      dataPendingAtSourceAgentInMB: {
        serializedName: "dataPendingAtSourceAgentInMB",
        type: {
          name: "Number"
        }
      },
      diskState: {
        serializedName: "diskState",
        type: {
          name: "String"
        }
      },
      allowedDiskLevelOperation: {
        serializedName: "allowedDiskLevelOperation",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "A2AProtectedDiskDetailsAllowedDiskLevelOperationItem"
          }
        }
      },
      isDiskEncrypted: {
        serializedName: "isDiskEncrypted",
        type: {
          name: "Boolean"
        }
      },
      secretIdentifier: {
        serializedName: "secretIdentifier",
        type: {
          name: "String"
        }
      },
      dekKeyVaultArmId: {
        serializedName: "dekKeyVaultArmId",
        type: {
          name: "String"
        }
      },
      isDiskKeyEncrypted: {
        serializedName: "isDiskKeyEncrypted",
        type: {
          name: "Boolean"
        }
      },
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      kekKeyVaultArmId: {
        serializedName: "kekKeyVaultArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AProtectedManagedDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "A2AProtectedManagedDiskDetails",
  type: {
    name: "Composite",
    className: "A2AProtectedManagedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskId: {
        serializedName: "recoveryTargetDiskId",
        type: {
          name: "String"
        }
      },
      recoveryReplicaDiskId: {
        serializedName: "recoveryReplicaDiskId",
        type: {
          name: "String"
        }
      },
      recoveryReplicaDiskAccountType: {
        serializedName: "recoveryReplicaDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskAccountType: {
        serializedName: "recoveryTargetDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryDiskEncryptionSetId: {
        serializedName: "recoveryDiskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      diskCapacityInBytes: {
        serializedName: "diskCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      primaryStagingAzureStorageAccountId: {
        serializedName: "primaryStagingAzureStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        type: {
          name: "Boolean"
        }
      },
      monitoringPercentageCompletion: {
        serializedName: "monitoringPercentageCompletion",
        type: {
          name: "Number"
        }
      },
      monitoringJobType: {
        serializedName: "monitoringJobType",
        type: {
          name: "String"
        }
      },
      dataPendingInStagingStorageAccountInMB: {
        serializedName: "dataPendingInStagingStorageAccountInMB",
        type: {
          name: "Number"
        }
      },
      dataPendingAtSourceAgentInMB: {
        serializedName: "dataPendingAtSourceAgentInMB",
        type: {
          name: "Number"
        }
      },
      diskState: {
        serializedName: "diskState",
        type: {
          name: "String"
        }
      },
      allowedDiskLevelOperation: {
        serializedName: "allowedDiskLevelOperation",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "A2AProtectedManagedDiskDetailsAllowedDiskLevelOperationItem"
          }
        }
      },
      isDiskEncrypted: {
        serializedName: "isDiskEncrypted",
        type: {
          name: "Boolean"
        }
      },
      secretIdentifier: {
        serializedName: "secretIdentifier",
        type: {
          name: "String"
        }
      },
      dekKeyVaultArmId: {
        serializedName: "dekKeyVaultArmId",
        type: {
          name: "String"
        }
      },
      isDiskKeyEncrypted: {
        serializedName: "isDiskKeyEncrypted",
        type: {
          name: "Boolean"
        }
      },
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      kekKeyVaultArmId: {
        serializedName: "kekKeyVaultArmId",
        type: {
          name: "String"
        }
      },
      failoverDiskName: {
        serializedName: "failoverDiskName",
        type: {
          name: "String"
        }
      },
      tfoDiskName: {
        serializedName: "tfoDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AProtectionContainerMappingDetails: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AProtectionContainerMappingDetails",
    uberParent: "ProtectionContainerMappingProviderSpecificDetails",
    polymorphicDiscriminator:
      ProtectionContainerMappingProviderSpecificDetails.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainerMappingProviderSpecificDetails.type.modelProperties,
      agentAutoUpdateStatus: {
        serializedName: "agentAutoUpdateStatus",
        type: {
          name: "String"
        }
      },
      automationAccountArmId: {
        serializedName: "automationAccountArmId",
        type: {
          name: "String"
        }
      },
      scheduleName: {
        serializedName: "scheduleName",
        type: {
          name: "String"
        }
      },
      jobScheduleName: {
        serializedName: "jobScheduleName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2ARecoveryPointDetails: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2ARecoveryPointDetails",
    uberParent: "ProviderSpecificRecoveryPointDetails",
    polymorphicDiscriminator:
      ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificRecoveryPointDetails.type.modelProperties,
      recoveryPointSyncType: {
        serializedName: "recoveryPointSyncType",
        type: {
          name: "String"
        }
      },
      disks: {
        serializedName: "disks",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "A2ARecoveryPointDetailsDisksItem"
          }
        }
      }
    }
  }
};

export const A2ARemoveDisksInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2ARemoveDisksInput",
    uberParent: "RemoveDisksProviderSpecificInput",
    polymorphicDiscriminator:
      RemoveDisksProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RemoveDisksProviderSpecificInput.type.modelProperties,
      vmDisksUris: {
        serializedName: "vmDisksUris",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "A2ARemoveDisksInputVmDisksUrisItem"
          }
        }
      },
      vmManagedDisksIds: {
        serializedName: "vmManagedDisksIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "A2ARemoveDisksInputVmManagedDisksIdsItem"
          }
        }
      }
    }
  }
};

export const A2AReplicationDetails: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      fabricObjectId: {
        serializedName: "fabricObjectId",
        type: {
          name: "String"
        }
      },
      initialPrimaryFabricLocation: {
        serializedName: "initialPrimaryFabricLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialRecoveryFabricLocation: {
        serializedName: "initialRecoveryFabricLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmGroupCreateOption: {
        serializedName: "multiVmGroupCreateOption",
        type: {
          name: "String"
        }
      },
      managementId: {
        serializedName: "managementId",
        type: {
          name: "String"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "A2AProtectedDiskDetails" }
          }
        }
      },
      unprotectedDisks: {
        serializedName: "unprotectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "A2AUnprotectedDiskDetails" }
          }
        }
      },
      protectedManagedDisks: {
        serializedName: "protectedManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AProtectedManagedDiskDetails"
            }
          }
        }
      },
      recoveryBootDiagStorageAccountId: {
        serializedName: "recoveryBootDiagStorageAccountId",
        type: {
          name: "String"
        }
      },
      primaryFabricLocation: {
        serializedName: "primaryFabricLocation",
        type: {
          name: "String"
        }
      },
      recoveryFabricLocation: {
        serializedName: "recoveryFabricLocation",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMSize: {
        serializedName: "recoveryAzureVMSize",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMName: {
        serializedName: "recoveryAzureVMName",
        type: {
          name: "String"
        }
      },
      recoveryAzureResourceGroupId: {
        serializedName: "recoveryAzureResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryCloudService: {
        serializedName: "recoveryCloudService",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySet: {
        serializedName: "recoveryAvailabilitySet",
        type: {
          name: "String"
        }
      },
      selectedRecoveryAzureNetworkId: {
        serializedName: "selectedRecoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedTfoAzureNetworkId: {
        serializedName: "selectedTfoAzureNetworkId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VMNicDetails" } }
        }
      },
      vmSyncedConfigDetails: {
        serializedName: "vmSyncedConfigDetails",
        type: {
          name: "Composite",
          className: "AzureToAzureVmSyncedConfigDetails"
        }
      },
      monitoringPercentageCompletion: {
        serializedName: "monitoringPercentageCompletion",
        type: {
          name: "Number"
        }
      },
      monitoringJobType: {
        serializedName: "monitoringJobType",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      isReplicationAgentUpdateRequired: {
        serializedName: "isReplicationAgentUpdateRequired",
        type: {
          name: "Boolean"
        }
      },
      recoveryFabricObjectId: {
        serializedName: "recoveryFabricObjectId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      lifecycleId: {
        serializedName: "lifecycleId",
        type: {
          name: "String"
        }
      },
      testFailoverRecoveryFabricObjectId: {
        serializedName: "testFailoverRecoveryFabricObjectId",
        type: {
          name: "String"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      recoveryAvailabilityZone: {
        serializedName: "recoveryAvailabilityZone",
        type: {
          name: "String"
        }
      },
      vmEncryptionType: {
        serializedName: "vmEncryptionType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tfoAzureVMName: {
        serializedName: "tfoAzureVMName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AUnprotectedDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "A2AUnprotectedDiskDetails",
  type: {
    name: "Composite",
    className: "A2AUnprotectedDiskDetails",
    modelProperties: {
      diskLunId: {
        serializedName: "diskLunId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VMNicDetails: coreHttp.CompositeMapper = {
  serializedName: "VMNicDetails",
  type: {
    name: "Composite",
    className: "VMNicDetails",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        type: {
          name: "String"
        }
      },
      replicaNicId: {
        serializedName: "replicaNicId",
        type: {
          name: "String"
        }
      },
      sourceNicArmId: {
        serializedName: "sourceNicArmId",
        type: {
          name: "String"
        }
      },
      vMSubnetName: {
        serializedName: "vMSubnetName",
        type: {
          name: "String"
        }
      },
      vMNetworkName: {
        serializedName: "vMNetworkName",
        type: {
          name: "String"
        }
      },
      recoveryVMNetworkId: {
        serializedName: "recoveryVMNetworkId",
        type: {
          name: "String"
        }
      },
      recoveryVMSubnetName: {
        serializedName: "recoveryVMSubnetName",
        type: {
          name: "String"
        }
      },
      ipAddressType: {
        serializedName: "ipAddressType",
        type: {
          name: "String"
        }
      },
      primaryNicStaticIPAddress: {
        serializedName: "primaryNicStaticIPAddress",
        type: {
          name: "String"
        }
      },
      replicaNicStaticIPAddress: {
        serializedName: "replicaNicStaticIPAddress",
        type: {
          name: "String"
        }
      },
      selectionType: {
        serializedName: "selectionType",
        type: {
          name: "String"
        }
      },
      recoveryNicIpAddressType: {
        serializedName: "recoveryNicIpAddressType",
        type: {
          name: "String"
        }
      },
      recoveryPublicIpAddressId: {
        serializedName: "recoveryPublicIpAddressId",
        type: {
          name: "String"
        }
      },
      recoveryNetworkSecurityGroupId: {
        serializedName: "recoveryNetworkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      recoveryLBBackendAddressPoolIds: {
        serializedName: "recoveryLBBackendAddressPoolIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "VMNicDetailsRecoveryLBBackendAddressPoolIdsItem"
          }
        }
      },
      enableAcceleratedNetworkingOnRecovery: {
        serializedName: "enableAcceleratedNetworkingOnRecovery",
        type: {
          name: "Boolean"
        }
      },
      tfoVMNetworkId: {
        serializedName: "tfoVMNetworkId",
        type: {
          name: "String"
        }
      },
      tfoVMSubnetName: {
        serializedName: "tfoVMSubnetName",
        type: {
          name: "String"
        }
      },
      tfoNetworkSecurityGroupId: {
        serializedName: "tfoNetworkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      enableAcceleratedNetworkingOnTfo: {
        serializedName: "enableAcceleratedNetworkingOnTfo",
        type: {
          name: "Boolean"
        }
      },
      tfoIPConfigs: {
        serializedName: "tfoIPConfigs",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IPConfig" } }
        }
      },
      recoveryNicName: {
        serializedName: "recoveryNicName",
        type: {
          name: "String"
        }
      },
      recoveryNicResourceGroupName: {
        serializedName: "recoveryNicResourceGroupName",
        type: {
          name: "String"
        }
      },
      reuseExistingNic: {
        serializedName: "reuseExistingNic",
        type: {
          name: "Boolean"
        }
      },
      tfoRecoveryNicName: {
        serializedName: "tfoRecoveryNicName",
        type: {
          name: "String"
        }
      },
      tfoRecoveryNicResourceGroupName: {
        serializedName: "tfoRecoveryNicResourceGroupName",
        type: {
          name: "String"
        }
      },
      tfoReuseExistingNic: {
        serializedName: "tfoReuseExistingNic",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureToAzureVmSyncedConfigDetails: coreHttp.CompositeMapper = {
  serializedName: "AzureToAzureVmSyncedConfigDetails",
  type: {
    name: "Composite",
    className: "AzureToAzureVmSyncedConfigDetails",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      inputEndpoints: {
        serializedName: "inputEndpoints",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InputEndpoint" } }
        }
      }
    }
  }
};

export const InputEndpoint: coreHttp.CompositeMapper = {
  serializedName: "InputEndpoint",
  type: {
    name: "Composite",
    className: "InputEndpoint",
    modelProperties: {
      endpointName: {
        serializedName: "endpointName",
        type: {
          name: "String"
        }
      },
      privatePort: {
        serializedName: "privatePort",
        type: {
          name: "Number"
        }
      },
      publicPort: {
        serializedName: "publicPort",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AReprotectInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "A2AVmDiskInputDetails" }
          }
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryCloudServiceId: {
        serializedName: "recoveryCloudServiceId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2ASwitchProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2ASwitchProtectionInput",
    uberParent: "SwitchProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      SwitchProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...SwitchProtectionProviderSpecificInput.type.modelProperties,
      recoveryContainerId: {
        serializedName: "recoveryContainerId",
        type: {
          name: "String"
        }
      },
      vmDisks: {
        serializedName: "vmDisks",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "A2AVmDiskInputDetails" }
          }
        }
      },
      vmManagedDisks: {
        serializedName: "vmManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmManagedDiskInputDetails"
            }
          }
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryCloudServiceId: {
        serializedName: "recoveryCloudServiceId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      recoveryBootDiagStorageAccountId: {
        serializedName: "recoveryBootDiagStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      }
    }
  }
};

export const A2AUpdateContainerMappingInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AUpdateContainerMappingInput",
    uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificUpdateContainerMappingInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificUpdateContainerMappingInput.type
        .modelProperties,
      agentAutoUpdateStatus: {
        serializedName: "agentAutoUpdateStatus",
        type: {
          name: "String"
        }
      },
      automationAccountArmId: {
        serializedName: "automationAccountArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AUpdateReplicationProtectedItemInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "A2AUpdateReplicationProtectedItemInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator:
      UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateReplicationProtectedItemProviderInput.type.modelProperties,
      recoveryCloudServiceId: {
        serializedName: "recoveryCloudServiceId",
        type: {
          name: "String"
        }
      },
      recoveryResourceGroupId: {
        serializedName: "recoveryResourceGroupId",
        type: {
          name: "String"
        }
      },
      managedDiskUpdateDetails: {
        serializedName: "managedDiskUpdateDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "A2AVmManagedDiskUpdateDetails"
            }
          }
        }
      },
      recoveryBootDiagStorageAccountId: {
        serializedName: "recoveryBootDiagStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      },
      tfoAzureVMName: {
        serializedName: "tfoAzureVMName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const A2AVmManagedDiskUpdateDetails: coreHttp.CompositeMapper = {
  serializedName: "A2AVmManagedDiskUpdateDetails",
  type: {
    name: "Composite",
    className: "A2AVmManagedDiskUpdateDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      recoveryTargetDiskAccountType: {
        serializedName: "recoveryTargetDiskAccountType",
        type: {
          name: "String"
        }
      },
      recoveryReplicaDiskAccountType: {
        serializedName: "recoveryReplicaDiskAccountType",
        type: {
          name: "String"
        }
      },
      diskEncryptionInfo: {
        serializedName: "diskEncryptionInfo",
        type: {
          name: "Composite",
          className: "DiskEncryptionInfo"
        }
      },
      failoverDiskName: {
        serializedName: "failoverDiskName",
        type: {
          name: "String"
        }
      },
      tfoDiskName: {
        serializedName: "tfoDiskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AsrJobDetails: coreHttp.CompositeMapper = {
  serializedName: "AsrJobDetails",
  type: {
    name: "Composite",
    className: "AsrJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties
    }
  }
};

export const AutomationRunbookTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "AutomationRunbookTaskDetails",
  type: {
    name: "Composite",
    className: "AutomationRunbookTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      cloudServiceName: {
        serializedName: "cloudServiceName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      runbookId: {
        serializedName: "runbookId",
        type: {
          name: "String"
        }
      },
      runbookName: {
        serializedName: "runbookName",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      jobOutput: {
        serializedName: "jobOutput",
        type: {
          name: "String"
        }
      },
      isPrimarySideScript: {
        serializedName: "isPrimarySideScript",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureFabricCreationInput: coreHttp.CompositeMapper = {
  serializedName: "Azure",
  type: {
    name: "Composite",
    className: "AzureFabricCreationInput",
    uberParent: "FabricSpecificCreationInput",
    polymorphicDiscriminator:
      FabricSpecificCreationInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreationInput.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFabricSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "Azure",
  type: {
    name: "Composite",
    className: "AzureFabricSpecificDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      containerIds: {
        serializedName: "containerIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AzureFabricSpecificDetailsContainerIdsItem"
          }
        }
      }
    }
  }
};

export const AzureToAzureCreateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "AzureToAzure",
  type: {
    name: "Composite",
    className: "AzureToAzureCreateNetworkMappingInput",
    uberParent: "FabricSpecificCreateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreateNetworkMappingInput.type.modelProperties,
      primaryNetworkId: {
        serializedName: "primaryNetworkId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureToAzureNetworkMappingSettings: coreHttp.CompositeMapper = {
  serializedName: "AzureToAzure",
  type: {
    name: "Composite",
    className: "AzureToAzureNetworkMappingSettings",
    uberParent: "NetworkMappingFabricSpecificSettings",
    polymorphicDiscriminator:
      NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkMappingFabricSpecificSettings.type.modelProperties,
      primaryFabricLocation: {
        serializedName: "primaryFabricLocation",
        type: {
          name: "String"
        }
      },
      recoveryFabricLocation: {
        serializedName: "recoveryFabricLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureToAzureUpdateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "AzureToAzure",
  type: {
    name: "Composite",
    className: "AzureToAzureUpdateNetworkMappingInput",
    uberParent: "FabricSpecificUpdateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificUpdateNetworkMappingInput.type.modelProperties,
      primaryNetworkId: {
        serializedName: "primaryNetworkId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureVmDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "AzureVmDiskDetails",
  type: {
    name: "Composite",
    className: "AzureVmDiskDetails",
    modelProperties: {
      vhdType: {
        serializedName: "vhdType",
        type: {
          name: "String"
        }
      },
      vhdId: {
        serializedName: "vhdId",
        type: {
          name: "String"
        }
      },
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      },
      maxSizeMB: {
        serializedName: "maxSizeMB",
        type: {
          name: "String"
        }
      },
      targetDiskLocation: {
        serializedName: "targetDiskLocation",
        type: {
          name: "String"
        }
      },
      targetDiskName: {
        serializedName: "targetDiskName",
        type: {
          name: "String"
        }
      },
      lunId: {
        serializedName: "lunId",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsistencyCheckTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "ConsistencyCheckTaskDetails",
  type: {
    name: "Composite",
    className: "ConsistencyCheckTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      vmDetails: {
        serializedName: "vmDetails",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "InconsistentVmDetails" }
          }
        }
      }
    }
  }
};

export const InconsistentVmDetails: coreHttp.CompositeMapper = {
  serializedName: "InconsistentVmDetails",
  type: {
    name: "Composite",
    className: "InconsistentVmDetails",
    modelProperties: {
      vmName: {
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      cloudName: {
        serializedName: "cloudName",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InconsistentVmDetailsItem"
          }
        }
      },
      errorIds: {
        serializedName: "errorIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InconsistentVmDetailsErrorIdsItem"
          }
        }
      }
    }
  }
};

export const DataStore: coreHttp.CompositeMapper = {
  serializedName: "DataStore",
  type: {
    name: "Composite",
    className: "DataStore",
    modelProperties: {
      symbolicName: {
        serializedName: "symbolicName",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "uuid",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "String"
        }
      },
      freeSpace: {
        serializedName: "freeSpace",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskDetails: coreHttp.CompositeMapper = {
  serializedName: "DiskDetails",
  type: {
    name: "Composite",
    className: "DiskDetails",
    modelProperties: {
      maxSizeMB: {
        serializedName: "maxSizeMB",
        type: {
          name: "Number"
        }
      },
      vhdType: {
        serializedName: "vhdType",
        type: {
          name: "String"
        }
      },
      vhdId: {
        serializedName: "vhdId",
        type: {
          name: "String"
        }
      },
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskVolumeDetails: coreHttp.CompositeMapper = {
  serializedName: "DiskVolumeDetails",
  type: {
    name: "Composite",
    className: "DiskVolumeDetails",
    modelProperties: {
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventQueryParameter: coreHttp.CompositeMapper = {
  serializedName: "EventQueryParameter",
  type: {
    name: "Composite",
    className: "EventQueryParameter",
    modelProperties: {
      eventCode: {
        serializedName: "eventCode",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      affectedObjectFriendlyName: {
        serializedName: "affectedObjectFriendlyName",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ExportJobDetails: coreHttp.CompositeMapper = {
  serializedName: "ExportJobDetails",
  type: {
    name: "Composite",
    className: "ExportJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      blobUri: {
        serializedName: "blobUri",
        type: {
          name: "String"
        }
      },
      sasToken: {
        serializedName: "sasToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricReplicationGroupTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "FabricReplicationGroupTaskDetails",
  type: {
    name: "Composite",
    className: "FabricReplicationGroupTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      skippedReason: {
        serializedName: "skippedReason",
        type: {
          name: "String"
        }
      },
      skippedReasonString: {
        serializedName: "skippedReasonString",
        type: {
          name: "String"
        }
      },
      jobTask: {
        serializedName: "jobTask",
        type: {
          name: "Composite",
          className: "JobEntity"
        }
      }
    }
  }
};

export const JobEntity: coreHttp.CompositeMapper = {
  serializedName: "JobEntity",
  type: {
    name: "Composite",
    className: "JobEntity",
    modelProperties: {
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      jobFriendlyName: {
        serializedName: "jobFriendlyName",
        type: {
          name: "String"
        }
      },
      targetObjectId: {
        serializedName: "targetObjectId",
        type: {
          name: "String"
        }
      },
      targetObjectName: {
        serializedName: "targetObjectName",
        type: {
          name: "String"
        }
      },
      targetInstanceType: {
        serializedName: "targetInstanceType",
        type: {
          name: "String"
        }
      },
      jobScenarioName: {
        serializedName: "jobScenarioName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverJobDetails: coreHttp.CompositeMapper = {
  serializedName: "FailoverJobDetails",
  type: {
    name: "Composite",
    className: "FailoverJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      protectedItemDetails: {
        serializedName: "protectedItemDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverReplicationProtectedItemDetails"
            }
          }
        }
      }
    }
  }
};

export const FailoverReplicationProtectedItemDetails: coreHttp.CompositeMapper = {
  serializedName: "FailoverReplicationProtectedItemDetails",
  type: {
    name: "Composite",
    className: "FailoverReplicationProtectedItemDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      testVmName: {
        serializedName: "testVmName",
        type: {
          name: "String"
        }
      },
      testVmFriendlyName: {
        serializedName: "testVmFriendlyName",
        type: {
          name: "String"
        }
      },
      networkConnectionStatus: {
        serializedName: "networkConnectionStatus",
        type: {
          name: "String"
        }
      },
      networkFriendlyName: {
        serializedName: "networkFriendlyName",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const HyperVReplica2012EventDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplica2012",
  type: {
    name: "Composite",
    className: "HyperVReplica2012EventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      remoteContainerName: {
        serializedName: "remoteContainerName",
        type: {
          name: "String"
        }
      },
      remoteFabricName: {
        serializedName: "remoteFabricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplica2012R2EventDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplica2012R2",
  type: {
    name: "Composite",
    className: "HyperVReplica2012R2EventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      remoteContainerName: {
        serializedName: "remoteContainerName",
        type: {
          name: "String"
        }
      },
      remoteFabricName: {
        serializedName: "remoteFabricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureApplyRecoveryPointInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureApplyRecoveryPointInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator:
      ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplyRecoveryPointProviderSpecificInput.type.modelProperties,
      vaultLocation: {
        serializedName: "vaultLocation",
        type: {
          name: "String"
        }
      },
      primaryKekCertificatePfx: {
        serializedName: "primaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      secondaryKekCertificatePfx: {
        serializedName: "secondaryKekCertificatePfx",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureEnableProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      hvHostVmId: {
        serializedName: "hvHostVmId",
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vhdId: {
        serializedName: "vhdId",
        type: {
          name: "String"
        }
      },
      targetStorageAccountId: {
        serializedName: "targetStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetAzureNetworkId: {
        serializedName: "targetAzureNetworkId",
        type: {
          name: "String"
        }
      },
      targetAzureSubnetId: {
        serializedName: "targetAzureSubnetId",
        type: {
          name: "String"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      targetAzureVmName: {
        serializedName: "targetAzureVmName",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "HyperVReplicaAzureEnableProtectionInputDisksToIncludeItem"
          }
        }
      },
      targetAzureV1ResourceGroupId: {
        serializedName: "targetAzureV1ResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAzureV2ResourceGroupId: {
        serializedName: "targetAzureV2ResourceGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureEventDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      remoteContainerName: {
        serializedName: "remoteContainerName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureFailbackProviderInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzureFailback",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureFailbackProviderInput",
    uberParent: "ProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificFailoverInput.type.modelProperties,
      dataSyncOption: {
        serializedName: "dataSyncOption",
        type: {
          name: "String"
        }
      },
      recoveryVmCreationOption: {
        serializedName: "recoveryVmCreationOption",
        type: {
          name: "String"
        }
      },
      providerIdForAlternateRecovery: {
        serializedName: "providerIdForAlternateRecovery",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureFailoverProviderInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureFailoverProviderInput",
    uberParent: "ProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificFailoverInput.type.modelProperties,
      vaultLocation: {
        serializedName: "vaultLocation",
        type: {
          name: "String"
        }
      },
      primaryKekCertificatePfx: {
        serializedName: "primaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      secondaryKekCertificatePfx: {
        serializedName: "secondaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzurePolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzurePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointHistoryDurationInHours: {
        serializedName: "recoveryPointHistoryDurationInHours",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      replicationInterval: {
        serializedName: "replicationInterval",
        type: {
          name: "Number"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "String"
        }
      },
      activeStorageAccountId: {
        serializedName: "activeStorageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzurePolicyInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzurePolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointHistoryDuration: {
        serializedName: "recoveryPointHistoryDuration",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      replicationInterval: {
        serializedName: "replicationInterval",
        type: {
          name: "Number"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      storageAccounts: {
        serializedName: "storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "HyperVReplicaAzurePolicyInputStorageAccountsItem"
          }
        }
      }
    }
  }
};

export const HyperVReplicaAzureReplicationDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      azureVmDiskDetails: {
        serializedName: "azureVmDiskDetails",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AzureVmDiskDetails" }
          }
        }
      },
      recoveryAzureVmName: {
        serializedName: "recoveryAzureVmName",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMSize: {
        serializedName: "recoveryAzureVMSize",
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccount: {
        serializedName: "recoveryAzureStorageAccount",
        type: {
          name: "String"
        }
      },
      recoveryAzureLogStorageAccountId: {
        serializedName: "recoveryAzureLogStorageAccountId",
        type: {
          name: "String"
        }
      },
      lastReplicatedTime: {
        serializedName: "lastReplicatedTime",
        type: {
          name: "DateTime"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      initialReplicationDetails: {
        serializedName: "initialReplicationDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VMNicDetails" } }
        }
      },
      selectedRecoveryAzureNetworkId: {
        serializedName: "selectedRecoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedSourceNicId: {
        serializedName: "selectedSourceNicId",
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "String"
        }
      },
      oSDetails: {
        serializedName: "oSDetails",
        type: {
          name: "Composite",
          className: "OSDetails"
        }
      },
      sourceVmRamSizeInMB: {
        serializedName: "sourceVmRamSizeInMB",
        type: {
          name: "Number"
        }
      },
      sourceVmCpuCount: {
        serializedName: "sourceVmCpuCount",
        type: {
          name: "Number"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      recoveryAzureResourceGroupId: {
        serializedName: "recoveryAzureResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InitialReplicationDetails: coreHttp.CompositeMapper = {
  serializedName: "InitialReplicationDetails",
  type: {
    name: "Composite",
    className: "InitialReplicationDetails",
    modelProperties: {
      initialReplicationType: {
        serializedName: "initialReplicationType",
        type: {
          name: "String"
        }
      },
      initialReplicationProgressPercentage: {
        serializedName: "initialReplicationProgressPercentage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSDetails: coreHttp.CompositeMapper = {
  serializedName: "OSDetails",
  type: {
    name: "Composite",
    className: "OSDetails",
    modelProperties: {
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      productType: {
        serializedName: "productType",
        type: {
          name: "String"
        }
      },
      osEdition: {
        serializedName: "osEdition",
        type: {
          name: "String"
        }
      },
      oSVersion: {
        serializedName: "oSVersion",
        type: {
          name: "String"
        }
      },
      oSMajorVersion: {
        serializedName: "oSMajorVersion",
        type: {
          name: "String"
        }
      },
      oSMinorVersion: {
        serializedName: "oSMinorVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureReprotectInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      hvHostVmId: {
        serializedName: "hvHostVmId",
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vHDId: {
        serializedName: "vHDId",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaAzureUpdateReplicationProtectedItemInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "HyperVReplicaAzureUpdateReplicationProtectedItemInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator:
      UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateReplicationProtectedItemProviderInput.type.modelProperties,
      recoveryAzureV1ResourceGroupId: {
        serializedName: "recoveryAzureV1ResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryAzureV2ResourceGroupId: {
        serializedName: "recoveryAzureV2ResourceGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      },
      diskIdToDiskEncryptionMap: {
        serializedName: "diskIdToDiskEncryptionMap",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const HyperVReplicaBaseEventDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaBaseEventDetails",
  type: {
    name: "Composite",
    className: "HyperVReplicaBaseEventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fabricName: {
        serializedName: "fabricName",
        type: {
          name: "String"
        }
      },
      remoteContainerName: {
        serializedName: "remoteContainerName",
        type: {
          name: "String"
        }
      },
      remoteFabricName: {
        serializedName: "remoteFabricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaBasePolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaBasePolicyDetails",
  type: {
    name: "Composite",
    className: "HyperVReplicaBasePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletionOption: {
        serializedName: "replicaDeletionOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaBaseReplicationDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaBaseReplicationDetails",
  type: {
    name: "Composite",
    className: "HyperVReplicaBaseReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      lastReplicatedTime: {
        serializedName: "lastReplicatedTime",
        type: {
          name: "DateTime"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VMNicDetails" } }
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      initialReplicationDetails: {
        serializedName: "initialReplicationDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      vMDiskDetails: {
        serializedName: "vMDiskDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DiskDetails" } }
        }
      }
    }
  }
};

export const HyperVReplicaBluePolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplica2012R2",
  type: {
    name: "Composite",
    className: "HyperVReplicaBluePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      replicationFrequencyInSeconds: {
        serializedName: "replicationFrequencyInSeconds",
        type: {
          name: "Number"
        }
      },
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletionOption: {
        serializedName: "replicaDeletionOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaBluePolicyInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplica2012R2",
  type: {
    name: "Composite",
    className: "HyperVReplicaBluePolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      replicationFrequencyInSeconds: {
        serializedName: "replicationFrequencyInSeconds",
        type: {
          name: "Number"
        }
      },
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletion: {
        serializedName: "replicaDeletion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaBlueReplicationDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplica2012R2",
  type: {
    name: "Composite",
    className: "HyperVReplicaBlueReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      lastReplicatedTime: {
        serializedName: "lastReplicatedTime",
        type: {
          name: "DateTime"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VMNicDetails" } }
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      initialReplicationDetails: {
        serializedName: "initialReplicationDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      vMDiskDetails: {
        serializedName: "vMDiskDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DiskDetails" } }
        }
      }
    }
  }
};

export const HyperVReplicaPolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplica2012",
  type: {
    name: "Composite",
    className: "HyperVReplicaPolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletionOption: {
        serializedName: "replicaDeletionOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaPolicyInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplica2012",
  type: {
    name: "Composite",
    className: "HyperVReplicaPolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPoints: {
        serializedName: "recoveryPoints",
        type: {
          name: "Number"
        }
      },
      applicationConsistentSnapshotFrequencyInHours: {
        serializedName: "applicationConsistentSnapshotFrequencyInHours",
        type: {
          name: "Number"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "String"
        }
      },
      initialReplicationMethod: {
        serializedName: "initialReplicationMethod",
        type: {
          name: "String"
        }
      },
      onlineReplicationStartTime: {
        serializedName: "onlineReplicationStartTime",
        type: {
          name: "String"
        }
      },
      offlineReplicationImportPath: {
        serializedName: "offlineReplicationImportPath",
        type: {
          name: "String"
        }
      },
      offlineReplicationExportPath: {
        serializedName: "offlineReplicationExportPath",
        type: {
          name: "String"
        }
      },
      replicationPort: {
        serializedName: "replicationPort",
        type: {
          name: "Number"
        }
      },
      allowedAuthenticationType: {
        serializedName: "allowedAuthenticationType",
        type: {
          name: "Number"
        }
      },
      replicaDeletion: {
        serializedName: "replicaDeletion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVReplicaReplicationDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplica2012",
  type: {
    name: "Composite",
    className: "HyperVReplicaReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      lastReplicatedTime: {
        serializedName: "lastReplicatedTime",
        type: {
          name: "DateTime"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VMNicDetails" } }
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      initialReplicationDetails: {
        serializedName: "initialReplicationDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      vMDiskDetails: {
        serializedName: "vMDiskDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DiskDetails" } }
        }
      }
    }
  }
};

export const HyperVSiteDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVSite",
  type: {
    name: "Composite",
    className: "HyperVSiteDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties
    }
  }
};

export const HyperVVirtualMachineDetails: coreHttp.CompositeMapper = {
  serializedName: "HyperVVirtualMachine",
  type: {
    name: "Composite",
    className: "HyperVVirtualMachineDetails",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator:
      ConfigurationSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ConfigurationSettings.type.modelProperties,
      sourceItemId: {
        serializedName: "sourceItemId",
        type: {
          name: "String"
        }
      },
      generation: {
        serializedName: "generation",
        type: {
          name: "String"
        }
      },
      osDetails: {
        serializedName: "osDetails",
        type: {
          name: "Composite",
          className: "OSDetails"
        }
      },
      diskDetails: {
        serializedName: "diskDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DiskDetails" } }
        }
      },
      hasPhysicalDisk: {
        serializedName: "hasPhysicalDisk",
        type: {
          name: "String"
        }
      },
      hasFibreChannelAdapter: {
        serializedName: "hasFibreChannelAdapter",
        type: {
          name: "String"
        }
      },
      hasSharedVhd: {
        serializedName: "hasSharedVhd",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InlineWorkflowTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "InlineWorkflowTaskDetails",
  type: {
    name: "Composite",
    className: "InlineWorkflowTaskDetails",
    uberParent: "GroupTaskDetails",
    polymorphicDiscriminator: GroupTaskDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...GroupTaskDetails.type.modelProperties,
      workflowIds: {
        serializedName: "workflowIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InlineWorkflowTaskDetailsWorkflowIdsItem"
          }
        }
      }
    }
  }
};

export const InMageAgentDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAgentDetails",
  type: {
    name: "Composite",
    className: "InMageAgentDetails",
    modelProperties: {
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      agentUpdateStatus: {
        serializedName: "agentUpdateStatus",
        type: {
          name: "String"
        }
      },
      postUpdateRebootStatus: {
        serializedName: "postUpdateRebootStatus",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const InMageAgentVersionDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAgentVersionDetails",
  type: {
    name: "Composite",
    className: "InMageAgentVersionDetails",
    modelProperties: {
      postUpdateRebootStatus: {
        serializedName: "postUpdateRebootStatus",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      expiryDate: {
        serializedName: "expiryDate",
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2ApplyRecoveryPointInput: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2ApplyRecoveryPointInput",
    uberParent: "ApplyRecoveryPointProviderSpecificInput",
    polymorphicDiscriminator:
      ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplyRecoveryPointProviderSpecificInput.type.modelProperties,
      vaultLocation: {
        serializedName: "vaultLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2DiskInputDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2DiskInputDetails",
  type: {
    name: "Composite",
    className: "InMageAzureV2DiskInputDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2EnableProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2EnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      masterTargetId: {
        serializedName: "masterTargetId",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageAzureV2DiskInputDetails"
            }
          }
        }
      },
      targetAzureNetworkId: {
        serializedName: "targetAzureNetworkId",
        type: {
          name: "String"
        }
      },
      targetAzureSubnetId: {
        serializedName: "targetAzureSubnetId",
        type: {
          name: "String"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      targetAzureVmName: {
        serializedName: "targetAzureVmName",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetAzureV1ResourceGroupId: {
        serializedName: "targetAzureV1ResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAzureV2ResourceGroupId: {
        serializedName: "targetAzureV2ResourceGroupId",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2EventDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2EventDetails",
    uberParent: "EventProviderSpecificDetails",
    polymorphicDiscriminator:
      EventProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventProviderSpecificDetails.type.modelProperties,
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      component: {
        serializedName: "component",
        type: {
          name: "String"
        }
      },
      correctiveAction: {
        serializedName: "correctiveAction",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "String"
        }
      },
      siteName: {
        serializedName: "siteName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2FailoverProviderInput: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2FailoverProviderInput",
    uberParent: "ProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificFailoverInput.type.modelProperties,
      vaultLocation: {
        serializedName: "vaultLocation",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2ManagedDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2ManagedDiskDetails",
  type: {
    name: "Composite",
    className: "InMageAzureV2ManagedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      seedManagedDiskId: {
        serializedName: "seedManagedDiskId",
        type: {
          name: "String"
        }
      },
      replicaDiskType: {
        serializedName: "replicaDiskType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2PolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2PolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2PolicyInput: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2PolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2ProtectedDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2ProtectedDiskDetails",
  type: {
    name: "Composite",
    className: "InMageAzureV2ProtectedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      protectionStage: {
        serializedName: "protectionStage",
        type: {
          name: "String"
        }
      },
      healthErrorCode: {
        serializedName: "healthErrorCode",
        type: {
          name: "String"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        type: {
          name: "String"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        type: {
          name: "Number"
        }
      },
      resyncDurationInSeconds: {
        serializedName: "resyncDurationInSeconds",
        type: {
          name: "Number"
        }
      },
      diskCapacityInBytes: {
        serializedName: "diskCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      fileSystemCapacityInBytes: {
        serializedName: "fileSystemCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      sourceDataInMegaBytes: {
        serializedName: "sourceDataInMegaBytes",
        type: {
          name: "Number"
        }
      },
      psDataInMegaBytes: {
        serializedName: "psDataInMegaBytes",
        type: {
          name: "Number"
        }
      },
      targetDataInMegaBytes: {
        serializedName: "targetDataInMegaBytes",
        type: {
          name: "Number"
        }
      },
      diskResized: {
        serializedName: "diskResized",
        type: {
          name: "String"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const InMageAzureV2RecoveryPointDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2RecoveryPointDetails",
    uberParent: "ProviderSpecificRecoveryPointDetails",
    polymorphicDiscriminator:
      ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificRecoveryPointDetails.type.modelProperties,
      isMultiVmSyncPoint: {
        serializedName: "isMultiVmSyncPoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageAzureV2ReplicationDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2ReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      infrastructureVmId: {
        serializedName: "infrastructureVmId",
        type: {
          name: "String"
        }
      },
      vCenterInfrastructureId: {
        serializedName: "vCenterInfrastructureId",
        type: {
          name: "String"
        }
      },
      protectionStage: {
        serializedName: "protectionStage",
        type: {
          name: "String"
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        type: {
          name: "Number"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      compressedDataRateInMB: {
        serializedName: "compressedDataRateInMB",
        type: {
          name: "Number"
        }
      },
      uncompressedDataRateInMB: {
        serializedName: "uncompressedDataRateInMB",
        type: {
          name: "Number"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      isAgentUpdateRequired: {
        serializedName: "isAgentUpdateRequired",
        type: {
          name: "String"
        }
      },
      isRebootAfterUpdateRequired: {
        serializedName: "isRebootAfterUpdateRequired",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      processServerName: {
        serializedName: "processServerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageAzureV2ProtectedDiskDetails"
            }
          }
        }
      },
      diskResized: {
        serializedName: "diskResized",
        type: {
          name: "String"
        }
      },
      masterTargetId: {
        serializedName: "masterTargetId",
        type: {
          name: "String"
        }
      },
      sourceVmCpuCount: {
        serializedName: "sourceVmCpuCount",
        type: {
          name: "Number"
        }
      },
      sourceVmRamSizeInMB: {
        serializedName: "sourceVmRamSizeInMB",
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      },
      osDiskId: {
        serializedName: "osDiskId",
        type: {
          name: "String"
        }
      },
      azureVMDiskDetails: {
        serializedName: "azureVMDiskDetails",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AzureVmDiskDetails" }
          }
        }
      },
      recoveryAzureVMName: {
        serializedName: "recoveryAzureVMName",
        type: {
          name: "String"
        }
      },
      recoveryAzureVMSize: {
        serializedName: "recoveryAzureVMSize",
        type: {
          name: "String"
        }
      },
      recoveryAzureStorageAccount: {
        serializedName: "recoveryAzureStorageAccount",
        type: {
          name: "String"
        }
      },
      recoveryAzureLogStorageAccountId: {
        serializedName: "recoveryAzureLogStorageAccountId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VMNicDetails" } }
        }
      },
      selectedRecoveryAzureNetworkId: {
        serializedName: "selectedRecoveryAzureNetworkId",
        type: {
          name: "String"
        }
      },
      selectedSourceNicId: {
        serializedName: "selectedSourceNicId",
        type: {
          name: "String"
        }
      },
      discoveryType: {
        serializedName: "discoveryType",
        type: {
          name: "String"
        }
      },
      enableRdpOnTargetOption: {
        serializedName: "enableRdpOnTargetOption",
        type: {
          name: "String"
        }
      },
      datastores: {
        serializedName: "datastores",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InMageAzureV2ReplicationDetailsDatastoresItem"
          }
        }
      },
      targetVmId: {
        serializedName: "targetVmId",
        type: {
          name: "String"
        }
      },
      recoveryAzureResourceGroupId: {
        serializedName: "recoveryAzureResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryAvailabilitySetId: {
        serializedName: "recoveryAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      validationErrors: {
        serializedName: "validationErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateReceivedTime: {
        serializedName: "lastUpdateReceivedTime",
        type: {
          name: "DateTime"
        }
      },
      replicaId: {
        serializedName: "replicaId",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      protectedManagedDisks: {
        serializedName: "protectedManagedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageAzureV2ManagedDiskDetails"
            }
          }
        }
      }
    }
  }
};

export const InMageAzureV2ReprotectInput: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2ReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      masterTargetId: {
        serializedName: "masterTargetId",
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InMageAzureV2ReprotectInputDisksToIncludeItem"
          }
        }
      }
    }
  }
};

export const InMageAzureV2UpdateReplicationProtectedItemInput: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "InMageAzureV2UpdateReplicationProtectedItemInput",
    uberParent: "UpdateReplicationProtectedItemProviderInput",
    polymorphicDiscriminator:
      UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateReplicationProtectedItemProviderInput.type.modelProperties,
      recoveryAzureV1ResourceGroupId: {
        serializedName: "recoveryAzureV1ResourceGroupId",
        type: {
          name: "String"
        }
      },
      recoveryAzureV2ResourceGroupId: {
        serializedName: "recoveryAzureV2ResourceGroupId",
        type: {
          name: "String"
        }
      },
      useManagedDisks: {
        serializedName: "useManagedDisks",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageBasePolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageBasePolicyDetails",
  type: {
    name: "Composite",
    className: "InMageBasePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageDisableProtectionProviderSpecificInput: coreHttp.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageDisableProtectionProviderSpecificInput",
    uberParent: "DisableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      DisableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...DisableProtectionProviderSpecificInput.type.modelProperties,
      replicaVmDeletionStatus: {
        serializedName: "replicaVmDeletionStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageDiskDetails",
  type: {
    name: "Composite",
    className: "InMageDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      diskSizeInMB: {
        serializedName: "diskSizeInMB",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      diskConfiguration: {
        serializedName: "diskConfiguration",
        type: {
          name: "String"
        }
      },
      volumeList: {
        serializedName: "volumeList",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DiskVolumeDetails" }
          }
        }
      }
    }
  }
};

export const InMageDiskExclusionInput: coreHttp.CompositeMapper = {
  serializedName: "InMageDiskExclusionInput",
  type: {
    name: "Composite",
    className: "InMageDiskExclusionInput",
    modelProperties: {
      volumeOptions: {
        serializedName: "volumeOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageVolumeExclusionOptions"
            }
          }
        }
      },
      diskSignatureOptions: {
        serializedName: "diskSignatureOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InMageDiskSignatureExclusionOptions"
            }
          }
        }
      }
    }
  }
};

export const InMageVolumeExclusionOptions: coreHttp.CompositeMapper = {
  serializedName: "InMageVolumeExclusionOptions",
  type: {
    name: "Composite",
    className: "InMageVolumeExclusionOptions",
    modelProperties: {
      volumeLabel: {
        serializedName: "volumeLabel",
        type: {
          name: "String"
        }
      },
      onlyExcludeIfSingleVolume: {
        serializedName: "onlyExcludeIfSingleVolume",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageDiskSignatureExclusionOptions: coreHttp.CompositeMapper = {
  serializedName: "InMageDiskSignatureExclusionOptions",
  type: {
    name: "Composite",
    className: "InMageDiskSignatureExclusionOptions",
    modelProperties: {
      diskSignature: {
        serializedName: "diskSignature",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageEnableProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties,
      vmFriendlyName: {
        serializedName: "vmFriendlyName",
        type: {
          name: "String"
        }
      },
      masterTargetId: {
        serializedName: "masterTargetId",
        required: true,
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        required: true,
        type: {
          name: "String"
        }
      },
      retentionDrive: {
        serializedName: "retentionDrive",
        required: true,
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      datastoreName: {
        serializedName: "datastoreName",
        type: {
          name: "String"
        }
      },
      diskExclusionInput: {
        serializedName: "diskExclusionInput",
        type: {
          name: "Composite",
          className: "InMageDiskExclusionInput"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InMageEnableProtectionInputDisksToIncludeItem"
          }
        }
      }
    }
  }
};

export const InMageFailoverProviderInput: coreHttp.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageFailoverProviderInput",
    uberParent: "ProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMagePolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMagePolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMagePolicyInput: coreHttp.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMagePolicyInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageProtectedDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "InMageProtectedDiskDetails",
  type: {
    name: "Composite",
    className: "InMageProtectedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      protectionStage: {
        serializedName: "protectionStage",
        type: {
          name: "String"
        }
      },
      healthErrorCode: {
        serializedName: "healthErrorCode",
        type: {
          name: "String"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        type: {
          name: "String"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        type: {
          name: "Number"
        }
      },
      resyncDurationInSeconds: {
        serializedName: "resyncDurationInSeconds",
        type: {
          name: "Number"
        }
      },
      diskCapacityInBytes: {
        serializedName: "diskCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      fileSystemCapacityInBytes: {
        serializedName: "fileSystemCapacityInBytes",
        type: {
          name: "Number"
        }
      },
      sourceDataInMB: {
        serializedName: "sourceDataInMB",
        type: {
          name: "Number"
        }
      },
      psDataInMB: {
        serializedName: "psDataInMB",
        type: {
          name: "Number"
        }
      },
      targetDataInMB: {
        serializedName: "targetDataInMB",
        type: {
          name: "Number"
        }
      },
      diskResized: {
        serializedName: "diskResized",
        type: {
          name: "String"
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const InMageReplicationDetails: coreHttp.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageReplicationDetails",
    uberParent: "ReplicationProviderSpecificSettings",
    polymorphicDiscriminator:
      ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificSettings.type.modelProperties,
      activeSiteType: {
        serializedName: "activeSiteType",
        type: {
          name: "String"
        }
      },
      sourceVmCpuCount: {
        serializedName: "sourceVmCpuCount",
        type: {
          name: "Number"
        }
      },
      sourceVmRamSizeInMB: {
        serializedName: "sourceVmRamSizeInMB",
        type: {
          name: "Number"
        }
      },
      osDetails: {
        serializedName: "osDetails",
        type: {
          name: "Composite",
          className: "OSDiskDetails"
        }
      },
      protectionStage: {
        serializedName: "protectionStage",
        type: {
          name: "String"
        }
      },
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      vmProtectionState: {
        serializedName: "vmProtectionState",
        type: {
          name: "String"
        }
      },
      vmProtectionStateDescription: {
        serializedName: "vmProtectionStateDescription",
        type: {
          name: "String"
        }
      },
      resyncDetails: {
        serializedName: "resyncDetails",
        type: {
          name: "Composite",
          className: "InitialReplicationDetails"
        }
      },
      retentionWindowStart: {
        serializedName: "retentionWindowStart",
        type: {
          name: "DateTime"
        }
      },
      retentionWindowEnd: {
        serializedName: "retentionWindowEnd",
        type: {
          name: "DateTime"
        }
      },
      compressedDataRateInMB: {
        serializedName: "compressedDataRateInMB",
        type: {
          name: "Number"
        }
      },
      uncompressedDataRateInMB: {
        serializedName: "uncompressedDataRateInMB",
        type: {
          name: "Number"
        }
      },
      rpoInSeconds: {
        serializedName: "rpoInSeconds",
        type: {
          name: "Number"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "InMageProtectedDiskDetails" }
          }
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        type: {
          name: "String"
        }
      },
      masterTargetId: {
        serializedName: "masterTargetId",
        type: {
          name: "String"
        }
      },
      consistencyPoints: {
        serializedName: "consistencyPoints",
        type: {
          name: "Dictionary",
          value: { type: { name: "DateTime" }, serializedName: "DateTime" }
        }
      },
      diskResized: {
        serializedName: "diskResized",
        type: {
          name: "String"
        }
      },
      rebootAfterUpdateStatus: {
        serializedName: "rebootAfterUpdateStatus",
        type: {
          name: "String"
        }
      },
      multiVmGroupId: {
        serializedName: "multiVmGroupId",
        type: {
          name: "String"
        }
      },
      multiVmGroupName: {
        serializedName: "multiVmGroupName",
        type: {
          name: "String"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      },
      agentDetails: {
        serializedName: "agentDetails",
        type: {
          name: "Composite",
          className: "InMageAgentDetails"
        }
      },
      vCenterInfrastructureId: {
        serializedName: "vCenterInfrastructureId",
        type: {
          name: "String"
        }
      },
      infrastructureVmId: {
        serializedName: "infrastructureVmId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VMNicDetails" } }
        }
      },
      discoveryType: {
        serializedName: "discoveryType",
        type: {
          name: "String"
        }
      },
      azureStorageAccountId: {
        serializedName: "azureStorageAccountId",
        type: {
          name: "String"
        }
      },
      datastores: {
        serializedName: "datastores",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InMageReplicationDetailsDatastoresItem"
          }
        }
      },
      validationErrors: {
        serializedName: "validationErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      lastRpoCalculatedTime: {
        serializedName: "lastRpoCalculatedTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateReceivedTime: {
        serializedName: "lastUpdateReceivedTime",
        type: {
          name: "DateTime"
        }
      },
      replicaId: {
        serializedName: "replicaId",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "OSDiskDetails",
  type: {
    name: "Composite",
    className: "OSDiskDetails",
    modelProperties: {
      osVhdId: {
        serializedName: "osVhdId",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InMageReprotectInput: coreHttp.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "InMageReprotectInput",
    uberParent: "ReverseReplicationProviderSpecificInput",
    polymorphicDiscriminator:
      ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReverseReplicationProviderSpecificInput.type.modelProperties,
      masterTargetId: {
        serializedName: "masterTargetId",
        required: true,
        type: {
          name: "String"
        }
      },
      processServerId: {
        serializedName: "processServerId",
        required: true,
        type: {
          name: "String"
        }
      },
      retentionDrive: {
        serializedName: "retentionDrive",
        required: true,
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      datastoreName: {
        serializedName: "datastoreName",
        type: {
          name: "String"
        }
      },
      diskExclusionInput: {
        serializedName: "diskExclusionInput",
        type: {
          name: "Composite",
          className: "InMageDiskExclusionInput"
        }
      },
      profileId: {
        serializedName: "profileId",
        required: true,
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InMageReprotectInputDisksToIncludeItem"
          }
        }
      }
    }
  }
};

export const JobStatusEventDetails: coreHttp.CompositeMapper = {
  serializedName: "JobStatus",
  type: {
    name: "Composite",
    className: "JobStatusEventDetails",
    uberParent: "EventSpecificDetails",
    polymorphicDiscriminator:
      EventSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSpecificDetails.type.modelProperties,
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      jobFriendlyName: {
        serializedName: "jobFriendlyName",
        type: {
          name: "String"
        }
      },
      jobStatus: {
        serializedName: "jobStatus",
        type: {
          name: "String"
        }
      },
      affectedObjectType: {
        serializedName: "affectedObjectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "JobTaskDetails",
  type: {
    name: "Composite",
    className: "JobTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      jobTask: {
        serializedName: "jobTask",
        type: {
          name: "Composite",
          className: "JobEntity"
        }
      }
    }
  }
};

export const ManualActionTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "ManualActionTaskDetails",
  type: {
    name: "Composite",
    className: "ManualActionTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      instructions: {
        serializedName: "instructions",
        type: {
          name: "String"
        }
      },
      observation: {
        serializedName: "observation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MasterTargetServer: coreHttp.CompositeMapper = {
  serializedName: "MasterTargetServer",
  type: {
    name: "Composite",
    className: "MasterTargetServer",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      versionStatus: {
        serializedName: "versionStatus",
        type: {
          name: "String"
        }
      },
      retentionVolumes: {
        serializedName: "retentionVolumes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RetentionVolume" } }
        }
      },
      dataStores: {
        serializedName: "dataStores",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DataStore" } }
        }
      },
      validationErrors: {
        serializedName: "validationErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      diskCount: {
        serializedName: "diskCount",
        type: {
          name: "Number"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      marsAgentVersion: {
        serializedName: "marsAgentVersion",
        type: {
          name: "String"
        }
      },
      marsAgentExpiryDate: {
        serializedName: "marsAgentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      agentVersionDetails: {
        serializedName: "agentVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      },
      marsAgentVersionDetails: {
        serializedName: "marsAgentVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      }
    }
  }
};

export const RetentionVolume: coreHttp.CompositeMapper = {
  serializedName: "RetentionVolume",
  type: {
    name: "Composite",
    className: "RetentionVolume",
    modelProperties: {
      volumeName: {
        serializedName: "volumeName",
        type: {
          name: "String"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        type: {
          name: "Number"
        }
      },
      freeSpaceInBytes: {
        serializedName: "freeSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      thresholdPercentage: {
        serializedName: "thresholdPercentage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MigrationItemsQueryParameter: coreHttp.CompositeMapper = {
  serializedName: "MigrationItemsQueryParameter",
  type: {
    name: "Composite",
    className: "MigrationItemsQueryParameter",
    modelProperties: {
      sourceFabricName: {
        serializedName: "sourceFabricName",
        type: {
          name: "String"
        }
      },
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MobilityServiceUpdate: coreHttp.CompositeMapper = {
  serializedName: "MobilityServiceUpdate",
  type: {
    name: "Composite",
    className: "MobilityServiceUpdate",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      rebootStatus: {
        serializedName: "rebootStatus",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessServer: coreHttp.CompositeMapper = {
  serializedName: "ProcessServer",
  type: {
    name: "Composite",
    className: "ProcessServer",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      versionStatus: {
        serializedName: "versionStatus",
        type: {
          name: "String"
        }
      },
      mobilityServiceUpdates: {
        serializedName: "mobilityServiceUpdates",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MobilityServiceUpdate" }
          }
        }
      },
      hostId: {
        serializedName: "hostId",
        type: {
          name: "String"
        }
      },
      machineCount: {
        serializedName: "machineCount",
        type: {
          name: "String"
        }
      },
      replicationPairCount: {
        serializedName: "replicationPairCount",
        type: {
          name: "String"
        }
      },
      systemLoad: {
        serializedName: "systemLoad",
        type: {
          name: "String"
        }
      },
      systemLoadStatus: {
        serializedName: "systemLoadStatus",
        type: {
          name: "String"
        }
      },
      cpuLoad: {
        serializedName: "cpuLoad",
        type: {
          name: "String"
        }
      },
      cpuLoadStatus: {
        serializedName: "cpuLoadStatus",
        type: {
          name: "String"
        }
      },
      totalMemoryInBytes: {
        serializedName: "totalMemoryInBytes",
        type: {
          name: "Number"
        }
      },
      availableMemoryInBytes: {
        serializedName: "availableMemoryInBytes",
        type: {
          name: "Number"
        }
      },
      memoryUsageStatus: {
        serializedName: "memoryUsageStatus",
        type: {
          name: "String"
        }
      },
      totalSpaceInBytes: {
        serializedName: "totalSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      availableSpaceInBytes: {
        serializedName: "availableSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      spaceUsageStatus: {
        serializedName: "spaceUsageStatus",
        type: {
          name: "String"
        }
      },
      psServiceStatus: {
        serializedName: "psServiceStatus",
        type: {
          name: "String"
        }
      },
      sslCertExpiryDate: {
        serializedName: "sslCertExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      sslCertExpiryRemainingDays: {
        serializedName: "sslCertExpiryRemainingDays",
        type: {
          name: "Number"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      agentVersionDetails: {
        serializedName: "agentVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      psStatsRefreshTime: {
        serializedName: "psStatsRefreshTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      throughputUploadPendingDataInBytes: {
        serializedName: "throughputUploadPendingDataInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputInMBps: {
        serializedName: "throughputInMBps",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputInBytes: {
        serializedName: "throughputInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      throughputStatus: {
        serializedName: "throughputStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      marsCommunicationStatus: {
        serializedName: "marsCommunicationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      marsRegistrationStatus: {
        serializedName: "marsRegistrationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectableItemQueryParameter: coreHttp.CompositeMapper = {
  serializedName: "ProtectableItemQueryParameter",
  type: {
    name: "Composite",
    className: "ProtectableItemQueryParameter",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedItemsQueryParameter: coreHttp.CompositeMapper = {
  serializedName: "ProtectedItemsQueryParameter",
  type: {
    name: "Composite",
    className: "ProtectedItemsQueryParameter",
    modelProperties: {
      sourceFabricName: {
        serializedName: "sourceFabricName",
        type: {
          name: "String"
        }
      },
      recoveryPlanName: {
        serializedName: "recoveryPlanName",
        type: {
          name: "String"
        }
      },
      vCenterName: {
        serializedName: "vCenterName",
        type: {
          name: "String"
        }
      },
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      },
      multiVmGroupCreateOption: {
        serializedName: "multiVmGroupCreateOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RcmAzureMigrationPolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "RcmAzureMigration",
  type: {
    name: "Composite",
    className: "RcmAzureMigrationPolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointThresholdInMinutes: {
        serializedName: "recoveryPointThresholdInMinutes",
        type: {
          name: "Number"
        }
      },
      recoveryPointHistory: {
        serializedName: "recoveryPointHistory",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      multiVmSyncStatus: {
        serializedName: "multiVmSyncStatus",
        type: {
          name: "String"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RecoveryPlanA2AFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "RecoveryPlanA2AFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      },
      cloudServiceCreationOption: {
        serializedName: "cloudServiceCreationOption",
        type: {
          name: "String"
        }
      },
      multiVmSyncPointOption: {
        serializedName: "multiVmSyncPointOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanA2ADetails: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanA2ADetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanA2ADetails",
    uberParent: "RecoveryPlanProviderSpecificDetails",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificDetails.type.modelProperties,
      primaryZone: {
        serializedName: "primaryZone",
        type: {
          name: "String"
        }
      },
      recoveryZone: {
        serializedName: "recoveryZone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanA2AInput: coreHttp.CompositeMapper = {
  serializedName: "A2A",
  type: {
    name: "Composite",
    className: "RecoveryPlanA2AInput",
    uberParent: "RecoveryPlanProviderSpecificInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificInput.type.modelProperties,
      primaryZone: {
        serializedName: "primaryZone",
        type: {
          name: "String"
        }
      },
      recoveryZone: {
        serializedName: "recoveryZone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanAutomationRunbookActionDetails: coreHttp.CompositeMapper = {
  serializedName: "AutomationRunbookActionDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanAutomationRunbookActionDetails",
    uberParent: "RecoveryPlanActionDetails",
    polymorphicDiscriminator:
      RecoveryPlanActionDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanActionDetails.type.modelProperties,
      runbookId: {
        serializedName: "runbookId",
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "String"
        }
      },
      fabricLocation: {
        serializedName: "fabricLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanGroupTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanGroupTaskDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanGroupTaskDetails",
    uberParent: "GroupTaskDetails",
    polymorphicDiscriminator: GroupTaskDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...GroupTaskDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      rpGroupType: {
        serializedName: "rpGroupType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanHyperVReplicaAzureFailbackInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzureFailback",
  type: {
    name: "Composite",
    className: "RecoveryPlanHyperVReplicaAzureFailbackInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      dataSyncOption: {
        serializedName: "dataSyncOption",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryVmCreationOption: {
        serializedName: "recoveryVmCreationOption",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanHyperVReplicaAzureFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "HyperVReplicaAzure",
  type: {
    name: "Composite",
    className: "RecoveryPlanHyperVReplicaAzureFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      vaultLocation: {
        serializedName: "vaultLocation",
        type: {
          name: "String"
        }
      },
      primaryKekCertificatePfx: {
        serializedName: "primaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      secondaryKekCertificatePfx: {
        serializedName: "secondaryKekCertificatePfx",
        type: {
          name: "String"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanInMageAzureV2FailoverInput: coreHttp.CompositeMapper = {
  serializedName: "InMageAzureV2",
  type: {
    name: "Composite",
    className: "RecoveryPlanInMageAzureV2FailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      vaultLocation: {
        serializedName: "vaultLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      },
      useMultiVmSyncPoint: {
        serializedName: "useMultiVmSyncPoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanInMageFailoverInput: coreHttp.CompositeMapper = {
  serializedName: "InMage",
  type: {
    name: "Composite",
    className: "RecoveryPlanInMageFailoverInput",
    uberParent: "RecoveryPlanProviderSpecificFailoverInput",
    polymorphicDiscriminator:
      RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanProviderSpecificFailoverInput.type.modelProperties,
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanManualActionDetails: coreHttp.CompositeMapper = {
  serializedName: "ManualActionDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanManualActionDetails",
    uberParent: "RecoveryPlanActionDetails",
    polymorphicDiscriminator:
      RecoveryPlanActionDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanActionDetails.type.modelProperties,
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanScriptActionDetails: coreHttp.CompositeMapper = {
  serializedName: "ScriptActionDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanScriptActionDetails",
    uberParent: "RecoveryPlanActionDetails",
    polymorphicDiscriminator:
      RecoveryPlanActionDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPlanActionDetails.type.modelProperties,
      path: {
        serializedName: "path",
        required: true,
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "String"
        }
      },
      fabricLocation: {
        serializedName: "fabricLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPlanShutdownGroupTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "RecoveryPlanShutdownGroupTaskDetails",
  type: {
    name: "Composite",
    className: "RecoveryPlanShutdownGroupTaskDetails",
    uberParent: "GroupTaskDetails",
    polymorphicDiscriminator: GroupTaskDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...GroupTaskDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      rpGroupType: {
        serializedName: "rpGroupType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationGroupDetails: coreHttp.CompositeMapper = {
  serializedName: "ReplicationGroupDetails",
  type: {
    name: "Composite",
    className: "ReplicationGroupDetails",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator:
      ConfigurationSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ConfigurationSettings.type.modelProperties
    }
  }
};

export const RoleAssignment: coreHttp.CompositeMapper = {
  serializedName: "RoleAssignment",
  type: {
    name: "Composite",
    className: "RoleAssignment",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      roleDefinitionId: {
        serializedName: "roleDefinitionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunAsAccount: coreHttp.CompositeMapper = {
  serializedName: "RunAsAccount",
  type: {
    name: "Composite",
    className: "RunAsAccount",
    modelProperties: {
      accountId: {
        serializedName: "accountId",
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SanEnableProtectionInput: coreHttp.CompositeMapper = {
  serializedName: "San",
  type: {
    name: "Composite",
    className: "SanEnableProtectionInput",
    uberParent: "EnableProtectionProviderSpecificInput",
    polymorphicDiscriminator:
      EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableProtectionProviderSpecificInput.type.modelProperties
    }
  }
};

export const ScriptActionTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "ScriptActionTaskDetails",
  type: {
    name: "Composite",
    className: "ScriptActionTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      output: {
        serializedName: "output",
        type: {
          name: "String"
        }
      },
      isPrimarySideScript: {
        serializedName: "isPrimarySideScript",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SwitchProtectionJobDetails: coreHttp.CompositeMapper = {
  serializedName: "SwitchProtectionJobDetails",
  type: {
    name: "Composite",
    className: "SwitchProtectionJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      newReplicationProtectedItemId: {
        serializedName: "newReplicationProtectedItemId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestFailoverJobDetails: coreHttp.CompositeMapper = {
  serializedName: "TestFailoverJobDetails",
  type: {
    name: "Composite",
    className: "TestFailoverJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      testFailoverStatus: {
        serializedName: "testFailoverStatus",
        type: {
          name: "String"
        }
      },
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "networkName",
        type: {
          name: "String"
        }
      },
      networkFriendlyName: {
        serializedName: "networkFriendlyName",
        type: {
          name: "String"
        }
      },
      networkType: {
        serializedName: "networkType",
        type: {
          name: "String"
        }
      },
      protectedItemDetails: {
        serializedName: "protectedItemDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverReplicationProtectedItemDetails"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineTaskDetails",
  type: {
    name: "Composite",
    className: "VirtualMachineTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      skippedReason: {
        serializedName: "skippedReason",
        type: {
          name: "String"
        }
      },
      skippedReasonString: {
        serializedName: "skippedReasonString",
        type: {
          name: "String"
        }
      },
      jobTask: {
        serializedName: "jobTask",
        type: {
          name: "Composite",
          className: "JobEntity"
        }
      }
    }
  }
};

export const VmmDetails: coreHttp.CompositeMapper = {
  serializedName: "VMM",
  type: {
    name: "Composite",
    className: "VmmDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties
    }
  }
};

export const VmmToAzureCreateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "VmmToAzure",
  type: {
    name: "Composite",
    className: "VmmToAzureCreateNetworkMappingInput",
    uberParent: "FabricSpecificCreateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreateNetworkMappingInput.type.modelProperties
    }
  }
};

export const VmmToAzureNetworkMappingSettings: coreHttp.CompositeMapper = {
  serializedName: "VmmToAzure",
  type: {
    name: "Composite",
    className: "VmmToAzureNetworkMappingSettings",
    uberParent: "NetworkMappingFabricSpecificSettings",
    polymorphicDiscriminator:
      NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkMappingFabricSpecificSettings.type.modelProperties
    }
  }
};

export const VmmToAzureUpdateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "VmmToAzure",
  type: {
    name: "Composite",
    className: "VmmToAzureUpdateNetworkMappingInput",
    uberParent: "FabricSpecificUpdateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificUpdateNetworkMappingInput.type.modelProperties
    }
  }
};

export const VmmToVmmCreateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "VmmToVmm",
  type: {
    name: "Composite",
    className: "VmmToVmmCreateNetworkMappingInput",
    uberParent: "FabricSpecificCreateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreateNetworkMappingInput.type.modelProperties
    }
  }
};

export const VmmToVmmNetworkMappingSettings: coreHttp.CompositeMapper = {
  serializedName: "VmmToVmm",
  type: {
    name: "Composite",
    className: "VmmToVmmNetworkMappingSettings",
    uberParent: "NetworkMappingFabricSpecificSettings",
    polymorphicDiscriminator:
      NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkMappingFabricSpecificSettings.type.modelProperties
    }
  }
};

export const VmmToVmmUpdateNetworkMappingInput: coreHttp.CompositeMapper = {
  serializedName: "VmmToVmm",
  type: {
    name: "Composite",
    className: "VmmToVmmUpdateNetworkMappingInput",
    uberParent: "FabricSpecificUpdateNetworkMappingInput",
    polymorphicDiscriminator:
      FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificUpdateNetworkMappingInput.type.modelProperties
    }
  }
};

export const VmmVirtualMachineDetails: coreHttp.CompositeMapper = {
  serializedName: "VmmVirtualMachine",
  type: {
    name: "Composite",
    className: "VmmVirtualMachineDetails",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator:
      ConfigurationSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ConfigurationSettings.type.modelProperties,
      sourceItemId: {
        serializedName: "sourceItemId",
        type: {
          name: "String"
        }
      },
      generation: {
        serializedName: "generation",
        type: {
          name: "String"
        }
      },
      osDetails: {
        serializedName: "osDetails",
        type: {
          name: "Composite",
          className: "OSDetails"
        }
      },
      diskDetails: {
        serializedName: "diskDetails",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DiskDetails" } }
        }
      },
      hasPhysicalDisk: {
        serializedName: "hasPhysicalDisk",
        type: {
          name: "String"
        }
      },
      hasFibreChannelAdapter: {
        serializedName: "hasFibreChannelAdapter",
        type: {
          name: "String"
        }
      },
      hasSharedVhd: {
        serializedName: "hasSharedVhd",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmNicUpdatesTaskDetails: coreHttp.CompositeMapper = {
  serializedName: "VmNicUpdatesTaskDetails",
  type: {
    name: "Composite",
    className: "VmNicUpdatesTaskDetails",
    uberParent: "TaskTypeDetails",
    polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskTypeDetails.type.modelProperties,
      vmId: {
        serializedName: "vmId",
        type: {
          name: "String"
        }
      },
      nicId: {
        serializedName: "nicId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtContainerCreationInput: coreHttp.CompositeMapper = {
  serializedName: "6c7da455-506f-43ff-a16a-8eb101aebb70",
  type: {
    name: "Composite",
    className: "VMwareCbtContainerCreationInput",
    uberParent: "ReplicationProviderSpecificContainerCreationInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerCreationInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerCreationInput.type.modelProperties
    }
  }
};

export const VMwareCbtContainerMappingInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtContainerMappingInput",
    uberParent: "ReplicationProviderSpecificContainerMappingInput",
    polymorphicDiscriminator:
      ReplicationProviderSpecificContainerMappingInput.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationProviderSpecificContainerMappingInput.type.modelProperties,
      keyVaultId: {
        serializedName: "keyVaultId",
        required: true,
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        required: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      storageAccountSasSecretName: {
        serializedName: "storageAccountSasSecretName",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceBusConnectionStringSecretName: {
        serializedName: "serviceBusConnectionStringSecretName",
        required: true,
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtDiskInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbtDiskInput",
  type: {
    name: "Composite",
    className: "VMwareCbtDiskInput",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      isOSDisk: {
        serializedName: "isOSDisk",
        required: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountSasSecretName: {
        serializedName: "logStorageAccountSasSecretName",
        required: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtEnableMigrationInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtEnableMigrationInput",
    uberParent: "EnableMigrationProviderSpecificInput",
    polymorphicDiscriminator:
      EnableMigrationProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnableMigrationProviderSpecificInput.type.modelProperties,
      vmwareMachineId: {
        serializedName: "vmwareMachineId",
        required: true,
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        serializedName: "disksToInclude",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VMwareCbtDiskInput" }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      dataMoverRunAsAccountId: {
        serializedName: "dataMoverRunAsAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      snapshotRunAsAccountId: {
        serializedName: "snapshotRunAsAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtMigrateInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtMigrateInput",
    uberParent: "MigrateProviderSpecificInput",
    polymorphicDiscriminator:
      MigrateProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...MigrateProviderSpecificInput.type.modelProperties,
      performShutdown: {
        serializedName: "performShutdown",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtMigrationDetails: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtMigrationDetails",
    uberParent: "MigrationProviderSpecificSettings",
    polymorphicDiscriminator:
      MigrationProviderSpecificSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...MigrationProviderSpecificSettings.type.modelProperties,
      vmwareMachineId: {
        serializedName: "vmwareMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      dataMoverRunAsAccountId: {
        serializedName: "dataMoverRunAsAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snapshotRunAsAccountId: {
        serializedName: "snapshotRunAsAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareCbtProtectedDiskDetails"
            }
          }
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VMwareCbtNicDetails" }
          }
        }
      },
      migrationRecoveryPointId: {
        serializedName: "migrationRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRecoveryPointReceived: {
        serializedName: "lastRecoveryPointReceived",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const VMwareCbtProtectedDiskDetails: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbtProtectedDiskDetails",
  type: {
    name: "Composite",
    className: "VMwareCbtProtectedDiskDetails",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskName: {
        serializedName: "diskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskPath: {
        serializedName: "diskPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isOSDisk: {
        serializedName: "isOSDisk",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      logStorageAccountId: {
        serializedName: "logStorageAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      logStorageAccountSasSecretName: {
        serializedName: "logStorageAccountSasSecretName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      seedManagedDiskId: {
        serializedName: "seedManagedDiskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetManagedDiskId: {
        serializedName: "targetManagedDiskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtNicDetails: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbtNicDetails",
  type: {
    name: "Composite",
    className: "VMwareCbtNicDetails",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPrimaryNic: {
        serializedName: "isPrimaryNic",
        type: {
          name: "String"
        }
      },
      sourceIPAddress: {
        serializedName: "sourceIPAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceIPAddressType: {
        serializedName: "sourceIPAddressType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceNetworkId: {
        serializedName: "sourceNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetIPAddress: {
        serializedName: "targetIPAddress",
        type: {
          name: "String"
        }
      },
      targetIPAddressType: {
        serializedName: "targetIPAddressType",
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      isSelectedForMigration: {
        serializedName: "isSelectedForMigration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtNicInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbtNicInput",
  type: {
    name: "Composite",
    className: "VMwareCbtNicInput",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        required: true,
        type: {
          name: "String"
        }
      },
      isPrimaryNic: {
        serializedName: "isPrimaryNic",
        required: true,
        type: {
          name: "String"
        }
      },
      targetSubnetName: {
        serializedName: "targetSubnetName",
        type: {
          name: "String"
        }
      },
      targetStaticIPAddress: {
        serializedName: "targetStaticIPAddress",
        type: {
          name: "String"
        }
      },
      isSelectedForMigration: {
        serializedName: "isSelectedForMigration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtPolicyCreationInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtPolicyCreationInput",
    uberParent: "PolicyProviderSpecificInput",
    polymorphicDiscriminator:
      PolicyProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificInput.type.modelProperties,
      recoveryPointHistoryInMinutes: {
        serializedName: "recoveryPointHistoryInMinutes",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VmwareCbtPolicyDetails: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VmwareCbtPolicyDetails",
    uberParent: "PolicyProviderSpecificDetails",
    polymorphicDiscriminator:
      PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyProviderSpecificDetails.type.modelProperties,
      recoveryPointHistoryInMinutes: {
        serializedName: "recoveryPointHistoryInMinutes",
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VMwareCbtProtectionContainerMappingDetails: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtProtectionContainerMappingDetails",
    uberParent: "ProtectionContainerMappingProviderSpecificDetails",
    polymorphicDiscriminator:
      ProtectionContainerMappingProviderSpecificDetails.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionContainerMappingProviderSpecificDetails.type.modelProperties,
      keyVaultId: {
        serializedName: "keyVaultId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAccountSasSecretName: {
        serializedName: "storageAccountSasSecretName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceBusConnectionStringSecretName: {
        serializedName: "serviceBusConnectionStringSecretName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtTestMigrateInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtTestMigrateInput",
    uberParent: "TestMigrateProviderSpecificInput",
    polymorphicDiscriminator:
      TestMigrateProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...TestMigrateProviderSpecificInput.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkId: {
        serializedName: "networkId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareCbtUpdateMigrationItemInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareCbt",
  type: {
    name: "Composite",
    className: "VMwareCbtUpdateMigrationItemInput",
    uberParent: "UpdateMigrationItemProviderSpecificInput",
    polymorphicDiscriminator:
      UpdateMigrationItemProviderSpecificInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...UpdateMigrationItemProviderSpecificInput.type.modelProperties,
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        serializedName: "targetResourceGroupId",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      },
      targetBootDiagnosticsStorageAccountId: {
        serializedName: "targetBootDiagnosticsStorageAccountId",
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      vmNics: {
        serializedName: "vmNics",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VMwareCbtNicInput" }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareDetails: coreHttp.CompositeMapper = {
  serializedName: "VMware",
  type: {
    name: "Composite",
    className: "VMwareDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties,
      processServers: {
        serializedName: "processServers",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ProcessServer" } }
        }
      },
      masterTargetServers: {
        serializedName: "masterTargetServers",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MasterTargetServer" }
          }
        }
      },
      runAsAccounts: {
        serializedName: "runAsAccounts",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RunAsAccount" } }
        }
      },
      replicationPairCount: {
        serializedName: "replicationPairCount",
        type: {
          name: "String"
        }
      },
      processServerCount: {
        serializedName: "processServerCount",
        type: {
          name: "String"
        }
      },
      agentCount: {
        serializedName: "agentCount",
        type: {
          name: "String"
        }
      },
      protectedServers: {
        serializedName: "protectedServers",
        type: {
          name: "String"
        }
      },
      systemLoad: {
        serializedName: "systemLoad",
        type: {
          name: "String"
        }
      },
      systemLoadStatus: {
        serializedName: "systemLoadStatus",
        type: {
          name: "String"
        }
      },
      cpuLoad: {
        serializedName: "cpuLoad",
        type: {
          name: "String"
        }
      },
      cpuLoadStatus: {
        serializedName: "cpuLoadStatus",
        type: {
          name: "String"
        }
      },
      totalMemoryInBytes: {
        serializedName: "totalMemoryInBytes",
        type: {
          name: "Number"
        }
      },
      availableMemoryInBytes: {
        serializedName: "availableMemoryInBytes",
        type: {
          name: "Number"
        }
      },
      memoryUsageStatus: {
        serializedName: "memoryUsageStatus",
        type: {
          name: "String"
        }
      },
      totalSpaceInBytes: {
        serializedName: "totalSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      availableSpaceInBytes: {
        serializedName: "availableSpaceInBytes",
        type: {
          name: "Number"
        }
      },
      spaceUsageStatus: {
        serializedName: "spaceUsageStatus",
        type: {
          name: "String"
        }
      },
      webLoad: {
        serializedName: "webLoad",
        type: {
          name: "String"
        }
      },
      webLoadStatus: {
        serializedName: "webLoadStatus",
        type: {
          name: "String"
        }
      },
      databaseServerLoad: {
        serializedName: "databaseServerLoad",
        type: {
          name: "String"
        }
      },
      databaseServerLoadStatus: {
        serializedName: "databaseServerLoadStatus",
        type: {
          name: "String"
        }
      },
      csServiceStatus: {
        serializedName: "csServiceStatus",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        type: {
          name: "DateTime"
        }
      },
      versionStatus: {
        serializedName: "versionStatus",
        type: {
          name: "String"
        }
      },
      sslCertExpiryDate: {
        serializedName: "sslCertExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      sslCertExpiryRemainingDays: {
        serializedName: "sslCertExpiryRemainingDays",
        type: {
          name: "Number"
        }
      },
      psTemplateVersion: {
        serializedName: "psTemplateVersion",
        type: {
          name: "String"
        }
      },
      agentExpiryDate: {
        serializedName: "agentExpiryDate",
        type: {
          name: "DateTime"
        }
      },
      agentVersionDetails: {
        serializedName: "agentVersionDetails",
        type: {
          name: "Composite",
          className: "VersionDetails"
        }
      }
    }
  }
};

export const VMwareV2FabricCreationInput: coreHttp.CompositeMapper = {
  serializedName: "VMwareV2",
  type: {
    name: "Composite",
    className: "VMwareV2FabricCreationInput",
    uberParent: "FabricSpecificCreationInput",
    polymorphicDiscriminator:
      FabricSpecificCreationInput.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificCreationInput.type.modelProperties,
      vmwareSiteId: {
        serializedName: "vmwareSiteId",
        required: true,
        type: {
          name: "String"
        }
      },
      migrationSolutionId: {
        serializedName: "migrationSolutionId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareV2FabricSpecificDetails: coreHttp.CompositeMapper = {
  serializedName: "VMwareV2",
  type: {
    name: "Composite",
    className: "VMwareV2FabricSpecificDetails",
    uberParent: "FabricSpecificDetails",
    polymorphicDiscriminator:
      FabricSpecificDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricSpecificDetails.type.modelProperties,
      vmwareSiteId: {
        serializedName: "vmwareSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationSolutionId: {
        serializedName: "migrationSolutionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceEndpoint: {
        serializedName: "serviceEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceResourceId: {
        serializedName: "serviceResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareVirtualMachineDetails: coreHttp.CompositeMapper = {
  serializedName: "VMwareVirtualMachine",
  type: {
    name: "Composite",
    className: "VMwareVirtualMachineDetails",
    uberParent: "ConfigurationSettings",
    polymorphicDiscriminator:
      ConfigurationSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ConfigurationSettings.type.modelProperties,
      agentGeneratedId: {
        serializedName: "agentGeneratedId",
        type: {
          name: "String"
        }
      },
      agentInstalled: {
        serializedName: "agentInstalled",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      poweredOn: {
        serializedName: "poweredOn",
        type: {
          name: "String"
        }
      },
      vCenterInfrastructureId: {
        serializedName: "vCenterInfrastructureId",
        type: {
          name: "String"
        }
      },
      discoveryType: {
        serializedName: "discoveryType",
        type: {
          name: "String"
        }
      },
      diskDetails: {
        serializedName: "diskDetails",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "InMageDiskDetails" }
          }
        }
      },
      validationErrors: {
        serializedName: "validationErrors",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HealthError" } }
        }
      }
    }
  }
};

export let discriminators = {
  EventProviderSpecificDetails: EventProviderSpecificDetails,
  EventSpecificDetails: EventSpecificDetails,
  FabricSpecificDetails: FabricSpecificDetails,
  FabricSpecificCreationInput: FabricSpecificCreationInput,
  NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
  FabricSpecificCreateNetworkMappingInput: FabricSpecificCreateNetworkMappingInput,
  FabricSpecificUpdateNetworkMappingInput: FabricSpecificUpdateNetworkMappingInput,
  ReplicationProviderSpecificContainerCreationInput: ReplicationProviderSpecificContainerCreationInput,
  MigrationProviderSpecificSettings: MigrationProviderSpecificSettings,
  EnableMigrationProviderSpecificInput: EnableMigrationProviderSpecificInput,
  UpdateMigrationItemProviderSpecificInput: UpdateMigrationItemProviderSpecificInput,
  MigrateProviderSpecificInput: MigrateProviderSpecificInput,
  TestMigrateProviderSpecificInput: TestMigrateProviderSpecificInput,
  ConfigurationSettings: ConfigurationSettings,
  ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
  EnableProtectionProviderSpecificInput: EnableProtectionProviderSpecificInput,
  UpdateReplicationProtectedItemProviderInput: UpdateReplicationProtectedItemProviderInput,
  AddDisksProviderSpecificInput: AddDisksProviderSpecificInput,
  ApplyRecoveryPointProviderSpecificInput: ApplyRecoveryPointProviderSpecificInput,
  ProviderSpecificFailoverInput: ProviderSpecificFailoverInput,
  ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
  DisableProtectionProviderSpecificInput: DisableProtectionProviderSpecificInput,
  RemoveDisksProviderSpecificInput: RemoveDisksProviderSpecificInput,
  ReverseReplicationProviderSpecificInput: ReverseReplicationProviderSpecificInput,
  ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
  ReplicationProviderSpecificContainerMappingInput: ReplicationProviderSpecificContainerMappingInput,
  ReplicationProviderSpecificUpdateContainerMappingInput: ReplicationProviderSpecificUpdateContainerMappingInput,
  SwitchProtectionProviderSpecificInput: SwitchProtectionProviderSpecificInput,
  TaskTypeDetails: TaskTypeDetails,
  GroupTaskDetails: GroupTaskDetails,
  JobDetails: JobDetails,
  PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
  PolicyProviderSpecificInput: PolicyProviderSpecificInput,
  RecoveryPlanActionDetails: RecoveryPlanActionDetails,
  RecoveryPlanProviderSpecificDetails: RecoveryPlanProviderSpecificDetails,
  RecoveryPlanProviderSpecificInput: RecoveryPlanProviderSpecificInput,
  RecoveryPlanProviderSpecificFailoverInput: RecoveryPlanProviderSpecificFailoverInput,
  "AddDisksProviderSpecificInput.A2A": A2AAddDisksInput,
  "ApplyRecoveryPointProviderSpecificInput.A2A": A2AApplyRecoveryPointInput,
  "ReplicationProviderSpecificContainerCreationInput.A2A": A2AContainerCreationInput,
  "ReplicationProviderSpecificContainerMappingInput.A2A": A2AContainerMappingInput,
  "EnableProtectionProviderSpecificInput.A2A": A2AEnableProtectionInput,
  "EventProviderSpecificDetails.A2A": A2AEventDetails,
  "ProviderSpecificFailoverInput.A2A": A2AFailoverProviderInput,
  "PolicyProviderSpecificInput.A2A": A2APolicyCreationInput,
  "PolicyProviderSpecificDetails.A2A": A2APolicyDetails,
  "ProtectionContainerMappingProviderSpecificDetails.A2A": A2AProtectionContainerMappingDetails,
  "ProviderSpecificRecoveryPointDetails.A2A": A2ARecoveryPointDetails,
  "RemoveDisksProviderSpecificInput.A2A": A2ARemoveDisksInput,
  "ReplicationProviderSpecificSettings.A2A": A2AReplicationDetails,
  "ReverseReplicationProviderSpecificInput.A2A": A2AReprotectInput,
  "SwitchProtectionProviderSpecificInput.A2A": A2ASwitchProtectionInput,
  "ReplicationProviderSpecificUpdateContainerMappingInput.A2A": A2AUpdateContainerMappingInput,
  "UpdateReplicationProtectedItemProviderInput.A2A": A2AUpdateReplicationProtectedItemInput,
  "JobDetails.AsrJobDetails": AsrJobDetails,
  "TaskTypeDetails.AutomationRunbookTaskDetails": AutomationRunbookTaskDetails,
  "FabricSpecificCreationInput.Azure": AzureFabricCreationInput,
  "FabricSpecificDetails.Azure": AzureFabricSpecificDetails,
  "FabricSpecificCreateNetworkMappingInput.AzureToAzure": AzureToAzureCreateNetworkMappingInput,
  "NetworkMappingFabricSpecificSettings.AzureToAzure": AzureToAzureNetworkMappingSettings,
  "FabricSpecificUpdateNetworkMappingInput.AzureToAzure": AzureToAzureUpdateNetworkMappingInput,
  "TaskTypeDetails.ConsistencyCheckTaskDetails": ConsistencyCheckTaskDetails,
  "JobDetails.ExportJobDetails": ExportJobDetails,
  "TaskTypeDetails.FabricReplicationGroupTaskDetails": FabricReplicationGroupTaskDetails,
  "JobDetails.FailoverJobDetails": FailoverJobDetails,
  "EventProviderSpecificDetails.HyperVReplica2012": HyperVReplica2012EventDetails,
  "EventProviderSpecificDetails.HyperVReplica2012R2": HyperVReplica2012R2EventDetails,
  "ApplyRecoveryPointProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureApplyRecoveryPointInput,
  "EnableProtectionProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureEnableProtectionInput,
  "EventProviderSpecificDetails.HyperVReplicaAzure": HyperVReplicaAzureEventDetails,
  "ProviderSpecificFailoverInput.HyperVReplicaAzureFailback": HyperVReplicaAzureFailbackProviderInput,
  "ProviderSpecificFailoverInput.HyperVReplicaAzure": HyperVReplicaAzureFailoverProviderInput,
  "PolicyProviderSpecificDetails.HyperVReplicaAzure": HyperVReplicaAzurePolicyDetails,
  "PolicyProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzurePolicyInput,
  "ReplicationProviderSpecificSettings.HyperVReplicaAzure": HyperVReplicaAzureReplicationDetails,
  "ReverseReplicationProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureReprotectInput,
  "UpdateReplicationProtectedItemProviderInput.HyperVReplicaAzure": HyperVReplicaAzureUpdateReplicationProtectedItemInput,
  "EventProviderSpecificDetails.HyperVReplicaBaseEventDetails": HyperVReplicaBaseEventDetails,
  "PolicyProviderSpecificDetails.HyperVReplicaBasePolicyDetails": HyperVReplicaBasePolicyDetails,
  "ReplicationProviderSpecificSettings.HyperVReplicaBaseReplicationDetails": HyperVReplicaBaseReplicationDetails,
  "PolicyProviderSpecificDetails.HyperVReplica2012R2": HyperVReplicaBluePolicyDetails,
  "PolicyProviderSpecificInput.HyperVReplica2012R2": HyperVReplicaBluePolicyInput,
  "ReplicationProviderSpecificSettings.HyperVReplica2012R2": HyperVReplicaBlueReplicationDetails,
  "PolicyProviderSpecificDetails.HyperVReplica2012": HyperVReplicaPolicyDetails,
  "PolicyProviderSpecificInput.HyperVReplica2012": HyperVReplicaPolicyInput,
  "ReplicationProviderSpecificSettings.HyperVReplica2012": HyperVReplicaReplicationDetails,
  "FabricSpecificDetails.HyperVSite": HyperVSiteDetails,
  "ConfigurationSettings.HyperVVirtualMachine": HyperVVirtualMachineDetails,
  "GroupTaskDetails.InlineWorkflowTaskDetails": InlineWorkflowTaskDetails,
  "ApplyRecoveryPointProviderSpecificInput.InMageAzureV2": InMageAzureV2ApplyRecoveryPointInput,
  "EnableProtectionProviderSpecificInput.InMageAzureV2": InMageAzureV2EnableProtectionInput,
  "EventProviderSpecificDetails.InMageAzureV2": InMageAzureV2EventDetails,
  "ProviderSpecificFailoverInput.InMageAzureV2": InMageAzureV2FailoverProviderInput,
  "PolicyProviderSpecificDetails.InMageAzureV2": InMageAzureV2PolicyDetails,
  "PolicyProviderSpecificInput.InMageAzureV2": InMageAzureV2PolicyInput,
  "ProviderSpecificRecoveryPointDetails.InMageAzureV2": InMageAzureV2RecoveryPointDetails,
  "ReplicationProviderSpecificSettings.InMageAzureV2": InMageAzureV2ReplicationDetails,
  "ReverseReplicationProviderSpecificInput.InMageAzureV2": InMageAzureV2ReprotectInput,
  "UpdateReplicationProtectedItemProviderInput.InMageAzureV2": InMageAzureV2UpdateReplicationProtectedItemInput,
  "PolicyProviderSpecificDetails.InMageBasePolicyDetails": InMageBasePolicyDetails,
  "DisableProtectionProviderSpecificInput.InMage": InMageDisableProtectionProviderSpecificInput,
  "EnableProtectionProviderSpecificInput.InMage": InMageEnableProtectionInput,
  "ProviderSpecificFailoverInput.InMage": InMageFailoverProviderInput,
  "PolicyProviderSpecificDetails.InMage": InMagePolicyDetails,
  "PolicyProviderSpecificInput.InMage": InMagePolicyInput,
  "ReplicationProviderSpecificSettings.InMage": InMageReplicationDetails,
  "ReverseReplicationProviderSpecificInput.InMage": InMageReprotectInput,
  "EventSpecificDetails.JobStatus": JobStatusEventDetails,
  "TaskTypeDetails.JobTaskDetails": JobTaskDetails,
  "TaskTypeDetails.ManualActionTaskDetails": ManualActionTaskDetails,
  "PolicyProviderSpecificDetails.RcmAzureMigration": RcmAzureMigrationPolicyDetails,
  "RecoveryPlanProviderSpecificFailoverInput.A2A": RecoveryPlanA2AFailoverInput,
  "RecoveryPlanProviderSpecificDetails.RecoveryPlanA2ADetails": RecoveryPlanA2ADetails,
  "RecoveryPlanProviderSpecificInput.A2A": RecoveryPlanA2AInput,
  "RecoveryPlanActionDetails.AutomationRunbookActionDetails": RecoveryPlanAutomationRunbookActionDetails,
  "GroupTaskDetails.RecoveryPlanGroupTaskDetails": RecoveryPlanGroupTaskDetails,
  "RecoveryPlanProviderSpecificFailoverInput.HyperVReplicaAzureFailback": RecoveryPlanHyperVReplicaAzureFailbackInput,
  "RecoveryPlanProviderSpecificFailoverInput.HyperVReplicaAzure": RecoveryPlanHyperVReplicaAzureFailoverInput,
  "RecoveryPlanProviderSpecificFailoverInput.InMageAzureV2": RecoveryPlanInMageAzureV2FailoverInput,
  "RecoveryPlanProviderSpecificFailoverInput.InMage": RecoveryPlanInMageFailoverInput,
  "RecoveryPlanActionDetails.ManualActionDetails": RecoveryPlanManualActionDetails,
  "RecoveryPlanActionDetails.ScriptActionDetails": RecoveryPlanScriptActionDetails,
  "GroupTaskDetails.RecoveryPlanShutdownGroupTaskDetails": RecoveryPlanShutdownGroupTaskDetails,
  "ConfigurationSettings.ReplicationGroupDetails": ReplicationGroupDetails,
  "EnableProtectionProviderSpecificInput.San": SanEnableProtectionInput,
  "TaskTypeDetails.ScriptActionTaskDetails": ScriptActionTaskDetails,
  "JobDetails.SwitchProtectionJobDetails": SwitchProtectionJobDetails,
  "JobDetails.TestFailoverJobDetails": TestFailoverJobDetails,
  "TaskTypeDetails.VirtualMachineTaskDetails": VirtualMachineTaskDetails,
  "FabricSpecificDetails.VMM": VmmDetails,
  "FabricSpecificCreateNetworkMappingInput.VmmToAzure": VmmToAzureCreateNetworkMappingInput,
  "NetworkMappingFabricSpecificSettings.VmmToAzure": VmmToAzureNetworkMappingSettings,
  "FabricSpecificUpdateNetworkMappingInput.VmmToAzure": VmmToAzureUpdateNetworkMappingInput,
  "FabricSpecificCreateNetworkMappingInput.VmmToVmm": VmmToVmmCreateNetworkMappingInput,
  "NetworkMappingFabricSpecificSettings.VmmToVmm": VmmToVmmNetworkMappingSettings,
  "FabricSpecificUpdateNetworkMappingInput.VmmToVmm": VmmToVmmUpdateNetworkMappingInput,
  "ConfigurationSettings.VmmVirtualMachine": VmmVirtualMachineDetails,
  "TaskTypeDetails.VmNicUpdatesTaskDetails": VmNicUpdatesTaskDetails,
  "ReplicationProviderSpecificContainerCreationInput.6c7da455-506f-43ff-a16a-8eb101aebb70": VMwareCbtContainerCreationInput,
  "ReplicationProviderSpecificContainerMappingInput.VMwareCbt": VMwareCbtContainerMappingInput,
  "EnableMigrationProviderSpecificInput.VMwareCbt": VMwareCbtEnableMigrationInput,
  "MigrateProviderSpecificInput.VMwareCbt": VMwareCbtMigrateInput,
  "MigrationProviderSpecificSettings.VMwareCbt": VMwareCbtMigrationDetails,
  "PolicyProviderSpecificInput.VMwareCbt": VMwareCbtPolicyCreationInput,
  "PolicyProviderSpecificDetails.VMwareCbt": VmwareCbtPolicyDetails,
  "ProtectionContainerMappingProviderSpecificDetails.VMwareCbt": VMwareCbtProtectionContainerMappingDetails,
  "TestMigrateProviderSpecificInput.VMwareCbt": VMwareCbtTestMigrateInput,
  "UpdateMigrationItemProviderSpecificInput.VMwareCbt": VMwareCbtUpdateMigrationItemInput,
  "FabricSpecificDetails.VMware": VMwareDetails,
  "FabricSpecificCreationInput.VMwareV2": VMwareV2FabricCreationInput,
  "FabricSpecificDetails.VMwareV2": VMwareV2FabricSpecificDetails,
  "ConfigurationSettings.VMwareVirtualMachine": VMwareVirtualMachineDetails
};
