/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-07-10",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    serializedName: "resourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const alertSettingName: coreHttp.OperationURLParameter = {
  parameterPath: "alertSettingName",
  mapper: {
    serializedName: "alertSettingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const request: coreHttp.OperationParameter = {
  parameterPath: "request",
  mapper: Mappers.ConfigureAlertRequest
};

export const alertSettingName1: coreHttp.OperationURLParameter = {
  parameterPath: "alertSettingName",
  mapper: {
    serializedName: "alertSettingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualMachineName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualMachineName",
  mapper: {
    serializedName: "virtualMachineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const eventName: coreHttp.OperationURLParameter = {
  parameterPath: "eventName",
  mapper: {
    serializedName: "eventName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fabricName: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.FabricCreationInput
};

export const fabricName1: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fabricName2: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fabricName3: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const failoverProcessServerRequest: coreHttp.OperationParameter = {
  parameterPath: "failoverProcessServerRequest",
  mapper: Mappers.FailoverProcessServerRequest
};

export const fabricName4: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fabricName5: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const renewCertificate: coreHttp.OperationParameter = {
  parameterPath: "renewCertificate",
  mapper: Mappers.RenewCertificateInput
};

export const fabricName6: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fabricName7: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const logicalNetworkName: coreHttp.OperationURLParameter = {
  parameterPath: "logicalNetworkName",
  mapper: {
    serializedName: "logicalNetworkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const fabricName8: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkName: coreHttp.OperationURLParameter = {
  parameterPath: "networkName",
  mapper: {
    serializedName: "networkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fabricName9: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkMappingName: coreHttp.OperationURLParameter = {
  parameterPath: "networkMappingName",
  mapper: {
    serializedName: "networkMappingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input1: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.CreateNetworkMappingInput
};

export const networkMappingName1: coreHttp.OperationURLParameter = {
  parameterPath: "networkMappingName",
  mapper: {
    serializedName: "networkMappingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input2: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.UpdateNetworkMappingInput
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const protectionContainerName: coreHttp.OperationURLParameter = {
  parameterPath: "protectionContainerName",
  mapper: {
    serializedName: "protectionContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const creationInput: coreHttp.OperationParameter = {
  parameterPath: "creationInput",
  mapper: Mappers.CreateProtectionContainerInput
};

export const fabricName10: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const protectionContainerName1: coreHttp.OperationURLParameter = {
  parameterPath: "protectionContainerName",
  mapper: {
    serializedName: "protectionContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const discoverProtectableItemRequest: coreHttp.OperationParameter = {
  parameterPath: "discoverProtectableItemRequest",
  mapper: Mappers.DiscoverProtectableItemRequest
};

export const fabricName11: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const protectionContainerName2: coreHttp.OperationURLParameter = {
  parameterPath: "protectionContainerName",
  mapper: {
    serializedName: "protectionContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const switchInput: coreHttp.OperationParameter = {
  parameterPath: "switchInput",
  mapper: Mappers.SwitchProtectionInput
};

export const fabricName12: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fabricName13: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const migrationItemName: coreHttp.OperationURLParameter = {
  parameterPath: "migrationItemName",
  mapper: {
    serializedName: "migrationItemName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input3: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.EnableMigrationInput
};

export const deleteOption: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "deleteOption"],
  mapper: {
    serializedName: "deleteOption",
    type: {
      name: "String"
    }
  }
};

export const input4: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.UpdateMigrationItemInput
};

export const migrateInput: coreHttp.OperationParameter = {
  parameterPath: "migrateInput",
  mapper: Mappers.MigrateInput
};

export const testMigrateInput: coreHttp.OperationParameter = {
  parameterPath: "testMigrateInput",
  mapper: Mappers.TestMigrateInput
};

export const testMigrateCleanupInput: coreHttp.OperationParameter = {
  parameterPath: "testMigrateCleanupInput",
  mapper: Mappers.TestMigrateCleanupInput
};

export const skipToken: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "skipToken",
    type: {
      name: "String"
    }
  }
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const migrationRecoveryPointName: coreHttp.OperationURLParameter = {
  parameterPath: "migrationRecoveryPointName",
  mapper: {
    serializedName: "migrationRecoveryPointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const protectableItemName: coreHttp.OperationURLParameter = {
  parameterPath: "protectableItemName",
  mapper: {
    serializedName: "protectableItemName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const replicatedProtectedItemName: coreHttp.OperationURLParameter = {
  parameterPath: "replicatedProtectedItemName",
  mapper: {
    serializedName: "replicatedProtectedItemName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input5: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.EnableProtectionInput
};

export const fabricName14: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const replicatedProtectedItemName1: coreHttp.OperationURLParameter = {
  parameterPath: "replicatedProtectedItemName",
  mapper: {
    serializedName: "replicatedProtectedItemName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const updateProtectionInput: coreHttp.OperationParameter = {
  parameterPath: "updateProtectionInput",
  mapper: Mappers.UpdateReplicationProtectedItemInput
};

export const addDisksInput: coreHttp.OperationParameter = {
  parameterPath: "addDisksInput",
  mapper: Mappers.AddDisksInput
};

export const applyRecoveryPointInput: coreHttp.OperationParameter = {
  parameterPath: "applyRecoveryPointInput",
  mapper: Mappers.ApplyRecoveryPointInput
};

export const fabricName15: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const protectionContainerName3: coreHttp.OperationURLParameter = {
  parameterPath: "protectionContainerName",
  mapper: {
    serializedName: "protectionContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const replicatedProtectedItemName2: coreHttp.OperationURLParameter = {
  parameterPath: "replicatedProtectedItemName",
  mapper: {
    serializedName: "replicatedProtectedItemName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const failoverInput: coreHttp.OperationParameter = {
  parameterPath: "failoverInput",
  mapper: Mappers.PlannedFailoverInput
};

export const disableProtectionInput: coreHttp.OperationParameter = {
  parameterPath: "disableProtectionInput",
  mapper: Mappers.DisableProtectionInput
};

export const removeDisksInput: coreHttp.OperationParameter = {
  parameterPath: "removeDisksInput",
  mapper: Mappers.RemoveDisksInput
};

export const protectionContainerName4: coreHttp.OperationURLParameter = {
  parameterPath: "protectionContainerName",
  mapper: {
    serializedName: "protectionContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const replicatedProtectedItemName3: coreHttp.OperationURLParameter = {
  parameterPath: "replicatedProtectedItemName",
  mapper: {
    serializedName: "replicatedProtectedItemName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const rrInput: coreHttp.OperationParameter = {
  parameterPath: "rrInput",
  mapper: Mappers.ReverseReplicationInput
};

export const resolveHealthInput: coreHttp.OperationParameter = {
  parameterPath: "resolveHealthInput",
  mapper: Mappers.ResolveHealthInput
};

export const failoverInput1: coreHttp.OperationParameter = {
  parameterPath: "failoverInput",
  mapper: Mappers.TestFailoverInput
};

export const cleanupInput: coreHttp.OperationParameter = {
  parameterPath: "cleanupInput",
  mapper: Mappers.TestFailoverCleanupInput
};

export const failoverInput2: coreHttp.OperationParameter = {
  parameterPath: "failoverInput",
  mapper: Mappers.UnplannedFailoverInput
};

export const updateMobilityServiceRequest: coreHttp.OperationParameter = {
  parameterPath: "updateMobilityServiceRequest",
  mapper: Mappers.UpdateMobilityServiceRequest
};

export const fabricName16: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const protectionContainerName5: coreHttp.OperationURLParameter = {
  parameterPath: "protectionContainerName",
  mapper: {
    serializedName: "protectionContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const replicationProtectedItemName: coreHttp.OperationURLParameter = {
  parameterPath: "replicationProtectedItemName",
  mapper: {
    serializedName: "replicationProtectedItemName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const skipToken1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "skipToken",
    type: {
      name: "String"
    }
  }
};

export const fabricName17: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const replicatedProtectedItemName4: coreHttp.OperationURLParameter = {
  parameterPath: "replicatedProtectedItemName",
  mapper: {
    serializedName: "replicatedProtectedItemName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const recoveryPointName: coreHttp.OperationURLParameter = {
  parameterPath: "recoveryPointName",
  mapper: {
    serializedName: "recoveryPointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const protectionContainerName6: coreHttp.OperationURLParameter = {
  parameterPath: "protectionContainerName",
  mapper: {
    serializedName: "protectionContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const mappingName: coreHttp.OperationURLParameter = {
  parameterPath: "mappingName",
  mapper: {
    serializedName: "mappingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const creationInput1: coreHttp.OperationParameter = {
  parameterPath: "creationInput",
  mapper: Mappers.CreateProtectionContainerMappingInput
};

export const mappingName1: coreHttp.OperationURLParameter = {
  parameterPath: "mappingName",
  mapper: {
    serializedName: "mappingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const updateInput: coreHttp.OperationParameter = {
  parameterPath: "updateInput",
  mapper: Mappers.UpdateProtectionContainerMappingInput
};

export const removalInput: coreHttp.OperationParameter = {
  parameterPath: "removalInput",
  mapper: Mappers.RemoveProtectionContainerMappingInput
};

export const providerName: coreHttp.OperationURLParameter = {
  parameterPath: "providerName",
  mapper: {
    serializedName: "providerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const addProviderInput: coreHttp.OperationParameter = {
  parameterPath: "addProviderInput",
  mapper: Mappers.AddRecoveryServicesProviderInput
};

export const providerName1: coreHttp.OperationURLParameter = {
  parameterPath: "providerName",
  mapper: {
    serializedName: "providerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fabricName18: coreHttp.OperationURLParameter = {
  parameterPath: "fabricName",
  mapper: {
    serializedName: "fabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageClassificationName: coreHttp.OperationURLParameter = {
  parameterPath: "storageClassificationName",
  mapper: {
    serializedName: "storageClassificationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageClassificationMappingName: coreHttp.OperationURLParameter = {
  parameterPath: "storageClassificationMappingName",
  mapper: {
    serializedName: "storageClassificationMappingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const pairingInput: coreHttp.OperationParameter = {
  parameterPath: "pairingInput",
  mapper: Mappers.StorageClassificationMappingInput
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const vCenterName: coreHttp.OperationURLParameter = {
  parameterPath: "vCenterName",
  mapper: {
    serializedName: "vCenterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const addVCenterRequest: coreHttp.OperationParameter = {
  parameterPath: "addVCenterRequest",
  mapper: Mappers.AddVCenterRequest
};

export const updateVCenterRequest: coreHttp.OperationParameter = {
  parameterPath: "updateVCenterRequest",
  mapper: Mappers.UpdateVCenterRequest
};

export const vCenterName1: coreHttp.OperationURLParameter = {
  parameterPath: "vCenterName",
  mapper: {
    serializedName: "vCenterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobName: coreHttp.OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    serializedName: "jobName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobName1: coreHttp.OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    serializedName: "jobName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resumeJobParams: coreHttp.OperationParameter = {
  parameterPath: "resumeJobParams",
  mapper: Mappers.ResumeJobParams
};

export const jobQueryParameter: coreHttp.OperationParameter = {
  parameterPath: "jobQueryParameter",
  mapper: Mappers.JobQueryParameter
};

export const policyName: coreHttp.OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input6: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.CreatePolicyInput
};

export const policyName1: coreHttp.OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input7: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.UpdatePolicyInput
};

export const policyName2: coreHttp.OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const recoveryPlanName: coreHttp.OperationURLParameter = {
  parameterPath: "recoveryPlanName",
  mapper: {
    serializedName: "recoveryPlanName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input8: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.CreateRecoveryPlanInput
};

export const recoveryPlanName1: coreHttp.OperationURLParameter = {
  parameterPath: "recoveryPlanName",
  mapper: {
    serializedName: "recoveryPlanName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input9: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.UpdateRecoveryPlanInput
};

export const input10: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.RecoveryPlanPlannedFailoverInput
};

export const input11: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.RecoveryPlanTestFailoverInput
};

export const input12: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.RecoveryPlanTestFailoverCleanupInput
};

export const input13: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.RecoveryPlanUnplannedFailoverInput
};

export const vaultSettingName: coreHttp.OperationURLParameter = {
  parameterPath: "vaultSettingName",
  mapper: {
    serializedName: "vaultSettingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input14: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.VaultSettingCreationInput
};
