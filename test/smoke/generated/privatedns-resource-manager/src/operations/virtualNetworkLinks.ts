/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PrivateDnsManagementClient } from "../privateDnsManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  VirtualNetworkLink,
  VirtualNetworkLinksCreateOrUpdateOptionalParams,
  VirtualNetworkLinksCreateOrUpdateResponse,
  VirtualNetworkLinksUpdateOptionalParams,
  VirtualNetworkLinksUpdateResponse,
  VirtualNetworkLinksDeleteOptionalParams,
  VirtualNetworkLinksGetResponse,
  VirtualNetworkLinksListOptionalParams,
  VirtualNetworkLinksListResponse,
  VirtualNetworkLinksListNextOptionalParams,
  VirtualNetworkLinksListNextResponse
} from "../models";

/**
 * Class representing a VirtualNetworkLinks.
 */
export class VirtualNetworkLinks {
  private readonly client: PrivateDnsManagementClient;

  /**
   * Initialize a new instance of the class VirtualNetworkLinks class.
   * @param client Reference to the service client
   */
  constructor(client: PrivateDnsManagementClient) {
    this.client = client;
  }

  /**
   * Creates or updates a virtual network link to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param parameters Parameters supplied to the CreateOrUpdate operation.
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    privateZoneName: string,
    parameters: VirtualNetworkLink,
    virtualNetworkLinkName: string,
    options?: VirtualNetworkLinksCreateOrUpdateOptionalParams
  ): Promise<LROPoller<VirtualNetworkLinksCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      privateZoneName,
      parameters,
      virtualNetworkLinkName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkLinksCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates a virtual network link to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param parameters Parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    privateZoneName: string,
    virtualNetworkLinkName: string,
    parameters: VirtualNetworkLink,
    options?: VirtualNetworkLinksUpdateOptionalParams
  ): Promise<LROPoller<VirtualNetworkLinksUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      privateZoneName,
      virtualNetworkLinkName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        VirtualNetworkLinksUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes a virtual network link to the specified Private DNS zone. WARNING: In case of a registration
   * virtual network, all auto-registered DNS records in the zone for the virtual network will also be
   * deleted. This operation cannot be undone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    privateZoneName: string,
    virtualNetworkLinkName: string,
    options?: VirtualNetworkLinksDeleteOptionalParams
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      privateZoneName,
      virtualNetworkLinkName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets a virtual network link to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    privateZoneName: string,
    virtualNetworkLinkName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworkLinksGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateZoneName,
        virtualNetworkLinkName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<VirtualNetworkLinksGetResponse>;
  }

  /**
   * Lists the virtual network links to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    privateZoneName: string,
    options?: VirtualNetworkLinksListOptionalParams
  ): Promise<VirtualNetworkLinksListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, privateZoneName, options: operationOptions },
      listOperationSpec
    ) as Promise<VirtualNetworkLinksListResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    privateZoneName: string,
    nextLink: string,
    options?: VirtualNetworkLinksListNextOptionalParams
  ): Promise<VirtualNetworkLinksListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateZoneName,
        nextLink,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<VirtualNetworkLinksListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    201: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    202: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    204: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkLinkName
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.ifMatch2,
    Parameters.ifNoneMatch1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    201: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    202: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    204: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkLinkName
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch2],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkLinkName
  ],
  headerParameters: [Parameters.ifMatch3],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkLinkName
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
