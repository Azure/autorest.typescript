/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageCacheManagementClient } from "../storageCacheManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  CachesListResponse,
  CachesListByResourceGroupResponse,
  CachesDeleteResponse,
  CachesGetResponse,
  CachesCreateOrUpdateOptionalParams,
  CachesCreateOrUpdateResponse,
  CachesUpdateOptionalParams,
  CachesUpdateResponse,
  CachesFlushResponse,
  CachesStartResponse,
  CachesStopResponse,
  CachesUpgradeFirmwareResponse,
  CachesListNextResponse,
  CachesListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a Caches.
 */
export class Caches {
  private readonly client: StorageCacheManagementClient;

  /**
   * Initialize a new instance of the class Caches class.
   * @param client Reference to the service client
   */
  constructor(client: StorageCacheManagementClient) {
    this.client = client;
  }

  /**
   * Returns all Caches the user has access to under a subscription.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<CachesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<CachesListResponse>;
  }

  /**
   * Returns all Caches the user has access to under a resource group.
   * @param resourceGroupName Target resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CachesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<CachesListByResourceGroupResponse>;
  }

  /**
   * Schedules a Cache for deletion.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    cacheName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CachesDeleteResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      cacheName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CachesDeleteResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Returns a Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    cacheName: string,
    options?: coreHttp.OperationOptions
  ): Promise<CachesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, cacheName, options: operationOptions },
      getOperationSpec
    ) as Promise<CachesGetResponse>;
  }

  /**
   * Create or update a Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesCreateOrUpdateOptionalParams
  ): Promise<LROPoller<CachesCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      cacheName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CachesCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Update a Cache instance.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesUpdateOptionalParams
  ): Promise<CachesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, cacheName, options: operationOptions },
      updateOperationSpec
    ) as Promise<CachesUpdateResponse>;
  }

  /**
   * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see
   * errors returned until the flush is complete.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  async flush(
    resourceGroupName: string,
    cacheName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CachesFlushResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      cacheName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CachesFlushResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      flushOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: flushOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Tells a Stopped state Cache to transition to Active state.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  async start(
    resourceGroupName: string,
    cacheName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CachesStartResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      cacheName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CachesStartResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      startOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: startOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Tells an Active Cache to transition to Stopped state.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  async stop(
    resourceGroupName: string,
    cacheName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CachesStopResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      cacheName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CachesStopResponse
      >;
    const initialOperationResult = await sendOperation(args, stopOperationSpec);

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: stopOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  async upgradeFirmware(
    resourceGroupName: string,
    cacheName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<CachesUpgradeFirmwareResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      cacheName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        CachesUpgradeFirmwareResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      upgradeFirmwareOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: upgradeFirmwareOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<CachesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<CachesListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Target resource group.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<CachesListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<CachesListByResourceGroupNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.StorageCache/caches",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    202: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    204: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    201: {
      bodyMapper: Mappers.Cache
    },
    202: {
      bodyMapper: Mappers.Cache
    },
    204: {
      bodyMapper: Mappers.Cache
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.cache,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.cache1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const flushOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/flush",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    202: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    204: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  serializer
};
const startOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/start",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    202: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    204: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  serializer
};
const stopOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/stop",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    202: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    204: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  serializer
};
const upgradeFirmwareOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/upgrade",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    202: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    204: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink1
  ],
  serializer
};
