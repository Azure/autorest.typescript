/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageCacheManagementClient } from "../storageCacheManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  StorageTargetsListByCacheResponse,
  StorageTargetsDeleteResponse,
  StorageTargetsGetResponse,
  StorageTargetsCreateOrUpdateOptionalParams,
  StorageTargetsCreateOrUpdateResponse,
  StorageTargetsListByCacheNextResponse
} from "../models";

/**
 * Class representing a StorageTargets.
 */
export class StorageTargets {
  private readonly client: StorageCacheManagementClient;

  /**
   * Initialize a new instance of the class StorageTargets class.
   * @param client Reference to the service client
   */
  constructor(client: StorageCacheManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of Storage Targets for the specified Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param options The options parameters.
   */
  listByCache(
    resourceGroupName: string,
    cacheName: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageTargetsListByCacheResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, cacheName, options: operationOptions },
      listByCacheOperationSpec
    ) as Promise<StorageTargetsListByCacheResponse>;
  }

  /**
   * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is
   * down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is
   * healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be
   * flushed before the Storage Target will be deleted.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param storageTargetName Name of Storage Target.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<StorageTargetsDeleteResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      cacheName,
      storageTargetName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        StorageTargetsDeleteResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Returns a Storage Target from a Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param storageTargetName Name of the Storage Target.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageTargetsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        cacheName,
        storageTargetName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<StorageTargetsGetResponse>;
  }

  /**
   * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down
   * or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache
   * is healthy again.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param storageTargetName Name of the Storage Target.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: StorageTargetsCreateOrUpdateOptionalParams
  ): Promise<LROPoller<StorageTargetsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      cacheName,
      storageTargetName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        StorageTargetsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListByCacheNext
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache.
   * @param nextLink The nextLink from the previous successful call to the ListByCache method.
   * @param options The options parameters.
   */
  listByCacheNext(
    resourceGroupName: string,
    cacheName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<StorageTargetsListByCacheNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, cacheName, nextLink, options: operationOptions },
      listByCacheNextOperationSpec
    ) as Promise<StorageTargetsListByCacheNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByCacheOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageTargetsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    202: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    204: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName,
    Parameters.storageTargetName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageTarget
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName,
    Parameters.storageTargetName1
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StorageTarget
    },
    201: {
      bodyMapper: Mappers.StorageTarget
    },
    202: {
      bodyMapper: Mappers.StorageTarget
    },
    204: {
      bodyMapper: Mappers.StorageTarget
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.storagetarget,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName,
    Parameters.storageTargetName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByCacheNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageTargetsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName,
    Parameters.nextLink2
  ],
  serializer
};
