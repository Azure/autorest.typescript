/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ApiOperationListResult: coreHttp.CompositeMapper = {
  serializedName: "ApiOperationListResult",
  type: {
    name: "Composite",
    className: "ApiOperationListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ApiOperation" } }
        }
      }
    }
  }
};

export const ApiOperation: coreHttp.CompositeMapper = {
  serializedName: "ApiOperation",
  type: {
    name: "Composite",
    className: "ApiOperation",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ApiOperationDisplay"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiOperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "ApiOperationDisplay",
  type: {
    name: "Composite",
    className: "ApiOperationDisplay",
    modelProperties: {
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkusResult: coreHttp.CompositeMapper = {
  serializedName: "ResourceSkusResult",
  type: {
    name: "Composite",
    className: "ResourceSkusResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceSku" } }
        }
      }
    }
  }
};

export const ResourceSku: coreHttp.CompositeMapper = {
  serializedName: "ResourceSku",
  type: {
    name: "Composite",
    className: "ResourceSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceSkuCapabilities" }
          }
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceSkuLocationsItem"
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceSkuLocationInfo" }
          }
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Restriction" } }
        }
      }
    }
  }
};

export const ResourceSkuCapabilities: coreHttp.CompositeMapper = {
  serializedName: "ResourceSkuCapabilities",
  type: {
    name: "Composite",
    className: "ResourceSkuCapabilities",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkuLocationInfo: coreHttp.CompositeMapper = {
  serializedName: "ResourceSkuLocationInfo",
  type: {
    name: "Composite",
    className: "ResourceSkuLocationInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceSkuLocationInfoZonesItem"
          }
        }
      }
    }
  }
};

export const Restriction: coreHttp.CompositeMapper = {
  serializedName: "Restriction",
  type: {
    name: "Composite",
    className: "Restriction",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "RestrictionValuesItem"
          }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageModelsResult: coreHttp.CompositeMapper = {
  serializedName: "UsageModelsResult",
  type: {
    name: "Composite",
    className: "UsageModelsResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UsageModel" } }
        }
      }
    }
  }
};

export const UsageModel: coreHttp.CompositeMapper = {
  serializedName: "UsageModel",
  type: {
    name: "Composite",
    className: "UsageModel",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "UsageModelDisplay"
        }
      },
      modelName: {
        serializedName: "modelName",
        type: {
          name: "String"
        }
      },
      targetType: {
        serializedName: "targetType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageModelDisplay: coreHttp.CompositeMapper = {
  serializedName: "UsageModelDisplay",
  type: {
    name: "Composite",
    className: "UsageModelDisplay",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CachesListResult: coreHttp.CompositeMapper = {
  serializedName: "CachesListResult",
  type: {
    name: "Composite",
    className: "CachesListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Cache" } }
        }
      }
    }
  }
};

export const Cache: coreHttp.CompositeMapper = {
  serializedName: "Cache",
  type: {
    name: "Composite",
    className: "Cache",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "any"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^[-0-9a-zA-Z_]{1,31}$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "CacheSku"
        }
      },
      cacheSizeGB: {
        serializedName: "properties.cacheSizeGB",
        type: {
          name: "Number"
        }
      },
      health: {
        serializedName: "health",
        type: {
          name: "Composite",
          className: "CacheHealth"
        }
      },
      mountAddresses: {
        serializedName: "properties.mountAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "CachePropertiesMountAddressesItem"
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "String"
        }
      },
      upgradeStatus: {
        serializedName: "upgradeStatus",
        type: {
          name: "Composite",
          className: "CacheUpgradeStatus"
        }
      }
    }
  }
};

export const CacheHealth: coreHttp.CompositeMapper = {
  serializedName: "CacheHealth",
  type: {
    name: "Composite",
    className: "CacheHealth",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      statusDescription: {
        serializedName: "statusDescription",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CacheUpgradeStatus: coreHttp.CompositeMapper = {
  serializedName: "CacheUpgradeStatus",
  type: {
    name: "Composite",
    className: "CacheUpgradeStatus",
    modelProperties: {
      currentFirmwareVersion: {
        serializedName: "currentFirmwareVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmwareUpdateStatus: {
        serializedName: "firmwareUpdateStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmwareUpdateDeadline: {
        serializedName: "firmwareUpdateDeadline",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastFirmwareUpdate: {
        serializedName: "lastFirmwareUpdate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      pendingFirmwareVersion: {
        serializedName: "pendingFirmwareVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CacheSku: coreHttp.CompositeMapper = {
  serializedName: "CacheSku",
  type: {
    name: "Composite",
    className: "CacheSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageTargetsResult: coreHttp.CompositeMapper = {
  serializedName: "StorageTargetsResult",
  type: {
    name: "Composite",
    className: "StorageTargetsResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "StorageTarget" } }
        }
      }
    }
  }
};

export const StorageTarget: coreHttp.CompositeMapper = {
  serializedName: "StorageTarget",
  type: {
    name: "Composite",
    className: "StorageTarget",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[-0-9a-zA-Z_]{1,31}$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      junctions: {
        serializedName: "properties.junctions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NamespaceJunction" }
          }
        }
      },
      targetType: {
        serializedName: "properties.targetType",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      nfs3: {
        serializedName: "nfs3",
        type: {
          name: "Composite",
          className: "Nfs3Target"
        }
      },
      clfs: {
        serializedName: "clfs",
        type: {
          name: "Composite",
          className: "ClfsTarget"
        }
      },
      unknown: {
        serializedName: "unknown",
        type: {
          name: "Composite",
          className: "UnknownTarget"
        }
      }
    }
  }
};

export const NamespaceJunction: coreHttp.CompositeMapper = {
  serializedName: "NamespaceJunction",
  type: {
    name: "Composite",
    className: "NamespaceJunction",
    modelProperties: {
      namespacePath: {
        serializedName: "namespacePath",
        type: {
          name: "String"
        }
      },
      targetPath: {
        serializedName: "targetPath",
        type: {
          name: "String"
        }
      },
      nfsExport: {
        serializedName: "nfsExport",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Nfs3Target: coreHttp.CompositeMapper = {
  serializedName: "nfs3",
  type: {
    name: "Composite",
    className: "Nfs3Target",
    modelProperties: {
      target: {
        constraints: {
          Pattern: new RegExp("^[-.0-9a-zA-Z]+$")
        },
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      usageModel: {
        serializedName: "usageModel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClfsTarget: coreHttp.CompositeMapper = {
  serializedName: "clfs",
  type: {
    name: "Composite",
    className: "ClfsTarget",
    modelProperties: {
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnknownTarget: coreHttp.CompositeMapper = {
  serializedName: "unknown",
  type: {
    name: "Composite",
    className: "UnknownTarget",
    modelProperties: {
      unknownMap: {
        serializedName: "unknownMap",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};
