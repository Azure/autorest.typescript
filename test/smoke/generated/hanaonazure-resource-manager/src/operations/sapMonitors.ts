/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HanaManagementClient } from "../hanaManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  SapMonitorsListResponse,
  SapMonitorsGetResponse,
  SapMonitor,
  SapMonitorsCreateResponse,
  Tags,
  SapMonitorsUpdateResponse,
  SapMonitorsListNextResponse
} from "../models";

/**
 * Class representing a SapMonitors.
 */
export class SapMonitors {
  private readonly client: HanaManagementClient;

  /**
   * Initialize a new instance of the class SapMonitors class.
   * @param client Reference to the service client
   */
  constructor(client: HanaManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of SAP monitors in the specified subscription. The operations returns various properties
   * of each SAP monitor.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<SapMonitorsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<SapMonitorsListResponse>;
  }

  /**
   * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sapMonitorName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SapMonitorsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, sapMonitorName, options: operationOptions },
      getOperationSpec
    ) as Promise<SapMonitorsGetResponse>;
  }

  /**
   * Creates a SAP monitor for the specified subscription, resource group, and resource name.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param sapMonitorParameter Request body representing a SAP Monitor
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    sapMonitorName: string,
    sapMonitorParameter: SapMonitor,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SapMonitorsCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      sapMonitorName,
      sapMonitorParameter,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SapMonitorsCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    sapMonitorName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      sapMonitorName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and monitor
   * name.
   * @param resourceGroupName Name of the resource group.
   * @param tagsParameter Request body that only contains the new Tags field
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    tagsParameter: Tags,
    sapMonitorName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SapMonitorsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        tagsParameter,
        sapMonitorName,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<SapMonitorsUpdateResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<SapMonitorsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<SapMonitorsListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/sapMonitors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SapMonitorListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SapMonitor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapMonitorName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SapMonitor
    },
    201: {
      bodyMapper: Mappers.SapMonitor
    },
    202: {
      bodyMapper: Mappers.SapMonitor
    },
    204: {
      bodyMapper: Mappers.SapMonitor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.sapMonitorParameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapMonitorName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapMonitorName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SapMonitor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.tagsParameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapMonitorName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SapMonitorListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
