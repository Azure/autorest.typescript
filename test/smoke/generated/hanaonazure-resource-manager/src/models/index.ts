/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of HANA operations
 */
export interface OperationList {
  /**
   * List of HANA operations
   */
  value?: Operation[];
}

/**
 * HANA operation information
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object. This name should match the action name that appears in RBAC / the event service.
   */
  readonly name?: string;
  /**
   * Displayed HANA operation information
   */
  display?: Display;
}

/**
 * Detailed HANA operation information
 */
export interface Display {
  /**
   * The localized friendly form of the resource provider name. This form is also expected to include the publisher/company responsible. Use Title Casing. Begin with "Microsoft" for 1st party services.
   */
  readonly provider?: string;
  /**
   * The localized friendly form of the resource type related to this action/operation. This form should match the public documentation for the resource provider. Use Title Casing. For examples, refer to the “name” section.
   */
  readonly resource?: string;
  /**
   * The localized friendly name for the operation as shown to the user. This name should be concise (to fit in drop downs), but clear (self-documenting). Use Title Casing and include the entity/resource to which it applies.
   */
  readonly operation?: string;
  /**
   * The localized friendly description for the operation as shown to the user. This description should be thorough, yet concise. It will be used in tool-tips and detailed views.
   */
  readonly description?: string;
  /**
   * The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. Default value is 'user,system'
   */
  readonly origin?: string;
}

/**
 * Describes the format of Error response.
 */
export interface ErrorResponse {
  /**
   * Error code
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * The response from the List HANA Instances operation.
 */
export interface HanaInstancesListResult {
  /**
   * The list of SAP HANA on Azure instances.
   */
  value?: HanaInstance[];
  /**
   * The URL to get the next set of HANA instances.
   */
  nextLink?: string;
}

/**
 * The resource model definition.
 */
export interface Resource {
  /**
   * Resource ID
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * HANA instance info on Azure (ARM properties and HANA properties)
 */
export type HanaInstance = Resource & {
  /**
   * Specifies the hardware settings for the HANA instance.
   */
  hardwareProfile?: HardwareProfile;
  /**
   * Specifies the storage settings for the HANA instance disks.
   */
  storageProfile?: StorageProfile;
  /**
   * Specifies the operating system settings for the HANA instance.
   */
  osProfile?: OSProfile;
  /**
   * Specifies the network settings for the HANA instance.
   */
  networkProfile?: NetworkProfile;
  /**
   * Specifies the HANA instance unique ID.
   */
  readonly hanaInstanceId?: string;
  /**
   * Resource power state
   */
  readonly powerState?: HanaInstancePowerStateEnum;
  /**
   * Resource proximity placement group
   */
  readonly proximityPlacementGroup?: string;
  /**
   * Hardware revision of a HANA instance
   */
  readonly hwRevision?: string;
  /**
   * ARM ID of another HanaInstance that will share a network with this HanaInstance
   */
  partnerNodeId?: string;
  /**
   * State of provisioning of the HanaInstance
   */
  readonly provisioningState?: HanaProvisioningStatesEnum;
};

/**
 * Specifies the hardware settings for the HANA instance.
 */
export interface HardwareProfile {
  /**
   * Name of the hardware type (vendor and/or their product name)
   */
  readonly hardwareType?: HanaHardwareTypeNamesEnum;
  /**
   * Specifies the HANA instance SKU.
   */
  readonly hanaInstanceSize?: HanaInstanceSizeNamesEnum;
}

/**
 * Specifies the storage settings for the HANA instance disks.
 */
export interface StorageProfile {
  /**
   * IP Address to connect to storage.
   */
  readonly nfsIpAddress?: string;
  /**
   * Specifies information about the operating system disk used by the hana instance.
   */
  osDisks?: Disk[];
}

/**
 * Specifies the disk information fo the HANA instance
 */
export interface Disk {
  /**
   * The disk name.
   */
  name?: string;
  /**
   * Specifies the size of an empty data disk in gigabytes.
   */
  diskSizeGB?: number;
  /**
   * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
   */
  readonly lun?: number;
}

/**
 * Specifies the operating system settings for the HANA instance.
 */
export interface OSProfile {
  /**
   * Specifies the host OS name of the HANA instance.
   */
  computerName?: string;
  /**
   * This property allows you to specify the type of the OS.
   */
  readonly osType?: string;
  /**
   * Specifies version of operating system.
   */
  readonly version?: string;
  /**
   * Specifies the SSH public key used to access the operating system.
   */
  sshPublicKey?: string;
}

/**
 * Specifies the network settings for the HANA instance disks.
 */
export interface NetworkProfile {
  /**
   * Specifies the network interfaces for the HANA instance.
   */
  networkInterfaces?: IpAddress[];
  /**
   * Specifies the circuit id for connecting to express route.
   */
  readonly circuitId?: string;
}

/**
 * Specifies the IP address of the network interface.
 */
export interface IpAddress {
  /**
   * Specifies the IP address of the network interface.
   */
  ipAddress?: string;
}

/**
 * Tags field of the HANA instance.
 */
export interface Tags {
  /**
   * Tags field of the HANA instance.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The response from the List SAP monitors operation.
 */
export interface SapMonitorListResult {
  /**
   * The list of SAP monitors.
   */
  value?: SapMonitor[];
  /**
   * The URL to get the next set of SAP monitors.
   */
  nextLink?: string;
}

/**
 * SAP monitor info on Azure (ARM properties and SAP monitor properties)
 */
export type SapMonitor = Resource & {
  /**
   * Specifies the SAP monitor unique ID.
   */
  hanaSubnet?: string;
  /**
   * Hostname of the HANA instance.
   */
  hanaHostname?: string;
  /**
   * Database name of the HANA instance.
   */
  hanaDbName?: string;
  /**
   * Database port of the HANA instance.
   */
  hanaDbSqlPort?: number;
  /**
   * Database username of the HANA instance.
   */
  hanaDbUsername?: string;
  /**
   * Database password of the HANA instance.
   */
  hanaDbPassword?: string;
  /**
   * KeyVault URL link to the password for the HANA database.
   */
  hanaDbPasswordKeyVaultUrl?: string;
  /**
   * MSI ID passed by customer which has access to customer's KeyVault and to be assigned to the Collector VM.
   */
  hanaDbCredentialsMsiId?: string;
  /**
   * Key Vault ID containing customer's HANA credentials.
   */
  keyVaultId?: string;
  /**
   * State of provisioning of the HanaInstance
   */
  readonly provisioningState?: HanaProvisioningStatesEnum;
  /**
   * The name of the resource group the SAP Monitor resources get deployed into.
   */
  readonly managedResourceGroupName?: string;
  /**
   * The ARM ID of the Log Analytics Workspace that is used for monitoring
   */
  logAnalyticsWorkspaceArmId?: string;
  /**
   * The value indicating whether to send analytics to Microsoft
   */
  enableCustomerAnalytics?: boolean;
  /**
   * The workspace ID of the log analytics workspace to be used for monitoring
   */
  logAnalyticsWorkspaceId?: string;
  /**
   * The shared key of the log analytics workspace that is used for monitoring
   */
  logAnalyticsWorkspaceSharedKey?: string;
};

/**
 * Details needed to monitor a Hana Instance
 */
export interface MonitoringDetails {
  /**
   * ARM ID of an Azure Subnet with access to the HANA instance.
   */
  hanaSubnet?: string;
  /**
   * Hostname of the HANA Instance blade.
   */
  hanaHostname?: string;
  /**
   * Name of the database itself.
   */
  hanaDbName?: string;
  /**
   * The port number of the tenant DB. Used to connect to the DB.
   */
  hanaDbSqlPort?: number;
  /**
   * Username for the HANA database to login to for monitoring
   */
  hanaDbUsername?: string;
  /**
   * Password for the HANA database to login for monitoring
   */
  hanaDbPassword?: string;
}

/**
 * Defines values for HanaHardwareTypeNamesEnum.
 */
export type HanaHardwareTypeNamesEnum = "Cisco_UCS" | "HPE";
/**
 * Defines values for HanaInstanceSizeNamesEnum.
 */
export type HanaInstanceSizeNamesEnum =
  | "S72m"
  | "S144m"
  | "S72"
  | "S144"
  | "S192"
  | "S192m"
  | "S192xm"
  | "S96"
  | "S112"
  | "S224"
  | "S224m"
  | "S224om"
  | "S224oo"
  | "S224oom"
  | "S224ooo"
  | "S384"
  | "S384m"
  | "S384xm"
  | "S384xxm"
  | "S448"
  | "S448m"
  | "S448om"
  | "S448oo"
  | "S448oom"
  | "S448ooo"
  | "S576m"
  | "S576xm"
  | "S672"
  | "S672m"
  | "S672om"
  | "S672oo"
  | "S672oom"
  | "S672ooo"
  | "S768"
  | "S768m"
  | "S768xm"
  | "S896"
  | "S896m"
  | "S896om"
  | "S896oo"
  | "S896oom"
  | "S896ooo"
  | "S960m";
/**
 * Defines values for HanaInstancePowerStateEnum.
 */
export type HanaInstancePowerStateEnum =
  | "starting"
  | "started"
  | "stopping"
  | "stopped"
  | "restarting"
  | "unknown";
/**
 * Defines values for HanaProvisioningStatesEnum.
 */
export type HanaProvisioningStatesEnum =
  | "Accepted"
  | "Creating"
  | "Updating"
  | "Failed"
  | "Succeeded"
  | "Deleting"
  | "Migrating";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type HanaInstancesListResponse = HanaInstancesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HanaInstancesListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type HanaInstancesListByResourceGroupResponse = HanaInstancesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HanaInstancesListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type HanaInstancesGetResponse = HanaInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HanaInstance;
  };
};

/**
 * Contains response data for the create operation.
 */
export type HanaInstancesCreateResponse = HanaInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HanaInstance;
  };
};

/**
 * Contains response data for the update operation.
 */
export type HanaInstancesUpdateResponse = HanaInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HanaInstance;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type HanaInstancesListNextResponse = HanaInstancesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HanaInstancesListResult;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type HanaInstancesListByResourceGroupNextResponse = HanaInstancesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HanaInstancesListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SapMonitorsListResponse = SapMonitorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SapMonitorListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SapMonitorsGetResponse = SapMonitor & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SapMonitor;
  };
};

/**
 * Contains response data for the create operation.
 */
export type SapMonitorsCreateResponse = SapMonitor & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SapMonitor;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SapMonitorsUpdateResponse = SapMonitor & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SapMonitor;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type SapMonitorsListNextResponse = SapMonitorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SapMonitorListResult;
  };
};

/**
 * Optional parameters.
 */
export interface HanaManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
