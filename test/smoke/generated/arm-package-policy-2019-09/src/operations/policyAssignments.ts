/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PolicyAssignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClient } from "../policyClient";
import {
  PolicyAssignment,
  PolicyAssignmentsDeleteResponse,
  PolicyAssignmentsCreateResponse,
  PolicyAssignmentsGetResponse,
  PolicyAssignmentsListForResourceGroupResponse,
  PolicyAssignmentsListForResourceResponse,
  PolicyAssignmentsListForManagementGroupResponse,
  PolicyAssignmentsListResponse,
  PolicyAssignmentsDeleteByIdResponse,
  PolicyAssignmentsCreateByIdResponse,
  PolicyAssignmentsGetByIdResponse,
  PolicyAssignmentsListForResourceGroupNextResponse,
  PolicyAssignmentsListForResourceNextResponse,
  PolicyAssignmentsListForManagementGroupNextResponse,
  PolicyAssignmentsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyAssignments operations. */
export class PolicyAssignmentsImpl implements PolicyAssignments {
  private readonly client: PolicyClient;

  /**
   * Initialize a new instance of the class PolicyAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClient) {
    this.client = client;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given resource group
   * in the given subscription that match the optional given $filter. Valid values for $filter are:
   * 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list
   * includes all policy assignments associated with the resource group, including those that apply
   * directly or apply from containing scopes, as well as any applied to resources contained within the
   * resource group. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource group, which is everything in the unfiltered list except those applied to
   * resources contained within the resource group. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value} that apply to the resource group.
   *
   */
  public listForResourceGroup(): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listForResourceGroupPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForResourceGroupPagingPage();
      }
    };
  }

  private async *listForResourceGroupPagingPage(): AsyncIterableIterator<
    PolicyAssignment[]
  > {
    let result = await this._listForResourceGroup();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForResourceGroupNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForResourceGroupPagingAll(): AsyncIterableIterator<
    PolicyAssignment
  > {
    for await (const page of this.listForResourceGroupPagingPage()) {
      yield* page;
    }
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the specified resource
   * in the given resource group and subscription that match the optional given $filter. Valid values for
   * $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
   * unfiltered list includes all policy assignments associated with the resource, including those that
   * apply directly or from all containing scopes, as well as any applied to resources contained within
   * the resource. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource, which is everything in the unfiltered list except those applied to
   * resources contained within the resource. If $filter=policyDefinitionId eq '{value}' is provided, the
   * returned list includes all policy assignments of the policy definition whose id is {value} that
   * apply to the resource. Three parameters plus the resource name are used to identify a specific
   * resource. If the resource is not part of a parent resource (the more common case), the parent
   * resource path should not be provided (or provided as ''). For example a web app could be specified
   * as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} ==
   * 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all
   * parameters should be provided. For example a virtual machine DNS name could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is
   * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
   *
   */
  public listForResource(): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listForResourcePagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForResourcePagingPage();
      }
    };
  }

  private async *listForResourcePagingPage(): AsyncIterableIterator<
    PolicyAssignment[]
  > {
    let result = await this._listForResource();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForResourceNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForResourcePagingAll(): AsyncIterableIterator<
    PolicyAssignment
  > {
    for await (const page of this.listForResourcePagingPage()) {
      yield* page;
    }
  }

  /**
   * This operation retrieves the list of all policy assignments applicable to the management group that
   * match the given $filter. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq
   * '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that
   * are assigned to the management group or the management group's ancestors. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value} that apply to the management group.
   *
   */
  public listForManagementGroup(): PagedAsyncIterableIterator<
    PolicyAssignment
  > {
    const iter = this.listForManagementGroupPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForManagementGroupPagingPage();
      }
    };
  }

  private async *listForManagementGroupPagingPage(): AsyncIterableIterator<
    PolicyAssignment[]
  > {
    let result = await this._listForManagementGroup();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForManagementGroupNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForManagementGroupPagingAll(): AsyncIterableIterator<
    PolicyAssignment
  > {
    for await (const page of this.listForManagementGroupPagingPage()) {
      yield* page;
    }
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given subscription
   * that match the optional given $filter. Valid values for $filter are: 'atScope()' or
   * 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
   * policy assignments associated with the subscription, including those that apply directly or from
   * management groups that contain the given subscription, as well as any applied to objects contained
   * within the subscription. If $filter=atScope() is provided, the returned list includes all policy
   * assignments that apply to the subscription, which is everything in the unfiltered list except those
   * applied to objects contained within the subscription. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value}.
   *
   */
  public list(): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<PolicyAssignment[]> {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<PolicyAssignment> {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * This operation deletes a policy assignment, given its name and the scope it was created in. The
   * scope of a policy assignment is the part of its ID preceding
   * '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   *
   */
  delete(): Promise<PolicyAssignmentsDeleteResponse> {}

  /**
   *  This operation creates or updates a policy assignment with the given scope and name. Policy
   * assignments apply to all resources contained within their scope. For example, when you assign a
   * policy at resource group scope, that policy applies to all resources in the group.
   *
   */
  create(): Promise<PolicyAssignmentsCreateResponse> {
    return this.client.sendOperationRequest(
      { scope, policyAssignmentName, options },
      createOperationSpec
    );
  }

  /**
   * This operation retrieves a single policy assignment, given its name and the scope it was created at.
   *
   */
  get(): Promise<PolicyAssignmentsGetResponse> {}

  /**
   * This operation retrieves the list of all policy assignments associated with the given resource group
   * in the given subscription that match the optional given $filter. Valid values for $filter are:
   * 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list
   * includes all policy assignments associated with the resource group, including those that apply
   * directly or apply from containing scopes, as well as any applied to resources contained within the
   * resource group. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource group, which is everything in the unfiltered list except those applied to
   * resources contained within the resource group. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value} that apply to the resource group.
   *
   */
  private _listForResourceGroup(): Promise<
    PolicyAssignmentsListForResourceGroupResponse
  > {}

  /**
   * This operation retrieves the list of all policy assignments associated with the specified resource
   * in the given resource group and subscription that match the optional given $filter. Valid values for
   * $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
   * unfiltered list includes all policy assignments associated with the resource, including those that
   * apply directly or from all containing scopes, as well as any applied to resources contained within
   * the resource. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource, which is everything in the unfiltered list except those applied to
   * resources contained within the resource. If $filter=policyDefinitionId eq '{value}' is provided, the
   * returned list includes all policy assignments of the policy definition whose id is {value} that
   * apply to the resource. Three parameters plus the resource name are used to identify a specific
   * resource. If the resource is not part of a parent resource (the more common case), the parent
   * resource path should not be provided (or provided as ''). For example a web app could be specified
   * as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} ==
   * 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all
   * parameters should be provided. For example a virtual machine DNS name could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is
   * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
   *
   */
  private _listForResource(): Promise<
    PolicyAssignmentsListForResourceResponse
  > {}

  /**
   * This operation retrieves the list of all policy assignments applicable to the management group that
   * match the given $filter. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq
   * '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that
   * are assigned to the management group or the management group's ancestors. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value} that apply to the management group.
   *
   */
  private _listForManagementGroup(): Promise<
    PolicyAssignmentsListForManagementGroupResponse
  > {}

  /**
   * This operation retrieves the list of all policy assignments associated with the given subscription
   * that match the optional given $filter. Valid values for $filter are: 'atScope()' or
   * 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
   * policy assignments associated with the subscription, including those that apply directly or from
   * management groups that contain the given subscription, as well as any applied to objects contained
   * within the subscription. If $filter=atScope() is provided, the returned list includes all policy
   * assignments that apply to the subscription, which is everything in the unfiltered list except those
   * applied to objects contained within the subscription. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value}.
   *
   */
  private _list(): Promise<PolicyAssignmentsListResponse> {}

  /**
   * This operation deletes the policy with the given ID. Policy assignment IDs have this format:
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid formats
   * for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management
   * group), '/subscriptions/{subscriptionId}' (subscription),
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * (resource).
   *
   */
  deleteById(): Promise<PolicyAssignmentsDeleteByIdResponse> {}

  /**
   * This operation creates or updates the policy assignment with the given ID. Policy assignments made
   * on a scope apply to all resources contained in that scope. For example, when you assign a policy to
   * a resource group that policy applies to all resources in the group. Policy assignment IDs have this
   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
   * scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
   *
   */
  createById(): Promise<PolicyAssignmentsCreateByIdResponse> {
    return this.client.sendOperationRequest(
      { policyAssignmentId, options },
      createByIdOperationSpec
    );
  }

  /**
   * The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this
   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
   * scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
   *
   */
  getById(): Promise<PolicyAssignmentsGetByIdResponse> {}

  /**
   * ListForResourceGroupNext
   *
   */
  private _listForResourceGroupNext(): Promise<
    PolicyAssignmentsListForResourceGroupNextResponse
  > {}

  /**
   * ListForResourceNext
   *
   */
  private _listForResourceNext(): Promise<
    PolicyAssignmentsListForResourceNextResponse
  > {}

  /**
   * ListForManagementGroupNext
   *
   */
  private _listForManagementGroupNext(): Promise<
    PolicyAssignmentsListForManagementGroupNextResponse
  > {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<PolicyAssignmentsListNextResponse> {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{policyAssignmentId}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
