/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClientContext } from "../policyClientContext";
import {
  PolicyAssignment,
  PolicyAssignmentsListForResourceGroupNextOptionalParams,
  PolicyAssignmentsListForResourceGroupOptionalParams,
  PolicyAssignmentsListForResourceNextOptionalParams,
  PolicyAssignmentsListForResourceOptionalParams,
  PolicyAssignmentsListNextOptionalParams,
  PolicyAssignmentsListOptionalParams,
  PolicyAssignmentsDeleteResponse,
  PolicyAssignmentsCreateResponse,
  PolicyAssignmentsGetResponse,
  PolicyAssignmentsListForResourceGroupResponse,
  PolicyAssignmentsListForResourceResponse,
  PolicyAssignmentsListForManagementGroupResponse,
  PolicyAssignmentsListResponse,
  PolicyAssignmentsDeleteByIdResponse,
  PolicyAssignmentsCreateByIdResponse,
  PolicyAssignmentsGetByIdResponse,
  PolicyAssignmentsListForResourceGroupNextResponse,
  PolicyAssignmentsListForResourceNextResponse,
  PolicyAssignmentsListForManagementGroupNextResponse,
  PolicyAssignmentsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a PolicyAssignments. */
export class PolicyAssignments {
  private readonly client: PolicyClientContext;

  /**
   * Initialize a new instance of the class PolicyAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClientContext) {
    this.client = client;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given resource group
   * in the given subscription that match the optional given $filter. Valid values for $filter are:
   * 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list
   * includes all policy assignments associated with the resource group, including those that apply
   * directly or apply from containing scopes, as well as any applied to resources contained within the
   * resource group. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource group, which is everything in the unfiltered list except those applied to
   * resources contained within the resource group. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value} that apply to the resource group.
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param options The options parameters.
   */
  public listForResourceGroup(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listForResourceGroupPagingPage(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): AsyncIterableIterator<PolicyAssignment[]> {
    let result = await this._listForResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForResourceGroupPagingAll(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): AsyncIterableIterator<PolicyAssignment> {
    for await (const page of this.listForResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the specified resource
   * in the given resource group and subscription that match the optional given $filter. Valid values for
   * $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
   * unfiltered list includes all policy assignments associated with the resource, including those that
   * apply directly or from all containing scopes, as well as any applied to resources contained within
   * the resource. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource, which is everything in the unfiltered list except those applied to
   * resources contained within the resource. If $filter=policyDefinitionId eq '{value}' is provided, the
   * returned list includes all policy assignments of the policy definition whose id is {value} that
   * apply to the resource. Three parameters plus the resource name are used to identify a specific
   * resource. If the resource is not part of a parent resource (the more common case), the parent
   * resource path should not be provided (or provided as ''). For example a web app could be specified
   * as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} ==
   * 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all
   * parameters should be provided. For example a virtual machine DNS name could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is
   * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  public listForResource(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listForResourcePagingAll(
      resourceGroupName,
      resourceProviderNamespace,
      parentResourcePath,
      resourceType,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForResourcePagingPage(
          resourceGroupName,
          resourceProviderNamespace,
          parentResourcePath,
          resourceType,
          resourceName,
          options
        );
      }
    };
  }

  private async *listForResourcePagingPage(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): AsyncIterableIterator<PolicyAssignment[]> {
    let result = await this._listForResource(
      resourceGroupName,
      resourceProviderNamespace,
      parentResourcePath,
      resourceType,
      resourceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForResourceNext(
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForResourcePagingAll(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): AsyncIterableIterator<PolicyAssignment> {
    for await (const page of this.listForResourcePagingPage(
      resourceGroupName,
      resourceProviderNamespace,
      parentResourcePath,
      resourceType,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * This operation retrieves the list of all policy assignments applicable to the management group that
   * match the given $filter. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq
   * '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that
   * are assigned to the management group or the management group's ancestors. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value} that apply to the management group.
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param options The options parameters.
   */
  public listForManagementGroup(
    managementGroupId: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listForManagementGroupPagingAll(
      managementGroupId,
      filter,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForManagementGroupPagingPage(
          managementGroupId,
          filter,
          options
        );
      }
    };
  }

  private async *listForManagementGroupPagingPage(
    managementGroupId: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<PolicyAssignment[]> {
    let result = await this._listForManagementGroup(
      managementGroupId,
      filter,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForManagementGroupNext(
        managementGroupId,
        filter,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForManagementGroupPagingAll(
    managementGroupId: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<PolicyAssignment> {
    for await (const page of this.listForManagementGroupPagingPage(
      managementGroupId,
      filter,
      options
    )) {
      yield* page;
    }
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given subscription
   * that match the optional given $filter. Valid values for $filter are: 'atScope()' or
   * 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
   * policy assignments associated with the subscription, including those that apply directly or from
   * management groups that contain the given subscription, as well as any applied to objects contained
   * within the subscription. If $filter=atScope() is provided, the returned list includes all policy
   * assignments that apply to the subscription, which is everything in the unfiltered list except those
   * applied to objects contained within the subscription. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value}.
   * @param options The options parameters.
   */
  public list(
    options?: PolicyAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: PolicyAssignmentsListOptionalParams
  ): AsyncIterableIterator<PolicyAssignment[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: PolicyAssignmentsListOptionalParams
  ): AsyncIterableIterator<PolicyAssignment> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This operation deletes a policy assignment, given its name and the scope it was created in. The
   * scope of a policy assignment is the part of its ID preceding
   * '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    policyAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyAssignmentsDeleteResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scope,
      policyAssignmentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteOperationSpec
    ) as Promise<PolicyAssignmentsDeleteResponse>;
  }

  /**
   *  This operation creates or updates a policy assignment with the given scope and name. Policy
   * assignments apply to all resources contained within their scope. For example, when you assign a
   * policy at resource group scope, that policy applies to all resources in the group.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param options The options parameters.
   */
  create(
    scope: string,
    policyAssignmentName: string,
    parameters: PolicyAssignment,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyAssignmentsCreateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scope,
      policyAssignmentName,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOperationSpec
    ) as Promise<PolicyAssignmentsCreateResponse>;
  }

  /**
   * This operation retrieves a single policy assignment, given its name and the scope it was created at.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    policyAssignmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyAssignmentsGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scope,
      policyAssignmentName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<PolicyAssignmentsGetResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given resource group
   * in the given subscription that match the optional given $filter. Valid values for $filter are:
   * 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list
   * includes all policy assignments associated with the resource group, including those that apply
   * directly or apply from containing scopes, as well as any applied to resources contained within the
   * resource group. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource group, which is everything in the unfiltered list except those applied to
   * resources contained within the resource group. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value} that apply to the resource group.
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param options The options parameters.
   */
  private _listForResourceGroup(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): Promise<PolicyAssignmentsListForResourceGroupResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listForResourceGroupOperationSpec
    ) as Promise<PolicyAssignmentsListForResourceGroupResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the specified resource
   * in the given resource group and subscription that match the optional given $filter. Valid values for
   * $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
   * unfiltered list includes all policy assignments associated with the resource, including those that
   * apply directly or from all containing scopes, as well as any applied to resources contained within
   * the resource. If $filter=atScope() is provided, the returned list includes all policy assignments
   * that apply to the resource, which is everything in the unfiltered list except those applied to
   * resources contained within the resource. If $filter=policyDefinitionId eq '{value}' is provided, the
   * returned list includes all policy assignments of the policy definition whose id is {value} that
   * apply to the resource. Three parameters plus the resource name are used to identify a specific
   * resource. If the resource is not part of a parent resource (the more common case), the parent
   * resource path should not be provided (or provided as ''). For example a web app could be specified
   * as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} ==
   * 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all
   * parameters should be provided. For example a virtual machine DNS name could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is
   * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  private _listForResource(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): Promise<PolicyAssignmentsListForResourceResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      resourceProviderNamespace,
      parentResourcePath,
      resourceType,
      resourceName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listForResourceOperationSpec
    ) as Promise<PolicyAssignmentsListForResourceResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments applicable to the management group that
   * match the given $filter. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq
   * '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that
   * are assigned to the management group or the management group's ancestors. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value} that apply to the management group.
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param options The options parameters.
   */
  private _listForManagementGroup(
    managementGroupId: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyAssignmentsListForManagementGroupResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      managementGroupId,
      filter,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listForManagementGroupOperationSpec
    ) as Promise<PolicyAssignmentsListForManagementGroupResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given subscription
   * that match the optional given $filter. Valid values for $filter are: 'atScope()' or
   * 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
   * policy assignments associated with the subscription, including those that apply directly or from
   * management groups that contain the given subscription, as well as any applied to objects contained
   * within the subscription. If $filter=atScope() is provided, the returned list includes all policy
   * assignments that apply to the subscription, which is everything in the unfiltered list except those
   * applied to objects contained within the subscription. If $filter=policyDefinitionId eq '{value}' is
   * provided, the returned list includes all policy assignments of the policy definition whose id is
   * {value}.
   * @param options The options parameters.
   */
  private _list(
    options?: PolicyAssignmentsListOptionalParams
  ): Promise<PolicyAssignmentsListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<PolicyAssignmentsListResponse>;
  }

  /**
   * This operation deletes the policy with the given ID. Policy assignment IDs have this format:
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid formats
   * for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management
   * group), '/subscriptions/{subscriptionId}' (subscription),
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * (resource).
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param options The options parameters.
   */
  deleteById(
    policyAssignmentId: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyAssignmentsDeleteByIdResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      policyAssignmentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteByIdOperationSpec
    ) as Promise<PolicyAssignmentsDeleteByIdResponse>;
  }

  /**
   * This operation creates or updates the policy assignment with the given ID. Policy assignments made
   * on a scope apply to all resources contained in that scope. For example, when you assign a policy to
   * a resource group that policy applies to all resources in the group. Policy assignment IDs have this
   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
   * scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param parameters Parameters for policy assignment.
   * @param options The options parameters.
   */
  createById(
    policyAssignmentId: string,
    parameters: PolicyAssignment,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyAssignmentsCreateByIdResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      policyAssignmentId,
      parameters,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createByIdOperationSpec
    ) as Promise<PolicyAssignmentsCreateByIdResponse>;
  }

  /**
   * The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this
   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
   * scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   *                           '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param options The options parameters.
   */
  getById(
    policyAssignmentId: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyAssignmentsGetByIdResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      policyAssignmentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getByIdOperationSpec
    ) as Promise<PolicyAssignmentsGetByIdResponse>;
  }

  /**
   * ListForResourceGroupNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
   * @param options The options parameters.
   */
  private _listForResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextOptionalParams
  ): Promise<PolicyAssignmentsListForResourceGroupNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listForResourceGroupNextOperationSpec
    ) as Promise<PolicyAssignmentsListForResourceGroupNextResponse>;
  }

  /**
   * ListForResourceNext
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListForResource method.
   * @param options The options parameters.
   */
  private _listForResourceNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextOptionalParams
  ): Promise<PolicyAssignmentsListForResourceNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      resourceProviderNamespace,
      parentResourcePath,
      resourceType,
      resourceName,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listForResourceNextOperationSpec
    ) as Promise<PolicyAssignmentsListForResourceNextResponse>;
  }

  /**
   * ListForManagementGroupNext
   * @param managementGroupId The ID of the management group.
   * @param filter The filter to apply on the operation. Valid values for $filter are: 'atScope()' or
   *               'policyDefinitionId eq '{value}''. A filter is required when listing policy assignments at
   *               management group scope.
   * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.
   * @param options The options parameters.
   */
  private _listForManagementGroupNext(
    managementGroupId: string,
    filter: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyAssignmentsListForManagementGroupNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      managementGroupId,
      filter,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listForManagementGroupNextOperationSpec
    ) as Promise<PolicyAssignmentsListForManagementGroupNextResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextOptionalParams
  ): Promise<PolicyAssignmentsListNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listNextOperationSpec
    ) as Promise<PolicyAssignmentsListNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForManagementGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter2],
  urlParameters: [Parameters.$host, Parameters.managementGroupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteByIdOperationSpec: coreHttp.OperationSpec = {
  path: "/{policyAssignmentId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
  headerParameters: [Parameters.accept],
  serializer
};
const createByIdOperationSpec: coreHttp.OperationSpec = {
  path: "/{policyAssignmentId}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByIdOperationSpec: coreHttp.OperationSpec = {
  path: "/{policyAssignmentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForManagementGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter2],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
