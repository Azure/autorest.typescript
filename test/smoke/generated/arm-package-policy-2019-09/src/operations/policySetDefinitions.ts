/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PolicySetDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClient } from "../policyClient";
import {
  PolicySetDefinition,
  PolicySetDefinitionsCreateOrUpdateResponse,
  PolicySetDefinitionsGetResponse,
  PolicySetDefinitionsGetBuiltInResponse,
  PolicySetDefinitionsListResponse,
  PolicySetDefinitionsListBuiltInResponse,
  PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse,
  PolicySetDefinitionsGetAtManagementGroupResponse,
  PolicySetDefinitionsListByManagementGroupResponse,
  PolicySetDefinitionsListNextResponse,
  PolicySetDefinitionsListBuiltInNextResponse,
  PolicySetDefinitionsListByManagementGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PolicySetDefinitions operations. */
export class PolicySetDefinitionsImpl implements PolicySetDefinitions {
  private readonly client: PolicyClient;

  /**
   * Initialize a new instance of the class PolicySetDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClient) {
    this.client = client;
  }

  /**
   * This operation retrieves a list of all the policy set definitions in the given subscription.
   *
   */
  public list(): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage();
      }
    };
  }

  private async *listPagingPage(): AsyncIterableIterator<
    PolicySetDefinition[]
  > {
    let result = await this._list();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(): AsyncIterableIterator<PolicySetDefinition> {
    for await (const page of this.listPagingPage()) {
      yield* page;
    }
  }

  /**
   * This operation retrieves a list of all the built-in policy set definitions.
   *
   */
  public listBuiltIn(): PagedAsyncIterableIterator<PolicySetDefinition> {
    const iter = this.listBuiltInPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInPagingPage();
      }
    };
  }

  private async *listBuiltInPagingPage(): AsyncIterableIterator<
    PolicySetDefinition[]
  > {
    let result = await this._listBuiltIn();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInPagingAll(): AsyncIterableIterator<
    PolicySetDefinition
  > {
    for await (const page of this.listBuiltInPagingPage()) {
      yield* page;
    }
  }

  /**
   * This operation retrieves a list of all the a policy set definition in the given management group.
   *
   */
  public listByManagementGroup(): PagedAsyncIterableIterator<
    PolicySetDefinition
  > {
    const iter = this.listByManagementGroupPagingAll();
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupPagingPage();
      }
    };
  }

  private async *listByManagementGroupPagingPage(): AsyncIterableIterator<
    PolicySetDefinition[]
  > {
    let result = await this._listByManagementGroup();
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNext();
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupPagingAll(): AsyncIterableIterator<
    PolicySetDefinition
  > {
    for await (const page of this.listByManagementGroupPagingPage()) {
      yield* page;
    }
  }

  /**
   * This operation creates or updates a policy set definition in the given subscription with the given
   * name.
   *
   */
  createOrUpdate(): Promise<PolicySetDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * This operation deletes the policy set definition in the given subscription with the given name.
   *
   */
  delete(): Promise<void> {}

  /**
   * This operation retrieves the policy set definition in the given subscription with the given name.
   *
   */
  get(): Promise<PolicySetDefinitionsGetResponse> {}

  /**
   * This operation retrieves the built-in policy set definition with the given name.
   *
   */
  getBuiltIn(): Promise<PolicySetDefinitionsGetBuiltInResponse> {}

  /**
   * This operation retrieves a list of all the policy set definitions in the given subscription.
   *
   */
  private _list(): Promise<PolicySetDefinitionsListResponse> {}

  /**
   * This operation retrieves a list of all the built-in policy set definitions.
   *
   */
  private _listBuiltIn(): Promise<PolicySetDefinitionsListBuiltInResponse> {}

  /**
   * This operation creates or updates a policy set definition in the given management group with the
   * given name.
   *
   */
  createOrUpdateAtManagementGroup(): Promise<
    PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse
  > {
    return this.client.sendOperationRequest(
      { policySetDefinitionName, managementGroupId, options },
      createOrUpdateAtManagementGroupOperationSpec
    );
  }

  /**
   * This operation deletes the policy set definition in the given management group with the given name.
   *
   */
  deleteAtManagementGroup(): Promise<void> {}

  /**
   * This operation retrieves the policy set definition in the given management group with the given
   * name.
   *
   */
  getAtManagementGroup(): Promise<
    PolicySetDefinitionsGetAtManagementGroupResponse
  > {}

  /**
   * This operation retrieves a list of all the a policy set definition in the given management group.
   *
   */
  private _listByManagementGroup(): Promise<
    PolicySetDefinitionsListByManagementGroupResponse
  > {}

  /**
   * ListNext
   *
   */
  private _listNext(): Promise<PolicySetDefinitionsListNextResponse> {}

  /**
   * ListBuiltInNext
   *
   */
  private _listBuiltInNext(): Promise<
    PolicySetDefinitionsListBuiltInNextResponse
  > {}

  /**
   * ListByManagementGroupNext
   *
   */
  private _listByManagementGroupNext(): Promise<
    PolicySetDefinitionsListByManagementGroupNextResponse
  > {}
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    201: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    201: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
