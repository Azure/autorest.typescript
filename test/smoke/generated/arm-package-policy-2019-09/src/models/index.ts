/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The policy assignment.
 */
export interface PolicyAssignment {
  /**
   * The ID of the policy assignment.
   */
  readonly id?: string;
  /**
   * The type of the policy assignment.
   */
  readonly type?: string;
  /**
   * The name of the policy assignment.
   */
  readonly name?: string;
  /**
   * The policy sku. This property is optional, obsolete, and will be ignored.
   */
  sku?: PolicySku;
  /**
   * The location of the policy assignment. Only required when utilizing managed identity.
   */
  location?: string;
  /**
   * The managed identity associated with the policy assignment.
   */
  identity?: Identity;
  /**
   * The display name of the policy assignment.
   */
  displayName?: string;
  /**
   * The ID of the policy definition or policy set definition being assigned.
   */
  policyDefinitionId?: string;
  /**
   * The scope for the policy assignment.
   */
  scope?: string;
  /**
   * The policy's excluded scopes.
   */
  notScopes?: string[];
  /**
   * The parameter values for the assigned policy rule. The keys are the parameter names.
   */
  parameters?: { [propertyName: string]: ParameterValuesValue };
  /**
   * This message will be part of response in case of policy violation.
   */
  description?: string;
  /**
   * The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
   */
  metadata?: any;
  /**
   * The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
   */
  enforcementMode?: EnforcementMode;
}

/**
 * The value of a parameter.
 */
export interface ParameterValuesValue {
  /**
   * The value of the parameter.
   */
  value?: any;
}

/**
 * The policy sku. This property is optional, obsolete, and will be ignored.
 */
export interface PolicySku {
  /**
   * The name of the policy sku. Possible values are A0 and A1.
   */
  name: string;
  /**
   * The policy sku tier. Possible values are Free and Standard.
   */
  tier?: string;
}

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The principal ID of the resource identity.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the resource identity.
   */
  readonly tenantId?: string;
  /**
   * The identity type. This is the only required field when adding a system assigned identity to a resource.
   */
  type?: ResourceIdentityType;
}

/**
 * An error response from a policy operation.
 */
export interface CloudError {
  /**
   * The resource management error response.
   */
  error?: ErrorResponse;
}

/**
 * The resource management error response.
 */
export interface ErrorResponse {
  /**
   * The error code.
   */
  readonly code?: string;
  /**
   * The error message.
   */
  readonly message?: string;
  /**
   * The error target.
   */
  readonly target?: string;
  /**
   * The error details.
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   */
  readonly type?: string;
  /**
   * The additional info.
   */
  readonly info?: any;
}

/**
 * List of policy assignments.
 */
export interface PolicyAssignmentListResult {
  /**
   * An array of policy assignments.
   */
  value?: PolicyAssignment[];
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * The policy definition.
 */
export interface PolicyDefinition {
  /**
   * The ID of the policy definition.
   */
  readonly id?: string;
  /**
   * The name of the policy definition.
   */
  readonly name?: string;
  /**
   * The type of the resource (Microsoft.Authorization/policyDefinitions).
   */
  readonly type?: string;
  /**
   * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
   */
  policyType?: PolicyType;
  /**
   * The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
   */
  mode?: string;
  /**
   * The display name of the policy definition.
   */
  displayName?: string;
  /**
   * The policy definition description.
   */
  description?: string;
  /**
   * The policy rule.
   */
  policyRule?: any;
  /**
   * The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
   */
  metadata?: any;
  /**
   * The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
   */
  parameters?: { [propertyName: string]: ParameterDefinitionsValue };
}

/**
 * The definition of a parameter that can be provided to the policy.
 */
export interface ParameterDefinitionsValue {
  /**
   * The data type of the parameter.
   */
  type?: ParameterType;
  /**
   * The allowed values for the parameter.
   */
  allowedValues?: any[];
  /**
   * The default value for the parameter if no value is provided.
   */
  defaultValue?: any;
  /**
   * General metadata for the parameter.
   */
  metadata?: ParameterDefinitionsValueMetadata;
}

/**
 * General metadata for the parameter.
 */
export interface ParameterDefinitionsValueMetadata {
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
   */
  [property: string]: any;
  /**
   * The display name for the parameter.
   */
  displayName?: string;
  /**
   * The description of the parameter.
   */
  description?: string;
}

/**
 * List of policy definitions.
 */
export interface PolicyDefinitionListResult {
  /**
   * An array of policy definitions.
   */
  value?: PolicyDefinition[];
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * The policy set definition.
 */
export interface PolicySetDefinition {
  /**
   * The ID of the policy set definition.
   */
  readonly id?: string;
  /**
   * The name of the policy set definition.
   */
  readonly name?: string;
  /**
   * The type of the resource (Microsoft.Authorization/policySetDefinitions).
   */
  readonly type?: string;
  /**
   * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
   */
  policyType?: PolicyType;
  /**
   * The display name of the policy set definition.
   */
  displayName?: string;
  /**
   * The policy set definition description.
   */
  description?: string;
  /**
   * The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
   */
  metadata?: any;
  /**
   * The policy set definition parameters that can be used in policy definition references.
   */
  parameters?: { [propertyName: string]: ParameterDefinitionsValue };
  /**
   * An array of policy definition references.
   */
  policyDefinitions?: PolicyDefinitionReference[];
  /**
   * The metadata describing groups of policy definition references within the policy set definition.
   */
  policyDefinitionGroups?: PolicyDefinitionGroup[];
}

/**
 * The policy definition reference.
 */
export interface PolicyDefinitionReference {
  /**
   * The ID of the policy definition or policy set definition.
   */
  policyDefinitionId: string;
  /**
   * The parameter values for the referenced policy rule. The keys are the parameter names.
   */
  parameters?: { [propertyName: string]: ParameterValuesValue };
  /**
   * A unique id (within the policy set definition) for this policy definition reference.
   */
  policyDefinitionReferenceId?: string;
  /**
   * The name of the groups that this policy definition reference belongs to.
   */
  groupNames?: string[];
}

/**
 * The policy definition group.
 */
export interface PolicyDefinitionGroup {
  /**
   * The name of the group.
   */
  name: string;
  /**
   * The group's display name.
   */
  displayName?: string;
  /**
   * The group's category.
   */
  category?: string;
  /**
   * The group's description.
   */
  description?: string;
  /**
   * A resource ID of a resource that contains additional metadata about the group.
   */
  additionalMetadataId?: string;
}

/**
 * List of policy set definitions.
 */
export interface PolicySetDefinitionListResult {
  /**
   * An array of policy set definitions.
   */
  value?: PolicySetDefinition[];
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * Defines values for EnforcementMode.
 */
export type EnforcementMode = "Default" | "DoNotEnforce";
/**
 * Defines values for PolicyType.
 */
export type PolicyType = "NotSpecified" | "BuiltIn" | "Custom" | "Static";
/**
 * Defines values for ParameterType.
 */
export type ParameterType =
  | "String"
  | "Array"
  | "Object"
  | "Boolean"
  | "Integer"
  | "Float"
  | "DateTime";
/**
 * Defines values for ResourceIdentityType.
 */
export type ResourceIdentityType = "SystemAssigned" | "None";

/**
 * Contains response data for the delete operation.
 */
export type PolicyAssignmentsDeleteResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the create operation.
 */
export type PolicyAssignmentsCreateResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PolicyAssignmentsGetResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Optional parameters.
 */
export interface PolicyAssignmentsListForResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed.
   */
  filter?: string;
}

/**
 * Contains response data for the listForResourceGroup operation.
 */
export type PolicyAssignmentsListForResourceGroupResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PolicyAssignmentsListForResourceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed.
   */
  filter?: string;
}

/**
 * Contains response data for the listForResource operation.
 */
export type PolicyAssignmentsListForResourceResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the listForManagementGroup operation.
 */
export type PolicyAssignmentsListForManagementGroupResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PolicyAssignmentsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type PolicyAssignmentsListResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the deleteById operation.
 */
export type PolicyAssignmentsDeleteByIdResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the createById operation.
 */
export type PolicyAssignmentsCreateByIdResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the getById operation.
 */
export type PolicyAssignmentsGetByIdResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Optional parameters.
 */
export interface PolicyAssignmentsListForResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed.
   */
  filter?: string;
}

/**
 * Contains response data for the listForResourceGroupNext operation.
 */
export type PolicyAssignmentsListForResourceGroupNextResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PolicyAssignmentsListForResourceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed.
   */
  filter?: string;
}

/**
 * Contains response data for the listForResourceNext operation.
 */
export type PolicyAssignmentsListForResourceNextResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the listForManagementGroupNext operation.
 */
export type PolicyAssignmentsListForManagementGroupNextResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PolicyAssignmentsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type PolicyAssignmentsListNextResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PolicyDefinitionsCreateOrUpdateResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PolicyDefinitionsGetResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the getBuiltIn operation.
 */
export type PolicyDefinitionsGetBuiltInResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the createOrUpdateAtManagementGroup operation.
 */
export type PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the getAtManagementGroup operation.
 */
export type PolicyDefinitionsGetAtManagementGroupResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PolicyDefinitionsListResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listBuiltIn operation.
 */
export type PolicyDefinitionsListBuiltInResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listByManagementGroup operation.
 */
export type PolicyDefinitionsListByManagementGroupResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PolicyDefinitionsListNextResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listBuiltInNext operation.
 */
export type PolicyDefinitionsListBuiltInNextResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listByManagementGroupNext operation.
 */
export type PolicyDefinitionsListByManagementGroupNextResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PolicySetDefinitionsCreateOrUpdateResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PolicySetDefinitionsGetResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the getBuiltIn operation.
 */
export type PolicySetDefinitionsGetBuiltInResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PolicySetDefinitionsListResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the listBuiltIn operation.
 */
export type PolicySetDefinitionsListBuiltInResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the createOrUpdateAtManagementGroup operation.
 */
export type PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the getAtManagementGroup operation.
 */
export type PolicySetDefinitionsGetAtManagementGroupResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the listByManagementGroup operation.
 */
export type PolicySetDefinitionsListByManagementGroupResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PolicySetDefinitionsListNextResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the listBuiltInNext operation.
 */
export type PolicySetDefinitionsListBuiltInNextResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the listByManagementGroupNext operation.
 */
export type PolicySetDefinitionsListByManagementGroupNextResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PolicyClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
