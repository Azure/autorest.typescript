/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The policy assignment. */
export interface PolicyAssignment {
  /**
   * The ID of the policy assignment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The type of the policy assignment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The name of the policy assignment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** The policy sku. This property is optional, obsolete, and will be ignored. */
  sku?: PolicySku;
  /** The location of the policy assignment. Only required when utilizing managed identity. */
  location?: string;
  /** The managed identity associated with the policy assignment. */
  identity?: Identity;
  /** The display name of the policy assignment. */
  displayName?: string;
  /** The ID of the policy definition or policy set definition being assigned. */
  policyDefinitionId?: string;
  /** The scope for the policy assignment. */
  scope?: string;
  /** The policy's excluded scopes. */
  notScopes?: string[];
  /** The parameter values for the assigned policy rule. The keys are the parameter names. */
  parameters?: { [propertyName: string]: ParameterValuesValue };
  /** This message will be part of response in case of policy violation. */
  description?: string;
  /** The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. */
  metadata?: Record<string, unknown>;
  /** The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. */
  enforcementMode?: EnforcementMode;
}

/** The value of a parameter. */
export interface ParameterValuesValue {
  /** The value of the parameter. */
  value?: Record<string, unknown>;
}

/** The policy sku. This property is optional, obsolete, and will be ignored. */
export interface PolicySku {
  /** The name of the policy sku. Possible values are A0 and A1. */
  name: string;
  /** The policy sku tier. Possible values are Free and Standard. */
  tier?: string;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of the resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. This is the only required field when adding a system assigned identity to a resource. */
  type?: ResourceIdentityType;
}

/** An error response from a policy operation. */
export interface CloudError {
  /** The resource management error response. */
  error?: ErrorResponse;
}

/** The resource management error response. */
export interface ErrorResponse {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** List of policy assignments. */
export interface PolicyAssignmentListResult {
  /** An array of policy assignments. */
  value?: PolicyAssignment[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** The policy definition. */
export interface PolicyDefinition {
  /**
   * The ID of the policy definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the policy definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource (Microsoft.Authorization/policyDefinitions).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. */
  policyType?: PolicyType;
  /** The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. */
  mode?: string;
  /** The display name of the policy definition. */
  displayName?: string;
  /** The policy definition description. */
  description?: string;
  /** The policy rule. */
  policyRule?: Record<string, unknown>;
  /** The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. */
  metadata?: Record<string, unknown>;
  /** The parameter definitions for parameters used in the policy rule. The keys are the parameter names. */
  parameters?: { [propertyName: string]: ParameterDefinitionsValue };
}

/** The definition of a parameter that can be provided to the policy. */
export interface ParameterDefinitionsValue {
  /** The data type of the parameter. */
  type?: ParameterType;
  /** The allowed values for the parameter. */
  allowedValues?: Record<string, unknown>[];
  /** The default value for the parameter if no value is provided. */
  defaultValue?: Record<string, unknown>;
  /** General metadata for the parameter. */
  metadata?: ParameterDefinitionsValueMetadata;
}

/** General metadata for the parameter. */
export interface ParameterDefinitionsValueMetadata {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The display name for the parameter. */
  displayName?: string;
  /** The description of the parameter. */
  description?: string;
}

/** List of policy definitions. */
export interface PolicyDefinitionListResult {
  /** An array of policy definitions. */
  value?: PolicyDefinition[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** The policy set definition. */
export interface PolicySetDefinition {
  /**
   * The ID of the policy set definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the policy set definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource (Microsoft.Authorization/policySetDefinitions).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static. */
  policyType?: PolicyType;
  /** The display name of the policy set definition. */
  displayName?: string;
  /** The policy set definition description. */
  description?: string;
  /** The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs. */
  metadata?: Record<string, unknown>;
  /** The policy set definition parameters that can be used in policy definition references. */
  parameters?: { [propertyName: string]: ParameterDefinitionsValue };
  /** An array of policy definition references. */
  policyDefinitions?: PolicyDefinitionReference[];
  /** The metadata describing groups of policy definition references within the policy set definition. */
  policyDefinitionGroups?: PolicyDefinitionGroup[];
}

/** The policy definition reference. */
export interface PolicyDefinitionReference {
  /** The ID of the policy definition or policy set definition. */
  policyDefinitionId: string;
  /** The parameter values for the referenced policy rule. The keys are the parameter names. */
  parameters?: { [propertyName: string]: ParameterValuesValue };
  /** A unique id (within the policy set definition) for this policy definition reference. */
  policyDefinitionReferenceId?: string;
  /** The name of the groups that this policy definition reference belongs to. */
  groupNames?: string[];
}

/** The policy definition group. */
export interface PolicyDefinitionGroup {
  /** The name of the group. */
  name: string;
  /** The group's display name. */
  displayName?: string;
  /** The group's category. */
  category?: string;
  /** The group's description. */
  description?: string;
  /** A resource ID of a resource that contains additional metadata about the group. */
  additionalMetadataId?: string;
}

/** List of policy set definitions. */
export interface PolicySetDefinitionListResult {
  /** An array of policy set definitions. */
  value?: PolicySetDefinition[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Known values of {@link EnforcementMode} that the service accepts. */
export enum KnownEnforcementMode {
  /** The policy effect is enforced during resource creation or update. */
  Default = "Default",
  /** The policy effect is not enforced during resource creation or update. */
  DoNotEnforce = "DoNotEnforce"
}

/**
 * Defines values for EnforcementMode. \
 * {@link KnownEnforcementMode} can be used interchangeably with EnforcementMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: The policy effect is enforced during resource creation or update. \
 * **DoNotEnforce**: The policy effect is not enforced during resource creation or update.
 */
export type EnforcementMode = string;

/** Known values of {@link PolicyType} that the service accepts. */
export enum KnownPolicyType {
  /** NotSpecified */
  NotSpecified = "NotSpecified",
  /** BuiltIn */
  BuiltIn = "BuiltIn",
  /** Custom */
  Custom = "Custom",
  /** Static */
  Static = "Static"
}

/**
 * Defines values for PolicyType. \
 * {@link KnownPolicyType} can be used interchangeably with PolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **BuiltIn** \
 * **Custom** \
 * **Static**
 */
export type PolicyType = string;

/** Known values of {@link ParameterType} that the service accepts. */
export enum KnownParameterType {
  /** String */
  String = "String",
  /** Array */
  Array = "Array",
  /** Object */
  Object = "Object",
  /** Boolean */
  Boolean = "Boolean",
  /** Integer */
  Integer = "Integer",
  /** Float */
  Float = "Float",
  /** DateTime */
  DateTime = "DateTime"
}

/**
 * Defines values for ParameterType. \
 * {@link KnownParameterType} can be used interchangeably with ParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String** \
 * **Array** \
 * **Object** \
 * **Boolean** \
 * **Integer** \
 * **Float** \
 * **DateTime**
 */
export type ParameterType = string;
/** Defines values for ResourceIdentityType. */
export type ResourceIdentityType = "SystemAssigned" | "None";

/** Optional parameters. */
export interface PolicyAssignmentsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the delete operation. */
export type PolicyAssignmentsDeleteResponse = PolicyAssignment;

/** Optional parameters. */
export interface PolicyAssignmentsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type PolicyAssignmentsCreateResponse = PolicyAssignment;

/** Optional parameters. */
export interface PolicyAssignmentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PolicyAssignmentsGetResponse = PolicyAssignment;

/** Optional parameters. */
export interface PolicyAssignmentsListForResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. */
  filter?: string;
}

/** Contains response data for the listForResourceGroup operation. */
export type PolicyAssignmentsListForResourceGroupResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export interface PolicyAssignmentsListForResourceOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. */
  filter?: string;
}

/** Contains response data for the listForResource operation. */
export type PolicyAssignmentsListForResourceResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export interface PolicyAssignmentsListForManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForManagementGroup operation. */
export type PolicyAssignmentsListForManagementGroupResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export interface PolicyAssignmentsListOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type PolicyAssignmentsListResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export interface PolicyAssignmentsDeleteByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the deleteById operation. */
export type PolicyAssignmentsDeleteByIdResponse = PolicyAssignment;

/** Optional parameters. */
export interface PolicyAssignmentsCreateByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createById operation. */
export type PolicyAssignmentsCreateByIdResponse = PolicyAssignment;

/** Optional parameters. */
export interface PolicyAssignmentsGetByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getById operation. */
export type PolicyAssignmentsGetByIdResponse = PolicyAssignment;

/** Optional parameters. */
export interface PolicyAssignmentsListForResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. */
  filter?: string;
}

/** Contains response data for the listForResourceGroupNext operation. */
export type PolicyAssignmentsListForResourceGroupNextResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export interface PolicyAssignmentsListForResourceNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. */
  filter?: string;
}

/** Contains response data for the listForResourceNext operation. */
export type PolicyAssignmentsListForResourceNextResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export interface PolicyAssignmentsListForManagementGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForManagementGroupNext operation. */
export type PolicyAssignmentsListForManagementGroupNextResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export interface PolicyAssignmentsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. */
  filter?: string;
}

/** Contains response data for the listNext operation. */
export type PolicyAssignmentsListNextResponse = PolicyAssignmentListResult;

/** Optional parameters. */
export interface PolicyDefinitionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PolicyDefinitionsCreateOrUpdateResponse = PolicyDefinition;

/** Optional parameters. */
export interface PolicyDefinitionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PolicyDefinitionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PolicyDefinitionsGetResponse = PolicyDefinition;

/** Optional parameters. */
export interface PolicyDefinitionsGetBuiltInOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuiltIn operation. */
export type PolicyDefinitionsGetBuiltInResponse = PolicyDefinition;

/** Optional parameters. */
export interface PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdateAtManagementGroup operation. */
export type PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicyDefinition;

/** Optional parameters. */
export interface PolicyDefinitionsDeleteAtManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PolicyDefinitionsGetAtManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAtManagementGroup operation. */
export type PolicyDefinitionsGetAtManagementGroupResponse = PolicyDefinition;

/** Optional parameters. */
export interface PolicyDefinitionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PolicyDefinitionsListResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export interface PolicyDefinitionsListBuiltInOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuiltIn operation. */
export type PolicyDefinitionsListBuiltInResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export interface PolicyDefinitionsListByManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManagementGroup operation. */
export type PolicyDefinitionsListByManagementGroupResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export interface PolicyDefinitionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PolicyDefinitionsListNextResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export interface PolicyDefinitionsListBuiltInNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuiltInNext operation. */
export type PolicyDefinitionsListBuiltInNextResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export interface PolicyDefinitionsListByManagementGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManagementGroupNext operation. */
export type PolicyDefinitionsListByManagementGroupNextResponse = PolicyDefinitionListResult;

/** Optional parameters. */
export interface PolicySetDefinitionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PolicySetDefinitionsCreateOrUpdateResponse = PolicySetDefinition;

/** Optional parameters. */
export interface PolicySetDefinitionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PolicySetDefinitionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PolicySetDefinitionsGetResponse = PolicySetDefinition;

/** Optional parameters. */
export interface PolicySetDefinitionsGetBuiltInOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuiltIn operation. */
export type PolicySetDefinitionsGetBuiltInResponse = PolicySetDefinition;

/** Optional parameters. */
export interface PolicySetDefinitionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PolicySetDefinitionsListResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export interface PolicySetDefinitionsListBuiltInOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuiltIn operation. */
export type PolicySetDefinitionsListBuiltInResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export interface PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdateAtManagementGroup operation. */
export type PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicySetDefinition;

/** Optional parameters. */
export interface PolicySetDefinitionsDeleteAtManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PolicySetDefinitionsGetAtManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAtManagementGroup operation. */
export type PolicySetDefinitionsGetAtManagementGroupResponse = PolicySetDefinition;

/** Optional parameters. */
export interface PolicySetDefinitionsListByManagementGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManagementGroup operation. */
export type PolicySetDefinitionsListByManagementGroupResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export interface PolicySetDefinitionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PolicySetDefinitionsListNextResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export interface PolicySetDefinitionsListBuiltInNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuiltInNext operation. */
export type PolicySetDefinitionsListBuiltInNextResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export interface PolicySetDefinitionsListByManagementGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManagementGroupNext operation. */
export type PolicySetDefinitionsListByManagementGroupNextResponse = PolicySetDefinitionListResult;

/** Optional parameters. */
export interface PolicyClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
