/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SubscriptionClient } from "../subscriptionClient";
import {
  SubscriptionsListResponse,
  SubscriptionsGetResponse,
  Subscription,
  SubscriptionsCreateOrUpdateResponse
} from "../models";

/**
 * Class representing a Subscriptions.
 */
export class Subscriptions {
  private readonly client: SubscriptionClient;

  /**
   * Initialize a new instance of the class Subscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: SubscriptionClient) {
    this.client = client;
  }

  /**
   * Get the list of subscriptions.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<SubscriptionsListResponse>;
  }

  /**
   * Gets details about particular subscription.
   * @param subscriptionId Id of the subscription.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, options: operationOptions },
      getOperationSpec
    ) as Promise<SubscriptionsGetResponse>;
  }

  /**
   * Create or updates a subscription.
   * @param subscriptionId Id of the subscription.
   * @param newSubscription Subscription parameter.
   * @param options The options parameters.
   */
  createOrUpdate(
    subscriptionId: string,
    newSubscription: Subscription,
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, newSubscription, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<SubscriptionsCreateOrUpdateResponse>;
  }

  /**
   * Delete the specified subscription.
   * @param subscriptionId Id of the subscription.
   * @param options The options parameters.
   */
  delete(
    subscriptionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscriptionId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Subscription
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Subscription
    }
  },
  requestBody: Parameters.newSubscription,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/subscriptions/{subscriptionId}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
