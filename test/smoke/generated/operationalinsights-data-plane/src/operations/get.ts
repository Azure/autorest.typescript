/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OperationalInsightsDataClient } from "../operationalInsightsDataClient";
import { GetMetadataResponse } from "../models";

/**
 * Class representing a Get.
 */
export class Get {
  private readonly client: OperationalInsightsDataClient;

  /**
   * Initialize a new instance of the class Get class.
   * @param client Reference to the service client
   */
  constructor(client: OperationalInsightsDataClient) {
    this.client = client;
  }

  /**
   * Retrieve the metadata information for the workspace, including its schema, functions, workspace
   * info, categories etc.
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure
   *                    portal.
   * @param options The options parameters.
   */
  metadata(
    workspaceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GetMetadataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { workspaceId, options: operationOptions },
      metadataOperationSpec
    ) as Promise<GetMetadataResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const metadataOperationSpec: coreHttp.OperationSpec = {
  path: "/workspaces/{workspaceId}/metadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetadataResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.workspaceId],
  serializer
};
