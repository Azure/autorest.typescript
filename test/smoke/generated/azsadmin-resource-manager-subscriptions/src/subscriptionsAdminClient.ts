/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { SubscriptionsAdminClientContext } from "./subscriptionsAdminClientContext";
import {
  SubscriptionsAdminClientRestoreDataResponse,
  SubscriptionsAdminClientCheckIdentityHealthResponse
} from "./models";

class SubscriptionsAdminClient extends SubscriptionsAdminClientContext {
  /**
   * Initializes a new instance of the SubscriptionsAdminClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
   *                       subscription.The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.SubscriptionsAdminClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.subscriptions = new operations.Subscriptions(this);
    this.acquiredPlans = new operations.AcquiredPlans(this);
    this.delegatedProviders = new operations.DelegatedProviders(this);
    this.delegatedProviderOffers = new operations.DelegatedProviderOffers(this);
    this.directoryTenants = new operations.DirectoryTenants(this);
    this.locations = new operations.Locations(this);
    this.manifests = new operations.Manifests(this);
    this.offers = new operations.Offers(this);
    this.offerDelegations = new operations.OfferDelegations(this);
    this.plans = new operations.Plans(this);
    this.quotas = new operations.Quotas(this);
  }

  /**
   * Update the encryption settings.
   * @param options The options parameters.
   */
  updateEncryption(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      updateEncryptionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Restores the data
   * @param options The options parameters.
   */
  restoreData(
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionsAdminClientRestoreDataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      restoreDataOperationSpec
    ) as Promise<SubscriptionsAdminClientRestoreDataResponse>;
  }

  /**
   * Checks the identity health
   * @param options The options parameters.
   */
  checkIdentityHealth(
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionsAdminClientCheckIdentityHealthResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      checkIdentityHealthOperationSpec
    ) as Promise<SubscriptionsAdminClientCheckIdentityHealthResponse>;
  }

  operations: operations.Operations;
  subscriptions: operations.Subscriptions;
  acquiredPlans: operations.AcquiredPlans;
  delegatedProviders: operations.DelegatedProviders;
  delegatedProviderOffers: operations.DelegatedProviderOffers;
  directoryTenants: operations.DirectoryTenants;
  locations: operations.Locations;
  manifests: operations.Manifests;
  offers: operations.Offers;
  offerDelegations: operations.OfferDelegations;
  plans: operations.Plans;
  quotas: operations.Quotas;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const updateEncryptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/updateEncryption",
  httpMethod: "POST",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const restoreDataOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/restoreData",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const checkIdentityHealthOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/checkIdentityHealth",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IdentityHealthCheckReportDefinition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};

// Operation Specifications

export {
  SubscriptionsAdminClient,
  SubscriptionsAdminClientContext,
  Models as SubscriptionsAdminModels,
  Mappers as SubscriptionsAdminMappers
};
export * from "./operations";
