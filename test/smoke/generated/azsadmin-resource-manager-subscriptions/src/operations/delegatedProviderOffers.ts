/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SubscriptionsAdminClient } from "../subscriptionsAdminClient";
import {
  DelegatedProviderOffersListResponse,
  DelegatedProviderOffersGetResponse,
  DelegatedProviderOffersListNextResponse
} from "../models";

/**
 * Class representing a DelegatedProviderOffers.
 */
export class DelegatedProviderOffers {
  private readonly client: SubscriptionsAdminClient;

  /**
   * Initialize a new instance of the class DelegatedProviderOffers class.
   * @param client Reference to the service client
   */
  constructor(client: SubscriptionsAdminClient) {
    this.client = client;
  }

  /**
   * Get the list of delegated provider offers.
   * @param delegatedProviderSubscriptionId Delegated provider subscription identifier.
   * @param options The options parameters.
   */
  list(
    delegatedProviderSubscriptionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DelegatedProviderOffersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { delegatedProviderSubscriptionId, options: operationOptions },
      listOperationSpec
    ) as Promise<DelegatedProviderOffersListResponse>;
  }

  /**
   * Get the specified delegated provider offer.
   * @param delegatedProviderSubscriptionId Delegated provider subscription identifier.
   * @param offer Name of an offer.
   * @param options The options parameters.
   */
  get(
    delegatedProviderSubscriptionId: string,
    offer: string,
    options?: coreHttp.OperationOptions
  ): Promise<DelegatedProviderOffersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { delegatedProviderSubscriptionId, offer, options: operationOptions },
      getOperationSpec
    ) as Promise<DelegatedProviderOffersGetResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param delegatedProviderSubscriptionId Delegated provider subscription identifier.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    delegatedProviderSubscriptionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DelegatedProviderOffersListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, delegatedProviderSubscriptionId, options: operationOptions },
      listNextOperationSpec
    ) as Promise<DelegatedProviderOffersListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/delegatedProviders/{delegatedProviderSubscriptionId}/offers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DelegatedProviderOfferList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.delegatedProviderSubscriptionId
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/delegatedProviders/{delegatedProviderSubscriptionId}/offers/{offer}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DelegatedProviderOffer
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.delegatedProviderSubscriptionId,
    Parameters.offer
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DelegatedProviderOfferList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.delegatedProviderSubscriptionId
  ],
  serializer
};
