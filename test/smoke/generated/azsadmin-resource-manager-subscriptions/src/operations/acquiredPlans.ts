/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SubscriptionsAdminClient } from "../subscriptionsAdminClient";
import {
  AcquiredPlansListResponse,
  AcquiredPlansGetResponse,
  PlanAcquisition,
  AcquiredPlansCreateResponse,
  AcquiredPlansListNextResponse
} from "../models";

/**
 * Class representing a AcquiredPlans.
 */
export class AcquiredPlans {
  private readonly client: SubscriptionsAdminClient;

  /**
   * Initialize a new instance of the class AcquiredPlans class.
   * @param client Reference to the service client
   */
  constructor(client: SubscriptionsAdminClient) {
    this.client = client;
  }

  /**
   * Get a collection of all acquired plans that subscription has access to.
   * @param targetSubscriptionId The target subscription ID.
   * @param options The options parameters.
   */
  list(
    targetSubscriptionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<AcquiredPlansListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { targetSubscriptionId, options: operationOptions },
      listOperationSpec
    ) as Promise<AcquiredPlansListResponse>;
  }

  /**
   * Gets the specified plan acquired by a subscription consuming the offer.
   * @param targetSubscriptionId The target subscription ID.
   * @param planAcquisitionId The plan acquisition Identifier
   * @param options The options parameters.
   */
  get(
    targetSubscriptionId: string,
    planAcquisitionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<AcquiredPlansGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { targetSubscriptionId, planAcquisitionId, options: operationOptions },
      getOperationSpec
    ) as Promise<AcquiredPlansGetResponse>;
  }

  /**
   * Deletes an acquired plan.
   * @param targetSubscriptionId The target subscription ID.
   * @param planAcquisitionId The plan acquisition Identifier
   * @param options The options parameters.
   */
  delete(
    targetSubscriptionId: string,
    planAcquisitionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { targetSubscriptionId, planAcquisitionId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates an acquired plan.
   * @param targetSubscriptionId The target subscription ID.
   * @param planAcquisitionId The plan acquisition Identifier
   * @param newAcquiredPlan The new acquired plan.
   * @param options The options parameters.
   */
  create(
    targetSubscriptionId: string,
    planAcquisitionId: string,
    newAcquiredPlan: PlanAcquisition,
    options?: coreHttp.OperationOptions
  ): Promise<AcquiredPlansCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        targetSubscriptionId,
        planAcquisitionId,
        newAcquiredPlan,
        options: operationOptions
      },
      createOperationSpec
    ) as Promise<AcquiredPlansCreateResponse>;
  }

  /**
   * ListNext
   * @param targetSubscriptionId The target subscription ID.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    targetSubscriptionId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AcquiredPlansListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { targetSubscriptionId, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<AcquiredPlansListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/subscriptions/{targetSubscriptionId}/acquiredPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PlanAcquisitionList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.targetSubscriptionId
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/subscriptions/{targetSubscriptionId}/acquiredPlans/{planAcquisitionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PlanAcquisition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.targetSubscriptionId,
    Parameters.planAcquisitionId
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/subscriptions/{targetSubscriptionId}/acquiredPlans/{planAcquisitionId}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.targetSubscriptionId,
    Parameters.planAcquisitionId
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/subscriptions/{targetSubscriptionId}/acquiredPlans/{planAcquisitionId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PlanAcquisition
    }
  },
  requestBody: Parameters.newAcquiredPlan,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.targetSubscriptionId,
    Parameters.planAcquisitionId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PlanAcquisitionList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.targetSubscriptionId,
    Parameters.nextLink
  ],
  serializer
};
