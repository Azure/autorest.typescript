/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SubscriptionsAdminClient } from "../subscriptionsAdminClient";
import {
  DirectoryTenantsListResponse,
  DirectoryTenantsGetResponse,
  DirectoryTenant,
  DirectoryTenantsCreateOrUpdateResponse,
  DirectoryTenantsListNextResponse
} from "../models";

/**
 * Class representing a DirectoryTenants.
 */
export class DirectoryTenants {
  private readonly client: SubscriptionsAdminClient;

  /**
   * Initialize a new instance of the class DirectoryTenants class.
   * @param client Reference to the service client
   */
  constructor(client: SubscriptionsAdminClient) {
    this.client = client;
  }

  /**
   * Lists all the directory tenants under the current subscription and given resource group name.
   * @param resourceGroupName The resource group the resource is located under.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DirectoryTenantsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listOperationSpec
    ) as Promise<DirectoryTenantsListResponse>;
  }

  /**
   * Get a directory tenant by name.
   * @param resourceGroupName The resource group the resource is located under.
   * @param tenant Directory tenant name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    tenant: string,
    options?: coreHttp.OperationOptions
  ): Promise<DirectoryTenantsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, tenant, options: operationOptions },
      getOperationSpec
    ) as Promise<DirectoryTenantsGetResponse>;
  }

  /**
   * Delete a directory tenant under a resource group.
   * @param resourceGroupName The resource group the resource is located under.
   * @param tenant Directory tenant name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    tenant: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, tenant, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Create or updates a directory tenant.
   * @param resourceGroupName The resource group the resource is located under.
   * @param tenant Directory tenant name.
   * @param newTenant New directory tenant properties.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    tenant: string,
    newTenant: DirectoryTenant,
    options?: coreHttp.OperationOptions
  ): Promise<DirectoryTenantsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, tenant, newTenant, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<DirectoryTenantsCreateOrUpdateResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The resource group the resource is located under.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DirectoryTenantsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, options: operationOptions },
      listNextOperationSpec
    ) as Promise<DirectoryTenantsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/directoryTenants",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryTenantList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/directoryTenants/{tenant}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryTenant
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.tenant
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/directoryTenants/{tenant}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.tenant
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/directoryTenants/{tenant}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryTenant
    }
  },
  requestBody: Parameters.newTenant,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.tenant
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryTenantList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName
  ],
  serializer
};
