/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SubscriptionsAdminClient } from "../subscriptionsAdminClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  MoveSubscriptionsDefinition,
  SubscriptionsListOptionalParams,
  SubscriptionsListResponse,
  CheckNameAvailabilityDefinition,
  SubscriptionsCheckNameAvailabilityResponse,
  SubscriptionsGetResponse,
  Subscription,
  SubscriptionsCreateOrUpdateResponse
} from "../models";

/**
 * Class representing a Subscriptions.
 */
export class Subscriptions {
  private readonly client: SubscriptionsAdminClient;

  /**
   * Initialize a new instance of the class Subscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: SubscriptionsAdminClient) {
    this.client = client;
  }

  /**
   * Move subscriptions between delegated provider offers.
   * @param moveSubscriptionsDefinition Move subscriptions parameter.
   * @param options The options parameters.
   */
  async moveSubscriptions(
    moveSubscriptionsDefinition: MoveSubscriptionsDefinition,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      moveSubscriptionsDefinition,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      moveSubscriptionsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: moveSubscriptionsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Validate that user subscriptions can be moved between delegated provider offers.
   * @param moveSubscriptionsDefinition Move subscriptions parameter.
   * @param options The options parameters.
   */
  async validateMoveSubscriptions(
    moveSubscriptionsDefinition: MoveSubscriptionsDefinition,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      moveSubscriptionsDefinition,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      validateMoveSubscriptionsOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: validateMoveSubscriptionsOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get the list of subscriptions.
   * @param options The options parameters.
   */
  list(
    options?: SubscriptionsListOptionalParams
  ): Promise<SubscriptionsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<SubscriptionsListResponse>;
  }

  /**
   * Get the list of subscriptions.
   * @param nameAvailabilityDefinition Check name availability parameter
   * @param options The options parameters.
   */
  checkNameAvailability(
    nameAvailabilityDefinition: CheckNameAvailabilityDefinition,
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionsCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nameAvailabilityDefinition, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<SubscriptionsCheckNameAvailabilityResponse>;
  }

  /**
   * Get a specified subscription.
   * @param subscription Subscription parameter.
   * @param options The options parameters.
   */
  get(
    subscription: string,
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscription, options: operationOptions },
      getOperationSpec
    ) as Promise<SubscriptionsGetResponse>;
  }

  /**
   * Creates or updates the specified subscription.
   * @param subscription Subscription parameter.
   * @param newSubscription Subscription parameter.
   * @param options The options parameters.
   */
  createOrUpdate(
    subscription: string,
    newSubscription: Subscription,
    options?: coreHttp.OperationOptions
  ): Promise<SubscriptionsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscription, newSubscription, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<SubscriptionsCreateOrUpdateResponse>;
  }

  /**
   * Delete the specified subscription.
   * @param subscription Subscription parameter.
   * @param options The options parameters.
   */
  delete(
    subscription: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { subscription, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const moveSubscriptionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/moveSubscriptions",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.moveSubscriptionsDefinition,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const validateMoveSubscriptionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/validateMoveSubscriptions",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.moveSubscriptionsDefinition,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/subscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    }
  },
  requestBody: Parameters.nameAvailabilityDefinition,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/subscriptions/{subscription}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Subscription
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.subscription
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/subscriptions/{subscription}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Subscription
    }
  },
  requestBody: Parameters.newSubscription,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.subscription
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/subscriptions/{subscription}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.subscription
  ],
  serializer
};
