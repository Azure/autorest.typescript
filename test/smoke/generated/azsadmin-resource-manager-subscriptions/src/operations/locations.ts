/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SubscriptionsAdminClient } from "../subscriptionsAdminClient";
import {
  LocationsListResponse,
  LocationsGetResponse,
  Location,
  LocationsCreateOrUpdateResponse,
  LocationsGetOperationsStatusResponse,
  LocationsListNextResponse
} from "../models";

/**
 * Class representing a Locations.
 */
export class Locations {
  private readonly client: SubscriptionsAdminClient;

  /**
   * Initialize a new instance of the class Locations class.
   * @param client Reference to the service client
   */
  constructor(client: SubscriptionsAdminClient) {
    this.client = client;
  }

  /**
   * Get a list of all AzureStack location.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<LocationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<LocationsListResponse>;
  }

  /**
   * Get the specified location.
   * @param location The AzureStack location.
   * @param options The options parameters.
   */
  get(
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<LocationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, options: operationOptions },
      getOperationSpec
    ) as Promise<LocationsGetResponse>;
  }

  /**
   * Updates the specified location.
   * @param location The AzureStack location.
   * @param newLocation The new location
   * @param options The options parameters.
   */
  createOrUpdate(
    location: string,
    newLocation: Location,
    options?: coreHttp.OperationOptions
  ): Promise<LocationsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, newLocation, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<LocationsCreateOrUpdateResponse>;
  }

  /**
   * Get the operation status.
   * @param location The AzureStack location.
   * @param operationsStatusName The operation status name.
   * @param options The options parameters.
   */
  getOperationsStatus(
    location: string,
    operationsStatusName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LocationsGetOperationsStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, operationsStatusName, options: operationOptions },
      getOperationsStatusOperationSpec
    ) as Promise<LocationsGetOperationsStatusResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<LocationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<LocationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/locations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocationList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/locations/{location}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Location
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/locations/{location}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Location
    }
  },
  requestBody: Parameters.newLocation,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationsStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Subscriptions.Admin/locations/{location}/operationsStatus/{operationsStatusName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationsStatus
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.operationsStatusName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocationList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
