/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SubscriptionsAdminClient } from "../subscriptionsAdminClient";
import {
  OfferDelegationsListResponse,
  OfferDelegationsGetResponse,
  OfferDelegation,
  OfferDelegationsCreateOrUpdateResponse,
  OfferDelegationsListNextResponse
} from "../models";

/**
 * Class representing a OfferDelegations.
 */
export class OfferDelegations {
  private readonly client: SubscriptionsAdminClient;

  /**
   * Initialize a new instance of the class OfferDelegations class.
   * @param client Reference to the service client
   */
  constructor(client: SubscriptionsAdminClient) {
    this.client = client;
  }

  /**
   * Get the list of offer delegations.
   * @param offer Name of an offer.
   * @param resourceGroupName The resource group the resource is located under.
   * @param options The options parameters.
   */
  list(
    offer: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<OfferDelegationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { offer, resourceGroupName, options: operationOptions },
      listOperationSpec
    ) as Promise<OfferDelegationsListResponse>;
  }

  /**
   * Get the specified offer delegation.
   * @param offer Name of an offer.
   * @param resourceGroupName The resource group the resource is located under.
   * @param offerDelegationName Name of a offer delegation.
   * @param options The options parameters.
   */
  get(
    offer: string,
    resourceGroupName: string,
    offerDelegationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<OfferDelegationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        offer,
        resourceGroupName,
        offerDelegationName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<OfferDelegationsGetResponse>;
  }

  /**
   * Create or update the offer delegation.
   * @param offer Name of an offer.
   * @param resourceGroupName The resource group the resource is located under.
   * @param offerDelegationName Name of a offer delegation.
   * @param newOfferDelegation New offer delegation parameter.
   * @param options The options parameters.
   */
  createOrUpdate(
    offer: string,
    resourceGroupName: string,
    offerDelegationName: string,
    newOfferDelegation: OfferDelegation,
    options?: coreHttp.OperationOptions
  ): Promise<OfferDelegationsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        offer,
        resourceGroupName,
        offerDelegationName,
        newOfferDelegation,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<OfferDelegationsCreateOrUpdateResponse>;
  }

  /**
   * Delete the specified offer delegation.
   * @param offer Name of an offer.
   * @param resourceGroupName The resource group the resource is located under.
   * @param offerDelegationName Name of a offer delegation.
   * @param options The options parameters.
   */
  delete(
    offer: string,
    resourceGroupName: string,
    offerDelegationName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        offer,
        resourceGroupName,
        offerDelegationName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param offer Name of an offer.
   * @param resourceGroupName The resource group the resource is located under.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    offer: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<OfferDelegationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, offer, resourceGroupName, options: operationOptions },
      listNextOperationSpec
    ) as Promise<OfferDelegationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/offers/{offer}/offerDelegations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OfferDelegationList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.offer,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/offers/{offer}/offerDelegations/{offerDelegationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OfferDelegation
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.offer,
    Parameters.resourceGroupName,
    Parameters.offerDelegationName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/offers/{offer}/offerDelegations/{offerDelegationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.OfferDelegation
    }
  },
  requestBody: Parameters.newOfferDelegation,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.offer,
    Parameters.resourceGroupName,
    Parameters.offerDelegationName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/offers/{offer}/offerDelegations/{offerDelegationName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.offer,
    Parameters.resourceGroupName,
    Parameters.offerDelegationName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OfferDelegationList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.offer,
    Parameters.resourceGroupName
  ],
  serializer
};
