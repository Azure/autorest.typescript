/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * List of supported operations.
 */
export interface OperationList {
  /**
   * List of supported operations.
   */
  value?: Operation[];
}

/**
 * Supported REST operation.
 */
export interface Operation {
  /**
   * Display information for the operation.
   */
  display?: OperationDisplay;
  /**
   * Name of the operation being performed on an object.
   */
  readonly name?: string;
  /**
   * Origin for the operation.
   */
  readonly origin?: string;
}

/**
 * Display information for the operation.
 */
export interface OperationDisplay {
  /**
   * Description for the operation.
   */
  readonly description?: string;
  /**
   * Display name of the operation.
   */
  readonly operation?: string;
  /**
   * Resource provider display name.
   */
  readonly provider?: string;
  /**
   * Resource type display name related to the operation.
   */
  readonly resource?: string;
}

/**
 * List of subscriptions.
 */
export interface SubscriptionList {
  /**
   * Subscription definition.
   */
  value?: Subscription[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * List of supported operations.
 */
export interface Subscription {
  /**
   * Parent DelegatedProvider subscription identifier.
   */
  delegatedProviderSubscriptionId?: string;
  /**
   * Subscription name.
   */
  displayName?: string;
  /**
   * Fully qualified identifier.
   */
  id?: string;
  /**
   * External reference identifier.
   */
  externalReferenceId?: string;
  /**
   * Identifier of the offer under the scope of a delegated provider.
   */
  offerId?: string;
  /**
   * Subscription owner.
   */
  owner?: string;
  /**
   * Routing resource manager type.
   */
  routingResourceManagerType?: ResourceManagerType;
  /**
   * Subscription state.
   */
  state?: SubscriptionState;
  /**
   * Subscription identifier.
   */
  subscriptionId?: string;
  /**
   * Directory tenant identifier.
   */
  tenantId?: string;
}

/**
 * The identity health check report action definition.
 */
export interface IdentityHealthCheckReportDefinition {
  /**
   * Start time of the report.
   */
  reportStartTimeUtc?: Date;
  /**
   * End time of the report.
   */
  reportEndTimeUtc?: Date;
  /**
   * The roll-up health status for the directory.
   */
  status?: HealthStatus;
  /**
   * List of directory tenant health reports.
   */
  directoryTenants?: DirectoryTenantHealthReportList;
}

/**
 * List of directory tenant health reports.
 */
export interface DirectoryTenantHealthReportList {
  /**
   * Directory tenant health report.
   */
  value?: DirectoryTenantHealthReport[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * A report of the health status of a directory tenant and identity applications within.
 */
export interface DirectoryTenantHealthReport {
  /**
   * The tenant unique identifier.
   */
  tenantId?: string;
  /**
   * The directory tenant resource name.
   */
  tenantName?: string;
  /**
   * The roll-up health status for the directory.
   */
  status?: HealthStatus;
  /**
   * List of the application health reports.
   */
  applications?: ApplicationHealthReportList;
}

/**
 * List of the application health reports.
 */
export interface ApplicationHealthReportList {
  /**
   * A report of the health status of an identity applications.
   */
  value?: ApplicationHealthReport[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * A report of the health status of an identity applications.
 */
export interface ApplicationHealthReport {
  /**
   * The application identifier.
   */
  appId?: string;
  /**
   * The service principal identifier.
   */
  servicePrincipalObjectId?: string;
  /**
   * The roll-up health status for the application
   */
  status?: HealthStatus;
  /**
   * List of AppRoleAssignment health reports for the application.
   */
  appRoleAssignments?: AppRoleAssignmentHealthReportList;
  /**
   * List of OAuth2PermissionGrant health reports for the application.
   */
  oAuth2PermissionGrants?: OAuth2PermissionGrantHealthReportList;
  /**
   * List of ServicePrincipalTag health reports for the application.
   */
  servicePrincipalTags?: ServicePrincipalTagHealthReportList;
}

/**
 * List of AppRoleAssignment health reports for the application.
 */
export interface AppRoleAssignmentHealthReportList {
  /**
   * A report of the health status of an AppRoleAssignment.
   */
  value?: AppRoleAssignmentHealthReport[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * A report of the health status of an AppRoleAssignment.
 */
export interface AppRoleAssignmentHealthReport {
  /**
   * The permission description.
   */
  appRoleAssignment?: AppRoleAssignmentDefinition;
  /**
   * The health status for the permission.
   */
  status?: HealthStatus;
}

/**
 * Application role assignment definition.
 */
export interface AppRoleAssignmentDefinition {
  /**
   * The resource identifier. This should be the application identifier of the resource application.
   */
  resource?: string;
  /**
   * The client identifier. This should be the application identifier of the client application.
   */
  client?: string;
  /**
   * The role identifier. This should be the ID of the AppRole exposed by the resource application.
   */
  roleId?: string;
}

/**
 * List of OAuth2PermissionGrant health reports for the application.
 */
export interface OAuth2PermissionGrantHealthReportList {
  /**
   * A report of the health status of an OAuth2PermissionGrant.
   */
  value?: OAuth2PermissionGrantHealthReport[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * A report of the health status of an OAuth2PermissionGrant.
 */
export interface OAuth2PermissionGrantHealthReport {
  /**
   * The permission description.
   */
  oAuth2PermissionGrant?: OAuth2PermissionGrantDefinition;
  /**
   * The health status for the permission.
   */
  status?: HealthStatus;
}

/**
 * Application permission grant definition.
 */
export interface OAuth2PermissionGrantDefinition {
  /**
   * The resource identifier. This should be the application identifier of the resource application.
   */
  resource?: string;
  /**
   * The client identifier. This should be the application identifier of the client application.
   */
  client?: string;
  /**
   * The scope identifier. This should be the scope value of the OAUTH2PERMISSION exposed by the resource application.
   */
  scope?: string;
}

/**
 * List of ServicePrincipalTag health reports for the application.
 */
export interface ServicePrincipalTagHealthReportList {
  /**
   * A report of the health status of a tag on an identity application service principal.
   */
  value?: ServicePrincipalTagHealthReport[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * A report of the health status of a tag on an identity application service principal.
 */
export interface ServicePrincipalTagHealthReport {
  /**
   * The tag.
   */
  servicePrincipalTag?: string;
  /**
   * The health status for the tag.
   */
  status?: HealthStatus;
}

/**
 * The move subscriptions action definition
 */
export interface MoveSubscriptionsDefinition {
  /**
   * The delegated provider offer identifier (from the Admin context) that the subscriptions to be moved to.
   */
  targetDelegatedProviderOffer?: string;
  /**
   * A collection of subscriptions to move to the target delegated provider offer.
   */
  resources: string[];
}

/**
 * The check name availability action definition.
 */
export interface CheckNameAvailabilityDefinition {
  /**
   * The resource name to verify.
   */
  name?: string;
  /**
   * The resource type to verify.
   */
  resourceType?: string;
}

/**
 * The check name availability response definition
 */
export interface CheckNameAvailabilityResponse {
  /**
   * A value indicating whether the name is available.
   */
  nameAvailable?: boolean;
  /**
   * The reason for the unavailability of the name.
   */
  reason?: NameUnavailabilityReason;
  /**
   * The message explaining the reason.
   */
  message?: string;
}

/**
 * List of acquired plans.
 */
export interface PlanAcquisitionList {
  /**
   * List of acquired plans.
   */
  value?: PlanAcquisition[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Represents the acquisition of an add-on plan for a subscription.
 */
export interface PlanAcquisition {
  /**
   * Acquisition identifier.
   */
  acquisitionId?: string;
  /**
   * Identifier in the tenant subscription context.
   */
  id?: string;
  /**
   * Plan identifier in the tenant subscription context.
   */
  planId?: string;
  /**
   * External reference identifier.
   */
  externalReferenceId?: string;
  /**
   * State of the provisioning.
   */
  provisioningState?: ProvisioningState;
  /**
   * Acquisition time.
   */
  acquisitionTime?: Date;
}

/**
 * List of delegated provider offers.
 */
export interface DelegatedProviderOfferList {
  /**
   * Array of delegated provider offers.
   */
  value?: DelegatedProviderOffer[];
  /**
   * Continuation token
   */
  nextLink?: string;
}

/**
 * Base Resource Object
 */
export interface Resource {
  /**
   * URI of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of resource.
   */
  readonly type?: string;
  /**
   * Location of the resource
   */
  location?: string;
  /**
   * List of key-value pairs.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * The delegated provider offer.
 */
export type DelegatedProviderOffer = Resource & {
  /**
   * The delegated offer identifier.
   */
  delegatedOfferId?: string;
  /**
   * Display name of offer.
   */
  displayName?: string;
  /**
   * Description of offer.
   */
  description?: string;
  /**
   * External reference identifier.
   */
  externalReferenceId?: string;
  /**
   * Offer accessibility state.
   */
  accessibilityState?: AccessibilityState;
  /**
   * Current subscription count.
   */
  subscriptionCount?: number;
};

/**
 * List of directory tenants.
 */
export interface DirectoryTenantList {
  /**
   * List of directory tenants.
   */
  value?: DirectoryTenant[];
  /**
   * Continuation token
   */
  nextLink?: string;
}

/**
 * Directory tenant.
 */
export type DirectoryTenant = Resource & {
  /**
   * Tenant unique identifier.
   */
  tenantId?: string;
};

/**
 * List of locations.
 */
export interface LocationList {
  /**
   * List of locations.
   */
  value?: Location[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * Contains information about a geographical location where resource providers can be deployed.
 */
export interface Location {
  /**
   * Display name of the location.
   */
  displayName?: string;
  /**
   * Location identifier.
   */
  id?: string;
  /**
   * Latitude of the location.
   */
  latitude?: string;
  /**
   * Longitude of the location.
   */
  longitude?: string;
  /**
   * Location name.
   */
  name?: string;
}

/**
 * A long running operation status.
 */
export interface OperationsStatus {
  /**
   * The operation status identifier.
   */
  id?: OperationsStatusIdentifier;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The start time of the operation.
   */
  startTime?: Date;
  /**
   * The end time of the operation.
   */
  endTime?: Date;
  /**
   * The completion percentage of the operation.
   */
  percentComplete?: number;
  /**
   * The internal operation properties.
   */
  properties?: any;
  /**
   * The operation error.
   */
  error?: ExtendedErrorInfo;
  /**
   * The amount of time clients should wait..
   */
  retryAfter?: string;
  /**
   * The terminal http status code for the operation.
   */
  terminalHttpStatusCode?: string;
  /**
   * The content of the response.
   */
  responseContent?: any;
}

/**
 * The admin offer identifier for the location wide SubscriptionsAdminResourceTypes.OperationsStatus resource type.
 */
export interface OperationsStatusIdentifier {
  /**
   * The location of the operations status.
   */
  location?: string;
  /**
   * The name of the operations status.
   */
  name?: string;
  /**
   * The subscription identifier..
   */
  subscriptionId?: string;
}

/**
 * The extended error information.
 */
export interface ExtendedErrorInfo {
  /**
   * The error code.
   */
  code?: string;
  /**
   * The error message.
   */
  message?: string;
  /**
   * The detailed error message details.
   */
  details?: ExtendedErrorInfoList;
}

/**
 * List of the extended error information.
 */
export interface ExtendedErrorInfoList {
  /**
   * List of the extended error information.
   */
  value?: ExtendedErrorInfo[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * List of manifests.
 */
export interface ManifestList {
  /**
   * List of manifests.
   */
  value?: Manifest[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The manifest.
 */
export interface Manifest {
  /**
   * The unique identifier of the registration.
   */
  name?: string;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The resource tags.
   */
  resourceTags?: any;
  /**
   * The namespace.
   */
  namespace?: string;
  /**
   * The location of the provider.
   */
  providerLocation?: string;
  /**
   * The type of the provider.
   */
  providerType?: ResourceProviderType;
  /**
   * A value indicating whether this resource provider is enabled.
   */
  enabled?: boolean;
  /**
   * The extensions.
   */
  extensionCollection?: ExtensionCollectionDefinition;
  /**
   * The resource types
   */
  resourceTypes?: ResourceTypeList;
  /**
   * The resource provider authorization.
   */
  providerAuthorization?: ResourceProviderAuthorization;
  /**
   * The resource hydration accounts.
   */
  resourceHydrationAccounts?: AzureResourceHydrationAccountList;
  /**
   * The linked notification rules.
   */
  linkedNotificationRules?: FanoutLinkedNotificationRuleList;
  /**
   * The provisioning state.
   */
  provisioningState?: ManifestProvisioningState;
  /**
   * The name of the resource group.
   */
  resourceGroupName?: string;
  /**
   * The location of the resource.
   */
  resourceLocation?: string;
  /**
   * The subscription ID under which RP is registered.
   */
  subscriptionId?: string;
  /**
   * A value indicating whether the manifest is always routable by all subscriptions.
   */
  alwaysRoutable?: boolean;
  /**
   * The routing resource manager type.
   */
  routingResourceManagerType?: ResourceManagerType;
  /**
   * The metadata.
   */
  metadata?: any;
}

/**
 * The manifest extension collection definition.
 */
export interface ExtensionCollectionDefinition {
  /**
   * The version of the format a.b[.c[.d]]. see System.Version documentation for more details.
   */
  version?: string;
  /**
   * The extensions.
   */
  extensions?: ExtensionList;
}

/**
 * List of the extensions.
 */
export interface ExtensionList {
  /**
   * List of the extensions.
   */
  value?: ExtensionDefinition[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The data contract for specifying extensions in resource provider manifests.
 */
export interface ExtensionDefinition {
  /**
   * The name.
   */
  name?: string;
  /**
   * The Uri
   */
  uri?: string;
  /**
   * The extension properties.
   */
  properties?: ExtensionPropertiesDefinition;
  /**
   * The obsolete bundles bitmask.
   */
  obsoleteBundlesBitmask?: number;
  /**
   * The resource access.
   */
  resourceAccess?: ResourceAccessList;
}

/**
 * The extension properties definition.
 */
export interface ExtensionPropertiesDefinition {
  /**
   * The quota create blade.
   */
  quotaCreateBladeName?: string;
  /**
   * The resource provider dashboard blade.
   */
  resourceProviderDashboardBladeName?: string;
}

/**
 * List of the resource access.
 */
export interface ResourceAccessList {
  /**
   * List of the resource access.
   */
  value?: ResourceAccess[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * Extension Client Access Section.
 */
export interface ResourceAccess {
  /**
   * The name.
   */
  name?: string;
  /**
   * The resource.
   */
  resource?: string;
}

/**
 * List of the resource types.
 */
export interface ResourceTypeList {
  /**
   * List of the resource types.
   */
  value?: ResourceType[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The resource type definition.
 */
export interface ResourceType {
  /**
   * The name.
   */
  name?: string;
  /**
   * The resource routing type.
   */
  routingType?: RoutingType;
  /**
   * The resource deletion policy.
   */
  resourceDeletionPolicy?: ResourceDeletionPolicy;
  /**
   * The allowed unauthorized actions.
   */
  allowedUnauthorizedActions?: string[];
  /**
   * The read-only actions.
   */
  authorizationActionMappings?: AuthorizationActionMappingList;
  /**
   * The linked access checks.
   */
  linkedAccessChecks?: LinkedAccessCheckList;
  /**
   * The linked notification rules.
   */
  linkedNotificationRules?: LinkedNotificationRuleList;
  /**
   * The linked operation rules.
   */
  linkedOperationRules?: LinkedOperationRuleList;
  /**
   * The API profiles.
   */
  apiProfiles?: ApiProfileList;
  /**
   * The resource provider endpoints.
   */
  endpoints?: ResourceProviderEndpointList;
  /**
   * The resource type behavior in the marketplace.
   */
  marketplaceType?: MarketplaceType;
  /**
   * A value indicating whether the resource type is in global location.
   */
  inGlobalLocation?: boolean;
  /**
   * The metered resource ids.
   */
  meteredResourceIds?: string[];
}

/**
 * List of the read-only actions.
 */
export interface AuthorizationActionMappingList {
  /**
   * List of the read-only actions.
   */
  value?: AuthorizationActionMapping[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The linked resource access checks.
 */
export interface AuthorizationActionMapping {
  /**
   * The original action name.
   */
  original?: string;
  /**
   * The desired action name.
   */
  desired?: string;
}

/**
 * List of the linked access checks.
 */
export interface LinkedAccessCheckList {
  /**
   * List of the linked access checks.
   */
  value?: LinkedAccessCheck[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The linked resource access checks.
 */
export interface LinkedAccessCheck {
  /**
   * The action name.
   */
  actionName?: string;
  /**
   * The linked property.
   */
  linkedProperty?: string;
  /**
   * The linked action.
   */
  linkedAction?: string;
  /**
   * The linked action verb.
   */
  linkedActionVerb?: string;
  /**
   * The linked type.
   */
  linkedType?: string;
}

/**
 * List of the linked notification rules.
 */
export interface LinkedNotificationRuleList {
  /**
   * List of the linked notification rules.
   */
  value?: LinkedNotificationRule[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The linked notification rule.
 */
export interface LinkedNotificationRule {
  /**
   * List of actions.
   */
  actions?: string[];
}

/**
 * List of the linked operation rules.
 */
export interface LinkedOperationRuleList {
  /**
   * List of the linked operation rules.
   */
  value?: LinkedOperationRule[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The linked resource access checks.
 */
export interface LinkedOperationRule {
  /**
   * The linked operation.
   */
  linkedOperation?: LinkedOperation;
  /**
   * The linked action.
   */
  linkedAction?: LinkedAction;
  /**
   * The list of resource types this rule depends on.
   */
  dependsOnTypes?: string[];
}

/**
 * List of the API profiles.
 */
export interface ApiProfileList {
  /**
   * List of the API profiles.
   */
  value?: ApiProfile[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * Represents the API profile.
 */
export interface ApiProfile {
  /**
   * The profile version.
   */
  profileVersion?: string;
  /**
   * The API version.
   */
  apiVersion?: string;
}

/**
 * List of the resource provider endpoints.
 */
export interface ResourceProviderEndpointList {
  /**
   * List of the resource provider endpoints.
   */
  value?: ResourceProviderEndpoint[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The API versions supported by the endpoint.
 */
export interface ResourceProviderEndpoint {
  /**
   * The API versions supported by the endpoint.
   */
  apiVersions?: string[];
  /**
   * The enabled.
   */
  enabled?: boolean;
  /**
   * The endpoint uri.
   */
  endpointUri?: string;
  /**
   * The timeout.
   */
  timeout?: string;
}

/**
 * The resource provider authorization information.
 */
export interface ResourceProviderAuthorization {
  /**
   * The application id of resource provider in AAD.
   */
  applicationId?: string;
  /**
   * The role definition identifier against which a role assignment is created.
   */
  roleDefinitionId?: string;
}

/**
 * List of the resource hydration accounts.
 */
export interface AzureResourceHydrationAccountList {
  /**
   * List of the resource hydration accounts.
   */
  value?: AzureResourceHydrationAccount[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The API versions supported by the endpoint.
 */
export interface AzureResourceHydrationAccount {
  /**
   * The subscription identifier.
   */
  subscriptionId?: string;
  /**
   * The account name.
   */
  accountName?: string;
  /**
   * The encrypted key.
   */
  encryptedKey?: string;
  /**
   * The next child resource consistency job limit.
   */
  maxChildResourceConsistencyJobLimit?: number;
}

/**
 * List of the linked notification rules.
 */
export interface FanoutLinkedNotificationRuleList {
  /**
   * List of the linked notification rules.
   */
  value?: FanoutLinkedNotificationRule[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * The fan-out linked notification rule.
 */
export interface FanoutLinkedNotificationRule {
  /**
   * The list of actions.
   */
  actions?: string[];
  /**
   * The list of endpoint uris.
   */
  endpoints?: ResourceProviderEndpointList;
}

/**
 * List of offers.
 */
export interface OfferList {
  /**
   * List of offers.
   */
  value?: Offer[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * Represents an offering of services against which a subscription can be created.
 */
export type Offer = Resource & {
  /**
   * Name of the Offer.
   */
  namePropertiesName?: string;
  /**
   * Display name of offer.
   */
  displayName?: string;
  /**
   * Description of offer.
   */
  description?: string;
  /**
   * External reference identifier.
   */
  externalReferenceId?: string;
  /**
   * Offer accessibility state.
   */
  state?: AccessibilityState;
  /**
   * Current subscription count.
   */
  subscriptionCount?: number;
  /**
   * Maximum subscriptions per account.
   */
  maxSubscriptionsPerAccount?: number;
  /**
   * Identifiers of the base plans that become available to the tenant immediately when a tenant subscribes to the offer.
   */
  basePlanIds?: string[];
  /**
   * References to add-on plans that a tenant can optionally acquire as a part of the offer.
   */
  addonPlans?: AddonPlanDefinition[];
};

/**
 * Contains the name of the desired plan to be linked or unlinked from an offer.
 */
export interface AddonPlanDefinition {
  /**
   * Plan identifier.
   */
  planId?: string;
  /**
   * Maximum number of instances that can be acquired by a single subscription. If not specified, the assumed value is 1.
   */
  maxAcquisitionCount?: number;
}

/**
 * List of metrics.
 */
export interface MetricList {
  /**
   * List of metrics.
   */
  value?: Metric[];
  /**
   * Continuation token
   */
  nextLink?: string;
}

/**
 * The resource metric set that represents the metrics for a particular resource.
 */
export interface Metric {
  /**
   * Unit of metrics.
   */
  metricUnit?: MetricUnit;
  /**
   * Timespan of the metric.
   */
  timeGrain?: string;
  /**
   * Start time of the metric.
   */
  startTime?: Date;
  /**
   * End time of the metric.
   */
  endTime?: Date;
  /**
   * Collected metric values in the timespan.
   */
  metricValues?: MetricValue[];
}

/**
 * Metric value
 */
export interface MetricValue {
  /**
   * Timestamp of when the metric value was collected.
   */
  timeStamp?: Date;
  /**
   * Average value for metric sample period.
   */
  average?: number;
  /**
   * Minimum value for metric sample period.
   */
  minimum?: number;
  /**
   * Maximum value for metric sample period.
   */
  maximum?: number;
  /**
   * Total value for metric sample period.
   */
  total?: number;
  /**
   * Number of measurements for metric sample period.
   */
  count?: number;
  /**
   * Extended properties.
   */
  extendedProperties?: { [propertyName: string]: string };
}

/**
 * List of metric definitions.
 */
export interface MetricDefinitionList {
  /**
   * Array of metric definitions.
   */
  value?: MetricDefinition[];
  /**
   * Continuation token
   */
  nextLink?: string;
}

/**
 * Metric Definition
 */
export interface MetricDefinition {
  /**
   * Metric definition name.
   */
  name?: string;
  /**
   * Unit of metrics.
   */
  unit?: MetricUnit;
  /**
   * Type of the primary aggregation.
   */
  primaryAggregationType?: MetricPrimaryAggregationType;
  /**
   * Metric availabilities.
   */
  metricAvailabilities?: MetricAvailability[];
}

/**
 * Metric Definition
 */
export interface MetricAvailability {
  /**
   * The time grain. Metrics will be available for this time grain.
   */
  timeGrain?: string;
  /**
   * the retention. Metrics may be queried for this interval.
   */
  retention?: string;
}

/**
 * Definition for linking and unlinking plans to offers.
 */
export interface PlanLinkDefinition {
  /**
   * Name of the plan.
   */
  planName?: string;
  /**
   * Type of the plan link.
   */
  planLinkType?: PlanLinkType;
  /**
   * The maximum acquisition count by subscribers
   */
  maxAcquisitionCount?: number;
}

/**
 * .
 */
export interface OfferDelegationList {
  /**
   * Array of usage aggregates.
   */
  value?: OfferDelegation[];
  /**
   * Continuation token
   */
  nextLink?: string;
}

/**
 * Offer delegation.
 */
export type OfferDelegation = Resource & {
  /**
   * Identifier of the subscription receiving the delegated offer.
   */
  subscriptionId?: string;
};

/**
 * List of plans
 */
export interface PlanList {
  /**
   * Array of plans.
   */
  value?: Plan[];
  /**
   * Continuation token
   */
  nextLink?: string;
}

/**
 * A plan represents a package of quotas and capabilities that are offered tenants. A tenant can acquire this plan through an offer to upgrade his access to underlying cloud services.
 */
export type Plan = Resource & {
  /**
   * Description of the plan.
   */
  description?: string;
  /**
   * Display name.
   */
  displayName?: string;
  /**
   * External reference identifier.
   */
  externalReferenceId?: string;
  /**
   * Quota identifiers under the plan.
   */
  quotaIds?: string[];
  /**
   * Name of the plan.
   */
  namePropertiesName?: string;
  /**
   * Subscription count.
   */
  subscriptionCount?: number;
  /**
   * SKU identifiers.
   */
  skuIds?: string[];
};

/**
 * List of quotas.
 */
export interface QuotaList {
  /**
   * List of quotas.
   */
  value?: Quota[];
  /**
   * URI to next page.
   */
  nextLink?: string;
}

/**
 * Quotas for DelegatedProviders.
 */
export type Quota = Resource & {
  /**
   * Value indicating whether custom portal branding is allowed.
   */
  allowCustomPortalBranding?: boolean;
};
/**
 * Defines values for ResourceManagerType.
 */
export type ResourceManagerType = "Default" | "Admin";
/**
 * Defines values for SubscriptionState.
 */
export type SubscriptionState =
  | "Enabled"
  | "PastDue"
  | "Warned"
  | "Disabled"
  | "Deleting"
  | "Deleted"
  | "NotDefined"
  | "PartiallyDeleted";
/**
 * Defines values for HealthStatus.
 */
export type HealthStatus = "Unknown" | "Unhealthy" | "Healthy";
/**
 * Defines values for NameUnavailabilityReason.
 */
export type NameUnavailabilityReason = "Invalid" | "AlreadyExists";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "NotSpecified"
  | "Accepted"
  | "Failed"
  | "Succeeded";
/**
 * Defines values for AccessibilityState.
 */
export type AccessibilityState = "Private" | "Public" | "Decommissioned";
/**
 * Defines values for ResourceProviderType.
 */
export type ResourceProviderType =
  | "NotSpecified"
  | "Internal"
  | "External"
  | "RegistrationFree"
  | "TenantOnly"
  | "AlwaysRoutable";
/**
 * Defines values for RoutingType.
 */
export type RoutingType =
  | "Default"
  | "ProxyOnly"
  | "HostBased"
  | "Extension"
  | "Tenant"
  | "Fanout"
  | "LocationBased";
/**
 * Defines values for ResourceDeletionPolicy.
 */
export type ResourceDeletionPolicy = "NotSpecified" | "Cascade";
/**
 * Defines values for LinkedOperation.
 */
export type LinkedOperation =
  | "None"
  | "CrossResourceGroupResourceMove"
  | "CrossSubscriptionResourceMove";
/**
 * Defines values for LinkedAction.
 */
export type LinkedAction = "NotSpecified" | "Blocked" | "Validate" | "Enabled";
/**
 * Defines values for MarketplaceType.
 */
export type MarketplaceType = "NotSpecified" | "AddOn";
/**
 * Defines values for ManifestProvisioningState.
 */
export type ManifestProvisioningState =
  | "Accepted"
  | "Creating"
  | "Deleting"
  | "Moving"
  | "Failed"
  | "Succeeded";
/**
 * Defines values for MetricUnit.
 */
export type MetricUnit =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "CountPerSecond"
  | "BytesPerSecond";
/**
 * Defines values for MetricPrimaryAggregationType.
 */
export type MetricPrimaryAggregationType =
  | "None"
  | "Average"
  | "Total"
  | "Minimum"
  | "Maximum"
  | "Last";
/**
 * Defines values for PlanLinkType.
 */
export type PlanLinkType = "None" | "Base" | "Addon";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the restoreData operation.
 */
export type SubscriptionsAdminClientRestoreDataResponse = SubscriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionList;
  };
};

/**
 * Contains response data for the checkIdentityHealth operation.
 */
export type SubscriptionsAdminClientCheckIdentityHealthResponse = IdentityHealthCheckReportDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IdentityHealthCheckReportDefinition;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriptionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type SubscriptionsListResponse = SubscriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionList;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type SubscriptionsCheckNameAvailabilityResponse = CheckNameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResponse;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SubscriptionsGetResponse = Subscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Subscription;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubscriptionsCreateOrUpdateResponse = Subscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Subscription;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AcquiredPlansListResponse = PlanAcquisitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlanAcquisitionList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AcquiredPlansGetResponse = PlanAcquisition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlanAcquisition;
  };
};

/**
 * Contains response data for the create operation.
 */
export type AcquiredPlansCreateResponse = PlanAcquisition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlanAcquisition;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AcquiredPlansListNextResponse = PlanAcquisitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlanAcquisitionList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DelegatedProvidersListResponse = SubscriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SubscriptionList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DelegatedProvidersGetResponse = Subscription & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Subscription;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DelegatedProviderOffersListResponse = DelegatedProviderOfferList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DelegatedProviderOfferList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DelegatedProviderOffersGetResponse = DelegatedProviderOffer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DelegatedProviderOffer;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DelegatedProviderOffersListNextResponse = DelegatedProviderOfferList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DelegatedProviderOfferList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DirectoryTenantsListResponse = DirectoryTenantList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DirectoryTenantList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DirectoryTenantsGetResponse = DirectoryTenant & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DirectoryTenant;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DirectoryTenantsCreateOrUpdateResponse = DirectoryTenant & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DirectoryTenant;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DirectoryTenantsListNextResponse = DirectoryTenantList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DirectoryTenantList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LocationsListResponse = LocationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocationList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type LocationsGetResponse = Location & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Location;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LocationsCreateOrUpdateResponse = Location & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Location;
  };
};

/**
 * Contains response data for the getOperationsStatus operation.
 */
export type LocationsGetOperationsStatusResponse = OperationsStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationsStatus;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LocationsListNextResponse = LocationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ManifestsListResponse = ManifestList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManifestList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ManifestsGetResponse = Manifest & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Manifest;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ManifestsListNextResponse = ManifestList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManifestList;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type OffersListAllResponse = OfferList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OfferList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OffersListResponse = OfferList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OfferList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type OffersGetResponse = Offer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Offer;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type OffersCreateOrUpdateResponse = Offer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Offer;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type OffersListMetricsResponse = MetricList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricList;
  };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type OffersListMetricDefinitionsResponse = MetricDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricDefinitionList;
  };
};

/**
 * Contains response data for the link operation.
 */
export type OffersLinkResponse = Offer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Offer;
  };
};

/**
 * Contains response data for the unlink operation.
 */
export type OffersUnlinkResponse = Offer & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Offer;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type OffersListAllNextResponse = OfferList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OfferList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OffersListNextResponse = OfferList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OfferList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OfferDelegationsListResponse = OfferDelegationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OfferDelegationList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type OfferDelegationsGetResponse = OfferDelegation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OfferDelegation;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type OfferDelegationsCreateOrUpdateResponse = OfferDelegation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OfferDelegation;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OfferDelegationsListNextResponse = OfferDelegationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OfferDelegationList;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type PlansListAllResponse = PlanList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlanList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PlansListResponse = PlanList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlanList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PlansGetResponse = Plan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Plan;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PlansCreateOrUpdateResponse = Plan & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Plan;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PlansListMetricsResponse = MetricList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricList;
  };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type PlansListMetricDefinitionsResponse = MetricDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricDefinitionList;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type PlansListAllNextResponse = PlanList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlanList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PlansListNextResponse = PlanList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PlanList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type QuotasListResponse = QuotaList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type QuotasGetResponse = Quota & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Quota;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriptionsAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
