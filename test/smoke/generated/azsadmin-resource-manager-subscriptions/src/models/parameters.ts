/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2015-11-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const moveSubscriptionsDefinition: coreHttp.OperationParameter = {
  parameterPath: "moveSubscriptionsDefinition",
  mapper: Mappers.MoveSubscriptionsDefinition
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const nameAvailabilityDefinition: coreHttp.OperationParameter = {
  parameterPath: "nameAvailabilityDefinition",
  mapper: Mappers.CheckNameAvailabilityDefinition
};

export const subscription: coreHttp.OperationURLParameter = {
  parameterPath: "subscription",
  mapper: {
    serializedName: "subscription",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const newSubscription: coreHttp.OperationParameter = {
  parameterPath: "newSubscription",
  mapper: Mappers.Subscription
};

export const targetSubscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "targetSubscriptionId",
  mapper: {
    serializedName: "targetSubscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const planAcquisitionId: coreHttp.OperationURLParameter = {
  parameterPath: "planAcquisitionId",
  mapper: {
    serializedName: "planAcquisitionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const newAcquiredPlan: coreHttp.OperationParameter = {
  parameterPath: "newAcquiredPlan",
  mapper: Mappers.PlanAcquisition
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const delegatedProvider: coreHttp.OperationURLParameter = {
  parameterPath: "delegatedProvider",
  mapper: {
    serializedName: "delegatedProvider",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const delegatedProviderSubscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "delegatedProviderSubscriptionId",
  mapper: {
    serializedName: "delegatedProviderSubscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const offer: coreHttp.OperationURLParameter = {
  parameterPath: "offer",
  mapper: {
    serializedName: "offer",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tenant: coreHttp.OperationURLParameter = {
  parameterPath: "tenant",
  mapper: {
    serializedName: "tenant",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const newTenant: coreHttp.OperationParameter = {
  parameterPath: "newTenant",
  mapper: Mappers.DirectoryTenant
};

export const location: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const newLocation: coreHttp.OperationParameter = {
  parameterPath: "newLocation",
  mapper: Mappers.Location
};

export const operationsStatusName: coreHttp.OperationURLParameter = {
  parameterPath: "operationsStatusName",
  mapper: {
    serializedName: "operationsStatusName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const manifestName: coreHttp.OperationURLParameter = {
  parameterPath: "manifestName",
  mapper: {
    serializedName: "manifestName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const newOffer: coreHttp.OperationParameter = {
  parameterPath: "newOffer",
  mapper: Mappers.Offer
};

export const planLink: coreHttp.OperationParameter = {
  parameterPath: "planLink",
  mapper: Mappers.PlanLinkDefinition
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const offerDelegationName: coreHttp.OperationURLParameter = {
  parameterPath: "offerDelegationName",
  mapper: {
    serializedName: "offerDelegationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const newOfferDelegation: coreHttp.OperationParameter = {
  parameterPath: "newOfferDelegation",
  mapper: Mappers.OfferDelegation
};

export const plan: coreHttp.OperationURLParameter = {
  parameterPath: "plan",
  mapper: {
    serializedName: "plan",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const newPlan: coreHttp.OperationParameter = {
  parameterPath: "newPlan",
  mapper: Mappers.Plan
};

export const quota: coreHttp.OperationURLParameter = {
  parameterPath: "quota",
  mapper: {
    serializedName: "quota",
    required: true,
    type: {
      name: "String"
    }
  }
};
