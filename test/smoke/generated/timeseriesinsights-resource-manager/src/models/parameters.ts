/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-08-15-preview",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.EnvironmentCreateOrUpdateParameters
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const environmentName: coreHttp.OperationURLParameter = {
  parameterPath: "environmentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w._()]+$"),
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "environmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const environmentName1: coreHttp.OperationURLParameter = {
  parameterPath: "environmentName",
  mapper: {
    serializedName: "environmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const standardEnvironmentUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "standardEnvironmentUpdateParameters",
  mapper: Mappers.StandardEnvironmentUpdateParameters
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.EventSourceCreateOrUpdateParameters
};

export const eventSourceName: coreHttp.OperationURLParameter = {
  parameterPath: "eventSourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w._()]+$"),
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "eventSourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventSourceName1: coreHttp.OperationURLParameter = {
  parameterPath: "eventSourceName",
  mapper: {
    serializedName: "eventSourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventSourceUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "eventSourceUpdateParameters",
  mapper: Mappers.EventSourceUpdateParameters
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ReferenceDataSetCreateOrUpdateParameters
};

export const referenceDataSetName: coreHttp.OperationURLParameter = {
  parameterPath: "referenceDataSetName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]"),
      MaxLength: 63,
      MinLength: 3
    },
    serializedName: "referenceDataSetName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const referenceDataSetName1: coreHttp.OperationURLParameter = {
  parameterPath: "referenceDataSetName",
  mapper: {
    serializedName: "referenceDataSetName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const referenceDataSetUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "referenceDataSetUpdateParameters",
  mapper: Mappers.ReferenceDataSetUpdateParameters
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AccessPolicyCreateOrUpdateParameters
};

export const accessPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "accessPolicyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w._()]+$"),
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "accessPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accessPolicyName1: coreHttp.OperationURLParameter = {
  parameterPath: "accessPolicyName",
  mapper: {
    serializedName: "accessPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accessPolicyUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "accessPolicyUpdateParameters",
  mapper: Mappers.AccessPolicyUpdateParameters
};
