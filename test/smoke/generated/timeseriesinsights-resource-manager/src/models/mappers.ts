/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateTrackedResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "CreateOrUpdateTrackedResourceProperties",
  type: {
    name: "Composite",
    className: "CreateOrUpdateTrackedResourceProperties",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const EnvironmentCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "EnvironmentCreateOrUpdateParameters",
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      capacity: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        serializedName: "capacity",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const EnvironmentResource: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentResource",
  type: {
    name: "Composite",
    className: "EnvironmentResource",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const EnvironmentUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentUpdateParameters",
  type: {
    name: "Composite",
    className: "EnvironmentUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const StandardEnvironmentUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "StandardEnvironmentUpdateParameters",
  type: {
    name: "Composite",
    className: "StandardEnvironmentUpdateParameters",
    modelProperties: {
      ...EnvironmentUpdateParameters.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      dataRetentionTime: {
        serializedName: "properties.dataRetentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "String"
        }
      },
      partitionKeyProperties: {
        serializedName: "properties.partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesIdProperty" }
          }
        }
      }
    }
  }
};

export const TimeSeriesIdProperty: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesIdProperty",
  type: {
    name: "Composite",
    className: "TimeSeriesIdProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "String",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentListResponse: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentListResponse",
  type: {
    name: "Composite",
    className: "EnvironmentListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EnvironmentResource" }
          }
        }
      }
    }
  }
};

export const EventSourceCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "EventSourceCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "EventSourceCreateOrUpdateParameters",
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceResource: coreHttp.CompositeMapper = {
  serializedName: "EventSourceResource",
  type: {
    name: "Composite",
    className: "EventSourceResource",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "EventSourceUpdateParameters",
  type: {
    name: "Composite",
    className: "EventSourceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const EventSourceListResponse: coreHttp.CompositeMapper = {
  serializedName: "EventSourceListResponse",
  type: {
    name: "Composite",
    className: "EventSourceListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EventSourceResource" }
          }
        }
      }
    }
  }
};

export const ReferenceDataSetCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "ReferenceDataSetCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "ReferenceDataSetCreateOrUpdateParameters",
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      keyProperties: {
        serializedName: "properties.keyProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetKeyProperty"
            }
          }
        }
      },
      dataStringComparisonBehavior: {
        serializedName: "properties.dataStringComparisonBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferenceDataSetCreationProperties: coreHttp.CompositeMapper = {
  serializedName: "ReferenceDataSetCreationProperties",
  type: {
    name: "Composite",
    className: "ReferenceDataSetCreationProperties",
    modelProperties: {
      keyProperties: {
        serializedName: "keyProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetKeyProperty"
            }
          }
        }
      },
      dataStringComparisonBehavior: {
        serializedName: "dataStringComparisonBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferenceDataSetKeyProperty: coreHttp.CompositeMapper = {
  serializedName: "ReferenceDataSetKeyProperty",
  type: {
    name: "Composite",
    className: "ReferenceDataSetKeyProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferenceDataSetResource: coreHttp.CompositeMapper = {
  serializedName: "ReferenceDataSetResource",
  type: {
    name: "Composite",
    className: "ReferenceDataSetResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      keyProperties: {
        serializedName: "properties.keyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetKeyProperty"
            }
          }
        }
      },
      dataStringComparisonBehavior: {
        serializedName: "properties.dataStringComparisonBehavior",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "ResourceProperties",
  type: {
    name: "Composite",
    className: "ResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReferenceDataSetResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "ReferenceDataSetResourceProperties",
  type: {
    name: "Composite",
    className: "ReferenceDataSetResourceProperties",
    modelProperties: {
      ...ReferenceDataSetCreationProperties.type.modelProperties,
      ...ResourceProperties.type.modelProperties
    }
  }
};

export const ReferenceDataSetUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "ReferenceDataSetUpdateParameters",
  type: {
    name: "Composite",
    className: "ReferenceDataSetUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ReferenceDataSetListResponse: coreHttp.CompositeMapper = {
  serializedName: "ReferenceDataSetListResponse",
  type: {
    name: "Composite",
    className: "ReferenceDataSetListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReferenceDataSetResource" }
          }
        }
      }
    }
  }
};

export const AccessPolicyCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "AccessPolicyCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "AccessPolicyCreateOrUpdateParameters",
    modelProperties: {
      principalObjectId: {
        serializedName: "properties.principalObjectId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AccessPolicyRole"
          }
        }
      }
    }
  }
};

export const AccessPolicyResource: coreHttp.CompositeMapper = {
  serializedName: "AccessPolicyResource",
  type: {
    name: "Composite",
    className: "AccessPolicyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      principalObjectId: {
        serializedName: "properties.principalObjectId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AccessPolicyRole"
          }
        }
      }
    }
  }
};

export const AccessPolicyUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "AccessPolicyUpdateParameters",
  type: {
    name: "Composite",
    className: "AccessPolicyUpdateParameters",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AccessPolicyRole"
          }
        }
      }
    }
  }
};

export const AccessPolicyListResponse: coreHttp.CompositeMapper = {
  serializedName: "AccessPolicyListResponse",
  type: {
    name: "Composite",
    className: "AccessPolicyListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AccessPolicyResource" }
          }
        }
      }
    }
  }
};

export const LongTermStorageConfigurationInput: coreHttp.CompositeMapper = {
  serializedName: "LongTermStorageConfigurationInput",
  type: {
    name: "Composite",
    className: "LongTermStorageConfigurationInput",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      managementKey: {
        serializedName: "managementKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LongTermStorageConfigurationOutput: coreHttp.CompositeMapper = {
  serializedName: "LongTermStorageConfigurationOutput",
  type: {
    name: "Composite",
    className: "LongTermStorageConfigurationOutput",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LongTermStorageConfigurationMutableProperties: coreHttp.CompositeMapper = {
  serializedName: "LongTermStorageConfigurationMutableProperties",
  type: {
    name: "Composite",
    className: "LongTermStorageConfigurationMutableProperties",
    modelProperties: {
      managementKey: {
        serializedName: "managementKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StandardEnvironmentCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "Standard",
  type: {
    name: "Composite",
    className: "StandardEnvironmentCreateOrUpdateParameters",
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    polymorphicDiscriminator:
      CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentCreateOrUpdateParameters.type.modelProperties,
      dataRetentionTime: {
        serializedName: "properties.dataRetentionTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "String"
        }
      },
      partitionKeyProperties: {
        serializedName: "properties.partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesIdProperty" }
          }
        }
      }
    }
  }
};

export const StandardEnvironmentCreationProperties: coreHttp.CompositeMapper = {
  serializedName: "StandardEnvironmentCreationProperties",
  type: {
    name: "Composite",
    className: "StandardEnvironmentCreationProperties",
    modelProperties: {
      dataRetentionTime: {
        serializedName: "dataRetentionTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "storageLimitExceededBehavior",
        type: {
          name: "String"
        }
      },
      partitionKeyProperties: {
        serializedName: "partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesIdProperty" }
          }
        }
      }
    }
  }
};

export const LongTermEnvironmentCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "LongTerm",
  type: {
    name: "Composite",
    className: "LongTermEnvironmentCreateOrUpdateParameters",
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    polymorphicDiscriminator:
      CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentCreateOrUpdateParameters.type.modelProperties,
      timeSeriesIdProperties: {
        serializedName: "properties.timeSeriesIdProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesIdProperty" }
          }
        }
      },
      storageConfiguration: {
        serializedName: "storageConfiguration",
        type: {
          name: "Composite",
          className: "LongTermStorageConfigurationInput"
        }
      },
      dataRetention: {
        serializedName: "properties.warmStoreConfiguration.dataRetention",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const LongTermEnvironmentUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "LongTermEnvironmentUpdateParameters",
  type: {
    name: "Composite",
    className: "LongTermEnvironmentUpdateParameters",
    modelProperties: {
      ...EnvironmentUpdateParameters.type.modelProperties,
      storageConfiguration: {
        serializedName: "storageConfiguration",
        type: {
          name: "Composite",
          className: "LongTermStorageConfigurationMutableProperties"
        }
      },
      dataRetention: {
        serializedName: "properties.warmStoreConfiguration.dataRetention",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const StandardEnvironmentResource: coreHttp.CompositeMapper = {
  serializedName: "Standard",
  type: {
    name: "Composite",
    className: "StandardEnvironmentResource",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentResource.type.modelProperties,
      dataRetentionTime: {
        serializedName: "properties.dataRetentionTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "String"
        }
      },
      partitionKeyProperties: {
        serializedName: "properties.partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesIdProperty" }
          }
        }
      },
      provisioningStatePropertiesProvisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTimePropertiesCreationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      dataAccessId: {
        serializedName: "properties.dataAccessId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dataAccessFqdn: {
        serializedName: "properties.dataAccessFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "EnvironmentStatus"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EnvironmentResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentResourceProperties",
  type: {
    name: "Composite",
    className: "EnvironmentResourceProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      dataAccessId: {
        serializedName: "dataAccessId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dataAccessFqdn: {
        serializedName: "dataAccessFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "EnvironmentStatus"
        }
      }
    }
  }
};

export const EnvironmentStatus: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentStatus",
  type: {
    name: "Composite",
    className: "EnvironmentStatus",
    modelProperties: {
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "IngressEnvironmentStatus"
        }
      },
      warmStorage: {
        serializedName: "warmStorage",
        type: {
          name: "Composite",
          className: "WarmStorageEnvironmentStatus"
        }
      }
    }
  }
};

export const IngressEnvironmentStatus: coreHttp.CompositeMapper = {
  serializedName: "IngressEnvironmentStatus",
  type: {
    name: "Composite",
    className: "IngressEnvironmentStatus",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      stateDetails: {
        serializedName: "stateDetails",
        type: {
          name: "Composite",
          className: "EnvironmentStateDetails"
        }
      }
    }
  }
};

export const EnvironmentStateDetails: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentStateDetails",
  type: {
    name: "Composite",
    className: "EnvironmentStateDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WarmStorageEnvironmentStatus: coreHttp.CompositeMapper = {
  serializedName: "WarmStorageEnvironmentStatus",
  type: {
    name: "Composite",
    className: "WarmStorageEnvironmentStatus",
    modelProperties: {
      state: {
        serializedName: "propertiesUsage.state",
        type: {
          name: "String"
        }
      },
      currentCount: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        serializedName: "propertiesUsage.stateDetails.currentCount",
        type: {
          name: "Number"
        }
      },
      maxCount: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        serializedName: "propertiesUsage.stateDetails.maxCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StandardEnvironmentResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "StandardEnvironmentResourceProperties",
  type: {
    name: "Composite",
    className: "StandardEnvironmentResourceProperties",
    modelProperties: {
      ...StandardEnvironmentCreationProperties.type.modelProperties,
      ...EnvironmentResourceProperties.type.modelProperties,
      ...ResourceProperties.type.modelProperties
    }
  }
};

export const LongTermEnvironmentResource: coreHttp.CompositeMapper = {
  serializedName: "LongTerm",
  type: {
    name: "Composite",
    className: "LongTermEnvironmentResource",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentResource.type.modelProperties,
      provisioningStatePropertiesProvisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTimePropertiesCreationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      dataAccessId: {
        serializedName: "properties.dataAccessId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dataAccessFqdn: {
        serializedName: "properties.dataAccessFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "EnvironmentStatus"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeSeriesIdProperties: {
        serializedName: "properties.timeSeriesIdProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesIdProperty" }
          }
        }
      },
      storageConfiguration: {
        serializedName: "storageConfiguration",
        type: {
          name: "Composite",
          className: "LongTermStorageConfigurationOutput"
        }
      },
      dataRetention: {
        serializedName: "properties.warmStoreConfiguration.dataRetention",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const LongTermEnvironmentResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "LongTermEnvironmentResourceProperties",
  type: {
    name: "Composite",
    className: "LongTermEnvironmentResourceProperties",
    modelProperties: {
      ...EnvironmentResourceProperties.type.modelProperties,
      ...ResourceProperties.type.modelProperties,
      timeSeriesIdProperties: {
        serializedName: "timeSeriesIdProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesIdProperty" }
          }
        }
      },
      storageConfiguration: {
        serializedName: "storageConfiguration",
        type: {
          name: "Composite",
          className: "LongTermStorageConfigurationOutput"
        }
      },
      dataRetention: {
        serializedName: "warmStoreConfiguration.dataRetention",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const EventHubEventSourceCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "Microsoft.EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSourceCreateOrUpdateParameters",
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    polymorphicDiscriminator:
      CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceCreateOrUpdateParameters.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        serializedName: "properties.eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        required: true,
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        required: true,
        type: {
          name: "String"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceCommonProperties: coreHttp.CompositeMapper = {
  serializedName: "EventSourceCommonProperties",
  type: {
    name: "Composite",
    className: "EventSourceCommonProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      timestampPropertyName: {
        serializedName: "timestampPropertyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEventSourceProperties: coreHttp.CompositeMapper = {
  serializedName: "AzureEventSourceProperties",
  type: {
    name: "Composite",
    className: "AzureEventSourceProperties",
    modelProperties: {
      ...EventSourceCommonProperties.type.modelProperties,
      eventSourceResourceId: {
        serializedName: "eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceCommonProperties: coreHttp.CompositeMapper = {
  serializedName: "EventHubEventSourceCommonProperties",
  type: {
    name: "Composite",
    className: "EventHubEventSourceCommonProperties",
    modelProperties: {
      ...AzureEventSourceProperties.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "serviceBusNamespace",
        required: true,
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "eventHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceCreationProperties: coreHttp.CompositeMapper = {
  serializedName: "EventHubEventSourceCreationProperties",
  type: {
    name: "Composite",
    className: "EventHubEventSourceCreationProperties",
    modelProperties: {
      ...EventHubEventSourceCommonProperties.type.modelProperties,
      sharedAccessKey: {
        serializedName: "sharedAccessKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "Microsoft.IoTHub",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceCreateOrUpdateParameters",
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    polymorphicDiscriminator:
      CreateOrUpdateTrackedResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceCreateOrUpdateParameters.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        serializedName: "properties.eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      iotHubName: {
        serializedName: "properties.iotHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        required: true,
        type: {
          name: "String"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceCommonProperties: coreHttp.CompositeMapper = {
  serializedName: "IoTHubEventSourceCommonProperties",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceCommonProperties",
    modelProperties: {
      ...AzureEventSourceProperties.type.modelProperties,
      iotHubName: {
        serializedName: "iotHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceCreationProperties: coreHttp.CompositeMapper = {
  serializedName: "IoTHubEventSourceCreationProperties",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceCreationProperties",
    modelProperties: {
      ...IoTHubEventSourceCommonProperties.type.modelProperties,
      sharedAccessKey: {
        serializedName: "sharedAccessKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "EventHubEventSourceUpdateParameters",
  type: {
    name: "Composite",
    className: "EventHubEventSourceUpdateParameters",
    modelProperties: {
      ...EventSourceUpdateParameters.type.modelProperties,
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceMutableProperties: coreHttp.CompositeMapper = {
  serializedName: "EventSourceMutableProperties",
  type: {
    name: "Composite",
    className: "EventSourceMutableProperties",
    modelProperties: {
      timestampPropertyName: {
        serializedName: "timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      }
    }
  }
};

export const LocalTimestamp: coreHttp.CompositeMapper = {
  serializedName: "LocalTimestamp",
  type: {
    name: "Composite",
    className: "LocalTimestamp",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      timeZoneOffset: {
        serializedName: "timeZoneOffset",
        type: {
          name: "Composite",
          className: "LocalTimestampTimeZoneOffset"
        }
      }
    }
  }
};

export const LocalTimestampTimeZoneOffset: coreHttp.CompositeMapper = {
  serializedName: "LocalTimestampTimeZoneOffset",
  type: {
    name: "Composite",
    className: "LocalTimestampTimeZoneOffset",
    modelProperties: {
      propertyName: {
        serializedName: "propertyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceMutableProperties: coreHttp.CompositeMapper = {
  serializedName: "EventHubEventSourceMutableProperties",
  type: {
    name: "Composite",
    className: "EventHubEventSourceMutableProperties",
    modelProperties: {
      ...EventSourceMutableProperties.type.modelProperties,
      sharedAccessKey: {
        serializedName: "sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "IoTHubEventSourceUpdateParameters",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceUpdateParameters",
    modelProperties: {
      ...EventSourceUpdateParameters.type.modelProperties,
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceMutableProperties: coreHttp.CompositeMapper = {
  serializedName: "IoTHubEventSourceMutableProperties",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceMutableProperties",
    modelProperties: {
      ...EventSourceMutableProperties.type.modelProperties,
      sharedAccessKey: {
        serializedName: "sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceResource: coreHttp.CompositeMapper = {
  serializedName: "Microsoft.EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSourceResource",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        serializedName: "properties.eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        required: true,
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "EventHubEventSourceResourceProperties",
  type: {
    name: "Composite",
    className: "EventHubEventSourceResourceProperties",
    modelProperties: {
      ...EventHubEventSourceCommonProperties.type.modelProperties
    }
  }
};

export const IoTHubEventSourceResource: coreHttp.CompositeMapper = {
  serializedName: "Microsoft.IotHub",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceResource",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        serializedName: "properties.eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      iotHubName: {
        serializedName: "properties.iotHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceResourceProperties: coreHttp.CompositeMapper = {
  serializedName: "IoTHubEventSourceResourceProperties",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceResourceProperties",
    modelProperties: {
      ...IoTHubEventSourceCommonProperties.type.modelProperties
    }
  }
};

export let discriminators = {
  "CreateOrUpdateTrackedResourceProperties.EnvironmentCreateOrUpdateParameters": EnvironmentCreateOrUpdateParameters,
  "Resource.EnvironmentResource": EnvironmentResource,
  "CreateOrUpdateTrackedResourceProperties.EventSourceCreateOrUpdateParameters": EventSourceCreateOrUpdateParameters,
  "Resource.EventSourceResource": EventSourceResource,
  "CreateOrUpdateTrackedResourceProperties.Standard": StandardEnvironmentCreateOrUpdateParameters,
  "CreateOrUpdateTrackedResourceProperties.LongTerm": LongTermEnvironmentCreateOrUpdateParameters,
  "Resource.Standard": StandardEnvironmentResource,
  "Resource.LongTerm": LongTermEnvironmentResource,
  "CreateOrUpdateTrackedResourceProperties.Microsoft.EventHub": EventHubEventSourceCreateOrUpdateParameters,
  "CreateOrUpdateTrackedResourceProperties.Microsoft.IoTHub": IoTHubEventSourceCreateOrUpdateParameters,
  "Resource.Microsoft.EventHub": EventHubEventSourceResource,
  "Resource.Microsoft.IotHub": IoTHubEventSourceResource
};
