/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VMwareCloudSimple } from "../vMwareCloudSimple";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  DedicatedCloudServicesListBySubscriptionOptionalParams,
  DedicatedCloudServicesListBySubscriptionResponse,
  DedicatedCloudServicesListByResourceGroupOptionalParams,
  DedicatedCloudServicesListByResourceGroupResponse,
  DedicatedCloudServicesGetResponse,
  DedicatedCloudService,
  DedicatedCloudServicesCreateOrUpdateResponse,
  PatchPayload,
  DedicatedCloudServicesUpdateResponse,
  DedicatedCloudServicesListBySubscriptionNextOptionalParams,
  DedicatedCloudServicesListBySubscriptionNextResponse,
  DedicatedCloudServicesListByResourceGroupNextOptionalParams,
  DedicatedCloudServicesListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a DedicatedCloudServices.
 */
export class DedicatedCloudServices {
  private readonly client: VMwareCloudSimple;

  /**
   * Initialize a new instance of the class DedicatedCloudServices class.
   * @param client Reference to the service client
   */
  constructor(client: VMwareCloudSimple) {
    this.client = client;
  }

  /**
   * Returns list of dedicated cloud services within a subscription
   * @param options The options parameters.
   */
  listBySubscription(
    options?: DedicatedCloudServicesListBySubscriptionOptionalParams
  ): Promise<DedicatedCloudServicesListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<DedicatedCloudServicesListBySubscriptionResponse>;
  }

  /**
   * Returns list of dedicated cloud services within a resource group
   * @param resourceGroupName The name of the resource group
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: DedicatedCloudServicesListByResourceGroupOptionalParams
  ): Promise<DedicatedCloudServicesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<DedicatedCloudServicesListByResourceGroupResponse>;
  }

  /**
   * Returns Dedicate Cloud Service
   * @param options The options parameters.
   */
  getModel(
    options?: coreHttp.OperationOptions
  ): Promise<DedicatedCloudServicesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getModelOperationSpec
    ) as Promise<DedicatedCloudServicesGetResponse>;
  }

  /**
   * Create dedicate cloud service
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudServiceRequest Create Dedicated Cloud Service request
   * @param dedicatedCloudServiceName dedicated cloud Service name
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    dedicatedCloudServiceRequest: DedicatedCloudService,
    dedicatedCloudServiceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DedicatedCloudServicesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dedicatedCloudServiceRequest,
        dedicatedCloudServiceName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<DedicatedCloudServicesCreateOrUpdateResponse>;
  }

  /**
   * Delete dedicate cloud service
   * @param options The options parameters.
   */
  async deleteModel(
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = { options: operationOptions };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteModelOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteModelOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Patch dedicated cloud service's properties
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudServiceName dedicated cloud service name
   * @param dedicatedCloudServiceRequest Patch Dedicated Cloud Service request
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    dedicatedCloudServiceName: string,
    dedicatedCloudServiceRequest: PatchPayload,
    options?: coreHttp.OperationOptions
  ): Promise<DedicatedCloudServicesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dedicatedCloudServiceName,
        dedicatedCloudServiceRequest,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<DedicatedCloudServicesUpdateResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: DedicatedCloudServicesListBySubscriptionNextOptionalParams
  ): Promise<DedicatedCloudServicesListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<DedicatedCloudServicesListBySubscriptionNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DedicatedCloudServicesListByResourceGroupNextOptionalParams
  ): Promise<DedicatedCloudServicesListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<DedicatedCloudServicesListByResourceGroupNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudServiceListResponse
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudServiceListResponse
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.filter1,
    Parameters.skipToken1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudService
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudService
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  requestBody: Parameters.dedicatedCloudServiceRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dedicatedCloudServiceName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CsrpError,
      headersMapper: Mappers.DedicatedCloudServicesDeleteModelHeaders
    }
  },
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudService
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  requestBody: Parameters.dedicatedCloudServiceRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dedicatedCloudServiceName2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudServiceListResponse
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudServiceListResponse
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.filter1,
    Parameters.skipToken1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink2
  ],
  serializer
};
