/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VMwareCloudSimple } from "../vMwareCloudSimple";
import {
  VirtualNetworksListResponse,
  VirtualNetworksGetResponse,
  VirtualNetworksListNextResponse
} from "../models";

/**
 * Class representing a VirtualNetworks.
 */
export class VirtualNetworks {
  private readonly client: VMwareCloudSimple;

  /**
   * Initialize a new instance of the class VirtualNetworks class.
   * @param client Reference to the service client
   */
  constructor(client: VMwareCloudSimple) {
    this.client = client;
  }

  /**
   * Return list of virtual networks in location for private cloud
   * @param regionId The region Id (westus, eastus)
   * @param pcName The private cloud name
   * @param resourcePoolName Resource pool used to derive vSphere cluster which contains virtual networks
   * @param options The options parameters.
   */
  list(
    regionId: string,
    pcName: string,
    resourcePoolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworksListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { regionId, pcName, resourcePoolName, options: operationOptions },
      listOperationSpec
    ) as Promise<VirtualNetworksListResponse>;
  }

  /**
   * Return virtual network by its name
   * @param options The options parameters.
   */
  getModel(
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworksGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getModelOperationSpec
    ) as Promise<VirtualNetworksGetResponse>;
  }

  /**
   * ListNext
   * @param regionId The region Id (westus, eastus)
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param pcName The private cloud name
   * @param resourcePoolName Resource pool used to derive vSphere cluster which contains virtual networks
   * @param options The options parameters.
   */
  listNext(
    regionId: string,
    nextLink: string,
    pcName: string,
    resourcePoolName: string,
    options?: coreHttp.OperationOptions
  ): Promise<VirtualNetworksListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        regionId,
        nextLink,
        pcName,
        resourcePoolName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<VirtualNetworksListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/virtualNetworks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkListResponse
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.resourcePoolName2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.regionId,
    Parameters.pcName
  ],
  serializer
};
const getModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/virtualNetworks/{virtualNetworkName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetwork
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkListResponse
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.resourcePoolName2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.regionId,
    Parameters.nextLink,
    Parameters.pcName
  ],
  serializer
};
