/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachineLearningServiceError: coreHttp.CompositeMapper = {
  serializedName: "MachineLearningServiceError",
  type: {
    name: "Composite",
    className: "MachineLearningServiceError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorDetail" } }
        }
      }
    }
  }
};

export const ErrorDetail: coreHttp.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const Identity: coreHttp.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "SystemAssigned",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Workspace: coreHttp.CompositeMapper = {
  serializedName: "Workspace",
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...Resource.type.modelProperties,
      workspaceId: {
        serializedName: "properties.workspaceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      keyVault: {
        serializedName: "properties.keyVault",
        type: {
          name: "String"
        }
      },
      applicationInsights: {
        serializedName: "properties.applicationInsights",
        type: {
          name: "String"
        }
      },
      containerRegistry: {
        serializedName: "properties.containerRegistry",
        type: {
          name: "String"
        }
      },
      storageAccount: {
        serializedName: "properties.storageAccount",
        type: {
          name: "String"
        }
      },
      discoveryUrl: {
        serializedName: "properties.discoveryUrl",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperty"
        }
      },
      hbiWorkspace: {
        serializedName: "properties.hbiWorkspace",
        type: {
          name: "Boolean"
        }
      },
      serviceProvisionedResourceGroup: {
        serializedName: "properties.serviceProvisionedResourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateLinkCount: {
        serializedName: "properties.privateLinkCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      imageBuildCompute: {
        serializedName: "properties.imageBuildCompute",
        type: {
          name: "String"
        }
      },
      allowPublicAccessWhenBehindVnet: {
        serializedName: "properties.allowPublicAccessWhenBehindVnet",
        type: {
          name: "Boolean"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      sharedPrivateLinkResources: {
        serializedName: "properties.sharedPrivateLinkResources",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SharedPrivateLinkResource" }
          }
        }
      }
    }
  }
};

export const EncryptionProperty: coreHttp.CompositeMapper = {
  serializedName: "EncryptionProperty",
  type: {
    name: "Composite",
    className: "EncryptionProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyVaultArmId: {
        serializedName: "keyVaultArmId",
        required: true,
        type: {
          name: "String"
        }
      },
      keyIdentifier: {
        serializedName: "keyIdentifier",
        required: true,
        type: {
          name: "String"
        }
      },
      identityClientId: {
        serializedName: "identityClientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreHttp.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedPrivateLinkResource: coreHttp.CompositeMapper = {
  serializedName: "SharedPrivateLinkResource",
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requestMessage: {
        serializedName: "properties.requestMessage",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "WorkspaceUpdateParameters",
  type: {
    name: "Composite",
    className: "WorkspaceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListAmlUserFeatureResult: coreHttp.CompositeMapper = {
  serializedName: "ListAmlUserFeatureResult",
  type: {
    name: "Composite",
    className: "ListAmlUserFeatureResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AmlUserFeature" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlUserFeature: coreHttp.CompositeMapper = {
  serializedName: "AmlUserFeature",
  type: {
    name: "Composite",
    className: "AmlUserFeature",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceListResult: coreHttp.CompositeMapper = {
  serializedName: "WorkspaceListResult",
  type: {
    name: "Composite",
    className: "WorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Workspace" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListWorkspaceKeysResult: coreHttp.CompositeMapper = {
  serializedName: "ListWorkspaceKeysResult",
  type: {
    name: "Composite",
    className: "ListWorkspaceKeysResult",
    modelProperties: {
      userStorageKey: {
        serializedName: "userStorageKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userStorageResourceId: {
        serializedName: "userStorageResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      appInsightsInstrumentationKey: {
        serializedName: "appInsightsInstrumentationKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containerRegistryCredentials: {
        serializedName: "containerRegistryCredentials",
        type: {
          name: "Composite",
          className: "RegistryListCredentialsResult"
        }
      }
    }
  }
};

export const RegistryListCredentialsResult: coreHttp.CompositeMapper = {
  serializedName: "RegistryListCredentialsResult",
  type: {
    name: "Composite",
    className: "RegistryListCredentialsResult",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Password" } }
        }
      }
    }
  }
};

export const Password: coreHttp.CompositeMapper = {
  serializedName: "Password",
  type: {
    name: "Composite",
    className: "Password",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListUsagesResult: coreHttp.CompositeMapper = {
  serializedName: "ListUsagesResult",
  type: {
    name: "Composite",
    className: "ListUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Usage" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: coreHttp.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        defaultValue: "Count",
        serializedName: "unit",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreHttp.CompositeMapper = {
  serializedName: "UsageName",
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineSizeListResult: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineSizeListResult",
  type: {
    name: "Composite",
    className: "VirtualMachineSizeListResult",
    modelProperties: {
      amlCompute: {
        serializedName: "amlCompute",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualMachineSize" }
          }
        }
      }
    }
  }
};

export const VirtualMachineSize: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineSize",
  type: {
    name: "Composite",
    className: "VirtualMachineSize",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCPUs: {
        serializedName: "vCPUs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      gpus: {
        serializedName: "gpus",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      osVhdSizeMB: {
        serializedName: "osVhdSizeMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxResourceVolumeMB: {
        serializedName: "maxResourceVolumeMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memoryGB: {
        serializedName: "memoryGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lowPriorityCapable: {
        serializedName: "lowPriorityCapable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      premiumIO: {
        serializedName: "premiumIO",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const QuotaUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "QuotaUpdateParameters",
  type: {
    name: "Composite",
    className: "QuotaUpdateParameters",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "QuotaBaseProperties" }
          }
        }
      }
    }
  }
};

export const QuotaBaseProperties: coreHttp.CompositeMapper = {
  serializedName: "QuotaBaseProperties",
  type: {
    name: "Composite",
    className: "QuotaBaseProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        defaultValue: "Count",
        serializedName: "unit",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateWorkspaceQuotasResult: coreHttp.CompositeMapper = {
  serializedName: "UpdateWorkspaceQuotasResult",
  type: {
    name: "Composite",
    className: "UpdateWorkspaceQuotasResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "UpdateWorkspaceQuotas" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateWorkspaceQuotas: coreHttp.CompositeMapper = {
  serializedName: "UpdateWorkspaceQuotas",
  type: {
    name: "Composite",
    className: "UpdateWorkspaceQuotas",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        defaultValue: "Count",
        serializedName: "unit",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListWorkspaceQuotas: coreHttp.CompositeMapper = {
  serializedName: "ListWorkspaceQuotas",
  type: {
    name: "Composite",
    className: "ListWorkspaceQuotas",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceQuota" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceQuota: coreHttp.CompositeMapper = {
  serializedName: "ResourceQuota",
  type: {
    name: "Composite",
    className: "ResourceQuota",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        defaultValue: "Count",
        serializedName: "unit",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceName: coreHttp.CompositeMapper = {
  serializedName: "ResourceName",
  type: {
    name: "Composite",
    className: "ResourceName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PaginatedComputeResourcesList: coreHttp.CompositeMapper = {
  serializedName: "PaginatedComputeResourcesList",
  type: {
    name: "Composite",
    className: "PaginatedComputeResourcesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ComputeResource" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeResource: coreHttp.CompositeMapper = {
  serializedName: "ComputeResource",
  type: {
    name: "Composite",
    className: "ComputeResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Compute"
        }
      }
    }
  }
};

export const Compute: coreHttp.CompositeMapper = {
  serializedName: "Compute",
  type: {
    name: "Composite",
    className: "Compute",
    uberParent: "Compute",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        required: true,
        type: {
          name: "String"
        }
      },
      computeLocation: {
        serializedName: "computeLocation",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      modifiedOn: {
        serializedName: "modifiedOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      provisioningErrors: {
        serializedName: "provisioningErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineLearningServiceError"
            }
          }
        }
      },
      isAttachedCompute: {
        serializedName: "isAttachedCompute",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ClusterUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "ClusterUpdateParameters",
  type: {
    name: "Composite",
    className: "ClusterUpdateParameters",
    modelProperties: {
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      }
    }
  }
};

export const ScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "ScaleSettings",
  type: {
    name: "Composite",
    className: "ScaleSettings",
    modelProperties: {
      maxNodeCount: {
        serializedName: "maxNodeCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      minNodeCount: {
        serializedName: "minNodeCount",
        type: {
          name: "Number"
        }
      },
      nodeIdleTimeBeforeScaleDown: {
        serializedName: "nodeIdleTimeBeforeScaleDown",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ComputeNodesInformation: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodesInformation",
  type: {
    name: "Composite",
    className: "ComputeNodesInformation",
    uberParent: "ComputeNodesInformation",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        required: true,
        type: {
          name: "String"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlComputeNodesInformation: coreHttp.CompositeMapper = {
  serializedName: "AmlCompute",
  type: {
    name: "Composite",
    className: "AmlComputeNodesInformation",
    uberParent: "ComputeNodesInformation",
    polymorphicDiscriminator:
      ComputeNodesInformation.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeNodesInformation.type.modelProperties,
      nodes: {
        serializedName: "nodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AmlComputeNodeInformation" }
          }
        }
      }
    }
  }
};

export const AmlComputeNodeInformation: coreHttp.CompositeMapper = {
  serializedName: "AmlCompute",
  type: {
    name: "Composite",
    className: "AmlComputeNodeInformation",
    modelProperties: {
      nodeId: {
        serializedName: "nodeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodeState: {
        serializedName: "nodeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runId: {
        serializedName: "runId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeSecrets: coreHttp.CompositeMapper = {
  serializedName: "ComputeSecrets",
  type: {
    name: "Composite",
    className: "ComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuListResult: coreHttp.CompositeMapper = {
  serializedName: "SkuListResult",
  type: {
    name: "Composite",
    className: "SkuListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "WorkspaceSku" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceSku: coreHttp.CompositeMapper = {
  serializedName: "WorkspaceSku",
  type: {
    name: "Composite",
    className: "WorkspaceSku",
    modelProperties: {
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "WorkspaceSkuLocationsItem"
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceSkuLocationInfo" }
          }
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SKUCapability" } }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Restriction" } }
        }
      }
    }
  }
};

export const ResourceSkuLocationInfo: coreHttp.CompositeMapper = {
  serializedName: "ResourceSkuLocationInfo",
  type: {
    name: "Composite",
    className: "ResourceSkuLocationInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceSkuLocationInfoZonesItem"
          }
        }
      },
      zoneDetails: {
        serializedName: "zoneDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ResourceSkuZoneDetails" }
          }
        }
      }
    }
  }
};

export const ResourceSkuZoneDetails: coreHttp.CompositeMapper = {
  serializedName: "ResourceSkuZoneDetails",
  type: {
    name: "Composite",
    className: "ResourceSkuZoneDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceSkuZoneDetailsNameItem"
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SKUCapability" } }
        }
      }
    }
  }
};

export const SKUCapability: coreHttp.CompositeMapper = {
  serializedName: "SKUCapability",
  type: {
    name: "Composite",
    className: "SKUCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Restriction: coreHttp.CompositeMapper = {
  serializedName: "Restriction",
  type: {
    name: "Composite",
    className: "Restriction",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "RestrictionValuesItem"
          }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateLinkResource" }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: coreHttp.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PrivateLinkResourcePropertiesRequiredMembersItem"
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "PrivateLinkResourcePropertiesRequiredZoneNamesItem"
          }
        }
      }
    }
  }
};

export const ResourceId: coreHttp.CompositeMapper = {
  serializedName: "ResourceId",
  type: {
    name: "Composite",
    className: "ResourceId",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Aks: coreHttp.CompositeMapper = {
  serializedName: "AKS",
  type: {
    name: "Composite",
    className: "Aks",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AKSProperties"
        }
      }
    }
  }
};

export const AKSProperties: coreHttp.CompositeMapper = {
  serializedName: "AKSProperties",
  type: {
    name: "Composite",
    className: "AKSProperties",
    modelProperties: {
      clusterFqdn: {
        serializedName: "clusterFqdn",
        type: {
          name: "String"
        }
      },
      systemServices: {
        serializedName: "systemServices",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SystemService" } }
        }
      },
      agentCount: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "agentCount",
        type: {
          name: "Number"
        }
      },
      agentVMSize: {
        serializedName: "agentVMSize",
        type: {
          name: "String"
        }
      },
      sslConfiguration: {
        serializedName: "sslConfiguration",
        type: {
          name: "Composite",
          className: "SslConfiguration"
        }
      },
      aksNetworkingConfiguration: {
        serializedName: "aksNetworkingConfiguration",
        type: {
          name: "Composite",
          className: "AksNetworkingConfiguration"
        }
      }
    }
  }
};

export const SystemService: coreHttp.CompositeMapper = {
  serializedName: "SystemService",
  type: {
    name: "Composite",
    className: "SystemService",
    modelProperties: {
      systemServiceType: {
        serializedName: "systemServiceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SslConfiguration: coreHttp.CompositeMapper = {
  serializedName: "SslConfiguration",
  type: {
    name: "Composite",
    className: "SslConfiguration",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      cert: {
        serializedName: "cert",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      cname: {
        serializedName: "cname",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AksNetworkingConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AksNetworkingConfiguration",
  type: {
    name: "Composite",
    className: "AksNetworkingConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      serviceCidr: {
        constraints: {
          Pattern: new RegExp(
            "^([0-9]{1,3}.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$"
          )
        },
        serializedName: "serviceCidr",
        type: {
          name: "String"
        }
      },
      dnsServiceIP: {
        constraints: {
          Pattern: new RegExp(
            "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
          )
        },
        serializedName: "dnsServiceIP",
        type: {
          name: "String"
        }
      },
      dockerBridgeCidr: {
        constraints: {
          Pattern: new RegExp(
            "^([0-9]{1,3}.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$"
          )
        },
        serializedName: "dockerBridgeCidr",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlCompute: coreHttp.CompositeMapper = {
  serializedName: "AmlCompute",
  type: {
    name: "Composite",
    className: "AmlCompute",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AmlComputeProperties"
        }
      }
    }
  }
};

export const AmlComputeProperties: coreHttp.CompositeMapper = {
  serializedName: "AmlComputeProperties",
  type: {
    name: "Composite",
    className: "AmlComputeProperties",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      vmPriority: {
        serializedName: "vmPriority",
        type: {
          name: "String"
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      },
      userAccountCredentials: {
        serializedName: "userAccountCredentials",
        type: {
          name: "Composite",
          className: "UserAccountCredentials"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      remoteLoginPortPublicAccess: {
        defaultValue: "NotSpecified",
        serializedName: "remoteLoginPortPublicAccess",
        type: {
          name: "String"
        }
      },
      allocationState: {
        serializedName: "allocationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allocationStateTransitionTime: {
        serializedName: "allocationStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineLearningServiceError"
            }
          }
        }
      },
      currentNodeCount: {
        serializedName: "currentNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      targetNodeCount: {
        serializedName: "targetNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodeStateCounts: {
        serializedName: "nodeStateCounts",
        type: {
          name: "Composite",
          className: "NodeStateCounts"
        }
      }
    }
  }
};

export const UserAccountCredentials: coreHttp.CompositeMapper = {
  serializedName: "UserAccountCredentials",
  type: {
    name: "Composite",
    className: "UserAccountCredentials",
    modelProperties: {
      adminUserName: {
        serializedName: "adminUserName",
        required: true,
        type: {
          name: "String"
        }
      },
      adminUserSshPublicKey: {
        serializedName: "adminUserSshPublicKey",
        type: {
          name: "String"
        }
      },
      adminUserPassword: {
        serializedName: "adminUserPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeStateCounts: coreHttp.CompositeMapper = {
  serializedName: "NodeStateCounts",
  type: {
    name: "Composite",
    className: "NodeStateCounts",
    modelProperties: {
      idleNodeCount: {
        serializedName: "idleNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      runningNodeCount: {
        serializedName: "runningNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      preparingNodeCount: {
        serializedName: "preparingNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unusableNodeCount: {
        serializedName: "unusableNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      leavingNodeCount: {
        serializedName: "leavingNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      preemptedNodeCount: {
        serializedName: "preemptedNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualMachine: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    className: "VirtualMachine",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VirtualMachineProperties"
        }
      }
    }
  }
};

export const VirtualMachineProperties: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineProperties",
  type: {
    name: "Composite",
    className: "VirtualMachineProperties",
    modelProperties: {
      virtualMachineSize: {
        serializedName: "virtualMachineSize",
        type: {
          name: "String"
        }
      },
      sshPort: {
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const VirtualMachineSshCredentials: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineSshCredentials",
  type: {
    name: "Composite",
    className: "VirtualMachineSshCredentials",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      publicKeyData: {
        serializedName: "publicKeyData",
        type: {
          name: "String"
        }
      },
      privateKeyData: {
        serializedName: "privateKeyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HDInsight: coreHttp.CompositeMapper = {
  serializedName: "HDInsight",
  type: {
    name: "Composite",
    className: "HDInsight",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HDInsightProperties"
        }
      }
    }
  }
};

export const HDInsightProperties: coreHttp.CompositeMapper = {
  serializedName: "HDInsightProperties",
  type: {
    name: "Composite",
    className: "HDInsightProperties",
    modelProperties: {
      sshPort: {
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const DataFactory: coreHttp.CompositeMapper = {
  serializedName: "DataFactory",
  type: {
    name: "Composite",
    className: "DataFactory",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties
    }
  }
};

export const Databricks: coreHttp.CompositeMapper = {
  serializedName: "Databricks",
  type: {
    name: "Composite",
    className: "Databricks",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DatabricksProperties"
        }
      }
    }
  }
};

export const DatabricksProperties: coreHttp.CompositeMapper = {
  serializedName: "DatabricksProperties",
  type: {
    name: "Composite",
    className: "DatabricksProperties",
    modelProperties: {
      databricksAccessToken: {
        serializedName: "databricksAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeAnalytics: coreHttp.CompositeMapper = {
  serializedName: "DataLakeAnalytics",
  type: {
    name: "Composite",
    className: "DataLakeAnalytics",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataLakeAnalyticsProperties"
        }
      }
    }
  }
};

export const DataLakeAnalyticsProperties: coreHttp.CompositeMapper = {
  serializedName: "DataLakeAnalyticsProperties",
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsProperties",
    modelProperties: {
      dataLakeStoreAccountName: {
        serializedName: "dataLakeStoreAccountName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicePrincipalCredentials: coreHttp.CompositeMapper = {
  serializedName: "ServicePrincipalCredentials",
  type: {
    name: "Composite",
    className: "ServicePrincipalCredentials",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AksComputeSecrets: coreHttp.CompositeMapper = {
  serializedName: "AKS",
  type: {
    name: "Composite",
    className: "AksComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      userKubeConfig: {
        serializedName: "userKubeConfig",
        type: {
          name: "String"
        }
      },
      adminKubeConfig: {
        serializedName: "adminKubeConfig",
        type: {
          name: "String"
        }
      },
      imagePullSecretName: {
        serializedName: "imagePullSecretName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineSecrets: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    className: "VirtualMachineSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const DatabricksComputeSecrets: coreHttp.CompositeMapper = {
  serializedName: "Databricks",
  type: {
    name: "Composite",
    className: "DatabricksComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      databricksAccessToken: {
        serializedName: "databricksAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  Compute: Compute,
  ComputeNodesInformation: ComputeNodesInformation,
  "ComputeNodesInformation.AmlCompute": AmlComputeNodesInformation,
  ComputeSecrets: ComputeSecrets,
  "Compute.AKS": Aks,
  "Compute.AmlCompute": AmlCompute,
  "Compute.VirtualMachine": VirtualMachine,
  "Compute.HDInsight": HDInsight,
  "Compute.DataFactory": DataFactory,
  "Compute.Databricks": Databricks,
  "Compute.DataLakeAnalytics": DataLakeAnalytics,
  "ComputeSecrets.AKS": AksComputeSecrets,
  "ComputeSecrets.VirtualMachine": VirtualMachineSecrets,
  "ComputeSecrets.Databricks": DatabricksComputeSecrets
};
