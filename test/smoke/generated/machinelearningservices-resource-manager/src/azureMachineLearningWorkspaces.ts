/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { AzureMachineLearningWorkspacesContext } from "./azureMachineLearningWorkspacesContext";
import {
  AzureMachineLearningWorkspacesListSkusResponse,
  AzureMachineLearningWorkspacesListSkusNextResponse
} from "./models";

class AzureMachineLearningWorkspaces extends AzureMachineLearningWorkspacesContext {
  /**
   * Initializes a new instance of the AzureMachineLearningWorkspaces class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Azure subscription identifier.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.AzureMachineLearningWorkspacesOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.workspaces = new operations.Workspaces(this);
    this.workspaceFeatures = new operations.WorkspaceFeatures(this);
    this.usages = new operations.Usages(this);
    this.virtualMachineSizes = new operations.VirtualMachineSizes(this);
    this.quotas = new operations.Quotas(this);
    this.machineLearningCompute = new operations.MachineLearningCompute(this);
    this.privateEndpointConnections = new operations.PrivateEndpointConnections(
      this
    );
    this.privateLinkResources = new operations.PrivateLinkResources(this);
  }

  /**
   * Lists all skus with associated features
   * @param options The options parameters.
   */
  listSkus(
    options?: coreHttp.OperationOptions
  ): Promise<AzureMachineLearningWorkspacesListSkusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      listSkusOperationSpec
    ) as Promise<AzureMachineLearningWorkspacesListSkusResponse>;
  }

  /**
   * ListSkusNext
   * @param nextLink The nextLink from the previous successful call to the ListSkus method.
   * @param options The options parameters.
   */
  listSkusNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<AzureMachineLearningWorkspacesListSkusNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { nextLink, options: operationOptions },
      listSkusNextOperationSpec
    ) as Promise<AzureMachineLearningWorkspacesListSkusNextResponse>;
  }

  operations: operations.Operations;
  workspaces: operations.Workspaces;
  workspaceFeatures: operations.WorkspaceFeatures;
  usages: operations.Usages;
  virtualMachineSizes: operations.VirtualMachineSizes;
  quotas: operations.Quotas;
  machineLearningCompute: operations.MachineLearningCompute;
  privateEndpointConnections: operations.PrivateEndpointConnections;
  privateLinkResources: operations.PrivateLinkResources;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listSkusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/workspaces/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuListResult
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listSkusNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuListResult
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink4
  ],
  serializer
};

// Operation Specifications

export {
  AzureMachineLearningWorkspaces,
  AzureMachineLearningWorkspacesContext,
  Models as AzureMachineLearningWorkspacesModels,
  Mappers as AzureMachineLearningWorkspacesMappers
};
export * from "./operations";
