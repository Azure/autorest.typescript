/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    xmlName: "$host",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const appId: coreHttp.OperationURLParameter = {
  parameterPath: "appId",
  mapper: {
    serializedName: "appId",
    required: true,
    xmlName: "appId",
    type: {
      name: "String"
    }
  }
};

export const metricId: coreHttp.OperationURLParameter = {
  parameterPath: "metricId",
  mapper: {
    serializedName: "metricId",
    required: true,
    xmlName: "metricId",
    type: {
      name: "String"
    }
  }
};

export const timespan: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "timespan"],
  mapper: {
    serializedName: "timespan",
    xmlName: "timespan",
    type: {
      name: "String"
    }
  }
};

export const interval: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "interval"],
  mapper: {
    serializedName: "interval",
    xmlName: "interval",
    type: {
      name: "TimeSpan"
    }
  }
};

export const aggregation: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "aggregation"],
  mapper: {
    constraints: {
      MinItems: 1
    },
    serializedName: "aggregation",
    xmlName: "aggregation",
    xmlElementName: "MetricsAggregation",
    type: {
      name: "Sequence",
      element: {
        type: { name: "String" },
        serializedName: "MetricsAggregation"
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const segment: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "segment"],
  mapper: {
    constraints: {
      MinItems: 1
    },
    serializedName: "segment",
    xmlName: "segment",
    xmlElementName: "MetricsSegment",
    type: {
      name: "Sequence",
      element: { type: { name: "String" }, serializedName: "MetricsSegment" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "top",
    xmlName: "top",
    type: {
      name: "Number"
    }
  }
};

export const orderby: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "orderby",
    xmlName: "orderby",
    type: {
      name: "String"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "filter",
    xmlName: "filter",
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const body: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    xmlName: "body",
    xmlElementName: "MetricsPostBodySchema",
    type: {
      name: "Sequence",
      element: {
        type: { name: "Composite", className: "MetricsPostBodySchema" }
      }
    }
  }
};

export const eventType: coreHttp.OperationURLParameter = {
  parameterPath: "eventType",
  mapper: {
    serializedName: "eventType",
    required: true,
    xmlName: "eventType",
    type: {
      name: "String"
    }
  }
};

export const timespan1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "timespan"],
  mapper: {
    serializedName: "timespan",
    xmlName: "timespan",
    type: {
      name: "String"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    xmlName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const search: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "search"],
  mapper: {
    serializedName: "$search",
    xmlName: "$search",
    type: {
      name: "String"
    }
  }
};

export const orderby1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    xmlName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const select: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$select",
    xmlName: "$select",
    type: {
      name: "String"
    }
  }
};

export const skip: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "$skip",
    xmlName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const top1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    xmlName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const format: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "format"],
  mapper: {
    serializedName: "$format",
    xmlName: "$format",
    type: {
      name: "String"
    }
  }
};

export const count: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "count"],
  mapper: {
    serializedName: "$count",
    xmlName: "$count",
    type: {
      name: "Boolean"
    }
  }
};

export const apply: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "apply"],
  mapper: {
    serializedName: "$apply",
    xmlName: "$apply",
    type: {
      name: "String"
    }
  }
};

export const eventId: coreHttp.OperationURLParameter = {
  parameterPath: "eventId",
  mapper: {
    serializedName: "eventId",
    required: true,
    xmlName: "eventId",
    type: {
      name: "String"
    }
  }
};

export const body1: coreHttp.OperationParameter = {
  parameterPath: "body",
  mapper: Mappers.QueryBody
};
