/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const MetricsResult: coreHttp.CompositeMapper = {
  serializedName: "MetricsResult",
  type: {
    name: "Composite",
    className: "MetricsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "Composite",
          className: "MetricsResultInfo"
        }
      }
    }
  }
};

export const MetricsResultInfo: coreHttp.CompositeMapper = {
  serializedName: "MetricsResultInfo",
  type: {
    name: "Composite",
    className: "MetricsResultInfo",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      start: {
        serializedName: "start",
        xmlName: "start",
        type: {
          name: "String"
        }
      },
      end: {
        serializedName: "end",
        xmlName: "end",
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "interval",
        xmlName: "interval",
        type: {
          name: "TimeSpan"
        }
      },
      segments: {
        serializedName: "segments",
        xmlName: "segments",
        xmlElementName: "MetricsSegmentInfo",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricsSegmentInfo" }
          }
        }
      }
    }
  }
};

export const MetricsSegmentInfo: coreHttp.CompositeMapper = {
  serializedName: "MetricsSegmentInfo",
  type: {
    name: "Composite",
    className: "MetricsSegmentInfo",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      start: {
        serializedName: "start",
        xmlName: "start",
        type: {
          name: "String"
        }
      },
      end: {
        serializedName: "end",
        xmlName: "end",
        type: {
          name: "String"
        }
      },
      segments: {
        serializedName: "segments",
        xmlName: "segments",
        xmlElementName: "MetricsSegmentInfo",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricsSegmentInfo" }
          }
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        xmlName: "error",
        type: {
          name: "Composite",
          className: "ErrorInfo"
        }
      }
    }
  }
};

export const ErrorInfo: coreHttp.CompositeMapper = {
  serializedName: "ErrorInfo",
  type: {
    name: "Composite",
    className: "ErrorInfo",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        xmlName: "details",
        xmlElementName: "ErrorDetail",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorDetail" } }
        }
      },
      innererror: {
        serializedName: "innererror",
        xmlName: "innererror",
        type: {
          name: "Composite",
          className: "ErrorInfo"
        }
      },
      additionalProperties: {
        serializedName: "additionalProperties",
        xmlName: "additionalProperties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const ErrorDetail: coreHttp.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        xmlName: "target",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      },
      resources: {
        serializedName: "resources",
        xmlName: "resources",
        xmlElementName: "ErrorDetailResourcesItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ErrorDetailResourcesItem"
          }
        }
      },
      additionalProperties: {
        serializedName: "additionalProperties",
        xmlName: "additionalProperties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const MetricsPostBodySchema: coreHttp.CompositeMapper = {
  serializedName: "MetricsPostBodySchema",
  type: {
    name: "Composite",
    className: "MetricsPostBodySchema",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        xmlName: "parameters",
        type: {
          name: "Composite",
          className: "MetricsPostBodySchemaParameters"
        }
      }
    }
  }
};

export const MetricsPostBodySchemaParameters: coreHttp.CompositeMapper = {
  serializedName: "MetricsPostBodySchemaParameters",
  type: {
    name: "Composite",
    className: "MetricsPostBodySchemaParameters",
    modelProperties: {
      metricId: {
        serializedName: "metricId",
        required: true,
        xmlName: "metricId",
        type: {
          name: "String"
        }
      },
      timespan: {
        serializedName: "timespan",
        xmlName: "timespan",
        type: {
          name: "String"
        }
      },
      aggregation: {
        constraints: {
          MinItems: 1
        },
        serializedName: "aggregation",
        xmlName: "aggregation",
        xmlElementName: "MetricsAggregation",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetricsAggregation"
          }
        }
      },
      interval: {
        serializedName: "interval",
        xmlName: "interval",
        type: {
          name: "TimeSpan"
        }
      },
      segment: {
        constraints: {
          MinItems: 1
        },
        serializedName: "segment",
        xmlName: "segment",
        xmlElementName: "MetricsSegment",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetricsSegment"
          }
        }
      },
      top: {
        serializedName: "top",
        xmlName: "top",
        type: {
          name: "Number"
        }
      },
      orderby: {
        serializedName: "orderby",
        xmlName: "orderby",
        type: {
          name: "String"
        }
      },
      filter: {
        serializedName: "filter",
        xmlName: "filter",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricsResultsItem: coreHttp.CompositeMapper = {
  serializedName: "MetricsResultsItem",
  type: {
    name: "Composite",
    className: "MetricsResultsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        xmlName: "status",
        type: {
          name: "Number"
        }
      },
      body: {
        serializedName: "body",
        xmlName: "body",
        type: {
          name: "Composite",
          className: "MetricsResult"
        }
      }
    }
  }
};

export const EventsResults: coreHttp.CompositeMapper = {
  serializedName: "EventsResults",
  type: {
    name: "Composite",
    className: "EventsResults",
    modelProperties: {
      odataContext: {
        serializedName: "@odata\\.context",
        xmlName: "@odata\\.context",
        type: {
          name: "String"
        }
      },
      aiMessages: {
        serializedName: "@ai\\.messages",
        xmlName: "@ai\\.messages",
        xmlElementName: "ErrorInfo",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorInfo" } }
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        xmlElementName: "EventsResultData",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EventsResultData" }
          }
        }
      }
    }
  }
};

export const EventsResultData: coreHttp.CompositeMapper = {
  serializedName: "EventsResultData",
  type: {
    name: "Composite",
    className: "EventsResultData",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        xmlName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      customDimensions: {
        serializedName: "customDimensions",
        xmlName: "customDimensions",
        type: {
          name: "Composite",
          className: "EventsResultDataCustomDimensions"
        }
      },
      customMeasurements: {
        serializedName: "customMeasurements",
        xmlName: "customMeasurements",
        type: {
          name: "Composite",
          className: "EventsResultDataCustomMeasurements"
        }
      },
      operation: {
        serializedName: "operation",
        xmlName: "operation",
        type: {
          name: "Composite",
          className: "EventsOperationInfo"
        }
      },
      session: {
        serializedName: "session",
        xmlName: "session",
        type: {
          name: "Composite",
          className: "EventsSessionInfo"
        }
      },
      user: {
        serializedName: "user",
        xmlName: "user",
        type: {
          name: "Composite",
          className: "EventsUserInfo"
        }
      },
      cloud: {
        serializedName: "cloud",
        xmlName: "cloud",
        type: {
          name: "Composite",
          className: "EventsCloudInfo"
        }
      },
      ai: {
        serializedName: "ai",
        xmlName: "ai",
        type: {
          name: "Composite",
          className: "EventsAiInfo"
        }
      },
      application: {
        serializedName: "application",
        xmlName: "application",
        type: {
          name: "Composite",
          className: "EventsApplicationInfo"
        }
      },
      client: {
        serializedName: "client",
        xmlName: "client",
        type: {
          name: "Composite",
          className: "EventsClientInfo"
        }
      }
    }
  }
};

export const EventsResultDataCustomDimensions: coreHttp.CompositeMapper = {
  serializedName: "EventsResultDataCustomDimensions",
  type: {
    name: "Composite",
    className: "EventsResultDataCustomDimensions",
    modelProperties: {
      additionalProperties: {
        serializedName: "additionalProperties",
        xmlName: "additionalProperties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const EventsResultDataCustomMeasurements: coreHttp.CompositeMapper = {
  serializedName: "EventsResultDataCustomMeasurements",
  type: {
    name: "Composite",
    className: "EventsResultDataCustomMeasurements",
    modelProperties: {
      additionalProperties: {
        serializedName: "additionalProperties",
        xmlName: "additionalProperties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const EventsOperationInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsOperationInfo",
  type: {
    name: "Composite",
    className: "EventsOperationInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      parentId: {
        serializedName: "parentId",
        xmlName: "parentId",
        type: {
          name: "String"
        }
      },
      syntheticSource: {
        serializedName: "syntheticSource",
        xmlName: "syntheticSource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsSessionInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsSessionInfo",
  type: {
    name: "Composite",
    className: "EventsSessionInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsUserInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsUserInfo",
  type: {
    name: "Composite",
    className: "EventsUserInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      accountId: {
        serializedName: "accountId",
        xmlName: "accountId",
        type: {
          name: "String"
        }
      },
      authenticatedId: {
        serializedName: "authenticatedId",
        xmlName: "authenticatedId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsCloudInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsCloudInfo",
  type: {
    name: "Composite",
    className: "EventsCloudInfo",
    modelProperties: {
      roleName: {
        serializedName: "roleName",
        xmlName: "roleName",
        type: {
          name: "String"
        }
      },
      roleInstance: {
        serializedName: "roleInstance",
        xmlName: "roleInstance",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsAiInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsAiInfo",
  type: {
    name: "Composite",
    className: "EventsAiInfo",
    modelProperties: {
      iKey: {
        serializedName: "iKey",
        xmlName: "iKey",
        type: {
          name: "String"
        }
      },
      appName: {
        serializedName: "appName",
        xmlName: "appName",
        type: {
          name: "String"
        }
      },
      appId: {
        serializedName: "appId",
        xmlName: "appId",
        type: {
          name: "String"
        }
      },
      sdkVersion: {
        serializedName: "sdkVersion",
        xmlName: "sdkVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsApplicationInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsApplicationInfo",
  type: {
    name: "Composite",
    className: "EventsApplicationInfo",
    modelProperties: {
      version: {
        serializedName: "version",
        xmlName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsClientInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsClientInfo",
  type: {
    name: "Composite",
    className: "EventsClientInfo",
    modelProperties: {
      model: {
        serializedName: "model",
        xmlName: "model",
        type: {
          name: "String"
        }
      },
      os: {
        serializedName: "os",
        xmlName: "os",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      browser: {
        serializedName: "browser",
        xmlName: "browser",
        type: {
          name: "String"
        }
      },
      ip: {
        serializedName: "ip",
        xmlName: "ip",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        xmlName: "city",
        type: {
          name: "String"
        }
      },
      stateOrProvince: {
        serializedName: "stateOrProvince",
        xmlName: "stateOrProvince",
        type: {
          name: "String"
        }
      },
      countryOrRegion: {
        serializedName: "countryOrRegion",
        xmlName: "countryOrRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryBody: coreHttp.CompositeMapper = {
  serializedName: "QueryBody",
  type: {
    name: "Composite",
    className: "QueryBody",
    modelProperties: {
      query: {
        serializedName: "query",
        required: true,
        xmlName: "query",
        type: {
          name: "String"
        }
      },
      timespan: {
        serializedName: "timespan",
        xmlName: "timespan",
        type: {
          name: "String"
        }
      },
      applications: {
        serializedName: "applications",
        xmlName: "applications",
        xmlElementName: "ApplicationsParamItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ApplicationsParamItem"
          }
        }
      }
    }
  }
};

export const QueryResults: coreHttp.CompositeMapper = {
  serializedName: "QueryResults",
  type: {
    name: "Composite",
    className: "QueryResults",
    modelProperties: {
      tables: {
        serializedName: "tables",
        required: true,
        xmlName: "tables",
        xmlElementName: "Table",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Table" } }
        }
      }
    }
  }
};

export const Table: coreHttp.CompositeMapper = {
  serializedName: "Table",
  type: {
    name: "Composite",
    className: "Table",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      columns: {
        serializedName: "columns",
        required: true,
        xmlName: "columns",
        xmlElementName: "Column",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Column" } }
        }
      },
      rows: {
        serializedName: "rows",
        required: true,
        xmlName: "rows",
        xmlElementName: "TableRowsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: { type: { name: "any" }, serializedName: "any" }
            },
            serializedName: "TableRowsItem"
          }
        }
      }
    }
  }
};

export const Column: coreHttp.CompositeMapper = {
  serializedName: "Column",
  type: {
    name: "Composite",
    className: "Column",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetadataResults: coreHttp.CompositeMapper = {
  serializedName: "MetadataResults",
  type: {
    name: "Composite",
    className: "MetadataResults",
    modelProperties: {
      tableGroups: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "tableGroups",
        xmlName: "tableGroups",
        xmlElementName: "MetadataTableGroup",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetadataTableGroup" }
          }
        }
      },
      tables: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "tables",
        xmlName: "tables",
        xmlElementName: "MetadataTable",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetadataTable" } }
        }
      },
      functions: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "functions",
        xmlName: "functions",
        xmlElementName: "MetadataFunction",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetadataFunction" }
          }
        }
      },
      applications: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "applications",
        xmlName: "applications",
        xmlElementName: "MetadataApplication",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetadataApplication" }
          }
        }
      }
    }
  }
};

export const MetadataTableGroup: coreHttp.CompositeMapper = {
  serializedName: "MetadataTableGroup",
  type: {
    name: "Composite",
    className: "MetadataTableGroup",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        xmlName: "source",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        xmlName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      tables: {
        serializedName: "tables",
        xmlName: "tables",
        xmlElementName: "MetadataTableGroupTablesItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetadataTableGroupTablesItem"
          }
        }
      }
    }
  }
};

export const MetadataTable: coreHttp.CompositeMapper = {
  serializedName: "MetadataTable",
  type: {
    name: "Composite",
    className: "MetadataTable",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      timespanColumn: {
        serializedName: "timespanColumn",
        xmlName: "timespanColumn",
        type: {
          name: "String"
        }
      },
      columns: {
        serializedName: "columns",
        xmlName: "columns",
        xmlElementName: "MetadataTableColumnsItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetadataTableColumnsItem" }
          }
        }
      }
    }
  }
};

export const MetadataTableColumnsItem: coreHttp.CompositeMapper = {
  serializedName: "MetadataTableColumnsItem",
  type: {
    name: "Composite",
    className: "MetadataTableColumnsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      isPreferredFacet: {
        serializedName: "isPreferredFacet",
        xmlName: "isPreferredFacet",
        type: {
          name: "Boolean"
        }
      },
      source: {
        serializedName: "source",
        xmlName: "source",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const MetadataFunction: coreHttp.CompositeMapper = {
  serializedName: "MetadataFunction",
  type: {
    name: "Composite",
    className: "MetadataFunction",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        xmlName: "parameters",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        xmlName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        required: true,
        xmlName: "body",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetadataApplication: coreHttp.CompositeMapper = {
  serializedName: "MetadataApplication",
  type: {
    name: "Composite",
    className: "MetadataApplication",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        required: true,
        xmlName: "resourceId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "region",
        required: true,
        xmlName: "region",
        type: {
          name: "String"
        }
      },
      tables: {
        serializedName: "tables",
        xmlName: "tables",
        xmlElementName: "MetadataApplicationTablesItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetadataApplicationTablesItem"
          }
        }
      },
      functions: {
        serializedName: "functions",
        xmlName: "functions",
        xmlElementName: "MetadataApplicationFunctionsItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetadataApplicationFunctionsItem"
          }
        }
      },
      tableGroups: {
        serializedName: "tableGroups",
        xmlName: "tableGroups",
        xmlElementName: "MetadataApplicationTableGroupsItem",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetadataApplicationTableGroupsItem"
          }
        }
      }
    }
  }
};

export const EventsResult: coreHttp.CompositeMapper = {
  serializedName: "EventsResult",
  type: {
    name: "Composite",
    className: "EventsResult",
    modelProperties: {
      aiMessages: {
        serializedName: "@ai\\.messages",
        xmlName: "@ai\\.messages",
        xmlElementName: "ErrorInfo",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ErrorInfo" } }
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "Composite",
          className: "EventsResultData"
        }
      }
    }
  }
};

export const EventsTraceResult: coreHttp.CompositeMapper = {
  serializedName: "trace",
  type: {
    name: "Composite",
    className: "EventsTraceResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      trace: {
        serializedName: "trace",
        xmlName: "trace",
        type: {
          name: "Composite",
          className: "EventsTraceInfo"
        }
      }
    }
  }
};

export const EventsTraceInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsTraceInfo",
  type: {
    name: "Composite",
    className: "EventsTraceInfo",
    modelProperties: {
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      severityLevel: {
        serializedName: "severityLevel",
        xmlName: "severityLevel",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EventsCustomEventResult: coreHttp.CompositeMapper = {
  serializedName: "customEvent",
  type: {
    name: "Composite",
    className: "EventsCustomEventResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      customEvent: {
        serializedName: "customEvent",
        xmlName: "customEvent",
        type: {
          name: "Composite",
          className: "EventsCustomEventInfo"
        }
      }
    }
  }
};

export const EventsCustomEventInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsCustomEventInfo",
  type: {
    name: "Composite",
    className: "EventsCustomEventInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsPageViewResult: coreHttp.CompositeMapper = {
  serializedName: "pageView",
  type: {
    name: "Composite",
    className: "EventsPageViewResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      pageView: {
        serializedName: "pageView",
        xmlName: "pageView",
        type: {
          name: "Composite",
          className: "EventsPageViewInfo"
        }
      }
    }
  }
};

export const EventsPageViewInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsPageViewInfo",
  type: {
    name: "Composite",
    className: "EventsPageViewInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        xmlName: "duration",
        type: {
          name: "String"
        }
      },
      performanceBucket: {
        serializedName: "performanceBucket",
        xmlName: "performanceBucket",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsBrowserTimingResult: coreHttp.CompositeMapper = {
  serializedName: "browserTiming",
  type: {
    name: "Composite",
    className: "EventsBrowserTimingResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      browserTiming: {
        serializedName: "browserTiming",
        xmlName: "browserTiming",
        type: {
          name: "Composite",
          className: "EventsBrowserTimingInfo"
        }
      },
      clientPerformance: {
        serializedName: "clientPerformance",
        xmlName: "clientPerformance",
        type: {
          name: "Composite",
          className: "EventsClientPerformanceInfo"
        }
      }
    }
  }
};

export const EventsBrowserTimingInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsBrowserTimingInfo",
  type: {
    name: "Composite",
    className: "EventsBrowserTimingInfo",
    modelProperties: {
      urlPath: {
        serializedName: "urlPath",
        xmlName: "urlPath",
        type: {
          name: "String"
        }
      },
      urlHost: {
        serializedName: "urlHost",
        xmlName: "urlHost",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      totalDuration: {
        serializedName: "totalDuration",
        xmlName: "totalDuration",
        type: {
          name: "Number"
        }
      },
      performanceBucket: {
        serializedName: "performanceBucket",
        xmlName: "performanceBucket",
        type: {
          name: "String"
        }
      },
      networkDuration: {
        serializedName: "networkDuration",
        xmlName: "networkDuration",
        type: {
          name: "Number"
        }
      },
      sendDuration: {
        serializedName: "sendDuration",
        xmlName: "sendDuration",
        type: {
          name: "Number"
        }
      },
      receiveDuration: {
        serializedName: "receiveDuration",
        xmlName: "receiveDuration",
        type: {
          name: "Number"
        }
      },
      processingDuration: {
        serializedName: "processingDuration",
        xmlName: "processingDuration",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EventsClientPerformanceInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsClientPerformanceInfo",
  type: {
    name: "Composite",
    className: "EventsClientPerformanceInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsRequestResult: coreHttp.CompositeMapper = {
  serializedName: "request",
  type: {
    name: "Composite",
    className: "EventsRequestResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      request: {
        serializedName: "request",
        xmlName: "request",
        type: {
          name: "Composite",
          className: "EventsRequestInfo"
        }
      }
    }
  }
};

export const EventsRequestInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsRequestInfo",
  type: {
    name: "Composite",
    className: "EventsRequestInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      success: {
        serializedName: "success",
        xmlName: "success",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        xmlName: "duration",
        type: {
          name: "Number"
        }
      },
      performanceBucket: {
        serializedName: "performanceBucket",
        xmlName: "performanceBucket",
        type: {
          name: "String"
        }
      },
      resultCode: {
        serializedName: "resultCode",
        xmlName: "resultCode",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        xmlName: "source",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsDependencyResult: coreHttp.CompositeMapper = {
  serializedName: "dependency",
  type: {
    name: "Composite",
    className: "EventsDependencyResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      dependency: {
        serializedName: "dependency",
        xmlName: "dependency",
        type: {
          name: "Composite",
          className: "EventsDependencyInfo"
        }
      }
    }
  }
};

export const EventsDependencyInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsDependencyInfo",
  type: {
    name: "Composite",
    className: "EventsDependencyInfo",
    modelProperties: {
      target: {
        serializedName: "target",
        xmlName: "target",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        xmlName: "data",
        type: {
          name: "String"
        }
      },
      success: {
        serializedName: "success",
        xmlName: "success",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        xmlName: "duration",
        type: {
          name: "Number"
        }
      },
      performanceBucket: {
        serializedName: "performanceBucket",
        xmlName: "performanceBucket",
        type: {
          name: "String"
        }
      },
      resultCode: {
        serializedName: "resultCode",
        xmlName: "resultCode",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsExceptionResult: coreHttp.CompositeMapper = {
  serializedName: "exception",
  type: {
    name: "Composite",
    className: "EventsExceptionResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      exception: {
        serializedName: "exception",
        xmlName: "exception",
        type: {
          name: "Composite",
          className: "EventsExceptionInfo"
        }
      }
    }
  }
};

export const EventsExceptionInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsExceptionInfo",
  type: {
    name: "Composite",
    className: "EventsExceptionInfo",
    modelProperties: {
      severityLevel: {
        serializedName: "severityLevel",
        xmlName: "severityLevel",
        type: {
          name: "Number"
        }
      },
      problemId: {
        serializedName: "problemId",
        xmlName: "problemId",
        type: {
          name: "String"
        }
      },
      handledAt: {
        serializedName: "handledAt",
        xmlName: "handledAt",
        type: {
          name: "String"
        }
      },
      assembly: {
        serializedName: "assembly",
        xmlName: "assembly",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        xmlName: "method",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      outerType: {
        serializedName: "outerType",
        xmlName: "outerType",
        type: {
          name: "String"
        }
      },
      outerMethod: {
        serializedName: "outerMethod",
        xmlName: "outerMethod",
        type: {
          name: "String"
        }
      },
      outerAssembly: {
        serializedName: "outerAssembly",
        xmlName: "outerAssembly",
        type: {
          name: "String"
        }
      },
      outerMessage: {
        serializedName: "outerMessage",
        xmlName: "outerMessage",
        type: {
          name: "String"
        }
      },
      innermostType: {
        serializedName: "innermostType",
        xmlName: "innermostType",
        type: {
          name: "String"
        }
      },
      innermostMessage: {
        serializedName: "innermostMessage",
        xmlName: "innermostMessage",
        type: {
          name: "String"
        }
      },
      innermostMethod: {
        serializedName: "innermostMethod",
        xmlName: "innermostMethod",
        type: {
          name: "String"
        }
      },
      innermostAssembly: {
        serializedName: "innermostAssembly",
        xmlName: "innermostAssembly",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        xmlName: "details",
        xmlElementName: "EventsExceptionDetail",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EventsExceptionDetail" }
          }
        }
      }
    }
  }
};

export const EventsExceptionDetail: coreHttp.CompositeMapper = {
  serializedName: "EventsExceptionDetail",
  type: {
    name: "Composite",
    className: "EventsExceptionDetail",
    modelProperties: {
      severityLevel: {
        serializedName: "severityLevel",
        xmlName: "severityLevel",
        type: {
          name: "String"
        }
      },
      outerId: {
        serializedName: "outerId",
        xmlName: "outerId",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      parsedStack: {
        serializedName: "parsedStack",
        xmlName: "parsedStack",
        xmlElementName: "EventsExceptionDetailsParsedStack",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventsExceptionDetailsParsedStack"
            }
          }
        }
      }
    }
  }
};

export const EventsExceptionDetailsParsedStack: coreHttp.CompositeMapper = {
  serializedName: "EventsExceptionDetailsParsedStack",
  type: {
    name: "Composite",
    className: "EventsExceptionDetailsParsedStack",
    modelProperties: {
      assembly: {
        serializedName: "assembly",
        xmlName: "assembly",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        xmlName: "method",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        xmlName: "level",
        type: {
          name: "Number"
        }
      },
      line: {
        serializedName: "line",
        xmlName: "line",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EventsAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "availabilityResult",
  type: {
    name: "Composite",
    className: "EventsAvailabilityResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      availabilityResult: {
        serializedName: "availabilityResult",
        xmlName: "availabilityResult",
        type: {
          name: "Composite",
          className: "EventsAvailabilityResultInfo"
        }
      }
    }
  }
};

export const EventsAvailabilityResultInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsAvailabilityResultInfo",
  type: {
    name: "Composite",
    className: "EventsAvailabilityResultInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      success: {
        serializedName: "success",
        xmlName: "success",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        xmlName: "duration",
        type: {
          name: "Number"
        }
      },
      performanceBucket: {
        serializedName: "performanceBucket",
        xmlName: "performanceBucket",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        xmlName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        xmlName: "size",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsPerformanceCounterResult: coreHttp.CompositeMapper = {
  serializedName: "performanceCounter",
  type: {
    name: "Composite",
    className: "EventsPerformanceCounterResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      performanceCounter: {
        serializedName: "performanceCounter",
        xmlName: "performanceCounter",
        type: {
          name: "Composite",
          className: "EventsPerformanceCounterInfo"
        }
      }
    }
  }
};

export const EventsPerformanceCounterInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsPerformanceCounterInfo",
  type: {
    name: "Composite",
    className: "EventsPerformanceCounterInfo",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        xmlName: "category",
        type: {
          name: "String"
        }
      },
      counter: {
        serializedName: "counter",
        xmlName: "counter",
        type: {
          name: "String"
        }
      },
      instanceName: {
        serializedName: "instanceName",
        xmlName: "instanceName",
        type: {
          name: "String"
        }
      },
      instance: {
        serializedName: "instance",
        xmlName: "instance",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventsCustomMetricResult: coreHttp.CompositeMapper = {
  serializedName: "customMetric",
  type: {
    name: "Composite",
    className: "EventsCustomMetricResult",
    uberParent: "EventsResultData",
    polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventsResultData.type.modelProperties,
      customMetric: {
        serializedName: "customMetric",
        xmlName: "customMetric",
        type: {
          name: "Composite",
          className: "EventsCustomMetricInfo"
        }
      }
    }
  }
};

export const EventsCustomMetricInfo: coreHttp.CompositeMapper = {
  serializedName: "EventsCustomMetricInfo",
  type: {
    name: "Composite",
    className: "EventsCustomMetricInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "Number"
        }
      },
      valueSum: {
        serializedName: "valueSum",
        xmlName: "valueSum",
        type: {
          name: "Number"
        }
      },
      valueCount: {
        serializedName: "valueCount",
        xmlName: "valueCount",
        type: {
          name: "Number"
        }
      },
      valueMin: {
        serializedName: "valueMin",
        xmlName: "valueMin",
        type: {
          name: "Number"
        }
      },
      valueMax: {
        serializedName: "valueMax",
        xmlName: "valueMax",
        type: {
          name: "Number"
        }
      },
      valueStdDev: {
        serializedName: "valueStdDev",
        xmlName: "valueStdDev",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export let discriminators = {
  EventsResultData: EventsResultData,
  "EventsResultData.trace": EventsTraceResult,
  "EventsResultData.customEvent": EventsCustomEventResult,
  "EventsResultData.pageView": EventsPageViewResult,
  "EventsResultData.browserTiming": EventsBrowserTimingResult,
  "EventsResultData.request": EventsRequestResult,
  "EventsResultData.dependency": EventsDependencyResult,
  "EventsResultData.exception": EventsExceptionResult,
  "EventsResultData.availabilityResult": EventsAvailabilityResult,
  "EventsResultData.performanceCounter": EventsPerformanceCounterResult,
  "EventsResultData.customMetric": EventsCustomMetricResult
};
