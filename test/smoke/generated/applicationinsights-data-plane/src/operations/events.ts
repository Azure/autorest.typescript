/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsDataClient } from "../applicationInsightsDataClient";
import {
  EventType,
  EventsGetByTypeOptionalParams,
  EventsGetByTypeResponse,
  EventsGetOptionalParams,
  EventsGetResponse,
  EventsGetOdataMetadataResponse
} from "../models";

/**
 * Class representing a Events.
 */
export class Events {
  private readonly client: ApplicationInsightsDataClient;

  /**
   * Initialize a new instance of the class Events class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsDataClient) {
    this.client = client;
  }

  /**
   * Executes an OData query for events
   * @param appId ID of the application. This is Application ID from the API Access settings blade in the
   *              Azure portal.
   * @param eventType The type of events to query; either a standard event type (`traces`,
   *                  `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or
   *                  `$all` to query across all event types.
   * @param options The options parameters.
   */
  getByType(
    appId: string,
    eventType: EventType,
    options?: EventsGetByTypeOptionalParams
  ): Promise<EventsGetByTypeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { appId, eventType, options: operationOptions },
      getByTypeOperationSpec
    ) as Promise<EventsGetByTypeResponse>;
  }

  /**
   * Gets the data for a single event
   * @param appId ID of the application. This is Application ID from the API Access settings blade in the
   *              Azure portal.
   * @param eventType The type of events to query; either a standard event type (`traces`,
   *                  `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or
   *                  `$all` to query across all event types.
   * @param eventId ID of event.
   * @param options The options parameters.
   */
  get(
    appId: string,
    eventType: EventType,
    eventId: string,
    options?: EventsGetOptionalParams
  ): Promise<EventsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { appId, eventType, eventId, options: operationOptions },
      getOperationSpec
    ) as Promise<EventsGetResponse>;
  }

  /**
   * Gets OData EDMX metadata describing the event data model
   * @param appId ID of the application. This is Application ID from the API Access settings blade in the
   *              Azure portal.
   * @param options The options parameters.
   */
  getOdataMetadata(
    appId: string,
    options?: coreHttp.OperationOptions
  ): Promise<EventsGetOdataMetadataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { appId, options: operationOptions },
      getOdataMetadataOperationSpec
    ) as Promise<EventsGetOdataMetadataResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ true);

const getByTypeOperationSpec: coreHttp.OperationSpec = {
  path: "/apps/{appId}/events/{eventType}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventsResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.timespan1,
    Parameters.filter1,
    Parameters.search,
    Parameters.orderby1,
    Parameters.select,
    Parameters.skip,
    Parameters.top1,
    Parameters.format,
    Parameters.count,
    Parameters.apply
  ],
  urlParameters: [Parameters.$host, Parameters.appId, Parameters.eventType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/apps/{appId}/events/{eventType}/{eventId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventsResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.timespan1],
  urlParameters: [
    Parameters.$host,
    Parameters.appId,
    Parameters.eventType,
    Parameters.eventId
  ],
  serializer
};
const getOdataMetadataOperationSpec: coreHttp.OperationSpec = {
  path: "/apps/{appId}/events/$metadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.appId],
  isXML: true,
  serializer
};
