/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsDataClient } from "../applicationInsightsDataClient";
import {
  MetricId,
  MetricsGetOptionalParams,
  MetricsGetResponse,
  MetricsPostBodySchema,
  MetricsGetMultipleResponse,
  MetricsGetMetadataResponse
} from "../models";

/**
 * Class representing a Metrics.
 */
export class Metrics {
  private readonly client: ApplicationInsightsDataClient;

  /**
   * Initialize a new instance of the class Metrics class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsDataClient) {
    this.client = client;
  }

  /**
   * Gets metric values for a single metric
   * @param appId ID of the application. This is Application ID from the API Access settings blade in the
   *              Azure portal.
   * @param metricId ID of the metric. This is either a standard AI metric, or an application-specific
   *                 custom metric.
   * @param options The options parameters.
   */
  get(
    appId: string,
    metricId: MetricId,
    options?: MetricsGetOptionalParams
  ): Promise<MetricsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { appId, metricId, options: operationOptions },
      getOperationSpec
    ) as Promise<MetricsGetResponse>;
  }

  /**
   * Gets metric values for multiple metrics
   * @param appId ID of the application. This is Application ID from the API Access settings blade in the
   *              Azure portal.
   * @param body The batched metrics query.
   * @param options The options parameters.
   */
  getMultiple(
    appId: string,
    body: MetricsPostBodySchema[],
    options?: coreHttp.OperationOptions
  ): Promise<MetricsGetMultipleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { appId, body, options: operationOptions },
      getMultipleOperationSpec
    ) as Promise<MetricsGetMultipleResponse>;
  }

  /**
   * Gets metadata describing the available metrics
   * @param appId ID of the application. This is Application ID from the API Access settings blade in the
   *              Azure portal.
   * @param options The options parameters.
   */
  getMetadata(
    appId: string,
    options?: coreHttp.OperationOptions
  ): Promise<MetricsGetMetadataResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { appId, options: operationOptions },
      getMetadataOperationSpec
    ) as Promise<MetricsGetMetadataResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/apps/{appId}/metrics/{metricId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricsResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.timespan,
    Parameters.interval,
    Parameters.aggregation,
    Parameters.segment,
    Parameters.top,
    Parameters.orderby,
    Parameters.filter
  ],
  urlParameters: [Parameters.$host, Parameters.appId, Parameters.metricId],
  serializer
};
const getMultipleOperationSpec: coreHttp.OperationSpec = {
  path: "/apps/{appId}/metrics",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricsResultsItem" }
          }
        },
        serializedName: "MetricsResults"
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.$host, Parameters.appId],
  headerParameters: [Parameters.contentType],
  serializer
};
const getMetadataOperationSpec: coreHttp.OperationSpec = {
  path: "/apps/{appId}/metrics/metadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.appId],
  serializer
};
