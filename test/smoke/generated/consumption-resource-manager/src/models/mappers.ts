/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const UsageDetailsListResult: coreHttp.CompositeMapper = {
  serializedName: "UsageDetailsListResult",
  type: {
    name: "Composite",
    className: "UsageDetailsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UsageDetail" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const UsageDetail: coreHttp.CompositeMapper = {
  serializedName: "UsageDetail",
  type: {
    name: "Composite",
    className: "UsageDetail",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplacesListResult: coreHttp.CompositeMapper = {
  serializedName: "MarketplacesListResult",
  type: {
    name: "Composite",
    className: "MarketplacesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Marketplace" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Marketplace: coreHttp.CompositeMapper = {
  serializedName: "Marketplace",
  type: {
    name: "Composite",
    className: "Marketplace",
    modelProperties: {
      ...Resource.type.modelProperties,
      billingPeriodId: {
        serializedName: "properties.billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resourceRate: {
        serializedName: "properties.resourceRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      offerName: {
        serializedName: "properties.offerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      orderNumber: {
        serializedName: "properties.orderNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceName: {
        serializedName: "properties.instanceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceId: {
        serializedName: "properties.instanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consumedQuantity: {
        serializedName: "properties.consumedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unitOfMeasure: {
        serializedName: "properties.unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pretaxCost: {
        serializedName: "properties.pretaxCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isEstimated: {
        serializedName: "properties.isEstimated",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      subscriptionGuid: {
        serializedName: "properties.subscriptionGuid",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      subscriptionName: {
        serializedName: "properties.subscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "properties.accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      departmentName: {
        serializedName: "properties.departmentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consumedService: {
        serializedName: "properties.consumedService",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costCenter: {
        serializedName: "properties.costCenter",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalProperties: {
        serializedName: "properties.additionalProperties",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherName: {
        serializedName: "properties.publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      planName: {
        serializedName: "properties.planName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isRecurringCharge: {
        serializedName: "properties.isRecurringCharge",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BudgetsListResult: coreHttp.CompositeMapper = {
  serializedName: "BudgetsListResult",
  type: {
    name: "Composite",
    className: "BudgetsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Budget" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Budget: coreHttp.CompositeMapper = {
  serializedName: "Budget",
  type: {
    name: "Composite",
    className: "Budget",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      category: {
        serializedName: "properties.category",
        type: {
          name: "String"
        }
      },
      amount: {
        serializedName: "properties.amount",
        type: {
          name: "Number"
        }
      },
      timeGrain: {
        serializedName: "properties.timeGrain",
        type: {
          name: "String"
        }
      },
      timePeriod: {
        serializedName: "timePeriod",
        type: {
          name: "Composite",
          className: "BudgetTimePeriod"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Composite",
          className: "Filters"
        }
      },
      currentSpend: {
        serializedName: "currentSpend",
        type: {
          name: "Composite",
          className: "CurrentSpend"
        }
      },
      notifications: {
        serializedName: "properties.notifications",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Notification" } }
        }
      }
    }
  }
};

export const BudgetTimePeriod: coreHttp.CompositeMapper = {
  serializedName: "BudgetTimePeriod",
  type: {
    name: "Composite",
    className: "BudgetTimePeriod",
    modelProperties: {
      startDate: {
        serializedName: "startDate",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Filters: coreHttp.CompositeMapper = {
  serializedName: "Filters",
  type: {
    name: "Composite",
    className: "Filters",
    modelProperties: {
      resourceGroups: {
        constraints: {
          MaxItems: 10
        },
        serializedName: "resourceGroups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "FiltersResourceGroupsItem"
          }
        }
      },
      resources: {
        constraints: {
          MaxItems: 10
        },
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "FiltersResourcesItem"
          }
        }
      },
      meters: {
        constraints: {
          MaxItems: 10
        },
        serializedName: "meters",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Uuid" },
            serializedName: "FiltersMetersItem"
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: { name: "String" },
                serializedName: "FiltersTagsItemsItem"
              }
            },
            serializedName: "ArrayOfFiltersTagsItemsItem"
          }
        }
      }
    }
  }
};

export const CurrentSpend: coreHttp.CompositeMapper = {
  serializedName: "CurrentSpend",
  type: {
    name: "Composite",
    className: "CurrentSpend",
    modelProperties: {
      amount: {
        serializedName: "amount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Notification: coreHttp.CompositeMapper = {
  serializedName: "Notification",
  type: {
    name: "Composite",
    className: "Notification",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      threshold: {
        serializedName: "threshold",
        required: true,
        type: {
          name: "Number"
        }
      },
      contactEmails: {
        constraints: {
          MinItems: 1,
          MaxItems: 50
        },
        serializedName: "contactEmails",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NotificationContactEmailsItem"
          }
        }
      },
      contactRoles: {
        serializedName: "contactRoles",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NotificationContactRolesItem"
          }
        }
      },
      contactGroups: {
        constraints: {
          MaxItems: 50
        },
        serializedName: "contactGroups",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NotificationContactGroupsItem"
          }
        }
      }
    }
  }
};

export const TagsResult: coreHttp.CompositeMapper = {
  serializedName: "TagsResult",
  type: {
    name: "Composite",
    className: "TagsResult",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      tags: {
        serializedName: "properties.tags",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Tag" } }
        }
      }
    }
  }
};

export const Tag: coreHttp.CompositeMapper = {
  serializedName: "Tag",
  type: {
    name: "Composite",
    className: "Tag",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ChargesListResult: coreHttp.CompositeMapper = {
  serializedName: "ChargesListResult",
  type: {
    name: "Composite",
    className: "ChargesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ChargeSummary" } }
        }
      }
    }
  }
};

export const ChargeSummary: coreHttp.CompositeMapper = {
  serializedName: "ChargeSummary",
  type: {
    name: "Composite",
    className: "ChargeSummary",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Balance: coreHttp.CompositeMapper = {
  serializedName: "Balance",
  type: {
    name: "Composite",
    className: "Balance",
    modelProperties: {
      ...Resource.type.modelProperties,
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      beginningBalance: {
        serializedName: "properties.beginningBalance",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      endingBalance: {
        serializedName: "properties.endingBalance",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      newPurchases: {
        serializedName: "properties.newPurchases",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      adjustments: {
        serializedName: "properties.adjustments",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      utilized: {
        serializedName: "properties.utilized",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serviceOverage: {
        serializedName: "properties.serviceOverage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      chargesBilledSeparately: {
        serializedName: "properties.chargesBilledSeparately",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalOverage: {
        serializedName: "properties.totalOverage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalUsage: {
        serializedName: "properties.totalUsage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      azureMarketplaceServiceCharges: {
        serializedName: "properties.azureMarketplaceServiceCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      billingFrequency: {
        serializedName: "properties.billingFrequency",
        type: {
          name: "String"
        }
      },
      priceHidden: {
        serializedName: "properties.priceHidden",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      newPurchasesDetails: {
        serializedName: "properties.newPurchasesDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BalancePropertiesNewPurchasesDetailsItem"
            }
          }
        }
      },
      adjustmentDetails: {
        serializedName: "properties.adjustmentDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BalancePropertiesAdjustmentDetailsItem"
            }
          }
        }
      }
    }
  }
};

export const BalancePropertiesNewPurchasesDetailsItem: coreHttp.CompositeMapper = {
  serializedName: "BalancePropertiesNewPurchasesDetailsItem",
  type: {
    name: "Composite",
    className: "BalancePropertiesNewPurchasesDetailsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BalancePropertiesAdjustmentDetailsItem: coreHttp.CompositeMapper = {
  serializedName: "BalancePropertiesAdjustmentDetailsItem",
  type: {
    name: "Composite",
    className: "BalancePropertiesAdjustmentDetailsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ReservationSummariesListResult: coreHttp.CompositeMapper = {
  serializedName: "ReservationSummariesListResult",
  type: {
    name: "Composite",
    className: "ReservationSummariesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationSummary" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationSummary: coreHttp.CompositeMapper = {
  serializedName: "ReservationSummary",
  type: {
    name: "Composite",
    className: "ReservationSummary",
    modelProperties: {
      ...Resource.type.modelProperties,
      reservationOrderId: {
        serializedName: "properties.reservationOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationId: {
        serializedName: "properties.reservationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "properties.skuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservedHours: {
        serializedName: "properties.reservedHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usageDate: {
        serializedName: "properties.usageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usedHours: {
        serializedName: "properties.usedHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minUtilizationPercentage: {
        serializedName: "properties.minUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      avgUtilizationPercentage: {
        serializedName: "properties.avgUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxUtilizationPercentage: {
        serializedName: "properties.maxUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      kind: {
        serializedName: "properties.kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchasedQuantity: {
        serializedName: "properties.purchasedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      remainingQuantity: {
        serializedName: "properties.remainingQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalReservedQuantity: {
        serializedName: "properties.totalReservedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usedQuantity: {
        serializedName: "properties.usedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      utilizedPercentage: {
        serializedName: "properties.utilizedPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ReservationDetailsListResult: coreHttp.CompositeMapper = {
  serializedName: "ReservationDetailsListResult",
  type: {
    name: "Composite",
    className: "ReservationDetailsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationDetail" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationDetail: coreHttp.CompositeMapper = {
  serializedName: "ReservationDetail",
  type: {
    name: "Composite",
    className: "ReservationDetail",
    modelProperties: {
      ...Resource.type.modelProperties,
      reservationOrderId: {
        serializedName: "properties.reservationOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceFlexibilityRatio: {
        serializedName: "properties.instanceFlexibilityRatio",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceFlexibilityGroup: {
        serializedName: "properties.instanceFlexibilityGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationId: {
        serializedName: "properties.reservationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "properties.skuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservedHours: {
        serializedName: "properties.reservedHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usageDate: {
        serializedName: "properties.usageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usedHours: {
        serializedName: "properties.usedHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceId: {
        serializedName: "properties.instanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalReservedQuantity: {
        serializedName: "properties.totalReservedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      kind: {
        serializedName: "properties.kind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationRecommendationsListResult: coreHttp.CompositeMapper = {
  serializedName: "ReservationRecommendationsListResult",
  type: {
    name: "Composite",
    className: "ReservationRecommendationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationRecommendation" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceAttributes: coreHttp.CompositeMapper = {
  serializedName: "ResourceAttributes",
  type: {
    name: "Composite",
    className: "ResourceAttributes",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationRecommendation: coreHttp.CompositeMapper = {
  serializedName: "ReservationRecommendation",
  type: {
    name: "Composite",
    className: "ReservationRecommendation",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...Resource.type.modelProperties,
      ...ResourceAttributes.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationTransactionsListResult: coreHttp.CompositeMapper = {
  serializedName: "ReservationTransactionsListResult",
  type: {
    name: "Composite",
    className: "ReservationTransactionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationTransaction" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationTransaction: coreHttp.CompositeMapper = {
  serializedName: "ReservationTransaction",
  type: {
    name: "Composite",
    className: "ReservationTransaction",
    modelProperties: {
      ...Resource.type.modelProperties,
      eventDate: {
        serializedName: "properties.eventDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      reservationOrderId: {
        serializedName: "properties.reservationOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "properties.eventType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "properties.quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      amount: {
        serializedName: "properties.amount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationOrderName: {
        serializedName: "properties.reservationOrderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchasingEnrollment: {
        serializedName: "properties.purchasingEnrollment",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchasingSubscriptionGuid: {
        serializedName: "properties.purchasingSubscriptionGuid",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      purchasingSubscriptionName: {
        serializedName: "properties.purchasingSubscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      armSkuName: {
        serializedName: "properties.armSkuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "properties.region",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "properties.accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountOwnerEmail: {
        serializedName: "properties.accountOwnerEmail",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      departmentName: {
        serializedName: "properties.departmentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costCenter: {
        serializedName: "properties.costCenter",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentEnrollment: {
        serializedName: "properties.currentEnrollment",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingFrequency: {
        serializedName: "properties.billingFrequency",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PriceSheetResult: coreHttp.CompositeMapper = {
  serializedName: "PriceSheetResult",
  type: {
    name: "Composite",
    className: "PriceSheetResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      pricesheets: {
        serializedName: "properties.pricesheets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PriceSheetProperties" }
          }
        }
      },
      nextLink: {
        serializedName: "properties.nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PriceSheetProperties: coreHttp.CompositeMapper = {
  serializedName: "PriceSheetProperties",
  type: {
    name: "Composite",
    className: "PriceSheetProperties",
    modelProperties: {
      billingPeriodId: {
        serializedName: "billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterId: {
        serializedName: "meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      meterDetails: {
        serializedName: "meterDetails",
        type: {
          name: "Composite",
          className: "MeterDetails"
        }
      },
      unitOfMeasure: {
        serializedName: "unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      includedQuantity: {
        serializedName: "includedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      partNumber: {
        serializedName: "partNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unitPrice: {
        serializedName: "unitPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currencyCode: {
        serializedName: "currencyCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "offerId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MeterDetails: coreHttp.CompositeMapper = {
  serializedName: "MeterDetails",
  type: {
    name: "Composite",
    className: "MeterDetails",
    modelProperties: {
      meterName: {
        serializedName: "meterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterCategory: {
        serializedName: "meterCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterSubCategory: {
        serializedName: "meterSubCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterLocation: {
        serializedName: "meterLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalIncludedQuantity: {
        serializedName: "totalIncludedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      pretaxStandardRate: {
        serializedName: "pretaxStandardRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serviceName: {
        serializedName: "serviceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceTier: {
        serializedName: "serviceTier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ForecastsListResult: coreHttp.CompositeMapper = {
  serializedName: "ForecastsListResult",
  type: {
    name: "Composite",
    className: "ForecastsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Forecast" } }
        }
      }
    }
  }
};

export const Forecast: coreHttp.CompositeMapper = {
  serializedName: "Forecast",
  type: {
    name: "Composite",
    className: "Forecast",
    modelProperties: {
      ...Resource.type.modelProperties,
      usageDate: {
        serializedName: "properties.usageDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      grain: {
        serializedName: "properties.grain",
        type: {
          name: "String"
        }
      },
      charge: {
        serializedName: "properties.charge",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      chargeType: {
        serializedName: "properties.chargeType",
        type: {
          name: "String"
        }
      },
      confidenceLevels: {
        serializedName: "properties.confidenceLevels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ForecastPropertiesConfidenceLevelsItem"
            }
          }
        }
      }
    }
  }
};

export const ForecastPropertiesConfidenceLevelsItem: coreHttp.CompositeMapper = {
  serializedName: "ForecastPropertiesConfidenceLevelsItem",
  type: {
    name: "Composite",
    className: "ForecastPropertiesConfidenceLevelsItem",
    modelProperties: {
      percentage: {
        serializedName: "percentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bound: {
        serializedName: "bound",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroupAggregatedCostResult: coreHttp.CompositeMapper = {
  serializedName: "ManagementGroupAggregatedCostResult",
  type: {
    name: "Composite",
    className: "ManagementGroupAggregatedCostResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      billingPeriodId: {
        serializedName: "properties.billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      azureCharges: {
        serializedName: "properties.azureCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      marketplaceCharges: {
        serializedName: "properties.marketplaceCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      chargesBilledSeparately: {
        serializedName: "properties.chargesBilledSeparately",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "properties.children",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupAggregatedCostResult"
            }
          }
        }
      },
      includedSubscriptions: {
        serializedName: "properties.includedSubscriptions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "ManagementGroupAggregatedCostPropertiesIncludedSubscriptionsItem"
          }
        }
      },
      excludedSubscriptions: {
        serializedName: "properties.excludedSubscriptions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "ManagementGroupAggregatedCostPropertiesExcludedSubscriptionsItem"
          }
        }
      }
    }
  }
};

export const Events: coreHttp.CompositeMapper = {
  serializedName: "Events",
  type: {
    name: "Composite",
    className: "Events",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EventSummary" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSummary: coreHttp.CompositeMapper = {
  serializedName: "EventSummary",
  type: {
    name: "Composite",
    className: "EventSummary",
    modelProperties: {
      ...Resource.type.modelProperties,
      transactionDate: {
        serializedName: "properties.transactionDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      newCredit: {
        serializedName: "newCredit",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      adjustments: {
        serializedName: "adjustments",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      creditExpired: {
        serializedName: "creditExpired",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      charges: {
        serializedName: "charges",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      closedBalance: {
        serializedName: "closedBalance",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      eventType: {
        serializedName: "properties.eventType",
        type: {
          name: "String"
        }
      },
      invoiceNumber: {
        serializedName: "properties.invoiceNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Amount: coreHttp.CompositeMapper = {
  serializedName: "Amount",
  type: {
    name: "Composite",
    className: "Amount",
    modelProperties: {
      currency: {
        serializedName: "currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Lots: coreHttp.CompositeMapper = {
  serializedName: "Lots",
  type: {
    name: "Composite",
    className: "Lots",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LotSummary" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LotSummary: coreHttp.CompositeMapper = {
  serializedName: "LotSummary",
  type: {
    name: "Composite",
    className: "LotSummary",
    modelProperties: {
      ...Resource.type.modelProperties,
      originalAmount: {
        serializedName: "originalAmount",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      closedBalance: {
        serializedName: "closedBalance",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      source: {
        serializedName: "properties.source",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startDate: {
        serializedName: "properties.startDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        serializedName: "properties.expirationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      poNumber: {
        serializedName: "properties.poNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreditSummary: coreHttp.CompositeMapper = {
  serializedName: "CreditSummary",
  type: {
    name: "Composite",
    className: "CreditSummary",
    modelProperties: {
      ...Resource.type.modelProperties,
      balanceSummary: {
        serializedName: "balanceSummary",
        type: {
          name: "Composite",
          className: "CreditBalanceSummary"
        }
      },
      pendingCreditAdjustments: {
        serializedName: "pendingCreditAdjustments",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      expiredCredit: {
        serializedName: "expiredCredit",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      pendingEligibleCharges: {
        serializedName: "pendingEligibleCharges",
        type: {
          name: "Composite",
          className: "Amount"
        }
      }
    }
  }
};

export const CreditBalanceSummary: coreHttp.CompositeMapper = {
  serializedName: "CreditBalanceSummary",
  type: {
    name: "Composite",
    className: "CreditBalanceSummary",
    modelProperties: {
      estimatedBalance: {
        serializedName: "estimatedBalance",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      currentBalance: {
        serializedName: "currentBalance",
        type: {
          name: "Composite",
          className: "Amount"
        }
      }
    }
  }
};

export const LegacyUsageDetail: coreHttp.CompositeMapper = {
  serializedName: "legacy",
  type: {
    name: "Composite",
    className: "LegacyUsageDetail",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...UsageDetail.type.modelProperties,
      billingAccountId: {
        serializedName: "properties.billingAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingAccountName: {
        serializedName: "properties.billingAccountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingPeriodStartDate: {
        serializedName: "properties.billingPeriodStartDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      billingPeriodEndDate: {
        serializedName: "properties.billingPeriodEndDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      billingProfileId: {
        serializedName: "properties.billingProfileId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileName: {
        serializedName: "properties.billingProfileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountOwnerId: {
        serializedName: "properties.accountOwnerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "properties.accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionName: {
        serializedName: "properties.subscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "properties.date",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      product: {
        serializedName: "properties.product",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partNumber: {
        serializedName: "properties.partNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      meterDetails: {
        serializedName: "meterDetails",
        type: {
          name: "Composite",
          className: "MeterDetailsResponse"
        }
      },
      quantity: {
        serializedName: "properties.quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      effectivePrice: {
        serializedName: "properties.effectivePrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cost: {
        serializedName: "properties.cost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unitPrice: {
        serializedName: "properties.unitPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      billingCurrency: {
        serializedName: "properties.billingCurrency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "properties.resourceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consumedService: {
        serializedName: "properties.consumedService",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "properties.resourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceInfo1: {
        serializedName: "properties.serviceInfo1",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceInfo2: {
        serializedName: "properties.serviceInfo2",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalInfo: {
        serializedName: "properties.additionalInfo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSection: {
        serializedName: "properties.invoiceSection",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costCenter: {
        serializedName: "properties.costCenter",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationId: {
        serializedName: "properties.reservationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationName: {
        serializedName: "properties.reservationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productOrderId: {
        serializedName: "properties.productOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productOrderName: {
        serializedName: "properties.productOrderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "properties.offerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isAzureCreditEligible: {
        serializedName: "properties.isAzureCreditEligible",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherName: {
        serializedName: "properties.publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherType: {
        serializedName: "properties.publisherType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      planName: {
        serializedName: "properties.planName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      chargeType: {
        serializedName: "properties.chargeType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frequency: {
        serializedName: "properties.frequency",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MeterDetailsResponse: coreHttp.CompositeMapper = {
  serializedName: "MeterDetailsResponse",
  type: {
    name: "Composite",
    className: "MeterDetailsResponse",
    modelProperties: {
      meterName: {
        serializedName: "meterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterCategory: {
        serializedName: "meterCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterSubCategory: {
        serializedName: "meterSubCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unitOfMeasure: {
        serializedName: "unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceFamily: {
        serializedName: "serviceFamily",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModernUsageDetail: coreHttp.CompositeMapper = {
  serializedName: "modern",
  type: {
    name: "Composite",
    className: "ModernUsageDetail",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...UsageDetail.type.modelProperties,
      billingAccountId: {
        serializedName: "properties.billingAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingAccountName: {
        serializedName: "properties.billingAccountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingPeriodStartDate: {
        serializedName: "properties.billingPeriodStartDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      billingPeriodEndDate: {
        serializedName: "properties.billingPeriodEndDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      billingProfileId: {
        serializedName: "properties.billingProfileId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileName: {
        serializedName: "properties.billingProfileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionGuid: {
        serializedName: "properties.subscriptionGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionName: {
        serializedName: "properties.subscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "properties.date",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      product: {
        serializedName: "properties.product",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      meterName: {
        serializedName: "properties.meterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterRegion: {
        serializedName: "properties.meterRegion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterCategory: {
        serializedName: "properties.meterCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterSubCategory: {
        serializedName: "properties.meterSubCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceFamily: {
        serializedName: "properties.serviceFamily",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "properties.quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unitOfMeasure: {
        serializedName: "properties.unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceName: {
        serializedName: "properties.instanceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costInUSD: {
        serializedName: "properties.costInUSD",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unitPrice: {
        serializedName: "properties.unitPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      billingCurrencyCode: {
        serializedName: "properties.billingCurrencyCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "properties.resourceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consumedService: {
        serializedName: "properties.consumedService",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceInfo1: {
        serializedName: "properties.serviceInfo1",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceInfo2: {
        serializedName: "properties.serviceInfo2",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalInfo: {
        serializedName: "properties.additionalInfo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSectionId: {
        serializedName: "properties.invoiceSectionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSectionName: {
        serializedName: "properties.invoiceSectionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costCenter: {
        serializedName: "properties.costCenter",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationId: {
        serializedName: "properties.reservationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationName: {
        serializedName: "properties.reservationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productOrderId: {
        serializedName: "properties.productOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productOrderName: {
        serializedName: "properties.productOrderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isAzureCreditEligible: {
        serializedName: "properties.isAzureCreditEligible",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherName: {
        serializedName: "properties.publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherType: {
        serializedName: "properties.publisherType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      chargeType: {
        serializedName: "properties.chargeType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frequency: {
        serializedName: "properties.frequency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costInBillingCurrency: {
        serializedName: "properties.costInBillingCurrency",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      costInPricingCurrency: {
        serializedName: "properties.costInPricingCurrency",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      exchangeRate: {
        serializedName: "properties.exchangeRate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      exchangeRateDate: {
        serializedName: "properties.exchangeRateDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      invoiceId: {
        serializedName: "properties.invoiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      previousInvoiceId: {
        serializedName: "properties.previousInvoiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pricingCurrencyCode: {
        serializedName: "properties.pricingCurrencyCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productIdentifier: {
        serializedName: "properties.productIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceLocationNormalized: {
        serializedName: "properties.resourceLocationNormalized",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      servicePeriodStartDate: {
        serializedName: "properties.servicePeriodStartDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      servicePeriodEndDate: {
        serializedName: "properties.servicePeriodEndDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      customerTenantId: {
        serializedName: "properties.customerTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customerName: {
        serializedName: "properties.customerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerTenantId: {
        serializedName: "properties.partnerTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerName: {
        serializedName: "properties.partnerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resellerMpnId: {
        serializedName: "properties.resellerMpnId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resellerName: {
        serializedName: "properties.resellerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherId: {
        serializedName: "properties.publisherId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      marketPrice: {
        serializedName: "properties.marketPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      exchangeRatePricingToBilling: {
        serializedName: "properties.exchangeRatePricingToBilling",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      paygCostInBillingCurrency: {
        serializedName: "properties.paygCostInBillingCurrency",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      paygCostInUSD: {
        serializedName: "properties.paygCostInUSD",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      partnerEarnedCreditRate: {
        serializedName: "properties.partnerEarnedCreditRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      partnerEarnedCreditApplied: {
        serializedName: "properties.partnerEarnedCreditApplied",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LegacyReservationRecommendation: coreHttp.CompositeMapper = {
  serializedName: "legacy",
  type: {
    name: "Composite",
    className: "LegacyReservationRecommendation",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReservationRecommendation.type.modelProperties,
      lookBackPeriod: {
        serializedName: "properties.lookBackPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceFlexibilityRatio: {
        serializedName: "properties.instanceFlexibilityRatio",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceFlexibilityGroup: {
        serializedName: "properties.instanceFlexibilityGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      normalizedSize: {
        serializedName: "properties.normalizedSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedQuantityNormalized: {
        serializedName: "properties.recommendedQuantityNormalized",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costWithNoReservedInstances: {
        serializedName: "properties.costWithNoReservedInstances",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recommendedQuantity: {
        serializedName: "properties.recommendedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalCostWithReservedInstances: {
        serializedName: "properties.totalCostWithReservedInstances",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      netSavings: {
        serializedName: "properties.netSavings",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      firstUsageDate: {
        serializedName: "properties.firstUsageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      scope: {
        serializedName: "properties.scope",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      skuProperties: {
        serializedName: "properties.skuProperties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuProperty" } }
        }
      }
    }
  }
};

export const SkuProperty: coreHttp.CompositeMapper = {
  serializedName: "SkuProperty",
  type: {
    name: "Composite",
    className: "SkuProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModernReservationRecommendation: coreHttp.CompositeMapper = {
  serializedName: "modern",
  type: {
    name: "Composite",
    className: "ModernReservationRecommendation",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReservationRecommendation.type.modelProperties,
      lookBackPeriod: {
        serializedName: "properties.lookBackPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceFlexibilityRatio: {
        serializedName: "properties.instanceFlexibilityRatio",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceFlexibilityGroup: {
        serializedName: "properties.instanceFlexibilityGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      normalizedSize: {
        serializedName: "properties.normalizedSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedQuantityNormalized: {
        serializedName: "properties.recommendedQuantityNormalized",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costWithNoReservedInstances: {
        serializedName: "costWithNoReservedInstances",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      recommendedQuantity: {
        serializedName: "properties.recommendedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalCostWithReservedInstances: {
        serializedName: "totalCostWithReservedInstances",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      netSavings: {
        serializedName: "netSavings",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      firstUsageDate: {
        serializedName: "properties.firstUsageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      scope: {
        serializedName: "properties.scope",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      skuProperties: {
        serializedName: "properties.skuProperties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuProperty" } }
        }
      }
    }
  }
};

export const LegacyChargeSummary: coreHttp.CompositeMapper = {
  serializedName: "legacy",
  type: {
    name: "Composite",
    className: "LegacyChargeSummary",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ChargeSummary.type.modelProperties,
      billingPeriodId: {
        serializedName: "properties.billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureCharges: {
        serializedName: "properties.azureCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      chargesBilledSeparately: {
        serializedName: "properties.chargesBilledSeparately",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      marketplaceCharges: {
        serializedName: "properties.marketplaceCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModernChargeSummary: coreHttp.CompositeMapper = {
  serializedName: "modern",
  type: {
    name: "Composite",
    className: "ModernChargeSummary",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ChargeSummary.type.modelProperties,
      billingPeriodId: {
        serializedName: "properties.billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureCharges: {
        serializedName: "azureCharges",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      chargesBilledSeparately: {
        serializedName: "chargesBilledSeparately",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      marketplaceCharges: {
        serializedName: "marketplaceCharges",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      billingAccountId: {
        serializedName: "properties.billingAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileId: {
        serializedName: "properties.billingProfileId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSectionId: {
        serializedName: "properties.invoiceSectionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customerId: {
        serializedName: "properties.customerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isInvoiced: {
        serializedName: "properties.isInvoiced",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export let discriminators = {
  "Resource.UsageDetail": UsageDetail,
  "Resource.ChargeSummary": ChargeSummary,
  "Resource.ReservationRecommendation": ReservationRecommendation,
  "Resource.legacy": LegacyChargeSummary,
  "Resource.modern": ModernChargeSummary
};
