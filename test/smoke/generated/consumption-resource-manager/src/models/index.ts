/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type UsageDetailUnion =
  | UsageDetail
  | LegacyUsageDetail
  | ModernUsageDetail;
export type ChargeSummaryUnion =
  | ChargeSummary
  | LegacyChargeSummary
  | ModernChargeSummary;
export type ReservationRecommendationUnion =
  | ReservationRecommendation
  | LegacyReservationRecommendation
  | ModernReservationRecommendation;

/**
 * Result of listing usage details. It contains a list of available usage details in reverse chronological order by billing period.
 */
export interface UsageDetailsListResult {
  /**
   * The list of usage details.
   */
  readonly value?: UsageDetailUnion[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The Resource model definition.
 */
export interface Resource {
  /**
   * Resource Id.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Resource tags.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * An usage detail resource.
 */
export type UsageDetail = Resource & {
  /**
   * Specifies the kind of usage details.
   */
  kind: UsageDetailsKind;
};

/**
 * Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
 */
export interface ErrorResponse {
  /**
   * The details of the error.
   */
  error?: ErrorDetails;
}

/**
 * The details of the error.
 */
export interface ErrorDetails {
  /**
   * Error code.
   */
  readonly code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  readonly message?: string;
}

/**
 * Result of listing marketplaces. It contains a list of available marketplaces in reverse chronological order by billing period.
 */
export interface MarketplacesListResult {
  /**
   * The list of marketplaces.
   */
  readonly value?: Marketplace[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An marketplace resource.
 */
export type Marketplace = Resource & {
  /**
   * The id of the billing period resource that the usage belongs to.
   */
  readonly billingPeriodId?: string;
  /**
   * The start of the date time range covered by the usage detail.
   */
  readonly usageStart?: Date;
  /**
   * The end of the date time range covered by the usage detail.
   */
  readonly usageEnd?: Date;
  /**
   * The marketplace resource rate.
   */
  readonly resourceRate?: number;
  /**
   * The type of offer.
   */
  readonly offerName?: string;
  /**
   * The name of resource group.
   */
  readonly resourceGroup?: string;
  /**
   * The order number.
   */
  readonly orderNumber?: string;
  /**
   * The name of the resource instance that the usage is about.
   */
  readonly instanceName?: string;
  /**
   * The uri of the resource instance that the usage is about.
   */
  readonly instanceId?: string;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   */
  readonly currency?: string;
  /**
   * The quantity of usage.
   */
  readonly consumedQuantity?: number;
  /**
   * The unit of measure.
   */
  readonly unitOfMeasure?: string;
  /**
   * The amount of cost before tax.
   */
  readonly pretaxCost?: number;
  /**
   * The estimated usage is subject to change.
   */
  readonly isEstimated?: boolean;
  /**
   * The meter id (GUID).
   */
  readonly meterId?: string;
  /**
   * Subscription guid.
   */
  readonly subscriptionGuid?: string;
  /**
   * Subscription name.
   */
  readonly subscriptionName?: string;
  /**
   * Account name.
   */
  readonly accountName?: string;
  /**
   * Department name.
   */
  readonly departmentName?: string;
  /**
   * Consumed service name.
   */
  readonly consumedService?: string;
  /**
   * The cost center of this department if it is a department and a costcenter exists
   */
  readonly costCenter?: string;
  /**
   * Additional details of this usage item. By default this is not populated, unless it's specified in $expand.
   */
  readonly additionalProperties?: string;
  /**
   * The name of publisher.
   */
  readonly publisherName?: string;
  /**
   * The name of plan.
   */
  readonly planName?: string;
  /**
   * Flag indicating whether this is a recurring charge or not.
   */
  readonly isRecurringCharge?: boolean;
};

/**
 * Result of listing budgets. It contains a list of available budgets in the scope provided.
 */
export interface BudgetsListResult {
  /**
   * The list of budgets.
   */
  readonly value?: Budget[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The Resource model definition.
 */
export interface ProxyResource {
  /**
   * Resource Id.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
   */
  eTag?: string;
}

/**
 * A budget resource.
 */
export type Budget = ProxyResource & {
  /**
   * The category of the budget, whether the budget tracks cost or usage.
   */
  category?: CategoryType;
  /**
   * The total amount of cost to track with the budget
   */
  amount?: number;
  /**
   * The time covered by a budget. Tracking of the amount will be reset based on the time grain.
   */
  timeGrain?: TimeGrainType;
  /**
   * Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
   */
  timePeriod?: BudgetTimePeriod;
  /**
   * May be used to filter budgets by resource group, resource, or meter.
   */
  filters?: Filters;
  /**
   * The current amount of cost which is being tracked for a budget.
   */
  readonly currentSpend?: CurrentSpend;
  /**
   * Dictionary of notifications associated with the budget. Budget can have up to five notifications.
   */
  notifications?: { [propertyName: string]: Notification };
};

/**
 * The start and end date for a budget.
 */
export interface BudgetTimePeriod {
  /**
   * The start date for the budget.
   */
  startDate: Date;
  /**
   * The end date for the budget. If not provided, we default this to 10 years from the start date.
   */
  endDate?: Date;
}

/**
 * May be used to filter budgets by resource group, resource, or meter.
 */
export interface Filters {
  /**
   * The list of filters on resource groups, allowed at subscription level only.
   */
  resourceGroups?: string[];
  /**
   * The list of filters on resources.
   */
  resources?: string[];
  /**
   * The list of filters on meters (GUID), mandatory for budgets of usage category.
   */
  meters?: string[];
  /**
   * The dictionary of filters on tags.
   */
  tags?: { [propertyName: string]: string[] };
}

/**
 * The current amount of cost which is being tracked for a budget.
 */
export interface CurrentSpend {
  /**
   * The total amount of cost which is being tracked by the budget.
   */
  readonly amount?: number;
  /**
   * The unit of measure for the budget amount.
   */
  readonly unit?: string;
}

/**
 * The notification associated with a budget.
 */
export interface Notification {
  /**
   * The notification is enabled or not.
   */
  enabled: boolean;
  /**
   * The comparison operator.
   */
  operator: OperatorType;
  /**
   * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
   */
  threshold: number;
  /**
   * Email addresses to send the budget notification to when the threshold is exceeded.
   */
  contactEmails: string[];
  /**
   * Contact roles to send the budget notification to when the threshold is exceeded.
   */
  contactRoles?: string[];
  /**
   * Action groups to send the budget notification to when the threshold is exceeded.
   */
  contactGroups?: string[];
}

/**
 * A resource listing all tags.
 */
export type TagsResult = ProxyResource & {
  /**
   * A list of Tag.
   */
  tags?: Tag[];
};

/**
 * The tag resource.
 */
export interface Tag {
  /**
   * Tag key.
   */
  key?: string;
}

/**
 * Result of listing charge summary.
 */
export interface ChargesListResult {
  /**
   * The list of charge summary
   */
  readonly value?: ChargeSummaryUnion[];
}

/**
 * A charge summary resource.
 */
export type ChargeSummary = Resource & {
  /**
   * Specifies the kind of charge summary.
   */
  kind: ChargeSummaryKind;
};

/**
 * A balance resource.
 */
export type Balance = Resource & {
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   */
  readonly currency?: string;
  /**
   * The beginning balance for the billing period.
   */
  readonly beginningBalance?: number;
  /**
   * The ending balance for the billing period (for open periods this will be updated daily).
   */
  readonly endingBalance?: number;
  /**
   * Total new purchase amount.
   */
  readonly newPurchases?: number;
  /**
   * Total adjustment amount.
   */
  readonly adjustments?: number;
  /**
   * Total Commitment usage.
   */
  readonly utilized?: number;
  /**
   * Overage for Azure services.
   */
  readonly serviceOverage?: number;
  /**
   * Charges Billed separately.
   */
  readonly chargesBilledSeparately?: number;
  /**
   * serviceOverage + chargesBilledSeparately.
   */
  readonly totalOverage?: number;
  /**
   * Azure service commitment + total Overage.
   */
  readonly totalUsage?: number;
  /**
   * Total charges for Azure Marketplace.
   */
  readonly azureMarketplaceServiceCharges?: number;
  /**
   * The billing frequency.
   */
  billingFrequency?: BillingFrequency;
  /**
   * Price is hidden or not.
   */
  readonly priceHidden?: boolean;
  /**
   * List of new purchases.
   */
  readonly newPurchasesDetails?: BalancePropertiesNewPurchasesDetailsItem[];
  /**
   * List of Adjustments (Promo credit, SIE credit etc.).
   */
  readonly adjustmentDetails?: BalancePropertiesAdjustmentDetailsItem[];
};

export interface BalancePropertiesNewPurchasesDetailsItem {
  /**
   * the name of new purchase.
   */
  readonly name?: string;
  /**
   * the value of new purchase.
   */
  readonly value?: number;
}

export interface BalancePropertiesAdjustmentDetailsItem {
  /**
   * the name of new adjustment.
   */
  readonly name?: string;
  /**
   * the value of new adjustment.
   */
  readonly value?: number;
}

/**
 * Result of listing reservation summaries.
 */
export interface ReservationSummariesListResult {
  /**
   * The list of reservation summaries.
   */
  readonly value?: ReservationSummary[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * reservation summary resource.
 */
export type ReservationSummary = Resource & {
  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.
   */
  readonly reservationOrderId?: string;
  /**
   * The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.
   */
  readonly reservationId?: string;
  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
   */
  readonly skuName?: string;
  /**
   * This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days
   */
  readonly reservedHours?: number;
  /**
   * Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.
   */
  readonly usageDate?: Date;
  /**
   * Total used hours by the reservation
   */
  readonly usedHours?: number;
  /**
   * This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day
   */
  readonly minUtilizationPercentage?: number;
  /**
   * This is average utilization for the entire time range. (day or month depending on the grain)
   */
  readonly avgUtilizationPercentage?: number;
  /**
   * This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.
   */
  readonly maxUtilizationPercentage?: number;
  /**
   * The reservation kind.
   */
  readonly kind?: string;
  /**
   * This is the purchased quantity for the reservationId.
   */
  readonly purchasedQuantity?: number;
  /**
   * This is the remaining quantity for the reservationId.
   */
  readonly remainingQuantity?: number;
  /**
   * This is the total count of instances that are reserved for the reservationId.
   */
  readonly totalReservedQuantity?: number;
  /**
   * This is the used quantity for the reservationId.
   */
  readonly usedQuantity?: number;
  /**
   * This is the utilized percentage for the reservation Id.
   */
  readonly utilizedPercentage?: number;
};

/**
 * Result of listing reservation details.
 */
export interface ReservationDetailsListResult {
  /**
   * The list of reservation details.
   */
  readonly value?: ReservationDetail[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * reservation detail resource.
 */
export type ReservationDetail = Resource & {
  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.
   */
  readonly reservationOrderId?: string;
  /**
   * The instance Flexibility Ratio.
   */
  readonly instanceFlexibilityRatio?: string;
  /**
   * The instance Flexibility Group.
   */
  readonly instanceFlexibilityGroup?: string;
  /**
   * The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.
   */
  readonly reservationId?: string;
  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
   */
  readonly skuName?: string;
  /**
   * This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.
   */
  readonly reservedHours?: number;
  /**
   * The date on which consumption occurred.
   */
  readonly usageDate?: Date;
  /**
   * This is the total hours used by the instance.
   */
  readonly usedHours?: number;
  /**
   * This identifier is the name of the resource or the fully qualified Resource ID.
   */
  readonly instanceId?: string;
  /**
   * This is the total count of instances that are reserved for the reservationId.
   */
  readonly totalReservedQuantity?: number;
  /**
   * The reservation kind.
   */
  readonly kind?: string;
};

/**
 * Result of listing reservation recommendations.
 */
export interface ReservationRecommendationsListResult {
  /**
   * The list of reservation recommendations.
   */
  readonly value?: ReservationRecommendationUnion[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * The Resource model definition.
 */
export interface ResourceAttributes {
  /**
   * Resource location
   */
  readonly location?: string;
  /**
   * Resource sku
   */
  readonly sku?: string;
}

/**
 * A reservation recommendation resource.
 */
export type ReservationRecommendation = Resource &
  ResourceAttributes & {
    /**
     * Specifies the kind of reservation recommendation.
     */
    kind: ReservationRecommendationKind;
  };

/**
 * Result of listing reservation transactions
 */
export interface ReservationTransactionsListResult {
  /**
   * The list of reservation transactions.
   */
  readonly value?: ReservationTransaction[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * Reservation transaction resource.
 */
export type ReservationTransaction = Resource & {
  /**
   * The date of the transaction
   */
  readonly eventDate?: Date;
  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.
   */
  readonly reservationOrderId?: string;
  /**
   * The description of the transaction.
   */
  readonly description?: string;
  /**
   * The type of the transaction (Purchase, Cancel, etc.)
   */
  readonly eventType?: string;
  /**
   * The quantity of the transaction.
   */
  readonly quantity?: number;
  /**
   * The charge of the transaction.
   */
  readonly amount?: number;
  /**
   * The ISO currency in which the transaction is charged, for example, USD.
   */
  readonly currency?: string;
  /**
   * The name of the reservation order.
   */
  readonly reservationOrderName?: string;
  /**
   * The purchasing enrollment.
   */
  readonly purchasingEnrollment?: string;
  /**
   * The subscription guid that makes the transaction.
   */
  readonly purchasingSubscriptionGuid?: string;
  /**
   * The subscription name that makes the transaction.
   */
  readonly purchasingSubscriptionName?: string;
  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
   */
  readonly armSkuName?: string;
  /**
   * This is the term of the transaction.
   */
  readonly term?: string;
  /**
   * The region of the transaction.
   */
  readonly region?: string;
  /**
   * The name of the account that makes the transaction.
   */
  readonly accountName?: string;
  /**
   * The email of the account owner that makes the transaction.
   */
  readonly accountOwnerEmail?: string;
  /**
   * The department name.
   */
  readonly departmentName?: string;
  /**
   * The cost center of this department if it is a department and a cost center is provided.
   */
  readonly costCenter?: string;
  /**
   * The current enrollment.
   */
  readonly currentEnrollment?: string;
  /**
   * The billing frequency, which can be either one-time or recurring.
   */
  readonly billingFrequency?: string;
};

/**
 * An pricesheet resource.
 */
export type PriceSheetResult = Resource & {
  /**
   * Price sheet
   */
  readonly pricesheets?: PriceSheetProperties[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
};

/**
 * The properties of the price sheet.
 */
export interface PriceSheetProperties {
  /**
   * The id of the billing period resource that the usage belongs to.
   */
  readonly billingPeriodId?: string;
  /**
   * The meter id (GUID)
   */
  readonly meterId?: string;
  /**
   * The details about the meter. By default this is not populated, unless it's specified in $expand.
   */
  readonly meterDetails?: MeterDetails;
  /**
   * Unit of measure
   */
  readonly unitOfMeasure?: string;
  /**
   * Included quality for an offer
   */
  readonly includedQuantity?: number;
  /**
   * Part Number
   */
  readonly partNumber?: string;
  /**
   * Unit Price
   */
  readonly unitPrice?: number;
  /**
   * Currency Code
   */
  readonly currencyCode?: string;
  /**
   * Offer Id
   */
  readonly offerId?: string;
}

/**
 * The properties of the meter detail.
 */
export interface MeterDetails {
  /**
   * The name of the meter, within the given meter category
   */
  readonly meterName?: string;
  /**
   * The category of the meter, for example, 'Cloud services', 'Networking', etc..
   */
  readonly meterCategory?: string;
  /**
   * The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   */
  readonly meterSubCategory?: string;
  /**
   * The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
   */
  readonly unit?: string;
  /**
   * The location in which the Azure service is available.
   */
  readonly meterLocation?: string;
  /**
   * The total included quantity associated with the offer.
   */
  readonly totalIncludedQuantity?: number;
  /**
   * The pretax listing price.
   */
  readonly pretaxStandardRate?: number;
  /**
   * The name of the service.
   */
  readonly serviceName?: string;
  /**
   * The service tier.
   */
  readonly serviceTier?: string;
}

/**
 * Result of listing forecasts. It contains a list of available forecasts.
 */
export interface ForecastsListResult {
  /**
   * The list of forecasts.
   */
  readonly value?: Forecast[];
}

/**
 * A forecast resource.
 */
export type Forecast = Resource & {
  /**
   * The usage date of the forecast.
   */
  readonly usageDate?: string;
  /**
   * The granularity of forecast.
   */
  grain?: Grain;
  /**
   * The amount of charge
   */
  readonly charge?: number;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   */
  readonly currency?: string;
  /**
   * The type of the charge. Could be actual or forecast
   */
  chargeType?: ChargeType;
  /**
   * The details about the forecast confidence levels. This is populated only when chargeType is Forecast.
   */
  readonly confidenceLevels?: ForecastPropertiesConfidenceLevelsItem[];
};

export interface ForecastPropertiesConfidenceLevelsItem {
  /**
   * The percentage level of the confidence
   */
  readonly percentage?: number;
  /**
   * The boundary of the percentage, values could be 'Upper' or 'Lower'
   */
  bound?: Bound;
  /**
   * The amount of forecast within the percentage level
   */
  readonly value?: number;
}

/**
 * Result of listing consumption operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of consumption operations supported by the Microsoft.Consumption resource provider.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
}

/**
 * A Consumption REST API operation.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Consumption.
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: UsageDetail, etc.
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  readonly operation?: string;
}

/**
 * A management group aggregated cost resource.
 */
export type ManagementGroupAggregatedCostResult = Resource & {
  /**
   * The id of the billing period resource that the aggregated cost belongs to.
   */
  readonly billingPeriodId?: string;
  /**
   * The start of the date time range covered by aggregated cost.
   */
  readonly usageStart?: Date;
  /**
   * The end of the date time range covered by the aggregated cost.
   */
  readonly usageEnd?: Date;
  /**
   * Azure Charges.
   */
  readonly azureCharges?: number;
  /**
   * Marketplace Charges.
   */
  readonly marketplaceCharges?: number;
  /**
   * Charges Billed Separately.
   */
  readonly chargesBilledSeparately?: number;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   */
  readonly currency?: string;
  /**
   * Children of a management group
   */
  children?: ManagementGroupAggregatedCostResult[];
  /**
   * List of subscription Guids included in the calculation of aggregated cost
   */
  includedSubscriptions?: string[];
  /**
   * List of subscription Guids excluded from the calculation of aggregated cost
   */
  excludedSubscriptions?: string[];
};

/**
 * Result of listing event summary.
 */
export interface Events {
  /**
   * The list of event summary.
   */
  readonly value?: EventSummary[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * An event summary resource.
 */
export type EventSummary = Resource & {
  /**
   * Transaction date.
   */
  readonly transactionDate?: Date;
  /**
   * Transaction description.
   */
  readonly description?: string;
  /**
   * New Credit.
   */
  readonly newCredit?: Amount;
  /**
   * Adjustments amount.
   */
  readonly adjustments?: Amount;
  /**
   * Credit expired.
   */
  readonly creditExpired?: Amount;
  /**
   * Charges amount.
   */
  readonly charges?: Amount;
  /**
   * Closed balance.
   */
  readonly closedBalance?: Amount;
  /**
   * The type of event.
   */
  eventType?: EventType;
  /**
   * Invoice number.
   */
  readonly invoiceNumber?: string;
};

/**
 * The amount plus currency .
 */
export interface Amount {
  /**
   * Amount currency.
   */
  readonly currency?: string;
  /**
   * Amount.
   */
  readonly value?: number;
}

/**
 * Result of listing lot summary.
 */
export interface Lots {
  /**
   * The list of lot summary.
   */
  readonly value?: LotSummary[];
  /**
   * The link (url) to the next page of results.
   */
  readonly nextLink?: string;
}

/**
 * A lot summary resource.
 */
export type LotSummary = Resource & {
  /**
   * Original amount.
   */
  readonly originalAmount?: Amount;
  /**
   * Closed balance.
   */
  readonly closedBalance?: Amount;
  /**
   * Lot source.
   */
  readonly source?: LotSource;
  /**
   * Start date.
   */
  readonly startDate?: Date;
  /**
   * Expiration date.
   */
  readonly expirationDate?: Date;
  /**
   * PO number.
   */
  readonly poNumber?: string;
};

/**
 * A credit summary resource.
 */
export type CreditSummary = Resource & {
  /**
   * Summary of balances associated with this credit summary.
   */
  readonly balanceSummary?: CreditBalanceSummary;
  /**
   * Pending credit adjustments.
   */
  readonly pendingCreditAdjustments?: Amount;
  /**
   * Expired credit.
   */
  readonly expiredCredit?: Amount;
  /**
   * Pending eligible charges.
   */
  readonly pendingEligibleCharges?: Amount;
};

/**
 * Summary of credit balances.
 */
export interface CreditBalanceSummary {
  /**
   * Estimated balance.
   */
  readonly estimatedBalance?: Amount;
  /**
   * Current balance.
   */
  readonly currentBalance?: Amount;
}

/**
 * Legacy usage detail.
 */
export type LegacyUsageDetail = UsageDetail & {
  /**
   * Billing Account identifier.
   */
  readonly billingAccountId?: string;
  /**
   * Billing Account Name.
   */
  readonly billingAccountName?: string;
  /**
   * The billing period start date.
   */
  readonly billingPeriodStartDate?: Date;
  /**
   * The billing period end date.
   */
  readonly billingPeriodEndDate?: Date;
  /**
   * Billing Profile identifier.
   */
  readonly billingProfileId?: string;
  /**
   * Billing Profile Name.
   */
  readonly billingProfileName?: string;
  /**
   * Account Owner Id.
   */
  readonly accountOwnerId?: string;
  /**
   * Account Name.
   */
  readonly accountName?: string;
  /**
   * Subscription guid.
   */
  readonly subscriptionId?: string;
  /**
   * Subscription name.
   */
  readonly subscriptionName?: string;
  /**
   * Date for the usage record.
   */
  readonly date?: Date;
  /**
   * Product name for the consumed service or purchase. Not available for Marketplace.
   */
  readonly product?: string;
  /**
   * Part Number of the service used. Can be used to join with the price sheet. Not available for marketplace.
   */
  readonly partNumber?: string;
  /**
   * The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.
   */
  readonly meterId?: string;
  /**
   * The details about the meter. By default this is not populated, unless it's specified in $expand.
   */
  readonly meterDetails?: MeterDetailsResponse;
  /**
   * The usage quantity.
   */
  readonly quantity?: number;
  /**
   * Effective Price that's charged for the usage.
   */
  readonly effectivePrice?: number;
  /**
   * The amount of cost before tax.
   */
  readonly cost?: number;
  /**
   * Unit Price is the price applicable to you. (your EA or other contract price).
   */
  readonly unitPrice?: number;
  /**
   * Billing Currency.
   */
  readonly billingCurrency?: string;
  /**
   * Resource Location.
   */
  readonly resourceLocation?: string;
  /**
   * Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided for marketplace usage.
   */
  readonly consumedService?: string;
  /**
   * Azure resource manager resource identifier.
   */
  readonly resourceId?: string;
  /**
   * Resource Name.
   */
  readonly resourceName?: string;
  /**
   * Service Info 1.
   */
  readonly serviceInfo1?: string;
  /**
   * Service Info 2.
   */
  readonly serviceInfo2?: string;
  /**
   * Additional details of this usage item. By default this is not populated, unless it's specified in $expand. Use this field to get usage line item specific details such as the actual VM Size (ServiceType) or the ratio in which the reservation discount is applied.
   */
  readonly additionalInfo?: string;
  /**
   * Invoice Section Name.
   */
  readonly invoiceSection?: string;
  /**
   * The cost center of this department if it is a department and a cost center is provided.
   */
  readonly costCenter?: string;
  /**
   * Resource Group Name.
   */
  readonly resourceGroup?: string;
  /**
   * ARM resource id of the reservation. Only applies to records relevant to reservations.
   */
  readonly reservationId?: string;
  /**
   * User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only applies to records relevant to reservations.
   */
  readonly reservationName?: string;
  /**
   * Product Order Id. For reservations this is the Reservation Order ID.
   */
  readonly productOrderId?: string;
  /**
   * Product Order Name. For reservations this is the SKU that was purchased.
   */
  readonly productOrderName?: string;
  /**
   * Offer Id. Ex: MS-AZR-0017P, MS-AZR-0148P.
   */
  readonly offerId?: string;
  /**
   * Is Azure Credit Eligible.
   */
  readonly isAzureCreditEligible?: boolean;
  /**
   * Term (in months). 1 month for monthly recurring purchase. 12 months for a 1 year reservation. 36 months for a 3 year reservation.
   */
  readonly term?: string;
  /**
   * Publisher Name.
   */
  readonly publisherName?: string;
  /**
   * Publisher Type.
   */
  readonly publisherType?: string;
  /**
   * Plan Name.
   */
  readonly planName?: string;
  /**
   * Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
   */
  readonly chargeType?: string;
  /**
   * Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which recur every month, and UsageBased for charges based on how much a service is used.
   */
  readonly frequency?: string;
};

/**
 * The properties of the meter detail.
 */
export interface MeterDetailsResponse {
  /**
   * The name of the meter, within the given meter category
   */
  readonly meterName?: string;
  /**
   * The category of the meter, for example, 'Cloud services', 'Networking', etc..
   */
  readonly meterCategory?: string;
  /**
   * The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   */
  readonly meterSubCategory?: string;
  /**
   * The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
   */
  readonly unitOfMeasure?: string;
  /**
   * The service family.
   */
  readonly serviceFamily?: string;
}

/**
 * Modern usage detail.
 */
export type ModernUsageDetail = UsageDetail & {
  /**
   * Billing Account identifier.
   */
  readonly billingAccountId?: string;
  /**
   * Name of the Billing Account.
   */
  readonly billingAccountName?: string;
  /**
   * Billing Period Start Date as in the invoice.
   */
  readonly billingPeriodStartDate?: Date;
  /**
   * Billing Period End Date as in the invoice.
   */
  readonly billingPeriodEndDate?: Date;
  /**
   * Identifier for the billing profile that groups costs across invoices in the a singular billing currency across across the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.
   */
  readonly billingProfileId?: string;
  /**
   * Name of the billing profile that groups costs across invoices in the a singular billing currency across across the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.
   */
  readonly billingProfileName?: string;
  /**
   * Unique Microsoft generated identifier for the Azure Subscription.
   */
  readonly subscriptionGuid?: string;
  /**
   * Name of the Azure Subscription.
   */
  readonly subscriptionName?: string;
  /**
   * Date for the usage record.
   */
  readonly date?: Date;
  /**
   * Name of the product that has accrued charges by consumption or purchase as listed in the invoice. Not available for Marketplace.
   */
  readonly product?: string;
  /**
   * The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.
   */
  readonly meterId?: string;
  /**
   * Identifies the name of the meter against which consumption is measured.
   */
  readonly meterName?: string;
  /**
   * Identifies the location of the datacenter for certain services that are priced based on datacenter location.
   */
  readonly meterRegion?: string;
  /**
   * Identifies the top-level service for the usage.
   */
  readonly meterCategory?: string;
  /**
   * Defines the type or sub-category of Azure service that can affect the rate.
   */
  readonly meterSubCategory?: string;
  /**
   * List the service family for the product purchased or charged (Example: Storage ; Compute).
   */
  readonly serviceFamily?: string;
  /**
   * Measure the quantity purchased or consumed.The amount of the meter used during the billing period.
   */
  readonly quantity?: number;
  /**
   * Identifies the Unit that the service is charged in. For example, GB, hours, 10,000 s.
   */
  readonly unitOfMeasure?: string;
  /**
   * Instance Name.
   */
  readonly instanceName?: string;
  /**
   * Estimated extendedCost or blended cost before tax in USD.
   */
  readonly costInUSD?: number;
  /**
   * Unit Price is the price applicable to you. (your EA or other contract price).
   */
  readonly unitPrice?: number;
  /**
   * The currency defining the billed cost.
   */
  readonly billingCurrencyCode?: string;
  /**
   * Name of the resource location.
   */
  readonly resourceLocation?: string;
  /**
   * Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided for marketplace usage.
   */
  readonly consumedService?: string;
  /**
   * Service Info 1.
   */
  readonly serviceInfo1?: string;
  /**
   * Service Info 2.
   */
  readonly serviceInfo2?: string;
  /**
   * Additional details of this usage item. Use this field to get usage line item specific details such as the actual VM Size (ServiceType) or the ratio in which the reservation discount is applied.
   */
  readonly additionalInfo?: string;
  /**
   * Identifier of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by partners.
   */
  readonly invoiceSectionId?: string;
  /**
   * Name of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by partners.
   */
  readonly invoiceSectionName?: string;
  /**
   * The cost center of this department if it is a department and a cost center is provided.
   */
  readonly costCenter?: string;
  /**
   * Name of the Azure resource group used for cohesive lifecycle management of resources.
   */
  readonly resourceGroup?: string;
  /**
   * ARM resource id of the reservation. Only applies to records relevant to reservations.
   */
  readonly reservationId?: string;
  /**
   * User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only applies to records relevant to reservations.
   */
  readonly reservationName?: string;
  /**
   * The identifier for the asset or Azure plan name that the subscription belongs to. For example: Azure Plan. For reservations this is the Reservation Order ID.
   */
  readonly productOrderId?: string;
  /**
   * Product Order Name. For reservations this is the SKU that was purchased.
   */
  readonly productOrderName?: string;
  /**
   * Determines if the cost is eligible to be paid for using Azure credits.
   */
  readonly isAzureCreditEligible?: boolean;
  /**
   * Term (in months). Displays the term for the validity of the offer. For example. In case of reserved instances it displays 12 months for yearly term of reserved instance. For one time purchases or recurring purchases, the terms displays 1 month; This is not applicable for Azure consumption.
   */
  readonly term?: string;
  /**
   * Name of the publisher of the service including Microsoft or Third Party publishers.
   */
  readonly publisherName?: string;
  /**
   * Type of publisher that identifies if the publisher is first party, third party reseller or third party agency.
   */
  readonly publisherType?: string;
  /**
   * Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
   */
  readonly chargeType?: string;
  /**
   * Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which recur every month, and UsageBased for charges based on how much a service is used.
   */
  readonly frequency?: string;
  /**
   * ExtendedCost or blended cost before tax in billed currency.
   */
  readonly costInBillingCurrency?: number;
  /**
   * ExtendedCost or blended cost before tax in pricing currency to correlate with prices.
   */
  readonly costInPricingCurrency?: number;
  /**
   * Exchange rate used in conversion from pricing currency to billing currency.
   */
  readonly exchangeRate?: string;
  /**
   * Date on which exchange rate used in conversion from pricing currency to billing currency.
   */
  readonly exchangeRateDate?: Date;
  /**
   * Invoice ID as on the invoice where the specific transaction appears.
   */
  readonly invoiceId?: string;
  /**
   * Reference to an original invoice there is a refund (negative cost). This is populated only when there is a refund.
   */
  readonly previousInvoiceId?: string;
  /**
   * Pricing Billing Currency.
   */
  readonly pricingCurrencyCode?: string;
  /**
   * Identifer for the product that has accrued charges by consumption or purchase . This is the concatenated key of productId and SKuId in partner center.
   */
  readonly productIdentifier?: string;
  /**
   * Resource Location Normalized.
   */
  readonly resourceLocationNormalized?: string;
  /**
   * Start date for the rating period when the service usage was rated for charges. The prices for Azure services are determined for the rating period.
   */
  readonly servicePeriodStartDate?: Date;
  /**
   * End date for the period when the service usage was rated for charges. The prices for Azure services are determined based on the rating period.
   */
  readonly servicePeriodEndDate?: Date;
  /**
   * Identifier of the customer's AAD tenant.
   */
  readonly customerTenantId?: string;
  /**
   * Name of the customer's AAD tenant.
   */
  readonly customerName?: string;
  /**
   * Identifier for the partner's AAD tenant.
   */
  readonly partnerTenantId?: string;
  /**
   * Name of the partner' AAD tenant.
   */
  readonly partnerName?: string;
  /**
   * MPNId for the reseller associated with the subscription.
   */
  readonly resellerMpnId?: string;
  /**
   * Reseller Name.
   */
  readonly resellerName?: string;
  /**
   * Publisher Id.
   */
  readonly publisherId?: string;
  /**
   * Market Price that's charged for the usage.
   */
  readonly marketPrice?: number;
  /**
   * Exchange Rate from pricing currency to billing currency.
   */
  readonly exchangeRatePricingToBilling?: number;
  /**
   * The amount of PayG cost before tax in billing currency.
   */
  readonly paygCostInBillingCurrency?: number;
  /**
   * The amount of PayG cost before tax in US Dollar currency.
   */
  readonly paygCostInUSD?: number;
  /**
   * Rate of discount applied if there is a partner earned credit (PEC) based on partner admin link access.
   */
  readonly partnerEarnedCreditRate?: number;
  /**
   * Flag to indicate if partner earned credit has been applied or not.
   */
  readonly partnerEarnedCreditApplied?: string;
};

/**
 * Legacy reservation recommendation.
 */
export type LegacyReservationRecommendation = ReservationRecommendation & {
  /**
   * The number of days of usage to look back for recommendation.
   */
  readonly lookBackPeriod?: string;
  /**
   * The instance Flexibility Ratio.
   */
  readonly instanceFlexibilityRatio?: number;
  /**
   * The instance Flexibility Group.
   */
  readonly instanceFlexibilityGroup?: string;
  /**
   * The normalized Size.
   */
  readonly normalizedSize?: string;
  /**
   * The recommended Quantity Normalized.
   */
  readonly recommendedQuantityNormalized?: number;
  /**
   * The meter id (GUID)
   */
  readonly meterId?: string;
  /**
   * RI recommendations in one or three year terms.
   */
  readonly term?: string;
  /**
   * The total amount of cost without reserved instances.
   */
  readonly costWithNoReservedInstances?: number;
  /**
   * Recommended quality for reserved instances.
   */
  readonly recommendedQuantity?: number;
  /**
   * The total amount of cost with reserved instances.
   */
  readonly totalCostWithReservedInstances?: number;
  /**
   * Total estimated savings with reserved instances.
   */
  readonly netSavings?: number;
  /**
   * The usage date for looking back.
   */
  readonly firstUsageDate?: Date;
  /**
   * Shared or single recommendation.
   */
  readonly scope?: string;
  /**
   * List of sku properties
   */
  readonly skuProperties?: SkuProperty[];
};

/**
 * The Sku property
 */
export interface SkuProperty {
  /**
   * The name of sku property.
   */
  readonly name?: string;
  /**
   * The value of sku property.
   */
  readonly value?: string;
}

/**
 * Modern reservation recommendation.
 */
export type ModernReservationRecommendation = ReservationRecommendation & {
  /**
   * The number of days of usage to look back for recommendation.
   */
  readonly lookBackPeriod?: string;
  /**
   * The instance Flexibility Ratio.
   */
  readonly instanceFlexibilityRatio?: number;
  /**
   * The instance Flexibility Group.
   */
  readonly instanceFlexibilityGroup?: string;
  /**
   * The normalized Size.
   */
  readonly normalizedSize?: string;
  /**
   * The recommended Quantity Normalized.
   */
  readonly recommendedQuantityNormalized?: number;
  /**
   * The meter id (GUID)
   */
  readonly meterId?: string;
  /**
   * RI recommendations in one or three year terms.
   */
  readonly term?: string;
  /**
   * The total amount of cost without reserved instances.
   */
  readonly costWithNoReservedInstances?: Amount;
  /**
   * Recommended quality for reserved instances.
   */
  readonly recommendedQuantity?: number;
  /**
   * The total amount of cost with reserved instances.
   */
  readonly totalCostWithReservedInstances?: Amount;
  /**
   * Total estimated savings with reserved instances.
   */
  readonly netSavings?: Amount;
  /**
   * The usage date for looking back.
   */
  readonly firstUsageDate?: Date;
  /**
   * Shared or single recommendation.
   */
  readonly scope?: string;
  /**
   * List of sku properties
   */
  readonly skuProperties?: SkuProperty[];
};

/**
 * Legacy charge summary.
 */
export type LegacyChargeSummary = ChargeSummary & {
  /**
   * The id of the billing period resource that the charge belongs to.
   */
  readonly billingPeriodId?: string;
  /**
   * Usage start date.
   */
  readonly usageStart?: string;
  /**
   * Usage end date.
   */
  readonly usageEnd?: string;
  /**
   * Azure Charges.
   */
  readonly azureCharges?: number;
  /**
   * Charges Billed separately.
   */
  readonly chargesBilledSeparately?: number;
  /**
   * Marketplace Charges.
   */
  readonly marketplaceCharges?: number;
  /**
   * Currency Code
   */
  readonly currency?: string;
};

/**
 * Modern charge summary.
 */
export type ModernChargeSummary = ChargeSummary & {
  /**
   * The id of the billing period resource that the charge belongs to.
   */
  readonly billingPeriodId?: string;
  /**
   * Usage start date.
   */
  readonly usageStart?: string;
  /**
   * Usage end date.
   */
  readonly usageEnd?: string;
  /**
   * Azure Charges.
   */
  readonly azureCharges?: Amount;
  /**
   * Charges Billed separately.
   */
  readonly chargesBilledSeparately?: Amount;
  /**
   * Marketplace Charges.
   */
  readonly marketplaceCharges?: Amount;
  /**
   * Billing Account Id
   */
  readonly billingAccountId?: string;
  /**
   * Billing Profile Id
   */
  readonly billingProfileId?: string;
  /**
   * Invoice Section Id
   */
  readonly invoiceSectionId?: string;
  /**
   * Customer Id
   */
  readonly customerId?: string;
  /**
   * Is charge Invoiced
   */
  readonly isInvoiced?: boolean;
};
/**
 * Defines values for Metrictype.
 */
export type Metrictype = "actualcost" | "amortizedcost" | "usage";
/**
 * Defines values for UsageDetailsKind.
 */
export type UsageDetailsKind = "legacy" | "modern";
/**
 * Defines values for CategoryType.
 */
export type CategoryType = "Cost" | "Usage";
/**
 * Defines values for TimeGrainType.
 */
export type TimeGrainType =
  | "Monthly"
  | "Quarterly"
  | "Annually"
  | "BillingMonth"
  | "BillingQuarter"
  | "BillingAnnual";
/**
 * Defines values for OperatorType.
 */
export type OperatorType = "EqualTo" | "GreaterThan" | "GreaterThanOrEqualTo";
/**
 * Defines values for ChargeSummaryKind.
 */
export type ChargeSummaryKind = "legacy" | "modern";
/**
 * Defines values for BillingFrequency.
 */
export type BillingFrequency = "Month" | "Quarter" | "Year";
/**
 * Defines values for Datagrain.
 */
export type Datagrain = "daily" | "monthly";
/**
 * Defines values for ReservationRecommendationKind.
 */
export type ReservationRecommendationKind = "legacy" | "modern";
/**
 * Defines values for Grain.
 */
export type Grain = "Daily" | "Monthly" | "Yearly";
/**
 * Defines values for ChargeType.
 */
export type ChargeType = "Actual" | "Forecast";
/**
 * Defines values for Bound.
 */
export type Bound = "Upper" | "Lower";
/**
 * Defines values for EventType.
 */
export type EventType =
  | "SettledCharges"
  | "PendingCharges"
  | "PendingAdjustments"
  | "PendingNewCredit"
  | "PendingExpiredCredit"
  | "UnKnown"
  | "NewCredit";
/**
 * Defines values for LotSource.
 */
export type LotSource = "PurchasedCredit" | "PromotionalCredit";

/**
 * Optional parameters.
 */
export interface UsageDetailsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to expand the properties/additionalInfo or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
   */
  expand?: string;
  /**
   * May be used to filter usageDetails by properties/resourceGroup, properties/resourceName, properties/resourceId, properties/chargeType, properties/reservationId, properties/publisherType or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:). PublisherType Filter accepts two values azure and marketplace and it is currently supported for Web Direct Offer Type
   */
  filter?: string;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
  /**
   * Allows to select different type of cost/usage records.
   */
  metric?: Metrictype;
}

/**
 * Contains response data for the list operation.
 */
export type UsageDetailsListResponse = UsageDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageDetailsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface UsageDetailsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to expand the properties/additionalInfo or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
   */
  expand?: string;
  /**
   * May be used to filter usageDetails by properties/resourceGroup, properties/resourceName, properties/resourceId, properties/chargeType, properties/reservationId, properties/publisherType or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:). PublisherType Filter accepts two values azure and marketplace and it is currently supported for Web Direct Offer Type
   */
  filter?: string;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
  /**
   * Allows to select different type of cost/usage records.
   */
  metric?: Metrictype;
}

/**
 * Contains response data for the listNext operation.
 */
export type UsageDetailsListNextResponse = UsageDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsageDetailsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface MarketplacesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
   */
  filter?: string;
  /**
   * May be used to limit the number of results to the most recent N marketplaces.
   */
  top?: number;
}

/**
 * Contains response data for the list operation.
 */
export type MarketplacesListResponse = MarketplacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MarketplacesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface MarketplacesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
   */
  filter?: string;
  /**
   * May be used to limit the number of results to the most recent N marketplaces.
   */
  top?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type MarketplacesListNextResponse = MarketplacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MarketplacesListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BudgetsListResponse = BudgetsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BudgetsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BudgetsGetResponse = Budget & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Budget;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BudgetsCreateOrUpdateResponse = Budget & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Budget;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type BudgetsListNextResponse = BudgetsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BudgetsListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TagsGetResponse = TagsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TagsResult;
  };
};

/**
 * Optional parameters.
 */
export interface ChargesListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Start date
   */
  startDate?: string;
  /**
   * End date
   */
  endDate?: string;
  /**
   * May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
   */
  filter?: string;
  /**
   * May be used to group charges for billingAccount scope by properties/billingProfileId, properties/invoiceSectionId, properties/customerId (specific for Partner Led), or for billingProfile scope by properties/invoiceSectionId.
   */
  apply?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ChargesListResponse = ChargesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChargesListResult;
  };
};

/**
 * Contains response data for the getByBillingAccount operation.
 */
export type BalancesGetByBillingAccountResponse = Balance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Balance;
  };
};

/**
 * Contains response data for the getForBillingPeriodByBillingAccount operation.
 */
export type BalancesGetForBillingPeriodByBillingAccountResponse = Balance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Balance;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationsSummariesListByReservationOrderOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'
   */
  filter?: string;
}

/**
 * Contains response data for the listByReservationOrder operation.
 */
export type ReservationsSummariesListByReservationOrderResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationSummariesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationsSummariesListByReservationOrderAndReservationOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'
   */
  filter?: string;
}

/**
 * Contains response data for the listByReservationOrderAndReservation operation.
 */
export type ReservationsSummariesListByReservationOrderAndReservationResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationSummariesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationsSummariesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start date. Only applicable when querying with billing profile
   */
  startDate?: string;
  /**
   * End date. Only applicable when querying with billing profile
   */
  endDate?: string;
  /**
   * Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'. Not applicable when querying with billing profile
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ReservationsSummariesListResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationSummariesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationsSummariesListByReservationOrderNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'
   */
  filter?: string;
}

/**
 * Contains response data for the listByReservationOrderNext operation.
 */
export type ReservationsSummariesListByReservationOrderNextResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationSummariesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationsSummariesListByReservationOrderAndReservationNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'
   */
  filter?: string;
}

/**
 * Contains response data for the listByReservationOrderAndReservationNext operation.
 */
export type ReservationsSummariesListByReservationOrderAndReservationNextResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationSummariesListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationsSummariesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start date. Only applicable when querying with billing profile
   */
  startDate?: string;
  /**
   * End date. Only applicable when querying with billing profile
   */
  endDate?: string;
  /**
   * Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'. Not applicable when querying with billing profile
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ReservationsSummariesListNextResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationSummariesListResult;
  };
};

/**
 * Contains response data for the listByReservationOrder operation.
 */
export type ReservationsDetailsListByReservationOrderResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationDetailsListResult;
  };
};

/**
 * Contains response data for the listByReservationOrderAndReservation operation.
 */
export type ReservationsDetailsListByReservationOrderAndReservationResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationDetailsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationsDetailsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start date. Only applicable when querying with billing profile
   */
  startDate?: string;
  /**
   * End date. Only applicable when querying with billing profile
   */
  endDate?: string;
  /**
   * Filter reservation details by date range. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'. Not applicable when querying with billing profile
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ReservationsDetailsListResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationDetailsListResult;
  };
};

/**
 * Contains response data for the listByReservationOrderNext operation.
 */
export type ReservationsDetailsListByReservationOrderNextResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationDetailsListResult;
  };
};

/**
 * Contains response data for the listByReservationOrderAndReservationNext operation.
 */
export type ReservationsDetailsListByReservationOrderAndReservationNextResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationDetailsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationsDetailsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Start date. Only applicable when querying with billing profile
   */
  startDate?: string;
  /**
   * End date. Only applicable when querying with billing profile
   */
  endDate?: string;
  /**
   * Filter reservation details by date range. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'. Not applicable when querying with billing profile
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ReservationsDetailsListNextResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationDetailsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationRecommendationsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to filter reservationRecommendations by: properties/scope with allowed values ['Single', 'Shared'] and default value 'Single'; properties/resourceType with allowed values ['VirtualMachines', 'SQLDatabases', 'PostgreSQL', 'ManagedDisk', 'MySQL', 'RedHat', 'MariaDB', 'RedisCache', 'CosmosDB', 'SqlDataWarehouse', 'SUSELinux', 'AppService', 'BlockBlob', 'AzureDataExplorer', 'VMwareCloudSimple'] and default value 'VirtualMachines'; and properties/lookBackPeriod with allowed values ['Last7Days', 'Last30Days', 'Last60Days'] and default value 'Last7Days'.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ReservationRecommendationsListResponse = ReservationRecommendationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationRecommendationsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationRecommendationsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to filter reservationRecommendations by: properties/scope with allowed values ['Single', 'Shared'] and default value 'Single'; properties/resourceType with allowed values ['VirtualMachines', 'SQLDatabases', 'PostgreSQL', 'ManagedDisk', 'MySQL', 'RedHat', 'MariaDB', 'RedisCache', 'CosmosDB', 'SqlDataWarehouse', 'SUSELinux', 'AppService', 'BlockBlob', 'AzureDataExplorer', 'VMwareCloudSimple'] and default value 'VirtualMachines'; and properties/lookBackPeriod with allowed values ['Last7Days', 'Last30Days', 'Last60Days'] and default value 'Last7Days'.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ReservationRecommendationsListNextResponse = ReservationRecommendationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationRecommendationsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationTransactionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter reservation transactions by date range. The properties/EventDate for start date and end date. The filter supports 'le' and  'ge'
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ReservationTransactionsListResponse = ReservationTransactionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationTransactionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ReservationTransactionsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Filter reservation transactions by date range. The properties/EventDate for start date and end date. The filter supports 'le' and  'ge'
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ReservationTransactionsListNextResponse = ReservationTransactionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationTransactionsListResult;
  };
};

/**
 * Optional parameters.
 */
export interface PriceSheetGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to expand the properties/meterDetails within a price sheet. By default, these fields are not included when returning price sheet.
   */
  expand?: string;
  /**
   * May be used to limit the number of results to the top N results.
   */
  top?: number;
}

/**
 * Contains response data for the get operation.
 */
export type PriceSheetGetResponse = PriceSheetResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PriceSheetResult;
  };
};

/**
 * Optional parameters.
 */
export interface PriceSheetGetByBillingPeriodOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to expand the properties/meterDetails within a price sheet. By default, these fields are not included when returning price sheet.
   */
  expand?: string;
  /**
   * May be used to limit the number of results to the top N results.
   */
  top?: number;
}

/**
 * Contains response data for the getByBillingPeriod operation.
 */
export type PriceSheetGetByBillingPeriodResponse = PriceSheetResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PriceSheetResult;
  };
};

/**
 * Optional parameters.
 */
export interface ForecastsListOptionalParams extends coreHttp.OperationOptions {
  /**
   * May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ForecastsListResponse = ForecastsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ForecastsListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface AggregatedCostGetByManagementGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * May be used to filter aggregated cost by properties/usageStart (Utc time), properties/usageEnd (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
   */
  filter?: string;
}

/**
 * Contains response data for the getByManagementGroup operation.
 */
export type AggregatedCostGetByManagementGroupResponse = ManagementGroupAggregatedCostResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagementGroupAggregatedCostResult;
  };
};

/**
 * Contains response data for the getForBillingPeriodByManagementGroup operation.
 */
export type AggregatedCostGetForBillingPeriodByManagementGroupResponse = ManagementGroupAggregatedCostResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagementGroupAggregatedCostResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type EventsListResponse = Events & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Events;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type EventsListNextResponse = Events & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Events;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LotsListResponse = Lots & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Lots;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LotsListNextResponse = Lots & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Lots;
  };
};

/**
 * Contains response data for the get operation.
 */
export type CreditsGetResponse = CreditSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CreditSummary;
  };
};

/**
 * Optional parameters.
 */
export interface ConsumptionManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
