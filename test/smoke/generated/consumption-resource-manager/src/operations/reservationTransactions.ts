/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClient } from "../consumptionManagementClient";
import {
  ReservationTransactionsListOptionalParams,
  ReservationTransactionsListResponse,
  ReservationTransactionsListNextOptionalParams,
  ReservationTransactionsListNextResponse
} from "../models";

/**
 * Class representing a ReservationTransactions.
 */
export class ReservationTransactions {
  private readonly client: ConsumptionManagementClient;

  /**
   * Initialize a new instance of the class ReservationTransactions class.
   * @param client Reference to the service client
   */
  constructor(client: ConsumptionManagementClient) {
    this.client = client;
  }

  /**
   * List of transactions for reserved instances on billing account scope
   * @param billingAccountId BillingAccount ID
   * @param options The options parameters.
   */
  list(
    billingAccountId: string,
    options?: ReservationTransactionsListOptionalParams
  ): Promise<ReservationTransactionsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountId, options: operationOptions },
      listOperationSpec
    ) as Promise<ReservationTransactionsListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param billingAccountId BillingAccount ID
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    billingAccountId: string,
    options?: ReservationTransactionsListNextOptionalParams
  ): Promise<ReservationTransactionsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, billingAccountId, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReservationTransactionsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/reservationTransactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationTransactionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter8],
  urlParameters: [Parameters.$host, Parameters.billingAccountId],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationTransactionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter8],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountId
  ],
  serializer
};
