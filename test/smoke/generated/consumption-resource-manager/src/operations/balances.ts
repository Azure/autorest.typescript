/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClient } from "../consumptionManagementClient";
import {
  BalancesGetByBillingAccountResponse,
  BalancesGetForBillingPeriodByBillingAccountResponse
} from "../models";

/**
 * Class representing a Balances.
 */
export class Balances {
  private readonly client: ConsumptionManagementClient;

  /**
   * Initialize a new instance of the class Balances class.
   * @param client Reference to the service client
   */
  constructor(client: ConsumptionManagementClient) {
    this.client = client;
  }

  /**
   * Gets the balances for a scope by billingAccountId. Balances are available via this API only for May
   * 1, 2014 or later.
   * @param billingAccountId BillingAccount ID
   * @param options The options parameters.
   */
  getByBillingAccount(
    billingAccountId: string,
    options?: coreHttp.OperationOptions
  ): Promise<BalancesGetByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountId, options: operationOptions },
      getByBillingAccountOperationSpec
    ) as Promise<BalancesGetByBillingAccountResponse>;
  }

  /**
   * Gets the balances for a scope by billing period and billingAccountId. Balances are available via
   * this API only for May 1, 2014 or later.
   * @param billingAccountId BillingAccount ID
   * @param billingPeriodName Billing Period Name.
   * @param options The options parameters.
   */
  getForBillingPeriodByBillingAccount(
    billingAccountId: string,
    billingPeriodName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BalancesGetForBillingPeriodByBillingAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { billingAccountId, billingPeriodName, options: operationOptions },
      getForBillingPeriodByBillingAccountOperationSpec
    ) as Promise<BalancesGetForBillingPeriodByBillingAccountResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/balances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Balance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountId],
  serializer
};
const getForBillingPeriodByBillingAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/balances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Balance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountId,
    Parameters.billingPeriodName
  ],
  serializer
};
