/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClient } from "../consumptionManagementClient";
import {
  ReservationsDetailsListByReservationOrderResponse,
  ReservationsDetailsListByReservationOrderAndReservationResponse,
  ReservationsDetailsListOptionalParams,
  ReservationsDetailsListResponse,
  ReservationsDetailsListByReservationOrderNextResponse,
  ReservationsDetailsListByReservationOrderAndReservationNextResponse,
  ReservationsDetailsListNextOptionalParams,
  ReservationsDetailsListNextResponse
} from "../models";

/**
 * Class representing a ReservationsDetails.
 */
export class ReservationsDetails {
  private readonly client: ConsumptionManagementClient;

  /**
   * Initialize a new instance of the class ReservationsDetails class.
   * @param client Reference to the service client
   */
  constructor(client: ConsumptionManagementClient) {
    this.client = client;
  }

  /**
   * Lists the reservations details for provided date range.
   * @param reservationOrderId Order Id of the reservation
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date and
   *               end date. The filter supports 'le' and  'ge'
   * @param options The options parameters.
   */
  listByReservationOrder(
    reservationOrderId: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReservationsDetailsListByReservationOrderResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { reservationOrderId, filter, options: operationOptions },
      listByReservationOrderOperationSpec
    ) as Promise<ReservationsDetailsListByReservationOrderResponse>;
  }

  /**
   * Lists the reservations details for provided date range.
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the reservation
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date and
   *               end date. The filter supports 'le' and  'ge'
   * @param options The options parameters.
   */
  listByReservationOrderAndReservation(
    reservationOrderId: string,
    reservationId: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReservationsDetailsListByReservationOrderAndReservationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { reservationOrderId, reservationId, filter, options: operationOptions },
      listByReservationOrderAndReservationOperationSpec
    ) as Promise<
      ReservationsDetailsListByReservationOrderAndReservationResponse
    >;
  }

  /**
   * Lists the reservations details for the defined scope and provided date range.
   * @param scope The scope associated with reservations details operations. This includes
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope (legacy),
   *              and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope (modern).
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: ReservationsDetailsListOptionalParams
  ): Promise<ReservationsDetailsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, options: operationOptions },
      listOperationSpec
    ) as Promise<ReservationsDetailsListResponse>;
  }

  /**
   * ListByReservationOrderNext
   * @param reservationOrderId Order Id of the reservation
   * @param nextLink The nextLink from the previous successful call to the ListByReservationOrder method.
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date and
   *               end date. The filter supports 'le' and  'ge'
   * @param options The options parameters.
   */
  listByReservationOrderNext(
    reservationOrderId: string,
    nextLink: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): Promise<ReservationsDetailsListByReservationOrderNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { reservationOrderId, nextLink, filter, options: operationOptions },
      listByReservationOrderNextOperationSpec
    ) as Promise<ReservationsDetailsListByReservationOrderNextResponse>;
  }

  /**
   * ListByReservationOrderAndReservationNext
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the reservation
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByReservationOrderAndReservation method.
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date and
   *               end date. The filter supports 'le' and  'ge'
   * @param options The options parameters.
   */
  listByReservationOrderAndReservationNext(
    reservationOrderId: string,
    reservationId: string,
    nextLink: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    ReservationsDetailsListByReservationOrderAndReservationNextResponse
  > {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        reservationOrderId,
        reservationId,
        nextLink,
        filter,
        options: operationOptions
      },
      listByReservationOrderAndReservationNextOperationSpec
    ) as Promise<
      ReservationsDetailsListByReservationOrderAndReservationNextResponse
    >;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param scope The scope associated with reservations details operations. This includes
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope (legacy),
   *              and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope (modern).
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    scope: string,
    options?: ReservationsDetailsListNextOptionalParams
  ): Promise<ReservationsDetailsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, scope, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReservationsDetailsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByReservationOrderOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationDetails",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter5],
  urlParameters: [Parameters.$host, Parameters.reservationOrderId],
  serializer
};
const listByReservationOrderAndReservationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationDetails",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter5],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Consumption/reservationDetails",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startDate1,
    Parameters.endDate1,
    Parameters.filter6
  ],
  urlParameters: [Parameters.$host, Parameters.scope6],
  serializer
};
const listByReservationOrderNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter5],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.nextLink1
  ],
  serializer
};
const listByReservationOrderAndReservationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter5],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId,
    Parameters.nextLink2
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startDate1,
    Parameters.endDate1,
    Parameters.filter6
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope6],
  serializer
};
