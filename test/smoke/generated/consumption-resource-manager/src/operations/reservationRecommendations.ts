/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClient } from "../consumptionManagementClient";
import {
  ReservationRecommendationsListOptionalParams,
  ReservationRecommendationsListResponse,
  ReservationRecommendationsListNextOptionalParams,
  ReservationRecommendationsListNextResponse
} from "../models";

/**
 * Class representing a ReservationRecommendations.
 */
export class ReservationRecommendations {
  private readonly client: ConsumptionManagementClient;

  /**
   * Initialize a new instance of the class ReservationRecommendations class.
   * @param client Reference to the service client
   */
  constructor(client: ConsumptionManagementClient) {
    this.client = client;
  }

  /**
   * List of recommendations for purchasing reserved instances.
   * @param scope The scope associated with reservation recommendations operations. This includes
   *              '/subscriptions/{subscriptionId}/' for subscription scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for billingProfile scope
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: ReservationRecommendationsListOptionalParams
  ): Promise<ReservationRecommendationsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { scope, options: operationOptions },
      listOperationSpec
    ) as Promise<ReservationRecommendationsListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param scope The scope associated with reservation recommendations operations. This includes
   *              '/subscriptions/{subscriptionId}/' for subscription scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for billingProfile scope
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    scope: string,
    options?: ReservationRecommendationsListNextOptionalParams
  ): Promise<ReservationRecommendationsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, scope, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ReservationRecommendationsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Consumption/reservationRecommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationRecommendationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter7],
  urlParameters: [Parameters.$host, Parameters.scope7],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationRecommendationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter7],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope7],
  serializer
};
