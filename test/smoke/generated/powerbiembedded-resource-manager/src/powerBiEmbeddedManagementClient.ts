/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { PowerBiEmbeddedManagementClientContext } from "./powerBiEmbeddedManagementClientContext";
import { PowerBIEmbeddedManagementClientGetAvailableOperationsResponse } from "./models";

class PowerBiEmbeddedManagementClient extends PowerBiEmbeddedManagementClientContext {
  /**
   * Initializes a new instance of the PowerBiEmbeddedManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Gets subscription credentials which uniquely identify a Microsoft Azure
   *                       subscription. The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.PowerBiEmbeddedManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.workspaceCollections = new operations.WorkspaceCollections(this);
    this.workspaces = new operations.Workspaces(this);
  }

  /**
   * Indicates which operations can be performed by the Power BI Resource Provider.
   * @param options The options parameters.
   */
  getAvailableOperations(
    options?: coreHttp.OperationOptions
  ): Promise<PowerBIEmbeddedManagementClientGetAvailableOperationsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getAvailableOperationsOperationSpec
    ) as Promise<PowerBIEmbeddedManagementClientGetAvailableOperationsResponse>;
  }

  workspaceCollections: operations.WorkspaceCollections;
  workspaces: operations.Workspaces;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getAvailableOperationsOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.PowerBI/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};

// Operation Specifications

export {
  PowerBiEmbeddedManagementClient,
  PowerBiEmbeddedManagementClientContext,
  Models as PowerBiEmbeddedManagementModels,
  Mappers as PowerBiEmbeddedManagementMappers
};
export * from "./operations";
