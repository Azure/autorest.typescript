/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PowerBiEmbeddedManagementClient } from "../powerBiEmbeddedManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  WorkspaceCollectionsGetByNameResponse,
  CreateWorkspaceCollectionRequest,
  WorkspaceCollectionsCreateResponse,
  UpdateWorkspaceCollectionRequest,
  WorkspaceCollectionsUpdateResponse,
  CheckNameRequest,
  WorkspaceCollectionsCheckNameAvailabilityResponse,
  WorkspaceCollectionsListByResourceGroupResponse,
  WorkspaceCollectionsListBySubscriptionResponse,
  WorkspaceCollectionsGetAccessKeysResponse,
  WorkspaceCollectionAccessKey,
  WorkspaceCollectionsRegenerateKeyResponse,
  MigrateWorkspaceCollectionRequest
} from "../models";

/**
 * Class representing a WorkspaceCollections.
 */
export class WorkspaceCollections {
  private readonly client: PowerBiEmbeddedManagementClient;

  /**
   * Initialize a new instance of the class WorkspaceCollections class.
   * @param client Reference to the service client
   */
  constructor(client: PowerBiEmbeddedManagementClient) {
    this.client = client;
  }

  /**
   * Retrieves an existing Power BI Workspace Collection.
   * @param resourceGroupName Azure resource group
   * @param workspaceCollectionName Power BI Embedded Workspace Collection name
   * @param options The options parameters.
   */
  getByName(
    resourceGroupName: string,
    workspaceCollectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspaceCollectionsGetByNameResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceCollectionName, options: operationOptions },
      getByNameOperationSpec
    ) as Promise<WorkspaceCollectionsGetByNameResponse>;
  }

  /**
   * Creates a new Power BI Workspace Collection with the specified properties. A Power BI Workspace
   * Collection contains one or more workspaces, and can be used to provision keys that provide API
   * access to those workspaces.
   * @param resourceGroupName Azure resource group
   * @param workspaceCollectionName Power BI Embedded Workspace Collection name
   * @param body Create workspace collection request
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    workspaceCollectionName: string,
    body: CreateWorkspaceCollectionRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspaceCollectionsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceCollectionName,
        body,
        options: operationOptions
      },
      createOperationSpec
    ) as Promise<WorkspaceCollectionsCreateResponse>;
  }

  /**
   * Update an existing Power BI Workspace Collection with the specified properties.
   * @param resourceGroupName Azure resource group
   * @param workspaceCollectionName Power BI Embedded Workspace Collection name
   * @param body Update workspace collection request
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    workspaceCollectionName: string,
    body: UpdateWorkspaceCollectionRequest,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspaceCollectionsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceCollectionName,
        body,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<WorkspaceCollectionsUpdateResponse>;
  }

  /**
   * Delete a Power BI Workspace Collection.
   * @param resourceGroupName Azure resource group
   * @param workspaceCollectionName Power BI Embedded Workspace Collection name
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    workspaceCollectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      workspaceCollectionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Verify the specified Power BI Workspace Collection name is valid and not already in use.
   * @param body Check name availability request
   * @param location Azure location
   * @param options The options parameters.
   */
  checkNameAvailability(
    body: CheckNameRequest,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspaceCollectionsCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { body, location, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<WorkspaceCollectionsCheckNameAvailabilityResponse>;
  }

  /**
   * Retrieves all existing Power BI workspace collections in the specified resource group.
   * @param resourceGroupName Azure resource group
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspaceCollectionsListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<WorkspaceCollectionsListByResourceGroupResponse>;
  }

  /**
   * Retrieves all existing Power BI workspace collections in the specified subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: coreHttp.OperationOptions
  ): Promise<WorkspaceCollectionsListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<WorkspaceCollectionsListBySubscriptionResponse>;
  }

  /**
   * Retrieves the primary and secondary access keys for the specified Power BI Workspace Collection.
   * @param resourceGroupName Azure resource group
   * @param workspaceCollectionName Power BI Embedded Workspace Collection name
   * @param options The options parameters.
   */
  getAccessKeys(
    resourceGroupName: string,
    workspaceCollectionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspaceCollectionsGetAccessKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceCollectionName, options: operationOptions },
      getAccessKeysOperationSpec
    ) as Promise<WorkspaceCollectionsGetAccessKeysResponse>;
  }

  /**
   * Regenerates the primary or secondary access key for the specified Power BI Workspace Collection.
   * @param resourceGroupName Azure resource group
   * @param workspaceCollectionName Power BI Embedded Workspace Collection name
   * @param body Access key to regenerate
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroupName: string,
    workspaceCollectionName: string,
    body: WorkspaceCollectionAccessKey,
    options?: coreHttp.OperationOptions
  ): Promise<WorkspaceCollectionsRegenerateKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceCollectionName,
        body,
        options: operationOptions
      },
      regenerateKeyOperationSpec
    ) as Promise<WorkspaceCollectionsRegenerateKeyResponse>;
  }

  /**
   * Migrates an existing Power BI Workspace Collection to a different resource group and/or
   * subscription.
   * @param resourceGroupName Azure resource group
   * @param body Workspace migration request
   * @param options The options parameters.
   */
  migrate(
    resourceGroupName: string,
    body: MigrateWorkspaceCollectionRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, body, options: operationOptions },
      migrateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getByNameOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceCollectionName
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceCollectionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceCollectionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceCollectionName
  ],
  serializer
};
const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBI/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceCollectionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBI/workspaceCollections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceCollectionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getAccessKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceCollectionAccessKeys
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceCollectionName
  ],
  serializer
};
const regenerateKeyOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}/regenerateKey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceCollectionAccessKeys
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceCollectionName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const migrateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
