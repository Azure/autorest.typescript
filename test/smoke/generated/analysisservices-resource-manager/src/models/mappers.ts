/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ResourceSku: coreHttp.CompositeMapper = {
  serializedName: "ResourceSku",
  type: {
    name: "Composite",
    className: "ResourceSku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 8,
          InclusiveMinimum: 1
        },
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AnalysisServicesServer: coreHttp.CompositeMapper = {
  serializedName: "AnalysisServicesServer",
  type: {
    name: "Composite",
    className: "AnalysisServicesServer",
    modelProperties: {
      ...Resource.type.modelProperties,
      asAdministrators: {
        serializedName: "asAdministrators",
        type: {
          name: "Composite",
          className: "ServerAdministrators"
        }
      },
      backupBlobContainerUri: {
        serializedName: "properties.backupBlobContainerUri",
        type: {
          name: "String"
        }
      },
      gatewayDetails: {
        serializedName: "gatewayDetails",
        type: {
          name: "Composite",
          className: "GatewayDetails"
        }
      },
      ipV4FirewallSettings: {
        serializedName: "ipV4FirewallSettings",
        type: {
          name: "Composite",
          className: "IPv4FirewallSettings"
        }
      },
      querypoolConnectionMode: {
        defaultValue: "All",
        serializedName: "properties.querypoolConnectionMode",
        type: {
          name: "Enum",
          allowedValues: ["All", "ReadOnly"]
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverFullName: {
        serializedName: "properties.serverFullName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalysisServicesServerMutableProperties: coreHttp.CompositeMapper = {
  serializedName: "AnalysisServicesServerMutableProperties",
  type: {
    name: "Composite",
    className: "AnalysisServicesServerMutableProperties",
    modelProperties: {
      asAdministrators: {
        serializedName: "asAdministrators",
        type: {
          name: "Composite",
          className: "ServerAdministrators"
        }
      },
      backupBlobContainerUri: {
        serializedName: "backupBlobContainerUri",
        type: {
          name: "String"
        }
      },
      gatewayDetails: {
        serializedName: "gatewayDetails",
        type: {
          name: "Composite",
          className: "GatewayDetails"
        }
      },
      ipV4FirewallSettings: {
        serializedName: "ipV4FirewallSettings",
        type: {
          name: "Composite",
          className: "IPv4FirewallSettings"
        }
      },
      querypoolConnectionMode: {
        defaultValue: "All",
        serializedName: "querypoolConnectionMode",
        type: {
          name: "Enum",
          allowedValues: ["All", "ReadOnly"]
        }
      }
    }
  }
};

export const ServerAdministrators: coreHttp.CompositeMapper = {
  serializedName: "ServerAdministrators",
  type: {
    name: "Composite",
    className: "ServerAdministrators",
    modelProperties: {
      members: {
        serializedName: "members",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ServerAdministratorsMembersItem"
          }
        }
      }
    }
  }
};

export const GatewayDetails: coreHttp.CompositeMapper = {
  serializedName: "GatewayDetails",
  type: {
    name: "Composite",
    className: "GatewayDetails",
    modelProperties: {
      gatewayResourceId: {
        serializedName: "gatewayResourceId",
        type: {
          name: "String"
        }
      },
      gatewayObjectId: {
        serializedName: "gatewayObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dmtsClusterUri: {
        serializedName: "dmtsClusterUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPv4FirewallSettings: coreHttp.CompositeMapper = {
  serializedName: "IPv4FirewallSettings",
  type: {
    name: "Composite",
    className: "IPv4FirewallSettings",
    modelProperties: {
      firewallRules: {
        serializedName: "firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "IPv4FirewallRule" }
          }
        }
      },
      enablePowerBIService: {
        serializedName: "enablePowerBIService",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const IPv4FirewallRule: coreHttp.CompositeMapper = {
  serializedName: "IPv4FirewallRule",
  type: {
    name: "Composite",
    className: "IPv4FirewallRule",
    modelProperties: {
      firewallRuleName: {
        serializedName: "firewallRuleName",
        type: {
          name: "String"
        }
      },
      rangeStart: {
        serializedName: "rangeStart",
        type: {
          name: "String"
        }
      },
      rangeEnd: {
        serializedName: "rangeEnd",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalysisServicesServerProperties: coreHttp.CompositeMapper = {
  serializedName: "AnalysisServicesServerProperties",
  type: {
    name: "Composite",
    className: "AnalysisServicesServerProperties",
    modelProperties: {
      ...AnalysisServicesServerMutableProperties.type.modelProperties,
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverFullName: {
        serializedName: "serverFullName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalysisServicesServerUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "AnalysisServicesServerUpdateParameters",
  type: {
    name: "Composite",
    className: "AnalysisServicesServerUpdateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      asAdministrators: {
        serializedName: "asAdministrators",
        type: {
          name: "Composite",
          className: "ServerAdministrators"
        }
      },
      backupBlobContainerUri: {
        serializedName: "properties.backupBlobContainerUri",
        type: {
          name: "String"
        }
      },
      gatewayDetails: {
        serializedName: "gatewayDetails",
        type: {
          name: "Composite",
          className: "GatewayDetails"
        }
      },
      ipV4FirewallSettings: {
        serializedName: "ipV4FirewallSettings",
        type: {
          name: "Composite",
          className: "IPv4FirewallSettings"
        }
      },
      querypoolConnectionMode: {
        defaultValue: "All",
        serializedName: "properties.querypoolConnectionMode",
        type: {
          name: "Enum",
          allowedValues: ["All", "ReadOnly"]
        }
      }
    }
  }
};

export const AnalysisServicesServers: coreHttp.CompositeMapper = {
  serializedName: "AnalysisServicesServers",
  type: {
    name: "Composite",
    className: "AnalysisServicesServers",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AnalysisServicesServer" }
          }
        }
      }
    }
  }
};

export const SkuEnumerationForNewResourceResult: coreHttp.CompositeMapper = {
  serializedName: "SkuEnumerationForNewResourceResult",
  type: {
    name: "Composite",
    className: "SkuEnumerationForNewResourceResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceSku" } }
        }
      }
    }
  }
};

export const SkuEnumerationForExistingResourceResult: coreHttp.CompositeMapper = {
  serializedName: "SkuEnumerationForExistingResourceResult",
  type: {
    name: "Composite",
    className: "SkuEnumerationForExistingResourceResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuDetailsForExistingResource"
            }
          }
        }
      }
    }
  }
};

export const SkuDetailsForExistingResource: coreHttp.CompositeMapper = {
  serializedName: "SkuDetailsForExistingResource",
  type: {
    name: "Composite",
    className: "SkuDetailsForExistingResource",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceSku"
        }
      }
    }
  }
};

export const GatewayListStatusLive: coreHttp.CompositeMapper = {
  serializedName: "GatewayListStatusLive",
  type: {
    name: "Composite",
    className: "GatewayListStatusLive",
    modelProperties: {
      status: {
        defaultValue: "Live",
        serializedName: "status",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayListStatusError: coreHttp.CompositeMapper = {
  serializedName: "GatewayListStatusError",
  type: {
    name: "Composite",
    className: "GatewayListStatusError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "GatewayError"
        }
      }
    }
  }
};

export const GatewayError: coreHttp.CompositeMapper = {
  serializedName: "GatewayError",
  type: {
    name: "Composite",
    className: "GatewayError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckServerNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckServerNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckServerNameAvailabilityParameters",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[a-z][a-z0-9]*$"),
          MaxLength: 63,
          MinLength: 3
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.AnalysisServices/servers",
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckServerNameAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckServerNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckServerNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatus: coreHttp.CompositeMapper = {
  serializedName: "OperationStatus",
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
