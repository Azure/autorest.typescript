/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureAnalysisServices } from "../azureAnalysisServices";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ServersGetDetailsResponse,
  AnalysisServicesServer,
  ServersCreateResponse,
  AnalysisServicesServerUpdateParameters,
  ServersUpdateResponse,
  ServersListByResourceGroupResponse,
  ServersListResponse,
  ServersListSkusForNewResponse,
  ServersListSkusForExistingResponse,
  ServersListGatewayStatusResponse,
  CheckServerNameAvailabilityParameters,
  ServersCheckNameAvailabilityResponse,
  ServersListOperationStatusesResponse
} from "../models";

/**
 * Class representing a Servers.
 */
export class Servers {
  private readonly client: AzureAnalysisServices;

  /**
   * Initialize a new instance of the class Servers class.
   * @param client Reference to the service client
   */
  constructor(client: AzureAnalysisServices) {
    this.client = client;
  }

  /**
   * Gets details about the specified Analysis Services server.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param options The options parameters.
   */
  getDetails(
    resourceGroupName: string,
    serverName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServersGetDetailsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, options: operationOptions },
      getDetailsOperationSpec
    ) as Promise<ServersGetDetailsResponse>;
  }

  /**
   * Provisions the specified Analysis Services server based on the configuration specified in the
   * request.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param serverParameters Contains the information used to provision the Analysis Services server.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    serverName: string,
    serverParameters: AnalysisServicesServer,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ServersCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      serverName,
      serverParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ServersCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the specified Analysis Services server.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
   *                   length, and no more than 63.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    serverName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      serverName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates the current state of the specified Analysis Services server.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
   *                   length, and no more than 63.
   * @param serverUpdateParameters Request object that contains the updated information for the server.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    serverName: string,
    serverUpdateParameters: AnalysisServicesServerUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ServersUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      serverName,
      serverUpdateParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ServersUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Suspends operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
   *                   length, and no more than 63.
   * @param options The options parameters.
   */
  async suspend(
    resourceGroupName: string,
    serverName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      serverName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      suspendOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: suspendOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Resumes operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
   *                   length, and no more than 63.
   * @param options The options parameters.
   */
  async resume(
    resourceGroupName: string,
    serverName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      serverName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      resumeOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: resumeOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets all the Analysis Services servers for the given resource group.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServersListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<ServersListByResourceGroupResponse>;
  }

  /**
   * Lists all the Analysis Services servers for the given subscription.
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<ServersListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ServersListResponse>;
  }

  /**
   * Lists eligible SKUs for Analysis Services resource provider.
   * @param options The options parameters.
   */
  listSkusForNew(
    options?: coreHttp.OperationOptions
  ): Promise<ServersListSkusForNewResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listSkusForNewOperationSpec
    ) as Promise<ServersListSkusForNewResponse>;
  }

  /**
   * Lists eligible SKUs for an Analysis Services resource.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
   *                   length, and no more than 63.
   * @param options The options parameters.
   */
  listSkusForExisting(
    resourceGroupName: string,
    serverName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServersListSkusForExistingResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, options: operationOptions },
      listSkusForExistingOperationSpec
    ) as Promise<ServersListSkusForExistingResponse>;
  }

  /**
   * Return the gateway status of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server.
   * @param options The options parameters.
   */
  listGatewayStatus(
    resourceGroupName: string,
    serverName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServersListGatewayStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, options: operationOptions },
      listGatewayStatusOperationSpec
    ) as Promise<ServersListGatewayStatusResponse>;
  }

  /**
   * Dissociates a Unified Gateway associated with the server.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
   *                   length, and no more than 63.
   * @param options The options parameters.
   */
  dissociateGateway(
    resourceGroupName: string,
    serverName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, options: operationOptions },
      dissociateGatewayOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Check the name availability in the target location.
   * @param serverParameters Contains the information used to provision the Analysis Services server.
   * @param location The region name which the operation will lookup into.
   * @param options The options parameters.
   */
  checkNameAvailability(
    serverParameters: CheckServerNameAvailabilityParameters,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServersCheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { serverParameters, location, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<ServersCheckNameAvailabilityResponse>;
  }

  /**
   * List the result of the specified operation.
   * @param location The region name which the operation will lookup into.
   * @param operationId The target operation Id.
   * @param options The options parameters.
   */
  listOperationResults(
    location: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, operationId, options: operationOptions },
      listOperationResultsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * List the status of operation.
   * @param location The region name which the operation will lookup into.
   * @param operationId The target operation Id.
   * @param options The options parameters.
   */
  listOperationStatuses(
    location: string,
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServersListOperationStatusesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, operationId, options: operationOptions },
      listOperationStatusesOperationSpec
    ) as Promise<ServersListOperationStatusesResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getDetailsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServer
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.subscriptionId
  ],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    201: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    202: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    204: {
      bodyMapper: Mappers.AnalysisServicesServer
    }
  },
  requestBody: Parameters.serverParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.serverName1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    201: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    202: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    204: {
      bodyMapper: Mappers.AnalysisServicesServer
    }
  },
  requestBody: Parameters.serverUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.serverName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const suspendOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.serverName1
  ],
  serializer
};
const resumeOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.serverName1
  ],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServers
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServers
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listSkusForNewOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuEnumerationForNewResourceResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listSkusForExistingOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuEnumerationForExistingResourceResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.serverName1
  ],
  serializer
};
const listGatewayStatusOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/listGatewayStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListStatusLive
    },
    default: {
      bodyMapper: Mappers.GatewayListStatusError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.serverName2
  ],
  serializer
};
const dissociateGatewayOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/dissociateGateway",
  httpMethod: "POST",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.serverName1
  ],
  serializer
};
const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckServerNameAvailabilityResult
    }
  },
  requestBody: Parameters.serverParameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listOperationResultsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}",
  httpMethod: "GET",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.operationId
  ],
  serializer
};
const listOperationStatusesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.operationId
  ],
  serializer
};
