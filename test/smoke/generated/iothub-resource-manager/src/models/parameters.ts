/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-11-04",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    serializedName: "resourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const iotHubDescription: coreHttp.OperationParameter = {
  parameterPath: "iotHubDescription",
  mapper: Mappers.IotHubDescription
};

export const ifMatch: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const iotHubTags: coreHttp.OperationParameter = {
  parameterPath: "iotHubTags",
  mapper: Mappers.TagsResource
};

export const resourceGroupName1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceName1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    serializedName: "resourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventHubEndpointName: coreHttp.OperationURLParameter = {
  parameterPath: "eventHubEndpointName",
  mapper: {
    serializedName: "eventHubEndpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const eventHubEndpointName1: coreHttp.OperationURLParameter = {
  parameterPath: "eventHubEndpointName",
  mapper: {
    serializedName: "eventHubEndpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name1: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name2: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobId: coreHttp.OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName2: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const iotHubName: coreHttp.OperationURLParameter = {
  parameterPath: "iotHubName",
  mapper: {
    serializedName: "iotHubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operationInputs: coreHttp.OperationParameter = {
  parameterPath: "operationInputs",
  mapper: Mappers.OperationInputs
};

export const input: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.TestAllRoutesInput
};

export const iotHubName1: coreHttp.OperationURLParameter = {
  parameterPath: "iotHubName",
  mapper: {
    serializedName: "iotHubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName3: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const input1: coreHttp.OperationParameter = {
  parameterPath: "input",
  mapper: Mappers.TestRouteInput
};

export const keyName: coreHttp.OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "keyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const exportDevicesParameters: coreHttp.OperationParameter = {
  parameterPath: "exportDevicesParameters",
  mapper: Mappers.ExportDevicesRequest
};

export const importDevicesParameters: coreHttp.OperationParameter = {
  parameterPath: "importDevicesParameters",
  mapper: Mappers.ImportDevicesRequest
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink5: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink6: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink7: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink8: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const certificateName: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
    },
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateDescription: coreHttp.OperationParameter = {
  parameterPath: "certificateDescription",
  mapper: Mappers.CertificateBodyDescription
};

export const ifMatch1: coreHttp.OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const ifMatch2: coreHttp.OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateVerificationBody: coreHttp.OperationParameter = {
  parameterPath: "certificateVerificationBody",
  mapper: Mappers.CertificateVerificationDescription
};

export const failoverInput: coreHttp.OperationParameter = {
  parameterPath: "failoverInput",
  mapper: Mappers.FailoverInput
};

export const iotHubName2: coreHttp.OperationURLParameter = {
  parameterPath: "iotHubName",
  mapper: {
    serializedName: "iotHubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName4: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};
