/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Endpoint
};

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const profileName: coreHttp.OperationURLParameter = {
  parameterPath: "profileName",
  mapper: {
    serializedName: "profileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endpointType: coreHttp.OperationURLParameter = {
  parameterPath: "endpointType",
  mapper: {
    serializedName: "endpointType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endpointName: coreHttp.OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    serializedName: "endpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-04-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endpointType1: coreHttp.OperationURLParameter = {
  parameterPath: "endpointType",
  mapper: {
    serializedName: "endpointType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endpointName1: coreHttp.OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    serializedName: "endpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Endpoint
};

export const resourceGroupName2: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endpointType2: coreHttp.OperationURLParameter = {
  parameterPath: "endpointType",
  mapper: {
    serializedName: "endpointType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endpointName2: coreHttp.OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    serializedName: "endpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName3: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endpointType3: coreHttp.OperationURLParameter = {
  parameterPath: "endpointType",
  mapper: {
    serializedName: "endpointType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endpointName3: coreHttp.OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    serializedName: "endpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.CheckTrafficManagerRelativeDnsNameAvailabilityParameters
};

export const resourceGroupName4: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName5: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Profile
};

export const resourceGroupName6: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const profileName1: coreHttp.OperationURLParameter = {
  parameterPath: "profileName",
  mapper: {
    serializedName: "profileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Profile
};

export const heatMapType: coreHttp.OperationURLParameter = {
  parameterPath: "heatMapType",
  mapper: {
    defaultValue: "default",
    serializedName: "heatMapType",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const topLeft: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "topLeft"],
  mapper: {
    constraints: {
      MinItems: 2,
      MaxItems: 2
    },
    serializedName: "topLeft",
    type: {
      name: "Sequence",
      element: { type: { name: "Number" }, serializedName: "Get4ItemsItem" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};

export const botRight: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "botRight"],
  mapper: {
    constraints: {
      MinItems: 2,
      MaxItems: 2
    },
    serializedName: "botRight",
    type: {
      name: "Sequence",
      element: { type: { name: "Number" }, serializedName: "Get5ItemsItem" }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
