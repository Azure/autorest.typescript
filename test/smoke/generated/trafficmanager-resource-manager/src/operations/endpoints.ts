/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import {
  Endpoint,
  EndpointsUpdateResponse,
  EndpointsGetResponse,
  EndpointsCreateOrUpdateResponse,
  EndpointsDeleteResponse
} from "../models";

/**
 * Class representing a Endpoints.
 */
export class Endpoints {
  private readonly client: TrafficManagerManagementClient;

  /**
   * Initialize a new instance of the class Endpoints class.
   * @param client Reference to the service client
   */
  constructor(client: TrafficManagerManagementClient) {
    this.client = client;
  }

  /**
   * Update a Traffic Manager endpoint.
   * @param parameters The Traffic Manager endpoint parameters supplied to the Update operation.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint to
   *                          be updated.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be updated.
   * @param endpointName The name of the Traffic Manager endpoint to be updated.
   * @param options The options parameters.
   */
  update(
    parameters: Endpoint,
    resourceGroupName: string,
    profileName: string,
    endpointType: string,
    endpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EndpointsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<EndpointsUpdateResponse>;
  }

  /**
   * Gets a Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
   * @param endpointType The type of the Traffic Manager endpoint.
   * @param endpointName The name of the Traffic Manager endpoint.
   * @param options The options parameters.
   */
  get(
    profileName: string,
    resourceGroupName: string,
    endpointType: string,
    endpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EndpointsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        profileName,
        resourceGroupName,
        endpointType,
        endpointName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<EndpointsGetResponse>;
  }

  /**
   * Create or update a Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint to
   *                          be created or updated.
   * @param endpointType The type of the Traffic Manager endpoint to be created or updated.
   * @param endpointName The name of the Traffic Manager endpoint to be created or updated.
   * @param options The options parameters.
   */
  createOrUpdate(
    profileName: string,
    parameters: Endpoint,
    resourceGroupName: string,
    endpointType: string,
    endpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EndpointsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        profileName,
        parameters,
        resourceGroupName,
        endpointType,
        endpointName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<EndpointsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint to
   *                          be deleted.
   * @param endpointType The type of the Traffic Manager endpoint to be deleted.
   * @param endpointName The name of the Traffic Manager endpoint to be deleted.
   * @param options The options parameters.
   */
  delete(
    profileName: string,
    resourceGroupName: string,
    endpointType: string,
    endpointName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EndpointsDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        profileName,
        resourceGroupName,
        endpointType,
        endpointName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<EndpointsDeleteResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.profileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.endpointType1,
    Parameters.endpointName1
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.profileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName2,
    Parameters.endpointType2,
    Parameters.endpointName2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.profileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName3,
    Parameters.endpointType3,
    Parameters.endpointName3
  ],
  serializer
};
