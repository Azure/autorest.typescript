/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import {
  CheckTrafficManagerRelativeDnsNameAvailabilityParameters,
  ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse,
  ProfilesListByResourceGroupResponse,
  ProfilesListBySubscriptionResponse,
  ProfilesGetResponse,
  Profile,
  ProfilesCreateOrUpdateResponse,
  ProfilesDeleteResponse,
  ProfilesUpdateResponse
} from "../models";

/**
 * Class representing a Profiles.
 */
export class Profiles {
  private readonly client: TrafficManagerManagementClient;

  /**
   * Initialize a new instance of the class Profiles class.
   * @param client Reference to the service client
   */
  constructor(client: TrafficManagerManagementClient) {
    this.client = client;
  }

  /**
   * Checks the availability of a Traffic Manager Relative DNS name.
   * @param parameters The Traffic Manager name parameters supplied to the
   *                   CheckTrafficManagerNameAvailability operation.
   * @param options The options parameters.
   */
  checkTrafficManagerRelativeDnsNameAvailability(
    parameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters,
    options?: coreHttp.OperationOptions
  ): Promise<ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, options: operationOptions },
      checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec
    ) as Promise<
      ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse
    >;
  }

  /**
   * Lists all Traffic Manager profiles within a resource group.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profiles to
   *                          be listed.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProfilesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<ProfilesListByResourceGroupResponse>;
  }

  /**
   * Lists all Traffic Manager profiles within a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: coreHttp.OperationOptions
  ): Promise<ProfilesListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<ProfilesListBySubscriptionResponse>;
  }

  /**
   * Gets a Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param options The options parameters.
   */
  get(
    profileName: string,
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProfilesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { profileName, resourceGroupName, options: operationOptions },
      getOperationSpec
    ) as Promise<ProfilesGetResponse>;
  }

  /**
   * Create or update a Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    profileName: string,
    resourceGroupName: string,
    parameters: Profile,
    options?: coreHttp.OperationOptions
  ): Promise<ProfilesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { profileName, resourceGroupName, parameters, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<ProfilesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile to be
   *                          deleted.
   * @param profileName The name of the Traffic Manager profile to be deleted.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    profileName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ProfilesDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<ProfilesDeleteResponse>;
  }

  /**
   * Update a Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  update(
    profileName: string,
    resourceGroupName: string,
    parameters: Profile,
    options?: coreHttp.OperationOptions
  ): Promise<ProfilesUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { profileName, resourceGroupName, parameters, options: operationOptions },
      updateOperationSpec
    ) as Promise<ProfilesUpdateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Network/checkTrafficManagerNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TrafficManagerNameAvailability
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName4
  ],
  serializer
};
const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.profileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName5
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.profileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName5
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName6,
    Parameters.profileName1
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.profileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName5
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
