/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import {
  TrafficManagerUserMetricsKeysGetResponse,
  TrafficManagerUserMetricsKeysCreateOrUpdateResponse,
  TrafficManagerUserMetricsKeysDeleteResponse
} from "../models";

/**
 * Class representing a TrafficManagerUserMetricsKeys.
 */
export class TrafficManagerUserMetricsKeys {
  private readonly client: TrafficManagerManagementClient;

  /**
   * Initialize a new instance of the class TrafficManagerUserMetricsKeys class.
   * @param client Reference to the service client
   */
  constructor(client: TrafficManagerManagementClient) {
    this.client = client;
  }

  /**
   * Get the subscription-level key used for Real User Metrics collection.
   * @param options The options parameters.
   */
  get(
    options?: coreHttp.OperationOptions
  ): Promise<TrafficManagerUserMetricsKeysGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOperationSpec
    ) as Promise<TrafficManagerUserMetricsKeysGetResponse>;
  }

  /**
   * Create or update a subscription-level key used for Real User Metrics collection.
   * @param options The options parameters.
   */
  createOrUpdate(
    options?: coreHttp.OperationOptions
  ): Promise<TrafficManagerUserMetricsKeysCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<TrafficManagerUserMetricsKeysCreateOrUpdateResponse>;
  }

  /**
   * Delete a subscription-level key used for Real User Metrics collection.
   * @param options The options parameters.
   */
  delete(
    options?: coreHttp.OperationOptions
  ): Promise<TrafficManagerUserMetricsKeysDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      deleteOperationSpec
    ) as Promise<TrafficManagerUserMetricsKeysDeleteResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserMetricsModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.UserMetricsModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
