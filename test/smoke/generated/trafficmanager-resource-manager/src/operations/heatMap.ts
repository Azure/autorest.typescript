/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import { HeatMapGetOptionalParams, HeatMapGetResponse } from "../models";

/**
 * Class representing a HeatMap.
 */
export class HeatMap {
  private readonly client: TrafficManagerManagementClient;

  /**
   * Initialize a new instance of the class HeatMap class.
   * @param client Reference to the service client
   */
  constructor(client: TrafficManagerManagementClient) {
    this.client = client;
  }

  /**
   * Gets latest heatmap for Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
   * @param options The options parameters.
   */
  get(
    profileName: string,
    resourceGroupName: string,
    options?: HeatMapGetOptionalParams
  ): Promise<HeatMapGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { profileName, resourceGroupName, options: operationOptions },
      getOperationSpec
    ) as Promise<HeatMapGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HeatMapModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.topLeft,
    Parameters.botRight
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.profileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.heatMapType
  ],
  serializer
};
