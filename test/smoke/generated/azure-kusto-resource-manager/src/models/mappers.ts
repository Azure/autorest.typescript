/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Cluster: coreHttp.CompositeMapper = {
  serializedName: "Cluster",
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: { type: { name: "String" }, serializedName: "ZonesItem" }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataIngestionUri: {
        serializedName: "properties.dataIngestionUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stateReason: {
        serializedName: "properties.stateReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trustedExternalTenants: {
        serializedName: "properties.trustedExternalTenants",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TrustedExternalTenant" }
          }
        }
      },
      optimizedAutoscale: {
        serializedName: "optimizedAutoscale",
        type: {
          name: "Composite",
          className: "OptimizedAutoscale"
        }
      },
      enableDiskEncryption: {
        serializedName: "properties.enableDiskEncryption",
        type: {
          name: "Boolean"
        }
      },
      enableStreamingIngest: {
        serializedName: "properties.enableStreamingIngest",
        type: {
          name: "Boolean"
        }
      },
      virtualNetworkConfiguration: {
        serializedName: "virtualNetworkConfiguration",
        type: {
          name: "Composite",
          className: "VirtualNetworkConfiguration"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      enablePurge: {
        serializedName: "properties.enablePurge",
        type: {
          name: "Boolean"
        }
      },
      languageExtensions: {
        serializedName: "languageExtensions",
        type: {
          name: "Composite",
          className: "LanguageExtensionsList"
        }
      }
    }
  }
};

export const AzureSku: coreHttp.CompositeMapper = {
  serializedName: "AzureSku",
  type: {
    name: "Composite",
    className: "AzureSku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      tier: {
        serializedName: "tier",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identity: coreHttp.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["None", "SystemAssigned"]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className:
                "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties"
            }
          }
        }
      }
    }
  }
};

export const ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties: coreHttp.CompositeMapper = {
  serializedName:
    "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties",
  type: {
    name: "Composite",
    className:
      "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedExternalTenant: coreHttp.CompositeMapper = {
  serializedName: "TrustedExternalTenant",
  type: {
    name: "Composite",
    className: "TrustedExternalTenant",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OptimizedAutoscale: coreHttp.CompositeMapper = {
  serializedName: "OptimizedAutoscale",
  type: {
    name: "Composite",
    className: "OptimizedAutoscale",
    modelProperties: {
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkConfiguration: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkConfiguration",
  type: {
    name: "Composite",
    className: "VirtualNetworkConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      enginePublicIpId: {
        serializedName: "enginePublicIpId",
        required: true,
        type: {
          name: "String"
        }
      },
      dataManagementPublicIpId: {
        serializedName: "dataManagementPublicIpId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageExtensionsList: coreHttp.CompositeMapper = {
  serializedName: "LanguageExtensionsList",
  type: {
    name: "Composite",
    className: "LanguageExtensionsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "LanguageExtension" }
          }
        }
      }
    }
  }
};

export const LanguageExtension: coreHttp.CompositeMapper = {
  serializedName: "LanguageExtension",
  type: {
    name: "Composite",
    className: "LanguageExtension",
    modelProperties: {
      languageExtensionName: {
        serializedName: "languageExtensionName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const ClusterUpdate: coreHttp.CompositeMapper = {
  serializedName: "ClusterUpdate",
  type: {
    name: "Composite",
    className: "ClusterUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataIngestionUri: {
        serializedName: "properties.dataIngestionUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stateReason: {
        serializedName: "properties.stateReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trustedExternalTenants: {
        serializedName: "properties.trustedExternalTenants",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TrustedExternalTenant" }
          }
        }
      },
      optimizedAutoscale: {
        serializedName: "optimizedAutoscale",
        type: {
          name: "Composite",
          className: "OptimizedAutoscale"
        }
      },
      enableDiskEncryption: {
        serializedName: "properties.enableDiskEncryption",
        type: {
          name: "Boolean"
        }
      },
      enableStreamingIngest: {
        serializedName: "properties.enableStreamingIngest",
        type: {
          name: "Boolean"
        }
      },
      virtualNetworkConfiguration: {
        serializedName: "virtualNetworkConfiguration",
        type: {
          name: "Composite",
          className: "VirtualNetworkConfiguration"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      enablePurge: {
        serializedName: "properties.enablePurge",
        type: {
          name: "Boolean"
        }
      },
      languageExtensions: {
        serializedName: "languageExtensions",
        type: {
          name: "Composite",
          className: "LanguageExtensionsList"
        }
      }
    }
  }
};

export const ClusterPrincipalAssignmentCheckNameRequest: coreHttp.CompositeMapper = {
  serializedName: "ClusterPrincipalAssignmentCheckNameRequest",
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignmentCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Kusto/clusters",
            "Microsoft.Kusto/clusters/databases",
            "Microsoft.Kusto/clusters/attachedDatabaseConfigurations",
            "Microsoft.Kusto/clusters/principalAssignments",
            "Microsoft.Kusto/clusters/databases/dataConnections",
            "Microsoft.Kusto/clusters/databases/principalAssignments"
          ]
        }
      }
    }
  }
};

export const CheckNameResult: coreHttp.CompositeMapper = {
  serializedName: "CheckNameResult",
  type: {
    name: "Composite",
    className: "CheckNameResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ClusterPrincipalAssignment: coreHttp.CompositeMapper = {
  serializedName: "ClusterPrincipalAssignment",
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      tenantName: {
        serializedName: "properties.tenantName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalName: {
        serializedName: "properties.principalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterPrincipalAssignmentListResult: coreHttp.CompositeMapper = {
  serializedName: "ClusterPrincipalAssignmentListResult",
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ClusterPrincipalAssignment" }
          }
        }
      }
    }
  }
};

export const FollowerDatabaseListResult: coreHttp.CompositeMapper = {
  serializedName: "FollowerDatabaseListResult",
  type: {
    name: "Composite",
    className: "FollowerDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FollowerDatabaseDefinition" }
          }
        }
      }
    }
  }
};

export const FollowerDatabaseDefinition: coreHttp.CompositeMapper = {
  serializedName: "FollowerDatabaseDefinition",
  type: {
    name: "Composite",
    className: "FollowerDatabaseDefinition",
    modelProperties: {
      clusterResourceId: {
        serializedName: "clusterResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      attachedDatabaseConfigurationName: {
        serializedName: "attachedDatabaseConfigurationName",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnoseVirtualNetworkResult: coreHttp.CompositeMapper = {
  serializedName: "DiagnoseVirtualNetworkResult",
  type: {
    name: "Composite",
    className: "DiagnoseVirtualNetworkResult",
    modelProperties: {
      findings: {
        serializedName: "findings",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "DiagnoseVirtualNetworkResultFindingsItem"
          }
        }
      }
    }
  }
};

export const ClusterListResult: coreHttp.CompositeMapper = {
  serializedName: "ClusterListResult",
  type: {
    name: "Composite",
    className: "ClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Cluster" } }
        }
      }
    }
  }
};

export const SkuDescriptionList: coreHttp.CompositeMapper = {
  serializedName: "SkuDescriptionList",
  type: {
    name: "Composite",
    className: "SkuDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuDescription" } }
        }
      }
    }
  }
};

export const SkuDescription: coreHttp.CompositeMapper = {
  serializedName: "SkuDescription",
  type: {
    name: "Composite",
    className: "SkuDescription",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuDescriptionLocationsItem"
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SkuLocationInfoItem" }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      }
    }
  }
};

export const SkuLocationInfoItem: coreHttp.CompositeMapper = {
  serializedName: "SkuLocationInfoItem",
  type: {
    name: "Composite",
    className: "SkuLocationInfoItem",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuLocationInfoItemZonesItem"
          }
        }
      }
    }
  }
};

export const ClusterCheckNameRequest: coreHttp.CompositeMapper = {
  serializedName: "ClusterCheckNameRequest",
  type: {
    name: "Composite",
    className: "ClusterCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Kusto/clusters",
            "Microsoft.Kusto/clusters/databases",
            "Microsoft.Kusto/clusters/attachedDatabaseConfigurations",
            "Microsoft.Kusto/clusters/principalAssignments",
            "Microsoft.Kusto/clusters/databases/dataConnections",
            "Microsoft.Kusto/clusters/databases/principalAssignments"
          ]
        }
      }
    }
  }
};

export const CheckNameRequest: coreHttp.CompositeMapper = {
  serializedName: "CheckNameRequest",
  type: {
    name: "Composite",
    className: "CheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Kusto/clusters",
            "Microsoft.Kusto/clusters/databases",
            "Microsoft.Kusto/clusters/attachedDatabaseConfigurations",
            "Microsoft.Kusto/clusters/principalAssignments",
            "Microsoft.Kusto/clusters/databases/dataConnections",
            "Microsoft.Kusto/clusters/databases/principalAssignments"
          ]
        }
      }
    }
  }
};

export const ListResourceSkusResult: coreHttp.CompositeMapper = {
  serializedName: "ListResourceSkusResult",
  type: {
    name: "Composite",
    className: "ListResourceSkusResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AzureResourceSku" }
          }
        }
      }
    }
  }
};

export const AzureResourceSku: coreHttp.CompositeMapper = {
  serializedName: "AzureResourceSku",
  type: {
    name: "Composite",
    className: "AzureResourceSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "AzureCapacity"
        }
      }
    }
  }
};

export const AzureCapacity: coreHttp.CompositeMapper = {
  serializedName: "AzureCapacity",
  type: {
    name: "Composite",
    className: "AzureCapacity",
    modelProperties: {
      scaleType: {
        serializedName: "scaleType",
        required: true,
        type: {
          name: "String"
        }
      },
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        required: true,
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseListResult: coreHttp.CompositeMapper = {
  serializedName: "DatabaseListResult",
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Database" } }
        }
      }
    }
  }
};

export const Database: coreHttp.CompositeMapper = {
  serializedName: "Database",
  type: {
    name: "Composite",
    className: "Database",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalAssignmentCheckNameRequest: coreHttp.CompositeMapper = {
  serializedName: "DatabasePrincipalAssignmentCheckNameRequest",
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignmentCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Kusto/clusters",
            "Microsoft.Kusto/clusters/databases",
            "Microsoft.Kusto/clusters/attachedDatabaseConfigurations",
            "Microsoft.Kusto/clusters/principalAssignments",
            "Microsoft.Kusto/clusters/databases/dataConnections",
            "Microsoft.Kusto/clusters/databases/principalAssignments"
          ]
        }
      }
    }
  }
};

export const DatabasePrincipalAssignment: coreHttp.CompositeMapper = {
  serializedName: "DatabasePrincipalAssignment",
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      tenantName: {
        serializedName: "properties.tenantName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalName: {
        serializedName: "properties.principalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalAssignmentListResult: coreHttp.CompositeMapper = {
  serializedName: "DatabasePrincipalAssignmentListResult",
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabasePrincipalAssignment"
            }
          }
        }
      }
    }
  }
};

export const DatabasePrincipalListResult: coreHttp.CompositeMapper = {
  serializedName: "DatabasePrincipalListResult",
  type: {
    name: "Composite",
    className: "DatabasePrincipalListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DatabasePrincipal" }
          }
        }
      }
    }
  }
};

export const DatabasePrincipal: coreHttp.CompositeMapper = {
  serializedName: "DatabasePrincipal",
  type: {
    name: "Composite",
    className: "DatabasePrincipal",
    modelProperties: {
      role: {
        serializedName: "role",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      fqn: {
        serializedName: "fqn",
        type: {
          name: "String"
        }
      },
      email: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      appId: {
        serializedName: "appId",
        type: {
          name: "String"
        }
      },
      tenantName: {
        serializedName: "tenantName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalListRequest: coreHttp.CompositeMapper = {
  serializedName: "DatabasePrincipalListRequest",
  type: {
    name: "Composite",
    className: "DatabasePrincipalListRequest",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DatabasePrincipal" }
          }
        }
      }
    }
  }
};

export const AttachedDatabaseConfigurationListResult: coreHttp.CompositeMapper = {
  serializedName: "AttachedDatabaseConfigurationListResult",
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AttachedDatabaseConfiguration"
            }
          }
        }
      }
    }
  }
};

export const AttachedDatabaseConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AttachedDatabaseConfiguration",
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      clusterResourceId: {
        serializedName: "properties.clusterResourceId",
        type: {
          name: "String"
        }
      },
      attachedDatabaseNames: {
        serializedName: "properties.attachedDatabaseNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "AttachedDatabaseConfigurationPropertiesAttachedDatabaseNamesItem"
          }
        }
      },
      defaultPrincipalsModificationKind: {
        serializedName: "properties.defaultPrincipalsModificationKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionListResult: coreHttp.CompositeMapper = {
  serializedName: "DataConnectionListResult",
  type: {
    name: "Composite",
    className: "DataConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DataConnection" } }
        }
      }
    }
  }
};

export const DataConnection: coreHttp.CompositeMapper = {
  serializedName: "DataConnection",
  type: {
    name: "Composite",
    className: "DataConnection",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionValidation: coreHttp.CompositeMapper = {
  serializedName: "DataConnectionValidation",
  type: {
    name: "Composite",
    className: "DataConnectionValidation",
    modelProperties: {
      dataConnectionName: {
        serializedName: "dataConnectionName",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataConnection"
        }
      }
    }
  }
};

export const DataConnectionValidationListResult: coreHttp.CompositeMapper = {
  serializedName: "DataConnectionValidationListResult",
  type: {
    name: "Composite",
    className: "DataConnectionValidationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataConnectionValidationResult"
            }
          }
        }
      }
    }
  }
};

export const DataConnectionValidationResult: coreHttp.CompositeMapper = {
  serializedName: "DataConnectionValidationResult",
  type: {
    name: "Composite",
    className: "DataConnectionValidationResult",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionCheckNameRequest: coreHttp.CompositeMapper = {
  serializedName: "DataConnectionCheckNameRequest",
  type: {
    name: "Composite",
    className: "DataConnectionCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Kusto/clusters",
            "Microsoft.Kusto/clusters/databases",
            "Microsoft.Kusto/clusters/attachedDatabaseConfigurations",
            "Microsoft.Kusto/clusters/principalAssignments",
            "Microsoft.Kusto/clusters/databases/dataConnections",
            "Microsoft.Kusto/clusters/databases/principalAssignments"
          ]
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseStatistics: coreHttp.CompositeMapper = {
  serializedName: "DatabaseStatistics",
  type: {
    name: "Composite",
    className: "DatabaseStatistics",
    modelProperties: {
      size: {
        serializedName: "size",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ReadWriteDatabase: coreHttp.CompositeMapper = {
  serializedName: "ReadWrite",
  type: {
    name: "Composite",
    className: "ReadWriteDatabase",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...Database.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      softDeletePeriod: {
        serializedName: "properties.softDeletePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      hotCachePeriod: {
        serializedName: "properties.hotCachePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "DatabaseStatistics"
        }
      },
      isFollowed: {
        serializedName: "properties.isFollowed",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReadOnlyFollowingDatabase: coreHttp.CompositeMapper = {
  serializedName: "ReadOnlyFollowing",
  type: {
    name: "Composite",
    className: "ReadOnlyFollowingDatabase",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...Database.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      softDeletePeriod: {
        serializedName: "properties.softDeletePeriod",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      },
      hotCachePeriod: {
        serializedName: "properties.hotCachePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "DatabaseStatistics"
        }
      },
      leaderClusterResourceId: {
        serializedName: "properties.leaderClusterResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      attachedDatabaseConfigurationName: {
        serializedName: "properties.attachedDatabaseConfigurationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalsModificationKind: {
        serializedName: "properties.principalsModificationKind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubDataConnection: coreHttp.CompositeMapper = {
  serializedName: "EventHub",
  type: {
    name: "Composite",
    className: "EventHubDataConnection",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      eventHubResourceId: {
        serializedName: "properties.eventHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      },
      eventSystemProperties: {
        serializedName: "properties.eventSystemProperties",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "EventHubConnectionPropertiesEventSystemPropertiesItem"
          }
        }
      },
      compression: {
        serializedName: "properties.compression",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubDataConnection: coreHttp.CompositeMapper = {
  serializedName: "IotHub",
  type: {
    name: "Composite",
    className: "IotHubDataConnection",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      iotHubResourceId: {
        serializedName: "properties.iotHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      },
      eventSystemProperties: {
        serializedName: "properties.eventSystemProperties",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName:
              "IotHubConnectionPropertiesEventSystemPropertiesItem"
          }
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventGridDataConnection: coreHttp.CompositeMapper = {
  serializedName: "EventGrid",
  type: {
    name: "Composite",
    className: "EventGridDataConnection",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      storageAccountResourceId: {
        serializedName: "properties.storageAccountResourceId",
        type: {
          name: "String"
        }
      },
      eventHubResourceId: {
        serializedName: "properties.eventHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  "Resource.Database": Database,
  "Resource.DataConnection": DataConnection,
  "Resource.ReadWrite": ReadWriteDatabase,
  "Resource.ReadOnlyFollowing": ReadOnlyFollowingDatabase,
  "Resource.EventHub": EventHubDataConnection,
  "Resource.IotHub": IotHubDataConnection,
  "Resource.EventGrid": EventGridDataConnection
};
