/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const clusterName: coreHttp.OperationURLParameter = {
  parameterPath: "clusterName",
  mapper: {
    serializedName: "clusterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-02-15",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Cluster
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ClusterUpdate
};

export const followerDatabaseToRemove: coreHttp.OperationParameter = {
  parameterPath: "followerDatabaseToRemove",
  mapper: Mappers.FollowerDatabaseDefinition
};

export const clusterName1: coreHttp.OperationParameter = {
  parameterPath: "clusterName",
  mapper: Mappers.ClusterCheckNameRequest
};

export const location: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const languageExtensionsToAdd: coreHttp.OperationParameter = {
  parameterPath: "languageExtensionsToAdd",
  mapper: Mappers.LanguageExtensionsList
};

export const languageExtensionsToRemove: coreHttp.OperationParameter = {
  parameterPath: "languageExtensionsToRemove",
  mapper: Mappers.LanguageExtensionsList
};

export const principalAssignmentName: coreHttp.OperationParameter = {
  parameterPath: "principalAssignmentName",
  mapper: Mappers.ClusterPrincipalAssignmentCheckNameRequest
};

export const principalAssignmentName1: coreHttp.OperationURLParameter = {
  parameterPath: "principalAssignmentName",
  mapper: {
    serializedName: "principalAssignmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.ClusterPrincipalAssignment
};

export const resourceName: coreHttp.OperationParameter = {
  parameterPath: "resourceName",
  mapper: Mappers.CheckNameRequest
};

export const databaseName: coreHttp.OperationURLParameter = {
  parameterPath: "databaseName",
  mapper: {
    serializedName: "databaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Database
};

export const parameters4: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.Database
};

export const databasePrincipalsToAdd: coreHttp.OperationParameter = {
  parameterPath: "databasePrincipalsToAdd",
  mapper: Mappers.DatabasePrincipalListRequest
};

export const databasePrincipalsToRemove: coreHttp.OperationParameter = {
  parameterPath: "databasePrincipalsToRemove",
  mapper: Mappers.DatabasePrincipalListRequest
};

export const principalAssignmentName2: coreHttp.OperationParameter = {
  parameterPath: "principalAssignmentName",
  mapper: Mappers.DatabasePrincipalAssignmentCheckNameRequest
};

export const parameters5: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DatabasePrincipalAssignment
};

export const attachedDatabaseConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "attachedDatabaseConfigurationName",
  mapper: {
    serializedName: "attachedDatabaseConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.AttachedDatabaseConfiguration
};

export const parameters7: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DataConnectionValidation
};

export const dataConnectionName: coreHttp.OperationParameter = {
  parameterPath: "dataConnectionName",
  mapper: Mappers.DataConnectionCheckNameRequest
};

export const dataConnectionName1: coreHttp.OperationURLParameter = {
  parameterPath: "dataConnectionName",
  mapper: {
    serializedName: "dataConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters8: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DataConnection
};

export const parameters9: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DataConnection
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
