/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type DatabaseUnion =
  | Database
  | ReadWriteDatabase
  | ReadOnlyFollowingDatabase;
export type DataConnectionUnion =
  | DataConnection
  | EventHubDataConnection
  | IotHubDataConnection
  | EventGridDataConnection;

export interface Resource {
  /**
   * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   */
  readonly id?: string;
  /**
   * The name of the resource
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
 */
export type TrackedResource = Resource & {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives
   */
  location: string;
};

/**
 * Class representing a Kusto cluster.
 */
export type Cluster = TrackedResource & {
  /**
   * The SKU of the cluster.
   */
  sku: AzureSku;
  /**
   * The availability zones of the cluster.
   */
  zones?: string[];
  /**
   * The identity of the cluster, if configured.
   */
  identity?: Identity;
  /**
   * The state of the resource.
   */
  readonly state?: State;
  /**
   * The provisioned state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The cluster URI.
   */
  readonly uri?: string;
  /**
   * The cluster data ingestion URI.
   */
  readonly dataIngestionUri?: string;
  /**
   * The reason for the cluster's current state.
   */
  readonly stateReason?: string;
  /**
   * The cluster's external tenants.
   */
  trustedExternalTenants?: TrustedExternalTenant[];
  /**
   * Optimized auto scale definition.
   */
  optimizedAutoscale?: OptimizedAutoscale;
  /**
   * A boolean value that indicates if the cluster's disks are encrypted.
   */
  enableDiskEncryption?: boolean;
  /**
   * A boolean value that indicates if the streaming ingest is enabled.
   */
  enableStreamingIngest?: boolean;
  /**
   * Virtual network definition.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * KeyVault properties for the cluster encryption.
   */
  keyVaultProperties?: KeyVaultProperties;
  /**
   * A boolean value that indicates if the purge operations are enabled.
   */
  enablePurge?: boolean;
  /**
   * List of the cluster's language extensions.
   */
  languageExtensions?: LanguageExtensionsList;
};

/**
 * Azure SKU definition.
 */
export interface AzureSku {
  /**
   * SKU name.
   */
  name: AzureSkuName;
  /**
   * The number of instances of the cluster.
   */
  capacity?: number;
  /**
   * SKU tier.
   */
  tier: AzureSkuTier;
}

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The principal ID of resource identity.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   */
  readonly tenantId?: string;
  /**
   * The identity type.
   */
  type: IdentityType;
  /**
   * The list of user identities associated with the Kusto cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: {
    [propertyName: string]: ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties;
  };
}

export interface ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties {
  /**
   * The principal id of user assigned identity.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   */
  readonly clientId?: string;
}

/**
 * Represents a tenant ID that is trusted by the cluster.
 */
export interface TrustedExternalTenant {
  /**
   * GUID representing an external tenant.
   */
  value?: string;
}

/**
 * A class that contains the optimized auto scale definition.
 */
export interface OptimizedAutoscale {
  /**
   * The version of the template defined, for instance 1.
   */
  version: number;
  /**
   * A boolean value that indicate if the optimized autoscale feature is enabled or not.
   */
  isEnabled: boolean;
  /**
   * Minimum allowed instances count.
   */
  minimum: number;
  /**
   * Maximum allowed instances count.
   */
  maximum: number;
}

/**
 * A class that contains virtual network definition.
 */
export interface VirtualNetworkConfiguration {
  /**
   * The subnet resource id.
   */
  subnetId: string;
  /**
   * Engine service's public IP address resource id.
   */
  enginePublicIpId: string;
  /**
   * Data management's service public IP address resource id.
   */
  dataManagementPublicIpId: string;
}

/**
 * Properties of the key vault.
 */
export interface KeyVaultProperties {
  /**
   * The name of the key vault key.
   */
  keyName: string;
  /**
   * The version of the key vault key.
   */
  keyVersion: string;
  /**
   * The Uri of the key vault.
   */
  keyVaultUri: string;
}

/**
 * The list of language extension objects.
 */
export interface LanguageExtensionsList {
  /**
   * The list of language extensions.
   */
  value?: LanguageExtension[];
}

/**
 * The language extension object.
 */
export interface LanguageExtension {
  /**
   * The language extension name.
   */
  languageExtensionName?: LanguageExtensionName;
}

/**
 * An error response from Kusto.
 */
export interface CloudError {
  /**
   * An error response from Kusto.
   */
  error?: CloudErrorBody;
}

/**
 * An error response from Kusto.
 */
export interface CloudErrorBody {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the error, intended to be suitable for displaying in a user interface.
   */
  message?: string;
  /**
   * The target of the particular error. For example, the name of the property in error.
   */
  target?: string;
  /**
   * A list of additional details about the error.
   */
  details?: CloudErrorBody[];
}

/**
 * Class representing an update to a Kusto cluster.
 */
export type ClusterUpdate = Resource & {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The SKU of the cluster.
   */
  sku?: AzureSku;
  /**
   * The identity of the cluster, if configured.
   */
  identity?: Identity;
  /**
   * The state of the resource.
   */
  readonly state?: State;
  /**
   * The provisioned state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The cluster URI.
   */
  readonly uri?: string;
  /**
   * The cluster data ingestion URI.
   */
  readonly dataIngestionUri?: string;
  /**
   * The reason for the cluster's current state.
   */
  readonly stateReason?: string;
  /**
   * The cluster's external tenants.
   */
  trustedExternalTenants?: TrustedExternalTenant[];
  /**
   * Optimized auto scale definition.
   */
  optimizedAutoscale?: OptimizedAutoscale;
  /**
   * A boolean value that indicates if the cluster's disks are encrypted.
   */
  enableDiskEncryption?: boolean;
  /**
   * A boolean value that indicates if the streaming ingest is enabled.
   */
  enableStreamingIngest?: boolean;
  /**
   * Virtual network definition.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * KeyVault properties for the cluster encryption.
   */
  keyVaultProperties?: KeyVaultProperties;
  /**
   * A boolean value that indicates if the purge operations are enabled.
   */
  enablePurge?: boolean;
  /**
   * List of the cluster's language extensions.
   */
  languageExtensions?: LanguageExtensionsList;
};

/**
 * A principal assignment check name availability request.
 */
export interface ClusterPrincipalAssignmentCheckNameRequest {
  /**
   * Principal Assignment resource name.
   */
  name: string;
  /**
   * The type of resource, Microsoft.Kusto/clusters/principalAssignments.
   */
  type: Type;
}

/**
 * The result returned from a check name availability request.
 */
export interface CheckNameResult {
  /**
   * Specifies a Boolean value that indicates if the name is available.
   */
  nameAvailable?: boolean;
  /**
   * The name that was checked.
   */
  name?: string;
  /**
   * Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated.
   */
  message?: string;
  /**
   * Message providing the reason why the given name is invalid.
   */
  reason?: Reason;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
 */
export type ProxyResource = Resource & {};

/**
 * Class representing a cluster principal assignment.
 */
export type ClusterPrincipalAssignment = ProxyResource & {
  /**
   * The principal ID assigned to the cluster principal. It can be a user email, application ID, or security group name.
   */
  principalId?: string;
  /**
   * Cluster principal role.
   */
  role?: ClusterPrincipalRole;
  /**
   * The tenant id of the principal
   */
  tenantId?: string;
  /**
   * Principal type.
   */
  principalType?: PrincipalType;
  /**
   * The tenant name of the principal
   */
  readonly tenantName?: string;
  /**
   * The principal name
   */
  readonly principalName?: string;
  /**
   * The provisioned state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * The list Kusto cluster principal assignments operation response.
 */
export interface ClusterPrincipalAssignmentListResult {
  /**
   * The list of Kusto cluster principal assignments.
   */
  value?: ClusterPrincipalAssignment[];
}

/**
 * The list Kusto database principals operation response.
 */
export interface FollowerDatabaseListResult {
  /**
   * The list of follower database result.
   */
  value?: FollowerDatabaseDefinition[];
}

/**
 * A class representing follower database request.
 */
export interface FollowerDatabaseDefinition {
  /**
   * Resource id of the cluster that follows a database owned by this cluster.
   */
  clusterResourceId: string;
  /**
   * Resource name of the attached database configuration in the follower cluster.
   */
  attachedDatabaseConfigurationName: string;
  /**
   * The database name owned by this cluster that was followed. * in case following all databases.
   */
  readonly databaseName?: string;
}

export interface DiagnoseVirtualNetworkResult {
  /**
   * The list of network connectivity diagnostic finding
   */
  findings?: string[];
}

/**
 * The list Kusto clusters operation response.
 */
export interface ClusterListResult {
  /**
   * The list of Kusto clusters.
   */
  value?: Cluster[];
}

/**
 * The list of the EngagementFabric SKU descriptions
 */
export interface SkuDescriptionList {
  /**
   * SKU descriptions
   */
  readonly value?: SkuDescription[];
}

/**
 * The Kusto SKU description of given resource type
 */
export interface SkuDescription {
  /**
   * The resource type
   */
  readonly resourceType?: string;
  /**
   * The name of the SKU
   */
  readonly name?: string;
  /**
   * The tier of the SKU
   */
  readonly tier?: string;
  /**
   * The set of locations that the SKU is available
   */
  readonly locations?: string[];
  /**
   * Locations and zones
   */
  readonly locationInfo?: SkuLocationInfoItem[];
  /**
   * The restrictions because of which SKU cannot be used
   */
  readonly restrictions?: any[];
}

/**
 * The locations and zones info for SKU.
 */
export interface SkuLocationInfoItem {
  /**
   * The available location of the SKU.
   */
  location: string;
  /**
   * The available zone of the SKU.
   */
  zones?: string[];
}

/**
 * The result returned from a cluster check name availability request.
 */
export interface ClusterCheckNameRequest {
  /**
   * Cluster name.
   */
  name: string;
  /**
   * The type of resource, Microsoft.Kusto/clusters.
   */
  type: Type;
}

/**
 * The result returned from a database check name availability request.
 */
export interface CheckNameRequest {
  /**
   * Resource name.
   */
  name: string;
  /**
   * The type of resource, for instance Microsoft.Kusto/clusters/databases.
   */
  type: Type;
}

/**
 * List of available SKUs for a Kusto Cluster.
 */
export interface ListResourceSkusResult {
  /**
   * The collection of available SKUs for an existing resource.
   */
  value?: AzureResourceSku[];
}

/**
 * Azure resource SKU definition.
 */
export interface AzureResourceSku {
  /**
   * Resource Namespace and Type.
   */
  resourceType?: string;
  /**
   * The SKU details.
   */
  sku?: AzureSku;
  /**
   * The number of instances of the cluster.
   */
  capacity?: AzureCapacity;
}

/**
 * Azure capacity definition.
 */
export interface AzureCapacity {
  /**
   * Scale type.
   */
  scaleType: AzureScaleType;
  /**
   * Minimum allowed capacity.
   */
  minimum: number;
  /**
   * Maximum allowed capacity.
   */
  maximum: number;
  /**
   * The default capacity that would be used.
   */
  default: number;
}

/**
 * The list Kusto databases operation response.
 */
export interface DatabaseListResult {
  /**
   * The list of Kusto databases.
   */
  value?: DatabaseUnion[];
}

/**
 * Class representing a Kusto database.
 */
export type Database = ProxyResource & {
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Kind of the database
   */
  kind: Kind;
};

/**
 * A principal assignment check name availability request.
 */
export interface DatabasePrincipalAssignmentCheckNameRequest {
  /**
   * Principal Assignment resource name.
   */
  name: string;
  /**
   * The type of resource, Microsoft.Kusto/clusters/databases/principalAssignments.
   */
  type: Type;
}

/**
 * Class representing a database principal assignment.
 */
export type DatabasePrincipalAssignment = ProxyResource & {
  /**
   * The principal ID assigned to the database principal. It can be a user email, application ID, or security group name.
   */
  principalId?: string;
  /**
   * Database principal role.
   */
  role?: DatabasePrincipalRole;
  /**
   * The tenant id of the principal
   */
  tenantId?: string;
  /**
   * Principal type.
   */
  principalType?: PrincipalType;
  /**
   * The tenant name of the principal
   */
  readonly tenantName?: string;
  /**
   * The principal name
   */
  readonly principalName?: string;
  /**
   * The provisioned state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
};

/**
 * The list Kusto database principal assignments operation response.
 */
export interface DatabasePrincipalAssignmentListResult {
  /**
   * The list of Kusto database principal assignments.
   */
  value?: DatabasePrincipalAssignment[];
}

/**
 * The list Kusto database principals operation response.
 */
export interface DatabasePrincipalListResult {
  /**
   * The list of Kusto database principals.
   */
  value?: DatabasePrincipal[];
}

/**
 * A class representing database principal entity.
 */
export interface DatabasePrincipal {
  /**
   * Database principal role.
   */
  role: DatabasePrincipalRole;
  /**
   * Database principal name.
   */
  name: string;
  /**
   * Database principal type.
   */
  type: DatabasePrincipalType;
  /**
   * Database principal fully qualified name.
   */
  fqn?: string;
  /**
   * Database principal email if exists.
   */
  email?: string;
  /**
   * Application id - relevant only for application principal type.
   */
  appId?: string;
  /**
   * The tenant name of the principal
   */
  readonly tenantName?: string;
}

/**
 * The list Kusto database principals operation request.
 */
export interface DatabasePrincipalListRequest {
  /**
   * The list of Kusto database principals.
   */
  value?: DatabasePrincipal[];
}

/**
 * The list attached database configurations operation response.
 */
export interface AttachedDatabaseConfigurationListResult {
  /**
   * The list of attached database configurations.
   */
  value?: AttachedDatabaseConfiguration[];
}

/**
 * Class representing an attached database configuration.
 */
export type AttachedDatabaseConfiguration = ProxyResource & {
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The provisioned state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The name of the database which you would like to attach, use * if you want to follow all current and future databases.
   */
  databaseName?: string;
  /**
   * The resource id of the cluster where the databases you would like to attach reside.
   */
  clusterResourceId?: string;
  /**
   * The list of databases from the clusterResourceId which are currently attached to the cluster.
   */
  readonly attachedDatabaseNames?: string[];
  /**
   * The default principals modification kind
   */
  defaultPrincipalsModificationKind?: DefaultPrincipalsModificationKind;
};

/**
 * The list Kusto data connections operation response.
 */
export interface DataConnectionListResult {
  /**
   * The list of Kusto data connections.
   */
  value?: DataConnectionUnion[];
}

/**
 * Class representing an data connection.
 */
export type DataConnection = ProxyResource & {
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Kind of the endpoint for the data connection
   */
  kind: Kind;
};

/**
 * Class representing an data connection validation.
 */
export interface DataConnectionValidation {
  /**
   * The name of the data connection.
   */
  dataConnectionName?: string;
  /**
   * The data connection properties to validate.
   */
  properties?: DataConnectionUnion;
}

/**
 * The list Kusto data connection validation result.
 */
export interface DataConnectionValidationListResult {
  /**
   * The list of Kusto data connection validation errors.
   */
  value?: DataConnectionValidationResult[];
}

/**
 * The result returned from a data connection validation request.
 */
export interface DataConnectionValidationResult {
  /**
   * A message which indicates a problem in data connection validation.
   */
  errorMessage?: string;
}

/**
 * A data connection check name availability request.
 */
export interface DataConnectionCheckNameRequest {
  /**
   * Data Connection name.
   */
  name: string;
  /**
   * The type of resource, Microsoft.Kusto/clusters/databases/dataConnections.
   */
  type: Type;
}

/**
 * Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results.
 */
export interface OperationListResult {
  /**
   * The list of operations supported by the resource provider.
   */
  value?: Operation[];
  /**
   * The URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * A REST API operation
 */
export interface Operation {
  /**
   * This is of the format {provider}/{resource}/{operation}.
   */
  name?: string;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation.
   */
  origin?: string;
  /**
   * Any object
   */
  properties?: any;
}

/**
 * The object that describes the operation.
 */
export interface OperationDisplay {
  /**
   * Friendly name of the resource provider.
   */
  provider?: string;
  /**
   * For example: read, write, delete.
   */
  operation?: string;
  /**
   * The resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * The friendly name of the operation.
   */
  description?: string;
}

/**
 * A class that contains database statistics information.
 */
export interface DatabaseStatistics {
  /**
   * The database size - the total size of compressed data and index in bytes.
   */
  size?: number;
}

/**
 * Class representing a read write database.
 */
export type ReadWriteDatabase = Database & {
  /**
   * The provisioned state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The time the data should be kept before it stops being accessible to queries in TimeSpan.
   */
  softDeletePeriod?: string;
  /**
   * The time the data should be kept in cache for fast queries in TimeSpan.
   */
  hotCachePeriod?: string;
  /**
   * The statistics of the database.
   */
  readonly statistics?: DatabaseStatistics;
  /**
   * Indicates whether the database is followed.
   */
  readonly isFollowed?: string;
};

/**
 * Class representing a read only following database.
 */
export type ReadOnlyFollowingDatabase = Database & {
  /**
   * The provisioned state of the resource.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The time the data should be kept before it stops being accessible to queries in TimeSpan.
   */
  readonly softDeletePeriod?: string;
  /**
   * The time the data should be kept in cache for fast queries in TimeSpan.
   */
  hotCachePeriod?: string;
  /**
   * The statistics of the database.
   */
  readonly statistics?: DatabaseStatistics;
  /**
   * The name of the leader cluster
   */
  readonly leaderClusterResourceId?: string;
  /**
   * The name of the attached database configuration cluster
   */
  readonly attachedDatabaseConfigurationName?: string;
  /**
   * The principals modification kind of the database
   */
  readonly principalsModificationKind?: PrincipalsModificationKind;
};

/**
 * Class representing an event hub data connection.
 */
export type EventHubDataConnection = DataConnection & {
  /**
   * The resource ID of the event hub to be used to create a data connection.
   */
  eventHubResourceId?: string;
  /**
   * The event hub consumer group.
   */
  consumerGroup?: string;
  /**
   * The table where the data should be ingested. Optionally the table information can be added to each message.
   */
  tableName?: string;
  /**
   * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
   */
  mappingRuleName?: string;
  /**
   * The data format of the message. Optionally the data format can be added to each message.
   */
  dataFormat?: EventHubDataFormat;
  /**
   * System properties of the event hub
   */
  eventSystemProperties?: string[];
  /**
   * The event hub messages compression type
   */
  compression?: Compression;
};

/**
 * Class representing an iot hub data connection.
 */
export type IotHubDataConnection = DataConnection & {
  /**
   * The resource ID of the Iot hub to be used to create a data connection.
   */
  iotHubResourceId?: string;
  /**
   * The iot hub consumer group.
   */
  consumerGroup?: string;
  /**
   * The table where the data should be ingested. Optionally the table information can be added to each message.
   */
  tableName?: string;
  /**
   * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
   */
  mappingRuleName?: string;
  /**
   * The data format of the message. Optionally the data format can be added to each message.
   */
  dataFormat?: IotHubDataFormat;
  /**
   * System properties of the iot hub
   */
  eventSystemProperties?: string[];
  /**
   * The name of the share access policy
   */
  sharedAccessPolicyName?: string;
};

/**
 * Class representing an Event Grid data connection.
 */
export type EventGridDataConnection = DataConnection & {
  /**
   * The resource ID of the storage account where the data resides.
   */
  storageAccountResourceId?: string;
  /**
   * The resource ID where the event grid is configured to send events.
   */
  eventHubResourceId?: string;
  /**
   * The event hub consumer group.
   */
  consumerGroup?: string;
  /**
   * The table where the data should be ingested. Optionally the table information can be added to each message.
   */
  tableName?: string;
  /**
   * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
   */
  mappingRuleName?: string;
  /**
   * The data format of the message. Optionally the data format can be added to each message.
   */
  dataFormat?: EventGridDataFormat;
};
/**
 * Defines values for AzureSkuName.
 */
export type AzureSkuName =
  | "Standard_DS13_v2+1TB_PS"
  | "Standard_DS13_v2+2TB_PS"
  | "Standard_DS14_v2+3TB_PS"
  | "Standard_DS14_v2+4TB_PS"
  | "Standard_D13_v2"
  | "Standard_D14_v2"
  | "Standard_L8s"
  | "Standard_L16s"
  | "Standard_D11_v2"
  | "Standard_D12_v2"
  | "Standard_L4s"
  | "Dev(No SLA)_Standard_D11_v2"
  | "Standard_E2a_v4"
  | "Standard_E4a_v4"
  | "Standard_E8a_v4"
  | "Standard_E16a_v4"
  | "Standard_E8as_v4+1TB_PS"
  | "Standard_E8as_v4+2TB_PS"
  | "Standard_E16as_v4+3TB_PS"
  | "Standard_E16as_v4+4TB_PS"
  | "Dev(No SLA)_Standard_E2a_v4";
/**
 * Defines values for AzureSkuTier.
 */
export type AzureSkuTier = "Basic" | "Standard";
/**
 * Defines values for State.
 */
export type State =
  | "Creating"
  | "Unavailable"
  | "Running"
  | "Deleting"
  | "Deleted"
  | "Stopping"
  | "Stopped"
  | "Starting"
  | "Updating";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Running"
  | "Creating"
  | "Deleting"
  | "Succeeded"
  | "Failed"
  | "Moving";
/**
 * Defines values for LanguageExtensionName.
 */
export type LanguageExtensionName = "PYTHON" | "R";
/**
 * Defines values for Reason.
 */
export type Reason = "Invalid" | "AlreadyExists";
/**
 * Defines values for ClusterPrincipalRole.
 */
export type ClusterPrincipalRole = "AllDatabasesAdmin" | "AllDatabasesViewer";
/**
 * Defines values for PrincipalType.
 */
export type PrincipalType = "App" | "Group" | "User";
/**
 * Defines values for AzureScaleType.
 */
export type AzureScaleType = "automatic" | "manual" | "none";
/**
 * Defines values for Kind.
 */
export type Kind =
  | "ReadWrite"
  | "ReadOnlyFollowing"
  | "EventHub"
  | "EventGrid"
  | "IotHub";
/**
 * Defines values for DatabasePrincipalRole.
 */
export type DatabasePrincipalRole =
  | "Admin"
  | "Ingestor"
  | "Monitor"
  | "User"
  | "UnrestrictedViewers"
  | "Viewer";
/**
 * Defines values for DatabasePrincipalType.
 */
export type DatabasePrincipalType = "App" | "Group" | "User";
/**
 * Defines values for DefaultPrincipalsModificationKind.
 */
export type DefaultPrincipalsModificationKind = "Union" | "Replace" | "None";
/**
 * Defines values for PrincipalsModificationKind.
 */
export type PrincipalsModificationKind = "Union" | "Replace" | "None";
/**
 * Defines values for EventHubDataFormat.
 */
export type EventHubDataFormat =
  | "MULTIJSON"
  | "JSON"
  | "CSV"
  | "TSV"
  | "SCSV"
  | "SOHSV"
  | "PSV"
  | "TXT"
  | "RAW"
  | "SINGLEJSON"
  | "AVRO"
  | "TSVE"
  | "PARQUET"
  | "ORC";
/**
 * Defines values for Compression.
 */
export type Compression = "None" | "GZip";
/**
 * Defines values for IotHubDataFormat.
 */
export type IotHubDataFormat =
  | "MULTIJSON"
  | "JSON"
  | "CSV"
  | "TSV"
  | "SCSV"
  | "SOHSV"
  | "PSV"
  | "TXT"
  | "RAW"
  | "SINGLEJSON"
  | "AVRO"
  | "TSVE"
  | "PARQUET"
  | "ORC";
/**
 * Defines values for EventGridDataFormat.
 */
export type EventGridDataFormat =
  | "MULTIJSON"
  | "JSON"
  | "CSV"
  | "TSV"
  | "SCSV"
  | "SOHSV"
  | "PSV"
  | "TXT"
  | "RAW"
  | "SINGLEJSON"
  | "AVRO"
  | "TSVE"
  | "PARQUET"
  | "ORC";
/**
 * Defines values for IdentityType.
 */
export type IdentityType = "None" | "SystemAssigned";
/**
 * Defines values for Type.
 */
export type Type =
  | "Microsoft.Kusto/clusters"
  | "Microsoft.Kusto/clusters/databases"
  | "Microsoft.Kusto/clusters/attachedDatabaseConfigurations"
  | "Microsoft.Kusto/clusters/principalAssignments"
  | "Microsoft.Kusto/clusters/databases/dataConnections"
  | "Microsoft.Kusto/clusters/databases/principalAssignments";

/**
 * Contains response data for the get operation.
 */
export type ClustersGetResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Cluster;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ClustersCreateOrUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Cluster;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ClustersUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Cluster;
  };
};

/**
 * Contains response data for the listFollowerDatabases operation.
 */
export type ClustersListFollowerDatabasesResponse = FollowerDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: FollowerDatabaseListResult;
  };
};

/**
 * Contains response data for the diagnoseVirtualNetwork operation.
 */
export type ClustersDiagnoseVirtualNetworkResponse = DiagnoseVirtualNetworkResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DiagnoseVirtualNetworkResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ClustersListByResourceGroupResponse = ClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClusterListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ClustersListResponse = ClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClusterListResult;
  };
};

/**
 * Contains response data for the listSkus operation.
 */
export type ClustersListSkusResponse = SkuDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SkuDescriptionList;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ClustersCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameResult;
  };
};

/**
 * Contains response data for the listSkusByResource operation.
 */
export type ClustersListSkusByResourceResponse = ListResourceSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ListResourceSkusResult;
  };
};

/**
 * Contains response data for the listLanguageExtensions operation.
 */
export type ClustersListLanguageExtensionsResponse = LanguageExtensionsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LanguageExtensionsList;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ClusterPrincipalAssignmentsCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ClusterPrincipalAssignmentsGetResponse = ClusterPrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClusterPrincipalAssignment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ClusterPrincipalAssignmentsCreateOrUpdateResponse = ClusterPrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClusterPrincipalAssignment;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ClusterPrincipalAssignmentsListResponse = ClusterPrincipalAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ClusterPrincipalAssignmentListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type DatabasesCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameResult;
  };
};

/**
 * Contains response data for the listByCluster operation.
 */
export type DatabasesListByClusterResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabasesGetResponse = DatabaseUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseUnion;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabasesCreateOrUpdateResponse = DatabaseUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseUnion;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DatabasesUpdateResponse = DatabaseUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseUnion;
  };
};

/**
 * Contains response data for the listPrincipals operation.
 */
export type DatabasesListPrincipalsResponse = DatabasePrincipalListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabasePrincipalListResult;
  };
};

/**
 * Contains response data for the addPrincipals operation.
 */
export type DatabasesAddPrincipalsResponse = DatabasePrincipalListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabasePrincipalListResult;
  };
};

/**
 * Contains response data for the removePrincipals operation.
 */
export type DatabasesRemovePrincipalsResponse = DatabasePrincipalListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabasePrincipalListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type DatabasePrincipalAssignmentsCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DatabasePrincipalAssignmentsGetResponse = DatabasePrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabasePrincipalAssignment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabasePrincipalAssignmentsCreateOrUpdateResponse = DatabasePrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabasePrincipalAssignment;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DatabasePrincipalAssignmentsListResponse = DatabasePrincipalAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabasePrincipalAssignmentListResult;
  };
};

/**
 * Contains response data for the listByCluster operation.
 */
export type AttachedDatabaseConfigurationsListByClusterResponse = AttachedDatabaseConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AttachedDatabaseConfigurationListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AttachedDatabaseConfigurationsGetResponse = AttachedDatabaseConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AttachedDatabaseConfiguration;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AttachedDatabaseConfigurationsCreateOrUpdateResponse = AttachedDatabaseConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AttachedDatabaseConfiguration;
  };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DataConnectionsListByDatabaseResponse = DataConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataConnectionListResult;
  };
};

/**
 * Contains response data for the dataConnectionValidation operation.
 */
export type DataConnectionsDataConnectionValidationResponse = DataConnectionValidationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataConnectionValidationListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type DataConnectionsCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DataConnectionsGetResponse = DataConnectionUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataConnectionUnion;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DataConnectionsCreateOrUpdateResponse = DataConnectionUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataConnectionUnion;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DataConnectionsUpdateResponse = DataConnectionUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataConnectionUnion;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface KustoManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
