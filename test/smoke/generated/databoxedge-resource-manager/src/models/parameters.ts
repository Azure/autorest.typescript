/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-08-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const deviceName: coreHttp.OperationURLParameter = {
  parameterPath: "deviceName",
  mapper: {
    serializedName: "deviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const dataBoxEdgeDevice: coreHttp.OperationParameter = {
  parameterPath: "dataBoxEdgeDevice",
  mapper: Mappers.DataBoxEdgeDevice
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.DataBoxEdgeDevicePatch
};

export const securitySettings: coreHttp.OperationParameter = {
  parameterPath: "securitySettings",
  mapper: Mappers.SecuritySettings
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.UploadCertificateRequest
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const name: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink3: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const name1: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.BandwidthSchedule
};

export const name2: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name3: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const order: coreHttp.OperationParameter = {
  parameterPath: "order",
  mapper: Mappers.Order
};

export const deviceName1: coreHttp.OperationURLParameter = {
  parameterPath: "deviceName",
  mapper: {
    serializedName: "deviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name4: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const role: coreHttp.OperationParameter = {
  parameterPath: "role",
  mapper: Mappers.Role
};

export const name5: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const share: coreHttp.OperationParameter = {
  parameterPath: "share",
  mapper: Mappers.Share
};

export const name6: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageAccountCredential: coreHttp.OperationParameter = {
  parameterPath: "storageAccountCredential",
  mapper: Mappers.StorageAccountCredential
};

export const storageAccountName: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountName",
  mapper: {
    serializedName: "storageAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageAccount: coreHttp.OperationParameter = {
  parameterPath: "storageAccount",
  mapper: Mappers.StorageAccount
};

export const storageAccountName1: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountName",
  mapper: {
    serializedName: "storageAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageAccountName2: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountName",
  mapper: {
    serializedName: "storageAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageAccountName3: coreHttp.OperationURLParameter = {
  parameterPath: "storageAccountName",
  mapper: {
    serializedName: "storageAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const containerName: coreHttp.OperationURLParameter = {
  parameterPath: "containerName",
  mapper: {
    serializedName: "containerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const container: coreHttp.OperationParameter = {
  parameterPath: "container",
  mapper: Mappers.Container
};

export const containerName1: coreHttp.OperationURLParameter = {
  parameterPath: "containerName",
  mapper: {
    serializedName: "containerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink4: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const name7: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const trigger: coreHttp.OperationParameter = {
  parameterPath: "trigger",
  mapper: Mappers.Trigger
};

export const deviceName2: coreHttp.OperationURLParameter = {
  parameterPath: "deviceName",
  mapper: {
    serializedName: "deviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const name8: coreHttp.OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const user: coreHttp.OperationParameter = {
  parameterPath: "user",
  mapper: Mappers.User
};

export const filter2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
