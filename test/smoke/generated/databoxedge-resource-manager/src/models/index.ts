/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type RoleUnion = Role | IoTRole;
export type TriggerUnion =
  | Trigger
  | FileEventTrigger
  | PeriodicTimerEventTrigger;

/**
 * The list of operations used for the discovery of available provider operations.
 */
export interface OperationsList {
  /**
   * The value.
   */
  value: Operation[];
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * Operations.
 */
export interface Operation {
  /**
   * Name of the operation.
   */
  name?: string;
  /**
   * Properties displayed for the operation.
   */
  display?: OperationDisplay;
  /**
   * Origin of the operation.
   */
  origin?: string;
  /**
   * Service specification.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Operation display properties.
 */
export interface OperationDisplay {
  /**
   * Provider name.
   */
  provider?: string;
  /**
   * The type of resource in which the operation is performed.
   */
  resource?: string;
  /**
   * Operation to be performed on the resource.
   */
  operation?: string;
  /**
   * Description of the operation to be performed.
   */
  description?: string;
}

/**
 * Service specification.
 */
export interface ServiceSpecification {
  /**
   * Metric specification as defined by shoebox.
   */
  metricSpecifications?: MetricSpecificationV1[];
}

/**
 * Metric specification version 1.
 */
export interface MetricSpecificationV1 {
  /**
   * Name of the metric.
   */
  name?: string;
  /**
   * Display name of the metric.
   */
  displayName?: string;
  /**
   * Description of the metric to be displayed.
   */
  displayDescription?: string;
  /**
   * Metric units.
   */
  unit?: MetricUnit;
  /**
   * Metric aggregation type.
   */
  aggregationType?: MetricAggregationType;
  /**
   * Metric dimensions, other than default dimension which is resource.
   */
  dimensions?: MetricDimensionV1[];
  /**
   * Set true to fill the gaps with zero.
   */
  fillGapWithZero?: boolean;
  /**
   * Metric category.
   */
  category?: MetricCategory;
  /**
   * Resource name override.
   */
  resourceIdDimensionNameOverride?: string;
  /**
   * Support granularity of metrics.
   */
  supportedTimeGrainTypes?: TimeGrain[];
  /**
   * Support metric aggregation type.
   */
  supportedAggregationTypes?: MetricAggregationType[];
}

/**
 * Metric Dimension v1.
 */
export interface MetricDimensionV1 {
  /**
   * Name of the metrics dimension.
   */
  name?: string;
  /**
   * Display name of the metrics dimension.
   */
  displayName?: string;
  /**
   * To be exported to shoe box.
   */
  toBeExportedForShoebox?: boolean;
}

/**
 * An error response from the service.
 */
export interface CloudError {
  /**
   * The error details.
   */
  error?: CloudErrorBody;
}

/**
 * An error response from the service.
 */
export interface CloudErrorBody {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * A list of additional details about the error.
   */
  details?: CloudErrorBody[];
}

/**
 * The collection of Data Box Edge/Gateway devices.
 */
export interface DataBoxEdgeDeviceList {
  /**
   * The list of Data Box Edge/Gateway devices.
   */
  readonly value?: DataBoxEdgeDevice[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Represents the base class for all object models.
 */
export interface ARMBaseModel {
  /**
   * The path ID that uniquely identifies the object.
   */
  readonly id?: string;
  /**
   * The object name.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   */
  readonly type?: string;
}

/**
 * The Data Box Edge/Gateway device.
 */
export type DataBoxEdgeDevice = ARMBaseModel & {
  /**
   * The location of the device. This is a supported and registered Azure geographical region (for example, West US, East US, or Southeast Asia). The geographical region of a device cannot be changed once it is created, but if an identical geographical region is specified on update, the request will succeed.
   */
  location: string;
  /**
   * The list of tags that describe the device. These tags can be used to view and group this device (across resource groups).
   */
  tags?: { [propertyName: string]: string };
  /**
   * The SKU type.
   */
  sku?: Sku;
  /**
   * The etag for the devices.
   */
  etag?: string;
  /**
   * The status of the Data Box Edge/Gateway device.
   */
  dataBoxEdgeDeviceStatus?: DataBoxEdgeDeviceStatus;
  /**
   * The Serial Number of Data Box Edge/Gateway device.
   */
  readonly serialNumber?: string;
  /**
   * The Description of the Data Box Edge/Gateway device.
   */
  description?: string;
  /**
   * The description of the Data Box Edge/Gateway device model.
   */
  modelDescription?: string;
  /**
   * The type of the Data Box Edge/Gateway device.
   */
  readonly deviceType?: "DataBoxEdgeDevice";
  /**
   * The Data Box Edge/Gateway device name.
   */
  friendlyName?: string;
  /**
   * The Data Box Edge/Gateway device culture.
   */
  readonly culture?: string;
  /**
   * The Data Box Edge/Gateway device model.
   */
  readonly deviceModel?: string;
  /**
   * The Data Box Edge/Gateway device software version.
   */
  readonly deviceSoftwareVersion?: string;
  /**
   * The Data Box Edge/Gateway device local capacity in MB.
   */
  readonly deviceLocalCapacity?: number;
  /**
   * The Data Box Edge/Gateway device timezone.
   */
  readonly timeZone?: string;
  /**
   * The device software version number of the device (eg: 1.2.18105.6).
   */
  readonly deviceHcsVersion?: string;
  /**
   * Type of compute roles configured.
   */
  readonly configuredRoleTypes?: RoleTypes[];
  /**
   * The number of nodes in the cluster.
   */
  readonly nodeCount?: number;
};

/**
 * The SKU type.
 */
export interface Sku {
  /**
   * SKU name.
   */
  name?: SkuName;
  /**
   * The SKU tier. This is based on the SKU name.
   */
  tier?: "Standard";
}

/**
 * The Data Box Edge/Gateway device patch.
 */
export interface DataBoxEdgeDevicePatch {
  /**
   * The tags attached to the Data Box Edge/Gateway resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Collection of alerts.
 */
export interface AlertList {
  /**
   * The value.
   */
  readonly value?: Alert[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Alert on the data box edge/gateway device.
 */
export type Alert = ARMBaseModel & {
  /**
   * Alert title.
   */
  readonly title?: string;
  /**
   * Alert type.
   */
  readonly alertType?: string;
  /**
   * UTC time when the alert appeared.
   */
  readonly appearedAtDateTime?: Date;
  /**
   * Alert recommendation.
   */
  readonly recommendation?: string;
  /**
   * Severity of the alert.
   */
  readonly severity?: AlertSeverity;
  /**
   * Error details of the alert.
   */
  readonly errorDetails?: AlertErrorDetails;
  /**
   * Alert details.
   */
  readonly detailedInformation?: { [propertyName: string]: string };
};

/**
 * Error details for the alert.
 */
export interface AlertErrorDetails {
  /**
   * Error code.
   */
  readonly errorCode?: string;
  /**
   * Error Message.
   */
  readonly errorMessage?: string;
  /**
   * Number of occurrences.
   */
  readonly occurrences?: number;
}

/**
 * The collection of bandwidth schedules.
 */
export interface BandwidthSchedulesList {
  /**
   * The list of bandwidth schedules.
   */
  readonly value?: BandwidthSchedule[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The bandwidth schedule details.
 */
export type BandwidthSchedule = ARMBaseModel & {
  /**
   * The start time of the schedule in UTC.
   */
  start: string;
  /**
   * The stop time of the schedule in UTC.
   */
  stop: string;
  /**
   * The bandwidth rate in Mbps.
   */
  rateInMbps: number;
  /**
   * The days of the week when this schedule is applicable.
   */
  days: DayOfWeek[];
};

/**
 * The extended Info of the Data Box Edge/Gateway device.
 */
export type DataBoxEdgeDeviceExtendedInfo = ARMBaseModel & {
  /**
   * The digital signature of encrypted certificate.
   */
  encryptionKeyThumbprint?: string;
  /**
   * The public part of the encryption certificate. Client uses this to encrypt any secret.
   */
  encryptionKey?: string;
  /**
   * The Resource ID of the Resource.
   */
  readonly resourceKey?: string;
};

/**
 * A device job.
 */
export interface Job {
  /**
   * The path ID that uniquely identifies the object.
   */
  readonly id?: string;
  /**
   * The name of the object.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   */
  readonly type?: string;
  /**
   * The current status of the job.
   */
  readonly status?: JobStatus;
  /**
   * The UTC date and time at which the job started.
   */
  readonly startTime?: Date;
  /**
   * The UTC date and time at which the job completed.
   */
  readonly endTime?: Date;
  /**
   * The percentage of the job that is complete.
   */
  readonly percentComplete?: number;
  /**
   * The error details.
   */
  readonly error?: JobErrorDetails;
  /**
   * The type of the job.
   */
  readonly jobType?: JobType;
  /**
   * Current stage of the update operation.
   */
  readonly currentStage?: UpdateOperationStage;
  /**
   * The download progress.
   */
  readonly downloadProgress?: UpdateDownloadProgress;
  /**
   * The install progress.
   */
  readonly installProgress?: UpdateInstallProgress;
  /**
   * Total number of errors encountered during the refresh process.
   */
  readonly totalRefreshErrors?: number;
  /**
   * Local share/remote container relative path to the error manifest file of the refresh.
   */
  readonly errorManifestFile?: string;
  /**
   * ARM ID of the entity that was refreshed.
   */
  readonly refreshedEntityId?: string;
  /**
   * If only subfolders need to be refreshed, then the subfolder path inside the share or container. (The path is empty if there are no subfolders.)
   */
  folder?: string;
}

/**
 * The job error information containing the list of job errors.
 */
export interface JobErrorDetails {
  /**
   * The error details.
   */
  readonly errorDetails?: JobErrorItem[];
  /**
   * The code intended for programmatic access.
   */
  readonly code?: string;
  /**
   * The message that describes the error in detail.
   */
  readonly message?: string;
}

/**
 * The job error items.
 */
export interface JobErrorItem {
  /**
   * The recommended actions.
   */
  readonly recommendations?: string[];
  /**
   * The code intended for programmatic access.
   */
  readonly code?: string;
  /**
   * The message that describes the error in detail.
   */
  readonly message?: string;
}

/**
 * Details about the download progress of update.
 */
export interface UpdateDownloadProgress {
  /**
   * The download phase.
   */
  readonly downloadPhase?: DownloadPhase;
  /**
   * Percentage of completion.
   */
  readonly percentComplete?: number;
  /**
   * Total bytes to download.
   */
  readonly totalBytesToDownload?: number;
  /**
   * Total bytes downloaded.
   */
  readonly totalBytesDownloaded?: number;
  /**
   * Number of updates to download.
   */
  readonly numberOfUpdatesToDownload?: number;
  /**
   * Number of updates downloaded.
   */
  readonly numberOfUpdatesDownloaded?: number;
}

/**
 * Progress details during installation of updates.
 */
export interface UpdateInstallProgress {
  /**
   * Percentage completed.
   */
  readonly percentComplete?: number;
  /**
   * Number of updates to install.
   */
  readonly numberOfUpdatesToInstall?: number;
  /**
   * Number of updates installed.
   */
  readonly numberOfUpdatesInstalled?: number;
}

/**
 * The network settings of a device.
 */
export type NetworkSettings = ARMBaseModel & {
  /**
   * The network adapter list on the device.
   */
  readonly networkAdapters?: NetworkAdapter[];
};

/**
 * Represents the networkAdapter on a device.
 */
export interface NetworkAdapter {
  /**
   * Instance ID of network adapter.
   */
  readonly adapterId?: string;
  /**
   * Hardware position of network adapter.
   */
  readonly adapterPosition?: NetworkAdapterPosition;
  /**
   * Logical index of the adapter.
   */
  readonly index?: number;
  /**
   * Node ID of the network adapter.
   */
  readonly nodeId?: string;
  /**
   * Network adapter name.
   */
  readonly networkAdapterName?: string;
  /**
   * Hardware label for the adapter.
   */
  readonly label?: string;
  /**
   * MAC address.
   */
  readonly macAddress?: string;
  /**
   * Link speed.
   */
  readonly linkSpeed?: number;
  /**
   * Value indicating whether this adapter is valid.
   */
  readonly status?: NetworkAdapterStatus;
  /**
   * Value indicating whether this adapter is RDMA capable.
   */
  rdmaStatus?: NetworkAdapterRdmaStatus;
  /**
   * Value indicating whether this adapter has DHCP enabled.
   */
  dhcpStatus?: NetworkAdapterDhcpStatus;
  /**
   * The IPv4 configuration of the network adapter.
   */
  readonly ipv4Configuration?: Ipv4Config;
  /**
   * The IPv6 configuration of the network adapter.
   */
  readonly ipv6Configuration?: Ipv6Config;
  /**
   * The IPv6 local address.
   */
  readonly ipv6LinkLocalAddress?: string;
  /**
   * The list of DNS Servers of the device.
   */
  readonly dnsServers?: string[];
}

/**
 * The network adapter position.
 */
export interface NetworkAdapterPosition {
  /**
   * The network group.
   */
  readonly networkGroup?: NetworkGroup;
  /**
   * The port.
   */
  readonly port?: number;
}

/**
 * Details related to the IPv4 address configuration.
 */
export interface Ipv4Config {
  /**
   * The IPv4 address of the network adapter.
   */
  readonly ipAddress?: string;
  /**
   * The IPv4 subnet of the network adapter.
   */
  readonly subnet?: string;
  /**
   * The IPv4 gateway of the network adapter.
   */
  readonly gateway?: string;
}

/**
 * Details related to the IPv6 address configuration.
 */
export interface Ipv6Config {
  /**
   * The IPv6 address of the network adapter.
   */
  readonly ipAddress?: string;
  /**
   * The IPv6 prefix of the network adapter.
   */
  readonly prefixLength?: number;
  /**
   * The IPv6 gateway of the network adapter.
   */
  readonly gateway?: string;
}

/**
 * Collection of Nodes.
 */
export interface NodeList {
  /**
   * The list of Nodes.
   */
  readonly value?: Node[];
}

/**
 * Represents a single node in a Data box Edge/Gateway device
 * Gateway devices, standalone Edge devices and a single node cluster Edge device will all have 1 node
 * Multi-node Edge devices will have more than 1 nodes
 */
export type Node = ARMBaseModel & {
  /**
   * The current status of the individual node
   */
  readonly nodeStatus?: NodeStatus;
  /**
   * Serial number of the Chassis
   */
  readonly nodeChassisSerialNumber?: string;
  /**
   * Serial number of the individual node
   */
  readonly nodeSerialNumber?: string;
  /**
   * Display Name of the individual node
   */
  readonly nodeDisplayName?: string;
  /**
   * Friendly software version name that is currently installed on the node
   */
  readonly nodeFriendlySoftwareVersion?: string;
  /**
   * HCS version that is currently installed on the node
   */
  readonly nodeHcsVersion?: string;
  /**
   * Guid instance id of the node
   */
  readonly nodeInstanceId?: string;
};

/**
 * List of order entities.
 */
export interface OrderList {
  /**
   * The list of orders.
   */
  readonly value?: Order[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The order details.
 */
export type Order = ARMBaseModel & {
  /**
   * The contact details.
   */
  contactInformation?: ContactDetails;
  /**
   * The shipping address.
   */
  shippingAddress?: Address;
  /**
   * Current status of the order.
   */
  currentStatus?: OrderStatus;
  /**
   * List of status changes in the order.
   */
  readonly orderHistory?: OrderStatus[];
  /**
   * Serial number of the device.
   */
  readonly serialNumber?: string;
  /**
   * Tracking information for the package delivered to the customer whether it has an original or a replacement device.
   */
  readonly deliveryTrackingInfo?: TrackingInfo[];
  /**
   * Tracking information for the package returned from the customer whether it has an original or a replacement device.
   */
  readonly returnTrackingInfo?: TrackingInfo[];
};

/**
 * Contains all the contact details of the customer.
 */
export interface ContactDetails {
  /**
   * The contact person name.
   */
  contactPerson: string;
  /**
   * The name of the company.
   */
  companyName: string;
  /**
   * The phone number.
   */
  phone: string;
  /**
   * The email list.
   */
  emailList: string[];
}

/**
 * The shipping address of the customer.
 */
export interface Address {
  /**
   * The address line1.
   */
  addressLine1: string;
  /**
   * The address line2.
   */
  addressLine2?: string;
  /**
   * The address line3.
   */
  addressLine3?: string;
  /**
   * The postal code.
   */
  postalCode: string;
  /**
   * The city name.
   */
  city: string;
  /**
   * The state name.
   */
  state: string;
  /**
   * The country name.
   */
  country: string;
}

/**
 * Represents a single status change.
 */
export interface OrderStatus {
  /**
   * Status of the order as per the allowed status types.
   */
  status: OrderState;
  /**
   * Time of status update.
   */
  readonly updateDateTime?: Date;
  /**
   * Comments related to this status change.
   */
  comments?: string;
  /**
   * Dictionary to hold generic information which is not stored
   * by the already existing properties
   */
  readonly additionalOrderDetails?: { [propertyName: string]: string };
}

/**
 * Tracking courier information.
 */
export interface TrackingInfo {
  /**
   * Serial number of the device being tracked.
   */
  serialNumber?: string;
  /**
   * Name of the carrier used in the delivery.
   */
  carrierName?: string;
  /**
   * Tracking ID of the shipment.
   */
  trackingId?: string;
  /**
   * Tracking URL of the shipment.
   */
  trackingUrl?: string;
}

/**
 * Collection of all the roles on the Data Box Edge device.
 */
export interface RoleList {
  /**
   * The Value.
   */
  readonly value?: RoleUnion[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Compute role.
 */
export type Role = ARMBaseModel & {
  /**
   * Role type.
   */
  kind: RoleTypes;
};

/**
 * The security settings of a device.
 */
export type SecuritySettings = ARMBaseModel & {
  /**
   * Device administrator password as an encrypted string (encrypted using RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special characters.
   */
  deviceAdminPassword: AsymmetricEncryptedSecret;
};

/**
 * Represent the secrets intended for encryption with asymmetric key pair.
 */
export interface AsymmetricEncryptedSecret {
  /**
   * The value of the secret.
   */
  value: string;
  /**
   * Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
   */
  encryptionCertThumbprint?: string;
  /**
   * The algorithm used to encrypt "Value".
   */
  encryptionAlgorithm: EncryptionAlgorithm;
}

/**
 * Collection of all the shares on the Data Box Edge/Gateway device.
 */
export interface ShareList {
  /**
   * The list of shares.
   */
  readonly value?: Share[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Represents a share on the  Data Box Edge/Gateway device.
 */
export type Share = ARMBaseModel & {
  /**
   * Description for the share.
   */
  description?: string;
  /**
   * Current status of the share.
   */
  shareStatus: ShareStatus;
  /**
   * Current monitoring status of the share.
   */
  monitoringStatus: MonitoringStatus;
  /**
   * Azure container mapping for the share.
   */
  azureContainerInfo?: AzureContainerInfo;
  /**
   * Access protocol to be used by the share.
   */
  accessProtocol: ShareAccessProtocol;
  /**
   * Mapping of users and corresponding access rights on the share (required for SMB protocol).
   */
  userAccessRights?: UserAccessRight[];
  /**
   * List of IP addresses and corresponding access rights on the share(required for NFS protocol).
   */
  clientAccessRights?: ClientAccessRight[];
  /**
   * Details of the refresh job on this share.
   */
  refreshDetails?: RefreshDetails;
  /**
   * Share mount point to the role.
   */
  readonly shareMappings?: MountPointMap[];
  /**
   * Data policy of the share.
   */
  dataPolicy?: DataPolicy;
};

/**
 * Azure container mapping of the endpoint.
 */
export interface AzureContainerInfo {
  /**
   * ID of the storage account credential used to access storage.
   */
  storageAccountCredentialId: string;
  /**
   * Container name (Based on the data format specified, this represents the name of Azure Files/Page blob/Block blob).
   */
  containerName: string;
  /**
   * Storage format used for the file represented by the share.
   */
  dataFormat: AzureContainerDataFormat;
}

/**
 * The mapping between a particular user and the access type on the SMB share.
 */
export interface UserAccessRight {
  /**
   * User ID (already existing in the device).
   */
  userId: string;
  /**
   * Type of access to be allowed for the user.
   */
  accessType: ShareAccessType;
}

/**
 * The mapping between a particular client IP and the type of access client has on the NFS share.
 */
export interface ClientAccessRight {
  /**
   * IP of the client.
   */
  client: string;
  /**
   * Type of access to be allowed for the client.
   */
  accessPermission: ClientPermissionType;
}

/**
 * Fields for tracking refresh job on the share or container.
 */
export interface RefreshDetails {
  /**
   * If a refresh job is currently in progress on this share or container, this field indicates the ARM resource ID of that job. The field is empty if no job is in progress.
   */
  inProgressRefreshJobId?: string;
  /**
   * Indicates the completed time for the last refresh job on this particular share or container, if any.This could be a failed job or a successful job.
   */
  lastCompletedRefreshJobTimeInUTC?: Date;
  /**
   * Indicates the relative path of the error xml for the last refresh job on this particular share or container, if any. This could be a failed job or a successful job.
   */
  errorManifestFile?: string;
  /**
   * Indicates the id of the last refresh job on this particular share or container,if any. This could be a failed job or a successful job.
   */
  lastJob?: string;
}

/**
 * The share mount point.
 */
export interface MountPointMap {
  /**
   * ID of the share mounted to the role VM.
   */
  shareId: string;
  /**
   * ID of the role to which share is mounted.
   */
  readonly roleId?: string;
  /**
   * Mount point for the share.
   */
  readonly mountPoint?: string;
  /**
   * Role type.
   */
  readonly roleType?: RoleTypes;
}

/**
 * The collection of storage account credentials.
 */
export interface StorageAccountCredentialList {
  /**
   * The value.
   */
  readonly value?: StorageAccountCredential[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The storage account credential.
 */
export type StorageAccountCredential = ARMBaseModel & {
  /**
   * Alias for the storage account.
   */
  alias: string;
  /**
   * Username for the storage account.
   */
  userName?: string;
  /**
   * Encrypted storage key.
   */
  accountKey?: AsymmetricEncryptedSecret;
  /**
   * Connection string for the storage account. Use this string if username and account key are not specified.
   */
  connectionString?: string;
  /**
   * Signifies whether SSL needs to be enabled or not.
   */
  sslStatus: SSLStatus;
  /**
   * Blob end point for private clouds.
   */
  blobDomainName?: string;
  /**
   * Type of storage accessed on the storage account.
   */
  accountType: AccountType;
  /**
   * Id of the storage account.
   */
  storageAccountId?: string;
};

/**
 * Collection of all the Storage Accounts on the Data Box Edge/Gateway device.
 */
export interface StorageAccountList {
  /**
   * The list of storageAccounts.
   */
  readonly value?: StorageAccount[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Represents a Storage Account on the  Data Box Edge/Gateway device.
 */
export type StorageAccount = ARMBaseModel & {
  /**
   * Description for the storage Account.
   */
  description?: string;
  /**
   * Current status of the storage account
   */
  storageAccountStatus?: StorageAccountStatus;
  /**
   * Data policy of the storage Account.
   */
  dataPolicy?: DataPolicy;
  /**
   * Storage Account Credential Id
   */
  storageAccountCredentialId?: string;
  /**
   * BlobEndpoint of Storage Account
   */
  readonly blobEndpoint?: string;
  /**
   * The Container Count. Present only for Storage Accounts with DataPolicy set to Cloud.
   */
  readonly containerCount?: number;
};

/**
 * Collection of all the containers on the Data Box Edge/Gateway device.
 */
export interface ContainerList {
  /**
   * The list of containers.
   */
  readonly value?: Container[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Represents a container on the  Data Box Edge/Gateway device.
 */
export type Container = ARMBaseModel & {
  /**
   * Current status of the container.
   */
  readonly containerStatus?: ContainerStatus;
  /**
   * DataFormat for Container
   */
  dataFormat: AzureContainerDataFormat;
  /**
   * Details of the refresh job on this container.
   */
  readonly refreshDetails?: RefreshDetails;
  /**
   * The UTC time when container got created.
   */
  readonly createdDateTime?: Date;
};

/**
 * Collection of all trigger on the data box edge device.
 */
export interface TriggerList {
  /**
   * The list of triggers.
   */
  readonly value?: TriggerUnion[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Trigger details.
 */
export type Trigger = ARMBaseModel & {
  /**
   * Trigger Kind.
   */
  kind: TriggerEventType;
};

/**
 * Details about ongoing updates and availability of updates on the device.
 */
export type UpdateSummary = ARMBaseModel & {
  /**
   * The current version of the device in format: 1.2.17312.13.",
   */
  deviceVersionNumber?: string;
  /**
   * The current version of the device in text format.
   */
  friendlyDeviceVersionName?: string;
  /**
   * The last time when a scan was done on the device.
   */
  deviceLastScannedDateTime?: Date;
  /**
   * The time when the last scan job was completed (success/cancelled/failed) on the appliance.
   */
  lastCompletedScanJobDateTime?: Date;
  /**
   * The time when the last Download job was completed (success/cancelled/failed) on the appliance.
   */
  readonly lastCompletedDownloadJobDateTime?: Date;
  /**
   * The time when the last Install job was completed (success/cancelled/failed) on the appliance.
   */
  readonly lastCompletedInstallJobDateTime?: Date;
  /**
   * The number of updates available for the current device version as per the last device scan.
   */
  readonly totalNumberOfUpdatesAvailable?: number;
  /**
   * The total number of items pending download.
   */
  readonly totalNumberOfUpdatesPendingDownload?: number;
  /**
   * The total number of items pending install.
   */
  readonly totalNumberOfUpdatesPendingInstall?: number;
  /**
   * Indicates if updates are available and at least one of the updates needs a reboot.
   */
  readonly rebootBehavior?: InstallRebootBehavior;
  /**
   * The current update operation.
   */
  readonly ongoingUpdateOperation?: UpdateOperation;
  /**
   * The job ID of the download job in progress.
   */
  readonly inProgressDownloadJobId?: string;
  /**
   * The job ID of the install job in progress.
   */
  readonly inProgressInstallJobId?: string;
  /**
   * The time when the currently running download (if any) started.
   */
  readonly inProgressDownloadJobStartedDateTime?: Date;
  /**
   * The time when the currently running install (if any) started.
   */
  readonly inProgressInstallJobStartedDateTime?: Date;
  /**
   * The list of updates available for install.
   */
  readonly updateTitles?: string[];
  /**
   * The total size of updates available for download in bytes.
   */
  readonly totalUpdateSizeInBytes?: number;
};

/**
 * The upload certificate request.
 */
export interface UploadCertificateRequest {
  /**
   * The authentication type.
   */
  authenticationType?: AuthenticationType;
  /**
   * The base64 encoded certificate raw data.
   */
  certificate: string;
}

/**
 * The upload registration certificate response.
 */
export interface UploadCertificateResponse {
  /**
   * Specifies authentication type.
   */
  authType?: AuthenticationType;
  /**
   * The resource ID of the Data Box Edge/Gateway device.
   */
  readonly resourceId?: string;
  /**
   * Azure Active Directory tenant authority.
   */
  readonly aadAuthority?: string;
  /**
   * Azure Active Directory tenant ID.
   */
  readonly aadTenantId?: string;
  /**
   * Azure Active Directory service principal client ID.
   */
  readonly servicePrincipalClientId?: string;
  /**
   * Azure Active Directory service principal object ID.
   */
  readonly servicePrincipalObjectId?: string;
  /**
   * The azure management endpoint audience.
   */
  readonly azureManagementEndpointAudience?: string;
  /**
   * Identifier of the target resource that is the recipient of the requested token.
   */
  readonly aadAudience?: string;
}

/**
 * Collection of users.
 */
export interface UserList {
  /**
   * The list of users.
   */
  readonly value?: User[];
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Represents a user who has access to one or more shares on the Data Box Edge/Gateway device.
 */
export type User = ARMBaseModel & {
  /**
   * The password details.
   */
  encryptedPassword?: AsymmetricEncryptedSecret;
  /**
   * List of shares that the user has rights on. This field should not be specified during user creation.
   */
  shareAccessRights?: ShareAccessRight[];
  /**
   * Type of the user.
   */
  userType: UserType;
};

/**
 * Specifies the mapping between this particular user and the type of access he has on shares on this device.
 */
export interface ShareAccessRight {
  /**
   * The share ID.
   */
  shareId: string;
  /**
   * Type of access to be allowed on the share for this user.
   */
  accessType: ShareAccessType;
}

/**
 * List of SKU Information objects
 */
export interface SkuInformationList {
  /**
   * List of ResourceType Sku
   */
  readonly value?: ResourceTypeSku[];
  /**
   * Links to the next set of results
   */
  readonly nextLink?: string;
}

/**
 * SkuInformation object
 */
export interface ResourceTypeSku {
  /**
   * The type of the resource
   */
  readonly resourceType?: string;
  /**
   * The Sku name
   */
  readonly name?: SkuName;
  /**
   * The Sku kind
   */
  readonly kind?: string;
  /**
   * The Sku tier
   */
  readonly tier?: "Standard";
  /**
   * The Sku family
   */
  readonly family?: string;
  /**
   * Availability of the SKU for the region
   */
  readonly locations?: string[];
  /**
   * The API versions in which SKU is available
   */
  readonly apiVersions?: string[];
  /**
   * Availability of the SKU for the location/zone
   */
  readonly locationInfo?: SkuLocationInfo[];
  /**
   * The pricing info of the Sku.
   */
  readonly costs?: SkuCost[];
  /**
   * Restrictions of the SKU availability.
   */
  readonly restrictions?: SkuRestriction[];
}

/**
 * The location info.
 */
export interface SkuLocationInfo {
  /**
   * The location.
   */
  readonly location?: string;
  /**
   * The zones.
   */
  readonly zones?: string[];
  /**
   * The sites.
   */
  readonly sites?: string[];
}

/**
 * The metadata for retrieving price info.
 */
export interface SkuCost {
  /**
   * Used for querying price from commerce.
   */
  readonly meterId?: string;
  /**
   * The cost quantity.
   */
  readonly quantity?: number;
  /**
   * Restriction of the SKU for the location/zone
   */
  readonly extendedUnit?: string;
}

/**
 * The restrictions because of which SKU cannot be used.
 */
export interface SkuRestriction {
  /**
   * The type of the restriction.
   */
  readonly type?: string;
  /**
   * The locations where sku is restricted.
   */
  readonly values?: string[];
  /**
   * The SKU restriction reason.
   */
  readonly reasonCode?: SkuRestrictionReasonCode;
  /**
   * Restriction of the SKU for the location/zone
   */
  readonly restrictionInfo?: SkuRestrictionInfo;
}

/**
 * The restriction info with locations and zones.
 */
export interface SkuRestrictionInfo {
  /**
   * The locations.
   */
  readonly locations?: string[];
  /**
   * The zones.
   */
  readonly zones?: string[];
}

/**
 * Authentication mechanism for IoT devices.
 */
export interface Authentication {
  /**
   * Symmetric key for authentication.
   */
  symmetricKey?: SymmetricKey;
}

/**
 * Symmetric key for authentication.
 */
export interface SymmetricKey {
  /**
   * Connection string based on the symmetric key.
   */
  connectionString?: AsymmetricEncryptedSecret;
}

/**
 * Trigger details.
 */
export type FileEventTrigger = Trigger & {
  /**
   * The path ID that uniquely identifies the object.
   */
  readonly id?: string;
  /**
   * The object name.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   */
  readonly type?: string;
  /**
   * File event source details.
   */
  sourceInfo: FileSourceInfo;
  /**
   * Role sink info.
   */
  sinkInfo: RoleSinkInfo;
  /**
   * A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
   */
  customContextTag?: string;
};

/**
 * File source details.
 */
export interface FileSourceInfo {
  /**
   * File share ID.
   */
  shareId: string;
}

/**
 * Compute role against which events will be raised.
 */
export interface RoleSinkInfo {
  /**
   * Compute role ID.
   */
  roleId: string;
}

/**
 * Metadata of IoT device/IoT Edge device to be configured.
 */
export interface IoTDeviceInfo {
  /**
   * ID of the IoT device/edge device.
   */
  deviceId: string;
  /**
   * Host name for the IoT hub associated to the device.
   */
  ioTHostHub: string;
  /**
   * Id for the IoT hub associated to the device.
   */
  ioTHostHubId?: string;
  /**
   * IoT device authentication info.
   */
  authentication?: Authentication;
}

/**
 * Compute role.
 */
export type IoTRole = Role & {
  /**
   * The path ID that uniquely identifies the object.
   */
  readonly id?: string;
  /**
   * The object name.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   */
  readonly type?: string;
  /**
   * Host OS supported by the IoT role.
   */
  hostPlatform?: PlatformType;
  /**
   * IoT device metadata to which data box edge device needs to be connected.
   */
  ioTDeviceDetails?: IoTDeviceInfo;
  /**
   * IoT edge device to which the IoT role needs to be configured.
   */
  ioTEdgeDeviceDetails?: IoTDeviceInfo;
  /**
   * Mount points of shares in role(s).
   */
  shareMappings?: MountPointMap[];
  /**
   * Role status.
   */
  roleStatus?: RoleStatus;
};

/**
 * Trigger details.
 */
export type PeriodicTimerEventTrigger = Trigger & {
  /**
   * The path ID that uniquely identifies the object.
   */
  readonly id?: string;
  /**
   * The object name.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   */
  readonly type?: string;
  /**
   * Periodic timer details.
   */
  sourceInfo: PeriodicTimerSourceInfo;
  /**
   * Role Sink information.
   */
  sinkInfo: RoleSinkInfo;
  /**
   * A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
   */
  customContextTag?: string;
};

/**
 * Periodic timer event source.
 */
export interface PeriodicTimerSourceInfo {
  /**
   * The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
   */
  startTime: Date;
  /**
   * Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
   */
  schedule: string;
  /**
   * Topic where periodic events are published to IoT device.
   */
  topic?: string;
}

/**
 * Defines values for MetricUnit.
 */
export type MetricUnit =
  | "NotSpecified"
  | "Percent"
  | "Count"
  | "Seconds"
  | "Milliseconds"
  | "Bytes"
  | "BytesPerSecond"
  | "CountPerSecond";
/**
 * Defines values for MetricAggregationType.
 */
export type MetricAggregationType =
  | "NotSpecified"
  | "None"
  | "Average"
  | "Minimum"
  | "Maximum"
  | "Total"
  | "Count";
/**
 * Defines values for MetricCategory.
 */
export type MetricCategory = "Capacity" | "Transaction";
/**
 * Defines values for TimeGrain.
 */
export type TimeGrain =
  | "PT1M"
  | "PT5M"
  | "PT15M"
  | "PT30M"
  | "PT1H"
  | "PT6H"
  | "PT12H"
  | "PT1D";
/**
 * Defines values for SkuName.
 */
export type SkuName =
  | "Gateway"
  | "Edge"
  | "TEA_1Node"
  | "TEA_1Node_UPS"
  | "TEA_1Node_Heater"
  | "TEA_1Node_UPS_Heater"
  | "TEA_4Node_Heater"
  | "TEA_4Node_UPS_Heater"
  | "TMA";
/**
 * Defines values for DataBoxEdgeDeviceStatus.
 */
export type DataBoxEdgeDeviceStatus =
  | "ReadyToSetup"
  | "Online"
  | "Offline"
  | "NeedsAttention"
  | "Disconnected"
  | "PartiallyDisconnected"
  | "Maintenance";
/**
 * Defines values for RoleTypes.
 */
export type RoleTypes = "IOT" | "ASA" | "Functions" | "Cognitive";
/**
 * Defines values for AlertSeverity.
 */
export type AlertSeverity = "Informational" | "Warning" | "Critical";
/**
 * Defines values for DayOfWeek.
 */
export type DayOfWeek =
  | "Sunday"
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday";
/**
 * Defines values for JobStatus.
 */
export type JobStatus =
  | "Invalid"
  | "Running"
  | "Succeeded"
  | "Failed"
  | "Canceled"
  | "Paused"
  | "Scheduled";
/**
 * Defines values for JobType.
 */
export type JobType =
  | "Invalid"
  | "ScanForUpdates"
  | "DownloadUpdates"
  | "InstallUpdates"
  | "RefreshShare"
  | "RefreshContainer";
/**
 * Defines values for UpdateOperationStage.
 */
export type UpdateOperationStage =
  | "Unknown"
  | "Initial"
  | "ScanStarted"
  | "ScanComplete"
  | "ScanFailed"
  | "DownloadStarted"
  | "DownloadComplete"
  | "DownloadFailed"
  | "InstallStarted"
  | "InstallComplete"
  | "InstallFailed"
  | "RebootInitiated"
  | "Success"
  | "Failure"
  | "RescanStarted"
  | "RescanComplete"
  | "RescanFailed";
/**
 * Defines values for DownloadPhase.
 */
export type DownloadPhase =
  | "Unknown"
  | "Initializing"
  | "Downloading"
  | "Verifying";
/**
 * Defines values for NetworkGroup.
 */
export type NetworkGroup = "None" | "NonRDMA" | "RDMA";
/**
 * Defines values for NetworkAdapterStatus.
 */
export type NetworkAdapterStatus = "Inactive" | "Active";
/**
 * Defines values for NetworkAdapterRdmaStatus.
 */
export type NetworkAdapterRdmaStatus = "Incapable" | "Capable";
/**
 * Defines values for NetworkAdapterDhcpStatus.
 */
export type NetworkAdapterDhcpStatus = "Disabled" | "Enabled";
/**
 * Defines values for NodeStatus.
 */
export type NodeStatus =
  | "Unknown"
  | "Up"
  | "Down"
  | "Rebooting"
  | "ShuttingDown";
/**
 * Defines values for OrderState.
 */
export type OrderState =
  | "Untracked"
  | "AwaitingFulfilment"
  | "AwaitingPreparation"
  | "AwaitingShipment"
  | "Shipped"
  | "Arriving"
  | "Delivered"
  | "ReplacementRequested"
  | "LostDevice"
  | "Declined"
  | "ReturnInitiated"
  | "AwaitingReturnShipment"
  | "ShippedBack"
  | "CollectedAtMicrosoft";
/**
 * Defines values for EncryptionAlgorithm.
 */
export type EncryptionAlgorithm = "None" | "AES256" | "RSAES_PKCS1_v_1_5";
/**
 * Defines values for ShareStatus.
 */
export type ShareStatus =
  | "Offline"
  | "Unknown"
  | "OK"
  | "Updating"
  | "NeedsAttention";
/**
 * Defines values for MonitoringStatus.
 */
export type MonitoringStatus = "Enabled" | "Disabled";
/**
 * Defines values for AzureContainerDataFormat.
 */
export type AzureContainerDataFormat = "BlockBlob" | "PageBlob" | "AzureFile";
/**
 * Defines values for ShareAccessProtocol.
 */
export type ShareAccessProtocol = "SMB" | "NFS";
/**
 * Defines values for ShareAccessType.
 */
export type ShareAccessType = "Change" | "Read" | "Custom";
/**
 * Defines values for ClientPermissionType.
 */
export type ClientPermissionType = "NoAccess" | "ReadOnly" | "ReadWrite";
/**
 * Defines values for DataPolicy.
 */
export type DataPolicy = "Cloud" | "Local";
/**
 * Defines values for SSLStatus.
 */
export type SSLStatus = "Enabled" | "Disabled";
/**
 * Defines values for AccountType.
 */
export type AccountType = "GeneralPurposeStorage" | "BlobStorage";
/**
 * Defines values for StorageAccountStatus.
 */
export type StorageAccountStatus =
  | "OK"
  | "Offline"
  | "Unknown"
  | "Updating"
  | "NeedsAttention";
/**
 * Defines values for ContainerStatus.
 */
export type ContainerStatus =
  | "OK"
  | "Offline"
  | "Unknown"
  | "Updating"
  | "NeedsAttention";
/**
 * Defines values for TriggerEventType.
 */
export type TriggerEventType = "FileEvent" | "PeriodicTimerEvent";
/**
 * Defines values for InstallRebootBehavior.
 */
export type InstallRebootBehavior =
  | "NeverReboots"
  | "RequiresReboot"
  | "RequestReboot";
/**
 * Defines values for UpdateOperation.
 */
export type UpdateOperation = "None" | "Scan" | "Download" | "Install";
/**
 * Defines values for AuthenticationType.
 */
export type AuthenticationType = "Invalid" | "AzureActiveDirectory";
/**
 * Defines values for UserType.
 */
export type UserType = "Share" | "LocalManagement" | "ARM";
/**
 * Defines values for SkuRestrictionReasonCode.
 */
export type SkuRestrictionReasonCode =
  | "NotAvailableForSubscription"
  | "QuotaId";
/**
 * Defines values for PlatformType.
 */
export type PlatformType = "Windows" | "Linux";
/**
 * Defines values for RoleStatus.
 */
export type RoleStatus = "Enabled" | "Disabled";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationsList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationsList;
  };
};

/**
 * Optional parameters.
 */
export interface DevicesListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list.
   */
  expand?: string;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type DevicesListBySubscriptionResponse = DataBoxEdgeDeviceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataBoxEdgeDeviceList;
  };
};

/**
 * Optional parameters.
 */
export interface DevicesListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list.
   */
  expand?: string;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DevicesListByResourceGroupResponse = DataBoxEdgeDeviceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataBoxEdgeDeviceList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type DevicesGetResponse = DataBoxEdgeDevice & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataBoxEdgeDevice;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DevicesCreateOrUpdateResponse = DataBoxEdgeDevice & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataBoxEdgeDevice;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DevicesUpdateResponse = DataBoxEdgeDevice & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataBoxEdgeDevice;
  };
};

/**
 * Contains response data for the getExtendedInformation operation.
 */
export type DevicesGetExtendedInformationResponse = DataBoxEdgeDeviceExtendedInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataBoxEdgeDeviceExtendedInfo;
  };
};

/**
 * Contains response data for the getNetworkSettings operation.
 */
export type DevicesGetNetworkSettingsResponse = NetworkSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetworkSettings;
  };
};

/**
 * Contains response data for the getUpdateSummary operation.
 */
export type DevicesGetUpdateSummaryResponse = UpdateSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UpdateSummary;
  };
};

/**
 * Contains response data for the uploadCertificate operation.
 */
export type DevicesUploadCertificateResponse = UploadCertificateResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UploadCertificateResponse;
  };
};

/**
 * Optional parameters.
 */
export interface DevicesListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list.
   */
  expand?: string;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type DevicesListBySubscriptionNextResponse = DataBoxEdgeDeviceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataBoxEdgeDeviceList;
  };
};

/**
 * Optional parameters.
 */
export interface DevicesListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list.
   */
  expand?: string;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DevicesListByResourceGroupNextResponse = DataBoxEdgeDeviceList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataBoxEdgeDeviceList;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type AlertsListByDataBoxEdgeDeviceResponse = AlertList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AlertsGetResponse = Alert & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Alert;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type AlertsListByDataBoxEdgeDeviceNextResponse = AlertList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AlertList;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type BandwidthSchedulesListByDataBoxEdgeDeviceResponse = BandwidthSchedulesList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BandwidthSchedulesList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BandwidthSchedulesGetResponse = BandwidthSchedule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BandwidthSchedule;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BandwidthSchedulesCreateOrUpdateResponse = BandwidthSchedule & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BandwidthSchedule;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type BandwidthSchedulesListByDataBoxEdgeDeviceNextResponse = BandwidthSchedulesList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BandwidthSchedulesList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type JobsGetResponse = Job & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Job;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type NodesListByDataBoxEdgeDeviceResponse = NodeList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NodeList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type OperationsStatusGetResponse = Job & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Job;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type OrdersListByDataBoxEdgeDeviceResponse = OrderList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OrderList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type OrdersGetResponse = Order & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Order;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type OrdersCreateOrUpdateResponse = Order & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Order;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type OrdersListByDataBoxEdgeDeviceNextResponse = OrderList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OrderList;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type RolesListByDataBoxEdgeDeviceResponse = RoleList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type RolesGetResponse = RoleUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleUnion;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RolesCreateOrUpdateResponse = RoleUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleUnion;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type RolesListByDataBoxEdgeDeviceNextResponse = RoleList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RoleList;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type SharesListByDataBoxEdgeDeviceResponse = ShareList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ShareList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SharesGetResponse = Share & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Share;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SharesCreateOrUpdateResponse = Share & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Share;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type SharesListByDataBoxEdgeDeviceNextResponse = ShareList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ShareList;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type StorageAccountCredentialsListByDataBoxEdgeDeviceResponse = StorageAccountCredentialList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageAccountCredentialList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type StorageAccountCredentialsGetResponse = StorageAccountCredential & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageAccountCredential;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type StorageAccountCredentialsCreateOrUpdateResponse = StorageAccountCredential & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageAccountCredential;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type StorageAccountCredentialsListByDataBoxEdgeDeviceNextResponse = StorageAccountCredentialList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageAccountCredentialList;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type StorageAccountsListByDataBoxEdgeDeviceResponse = StorageAccountList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageAccountList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type StorageAccountsGetResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageAccount;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type StorageAccountsCreateOrUpdateResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageAccount;
  };
};

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type StorageAccountsListByDataBoxEdgeDeviceNextResponse = StorageAccountList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageAccountList;
  };
};

/**
 * Contains response data for the listByStorageAccount operation.
 */
export type ContainersListByStorageAccountResponse = ContainerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ContainersGetResponse = Container & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Container;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ContainersCreateOrUpdateResponse = Container & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Container;
  };
};

/**
 * Contains response data for the listByStorageAccountNext operation.
 */
export type ContainersListByStorageAccountNextResponse = ContainerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ContainerList;
  };
};

/**
 * Optional parameters.
 */
export interface TriggersListByDataBoxEdgeDeviceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify $filter='CustomContextTag eq <tag>' to filter on custom context tag property
   */
  filter?: string;
}

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type TriggersListByDataBoxEdgeDeviceResponse = TriggerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggerList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type TriggersGetResponse = TriggerUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggerUnion;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TriggersCreateOrUpdateResponse = TriggerUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggerUnion;
  };
};

/**
 * Optional parameters.
 */
export interface TriggersListByDataBoxEdgeDeviceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify $filter='CustomContextTag eq <tag>' to filter on custom context tag property
   */
  filter?: string;
}

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type TriggersListByDataBoxEdgeDeviceNextResponse = TriggerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TriggerList;
  };
};

/**
 * Optional parameters.
 */
export interface UsersListByDataBoxEdgeDeviceOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify $filter='UserType eq <type>' to filter on user type property
   */
  filter?: string;
}

/**
 * Contains response data for the listByDataBoxEdgeDevice operation.
 */
export type UsersListByDataBoxEdgeDeviceResponse = UserList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type UsersGetResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type UsersCreateOrUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: User;
  };
};

/**
 * Optional parameters.
 */
export interface UsersListByDataBoxEdgeDeviceNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Specify $filter='UserType eq <type>' to filter on user type property
   */
  filter?: string;
}

/**
 * Contains response data for the listByDataBoxEdgeDeviceNext operation.
 */
export type UsersListByDataBoxEdgeDeviceNextResponse = UserList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UserList;
  };
};

/**
 * Optional parameters.
 */
export interface SkusListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Specify $filter='location eq <location>' to filter on location.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type SkusListResponse = SkuInformationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SkuInformationList;
  };
};

/**
 * Optional parameters.
 */
export interface DataBoxEdgeManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
