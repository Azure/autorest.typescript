/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationsList: coreHttp.CompositeMapper = {
  serializedName: "OperationsList",
  type: {
    name: "Composite",
    className: "OperationsList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreHttp.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricSpecificationV1" }
          }
        }
      }
    }
  }
};

export const MetricSpecificationV1: coreHttp.CompositeMapper = {
  serializedName: "MetricSpecificationV1",
  type: {
    name: "Composite",
    className: "MetricSpecificationV1",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricDimensionV1" }
          }
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: { type: { name: "String" }, serializedName: "TimeGrain" }
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MetricAggregationType"
          }
        }
      }
    }
  }
};

export const MetricDimensionV1: coreHttp.CompositeMapper = {
  serializedName: "MetricDimensionV1",
  type: {
    name: "Composite",
    className: "MetricDimensionV1",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CloudErrorBody" } }
        }
      }
    }
  }
};

export const DataBoxEdgeDeviceList: coreHttp.CompositeMapper = {
  serializedName: "DataBoxEdgeDeviceList",
  type: {
    name: "Composite",
    className: "DataBoxEdgeDeviceList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DataBoxEdgeDevice" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ARMBaseModel: coreHttp.CompositeMapper = {
  serializedName: "ARMBaseModel",
  type: {
    name: "Composite",
    className: "ARMBaseModel",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxEdgeDevice: coreHttp.CompositeMapper = {
  serializedName: "DataBoxEdgeDevice",
  type: {
    name: "Composite",
    className: "DataBoxEdgeDevice",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      dataBoxEdgeDeviceStatus: {
        serializedName: "properties.dataBoxEdgeDeviceStatus",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      modelDescription: {
        serializedName: "properties.modelDescription",
        type: {
          name: "String"
        }
      },
      deviceType: {
        defaultValue: "DataBoxEdgeDevice",
        serializedName: "properties.deviceType",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      culture: {
        serializedName: "properties.culture",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deviceModel: {
        serializedName: "properties.deviceModel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deviceSoftwareVersion: {
        serializedName: "properties.deviceSoftwareVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deviceLocalCapacity: {
        serializedName: "properties.deviceLocalCapacity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      timeZone: {
        serializedName: "properties.timeZone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deviceHcsVersion: {
        serializedName: "properties.deviceHcsVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configuredRoleTypes: {
        serializedName: "properties.configuredRoleTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" }, serializedName: "RoleTypes" }
        }
      },
      nodeCount: {
        serializedName: "properties.nodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        defaultValue: "Standard",
        serializedName: "tier",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxEdgeDevicePatch: coreHttp.CompositeMapper = {
  serializedName: "DataBoxEdgeDevicePatch",
  type: {
    name: "Composite",
    className: "DataBoxEdgeDevicePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const AlertList: coreHttp.CompositeMapper = {
  serializedName: "AlertList",
  type: {
    name: "Composite",
    className: "AlertList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Alert" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Alert: coreHttp.CompositeMapper = {
  serializedName: "Alert",
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      title: {
        serializedName: "properties.title",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      alertType: {
        serializedName: "properties.alertType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      appearedAtDateTime: {
        serializedName: "properties.appearedAtDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      recommendation: {
        serializedName: "properties.recommendation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "properties.severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "AlertErrorDetails"
        }
      },
      detailedInformation: {
        serializedName: "properties.detailedInformation",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const AlertErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "AlertErrorDetails",
  type: {
    name: "Composite",
    className: "AlertErrorDetails",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      occurrences: {
        serializedName: "occurrences",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BandwidthSchedulesList: coreHttp.CompositeMapper = {
  serializedName: "BandwidthSchedulesList",
  type: {
    name: "Composite",
    className: "BandwidthSchedulesList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "BandwidthSchedule" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BandwidthSchedule: coreHttp.CompositeMapper = {
  serializedName: "BandwidthSchedule",
  type: {
    name: "Composite",
    className: "BandwidthSchedule",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      start: {
        serializedName: "properties.start",
        required: true,
        type: {
          name: "String"
        }
      },
      stop: {
        serializedName: "properties.stop",
        required: true,
        type: {
          name: "String"
        }
      },
      rateInMbps: {
        serializedName: "properties.rateInMbps",
        required: true,
        type: {
          name: "Number"
        }
      },
      days: {
        serializedName: "properties.days",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" }, serializedName: "DayOfWeek" }
        }
      }
    }
  }
};

export const DataBoxEdgeDeviceExtendedInfo: coreHttp.CompositeMapper = {
  serializedName: "DataBoxEdgeDeviceExtendedInfo",
  type: {
    name: "Composite",
    className: "DataBoxEdgeDeviceExtendedInfo",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      encryptionKeyThumbprint: {
        serializedName: "properties.encryptionKeyThumbprint",
        type: {
          name: "String"
        }
      },
      encryptionKey: {
        serializedName: "properties.encryptionKey",
        type: {
          name: "String"
        }
      },
      resourceKey: {
        serializedName: "properties.resourceKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Job: coreHttp.CompositeMapper = {
  serializedName: "Job",
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "JobErrorDetails"
        }
      },
      jobType: {
        serializedName: "properties.jobType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentStage: {
        serializedName: "properties.currentStage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      downloadProgress: {
        serializedName: "downloadProgress",
        type: {
          name: "Composite",
          className: "UpdateDownloadProgress"
        }
      },
      installProgress: {
        serializedName: "installProgress",
        type: {
          name: "Composite",
          className: "UpdateInstallProgress"
        }
      },
      totalRefreshErrors: {
        serializedName: "properties.totalRefreshErrors",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorManifestFile: {
        serializedName: "properties.errorManifestFile",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      refreshedEntityId: {
        serializedName: "properties.refreshedEntityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      folder: {
        serializedName: "properties.folder",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "JobErrorDetails",
  type: {
    name: "Composite",
    className: "JobErrorDetails",
    modelProperties: {
      errorDetails: {
        serializedName: "errorDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "JobErrorItem" } }
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobErrorItem: coreHttp.CompositeMapper = {
  serializedName: "JobErrorItem",
  type: {
    name: "Composite",
    className: "JobErrorItem",
    modelProperties: {
      recommendations: {
        serializedName: "recommendations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "JobErrorItemRecommendationsItem"
          }
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateDownloadProgress: coreHttp.CompositeMapper = {
  serializedName: "UpdateDownloadProgress",
  type: {
    name: "Composite",
    className: "UpdateDownloadProgress",
    modelProperties: {
      downloadPhase: {
        serializedName: "downloadPhase",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalBytesToDownload: {
        serializedName: "totalBytesToDownload",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalBytesDownloaded: {
        serializedName: "totalBytesDownloaded",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesToDownload: {
        serializedName: "numberOfUpdatesToDownload",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesDownloaded: {
        serializedName: "numberOfUpdatesDownloaded",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateInstallProgress: coreHttp.CompositeMapper = {
  serializedName: "UpdateInstallProgress",
  type: {
    name: "Composite",
    className: "UpdateInstallProgress",
    modelProperties: {
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesToInstall: {
        serializedName: "numberOfUpdatesToInstall",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesInstalled: {
        serializedName: "numberOfUpdatesInstalled",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkSettings: coreHttp.CompositeMapper = {
  serializedName: "NetworkSettings",
  type: {
    name: "Composite",
    className: "NetworkSettings",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      networkAdapters: {
        serializedName: "properties.networkAdapters",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "NetworkAdapter" } }
        }
      }
    }
  }
};

export const NetworkAdapter: coreHttp.CompositeMapper = {
  serializedName: "NetworkAdapter",
  type: {
    name: "Composite",
    className: "NetworkAdapter",
    modelProperties: {
      adapterId: {
        serializedName: "adapterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      adapterPosition: {
        serializedName: "adapterPosition",
        type: {
          name: "Composite",
          className: "NetworkAdapterPosition"
        }
      },
      index: {
        serializedName: "index",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodeId: {
        serializedName: "nodeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkAdapterName: {
        serializedName: "networkAdapterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      linkSpeed: {
        serializedName: "linkSpeed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rdmaStatus: {
        serializedName: "rdmaStatus",
        type: {
          name: "String"
        }
      },
      dhcpStatus: {
        serializedName: "dhcpStatus",
        type: {
          name: "String"
        }
      },
      ipv4Configuration: {
        serializedName: "ipv4Configuration",
        type: {
          name: "Composite",
          className: "Ipv4Config"
        }
      },
      ipv6Configuration: {
        serializedName: "ipv6Configuration",
        type: {
          name: "Composite",
          className: "Ipv6Config"
        }
      },
      ipv6LinkLocalAddress: {
        serializedName: "ipv6LinkLocalAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dnsServers: {
        serializedName: "dnsServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "NetworkAdapterDnsServersItem"
          }
        }
      }
    }
  }
};

export const NetworkAdapterPosition: coreHttp.CompositeMapper = {
  serializedName: "NetworkAdapterPosition",
  type: {
    name: "Composite",
    className: "NetworkAdapterPosition",
    modelProperties: {
      networkGroup: {
        serializedName: "networkGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Ipv4Config: coreHttp.CompositeMapper = {
  serializedName: "Ipv4Config",
  type: {
    name: "Composite",
    className: "Ipv4Config",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gateway: {
        serializedName: "gateway",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Ipv6Config: coreHttp.CompositeMapper = {
  serializedName: "Ipv6Config",
  type: {
    name: "Composite",
    className: "Ipv6Config",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      prefixLength: {
        serializedName: "prefixLength",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      gateway: {
        serializedName: "gateway",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeList: coreHttp.CompositeMapper = {
  serializedName: "NodeList",
  type: {
    name: "Composite",
    className: "NodeList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Node" } }
        }
      }
    }
  }
};

export const Node: coreHttp.CompositeMapper = {
  serializedName: "Node",
  type: {
    name: "Composite",
    className: "Node",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      nodeStatus: {
        serializedName: "properties.nodeStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeChassisSerialNumber: {
        serializedName: "properties.nodeChassisSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeSerialNumber: {
        serializedName: "properties.nodeSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeDisplayName: {
        serializedName: "properties.nodeDisplayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeFriendlySoftwareVersion: {
        serializedName: "properties.nodeFriendlySoftwareVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeHcsVersion: {
        serializedName: "properties.nodeHcsVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeInstanceId: {
        serializedName: "properties.nodeInstanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrderList: coreHttp.CompositeMapper = {
  serializedName: "OrderList",
  type: {
    name: "Composite",
    className: "OrderList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Order" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Order: coreHttp.CompositeMapper = {
  serializedName: "Order",
  type: {
    name: "Composite",
    className: "Order",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      contactInformation: {
        serializedName: "contactInformation",
        type: {
          name: "Composite",
          className: "ContactDetails"
        }
      },
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "Address"
        }
      },
      currentStatus: {
        serializedName: "currentStatus",
        type: {
          name: "Composite",
          className: "OrderStatus"
        }
      },
      orderHistory: {
        serializedName: "properties.orderHistory",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OrderStatus" } }
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deliveryTrackingInfo: {
        serializedName: "properties.deliveryTrackingInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TrackingInfo" } }
        }
      },
      returnTrackingInfo: {
        serializedName: "properties.returnTrackingInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TrackingInfo" } }
        }
      }
    }
  }
};

export const ContactDetails: coreHttp.CompositeMapper = {
  serializedName: "ContactDetails",
  type: {
    name: "Composite",
    className: "ContactDetails",
    modelProperties: {
      contactPerson: {
        serializedName: "contactPerson",
        required: true,
        type: {
          name: "String"
        }
      },
      companyName: {
        serializedName: "companyName",
        required: true,
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        required: true,
        type: {
          name: "String"
        }
      },
      emailList: {
        serializedName: "emailList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ContactDetailsEmailListItem"
          }
        }
      }
    }
  }
};

export const Address: coreHttp.CompositeMapper = {
  serializedName: "Address",
  type: {
    name: "Composite",
    className: "Address",
    modelProperties: {
      addressLine1: {
        serializedName: "addressLine1",
        required: true,
        type: {
          name: "String"
        }
      },
      addressLine2: {
        serializedName: "addressLine2",
        type: {
          name: "String"
        }
      },
      addressLine3: {
        serializedName: "addressLine3",
        type: {
          name: "String"
        }
      },
      postalCode: {
        serializedName: "postalCode",
        required: true,
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrderStatus: coreHttp.CompositeMapper = {
  serializedName: "OrderStatus",
  type: {
    name: "Composite",
    className: "OrderStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      updateDateTime: {
        serializedName: "updateDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      },
      additionalOrderDetails: {
        serializedName: "additionalOrderDetails",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const TrackingInfo: coreHttp.CompositeMapper = {
  serializedName: "TrackingInfo",
  type: {
    name: "Composite",
    className: "TrackingInfo",
    modelProperties: {
      serialNumber: {
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      },
      carrierName: {
        serializedName: "carrierName",
        type: {
          name: "String"
        }
      },
      trackingId: {
        serializedName: "trackingId",
        type: {
          name: "String"
        }
      },
      trackingUrl: {
        serializedName: "trackingUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleList: coreHttp.CompositeMapper = {
  serializedName: "RoleList",
  type: {
    name: "Composite",
    className: "RoleList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Role" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Role: coreHttp.CompositeMapper = {
  serializedName: "Role",
  type: {
    name: "Composite",
    className: "Role",
    uberParent: "ARMBaseModel",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecuritySettings: coreHttp.CompositeMapper = {
  serializedName: "SecuritySettings",
  type: {
    name: "Composite",
    className: "SecuritySettings",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      deviceAdminPassword: {
        serializedName: "deviceAdminPassword",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      }
    }
  }
};

export const AsymmetricEncryptedSecret: coreHttp.CompositeMapper = {
  serializedName: "AsymmetricEncryptedSecret",
  type: {
    name: "Composite",
    className: "AsymmetricEncryptedSecret",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      encryptionCertThumbprint: {
        serializedName: "encryptionCertThumbprint",
        type: {
          name: "String"
        }
      },
      encryptionAlgorithm: {
        serializedName: "encryptionAlgorithm",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareList: coreHttp.CompositeMapper = {
  serializedName: "ShareList",
  type: {
    name: "Composite",
    className: "ShareList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Share" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Share: coreHttp.CompositeMapper = {
  serializedName: "Share",
  type: {
    name: "Composite",
    className: "Share",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      shareStatus: {
        serializedName: "properties.shareStatus",
        required: true,
        type: {
          name: "String"
        }
      },
      monitoringStatus: {
        serializedName: "properties.monitoringStatus",
        required: true,
        type: {
          name: "String"
        }
      },
      azureContainerInfo: {
        serializedName: "azureContainerInfo",
        type: {
          name: "Composite",
          className: "AzureContainerInfo"
        }
      },
      accessProtocol: {
        serializedName: "properties.accessProtocol",
        required: true,
        type: {
          name: "String"
        }
      },
      userAccessRights: {
        serializedName: "properties.userAccessRights",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UserAccessRight" } }
        }
      },
      clientAccessRights: {
        serializedName: "properties.clientAccessRights",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ClientAccessRight" }
          }
        }
      },
      refreshDetails: {
        serializedName: "refreshDetails",
        type: {
          name: "Composite",
          className: "RefreshDetails"
        }
      },
      shareMappings: {
        serializedName: "properties.shareMappings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MountPointMap" } }
        }
      },
      dataPolicy: {
        serializedName: "properties.dataPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureContainerInfo: coreHttp.CompositeMapper = {
  serializedName: "AzureContainerInfo",
  type: {
    name: "Composite",
    className: "AzureContainerInfo",
    modelProperties: {
      storageAccountCredentialId: {
        serializedName: "storageAccountCredentialId",
        required: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        required: true,
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "dataFormat",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserAccessRight: coreHttp.CompositeMapper = {
  serializedName: "UserAccessRight",
  type: {
    name: "Composite",
    className: "UserAccessRight",
    modelProperties: {
      userId: {
        serializedName: "userId",
        required: true,
        type: {
          name: "String"
        }
      },
      accessType: {
        serializedName: "accessType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientAccessRight: coreHttp.CompositeMapper = {
  serializedName: "ClientAccessRight",
  type: {
    name: "Composite",
    className: "ClientAccessRight",
    modelProperties: {
      client: {
        serializedName: "client",
        required: true,
        type: {
          name: "String"
        }
      },
      accessPermission: {
        serializedName: "accessPermission",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RefreshDetails: coreHttp.CompositeMapper = {
  serializedName: "RefreshDetails",
  type: {
    name: "Composite",
    className: "RefreshDetails",
    modelProperties: {
      inProgressRefreshJobId: {
        serializedName: "inProgressRefreshJobId",
        type: {
          name: "String"
        }
      },
      lastCompletedRefreshJobTimeInUTC: {
        serializedName: "lastCompletedRefreshJobTimeInUTC",
        type: {
          name: "DateTime"
        }
      },
      errorManifestFile: {
        serializedName: "errorManifestFile",
        type: {
          name: "String"
        }
      },
      lastJob: {
        serializedName: "lastJob",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountPointMap: coreHttp.CompositeMapper = {
  serializedName: "MountPointMap",
  type: {
    name: "Composite",
    className: "MountPointMap",
    modelProperties: {
      shareId: {
        serializedName: "shareId",
        required: true,
        type: {
          name: "String"
        }
      },
      roleId: {
        serializedName: "roleId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      mountPoint: {
        serializedName: "mountPoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      roleType: {
        serializedName: "roleType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCredentialList: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountCredentialList",
  type: {
    name: "Composite",
    className: "StorageAccountCredentialList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "StorageAccountCredential" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCredential: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountCredential",
  type: {
    name: "Composite",
    className: "StorageAccountCredential",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      alias: {
        serializedName: "properties.alias",
        required: true,
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      },
      connectionString: {
        serializedName: "properties.connectionString",
        type: {
          name: "String"
        }
      },
      sslStatus: {
        serializedName: "properties.sslStatus",
        required: true,
        type: {
          name: "String"
        }
      },
      blobDomainName: {
        serializedName: "properties.blobDomainName",
        type: {
          name: "String"
        }
      },
      accountType: {
        serializedName: "properties.accountType",
        required: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "properties.storageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountList: coreHttp.CompositeMapper = {
  serializedName: "StorageAccountList",
  type: {
    name: "Composite",
    className: "StorageAccountList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "StorageAccount" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccount: coreHttp.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      storageAccountStatus: {
        serializedName: "properties.storageAccountStatus",
        type: {
          name: "String"
        }
      },
      dataPolicy: {
        serializedName: "properties.dataPolicy",
        type: {
          name: "String"
        }
      },
      storageAccountCredentialId: {
        serializedName: "properties.storageAccountCredentialId",
        type: {
          name: "String"
        }
      },
      blobEndpoint: {
        serializedName: "properties.blobEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containerCount: {
        serializedName: "properties.containerCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContainerList: coreHttp.CompositeMapper = {
  serializedName: "ContainerList",
  type: {
    name: "Composite",
    className: "ContainerList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Container" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Container: coreHttp.CompositeMapper = {
  serializedName: "Container",
  type: {
    name: "Composite",
    className: "Container",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      containerStatus: {
        serializedName: "properties.containerStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        required: true,
        type: {
          name: "String"
        }
      },
      refreshDetails: {
        serializedName: "refreshDetails",
        type: {
          name: "Composite",
          className: "RefreshDetails"
        }
      },
      createdDateTime: {
        serializedName: "properties.createdDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const TriggerList: coreHttp.CompositeMapper = {
  serializedName: "TriggerList",
  type: {
    name: "Composite",
    className: "TriggerList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Trigger" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Trigger: coreHttp.CompositeMapper = {
  serializedName: "Trigger",
  type: {
    name: "Composite",
    className: "Trigger",
    uberParent: "ARMBaseModel",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateSummary: coreHttp.CompositeMapper = {
  serializedName: "UpdateSummary",
  type: {
    name: "Composite",
    className: "UpdateSummary",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      deviceVersionNumber: {
        serializedName: "properties.deviceVersionNumber",
        type: {
          name: "String"
        }
      },
      friendlyDeviceVersionName: {
        serializedName: "properties.friendlyDeviceVersionName",
        type: {
          name: "String"
        }
      },
      deviceLastScannedDateTime: {
        serializedName: "properties.deviceLastScannedDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastCompletedScanJobDateTime: {
        serializedName: "properties.lastCompletedScanJobDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastCompletedDownloadJobDateTime: {
        serializedName: "properties.lastCompletedDownloadJobDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastCompletedInstallJobDateTime: {
        serializedName: "properties.lastCompletedInstallJobDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      totalNumberOfUpdatesAvailable: {
        serializedName: "properties.totalNumberOfUpdatesAvailable",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalNumberOfUpdatesPendingDownload: {
        serializedName: "properties.totalNumberOfUpdatesPendingDownload",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalNumberOfUpdatesPendingInstall: {
        serializedName: "properties.totalNumberOfUpdatesPendingInstall",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      rebootBehavior: {
        serializedName: "properties.rebootBehavior",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ongoingUpdateOperation: {
        serializedName: "properties.ongoingUpdateOperation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inProgressDownloadJobId: {
        serializedName: "properties.inProgressDownloadJobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inProgressInstallJobId: {
        serializedName: "properties.inProgressInstallJobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inProgressDownloadJobStartedDateTime: {
        serializedName: "properties.inProgressDownloadJobStartedDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      inProgressInstallJobStartedDateTime: {
        serializedName: "properties.inProgressInstallJobStartedDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updateTitles: {
        serializedName: "properties.updateTitles",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "UpdateSummaryPropertiesUpdateTitlesItem"
          }
        }
      },
      totalUpdateSizeInBytes: {
        serializedName: "properties.totalUpdateSizeInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UploadCertificateRequest: coreHttp.CompositeMapper = {
  serializedName: "UploadCertificateRequest",
  type: {
    name: "Composite",
    className: "UploadCertificateRequest",
    modelProperties: {
      authenticationType: {
        serializedName: "properties.authenticationType",
        type: {
          name: "String"
        }
      },
      certificate: {
        serializedName: "properties.certificate",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UploadCertificateResponse: coreHttp.CompositeMapper = {
  serializedName: "UploadCertificateResponse",
  type: {
    name: "Composite",
    className: "UploadCertificateResponse",
    modelProperties: {
      authType: {
        serializedName: "authType",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aadAuthority: {
        serializedName: "aadAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aadTenantId: {
        serializedName: "aadTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalClientId: {
        serializedName: "servicePrincipalClientId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalObjectId: {
        serializedName: "servicePrincipalObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureManagementEndpointAudience: {
        serializedName: "azureManagementEndpointAudience",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aadAudience: {
        serializedName: "aadAudience",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserList: coreHttp.CompositeMapper = {
  serializedName: "UserList",
  type: {
    name: "Composite",
    className: "UserList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "User" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const User: coreHttp.CompositeMapper = {
  serializedName: "User",
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      encryptedPassword: {
        serializedName: "encryptedPassword",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      },
      shareAccessRights: {
        serializedName: "properties.shareAccessRights",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ShareAccessRight" }
          }
        }
      },
      userType: {
        serializedName: "properties.userType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareAccessRight: coreHttp.CompositeMapper = {
  serializedName: "ShareAccessRight",
  type: {
    name: "Composite",
    className: "ShareAccessRight",
    modelProperties: {
      shareId: {
        serializedName: "shareId",
        required: true,
        type: {
          name: "String"
        }
      },
      accessType: {
        serializedName: "accessType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuInformationList: coreHttp.CompositeMapper = {
  serializedName: "SkuInformationList",
  type: {
    name: "Composite",
    className: "SkuInformationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResourceTypeSku" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceTypeSku: coreHttp.CompositeMapper = {
  serializedName: "ResourceTypeSku",
  type: {
    name: "Composite",
    className: "ResourceTypeSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tier: {
        defaultValue: "Standard",
        serializedName: "tier",
        isConstant: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceTypeSkuLocationsItem"
          }
        }
      },
      apiVersions: {
        serializedName: "apiVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ResourceTypeSkuApiVersionsItem"
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuLocationInfo" } }
        }
      },
      costs: {
        serializedName: "costs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuCost" } }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SkuRestriction" } }
        }
      }
    }
  }
};

export const SkuLocationInfo: coreHttp.CompositeMapper = {
  serializedName: "SkuLocationInfo",
  type: {
    name: "Composite",
    className: "SkuLocationInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuLocationInfoZonesItem"
          }
        }
      },
      sites: {
        serializedName: "sites",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuLocationInfoSitesItem"
          }
        }
      }
    }
  }
};

export const SkuCost: coreHttp.CompositeMapper = {
  serializedName: "SkuCost",
  type: {
    name: "Composite",
    className: "SkuCost",
    modelProperties: {
      meterId: {
        serializedName: "meterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      extendedUnit: {
        serializedName: "extendedUnit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuRestriction: coreHttp.CompositeMapper = {
  serializedName: "SkuRestriction",
  type: {
    name: "Composite",
    className: "SkuRestriction",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuRestrictionValuesItem"
          }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restrictionInfo: {
        serializedName: "restrictionInfo",
        type: {
          name: "Composite",
          className: "SkuRestrictionInfo"
        }
      }
    }
  }
};

export const SkuRestrictionInfo: coreHttp.CompositeMapper = {
  serializedName: "SkuRestrictionInfo",
  type: {
    name: "Composite",
    className: "SkuRestrictionInfo",
    modelProperties: {
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuRestrictionInfoLocationsItem"
          }
        }
      },
      zones: {
        serializedName: "zones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SkuRestrictionInfoZonesItem"
          }
        }
      }
    }
  }
};

export const Authentication: coreHttp.CompositeMapper = {
  serializedName: "Authentication",
  type: {
    name: "Composite",
    className: "Authentication",
    modelProperties: {
      symmetricKey: {
        serializedName: "symmetricKey",
        type: {
          name: "Composite",
          className: "SymmetricKey"
        }
      }
    }
  }
};

export const SymmetricKey: coreHttp.CompositeMapper = {
  serializedName: "SymmetricKey",
  type: {
    name: "Composite",
    className: "SymmetricKey",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      }
    }
  }
};

export const FileEventTrigger: coreHttp.CompositeMapper = {
  serializedName: "FileEvent",
  type: {
    name: "Composite",
    className: "FileEventTrigger",
    uberParent: "ARMBaseModel",
    polymorphicDiscriminator: ARMBaseModel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Trigger.type.modelProperties,
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceInfo: {
        serializedName: "sourceInfo",
        type: {
          name: "Composite",
          className: "FileSourceInfo"
        }
      },
      sinkInfo: {
        serializedName: "sinkInfo",
        type: {
          name: "Composite",
          className: "RoleSinkInfo"
        }
      },
      customContextTag: {
        serializedName: "properties.customContextTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileSourceInfo: coreHttp.CompositeMapper = {
  serializedName: "FileSourceInfo",
  type: {
    name: "Composite",
    className: "FileSourceInfo",
    modelProperties: {
      shareId: {
        serializedName: "shareId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleSinkInfo: coreHttp.CompositeMapper = {
  serializedName: "RoleSinkInfo",
  type: {
    name: "Composite",
    className: "RoleSinkInfo",
    modelProperties: {
      roleId: {
        serializedName: "roleId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTDeviceInfo: coreHttp.CompositeMapper = {
  serializedName: "IoTDeviceInfo",
  type: {
    name: "Composite",
    className: "IoTDeviceInfo",
    modelProperties: {
      deviceId: {
        serializedName: "deviceId",
        required: true,
        type: {
          name: "String"
        }
      },
      ioTHostHub: {
        serializedName: "ioTHostHub",
        required: true,
        type: {
          name: "String"
        }
      },
      ioTHostHubId: {
        serializedName: "ioTHostHubId",
        type: {
          name: "String"
        }
      },
      authentication: {
        serializedName: "authentication",
        type: {
          name: "Composite",
          className: "Authentication"
        }
      }
    }
  }
};

export const IoTRole: coreHttp.CompositeMapper = {
  serializedName: "IOT",
  type: {
    name: "Composite",
    className: "IoTRole",
    uberParent: "ARMBaseModel",
    polymorphicDiscriminator: ARMBaseModel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Role.type.modelProperties,
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostPlatform: {
        serializedName: "properties.hostPlatform",
        type: {
          name: "String"
        }
      },
      ioTDeviceDetails: {
        serializedName: "ioTDeviceDetails",
        type: {
          name: "Composite",
          className: "IoTDeviceInfo"
        }
      },
      ioTEdgeDeviceDetails: {
        serializedName: "ioTEdgeDeviceDetails",
        type: {
          name: "Composite",
          className: "IoTDeviceInfo"
        }
      },
      shareMappings: {
        serializedName: "properties.shareMappings",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MountPointMap" } }
        }
      },
      roleStatus: {
        serializedName: "properties.roleStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeriodicTimerEventTrigger: coreHttp.CompositeMapper = {
  serializedName: "PeriodicTimerEvent",
  type: {
    name: "Composite",
    className: "PeriodicTimerEventTrigger",
    uberParent: "ARMBaseModel",
    polymorphicDiscriminator: ARMBaseModel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Trigger.type.modelProperties,
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceInfo: {
        serializedName: "sourceInfo",
        type: {
          name: "Composite",
          className: "PeriodicTimerSourceInfo"
        }
      },
      sinkInfo: {
        serializedName: "sinkInfo",
        type: {
          name: "Composite",
          className: "RoleSinkInfo"
        }
      },
      customContextTag: {
        serializedName: "properties.customContextTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeriodicTimerSourceInfo: coreHttp.CompositeMapper = {
  serializedName: "PeriodicTimerSourceInfo",
  type: {
    name: "Composite",
    className: "PeriodicTimerSourceInfo",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      schedule: {
        serializedName: "schedule",
        required: true,
        type: {
          name: "String"
        }
      },
      topic: {
        serializedName: "topic",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  "ARMBaseModel.Role": Role,
  "ARMBaseModel.Trigger": Trigger,
  "ARMBaseModel.FileEvent": FileEventTrigger,
  "ARMBaseModel.IOT": IoTRole,
  "ARMBaseModel.PeriodicTimerEvent": PeriodicTimerEventTrigger
};
