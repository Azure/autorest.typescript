/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataBoxEdgeManagementClient } from "../dataBoxEdgeManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ContainersListByStorageAccountResponse,
  ContainersGetResponse,
  Container,
  ContainersCreateOrUpdateResponse,
  ContainersListByStorageAccountNextResponse
} from "../models";

/**
 * Class representing a Containers.
 */
export class Containers {
  private readonly client: DataBoxEdgeManagementClient;

  /**
   * Initialize a new instance of the class Containers class.
   * @param client Reference to the service client
   */
  constructor(client: DataBoxEdgeManagementClient) {
    this.client = client;
  }

  /**
   * Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway device.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param storageAccountName The storage Account name.
   * @param options The options parameters.
   */
  listByStorageAccount(
    resourceGroupName: string,
    deviceName: string,
    storageAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainersListByStorageAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deviceName,
        storageAccountName,
        options: operationOptions
      },
      listByStorageAccountOperationSpec
    ) as Promise<ContainersListByStorageAccountResponse>;
  }

  /**
   * Gets a container by name.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container Name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    deviceName: string,
    storageAccountName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainersGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deviceName,
        storageAccountName,
        containerName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<ContainersGetResponse>;
  }

  /**
   * Creates a new container or updates an existing container on the device.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param container The container properties.
   * @param containerName The container name.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    deviceName: string,
    storageAccountName: string,
    container: Container,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<ContainersCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      deviceName,
      storageAccountName,
      container,
      containerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ContainersCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the container on the Data Box Edge/Data Box Gateway device.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container name.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    deviceName: string,
    storageAccountName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      deviceName,
      storageAccountName,
      containerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Refreshes the container metadata with the data from the cloud.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container name.
   * @param options The options parameters.
   */
  async refresh(
    resourceGroupName: string,
    deviceName: string,
    storageAccountName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      deviceName,
      storageAccountName,
      containerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      refreshOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: refreshOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListByStorageAccountNext
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param storageAccountName The storage Account name.
   * @param nextLink The nextLink from the previous successful call to the ListByStorageAccount method.
   * @param options The options parameters.
   */
  listByStorageAccountNext(
    resourceGroupName: string,
    deviceName: string,
    storageAccountName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainersListByStorageAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deviceName,
        storageAccountName,
        nextLink,
        options: operationOptions
      },
      listByStorageAccountNextOperationSpec
    ) as Promise<ContainersListByStorageAccountNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByStorageAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.storageAccountName2
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Container
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.storageAccountName3,
    Parameters.containerName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Container
    },
    201: {
      bodyMapper: Mappers.Container
    },
    202: {
      bodyMapper: Mappers.Container
    },
    204: {
      bodyMapper: Mappers.Container
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.container,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.storageAccountName3,
    Parameters.containerName1
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.storageAccountName3,
    Parameters.containerName1
  ],
  serializer
};
const refreshOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}/refresh",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.storageAccountName3,
    Parameters.containerName1
  ],
  serializer
};
const listByStorageAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.storageAccountName2,
    Parameters.nextLink4
  ],
  serializer
};
