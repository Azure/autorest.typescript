/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataBoxEdgeManagementClient } from "../dataBoxEdgeManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  BandwidthSchedulesListByDataBoxEdgeDeviceResponse,
  BandwidthSchedulesGetResponse,
  BandwidthSchedule,
  BandwidthSchedulesCreateOrUpdateResponse,
  BandwidthSchedulesListByDataBoxEdgeDeviceNextResponse
} from "../models";

/**
 * Class representing a BandwidthSchedules.
 */
export class BandwidthSchedules {
  private readonly client: DataBoxEdgeManagementClient;

  /**
   * Initialize a new instance of the class BandwidthSchedules class.
   * @param client Reference to the service client
   */
  constructor(client: DataBoxEdgeManagementClient) {
    this.client = client;
  }

  /**
   * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param options The options parameters.
   */
  listByDataBoxEdgeDevice(
    resourceGroupName: string,
    deviceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<BandwidthSchedulesListByDataBoxEdgeDeviceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, deviceName, options: operationOptions },
      listByDataBoxEdgeDeviceOperationSpec
    ) as Promise<BandwidthSchedulesListByDataBoxEdgeDeviceResponse>;
  }

  /**
   * Gets the properties of the specified bandwidth schedule.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param name The bandwidth schedule name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    deviceName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<BandwidthSchedulesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, deviceName, name, options: operationOptions },
      getOperationSpec
    ) as Promise<BandwidthSchedulesGetResponse>;
  }

  /**
   * Creates or updates a bandwidth schedule.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param parameters The bandwidth schedule to be added or updated.
   * @param name The bandwidth schedule name which needs to be added/updated.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    deviceName: string,
    parameters: BandwidthSchedule,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<BandwidthSchedulesCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      deviceName,
      parameters,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        BandwidthSchedulesCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the specified bandwidth schedule.
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param name The bandwidth schedule name.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    deviceName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      deviceName,
      name,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListByDataBoxEdgeDeviceNext
   * @param resourceGroupName The resource group name.
   * @param deviceName The device name.
   * @param nextLink The nextLink from the previous successful call to the ListByDataBoxEdgeDevice
   *                 method.
   * @param options The options parameters.
   */
  listByDataBoxEdgeDeviceNext(
    resourceGroupName: string,
    deviceName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<BandwidthSchedulesListByDataBoxEdgeDeviceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, deviceName, nextLink, options: operationOptions },
      listByDataBoxEdgeDeviceNextOperationSpec
    ) as Promise<BandwidthSchedulesListByDataBoxEdgeDeviceNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByDataBoxEdgeDeviceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BandwidthSchedulesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BandwidthSchedule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.name1
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BandwidthSchedule
    },
    201: {
      bodyMapper: Mappers.BandwidthSchedule
    },
    202: {
      bodyMapper: Mappers.BandwidthSchedule
    },
    204: {
      bodyMapper: Mappers.BandwidthSchedule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.name2
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.name1
  ],
  serializer
};
const listByDataBoxEdgeDeviceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BandwidthSchedulesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deviceName,
    Parameters.nextLink3
  ],
  serializer
};
