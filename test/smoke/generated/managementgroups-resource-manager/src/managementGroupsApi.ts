/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { ManagementGroupsApiContext } from "./managementGroupsApiContext";
import {
  CheckNameAvailabilityRequest,
  ManagementGroupsAPICheckNameAvailabilityResponse,
  ManagementGroupsAPIStartTenantBackfillResponse,
  ManagementGroupsAPITenantBackfillStatusResponse
} from "./models";

class ManagementGroupsApi extends ManagementGroupsApiContext {
  /**
   * Initializes a new instance of the ManagementGroupsApi class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    options?: Models.ManagementGroupsApiOptionalParams
  ) {
    super(credentials, options);
    this.managementGroups = new operations.ManagementGroups(this);
    this.managementGroupSubscriptions = new operations.ManagementGroupSubscriptions(
      this
    );
    this.hierarchySettings = new operations.HierarchySettings(this);
    this.operations = new operations.Operations(this);
    this.entities = new operations.Entities(this);
  }

  /**
   * Checks if the specified management group name is valid and unique
   * @param checkNameAvailabilityRequest Management group name availability check parameters.
   * @param options The options parameters.
   */
  checkNameAvailability(
    checkNameAvailabilityRequest: CheckNameAvailabilityRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementGroupsAPICheckNameAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { checkNameAvailabilityRequest, options: operationOptions },
      checkNameAvailabilityOperationSpec
    ) as Promise<ManagementGroupsAPICheckNameAvailabilityResponse>;
  }

  /**
   * Starts backfilling subscriptions for the Tenant.
   * @param options The options parameters.
   */
  startTenantBackfill(
    options?: coreHttp.OperationOptions
  ): Promise<ManagementGroupsAPIStartTenantBackfillResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      startTenantBackfillOperationSpec
    ) as Promise<ManagementGroupsAPIStartTenantBackfillResponse>;
  }

  /**
   * Gets tenant backfill status
   * @param options The options parameters.
   */
  tenantBackfillStatus(
    options?: coreHttp.OperationOptions
  ): Promise<ManagementGroupsAPITenantBackfillStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      tenantBackfillStatusOperationSpec
    ) as Promise<ManagementGroupsAPITenantBackfillStatusResponse>;
  }

  managementGroups: operations.ManagementGroups;
  managementGroupSubscriptions: operations.ManagementGroupSubscriptions;
  hierarchySettings: operations.HierarchySettings;
  operations: operations.Operations;
  entities: operations.Entities;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.checkNameAvailabilityRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  serializer
};
const startTenantBackfillOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/startTenantBackfill",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TenantBackfillStatusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const tenantBackfillStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/tenantBackfillStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TenantBackfillStatusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};

// Operation Specifications

export {
  ManagementGroupsApi,
  ManagementGroupsApiContext,
  Models as ManagementGroupsApiModels,
  Mappers as ManagementGroupsApiMappers
};
export * from "./operations";
