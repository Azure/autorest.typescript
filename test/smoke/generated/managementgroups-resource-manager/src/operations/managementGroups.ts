/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementGroupsApi } from "../managementGroupsApi";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ManagementGroupsListOptionalParams,
  ManagementGroupsListResponse,
  ManagementGroupsGetOptionalParams,
  ManagementGroupsGetResponse,
  CreateManagementGroupRequest,
  ManagementGroupsCreateOrUpdateOptionalParams,
  ManagementGroupsCreateOrUpdateResponse,
  PatchManagementGroupRequest,
  ManagementGroupsUpdateOptionalParams,
  ManagementGroupsUpdateResponse,
  ManagementGroupsDeleteOptionalParams,
  ManagementGroupsDeleteResponse,
  ManagementGroupsGetDescendantsResponse,
  ManagementGroupsListNextOptionalParams,
  ManagementGroupsListNextResponse,
  ManagementGroupsGetDescendantsNextResponse
} from "../models";

/**
 * Class representing a ManagementGroups.
 */
export class ManagementGroups {
  private readonly client: ManagementGroupsApi;

  /**
   * Initialize a new instance of the class ManagementGroups class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementGroupsApi) {
    this.client = client;
  }

  /**
   * List management groups for the authenticated user.
   *
   * @param options The options parameters.
   */
  list(
    options?: ManagementGroupsListOptionalParams
  ): Promise<ManagementGroupsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ManagementGroupsListResponse>;
  }

  /**
   * Get the details of the management group.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  get(
    groupId: string,
    options?: ManagementGroupsGetOptionalParams
  ): Promise<ManagementGroupsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, options: operationOptions },
      getOperationSpec
    ) as Promise<ManagementGroupsGetResponse>;
  }

  /**
   * Create or update a management group.
   * If a management group is already created and a subsequent create request is issued with different
   * properties, the management group properties will be updated.
   *
   * @param groupId Management Group ID.
   * @param createManagementGroupRequest Management group creation parameters.
   * @param options The options parameters.
   */
  async createOrUpdate(
    groupId: string,
    createManagementGroupRequest: CreateManagementGroupRequest,
    options?: ManagementGroupsCreateOrUpdateOptionalParams
  ): Promise<LROPoller<ManagementGroupsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      groupId,
      createManagementGroupRequest,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ManagementGroupsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Update a management group.
   *
   * @param groupId Management Group ID.
   * @param patchGroupRequest Management group patch parameters.
   * @param options The options parameters.
   */
  update(
    groupId: string,
    patchGroupRequest: PatchManagementGroupRequest,
    options?: ManagementGroupsUpdateOptionalParams
  ): Promise<ManagementGroupsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, patchGroupRequest, options: operationOptions },
      updateOperationSpec
    ) as Promise<ManagementGroupsUpdateResponse>;
  }

  /**
   * Delete management group.
   * If a management group contains child resources, the request will fail.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  async delete(
    groupId: string,
    options?: ManagementGroupsDeleteOptionalParams
  ): Promise<LROPoller<ManagementGroupsDeleteResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      groupId,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        ManagementGroupsDeleteResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * List all entities that descend from a management group.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  getDescendants(
    groupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementGroupsGetDescendantsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, options: operationOptions },
      getDescendantsOperationSpec
    ) as Promise<ManagementGroupsGetDescendantsResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: ManagementGroupsListNextOptionalParams
  ): Promise<ManagementGroupsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ManagementGroupsListNextResponse>;
  }

  /**
   * GetDescendantsNext
   * @param groupId Management Group ID.
   * @param nextLink The nextLink from the previous successful call to the GetDescendants method.
   * @param options The options parameters.
   */
  getDescendantsNext(
    groupId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ManagementGroupsGetDescendantsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, nextLink, options: operationOptions },
      getDescendantsNextOperationSpec
    ) as Promise<ManagementGroupsGetDescendantsNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.cacheControl],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.recurse,
    Parameters.filter
  ],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.cacheControl],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroup
    },
    201: {
      bodyMapper: Mappers.ManagementGroup
    },
    202: {
      bodyMapper: Mappers.ManagementGroup
    },
    204: {
      bodyMapper: Mappers.ManagementGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.createManagementGroupRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.cacheControl, Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.patchGroupRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.cacheControl, Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.AzureAsyncOperationResults,
      headersMapper: Mappers.ManagementGroupsDeleteHeaders
    },
    201: {
      bodyMapper: Mappers.AzureAsyncOperationResults,
      headersMapper: Mappers.ManagementGroupsDeleteHeaders
    },
    202: {
      bodyMapper: Mappers.AzureAsyncOperationResults,
      headersMapper: Mappers.ManagementGroupsDeleteHeaders
    },
    204: {
      bodyMapper: Mappers.AzureAsyncOperationResults,
      headersMapper: Mappers.ManagementGroupsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.cacheControl],
  serializer
};
const getDescendantsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/descendants",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DescendantListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skiptoken,
    Parameters.top
  ],
  urlParameters: [Parameters.$host, Parameters.groupId],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.cacheControl],
  serializer
};
const getDescendantsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DescendantListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skiptoken,
    Parameters.top
  ],
  urlParameters: [Parameters.$host, Parameters.groupId, Parameters.nextLink1],
  serializer
};
