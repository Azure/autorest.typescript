/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementGroupsApi } from "../managementGroupsApi";
import {
  HierarchySettingsListResponse,
  HierarchySettingsGetResponse,
  CreateOrUpdateSettingsRequest,
  HierarchySettingsCreateOrUpdateResponse,
  HierarchySettingsUpdateResponse
} from "../models";

/**
 * Class representing a HierarchySettings.
 */
export class HierarchySettings {
  private readonly client: ManagementGroupsApi;

  /**
   * Initialize a new instance of the class HierarchySettings class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementGroupsApi) {
    this.client = client;
  }

  /**
   * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
   * the root Management Group of the hierarchy.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  list(
    groupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<HierarchySettingsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, options: operationOptions },
      listOperationSpec
    ) as Promise<HierarchySettingsListResponse>;
  }

  /**
   * Gets the hierarchy settings defined at the Management Group level. Settings can only be set on the
   * root Management Group of the hierarchy.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  get(
    groupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<HierarchySettingsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, options: operationOptions },
      getOperationSpec
    ) as Promise<HierarchySettingsGetResponse>;
  }

  /**
   * Creates or updates the hierarchy settings defined at the Management Group level.
   *
   * @param groupId Management Group ID.
   * @param createTenantSettingsRequest Tenant level settings request parameter.
   * @param options The options parameters.
   */
  createOrUpdate(
    groupId: string,
    createTenantSettingsRequest: CreateOrUpdateSettingsRequest,
    options?: coreHttp.OperationOptions
  ): Promise<HierarchySettingsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, createTenantSettingsRequest, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<HierarchySettingsCreateOrUpdateResponse>;
  }

  /**
   * Updates the hierarchy settings defined at the Management Group level.
   *
   * @param groupId Management Group ID.
   * @param createTenantSettingsRequest Tenant level settings request parameter.
   * @param options The options parameters.
   */
  update(
    groupId: string,
    createTenantSettingsRequest: CreateOrUpdateSettingsRequest,
    options?: coreHttp.OperationOptions
  ): Promise<HierarchySettingsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, createTenantSettingsRequest, options: operationOptions },
      updateOperationSpec
    ) as Promise<HierarchySettingsUpdateResponse>;
  }

  /**
   * Deletes the hierarchy settings defined at the Management Group level.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  delete(
    groupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettingsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.createTenantSettingsRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.createTenantSettingsRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  serializer
};
