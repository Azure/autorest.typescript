/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementGroupsApi } from "../managementGroupsApi";
import {
  EntitiesListOptionalParams,
  EntitiesListResponse,
  EntitiesListNextOptionalParams,
  EntitiesListNextResponse
} from "../models";

/**
 * Class representing a Entities.
 */
export class Entities {
  private readonly client: ManagementGroupsApi;

  /**
   * Initialize a new instance of the class Entities class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementGroupsApi) {
    this.client = client;
  }

  /**
   * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
   *
   * @param options The options parameters.
   */
  list(options?: EntitiesListOptionalParams): Promise<EntitiesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<EntitiesListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: EntitiesListNextOptionalParams
  ): Promise<EntitiesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<EntitiesListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/Microsoft.Management/getEntities",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EntityListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skiptoken,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.search,
    Parameters.filter1,
    Parameters.view,
    Parameters.groupName
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.cacheControl],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EntityListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skiptoken,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.search,
    Parameters.filter1,
    Parameters.view,
    Parameters.groupName
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.cacheControl],
  serializer
};
