/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementGroupsApi } from "../managementGroupsApi";
import {
  ManagementGroupSubscriptionsCreateOptionalParams,
  ManagementGroupSubscriptionsDeleteOptionalParams
} from "../models";

/**
 * Class representing a ManagementGroupSubscriptions.
 */
export class ManagementGroupSubscriptions {
  private readonly client: ManagementGroupsApi;

  /**
   * Initialize a new instance of the class ManagementGroupSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementGroupsApi) {
    this.client = client;
  }

  /**
   * Associates existing subscription with the management group.
   *
   * @param groupId Management Group ID.
   * @param subscriptionId Subscription ID.
   * @param options The options parameters.
   */
  create(
    groupId: string,
    subscriptionId: string,
    options?: ManagementGroupSubscriptionsCreateOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, subscriptionId, options: operationOptions },
      createOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * De-associates subscription from the management group.
   *
   * @param groupId Management Group ID.
   * @param subscriptionId Subscription ID.
   * @param options The options parameters.
   */
  delete(
    groupId: string,
    subscriptionId: string,
    options?: ManagementGroupSubscriptionsDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { groupId, subscriptionId, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.groupId,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.cacheControl],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.groupId,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.cacheControl],
  serializer
};
