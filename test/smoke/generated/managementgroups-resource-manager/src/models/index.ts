/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Describes the result of the request to list management groups.
 */
export interface ManagementGroupListResult {
  /**
   * The list of management groups.
   */
  value?: ManagementGroupInfo[];
  /**
   * The URL to use for getting the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The management group resource.
 */
export interface ManagementGroupInfo {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The type of the resource. For example, Microsoft.Management/managementGroups
   */
  readonly type?: string;
  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly name?: string;
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;
  /**
   * The friendly name of the management group.
   */
  displayName?: string;
}

/**
 * The error object.
 */
export interface ErrorResponse {
  /**
   * The details of the error.
   */
  error?: ErrorDetails;
}

/**
 * The details of the error.
 */
export interface ErrorDetails {
  /**
   * One of a server-defined set of error codes.
   */
  code?: string;
  /**
   * A human-readable representation of the error.
   */
  message?: string;
  /**
   * A human-readable representation of the error's details.
   */
  details?: string;
}

/**
 * The management group details.
 */
export interface ManagementGroup {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  readonly type?: string;
  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly name?: string;
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;
  /**
   * The friendly name of the management group.
   */
  displayName?: string;
  /**
   * The role definitions associated with the management group.
   */
  roles?: string[];
  /**
   * The details of a management group.
   */
  details?: ManagementGroupDetails;
  /**
   * The list of children.
   */
  children?: ManagementGroupChildInfo[];
  /**
   * The path from the root to the current group.
   */
  path?: ManagementGroupPathElement[];
}

/**
 * The details of a management group.
 */
export interface ManagementGroupDetails {
  /**
   * The version number of the object.
   */
  version?: number;
  /**
   * The date and time when this object was last updated.
   */
  updatedTime?: Date;
  /**
   * The identity of the principal or process that updated the object.
   */
  updatedBy?: string;
  /**
   * (Optional) The ID of the parent management group.
   */
  parent?: ParentGroupInfo;
}

/**
 * (Optional) The ID of the parent management group.
 */
export interface ParentGroupInfo {
  /**
   * The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;
  /**
   * The name of the parent management group
   */
  name?: string;
  /**
   * The friendly name of the parent management group.
   */
  displayName?: string;
}

/**
 * The child information of a management group.
 */
export interface ManagementGroupChildInfo {
  /**
   * The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)
   */
  type?: ManagementGroupChildType;
  /**
   * The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;
  /**
   * The name of the child entity.
   */
  name?: string;
  /**
   * The friendly name of the child resource.
   */
  displayName?: string;
  /**
   * The roles definitions associated with the management group.
   */
  roles?: string[];
  /**
   * The list of children.
   */
  children?: ManagementGroupChildInfo[];
}

/**
 * A path element of a management group ancestors.
 */
export interface ManagementGroupPathElement {
  /**
   * The name of the group.
   */
  name?: string;
  /**
   * The friendly name of the group.
   */
  displayName?: string;
}

/**
 * Management group creation parameters.
 */
export interface CreateManagementGroupRequest {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  readonly type?: string;
  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  name?: string;
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly tenantId?: string;
  /**
   * The friendly name of the management group. If no value is passed then this  field will be set to the groupId.
   */
  displayName?: string;
  /**
   * The roles definitions associated with the management group.
   */
  readonly roles?: string[];
  /**
   * The details of a management group used during creation.
   */
  details?: CreateManagementGroupDetails;
  /**
   * The list of children.
   */
  readonly children?: CreateManagementGroupChildInfo[];
}

/**
 * The details of a management group used during creation.
 */
export interface CreateManagementGroupDetails {
  /**
   * The version number of the object.
   */
  readonly version?: number;
  /**
   * The date and time when this object was last updated.
   */
  readonly updatedTime?: Date;
  /**
   * The identity of the principal or process that updated the object.
   */
  readonly updatedBy?: string;
  /**
   * (Optional) The ID of the parent management group used during creation.
   */
  parent?: CreateParentGroupInfo;
}

/**
 * (Optional) The ID of the parent management group used during creation.
 */
export interface CreateParentGroupInfo {
  /**
   * The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;
  /**
   * The name of the parent management group
   */
  readonly name?: string;
  /**
   * The friendly name of the parent management group.
   */
  readonly displayName?: string;
}

/**
 * The child information of a management group used during creation.
 */
export interface CreateManagementGroupChildInfo {
  /**
   * The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)
   */
  readonly type?: ManagementGroupChildType;
  /**
   * The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The name of the child entity.
   */
  readonly name?: string;
  /**
   * The friendly name of the child resource.
   */
  readonly displayName?: string;
  /**
   * The roles definitions associated with the management group.
   */
  readonly roles?: string[];
  /**
   * The list of children.
   */
  readonly children?: CreateManagementGroupChildInfo[];
}

/**
 * The results of Azure-AsyncOperation.
 */
export interface AzureAsyncOperationResults {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  readonly type?: string;
  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly name?: string;
  /**
   * The current status of the asynchronous operation performed . For example, Running, Succeeded, Failed
   */
  readonly status?: string;
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;
  /**
   * The friendly name of the management group.
   */
  displayName?: string;
}

/**
 * Management group patch parameters.
 */
export interface PatchManagementGroupRequest {
  /**
   * The friendly name of the management group.
   */
  displayName?: string;
  /**
   * (Optional) The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  parentId?: string;
}

/**
 * Describes the result of the request to view descendants.
 */
export interface DescendantListResult {
  /**
   * The list of descendants.
   */
  value?: DescendantInfo[];
  /**
   * The URL to use for getting the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The descendant.
 */
export interface DescendantInfo {
  /**
   * The fully qualified ID for the descendant.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 or /subscriptions/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The type of the resource. For example, Microsoft.Management/managementGroups or /subscriptions
   */
  readonly type?: string;
  /**
   * The name of the descendant. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly name?: string;
  /**
   * The friendly name of the management group.
   */
  displayName?: string;
  /**
   * The ID of the parent management group.
   */
  parent?: DescendantParentGroupInfo;
}

/**
 * The ID of the parent management group.
 */
export interface DescendantParentGroupInfo {
  /**
   * The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;
}

/**
 * Lists all hierarchy settings.
 */
export interface HierarchySettingsList {
  /**
   * The list of hierarchy settings.
   */
  value?: HierarchySettingsInfo[];
  /**
   * The URL to use for getting the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The hierarchy settings resource.
 */
export interface HierarchySettingsInfo {
  /**
   * The fully qualified ID for the settings object.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/settings/default.
   */
  readonly id?: string;
  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups/settings.
   */
  readonly type?: string;
  /**
   * The name of the object. In this case, default.
   */
  readonly name?: string;
  /**
   * The AAD Tenant ID associated with the hierarchy settings. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;
  /**
   * Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access.
   */
  requireAuthorizationForGroupCreation?: boolean;
  /**
   * Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup
   */
  defaultManagementGroup?: string;
}

/**
 * Settings defined at the Management Group scope.
 */
export interface HierarchySettings {
  /**
   * The fully qualified ID for the settings object.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/settings/default.
   */
  readonly id?: string;
  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups/settings.
   */
  readonly type?: string;
  /**
   * The name of the object. In this case, default.
   */
  readonly name?: string;
  /**
   * The AAD Tenant ID associated with the hierarchy settings. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;
  /**
   * Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access.
   */
  requireAuthorizationForGroupCreation?: boolean;
  /**
   * Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup
   */
  defaultManagementGroup?: string;
}

/**
 * Parameters for creating or updating Management Group settings
 */
export interface CreateOrUpdateSettingsRequest {
  /**
   * Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access.
   */
  requireAuthorizationForGroupCreation?: boolean;
  /**
   * Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup
   */
  defaultManagementGroup?: string;
}

/**
 * Describes the result of the request to list Microsoft.Management operations.
 */
export interface OperationListResult {
  /**
   * List of operations supported by the Microsoft.Management resource provider.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
}

/**
 * Operation supported by the Microsoft.Management resource provider.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplayProperties;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplayProperties {
  /**
   * The name of the provider.
   */
  readonly provider?: string;
  /**
   * The resource on which the operation is performed.
   */
  readonly resource?: string;
  /**
   * The operation that can be performed.
   */
  readonly operation?: string;
  /**
   * Operation description.
   */
  readonly description?: string;
}

/**
 * Management group name availability check parameters.
 */
export interface CheckNameAvailabilityRequest {
  /**
   * the name to check for availability
   */
  name?: string;
  /**
   * fully qualified resource type which includes provider namespace
   */
  type?: "Microsoft.Management/managementGroup";
}

/**
 * Describes the result of the request to check management group name availability.
 */
export interface CheckNameAvailabilityResult {
  /**
   * Required. True indicates name is valid and available. False indicates the name is invalid, unavailable, or both.
   */
  readonly nameAvailable?: boolean;
  /**
   * Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use and is therefore unavailable.
   */
  readonly reason?: Reason;
  /**
   * Required if nameAvailable == false. Localized. If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that is already in use, and direct them to select a different name.
   */
  readonly message?: string;
}

/**
 * Describes the result of the request to view entities.
 */
export interface EntityListResult {
  /**
   * The list of entities.
   */
  value?: EntityInfo[];
  /**
   * Total count of records that match the filter
   */
  readonly count?: number;
  /**
   * The URL to use for getting the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The entity.
 */
export interface EntityInfo {
  /**
   * The fully qualified ID for the entity.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The type of the resource. For example, Microsoft.Management/managementGroups
   */
  readonly type?: string;
  /**
   * The name of the entity. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly name?: string;
  /**
   * The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;
  /**
   * The friendly name of the management group.
   */
  displayName?: string;
  /**
   * (Optional) The ID of the parent management group.
   */
  parent?: EntityParentGroupInfo;
  /**
   * The users specific permissions to this item.
   */
  permissions?: Permissions;
  /**
   * The users specific permissions to this item.
   */
  inheritedPermissions?: Permissions;
  /**
   * Number of Descendants
   */
  numberOfDescendants?: number;
  /**
   * Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
   */
  numberOfChildren?: number;
  /**
   * Number of children is the number of Groups that are exactly one level underneath the current Group.
   */
  numberOfChildGroups?: number;
  /**
   * The parent display name chain from the root group to the immediate parent
   */
  parentDisplayNameChain?: string[];
  /**
   * The parent name chain from the root group to the immediate parent
   */
  parentNameChain?: string[];
}

/**
 * (Optional) The ID of the parent management group.
 */
export interface EntityParentGroupInfo {
  /**
   * The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;
}

/**
 * The tenant backfill status
 */
export interface TenantBackfillStatusResult {
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly tenantId?: string;
  /**
   * The status of the Tenant Backfill
   */
  readonly status?: Status;
}

/**
 * The results of an asynchronous operation.
 */
export interface OperationResults {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  readonly type?: string;
  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly name?: string;
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;
  /**
   * The friendly name of the management group.
   */
  displayName?: string;
}

/**
 * The management group details for the hierarchy view.
 */
export interface EntityHierarchyItem {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  readonly id?: string;
  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  readonly type?: string;
  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  readonly name?: string;
  /**
   * The friendly name of the management group.
   */
  displayName?: string;
  /**
   * The users specific permissions to this item.
   */
  permissions?: Permissions;
  /**
   * The list of children.
   */
  children?: EntityHierarchyItem[];
}

/**
 * Defines headers for managementGroups_delete operation.
 */
export interface ManagementGroupsDeleteHeaders {
  location?: string;
  azureAsyncOperation?: string;
}

/**
 * Defines values for Enum0.
 */
export type Enum0 = "children" | "path";
/**
 * Defines values for ManagementGroupChildType.
 */
export type ManagementGroupChildType =
  | "Microsoft.Management/managementGroups"
  | "/subscriptions";
/**
 * Defines values for Enum2.
 */
export type Enum2 =
  | "AllowedParents"
  | "AllowedChildren"
  | "ParentAndFirstLevelChildren"
  | "ParentOnly"
  | "ChildrenOnly";
/**
 * Defines values for Enum3.
 */
export type Enum3 =
  | "FullHierarchy"
  | "GroupsOnly"
  | "SubscriptionsOnly"
  | "Audit";
/**
 * Defines values for Permissions.
 */
export type Permissions = "noaccess" | "view" | "edit" | "delete";
/**
 * Defines values for Enum5.
 */
export type Enum5 = "create" | "delete";
/**
 * Defines values for Reason.
 */
export type Reason = "Invalid" | "AlreadyExists";
/**
 * Defines values for Status.
 */
export type Status =
  | "NotStarted"
  | "NotStartedButGroupsExist"
  | "Started"
  | "Failed"
  | "Cancelled"
  | "Completed";

/**
 * Optional parameters.
 */
export interface ManagementGroupsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
}

/**
 * Contains response data for the list operation.
 */
export type ManagementGroupsListResponse = ManagementGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagementGroupListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagementGroupsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
  /**
   * The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.
   */
  expand?: Enum0;
  /**
   * The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.
   */
  recurse?: boolean;
  /**
   * A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')
   */
  filter?: string;
}

/**
 * Contains response data for the get operation.
 */
export type ManagementGroupsGetResponse = ManagementGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagementGroup;
  };
};

/**
 * Optional parameters.
 */
export interface ManagementGroupsCreateOrUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagementGroupsCreateOrUpdateResponse = ManagementGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagementGroup;
  };
};

/**
 * Optional parameters.
 */
export interface ManagementGroupsUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
}

/**
 * Contains response data for the update operation.
 */
export type ManagementGroupsUpdateResponse = ManagementGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagementGroup;
  };
};

/**
 * Optional parameters.
 */
export interface ManagementGroupsDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
}

/**
 * Contains response data for the delete operation.
 */
export type ManagementGroupsDeleteResponse = ManagementGroupsDeleteHeaders &
  AzureAsyncOperationResults & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureAsyncOperationResults;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ManagementGroupsDeleteHeaders;
    };
  };

/**
 * Contains response data for the getDescendants operation.
 */
export type ManagementGroupsGetDescendantsResponse = DescendantListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DescendantListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagementGroupsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type ManagementGroupsListNextResponse = ManagementGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagementGroupListResult;
  };
};

/**
 * Contains response data for the getDescendantsNext operation.
 */
export type ManagementGroupsGetDescendantsNextResponse = DescendantListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DescendantListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagementGroupSubscriptionsCreateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
}

/**
 * Optional parameters.
 */
export interface ManagementGroupSubscriptionsDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
}

/**
 * Contains response data for the list operation.
 */
export type HierarchySettingsListResponse = HierarchySettingsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HierarchySettingsList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type HierarchySettingsGetResponse = HierarchySettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HierarchySettings;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type HierarchySettingsCreateOrUpdateResponse = HierarchySettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HierarchySettings;
  };
};

/**
 * Contains response data for the update operation.
 */
export type HierarchySettingsUpdateResponse = HierarchySettings & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: HierarchySettings;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ManagementGroupsAPICheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckNameAvailabilityResult;
  };
};

/**
 * Contains response data for the startTenantBackfill operation.
 */
export type ManagementGroupsAPIStartTenantBackfillResponse = TenantBackfillStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TenantBackfillStatusResult;
  };
};

/**
 * Contains response data for the tenantBackfillStatus operation.
 */
export type ManagementGroupsAPITenantBackfillStatusResponse = TenantBackfillStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TenantBackfillStatusResult;
  };
};

/**
 * Optional parameters.
 */
export interface EntitiesListOptionalParams extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
  /**
   * This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.
   */
  select?: string;
  /**
   * The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
   * With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions.
   * With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
   * With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
   * With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
   * With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it's descendants for it to show up in the results.
   */
  search?: Enum2;
  /**
   * The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
   */
  filter?: string;
  /**
   * The view parameter allows clients to filter the type of data that is returned by the getEntities call.
   */
  view?: Enum3;
  /**
   * A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
   */
  groupName?: string;
}

/**
 * Contains response data for the list operation.
 */
export type EntitiesListResponse = EntityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EntityListResult;
  };
};

/**
 * Optional parameters.
 */
export interface EntitiesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Indicates that the request shouldn't utilize any caches.
   */
  cacheControl?: string;
  /**
   * This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.
   */
  select?: string;
  /**
   * The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
   * With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions.
   * With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
   * With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
   * With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
   * With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it's descendants for it to show up in the results.
   */
  search?: Enum2;
  /**
   * The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
   */
  filter?: string;
  /**
   * The view parameter allows clients to filter the type of data that is returned by the getEntities call.
   */
  view?: Enum3;
  /**
   * A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
   */
  groupName?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type EntitiesListNextResponse = EntityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EntityListResult;
  };
};

/**
 * Optional parameters.
 */
export interface ManagementGroupsApiOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Page continuation token is only used if a previous operation returned a partial result.
   * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
   *
   */
  skiptoken?: string;
  /**
   * Number of elements to return when retrieving results. Passing this in will override $skipToken.
   */
  top?: number;
  /**
   * Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
   */
  skip?: number;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
