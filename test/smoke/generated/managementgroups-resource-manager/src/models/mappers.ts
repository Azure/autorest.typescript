/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ManagementGroupListResult: coreHttp.CompositeMapper = {
  serializedName: "ManagementGroupListResult",
  type: {
    name: "Composite",
    className: "ManagementGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagementGroupInfo" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroupInfo: coreHttp.CompositeMapper = {
  serializedName: "ManagementGroupInfo",
  type: {
    name: "Composite",
    className: "ManagementGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroup: coreHttp.CompositeMapper = {
  serializedName: "ManagementGroup",
  type: {
    name: "Composite",
    className: "ManagementGroup",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ManagementGroupPropertiesRolesItem"
          }
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "ManagementGroupDetails"
        }
      },
      children: {
        serializedName: "properties.children",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagementGroupChildInfo" }
          }
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagementGroupPathElement" }
          }
        }
      }
    }
  }
};

export const ManagementGroupDetails: coreHttp.CompositeMapper = {
  serializedName: "ManagementGroupDetails",
  type: {
    name: "Composite",
    className: "ManagementGroupDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "Number"
        }
      },
      updatedTime: {
        serializedName: "updatedTime",
        type: {
          name: "DateTime"
        }
      },
      updatedBy: {
        serializedName: "updatedBy",
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "ParentGroupInfo"
        }
      }
    }
  }
};

export const ParentGroupInfo: coreHttp.CompositeMapper = {
  serializedName: "ParentGroupInfo",
  type: {
    name: "Composite",
    className: "ParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroupChildInfo: coreHttp.CompositeMapper = {
  serializedName: "ManagementGroupChildInfo",
  type: {
    name: "Composite",
    className: "ManagementGroupChildInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "roles",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ManagementGroupChildInfoRolesItem"
          }
        }
      },
      children: {
        serializedName: "children",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ManagementGroupChildInfo" }
          }
        }
      }
    }
  }
};

export const ManagementGroupPathElement: coreHttp.CompositeMapper = {
  serializedName: "ManagementGroupPathElement",
  type: {
    name: "Composite",
    className: "ManagementGroupPathElement",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateManagementGroupRequest: coreHttp.CompositeMapper = {
  serializedName: "CreateManagementGroupRequest",
  type: {
    name: "Composite",
    className: "CreateManagementGroupRequest",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "CreateManagementGroupPropertiesRolesItem"
          }
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "CreateManagementGroupDetails"
        }
      },
      children: {
        serializedName: "properties.children",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateManagementGroupChildInfo"
            }
          }
        }
      }
    }
  }
};

export const CreateManagementGroupDetails: coreHttp.CompositeMapper = {
  serializedName: "CreateManagementGroupDetails",
  type: {
    name: "Composite",
    className: "CreateManagementGroupDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      updatedTime: {
        serializedName: "updatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedBy: {
        serializedName: "updatedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "CreateParentGroupInfo"
        }
      }
    }
  }
};

export const CreateParentGroupInfo: coreHttp.CompositeMapper = {
  serializedName: "CreateParentGroupInfo",
  type: {
    name: "Composite",
    className: "CreateParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateManagementGroupChildInfo: coreHttp.CompositeMapper = {
  serializedName: "CreateManagementGroupChildInfo",
  type: {
    name: "Composite",
    className: "CreateManagementGroupChildInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "roles",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "CreateManagementGroupChildInfoRolesItem"
          }
        }
      },
      children: {
        serializedName: "children",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateManagementGroupChildInfo"
            }
          }
        }
      }
    }
  }
};

export const AzureAsyncOperationResults: coreHttp.CompositeMapper = {
  serializedName: "AzureAsyncOperationResults",
  type: {
    name: "Composite",
    className: "AzureAsyncOperationResults",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchManagementGroupRequest: coreHttp.CompositeMapper = {
  serializedName: "PatchManagementGroupRequest",
  type: {
    name: "Composite",
    className: "PatchManagementGroupRequest",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      parentId: {
        serializedName: "parentId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DescendantListResult: coreHttp.CompositeMapper = {
  serializedName: "DescendantListResult",
  type: {
    name: "Composite",
    className: "DescendantListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DescendantInfo" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DescendantInfo: coreHttp.CompositeMapper = {
  serializedName: "DescendantInfo",
  type: {
    name: "Composite",
    className: "DescendantInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "DescendantParentGroupInfo"
        }
      }
    }
  }
};

export const DescendantParentGroupInfo: coreHttp.CompositeMapper = {
  serializedName: "DescendantParentGroupInfo",
  type: {
    name: "Composite",
    className: "DescendantParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HierarchySettingsList: coreHttp.CompositeMapper = {
  serializedName: "HierarchySettingsList",
  type: {
    name: "Composite",
    className: "HierarchySettingsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "HierarchySettingsInfo" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HierarchySettingsInfo: coreHttp.CompositeMapper = {
  serializedName: "HierarchySettingsInfo",
  type: {
    name: "Composite",
    className: "HierarchySettingsInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      requireAuthorizationForGroupCreation: {
        serializedName: "properties.requireAuthorizationForGroupCreation",
        type: {
          name: "Boolean"
        }
      },
      defaultManagementGroup: {
        serializedName: "properties.defaultManagementGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HierarchySettings: coreHttp.CompositeMapper = {
  serializedName: "HierarchySettings",
  type: {
    name: "Composite",
    className: "HierarchySettings",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      requireAuthorizationForGroupCreation: {
        serializedName: "properties.requireAuthorizationForGroupCreation",
        type: {
          name: "Boolean"
        }
      },
      defaultManagementGroup: {
        serializedName: "properties.defaultManagementGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateSettingsRequest: coreHttp.CompositeMapper = {
  serializedName: "CreateOrUpdateSettingsRequest",
  type: {
    name: "Composite",
    className: "CreateOrUpdateSettingsRequest",
    modelProperties: {
      requireAuthorizationForGroupCreation: {
        serializedName: "properties.requireAuthorizationForGroupCreation",
        type: {
          name: "Boolean"
        }
      },
      defaultManagementGroup: {
        serializedName: "properties.defaultManagementGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayProperties"
        }
      }
    }
  }
};

export const OperationDisplayProperties: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplayProperties",
  type: {
    name: "Composite",
    className: "OperationDisplayProperties",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Management/managementGroup",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityListResult: coreHttp.CompositeMapper = {
  serializedName: "EntityListResult",
  type: {
    name: "Composite",
    className: "EntityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EntityInfo" } }
        }
      },
      count: {
        serializedName: "count",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityInfo: coreHttp.CompositeMapper = {
  serializedName: "EntityInfo",
  type: {
    name: "Composite",
    className: "EntityInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "EntityParentGroupInfo"
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "String"
        }
      },
      inheritedPermissions: {
        serializedName: "properties.inheritedPermissions",
        type: {
          name: "String"
        }
      },
      numberOfDescendants: {
        serializedName: "properties.numberOfDescendants",
        type: {
          name: "Number"
        }
      },
      numberOfChildren: {
        serializedName: "properties.numberOfChildren",
        type: {
          name: "Number"
        }
      },
      numberOfChildGroups: {
        serializedName: "properties.numberOfChildGroups",
        type: {
          name: "Number"
        }
      },
      parentDisplayNameChain: {
        serializedName: "properties.parentDisplayNameChain",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "EntityInfoPropertiesParentDisplayNameChainItem"
          }
        }
      },
      parentNameChain: {
        serializedName: "properties.parentNameChain",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "EntityInfoPropertiesParentNameChainItem"
          }
        }
      }
    }
  }
};

export const EntityParentGroupInfo: coreHttp.CompositeMapper = {
  serializedName: "EntityParentGroupInfo",
  type: {
    name: "Composite",
    className: "EntityParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TenantBackfillStatusResult: coreHttp.CompositeMapper = {
  serializedName: "TenantBackfillStatusResult",
  type: {
    name: "Composite",
    className: "TenantBackfillStatusResult",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "NotStarted",
            "NotStartedButGroupsExist",
            "Started",
            "Failed",
            "Cancelled",
            "Completed"
          ]
        }
      }
    }
  }
};

export const OperationResults: coreHttp.CompositeMapper = {
  serializedName: "OperationResults",
  type: {
    name: "Composite",
    className: "OperationResults",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityHierarchyItem: coreHttp.CompositeMapper = {
  serializedName: "EntityHierarchyItem",
  type: {
    name: "Composite",
    className: "EntityHierarchyItem",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "properties.children",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "EntityHierarchyItem" }
          }
        }
      }
    }
  }
};

export const ManagementGroupsDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "managementGroups_deleteHeaders",
  type: {
    name: "Composite",
    className: "ManagementGroupsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};
