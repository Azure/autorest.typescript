/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-02-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const cacheControl: coreHttp.OperationParameter = {
  parameterPath: ["options", "cacheControl"],
  mapper: {
    defaultValue: "no-cache",
    serializedName: "Cache-Control",
    type: {
      name: "String"
    }
  }
};

export const skiptoken: coreHttp.OperationQueryParameter = {
  parameterPath: "skiptoken",
  mapper: {
    serializedName: "$skiptoken",
    type: {
      name: "String"
    }
  }
};

export const groupId: coreHttp.OperationURLParameter = {
  parameterPath: "groupId",
  mapper: {
    serializedName: "groupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const recurse: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "recurse"],
  mapper: {
    serializedName: "$recurse",
    type: {
      name: "Boolean"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const createManagementGroupRequest: coreHttp.OperationParameter = {
  parameterPath: "createManagementGroupRequest",
  mapper: Mappers.CreateManagementGroupRequest
};

export const patchGroupRequest: coreHttp.OperationParameter = {
  parameterPath: "patchGroupRequest",
  mapper: Mappers.PatchManagementGroupRequest
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: "top",
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createTenantSettingsRequest: coreHttp.OperationParameter = {
  parameterPath: "createTenantSettingsRequest",
  mapper: Mappers.CreateOrUpdateSettingsRequest
};

export const checkNameAvailabilityRequest: coreHttp.OperationParameter = {
  parameterPath: "checkNameAvailabilityRequest",
  mapper: Mappers.CheckNameAvailabilityRequest
};

export const skip: coreHttp.OperationQueryParameter = {
  parameterPath: "skip",
  mapper: {
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const select: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const search: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "search"],
  mapper: {
    serializedName: "$search",
    type: {
      name: "String"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const view: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "view"],
  mapper: {
    serializedName: "$view",
    type: {
      name: "String"
    }
  }
};

export const groupName: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "groupName"],
  mapper: {
    serializedName: "groupName",
    type: {
      name: "String"
    }
  }
};
