/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftResourceHealth } from "../microsoftResourceHealth";
import {
  ChildAvailabilityStatusesGetByResourceOptionalParams,
  ChildAvailabilityStatusesGetByResourceResponse,
  ChildAvailabilityStatusesListOptionalParams,
  ChildAvailabilityStatusesListResponse,
  ChildAvailabilityStatusesListNextOptionalParams,
  ChildAvailabilityStatusesListNextResponse
} from "../models";

/**
 * Class representing a ChildAvailabilityStatuses.
 */
export class ChildAvailabilityStatuses {
  private readonly client: MicrosoftResourceHealth;

  /**
   * Initialize a new instance of the class ChildAvailabilityStatuses class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftResourceHealth) {
    this.client = client;
  }

  /**
   * Gets current availability status for a single resource
   * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
   *                    type. Currently the API only support one nesting level resource types :
   *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
   * @param options The options parameters.
   */
  getByResource(
    resourceUri: string,
    options?: ChildAvailabilityStatusesGetByResourceOptionalParams
  ): Promise<ChildAvailabilityStatusesGetByResourceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceUri, options: operationOptions },
      getByResourceOperationSpec
    ) as Promise<ChildAvailabilityStatusesGetByResourceResponse>;
  }

  /**
   * Lists the historical availability statuses for a single child resource. Use the nextLink property in
   * the response to get the next page of availability status
   * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
   *                    type. Currently the API only support one nesting level resource types :
   *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
   * @param options The options parameters.
   */
  list(
    resourceUri: string,
    options?: ChildAvailabilityStatusesListOptionalParams
  ): Promise<ChildAvailabilityStatusesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceUri, options: operationOptions },
      listOperationSpec
    ) as Promise<ChildAvailabilityStatusesListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
   *                    type. Currently the API only support one nesting level resource types :
   *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceUri: string,
    options?: ChildAvailabilityStatusesListNextOptionalParams
  ): Promise<ChildAvailabilityStatusesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceUri, options: operationOptions },
      listNextOperationSpec
    ) as Promise<ChildAvailabilityStatusesListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getByResourceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses/current",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailabilityStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expand
  ],
  urlParameters: [Parameters.$host, Parameters.resourceUri1],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailabilityStatusListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expand
  ],
  urlParameters: [Parameters.$host, Parameters.resourceUri1],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailabilityStatusListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expand
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink2,
    Parameters.resourceUri1
  ],
  serializer
};
