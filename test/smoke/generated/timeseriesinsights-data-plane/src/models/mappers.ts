/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const AvailabilityResponse: coreHttp.CompositeMapper = {
  serializedName: "AvailabilityResponse",
  type: {
    name: "Composite",
    className: "AvailabilityResponse",
    modelProperties: {
      availability: {
        serializedName: "availability",
        type: {
          name: "Composite",
          className: "Availability"
        }
      }
    }
  }
};

export const Availability: coreHttp.CompositeMapper = {
  serializedName: "Availability",
  type: {
    name: "Composite",
    className: "Availability",
    modelProperties: {
      range: {
        serializedName: "range",
        type: {
          name: "Composite",
          className: "DateTimeRange"
        }
      },
      intervalSize: {
        serializedName: "intervalSize",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      },
      distribution: {
        serializedName: "distribution",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" }, serializedName: "Integer" }
        }
      }
    }
  }
};

export const DateTimeRange: coreHttp.CompositeMapper = {
  serializedName: "DateTimeRange",
  type: {
    name: "Composite",
    className: "DateTimeRange",
    modelProperties: {
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const TsiError: coreHttp.CompositeMapper = {
  serializedName: "TsiError",
  type: {
    name: "Composite",
    className: "TsiError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "TsiErrorBody"
        }
      }
    }
  }
};

export const TsiErrorBody: coreHttp.CompositeMapper = {
  serializedName: "TsiErrorBody",
  type: {
    name: "Composite",
    className: "TsiErrorBody",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "TsiErrorBody"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TsiErrorDetails" } }
        }
      }
    }
  }
};

export const TsiErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "TsiErrorDetails",
  type: {
    name: "Composite",
    className: "TsiErrorDetails",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetEventSchemaRequest: coreHttp.CompositeMapper = {
  serializedName: "GetEventSchemaRequest",
  type: {
    name: "Composite",
    className: "GetEventSchemaRequest",
    modelProperties: {
      searchSpan: {
        serializedName: "searchSpan",
        type: {
          name: "Composite",
          className: "DateTimeRange"
        }
      }
    }
  }
};

export const EventSchema: coreHttp.CompositeMapper = {
  serializedName: "EventSchema",
  type: {
    name: "Composite",
    className: "EventSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EventProperty" } }
        }
      }
    }
  }
};

export const EventProperty: coreHttp.CompositeMapper = {
  serializedName: "EventProperty",
  type: {
    name: "Composite",
    className: "EventProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelSettingsResponse: coreHttp.CompositeMapper = {
  serializedName: "ModelSettingsResponse",
  type: {
    name: "Composite",
    className: "ModelSettingsResponse",
    modelProperties: {
      modelSettings: {
        serializedName: "modelSettings",
        type: {
          name: "Composite",
          className: "TimeSeriesModelSettings"
        }
      }
    }
  }
};

export const TimeSeriesModelSettings: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesModelSettings",
  type: {
    name: "Composite",
    className: "TimeSeriesModelSettings",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timeSeriesIdProperties: {
        constraints: {
          MinItems: 1
        },
        serializedName: "timeSeriesIdProperties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesIdProperty" }
          }
        }
      },
      defaultTypeId: {
        serializedName: "defaultTypeId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const TimeSeriesIdProperty: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesIdProperty",
  type: {
    name: "Composite",
    className: "TimeSeriesIdProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "String",
        serializedName: "type",
        isConstant: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateModelSettingsRequest: coreHttp.CompositeMapper = {
  serializedName: "UpdateModelSettingsRequest",
  type: {
    name: "Composite",
    className: "UpdateModelSettingsRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      defaultTypeId: {
        serializedName: "defaultTypeId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const QueryRequest: coreHttp.CompositeMapper = {
  serializedName: "QueryRequest",
  type: {
    name: "Composite",
    className: "QueryRequest",
    modelProperties: {
      getEvents: {
        serializedName: "getEvents",
        type: {
          name: "Composite",
          className: "GetEvents"
        }
      },
      getSeries: {
        serializedName: "getSeries",
        type: {
          name: "Composite",
          className: "GetSeries"
        }
      },
      aggregateSeries: {
        serializedName: "aggregateSeries",
        type: {
          name: "Composite",
          className: "AggregateSeries"
        }
      }
    }
  }
};

export const GetEvents: coreHttp.CompositeMapper = {
  serializedName: "GetEvents",
  type: {
    name: "Composite",
    className: "GetEvents",
    modelProperties: {
      timeSeriesId: {
        constraints: {
          MinItems: 1
        },
        serializedName: "timeSeriesId",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      },
      searchSpan: {
        serializedName: "searchSpan",
        type: {
          name: "Composite",
          className: "DateTimeRange"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "Tsx"
        }
      },
      projectedProperties: {
        serializedName: "projectedProperties",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "EventProperty" } }
        }
      },
      take: {
        serializedName: "take",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Tsx: coreHttp.CompositeMapper = {
  serializedName: "Tsx",
  type: {
    name: "Composite",
    className: "Tsx",
    modelProperties: {
      tsx: {
        serializedName: "tsx",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetSeries: coreHttp.CompositeMapper = {
  serializedName: "GetSeries",
  type: {
    name: "Composite",
    className: "GetSeries",
    modelProperties: {
      timeSeriesId: {
        constraints: {
          MinItems: 1
        },
        serializedName: "timeSeriesId",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      },
      searchSpan: {
        serializedName: "searchSpan",
        type: {
          name: "Composite",
          className: "DateTimeRange"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "Tsx"
        }
      },
      projectedVariables: {
        serializedName: "projectedVariables",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "GetSeriesProjectedVariablesItem"
          }
        }
      },
      inlineVariables: {
        serializedName: "inlineVariables",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Variable" } }
        }
      },
      take: {
        serializedName: "take",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Variable: coreHttp.CompositeMapper = {
  serializedName: "Variable",
  type: {
    name: "Composite",
    className: "Variable",
    uberParent: "Variable",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "Tsx"
        }
      }
    }
  }
};

export const AggregateSeries: coreHttp.CompositeMapper = {
  serializedName: "AggregateSeries",
  type: {
    name: "Composite",
    className: "AggregateSeries",
    modelProperties: {
      timeSeriesId: {
        constraints: {
          MinItems: 1
        },
        serializedName: "timeSeriesId",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      },
      searchSpan: {
        serializedName: "searchSpan",
        type: {
          name: "Composite",
          className: "DateTimeRange"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "Tsx"
        }
      },
      interval: {
        serializedName: "interval",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      projectedVariables: {
        serializedName: "projectedVariables",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AggregateSeriesProjectedVariablesItem"
          }
        }
      },
      inlineVariables: {
        serializedName: "inlineVariables",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Variable" } }
        }
      }
    }
  }
};

export const PagedResponse: coreHttp.CompositeMapper = {
  serializedName: "PagedResponse",
  type: {
    name: "Composite",
    className: "PagedResponse",
    modelProperties: {
      continuationToken: {
        serializedName: "continuationToken",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryResultPage: coreHttp.CompositeMapper = {
  serializedName: "QueryResultPage",
  type: {
    name: "Composite",
    className: "QueryResultPage",
    modelProperties: {
      ...PagedResponse.type.modelProperties,
      timestamps: {
        serializedName: "timestamps",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "DateTime" },
            serializedName: "QueryResultPageTimestampsItem"
          }
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PropertyValues" } }
        }
      },
      progress: {
        serializedName: "progress",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PropertyValues: coreHttp.CompositeMapper = {
  serializedName: "PropertyValues",
  type: {
    name: "Composite",
    className: "PropertyValues",
    modelProperties: {
      ...EventProperty.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      }
    }
  }
};

export const GetInstancesPage: coreHttp.CompositeMapper = {
  serializedName: "GetInstancesPage",
  type: {
    name: "Composite",
    className: "GetInstancesPage",
    modelProperties: {
      ...PagedResponse.type.modelProperties,
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesInstance" }
          }
        }
      }
    }
  }
};

export const TimeSeriesInstance: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesInstance",
  type: {
    name: "Composite",
    className: "TimeSeriesInstance",
    modelProperties: {
      timeSeriesId: {
        constraints: {
          MinItems: 1
        },
        serializedName: "timeSeriesId",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      },
      typeId: {
        serializedName: "typeId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      hierarchyIds: {
        serializedName: "hierarchyIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Uuid" },
            serializedName: "TimeSeriesInstanceHierarchyIdsItem"
          }
        }
      },
      instanceFields: {
        serializedName: "instanceFields",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" }, serializedName: "any" }
        }
      }
    }
  }
};

export const InstancesBatchRequest: coreHttp.CompositeMapper = {
  serializedName: "InstancesBatchRequest",
  type: {
    name: "Composite",
    className: "InstancesBatchRequest",
    modelProperties: {
      get: {
        serializedName: "get",
        type: {
          name: "Composite",
          className: "InstancesRequestBatchGetOrDelete"
        }
      },
      put: {
        serializedName: "put",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesInstance" }
          }
        }
      },
      update: {
        serializedName: "update",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesInstance" }
          }
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "InstancesRequestBatchGetOrDelete"
        }
      }
    }
  }
};

export const InstancesRequestBatchGetOrDelete: coreHttp.CompositeMapper = {
  serializedName: "InstancesRequestBatchGetOrDelete",
  type: {
    name: "Composite",
    className: "InstancesRequestBatchGetOrDelete",
    modelProperties: {
      timeSeriesIds: {
        serializedName: "timeSeriesIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: { type: { name: "any" }, serializedName: "any" }
            },
            serializedName: "TimeSeriesId",
            constraints: { MinItems: 1 }
          }
        }
      },
      names: {
        serializedName: "names",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InstancesRequestBatchGetOrDeleteNamesItem"
          }
        }
      }
    }
  }
};

export const InstancesBatchResponse: coreHttp.CompositeMapper = {
  serializedName: "InstancesBatchResponse",
  type: {
    name: "Composite",
    className: "InstancesBatchResponse",
    modelProperties: {
      get: {
        serializedName: "get",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InstanceOrError" } }
        }
      },
      put: {
        serializedName: "put",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InstanceOrError" } }
        }
      },
      update: {
        serializedName: "update",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InstanceOrError" } }
        }
      },
      delete: {
        serializedName: "delete",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TsiErrorBody" } }
        }
      }
    }
  }
};

export const InstanceOrError: coreHttp.CompositeMapper = {
  serializedName: "InstanceOrError",
  type: {
    name: "Composite",
    className: "InstanceOrError",
    modelProperties: {
      instance: {
        serializedName: "instance",
        type: {
          name: "Composite",
          className: "TimeSeriesInstance"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "TsiErrorBody"
        }
      }
    }
  }
};

export const InstancesSuggestRequest: coreHttp.CompositeMapper = {
  serializedName: "InstancesSuggestRequest",
  type: {
    name: "Composite",
    className: "InstancesSuggestRequest",
    modelProperties: {
      searchString: {
        serializedName: "searchString",
        required: true,
        type: {
          name: "String"
        }
      },
      take: {
        serializedName: "take",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InstancesSuggestResponse: coreHttp.CompositeMapper = {
  serializedName: "InstancesSuggestResponse",
  type: {
    name: "Composite",
    className: "InstancesSuggestResponse",
    modelProperties: {
      suggestions: {
        serializedName: "suggestions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstancesSearchStringSuggestion"
            }
          }
        }
      }
    }
  }
};

export const InstancesSearchStringSuggestion: coreHttp.CompositeMapper = {
  serializedName: "InstancesSearchStringSuggestion",
  type: {
    name: "Composite",
    className: "InstancesSearchStringSuggestion",
    modelProperties: {
      searchString: {
        serializedName: "searchString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      highlightedSearchString: {
        serializedName: "highlightedSearchString",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchInstancesRequest: coreHttp.CompositeMapper = {
  serializedName: "SearchInstancesRequest",
  type: {
    name: "Composite",
    className: "SearchInstancesRequest",
    modelProperties: {
      searchString: {
        serializedName: "searchString",
        required: true,
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SearchInstancesRequestPathItem"
          }
        }
      },
      instances: {
        serializedName: "instances",
        type: {
          name: "Composite",
          className: "SearchInstancesParameters"
        }
      },
      hierarchies: {
        serializedName: "hierarchies",
        type: {
          name: "Composite",
          className: "SearchInstancesHierarchiesParameters"
        }
      }
    }
  }
};

export const SearchInstancesParameters: coreHttp.CompositeMapper = {
  serializedName: "SearchInstancesParameters",
  type: {
    name: "Composite",
    className: "SearchInstancesParameters",
    modelProperties: {
      recursive: {
        serializedName: "recursive",
        type: {
          name: "Boolean"
        }
      },
      sort: {
        serializedName: "sort",
        type: {
          name: "Composite",
          className: "InstancesSortParameter"
        }
      },
      highlights: {
        serializedName: "highlights",
        type: {
          name: "Boolean"
        }
      },
      pageSize: {
        serializedName: "pageSize",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InstancesSortParameter: coreHttp.CompositeMapper = {
  serializedName: "InstancesSortParameter",
  type: {
    name: "Composite",
    className: "InstancesSortParameter",
    modelProperties: {
      by: {
        serializedName: "by",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchInstancesHierarchiesParameters: coreHttp.CompositeMapper = {
  serializedName: "SearchInstancesHierarchiesParameters",
  type: {
    name: "Composite",
    className: "SearchInstancesHierarchiesParameters",
    modelProperties: {
      expand: {
        serializedName: "expand",
        type: {
          name: "Composite",
          className: "HierarchiesExpandParameter"
        }
      },
      sort: {
        serializedName: "sort",
        type: {
          name: "Composite",
          className: "HierarchiesSortParameter"
        }
      },
      pageSize: {
        serializedName: "pageSize",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HierarchiesExpandParameter: coreHttp.CompositeMapper = {
  serializedName: "HierarchiesExpandParameter",
  type: {
    name: "Composite",
    className: "HierarchiesExpandParameter",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HierarchiesSortParameter: coreHttp.CompositeMapper = {
  serializedName: "HierarchiesSortParameter",
  type: {
    name: "Composite",
    className: "HierarchiesSortParameter",
    modelProperties: {
      by: {
        serializedName: "by",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchInstancesResponsePage: coreHttp.CompositeMapper = {
  serializedName: "SearchInstancesResponsePage",
  type: {
    name: "Composite",
    className: "SearchInstancesResponsePage",
    modelProperties: {
      instances: {
        serializedName: "instances",
        type: {
          name: "Composite",
          className: "SearchInstancesResponse"
        }
      },
      hierarchyNodes: {
        serializedName: "hierarchyNodes",
        type: {
          name: "Composite",
          className: "SearchHierarchyNodesResponse"
        }
      }
    }
  }
};

export const SearchInstancesResponse: coreHttp.CompositeMapper = {
  serializedName: "SearchInstancesResponse",
  type: {
    name: "Composite",
    className: "SearchInstancesResponse",
    modelProperties: {
      hits: {
        serializedName: "hits",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "InstanceHit" } }
        }
      },
      hitCount: {
        serializedName: "hitCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      continuationToken: {
        serializedName: "continuationToken",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceHit: coreHttp.CompositeMapper = {
  serializedName: "InstanceHit",
  type: {
    name: "Composite",
    className: "InstanceHit",
    modelProperties: {
      timeSeriesId: {
        constraints: {
          MinItems: 1
        },
        serializedName: "timeSeriesId",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      typeId: {
        serializedName: "typeId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      hierarchyIds: {
        serializedName: "hierarchyIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Uuid" },
            serializedName: "InstanceHitHierarchyIdsItem"
          }
        }
      },
      highlights: {
        serializedName: "highlights",
        type: {
          name: "Composite",
          className: "InstanceHitHighlights"
        }
      }
    }
  }
};

export const InstanceHitHighlights: coreHttp.CompositeMapper = {
  serializedName: "InstanceHitHighlights",
  type: {
    name: "Composite",
    className: "InstanceHitHighlights",
    modelProperties: {
      timeSeriesId: {
        serializedName: "timeSeriesId",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InstanceHitHighlightsTimeSeriesIdItem"
          }
        }
      },
      typeName: {
        serializedName: "typeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hierarchyIds: {
        serializedName: "hierarchyIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Uuid" },
            serializedName: "InstanceHitHighlightsHierarchyIdsItem"
          }
        }
      },
      hierarchyNames: {
        serializedName: "hierarchyNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InstanceHitHighlightsHierarchyNamesItem"
          }
        }
      },
      instanceFieldNames: {
        serializedName: "instanceFieldNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InstanceHitHighlightsInstanceFieldNamesItem"
          }
        }
      },
      instanceFieldValues: {
        serializedName: "instanceFieldValues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "InstanceHitHighlightsInstanceFieldValuesItem"
          }
        }
      }
    }
  }
};

export const SearchHierarchyNodesResponse: coreHttp.CompositeMapper = {
  serializedName: "SearchHierarchyNodesResponse",
  type: {
    name: "Composite",
    className: "SearchHierarchyNodesResponse",
    modelProperties: {
      hits: {
        serializedName: "hits",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "HierarchyHit" } }
        }
      },
      hitCount: {
        serializedName: "hitCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      continuationToken: {
        serializedName: "continuationToken",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HierarchyHit: coreHttp.CompositeMapper = {
  serializedName: "HierarchyHit",
  type: {
    name: "Composite",
    className: "HierarchyHit",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cumulativeInstanceCount: {
        serializedName: "cumulativeInstanceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      hierarchyNodes: {
        serializedName: "hierarchyNodes",
        type: {
          name: "Composite",
          className: "SearchHierarchyNodesResponse"
        }
      }
    }
  }
};

export const GetTypesPage: coreHttp.CompositeMapper = {
  serializedName: "GetTypesPage",
  type: {
    name: "Composite",
    className: "GetTypesPage",
    modelProperties: {
      ...PagedResponse.type.modelProperties,
      types: {
        serializedName: "types",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TimeSeriesType" } }
        }
      }
    }
  }
};

export const TimeSeriesType: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesType",
  type: {
    name: "Composite",
    className: "TimeSeriesType",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      variables: {
        serializedName: "variables",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Variable" } }
        }
      }
    }
  }
};

export const TypesBatchRequest: coreHttp.CompositeMapper = {
  serializedName: "TypesBatchRequest",
  type: {
    name: "Composite",
    className: "TypesBatchRequest",
    modelProperties: {
      get: {
        serializedName: "get",
        type: {
          name: "Composite",
          className: "TypesRequestBatchGetOrDelete"
        }
      },
      put: {
        serializedName: "put",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TimeSeriesType" } }
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "TypesRequestBatchGetOrDelete"
        }
      }
    }
  }
};

export const TypesRequestBatchGetOrDelete: coreHttp.CompositeMapper = {
  serializedName: "TypesRequestBatchGetOrDelete",
  type: {
    name: "Composite",
    className: "TypesRequestBatchGetOrDelete",
    modelProperties: {
      typeIds: {
        serializedName: "typeIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Uuid" },
            serializedName: "TypesRequestBatchGetOrDeleteTypeIdsItem"
          }
        }
      },
      names: {
        serializedName: "names",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "TypesRequestBatchGetOrDeleteNamesItem"
          }
        }
      }
    }
  }
};

export const TypesBatchResponse: coreHttp.CompositeMapper = {
  serializedName: "TypesBatchResponse",
  type: {
    name: "Composite",
    className: "TypesBatchResponse",
    modelProperties: {
      get: {
        serializedName: "get",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesTypeOrError" }
          }
        }
      },
      put: {
        serializedName: "put",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesTypeOrError" }
          }
        }
      },
      delete: {
        serializedName: "delete",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TsiErrorBody" } }
        }
      }
    }
  }
};

export const TimeSeriesTypeOrError: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesTypeOrError",
  type: {
    name: "Composite",
    className: "TimeSeriesTypeOrError",
    modelProperties: {
      timeSeriesType: {
        serializedName: "timeSeriesType",
        type: {
          name: "Composite",
          className: "TimeSeriesType"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "TsiErrorBody"
        }
      }
    }
  }
};

export const GetHierarchiesPage: coreHttp.CompositeMapper = {
  serializedName: "GetHierarchiesPage",
  type: {
    name: "Composite",
    className: "GetHierarchiesPage",
    modelProperties: {
      ...PagedResponse.type.modelProperties,
      hierarchies: {
        serializedName: "hierarchies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesHierarchy" }
          }
        }
      }
    }
  }
};

export const TimeSeriesHierarchy: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesHierarchy",
  type: {
    name: "Composite",
    className: "TimeSeriesHierarchy",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "TimeSeriesHierarchySource"
        }
      }
    }
  }
};

export const TimeSeriesHierarchySource: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesHierarchySource",
  type: {
    name: "Composite",
    className: "TimeSeriesHierarchySource",
    modelProperties: {
      instanceFieldNames: {
        serializedName: "instanceFieldNames",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "TimeSeriesHierarchySourceInstanceFieldNamesItem"
          }
        }
      }
    }
  }
};

export const HierarchiesBatchRequest: coreHttp.CompositeMapper = {
  serializedName: "HierarchiesBatchRequest",
  type: {
    name: "Composite",
    className: "HierarchiesBatchRequest",
    modelProperties: {
      get: {
        serializedName: "get",
        type: {
          name: "Composite",
          className: "HierarchiesRequestBatchGetDelete"
        }
      },
      put: {
        serializedName: "put",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesHierarchy" }
          }
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "HierarchiesRequestBatchGetDelete"
        }
      }
    }
  }
};

export const HierarchiesRequestBatchGetDelete: coreHttp.CompositeMapper = {
  serializedName: "HierarchiesRequestBatchGetDelete",
  type: {
    name: "Composite",
    className: "HierarchiesRequestBatchGetDelete",
    modelProperties: {
      hierarchyIds: {
        serializedName: "hierarchyIds",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Uuid" },
            serializedName: "HierarchiesRequestBatchGetDeleteHierarchyIdsItem"
          }
        }
      },
      names: {
        serializedName: "names",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "HierarchiesRequestBatchGetDeleteNamesItem"
          }
        }
      }
    }
  }
};

export const HierarchiesBatchResponse: coreHttp.CompositeMapper = {
  serializedName: "HierarchiesBatchResponse",
  type: {
    name: "Composite",
    className: "HierarchiesBatchResponse",
    modelProperties: {
      get: {
        serializedName: "get",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesHierarchyOrError" }
          }
        }
      },
      put: {
        serializedName: "put",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TimeSeriesHierarchyOrError" }
          }
        }
      },
      delete: {
        serializedName: "delete",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TsiErrorBody" } }
        }
      }
    }
  }
};

export const TimeSeriesHierarchyOrError: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesHierarchyOrError",
  type: {
    name: "Composite",
    className: "TimeSeriesHierarchyOrError",
    modelProperties: {
      hierarchy: {
        serializedName: "hierarchy",
        type: {
          name: "Composite",
          className: "TimeSeriesHierarchy"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "TsiErrorBody"
        }
      }
    }
  }
};

export const Interpolation: coreHttp.CompositeMapper = {
  serializedName: "Interpolation",
  type: {
    name: "Composite",
    className: "Interpolation",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      boundary: {
        serializedName: "boundary",
        type: {
          name: "Composite",
          className: "InterpolationBoundary"
        }
      }
    }
  }
};

export const InterpolationBoundary: coreHttp.CompositeMapper = {
  serializedName: "InterpolationBoundary",
  type: {
    name: "Composite",
    className: "InterpolationBoundary",
    modelProperties: {
      span: {
        serializedName: "span",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const NumericVariable: coreHttp.CompositeMapper = {
  serializedName: "numeric",
  type: {
    name: "Composite",
    className: "NumericVariable",
    uberParent: "Variable",
    polymorphicDiscriminator: Variable.type.polymorphicDiscriminator,
    modelProperties: {
      ...Variable.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "Tsx"
        }
      },
      interpolation: {
        serializedName: "interpolation",
        type: {
          name: "Composite",
          className: "Interpolation"
        }
      },
      aggregation: {
        serializedName: "aggregation",
        type: {
          name: "Composite",
          className: "Tsx"
        }
      }
    }
  }
};

export const AggregateVariable: coreHttp.CompositeMapper = {
  serializedName: "aggregate",
  type: {
    name: "Composite",
    className: "AggregateVariable",
    uberParent: "Variable",
    polymorphicDiscriminator: Variable.type.polymorphicDiscriminator,
    modelProperties: {
      ...Variable.type.modelProperties,
      aggregation: {
        serializedName: "aggregation",
        type: {
          name: "Composite",
          className: "Tsx"
        }
      }
    }
  }
};

export const CategoricalVariable: coreHttp.CompositeMapper = {
  serializedName: "categorical",
  type: {
    name: "Composite",
    className: "CategoricalVariable",
    uberParent: "Variable",
    polymorphicDiscriminator: Variable.type.polymorphicDiscriminator,
    modelProperties: {
      ...Variable.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "Tsx"
        }
      },
      interpolation: {
        serializedName: "interpolation",
        type: {
          name: "Composite",
          className: "Interpolation"
        }
      },
      categories: {
        serializedName: "categories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesAggregateCategory"
            }
          }
        }
      },
      defaultCategory: {
        serializedName: "defaultCategory",
        type: {
          name: "Composite",
          className: "TimeSeriesDefaultCategory"
        }
      }
    }
  }
};

export const TimeSeriesAggregateCategory: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesAggregateCategory",
  type: {
    name: "Composite",
    className: "TimeSeriesAggregateCategory",
    modelProperties: {
      label: {
        serializedName: "label",
        required: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      }
    }
  }
};

export const TimeSeriesDefaultCategory: coreHttp.CompositeMapper = {
  serializedName: "TimeSeriesDefaultCategory",
  type: {
    name: "Composite",
    className: "TimeSeriesDefaultCategory",
    modelProperties: {
      label: {
        serializedName: "label",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryGetAvailabilityHeaders: coreHttp.CompositeMapper = {
  serializedName: "query_getAvailabilityHeaders",
  type: {
    name: "Composite",
    className: "QueryGetAvailabilityHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryGetEventSchemaHeaders: coreHttp.CompositeMapper = {
  serializedName: "query_getEventSchemaHeaders",
  type: {
    name: "Composite",
    className: "QueryGetEventSchemaHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryExecuteHeaders: coreHttp.CompositeMapper = {
  serializedName: "query_executeHeaders",
  type: {
    name: "Composite",
    className: "QueryExecuteHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelSettingsGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "modelSettings_getHeaders",
  type: {
    name: "Composite",
    className: "ModelSettingsGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelSettingsUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "modelSettings_updateHeaders",
  type: {
    name: "Composite",
    className: "ModelSettingsUpdateHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesInstancesGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "timeSeriesInstances_getHeaders",
  type: {
    name: "Composite",
    className: "TimeSeriesInstancesGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesInstancesExecuteBatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "timeSeriesInstances_executeBatchHeaders",
  type: {
    name: "Composite",
    className: "TimeSeriesInstancesExecuteBatchHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesInstancesSuggestHeaders: coreHttp.CompositeMapper = {
  serializedName: "timeSeriesInstances_suggestHeaders",
  type: {
    name: "Composite",
    className: "TimeSeriesInstancesSuggestHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesInstancesSearchHeaders: coreHttp.CompositeMapper = {
  serializedName: "timeSeriesInstances_searchHeaders",
  type: {
    name: "Composite",
    className: "TimeSeriesInstancesSearchHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesTypesGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "timeSeriesTypes_getHeaders",
  type: {
    name: "Composite",
    className: "TimeSeriesTypesGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesTypesExecuteBatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "timeSeriesTypes_executeBatchHeaders",
  type: {
    name: "Composite",
    className: "TimeSeriesTypesExecuteBatchHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesHierarchiesGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "timeSeriesHierarchies_getHeaders",
  type: {
    name: "Composite",
    className: "TimeSeriesHierarchiesGetHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesHierarchiesExecuteBatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "timeSeriesHierarchies_executeBatchHeaders",
  type: {
    name: "Composite",
    className: "TimeSeriesHierarchiesExecuteBatchHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  Variable: Variable,
  "Variable.numeric": NumericVariable,
  "Variable.aggregate": AggregateVariable,
  "Variable.categorical": CategoricalVariable
};
