/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type VariableUnion =
  | Variable
  | NumericVariable
  | AggregateVariable
  | CategoricalVariable;

/**
 * Response of Get Availability operation. When environment has no data, availability property is null.
 */
export interface AvailabilityResponse {
  /**
   * Event availability information when environment contains events. When environment has no data yet, this property is null or not present.
   */
  readonly availability?: Availability;
}

/**
 * Event availability information when environment contains events. Contains time range of events and approximate distribution of events over time.
 */
export interface Availability {
  /**
   * Minimum and maximum values of event timestamp ($ts) property.
   */
  readonly range?: DateTimeRange;
  /**
   * Interval size for the returned distribution of the events. Returned interval is selected to return a reasonable number of points. All intervals are the same size. On the wire interval is specified in ISO-8601 duration format. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is "PT1M", 1 millisecond is "PT0.001S". For more information, see https://www.w3.org/TR/xmlschema-2/#duration
   */
  readonly intervalSize?: string;
  /**
   * Dictionary of <integer>
   */
  distribution?: { [propertyName: string]: number };
}

/**
 * The range of time. Cannot be null or negative.
 */
export interface DateTimeRange {
  /**
   * Start timestamp of the time range. Start timestamp is inclusive when used in time series query requests. Events that have this timestamp are included.
   */
  from: Date;
  /**
   * End timestamp of the time range. End timestamp is exclusive when used in time series query requests. Events that match this timestamp are excluded. Note that end timestamp is inclusive when returned by Get Availability (meaning that there is an event with this exact "to" timestamp).
   */
  to: Date;
}

/**
 * Information about an API error.
 */
export interface TsiError {
  /**
   * A particular API error with an error code and a message.
   */
  error?: TsiErrorBody;
}

/**
 * A particular API error with an error code and a message.
 */
export interface TsiErrorBody {
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
   */
  [property: string]: any;
  /**
   * Language-independent, human-readable string that defines a service-specific error code. This code serves as a more specific indicator for the HTTP error code specified in the response. Can be used to programmatically handle specific error cases.
   */
  readonly code?: string;
  /**
   * Human-readable, language-independent representation of the error. It is intended as an aid to developers and is not suitable for exposure to end users.
   */
  readonly message?: string;
  /**
   * Target of the particular error (for example, the name of the property in error). May be null.
   */
  readonly target?: string;
  /**
   * Contains more specific error that narrows down the cause. May be null.
   */
  readonly innerError?: TsiErrorBody;
  /**
   * Contains additional error information. May be null.
   */
  readonly details?: TsiErrorDetails[];
}

/**
 * Additional error information.
 */
export interface TsiErrorDetails {
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
   */
  [property: string]: any;
  /**
   * Language-independent, human-readable string that defines a service-specific error code. This code serves as a more specific indicator for the HTTP error code specified in the response. Can be used to programmatically handle specific error cases.
   */
  readonly code?: string;
  /**
   * Human-readable, language-independent representation of the error. It is intended as an aid to developers and is not suitable for exposure to end users.
   */
  readonly message?: string;
}

/**
 * Request to get the event schema of all events within a given search span.
 */
export interface GetEventSchemaRequest {
  /**
   * The range of time on which the query is executed. Cannot be null.
   */
  searchSpan: DateTimeRange;
}

/**
 * Event schema of all events within a given search span. Event schema is a set of property definitions. Properties are identified by both name and type. Different events can have properties with same name, but different type. Event schema may not be contain all persisted properties when there are too many properties.
 */
export interface EventSchema {
  /**
   * A set of property definitions. When environment has no data, the returned array is empty.
   */
  readonly properties?: EventProperty[];
}

/**
 * Property of an event that is either stored or computed. Properties are identified by both name and type. Different events can have properties with same name, but different type.
 */
export interface EventProperty {
  /**
   * The name of the property.
   */
  name?: string;
  /**
   * The type of the property.
   */
  type?: PropertyTypes;
}

/**
 * Response containing full time series model settings which include model name, Time Series ID properties and default type ID.
 */
export interface ModelSettingsResponse {
  /**
   * Model settings including model name, Time Series ID properties and default type ID.
   */
  readonly modelSettings?: TimeSeriesModelSettings;
}

/**
 * Time series model settings including model name, Time Series ID properties and default type ID.
 */
export interface TimeSeriesModelSettings {
  /**
   * Time series model display name which is shown in the UX. Examples: "Temperature Sensors", "MyDevices".
   */
  readonly name?: string;
  /**
   * Time series ID properties defined during environment creation.
   */
  readonly timeSeriesIdProperties?: TimeSeriesIdProperty[];
  /**
   * Default type ID of the model that new time series instances will automatically belong to.
   */
  readonly defaultTypeId?: string;
}

/**
 * A definition of a single property that can be used in time series ID properties defined during environment creation.
 */
export interface TimeSeriesIdProperty {
  /**
   * The name of the property.
   */
  readonly name?: string;
  /**
   * The type of the property. Currently, only "String" is supported.
   */
  readonly type?: "String";
}

/**
 * Request to update model settings. One of "name" or "defaultTypeId" must be set.
 */
export interface UpdateModelSettingsRequest {
  /**
   * Model display name which is shown in the UX and mutable by the user. Initial value is "DefaultModel".
   */
  name?: string;
  /**
   * Default type id of the model that new instances will automatically belong to.
   */
  defaultTypeId?: string;
}

/**
 * Request to execute a time series query over events. Exactly one of "getEvents", "getSeries" or "aggregateSeries" must be set.
 */
export interface QueryRequest {
  /**
   * Get Events query. Allows to retrieve raw events for a given Time Series ID and search span.
   */
  getEvents?: GetEvents;
  /**
   * Get Series query. Allows to retrieve time series of calculated variable values from events for a given Time Series ID and search span.
   */
  getSeries?: GetSeries;
  /**
   * Aggregate Series query. Allows to calculate an aggregated time series from events for a given Time Series ID and search span.
   */
  aggregateSeries?: AggregateSeries;
}

/**
 * Get Events query. Allows to retrieve raw events for a given Time Series ID and search span.
 */
export interface GetEvents {
  /**
   * A single Time Series ID value that uniquely identifies a single time series instance (e.g. a device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be null.
   */
  timeSeriesId: any[];
  /**
   * The range of time on which the query is executed. Cannot be null.
   */
  searchSpan: DateTimeRange;
  /**
   * Optional top-level filter for the query which will be applied to all the variables in the query. Example: "$event.Status.String='Good'".  Can be null.
   */
  filter?: Tsx;
  /**
   * Projected properties is an array of properties which you want to project. These properties must appear in the events; otherwise, they are not returned.
   */
  projectedProperties?: EventProperty[];
  /**
   * Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.
   */
  take?: number;
}

/**
 * Time series expression (TSX) written as a single string. Examples: "$event.Status.String='Good'", "avg($event.Temperature)". Refer to the documentation on how to write time series expressions.
 */
export interface Tsx {
  /**
   * Time series expression (TSX) written as a single string. Examples: "$event.Status.String='Good'", "avg($event.Temperature)". Refer to the documentation on how to write time series expressions.
   */
  tsx: string;
}

/**
 * Get Series query. Allows to retrieve time series of calculated variable values from events for a given Time Series ID and search span.
 */
export interface GetSeries {
  /**
   * A single Time Series ID value that uniquely identifies a single time series instance (e.g. a device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be null.
   */
  timeSeriesId: any[];
  /**
   * The range of time on which the query is executed. Cannot be null.
   */
  searchSpan: DateTimeRange;
  /**
   * Top-level filter over the events that restricts the number of events being considered for computation. This filter is AND'ed with filter in each variable. Example: "$event.Status.String='Good'". Optional.
   */
  filter?: Tsx;
  /**
   * Selected variables that needs to be projected in the query result. When it is null or not set, all the variables from inlineVariables and time series type in the model are returned. Can be null.
   */
  projectedVariables?: string[];
  /**
   * Optional inline variables apart from the ones already defined in the time series type in the model. When the inline variable name is the same name as in the model, the inline variable definition takes precedence. Can be null.
   */
  inlineVariables?: { [propertyName: string]: VariableUnion };
  /**
   * Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.
   */
  take?: number;
}

/**
 * Variables are named calculations over values from the events. Time Series Insights variable definitions contain formula and computation rules. Variables are stored in the type definition in Time Series Model and can be provided inline via Query APIs to override the stored definition.
 */
export interface Variable {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  kind: "numeric" | "aggregate" | "categorical";
  /**
   * Filter over the events that restricts the number of events being considered for computation. Example: "$event.Status.String='Good'". Optional.
   */
  filter?: Tsx;
}

/**
 * Aggregate Series query. Allows to calculate an aggregated time series from events for a given Time Series ID and search span.
 */
export interface AggregateSeries {
  /**
   * A single Time Series ID value that uniquely identifies a single time series instance (e.g. a device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be null.
   */
  timeSeriesId: any[];
  /**
   * The range of time on which the query is executed. Cannot be null.
   */
  searchSpan: DateTimeRange;
  /**
   * Top-level filter over the events that restricts the number of events being considered for computation. This filter is AND'ed with filter in each variable. Example: "$event.Status.String='Good'". Optional.
   */
  filter?: Tsx;
  /**
   * Interval size is specified in ISO-8601 duration format. All intervals are the same size. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is "PT1M", 1 millisecond is "PT0.001S". For more information, see https://www.w3.org/TR/xmlschema-2/#duration
   */
  interval: string;
  /**
   * This allows the user to optionally select the variables that needs to be projected. When it is null or not set, all the variables from inlineVariables and model are returned. Can be null.
   */
  projectedVariables?: string[];
  /**
   * This allows the user the optionally define inline-variables apart from the ones already defined in the model. When the inline variable names have the same name as the model, the inline variable definition takes precedence. Can be null.
   */
  inlineVariables?: { [propertyName: string]: VariableUnion };
}

/**
 * Partial result that has continuation token to fetch the next partial result.
 */
export interface PagedResponse {
  /**
   * If returned, this means that current results represent a partial result. Continuation token allows to get the next page of results. To get the next page of query results, send the same request with continuation token parameter in "x-ms-continuation" HTTP header.
   */
  readonly continuationToken?: string;
}

/**
 * A single page of query results. If query has not finished yet, a page will have continuation token set. In this case, to get the next page of results, send the same request again with continuation token parameter. If query has completed, the continuation token is null. It is also possible to get an empty page with only continuation token set when no query results have been computed yet. If paging has completed (continuation token is null), then timestamps and properties may be empty if there is no data to return.
 */
export type QueryResultPage = PagedResponse & {
  /**
   * The timestamps of the values of the time series. If an aggregation over intervals is used, timestamps represent the start of corresponding intervals. If events are retrieved, timestamps are values of timestamp $ts property of events. Can be null if server was unable to fill the page in this request, or can be empty if there are no more objects when continuation token is null.
   */
  readonly timestamps?: Date[];
  /**
   * Collection of time series properties and values for each of the timestamps.  Can be null if server was unable to fill the page in this request, or can be empty if there are no more objects when continuation token is null.
   */
  readonly properties?: PropertyValues[];
  /**
   * Approximate progress of the query in percentage. It can be between 0 and 100. When the continuation token in the response is null, the progress is expected to be 100.
   */
  readonly progress?: number;
};

/**
 * Values of a single property corresponding to the timestamps. May contain nulls. Type of values matches the type of property.
 */
export type PropertyValues = EventProperty & {
  /**
   * Values of a single property corresponding to the timestamps. May contain nulls. Type of values matches the type of property.
   */
  values?: any[];
};

/**
 * Partial list of time series instances returned in a single request.
 */
export type GetInstancesPage = PagedResponse & {
  /**
   * Partial list of time series instances returned in a single request. Can be empty if server was unable to fill the page in this request, or there is no more objects when continuation token is null.
   */
  readonly instances?: TimeSeriesInstance[];
};

/**
 * Time series instances are the time series themselves. In most cases, the deviceId or assetId is the unique identifier of the asset in the environment. Instances have descriptive information associated with them called instance fields. At a minimum, instance fields include hierarchy information. They can also include useful, descriptive data like the manufacturer, operator, or the last service date.
 */
export interface TimeSeriesInstance {
  /**
   * Time Series ID that uniquely identifies the instance. It matches Time Series ID properties in an environment. Immutable, never null.
   */
  timeSeriesId: any[];
  /**
   * This represents the type that this instance belongs to. Never null.
   */
  typeId: string;
  /**
   * Optional name of the instance which is unique in an environment. Names acts as a mutable alias or display name of the time series instance. Mutable, may be null.
   */
  name?: string;
  /**
   * This optional field contains description about the instance.
   */
  description?: string;
  /**
   * Set of time series hierarchy IDs that the instance belong to. May be null.
   */
  hierarchyIds?: string[];
  /**
   * Set of key-value pairs that contain user-defined instance properties. May be null.
   */
  instanceFields?: { [propertyName: string]: any };
}

/**
 * Request to perform a single operation on a batch of instances. Exactly one of "get", "put", "update" or "delete" must be set.
 */
export interface InstancesBatchRequest {
  /**
   * Time series IDs or names of time series instances to return.
   */
  get?: InstancesRequestBatchGetOrDelete;
  /**
   * Time series instances to be created or updated.
   */
  put?: TimeSeriesInstance[];
  /**
   * Time series instances to be updated onlRequest to perform a single operation on a batch of instances. y. If instance does not exist, an error is returned.
   */
  update?: TimeSeriesInstance[];
  /**
   * Time series IDs or names of time series instances to delete.
   */
  delete?: InstancesRequestBatchGetOrDelete;
}

/**
 * Request to get or delete instances by time series IDs or time series names. Exactly one of "timeSeriesIds" or "names" must be set.
 */
export interface InstancesRequestBatchGetOrDelete {
  /**
   * List of time series IDs of the time series instances to return or delete.
   */
  timeSeriesIds?: any[][];
  /**
   * List of names of the time series instances to return or delete.
   */
  names?: string[];
}

/**
 * Response of a single operation on a batch of instances. Only one of "get", "put", "update" or "delete" will be set based on the request.
 */
export interface InstancesBatchResponse {
  /**
   * List of instance or error objects corresponding by position to the "get" array in the request. Instance object is set when operation is successful and error object is set when operation is unsuccessful.
   */
  readonly get?: InstanceOrError[];
  /**
   * List of error objects corresponding by position to the "put" array in the request. Error object is set when operation is unsuccessful.
   */
  readonly put?: InstanceOrError[];
  /**
   * List of error objects corresponding by position to the "update" array in the request. Instance object is set when operation is successful and error object is set when operation is unsuccessful.
   */
  readonly update?: InstanceOrError[];
  /**
   * List of error objects corresponding by position to the "delete" array in the request. Null means the instance has been deleted, or did not exist. Error object is set when operation is unsuccessful (e.g. when there are events associated with this time series instance).
   */
  readonly delete?: TsiErrorBody[];
}

/**
 * Result of a batch operation on a particular time series instance. Instance object is set when operation is successful (except put operation) and error object is set when operation is unsuccessful.
 */
export interface InstanceOrError {
  /**
   * Time series instance object - set when the operation is successful (except put operation).
   */
  readonly instance?: TimeSeriesInstance;
  /**
   * Error object - set when the operation is unsuccessful.
   */
  readonly error?: TsiErrorBody;
}

/**
 * Request to get search string suggestions for time series instances search based on prefix text.
 */
export interface InstancesSuggestRequest {
  /**
   * Search string for which suggestions are required. Empty is allowed, but not null.
   */
  searchString: string;
  /**
   * Maximum number of suggestions expected in the result. Defaults to 10 when not set.
   */
  take?: number;
}

/**
 * Response of getting suggestions for search for time series instances.
 */
export interface InstancesSuggestResponse {
  /**
   * List of instance suggestions for searching time series models.
   */
  readonly suggestions?: InstancesSearchStringSuggestion[];
}

/**
 * Suggested search string to be used for further search for time series instances.
 */
export interface InstancesSearchStringSuggestion {
  /**
   * Suggested search string. Can be used for further search for time series instances.
   */
  readonly searchString?: string;
  /**
   * Highlighted suggested search string to be displayed to the user. Highlighting inserts <hit> and </hit> tags in the portions of text that matched the search string. Do not use highlighted search string to do further search calls.
   */
  readonly highlightedSearchString?: string;
}

/**
 * Request to execute a search query against time series instances and return matching time series instances.
 */
export interface SearchInstancesRequest {
  /**
   * Query search string that will be matched to the attributes of time series instances. Example: "floor 100". Case-insensitive, must be present, but can be empty string.
   */
  searchString: string;
  /**
   * Filter on hierarchy path of time series instances. Path is represented as array of string path segments. First element should be hierarchy name. Example: ["Location", "California"]. Optional, case sensitive, never empty and can be null.
   */
  path?: string[];
  /**
   * Parameters of how to return time series instances. Can be null. When both the instances and hierarchies parameters are null, the instances are returned in the results based on the default values of parameters, and hierarchies are not returned.
   */
  instances?: SearchInstancesParameters;
  /**
   * Parameters of how to return time series instance hierarchies. If null, hierarchies are not returned. If instances parameter is null and hierarchies parameter is not null, only hierarchies with no instances are returned.
   */
  hierarchies?: SearchInstancesHierarchiesParameters;
}

/**
 * Parameters of how to return time series instances by search instances call.
 */
export interface SearchInstancesParameters {
  /**
   * Definition of which instances are returned. When recursive is set to 'true', all instances that have the path that starts with path the path parameter are returned. When recursive is set to 'false', only instances that have the path that exactly matches the path parameter are returned. Using recursive search allows to implement search user experience, while using non-recursive search allows to implement navigation experience. Optional, default is 'true'.
   */
  recursive?: boolean;
  /**
   * Definition of how time series instances are sorted before being returned by search instances call - relevance or alphabetical. Optional, default is "Rank".
   */
  sort?: InstancesSortParameter;
  /**
   * Definition of highlighted search results or not. When it is set to 'true', the highlighted search results are returned. When it is set to 'false', the highlighted search results are not returned. Default is 'true'.
   */
  highlights?: boolean;
  /**
   * Maximum number of instances expected in each page of the result. Defaults to 10 when not set. Ranges from 1 to 100. If there are results beyond the page size, the user can use the continuation token to fetch the next page.
   */
  pageSize?: number;
}

/**
 * Definition of how time series instances are sorted before being returned by search instances call.
 */
export interface InstancesSortParameter {
  /**
   * Value to use for sorting of the time series instances before being returned by search instances call. When it is set to 'Rank', the returned instances are sorted based on the relevance. When it is set to 'DisplayName', the returned results are sorted based on the display name. Display name is the name of the instance if it exists, otherwise, display name is the time series ID. Default is 'Rank'.
   */
  by?: InstancesSortBy;
}

/**
 * Parameter of how to return time series instance hierarchies by search instances call.
 */
export interface SearchInstancesHierarchiesParameters {
  /**
   * Definition of whether to expand hierarchy nodes in the same search instances call. Optional, default is 'UntilChildren'.
   */
  expand?: HierarchiesExpandParameter;
  /**
   * Definition of sorting of hierarchy nodes. Optional, default is 'CumulativeInstanceCount'.
   */
  sort?: HierarchiesSortParameter;
  /**
   * Maximum number of hierarchies in the same level to return in the same page. Optional, default is 10 when not set. Range is from 1 to 100. If there are results beyond the page size, the continuation token can be used to fetch the next page.
   */
  pageSize?: number;
}

/**
 * Definition of whether to expand hierarchy nodes in the same search instances call.
 */
export interface HierarchiesExpandParameter {
  /**
   * Kind of the expansion of hierarchy nodes. When it is set to 'UntilChildren', the hierarchy nodes are expanded recursively until there is more than one child. When it is set to 'OneLevel', the hierarchies are expanded only at the single level matching path search instances parameter. Optional, default is 'UntilChildren'.
   */
  kind?: HierarchiesExpandKind;
}

/**
 * Definition of sorting of hierarchy nodes.
 */
export interface HierarchiesSortParameter {
  /**
   * Value to use for hierarchy node sorting. When it is set to 'CumulativeInstanceCount', the returned hierarchies are sorted based on the total instances belonging to the hierarchy node and its child hierarchy nodes. When it is set to 'Name', the returned hierarchies are sorted based on the hierarchy name. Optional, default is 'CumulativeInstanceCount'.
   */
  by?: HierarchiesSortBy;
}

/**
 * Single page of the search results.
 */
export interface SearchInstancesResponsePage {
  /**
   * The instances matching the query based on the input. May be empty or null.
   */
  readonly instances?: SearchInstancesResponse;
  /**
   * The hierarchy nodes which contains the instances matching the query based on the input. May be empty or null.
   */
  readonly hierarchyNodes?: SearchHierarchyNodesResponse;
}

/**
 * The instances matching the query based on the input. May be empty or null.
 */
export interface SearchInstancesResponse {
  /**
   * The list of instances matching the query based on the input. May be empty.
   */
  readonly hits?: InstanceHit[];
  /**
   * Total number of instances matching the query based on the input.
   */
  readonly hitCount?: number;
  /**
   * If returned, this means that current results represent a partial result. Continuation token allows to get the next page of results. To get the next page of query results, send the same request with continuation token parameter in "x-ms-continuation" HTTP header.
   */
  readonly continuationToken?: string;
}

/**
 * Time series instance that is returned by instances search call. Returned instance matched the search request and contains highlighted text to be displayed to the user if it is set to 'true'.
 */
export interface InstanceHit {
  /**
   * Time series ID of the time series instance that matched the search request.
   */
  readonly timeSeriesId?: any[];
  /**
   * Name of the time series instance that matched the search request. May be null.
   */
  readonly name?: string;
  /**
   * Represents the type that time series instance which matched the search request belongs to. Never null.
   */
  readonly typeId?: string;
  /**
   * List of time series hierarchy IDs that time series instance which matched the search request belongs to. Cannot be used to lookup hierarchies. May be null.
   */
  readonly hierarchyIds?: string[];
  /**
   * Highlighted text of time series instance to be displayed to the user. Highlighting inserts <hit> and </hit> tags in the portions of text that matched the search string. Do not use any of the highlighted properties to do further API calls.
   */
  readonly highlights?: InstanceHitHighlights;
}

/**
 * Highlighted text of time series instance to be displayed to the user. Highlighting inserts <hit> and </hit> tags in the portions of text that matched the search string. Do not use any of the highlighted properties to do further API calls.
 */
export interface InstanceHitHighlights {
  /**
   * List of highlighted string values of Time Series ID for displaying. Cannot be used to lookup instance.
   */
  readonly timeSeriesId?: string[];
  /**
   * Highlighted time series type name that this instance belongs to.
   */
  readonly typeName?: string;
  /**
   * Highlighted name of time series instance. May be null.
   */
  readonly name?: string;
  /**
   * Highlighted description of time series instance. May be null.
   */
  readonly description?: string;
  /**
   * List of highlighted time series hierarchy IDs that time series instance belongs to. Cannot be used to lookup hierarchies. May be null.
   */
  readonly hierarchyIds?: string[];
  /**
   * List of highlighted time series hierarchy names that time series instance belongs to. Cannot be used to lookup hierarchies. May be null.
   */
  readonly hierarchyNames?: string[];
  /**
   * List of highlighted time series instance field names. May be null.
   */
  readonly instanceFieldNames?: string[];
  /**
   * List of highlighted time series instance field values. May be null.
   */
  readonly instanceFieldValues?: string[];
}

/**
 * The hierarchy nodes which contains the instances matching the query based on the input. May be empty or null.
 */
export interface SearchHierarchyNodesResponse {
  /**
   * The list of hierarchy nodes which contains the instances matching the query based on the input. May be empty.
   */
  readonly hits?: HierarchyHit[];
  /**
   * Total number of hierarchy nodes which contains the instances matching the query based on the input.
   */
  readonly hitCount?: number;
  /**
   * If returned, this means that current results represent a partial result. Continuation token allows to get the next page of results. To get the next page of query results, send the same request with continuation token parameter in "x-ms-continuation" HTTP header.
   */
  readonly continuationToken?: string;
}

/**
 * The hierarchy node which contains the instances matching the query based on the input. May be empty or null.
 */
export interface HierarchyHit {
  /**
   * Name of the hierarchy node. May be empty, cannot be null.
   */
  readonly name?: string;
  /**
   * Total number of instances that belong to this node and it's subtrees matching the query.
   */
  readonly cumulativeInstanceCount?: number;
  /**
   * Child hierarchy nodes of this node. May be empty or null.
   */
  readonly hierarchyNodes?: SearchHierarchyNodesResponse;
}

/**
 * Partial list of time series types returned in a single request.
 */
export type GetTypesPage = PagedResponse & {
  /**
   * Partial list of time series types returned in a single request. Can be empty if server was unable to fill the page with more types in this request, or there is no more types when continuation token is null.
   */
  readonly types?: TimeSeriesType[];
};

/**
 * Time series type defines variables or formulas for doing computation on events associated with time series instances. Each time series instance is associated with exactly one type. A type can have one or more variables. For example, a time series instance might be of type Temperature Sensor, which consists of the variables avg temperature, min temperature, and max temperature.
 */
export interface TimeSeriesType {
  /**
   * Unique type identifier that is immutable. Can be null on create or update requests, and then server generates the ID. Not null on get and delete operations.
   */
  id?: string;
  /**
   * User-given unique name for the type. Mutable, not null.
   */
  name: string;
  /**
   * Description of the type. May be null.
   */
  description?: string;
  /**
   * Different variables associated with the type. Not empty, not null.
   */
  variables: { [propertyName: string]: VariableUnion };
}

/**
 * Request to perform a single operation on a batch of time series types. Exactly one of "get", "put" or "delete" must be set.
 */
export interface TypesBatchRequest {
  /**
   * Definition of what time series types to return.
   */
  get?: TypesRequestBatchGetOrDelete;
  /**
   * Definition of what time series types to update or create.
   */
  put?: TimeSeriesType[];
  /**
   * Definition of what time series types to delete.
   */
  delete?: TypesRequestBatchGetOrDelete;
}

/**
 * Request to get or delete time series types by IDs or type names. Exactly one of "typeIds" or "names" must be set.
 */
export interface TypesRequestBatchGetOrDelete {
  /**
   * List of IDs of time series types to return or delete.
   */
  typeIds?: string[];
  /**
   * List of names of time series types to return or delete.
   */
  names?: string[];
}

/**
 * Response of a single operation on a batch of time series types. Exactly one of "get", "put" or "delete" will be set.
 */
export interface TypesBatchResponse {
  /**
   * List of types or error objects corresponding by position to the "get" array in the request. Type object is set when operation is successful and error object is set when operation is unsuccessful.
   */
  readonly get?: TimeSeriesTypeOrError[];
  /**
   * List of types or error objects corresponding by position to the "put" array in the request. Type object is set when operation is successful and error object is set when operation is unsuccessful.
   */
  readonly put?: TimeSeriesTypeOrError[];
  /**
   * List of error objects corresponding by position to the "delete" array in the request - null when the operation is successful.
   */
  readonly delete?: TsiErrorBody[];
}

/**
 * Result of a batch operation on a particular time series type. Type object is set when operation is successful and error object is set when operation is unsuccessful.
 */
export interface TimeSeriesTypeOrError {
  /**
   * Time series type object - set when the operation is successful.
   */
  readonly timeSeriesType?: TimeSeriesType;
  /**
   * Error object - set when the operation is unsuccessful.
   */
  readonly error?: TsiErrorBody;
}

/**
 * Partial list of time series hierarchies returned in a single request.
 */
export type GetHierarchiesPage = PagedResponse & {
  /**
   * Partial list of time series hierarchies returned in a single request. Can be empty if server was unable to fill the page in this request, or there is no more objects when continuation token is null.
   */
  readonly hierarchies?: TimeSeriesHierarchy[];
};

/**
 * Time series hierarchy organizes time series instances into a tree.
 */
export interface TimeSeriesHierarchy {
  /**
   * Unique hierarchy identifier that is a immutable GUID. Can be null while creating hierarchy objects and then server generates the id, not null on get and delete operations.
   */
  id?: string;
  /**
   * User-given unique name for the type. It is mutable and not null.
   */
  name: string;
  /**
   * Definition of how time series hierarchy tree levels are created.
   */
  source: TimeSeriesHierarchySource;
}

/**
 * Definition of how time series hierarchy tree levels are created.
 */
export interface TimeSeriesHierarchySource {
  /**
   * List of instance field names that must be set in all time series instances that belong to this hierarchy. The order of the instance fields defines the levels in the hierarchy.
   */
  instanceFieldNames?: string[];
}

/**
 * Request to perform a single operation on a batch of hierarchies. Exactly one of "get", "put" or "delete" must be set.
 */
export interface HierarchiesBatchRequest {
  /**
   * "get" should be set while fetching specific hierarchies either by IDs or names.
   */
  get?: HierarchiesRequestBatchGetDelete;
  /**
   * "put" should be set while creating or updating hierarchies.
   */
  put?: TimeSeriesHierarchy[];
  /**
   * "delete" should be set while fetching specific hierarchies either by IDs or names.
   */
  delete?: HierarchiesRequestBatchGetDelete;
}

/**
 * Request to get or delete multiple time series hierarchies. Exactly one of "hierarchyIds" or "names" must be set.
 */
export interface HierarchiesRequestBatchGetDelete {
  /**
   * List of hierarchy IDs.
   */
  hierarchyIds?: string[];
  /**
   * List of hierarchy names.
   */
  names?: string[];
}

/**
 * Response of a single operation on a batch of time series hierarchies. Only one of "get", "put" or "delete" will be set.
 */
export interface HierarchiesBatchResponse {
  /**
   * List of hierarchy or error objects corresponding by position to the "get" array in the request. Hierarchy object is set when operation is successful and error object is set when operation is unsuccessful.
   */
  readonly get?: TimeSeriesHierarchyOrError[];
  /**
   * List of hierarchy or error object corresponding by position to the "put" array in the request. Hierarchy object is set when operation is successful and error object is set when operation is unsuccessful.
   */
  readonly put?: TimeSeriesHierarchyOrError[];
  /**
   * List of error objects corresponding by position to the "delete" array in the request - null when the operation is successful.
   */
  readonly delete?: TsiErrorBody[];
}

/**
 * Result of a batch operation on a particular time series hierarchy. Hierarchy is set when operation is successful and error object is set when operation is unsuccessful.
 */
export interface TimeSeriesHierarchyOrError {
  /**
   * Time series hierarchy object - set when the operation is successful.
   */
  readonly hierarchy?: TimeSeriesHierarchy;
  /**
   * Error object - set when the operation is unsuccessful.
   */
  readonly error?: TsiErrorBody;
}

/**
 * The interpolation operation to be performed on the raw data points. Currently, only sampling of interpolated time series is allowed. Allowed aggregate function - eg: left($value). Can be null if no interpolation needs to be applied.
 */
export interface Interpolation {
  /**
   * The type of interpolation technique : "Linear" or "Step".
   */
  kind?: InterpolationKind;
  /**
   * The time range to the left and right of the search span to be used for Interpolation. This is helpful in scenarios where the data points are missing close to the start or end of the input search span. Can be null.
   */
  boundary?: InterpolationBoundary;
}

/**
 * The time range to the left and right of the search span to be used for Interpolation. This is helpful in scenarios where the data points are missing close to the start or end of the input search span. Can be null.
 */
export interface InterpolationBoundary {
  span?: string;
}

/**
 * Numeric variable represents a single continuous numeric signal that can be reconstructed using interpolation.
 */
export type NumericVariable = Variable & {
  /**
   * Value time series expression is used to represent the value of the signal that is going to be aggregated or interpolated. For example, temperature values from the event is represented like this: "$event.Temperature.Double".
   */
  value: Tsx;
  /**
   * The interpolation operation to be performed on the raw data points. Currently, only sampling of interpolated time series is allowed. Allowed aggregate function - eg: left($value). Can be null if no interpolation needs to be applied.
   */
  interpolation?: Interpolation;
  /**
   * Aggregation time series expression when kind is "numeric" is used to represent the aggregation that needs to be performed on the $value expression. This requires $value to be specified and can only use $value inside the aggregate functions. For example, aggregation for calculating minimum of the $value is written as: "min($value)".
   */
  aggregation: Tsx;
};

/**
 * Aggregate variable represents any aggregation calculation. Aggregate Variables does not support interpolation.
 */
export type AggregateVariable = Variable & {
  /**
   * Aggregation time series expression when kind is "aggregate" is used to represent the aggregation that needs to be performed directly using event properties like "$event.Temperature". For example, aggregation for calculating range of temperature changes can be written as: "max($event.Temperature)-min($event.Temperature)".
   */
  aggregation: Tsx;
};

/**
 * Categorical variable represents signal that needs to be analyzed based on the count or duration of occurrence of limited set of defined values.
 */
export type CategoricalVariable = Variable & {
  /**
   * Value time series expression is used to represent the value of the signal that is going to be categorized. It can evaluate to only 'String' or 'Long' type for categorical variables.
   */
  value: Tsx;
  /**
   * Categorical variable supports only 'step' interpolation.
   */
  interpolation?: Interpolation;
  categories?: TimeSeriesAggregateCategory[];
  /**
   * Represents the default category.
   */
  defaultCategory: TimeSeriesDefaultCategory;
};

/**
 * Category used in categorical variables. A category is defined by 'label' and the 'values' that are assigned this label.
 */
export interface TimeSeriesAggregateCategory {
  /**
   * The name of the category which will be used in constructing the output variable names.
   */
  label: string;
  /**
   * The list of values that a category maps to. Can be either a unique list of string or list of long.
   */
  values: any[];
}

/**
 * Represents the default category.
 */
export interface TimeSeriesDefaultCategory {
  /**
   * The name of the default category which will be assigned to the values that does not match any of those that are defined in the 'categories'.
   */
  label: string;
}

/**
 * Defines headers for query_getAvailability operation.
 */
export interface QueryGetAvailabilityHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for query_getEventSchema operation.
 */
export interface QueryGetEventSchemaHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for query_execute operation.
 */
export interface QueryExecuteHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for modelSettings_get operation.
 */
export interface ModelSettingsGetHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for modelSettings_update operation.
 */
export interface ModelSettingsUpdateHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for timeSeriesInstances_get operation.
 */
export interface TimeSeriesInstancesGetHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for timeSeriesInstances_executeBatch operation.
 */
export interface TimeSeriesInstancesExecuteBatchHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for timeSeriesInstances_suggest operation.
 */
export interface TimeSeriesInstancesSuggestHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for timeSeriesInstances_search operation.
 */
export interface TimeSeriesInstancesSearchHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for timeSeriesTypes_get operation.
 */
export interface TimeSeriesTypesGetHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for timeSeriesTypes_executeBatch operation.
 */
export interface TimeSeriesTypesExecuteBatchHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for timeSeriesHierarchies_get operation.
 */
export interface TimeSeriesHierarchiesGetHeaders {
  xMsRequestId?: string;
}

/**
 * Defines headers for timeSeriesHierarchies_executeBatch operation.
 */
export interface TimeSeriesHierarchiesExecuteBatchHeaders {
  xMsRequestId?: string;
}

/**
 * Defines values for PropertyTypes.
 */
export type PropertyTypes =
  | "Bool"
  | "DateTime"
  | "Double"
  | "String"
  | "TimeSpan"
  | "Long";
/**
 * Defines values for InstancesSortBy.
 */
export type InstancesSortBy = "Rank" | "DisplayName";
/**
 * Defines values for HierarchiesExpandKind.
 */
export type HierarchiesExpandKind = "UntilChildren" | "OneLevel";
/**
 * Defines values for HierarchiesSortBy.
 */
export type HierarchiesSortBy = "CumulativeInstanceCount" | "Name";
/**
 * Defines values for InterpolationKind.
 */
export type InterpolationKind = "Linear" | "Step";

/**
 * Optional parameters.
 */
export interface QueryGetAvailabilityOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * For the environments with warm store enabled, the query can be executed either on the 'WarmStore' or 'ColdStore'. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store.
   */
  storeType?: string;
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
}

/**
 * Contains response data for the getAvailability operation.
 */
export type QueryGetAvailabilityResponse = QueryGetAvailabilityHeaders &
  AvailabilityResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailabilityResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: QueryGetAvailabilityHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface QueryGetEventSchemaOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * For the environments with warm store enabled, the query can be executed either on the 'WarmStore' or 'ColdStore'. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store.
   */
  storeType?: string;
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
}

/**
 * Contains response data for the getEventSchema operation.
 */
export type QueryGetEventSchemaResponse = QueryGetEventSchemaHeaders &
  EventSchema & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSchema;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: QueryGetEventSchemaHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface QueryExecuteOptionalParams extends coreHttp.OperationOptions {
  /**
   * For the environments with warm store enabled, the query can be executed either on the 'WarmStore' or 'ColdStore'. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store.
   */
  storeType?: string;
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
  /**
   * Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the execute operation.
 */
export type QueryExecuteResponse = QueryExecuteHeaders &
  QueryResultPage & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResultPage;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: QueryExecuteHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ModelSettingsGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
}

/**
 * Contains response data for the get operation.
 */
export type ModelSettingsGetResponse = ModelSettingsGetHeaders &
  ModelSettingsResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ModelSettingsResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ModelSettingsGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface ModelSettingsUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
}

/**
 * Contains response data for the update operation.
 */
export type ModelSettingsUpdateResponse = ModelSettingsUpdateHeaders &
  ModelSettingsResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ModelSettingsResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ModelSettingsUpdateHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesInstancesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
  /**
   * Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the get operation.
 */
export type TimeSeriesInstancesGetResponse = TimeSeriesInstancesGetHeaders &
  GetInstancesPage & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GetInstancesPage;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TimeSeriesInstancesGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesInstancesExecuteBatchOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
}

/**
 * Contains response data for the executeBatch operation.
 */
export type TimeSeriesInstancesExecuteBatchResponse = TimeSeriesInstancesExecuteBatchHeaders &
  InstancesBatchResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InstancesBatchResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TimeSeriesInstancesExecuteBatchHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesInstancesSuggestOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
}

/**
 * Contains response data for the suggest operation.
 */
export type TimeSeriesInstancesSuggestResponse = TimeSeriesInstancesSuggestHeaders &
  InstancesSuggestResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InstancesSuggestResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TimeSeriesInstancesSuggestHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesInstancesSearchOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
  /**
   * Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the search operation.
 */
export type TimeSeriesInstancesSearchResponse = TimeSeriesInstancesSearchHeaders &
  SearchInstancesResponsePage & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SearchInstancesResponsePage;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TimeSeriesInstancesSearchHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesTypesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
  /**
   * Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the get operation.
 */
export type TimeSeriesTypesGetResponse = TimeSeriesTypesGetHeaders &
  GetTypesPage & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GetTypesPage;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TimeSeriesTypesGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesTypesExecuteBatchOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
}

/**
 * Contains response data for the executeBatch operation.
 */
export type TimeSeriesTypesExecuteBatchResponse = TimeSeriesTypesExecuteBatchHeaders &
  TypesBatchResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TypesBatchResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TimeSeriesTypesExecuteBatchHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesHierarchiesGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
  /**
   * Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results.
   */
  continuationToken?: string;
}

/**
 * Contains response data for the get operation.
 */
export type TimeSeriesHierarchiesGetResponse = TimeSeriesHierarchiesGetHeaders &
  GetHierarchiesPage & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GetHierarchiesPage;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TimeSeriesHierarchiesGetHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesHierarchiesExecuteBatchOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
   */
  clientRequestId?: string;
  /**
   * Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
   */
  clientSessionId?: string;
}

/**
 * Contains response data for the executeBatch operation.
 */
export type TimeSeriesHierarchiesExecuteBatchResponse = TimeSeriesHierarchiesExecuteBatchHeaders &
  HierarchiesBatchResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HierarchiesBatchResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TimeSeriesHierarchiesExecuteBatchHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface TimeSeriesInsightsClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
