/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TimeSeriesInsightsClient } from "../timeSeriesInsightsClient";
import {
  QueryGetAvailabilityOptionalParams,
  QueryGetAvailabilityResponse,
  GetEventSchemaRequest,
  QueryGetEventSchemaOptionalParams,
  QueryGetEventSchemaResponse,
  QueryRequest,
  QueryExecuteOptionalParams,
  QueryExecuteResponse
} from "../models";

/**
 * Class representing a Query.
 */
export class Query {
  private readonly client: TimeSeriesInsightsClient;

  /**
   * Initialize a new instance of the class Query class.
   * @param client Reference to the service client
   */
  constructor(client: TimeSeriesInsightsClient) {
    this.client = client;
  }

  /**
   * Returns the time range and distribution of event count over the event timestamp ($ts). This API can
   * be used to provide landing experience of navigating to the environment.
   * @param options The options parameters.
   */
  getAvailability(
    options?: QueryGetAvailabilityOptionalParams
  ): Promise<QueryGetAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getAvailabilityOperationSpec
    ) as Promise<QueryGetAvailabilityResponse>;
  }

  /**
   * Returns environment event schema for a given search span. Event schema is a set of property
   * definitions. Event schema may not be contain all persisted properties when there are too many
   * properties.
   * @param parameters Parameters to get event schema.
   * @param options The options parameters.
   */
  getEventSchema(
    parameters: GetEventSchemaRequest,
    options?: QueryGetEventSchemaOptionalParams
  ): Promise<QueryGetEventSchemaResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, options: operationOptions },
      getEventSchemaOperationSpec
    ) as Promise<QueryGetEventSchemaResponse>;
  }

  /**
   * Executes Time Series Query in pages of results - Get Events, Get Series or Aggregate Series.
   * @param parameters Time series query request body.
   * @param options The options parameters.
   */
  execute(
    parameters: QueryRequest,
    options?: QueryExecuteOptionalParams
  ): Promise<QueryExecuteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, options: operationOptions },
      executeOperationSpec
    ) as Promise<QueryExecuteResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path: "/availability",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailabilityResponse,
      headersMapper: Mappers.QueryGetAvailabilityHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.QueryGetAvailabilityHeaders
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.storeType],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [Parameters.clientRequestId, Parameters.clientSessionId],
  serializer
};
const getEventSchemaOperationSpec: coreHttp.OperationSpec = {
  path: "/eventSchema",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EventSchema,
      headersMapper: Mappers.QueryGetEventSchemaHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.QueryGetEventSchemaHeaders
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion, Parameters.storeType],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.clientSessionId,
    Parameters.contentType
  ],
  serializer
};
const executeOperationSpec: coreHttp.OperationSpec = {
  path: "/timeseries/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.QueryResultPage,
      headersMapper: Mappers.QueryExecuteHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.QueryExecuteHeaders
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion, Parameters.storeType],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.clientSessionId,
    Parameters.contentType,
    Parameters.continuationToken
  ],
  serializer
};
