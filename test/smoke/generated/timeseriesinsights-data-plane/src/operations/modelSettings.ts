/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TimeSeriesInsightsClient } from "../timeSeriesInsightsClient";
import {
  ModelSettingsGetOptionalParams,
  ModelSettingsGetResponse,
  UpdateModelSettingsRequest,
  ModelSettingsUpdateOptionalParams,
  ModelSettingsUpdateResponse
} from "../models";

/**
 * Class representing a ModelSettings.
 */
export class ModelSettings {
  private readonly client: TimeSeriesInsightsClient;

  /**
   * Initialize a new instance of the class ModelSettings class.
   * @param client Reference to the service client
   */
  constructor(client: TimeSeriesInsightsClient) {
    this.client = client;
  }

  /**
   * Returns the model settings which includes model display name, Time Series ID properties and default
   * type ID. Every pay-as-you-go environment has a model that is automatically created.
   * @param options The options parameters.
   */
  get(
    options?: ModelSettingsGetOptionalParams
  ): Promise<ModelSettingsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOperationSpec
    ) as Promise<ModelSettingsGetResponse>;
  }

  /**
   * Updates time series model settings - either the model name or default type ID.
   * @param parameters Model settings update request body.
   * @param options The options parameters.
   */
  update(
    parameters: UpdateModelSettingsRequest,
    options?: ModelSettingsUpdateOptionalParams
  ): Promise<ModelSettingsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, options: operationOptions },
      updateOperationSpec
    ) as Promise<ModelSettingsUpdateResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/timeseries/modelSettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModelSettingsResponse,
      headersMapper: Mappers.ModelSettingsGetHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.ModelSettingsGetHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [Parameters.clientRequestId, Parameters.clientSessionId],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/timeseries/modelSettings",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ModelSettingsResponse,
      headersMapper: Mappers.ModelSettingsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.ModelSettingsUpdateHeaders
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.clientSessionId,
    Parameters.contentType
  ],
  serializer
};
