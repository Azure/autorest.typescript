/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TimeSeriesInsightsClient } from "../timeSeriesInsightsClient";
import {
  TimeSeriesInstancesGetOptionalParams,
  TimeSeriesInstancesGetResponse,
  InstancesBatchRequest,
  TimeSeriesInstancesExecuteBatchOptionalParams,
  TimeSeriesInstancesExecuteBatchResponse,
  InstancesSuggestRequest,
  TimeSeriesInstancesSuggestOptionalParams,
  TimeSeriesInstancesSuggestResponse,
  SearchInstancesRequest,
  TimeSeriesInstancesSearchOptionalParams,
  TimeSeriesInstancesSearchResponse
} from "../models";

/**
 * Class representing a TimeSeriesInstances.
 */
export class TimeSeriesInstances {
  private readonly client: TimeSeriesInsightsClient;

  /**
   * Initialize a new instance of the class TimeSeriesInstances class.
   * @param client Reference to the service client
   */
  constructor(client: TimeSeriesInsightsClient) {
    this.client = client;
  }

  /**
   * Gets time series instances in pages.
   * @param options The options parameters.
   */
  get(
    options?: TimeSeriesInstancesGetOptionalParams
  ): Promise<TimeSeriesInstancesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOperationSpec
    ) as Promise<TimeSeriesInstancesGetResponse>;
  }

  /**
   * Executes a batch get, create, update, delete operation on multiple time series instances.
   * @param parameters Time series instances suggest request body.
   * @param options The options parameters.
   */
  executeBatch(
    parameters: InstancesBatchRequest,
    options?: TimeSeriesInstancesExecuteBatchOptionalParams
  ): Promise<TimeSeriesInstancesExecuteBatchResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, options: operationOptions },
      executeBatchOperationSpec
    ) as Promise<TimeSeriesInstancesExecuteBatchResponse>;
  }

  /**
   * Suggests keywords based on time series instance attributes to be later used in Search Instances.
   * @param parameters Time series instances suggest request body.
   * @param options The options parameters.
   */
  suggest(
    parameters: InstancesSuggestRequest,
    options?: TimeSeriesInstancesSuggestOptionalParams
  ): Promise<TimeSeriesInstancesSuggestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, options: operationOptions },
      suggestOperationSpec
    ) as Promise<TimeSeriesInstancesSuggestResponse>;
  }

  /**
   * Partial list of hits on search for time series instances based on instance attributes.
   * @param parameters Time series instances search request body.
   * @param options The options parameters.
   */
  search(
    parameters: SearchInstancesRequest,
    options?: TimeSeriesInstancesSearchOptionalParams
  ): Promise<TimeSeriesInstancesSearchResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { parameters, options: operationOptions },
      searchOperationSpec
    ) as Promise<TimeSeriesInstancesSearchResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/timeseries/instances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetInstancesPage,
      headersMapper: Mappers.TimeSeriesInstancesGetHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.TimeSeriesInstancesGetHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.clientSessionId,
    Parameters.continuationToken
  ],
  serializer
};
const executeBatchOperationSpec: coreHttp.OperationSpec = {
  path: "/timeseries/instances/$batch",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InstancesBatchResponse,
      headersMapper: Mappers.TimeSeriesInstancesExecuteBatchHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.TimeSeriesInstancesExecuteBatchHeaders
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.clientSessionId,
    Parameters.contentType
  ],
  serializer
};
const suggestOperationSpec: coreHttp.OperationSpec = {
  path: "/timeseries/instances/suggest",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InstancesSuggestResponse,
      headersMapper: Mappers.TimeSeriesInstancesSuggestHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.TimeSeriesInstancesSuggestHeaders
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.clientSessionId,
    Parameters.contentType
  ],
  serializer
};
const searchOperationSpec: coreHttp.OperationSpec = {
  path: "/timeseries/instances/search",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SearchInstancesResponsePage,
      headersMapper: Mappers.TimeSeriesInstancesSearchHeaders
    },
    default: {
      bodyMapper: Mappers.TsiError,
      headersMapper: Mappers.TimeSeriesInstancesSearchHeaders
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.environmentFqdn],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.clientSessionId,
    Parameters.contentType,
    Parameters.continuationToken
  ],
  serializer
};
