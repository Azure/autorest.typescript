/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateHub } from "../azureMigrateHub";
import {
  EventsEnumerateEventsOptionalParams,
  EventsEnumerateEventsResponse,
  EventsGetEventResponse
} from "../models";

/**
 * Class representing a Events.
 */
export class Events {
  private readonly client: AzureMigrateHub;

  /**
   * Initialize a new instance of the class Events class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateHub) {
    this.client = client;
  }

  /**
   * Gets a list of events in the migrate project.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  enumerateEvents(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: EventsEnumerateEventsOptionalParams
  ): Promise<EventsEnumerateEventsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options: operationOptions },
      enumerateEventsOperationSpec
    ) as Promise<EventsEnumerateEventsResponse>;
  }

  /**
   * Gets an event in the migrate project.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param eventName Unique name of an event within a migrate project.
   * @param options The options parameters.
   */
  getEvent(
    resourceGroupName: string,
    migrateProjectName: string,
    eventName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EventsGetEventResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        eventName,
        options: operationOptions
      },
      getEventOperationSpec
    ) as Promise<EventsGetEventResponse>;
  }

  /**
   * Delete the migrate event. Deleting non-existent migrate event is a no-operation.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param eventName Unique name of an event within a migrate project.
   * @param options The options parameters.
   */
  deleteEvent(
    resourceGroupName: string,
    migrateProjectName: string,
    eventName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        eventName,
        options: operationOptions
      },
      deleteEventOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const enumerateEventsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/migrateEvents",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const getEventOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/migrateEvents/{eventName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateEvent
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.eventName
  ],
  serializer
};
const deleteEventOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/migrateEvents/{eventName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.eventName
  ],
  serializer
};
