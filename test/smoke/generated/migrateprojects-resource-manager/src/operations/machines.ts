/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateHub } from "../azureMigrateHub";
import {
  MachinesEnumerateMachinesOptionalParams,
  MachinesEnumerateMachinesResponse,
  MachinesGetMachineResponse
} from "../models";

/**
 * Class representing a Machines.
 */
export class Machines {
  private readonly client: AzureMigrateHub;

  /**
   * Initialize a new instance of the class Machines class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateHub) {
    this.client = client;
  }

  /**
   * Gets a list of machines in the migrate project.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  enumerateMachines(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: MachinesEnumerateMachinesOptionalParams
  ): Promise<MachinesEnumerateMachinesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options: operationOptions },
      enumerateMachinesOperationSpec
    ) as Promise<MachinesEnumerateMachinesResponse>;
  }

  /**
   * Gets a machine in the migrate project.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param machineName Unique name of a machine in Azure migration hub.
   * @param options The options parameters.
   */
  getMachine(
    resourceGroupName: string,
    migrateProjectName: string,
    machineName: string,
    options?: coreHttp.OperationOptions
  ): Promise<MachinesGetMachineResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        machineName,
        options: operationOptions
      },
      getMachineOperationSpec
    ) as Promise<MachinesGetMachineResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const enumerateMachinesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/machines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MachineCollection
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName
  ],
  serializer
};
const getMachineOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/machines/{machineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Machine
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.machineName
  ],
  serializer
};
