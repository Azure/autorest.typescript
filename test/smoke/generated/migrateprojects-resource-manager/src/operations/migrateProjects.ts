/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateHub } from "../azureMigrateHub";
import {
  MigrateProjectsGetMigrateProjectResponse,
  MigrateProject,
  MigrateProjectsPutMigrateProjectResponse,
  MigrateProjectsPatchMigrateProjectResponse,
  RegisterToolInput,
  MigrateProjectsRegisterToolResponse,
  RefreshSummaryInput,
  MigrateProjectsRefreshMigrateProjectSummaryResponse
} from "../models";

/**
 * Class representing a MigrateProjects.
 */
export class MigrateProjects {
  private readonly client: AzureMigrateHub;

  /**
   * Initialize a new instance of the class MigrateProjects class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateHub) {
    this.client = client;
  }

  /**
   * Method to get a migrate project.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  getMigrateProject(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: coreHttp.OperationOptions
  ): Promise<MigrateProjectsGetMigrateProjectResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options: operationOptions },
      getMigrateProjectOperationSpec
    ) as Promise<MigrateProjectsGetMigrateProjectResponse>;
  }

  /**
   * Method to create or update a migrate project.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param body Body with migrate project details.
   * @param options The options parameters.
   */
  putMigrateProject(
    resourceGroupName: string,
    migrateProjectName: string,
    body: MigrateProject,
    options?: coreHttp.OperationOptions
  ): Promise<MigrateProjectsPutMigrateProjectResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        body,
        options: operationOptions
      },
      putMigrateProjectOperationSpec
    ) as Promise<MigrateProjectsPutMigrateProjectResponse>;
  }

  /**
   * Update a migrate project with specified name. Supports partial updates, for example only tags can be
   * provided.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param body Body with migrate project details.
   * @param options The options parameters.
   */
  patchMigrateProject(
    resourceGroupName: string,
    migrateProjectName: string,
    body: MigrateProject,
    options?: coreHttp.OperationOptions
  ): Promise<MigrateProjectsPatchMigrateProjectResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        body,
        options: operationOptions
      },
      patchMigrateProjectOperationSpec
    ) as Promise<MigrateProjectsPatchMigrateProjectResponse>;
  }

  /**
   * Delete the migrate project. Deleting non-existent project is a no-operation.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  deleteMigrateProject(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options: operationOptions },
      deleteMigrateProjectOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Registers a tool with the migrate project.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param input Input containing the name of the tool to be registered.
   * @param options The options parameters.
   */
  registerTool(
    resourceGroupName: string,
    migrateProjectName: string,
    input: RegisterToolInput,
    options?: coreHttp.OperationOptions
  ): Promise<MigrateProjectsRegisterToolResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        input,
        options: operationOptions
      },
      registerToolOperationSpec
    ) as Promise<MigrateProjectsRegisterToolResponse>;
  }

  /**
   * Refresh the summary of the migrate project.
   * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param input The goal input which needs to be refreshed.
   * @param options The options parameters.
   */
  refreshMigrateProjectSummary(
    resourceGroupName: string,
    migrateProjectName: string,
    input: RefreshSummaryInput,
    options?: coreHttp.OperationOptions
  ): Promise<MigrateProjectsRefreshMigrateProjectSummaryResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        input,
        options: operationOptions
      },
      refreshMigrateProjectSummaryOperationSpec
    ) as Promise<MigrateProjectsRefreshMigrateProjectSummaryResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getMigrateProjectOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateProject
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName
  ],
  serializer
};
const putMigrateProjectOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateProject
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName
  ],
  headerParameters: [Parameters.acceptLanguage, Parameters.contentType],
  serializer
};
const patchMigrateProjectOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateProject
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName
  ],
  headerParameters: [Parameters.acceptLanguage, Parameters.contentType],
  serializer
};
const deleteMigrateProjectOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName
  ],
  headerParameters: [Parameters.acceptLanguage],
  serializer
};
const registerToolOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/registerTool",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationResult
    }
  },
  requestBody: Parameters.input,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName
  ],
  headerParameters: [Parameters.acceptLanguage, Parameters.contentType],
  serializer
};
const refreshMigrateProjectSummaryOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/refreshSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RefreshSummaryResult
    }
  },
  requestBody: Parameters.input1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
