/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type MigrateEventPropertiesUnion =
  | MigrateEventProperties
  | MachineMigrateEventProperties
  | DatabaseMigrateEventProperties;
export type ProjectSummaryUnion =
  | ProjectSummary
  | ServersProjectSummary
  | DatabaseProjectSummary;
export type SolutionSummaryUnion =
  | SolutionSummary
  | ServersSolutionSummary
  | DatabasesSolutionSummary;

/**
 * Collection of database instances.
 */
export interface DatabaseInstanceCollection {
  /**
   * Gets or sets the database instances.
   */
  value?: DatabaseInstance[];
  /**
   * Gets or sets the value of nextLink.
   */
  nextLink?: string;
}

/**
 * DatabaseInstance REST resource.
 */
export interface DatabaseInstance {
  /**
   * Gets or sets the relative URL to get to this REST resource.
   */
  id?: string;
  /**
   * Gets or sets the name of this REST resource.
   */
  name?: string;
  /**
   * Gets the type of this REST resource.
   */
  readonly type?: string;
  /**
   * Gets or sets the properties of the machine.
   */
  properties?: DatabaseInstanceProperties;
}

/**
 * Properties of the database instance resource.
 */
export interface DatabaseInstanceProperties {
  /**
   * Gets or sets the assessment details of the database instance published by various sources.
   */
  discoveryData?: DatabaseInstanceDiscoveryDetails[];
  /**
   * Gets or sets the database instances summary per solution. The key of dictionary is the solution name and value is the corresponding database instance summary object.
   */
  summary?: { [propertyName: string]: DatabaseInstanceSummary };
  /**
   * Gets or sets the time of the last modification of the database.
   */
  lastUpdatedTime?: Date;
}

/**
 * Discovery properties that can be shared by various publishers.
 */
export interface DatabaseInstanceDiscoveryDetails {
  /**
   * Gets or sets the time of the last modification of the database instance details.
   */
  lastUpdatedTime?: Date;
  /**
   * Gets or sets the database instance Id.
   */
  instanceId?: string;
  /**
   * Gets or sets the time the message was enqueued.
   */
  enqueueTime?: string;
  /**
   * Gets or sets the name of the solution that sent the data.
   */
  solutionName?: string;
  /**
   * Gets or sets the database instance name.
   */
  instanceName?: string;
  /**
   * Gets or sets the database instance version.
   */
  instanceVersion?: string;
  /**
   * Gets or sets the database instance type.
   */
  instanceType?: string;
  /**
   * Gets or sets the host name of the database server.
   */
  hostName?: string;
  /**
   * Gets or sets the IP addresses of the database server. IP addresses could be IP V4 or IP V6.
   */
  ipAddress?: string;
  /**
   * Gets or sets the port number of the database server.
   */
  portNumber?: number;
  /**
   * Gets or sets the extended properties of the database server.
   */
  extendedInfo?: { [propertyName: string]: string };
}

/**
 * Class representing the database instance summary object.
 */
export interface DatabaseInstanceSummary {
  /**
   * Gets or sets the count of databases assessed.
   */
  databasesAssessedCount?: number;
  /**
   * Gets or sets the count of databases ready for migration.
   */
  migrationReadyCount?: number;
}

/**
 * Collection of databases.
 */
export interface DatabaseCollection {
  /**
   * Gets or sets the databases.
   */
  value?: Database[];
  /**
   * Gets or sets the value of nextLink.
   */
  nextLink?: string;
}

/**
 * Database REST resource.
 */
export interface Database {
  /**
   * Gets or sets the relative URL to get to this REST resource.
   */
  id?: string;
  /**
   * Gets or sets the name of this REST resource.
   */
  name?: string;
  /**
   * Gets the type of this REST resource.
   */
  readonly type?: string;
  /**
   * Gets or sets the properties of the database.
   */
  properties?: DatabaseProperties;
}

/**
 * Properties of the database resource.
 */
export interface DatabaseProperties {
  /**
   * Gets or sets the assessment details of the database published by various sources.
   */
  assessmentData?: DatabaseAssessmentDetails[];
  /**
   * Gets or sets the time of the last modification of the database.
   */
  lastUpdatedTime?: Date;
}

/**
 * Assessment properties that can be shared by various publishers.
 */
export interface DatabaseAssessmentDetails {
  /**
   * Gets or sets the database assessment scope/Id.
   */
  assessmentId?: string;
  /**
   * Gets or sets the number of blocking changes found.
   */
  migrationBlockersCount?: number;
  /**
   * Gets or sets the number of breaking changes found.
   */
  breakingChangesCount?: number;
  /**
   * Gets or sets a value indicating whether the database is ready for migration.
   */
  isReadyForMigration?: boolean;
  /**
   * Gets or sets the assessed target database type.
   */
  assessmentTargetType?: string;
  /**
   * Gets or sets the time when the database was last assessed.
   */
  lastAssessedTime?: Date;
  /**
   * Gets or sets the compatibility level of the database.
   */
  compatibilityLevel?: string;
  /**
   * Gets or sets the database size.
   */
  databaseSizeInMB?: string;
  /**
   * Gets or sets the time of the last modification of the database details.
   */
  lastUpdatedTime?: Date;
  /**
   * Gets or sets the time the message was enqueued.
   */
  enqueueTime?: string;
  /**
   * Gets or sets the name of the solution that sent the data.
   */
  solutionName?: string;
  /**
   * Gets or sets the database server instance Id.
   */
  instanceId?: string;
  /**
   * Gets or sets the database name.
   */
  databaseName?: string;
  /**
   * Gets or sets the extended properties of the database.
   */
  extendedInfo?: { [propertyName: string]: string };
}

/**
 * Collection of events.
 */
export interface EventCollection {
  /**
   * Gets or sets the machines.
   */
  value?: MigrateEvent[];
  /**
   * Gets or sets the value of nextLink.
   */
  nextLink?: string;
}

/**
 * MigrateEvent REST resource.
 */
export interface MigrateEvent {
  /**
   * Gets or sets the relative URL to get to this REST resource.
   */
  id?: string;
  /**
   * Gets or sets the name of this REST resource.
   */
  name?: string;
  /**
   * Gets the type of this REST resource.
   */
  readonly type?: string;
  /**
   * Gets or sets the properties of the event.
   */
  properties?: MigrateEventPropertiesUnion;
}

/**
 * Properties of the error resource.
 */
export interface MigrateEventProperties {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  instanceType: "Servers" | "Databases";
  /**
   * Gets or sets the error code.
   */
  errorCode?: string;
  /**
   * Gets or sets the error message.
   */
  errorMessage?: string;
  /**
   * Gets or sets the recommendation for the error.
   */
  recommendation?: string;
  /**
   * Gets or sets the possible causes for the error.
   */
  possibleCauses?: string;
  /**
   * Gets or sets the solution for which the error is being reported.
   */
  solution?: string;
  /**
   * Gets or sets the client request Id of the payload for which the event is being reported.
   */
  clientRequestId?: string;
}

/**
 * Collection of machines.
 */
export interface MachineCollection {
  /**
   * Gets or sets the machines.
   */
  value?: Machine[];
  /**
   * Gets or sets the value of nextLink.
   */
  nextLink?: string;
}

/**
 * Machine REST resource.
 */
export interface Machine {
  /**
   * Gets or sets the relative URL to get to this REST resource.
   */
  id?: string;
  /**
   * Gets or sets the name of this REST resource.
   */
  name?: string;
  /**
   * Gets the type of this REST resource.
   */
  readonly type?: string;
  /**
   * Gets or sets the properties of the machine.
   */
  properties?: MachineProperties;
}

/**
 * Properties of the machine resource.
 */
export interface MachineProperties {
  /**
   * Gets or sets the discovery details of the machine published by various sources.
   */
  discoveryData?: DiscoveryDetails[];
  /**
   * Gets or sets the assessment details of the machine published by various sources.
   */
  assessmentData?: AssessmentDetails[];
  /**
   * Gets or sets the migration details of the machine published by various sources.
   */
  migrationData?: MigrationDetails[];
  /**
   * Gets or sets the time of the last modification of the machine.
   */
  lastUpdatedTime?: Date;
}

/**
 * Discovery properties that can be published by various ISVs.
 */
export interface DiscoveryDetails {
  /**
   * Gets or sets the OS type.
   */
  osType?: string;
  /**
   * Gets or sets the OS name.
   */
  osName?: string;
  /**
   * Gets or sets the OS version.
   */
  osVersion?: string;
  /**
   * Gets or sets the time the message was enqueued.
   */
  enqueueTime?: string;
  /**
   * Gets or sets the name of the solution that sent the data.
   */
  solutionName?: string;
  /**
   * Gets or sets the unique identifier of the machine.
   */
  machineId?: string;
  /**
   * Gets or sets the unique identifier of the virtual machine manager(vCenter/VMM).
   */
  machineManagerId?: string;
  /**
   * Gets or sets the fabric type.
   */
  fabricType?: string;
  /**
   * Gets or sets the time of the last modification of the machine details.
   */
  lastUpdatedTime?: Date;
  /**
   * Gets or sets the name of the machine.
   */
  machineName?: string;
  /**
   * Gets or sets the list of IP addresses of the machine. IP addresses could be IP V4 or IP V6.
   */
  ipAddresses?: string[];
  /**
   * Gets or sets the FQDN of the machine.
   */
  fqdn?: string;
  /**
   * Gets or sets the BIOS ID of the machine.
   */
  biosId?: string;
  /**
   * Gets or sets the list of MAC addresses of the machine.
   */
  macAddresses?: string[];
  /**
   * Gets or sets the ISV specific extended information.
   */
  extendedInfo?: { [propertyName: string]: string };
}

/**
 * Assessment properties that can be shared by various publishers.
 */
export interface AssessmentDetails {
  /**
   * Gets or sets the id of the assessment done on the machine.
   */
  assessmentId?: string;
  /**
   * Gets or sets the target VM size.
   */
  targetVMSize?: string;
  /**
   * Gets or sets the target VM location.
   */
  targetVMLocation?: string;
  /**
   * Gets or sets the target storage type.
   */
  targetStorageType?: { [propertyName: string]: string };
  /**
   * Gets or sets the time the message was enqueued.
   */
  enqueueTime?: string;
  /**
   * Gets or sets the name of the solution that sent the data.
   */
  solutionName?: string;
  /**
   * Gets or sets the unique identifier of the machine.
   */
  machineId?: string;
  /**
   * Gets or sets the unique identifier of the virtual machine manager(vCenter/VMM).
   */
  machineManagerId?: string;
  /**
   * Gets or sets the fabric type.
   */
  fabricType?: string;
  /**
   * Gets or sets the time of the last modification of the machine details.
   */
  lastUpdatedTime?: Date;
  /**
   * Gets or sets the name of the machine.
   */
  machineName?: string;
  /**
   * Gets or sets the list of IP addresses of the machine. IP addresses could be IP V4 or IP V6.
   */
  ipAddresses?: string[];
  /**
   * Gets or sets the FQDN of the machine.
   */
  fqdn?: string;
  /**
   * Gets or sets the BIOS ID of the machine.
   */
  biosId?: string;
  /**
   * Gets or sets the list of MAC addresses of the machine.
   */
  macAddresses?: string[];
  /**
   * Gets or sets the ISV specific extended information.
   */
  extendedInfo?: { [propertyName: string]: string };
}

/**
 * Migration properties that can be shared by various publishers.
 */
export interface MigrationDetails {
  /**
   * Gets or sets the phase of migration of the machine.
   */
  migrationPhase?: string;
  /**
   * Gets or sets a value indicating whether migration was tested on the machine.
   */
  migrationTested?: boolean;
  /**
   * Gets or sets the progress percentage of migration on the machine.
   */
  replicationProgressPercentage?: number;
  /**
   * Gets or sets the ARM id the migrated VM.
   */
  targetVMArmId?: string;
  /**
   * Gets or sets the time the message was enqueued.
   */
  enqueueTime?: string;
  /**
   * Gets or sets the name of the solution that sent the data.
   */
  solutionName?: string;
  /**
   * Gets or sets the unique identifier of the machine.
   */
  machineId?: string;
  /**
   * Gets or sets the unique identifier of the virtual machine manager(vCenter/VMM).
   */
  machineManagerId?: string;
  /**
   * Gets or sets the fabric type.
   */
  fabricType?: string;
  /**
   * Gets or sets the time of the last modification of the machine details.
   */
  lastUpdatedTime?: Date;
  /**
   * Gets or sets the name of the machine.
   */
  machineName?: string;
  /**
   * Gets or sets the list of IP addresses of the machine. IP addresses could be IP V4 or IP V6.
   */
  ipAddresses?: string[];
  /**
   * Gets or sets the FQDN of the machine.
   */
  fqdn?: string;
  /**
   * Gets or sets the BIOS ID of the machine.
   */
  biosId?: string;
  /**
   * Gets or sets the list of MAC addresses of the machine.
   */
  macAddresses?: string[];
  /**
   * Gets or sets the ISV specific extended information.
   */
  extendedInfo?: { [propertyName: string]: string };
}

/**
 * Migrate Project REST Resource.
 */
export interface MigrateProject {
  /**
   * Gets or sets the eTag for concurrency control.
   */
  eTag?: string;
  /**
   * Gets or sets the Azure location in which migrate project is created.
   */
  location?: string;
  /**
   * Gets or sets the nested properties.
   */
  properties?: MigrateProjectProperties;
  /**
   * Gets the relative URL to get this migrate project.
   */
  readonly id?: string;
  /**
   * Gets the name of the migrate project.
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.Migrate/MigrateProject.
   */
  readonly type?: string;
  /**
   * Gets or sets the tags.
   */
  tags?: MigrateProjectTags;
}

/**
 * Class for migrate project properties.
 */
export interface MigrateProjectProperties {
  /**
   * Gets or sets the list of tools registered with the migrate project.
   */
  registeredTools?: MigrateProjectPropertiesRegisteredToolsItem[];
  /**
   * Gets the summary of the migrate project.
   */
  readonly summary?: { [propertyName: string]: ProjectSummaryUnion };
  /**
   * Gets the last time the project summary was refreshed.
   */
  readonly lastSummaryRefreshedTime?: Date;
  /**
   * Gets the refresh summary state.
   */
  readonly refreshSummaryState?: MigrateProjectPropertiesRefreshSummaryState;
  /**
   * Provisioning state of the migrate project.
   */
  provisioningState?: ProvisioningState;
}

/**
 * The project summary class.
 */
export interface ProjectSummary {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  instanceType: "Servers" | "Databases";
  /**
   * Gets or sets the state of refresh summary.
   */
  refreshSummaryState?: ProjectSummaryRefreshSummaryState;
  /**
   * Gets or sets the time when summary was last refreshed.
   */
  lastSummaryRefreshedTime?: Date;
  /**
   * Gets or sets the extended summary.
   */
  extendedSummary?: { [propertyName: string]: string };
}

/**
 * Gets or sets the tags.
 */
export interface MigrateProjectTags {
  additionalProperties?: string;
}

/**
 * Class representing the register tool input.
 */
export interface RegisterToolInput {
  /**
   * Gets or sets the tool to be registered.
   */
  tool?: RegisterToolInputTool;
}

/**
 * Class representing the registration status of a tool with the migrate project.
 */
export interface RegistrationResult {
  /**
   * Gets or sets a value indicating whether the tool is registered or not.
   */
  isRegistered?: boolean;
}

/**
 * Class representing the refresh summary input.
 */
export interface RefreshSummaryInput {
  /**
   * Gets or sets the goal for which summary needs to be refreshed.
   */
  goal?: RefreshSummaryInputGoal;
}

/**
 * Class representing the refresh summary status of the migrate project.
 */
export interface RefreshSummaryResult {
  /**
   * Gets or sets a value indicating whether the migrate project summary is refreshed.
   */
  isRefreshed?: boolean;
}

/**
 * Solution REST Resource.
 */
export interface Solution {
  /**
   * Gets the relative URL to get to this REST resource.
   */
  readonly id?: string;
  /**
   * Gets the name of this REST resource.
   */
  readonly name?: string;
  /**
   * Gets the type of this REST resource.
   */
  readonly type?: string;
  /**
   * Gets or sets the ETAG for optimistic concurrency control.
   */
  etag?: string;
  /**
   * Gets or sets the properties of the solution.
   */
  properties?: SolutionProperties;
}

/**
 * Class for solution properties.
 */
export interface SolutionProperties {
  /**
   * Gets or sets the tool being used in the solution.
   */
  tool?: SolutionPropertiesTool;
  /**
   * Gets or sets the purpose of the solution.
   */
  purpose?: SolutionPropertiesPurpose;
  /**
   * Gets or sets the goal of the solution.
   */
  goal?: SolutionPropertiesGoal;
  /**
   * Gets or sets the current status of the solution.
   */
  status?: SolutionPropertiesStatus;
  /**
   * Gets or sets the cleanup state of the solution.
   */
  cleanupState?: SolutionPropertiesCleanupState;
  /**
   * Gets or sets the summary of the solution.
   */
  summary?: SolutionSummaryUnion;
  /**
   * Gets or sets the details of the solution.
   */
  details?: SolutionDetails;
}

/**
 * The solution summary class.
 */
export interface SolutionSummary {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  instanceType: "Servers" | "Databases";
}

/**
 * Class representing the details of the solution.
 */
export interface SolutionDetails {
  /**
   * Gets or sets the count of groups reported by the solution.
   */
  groupCount?: number;
  /**
   * Gets or sets the count of assessments reported by the solution.
   */
  assessmentCount?: number;
  /**
   * Gets or sets the extended details reported by the solution.
   */
  extendedDetails?: { [propertyName: string]: string };
}

/**
 * Collection of solutions.
 */
export interface SolutionsCollection {
  /**
   * Gets or sets the list of solutions.
   */
  value?: Solution[];
  /**
   * Gets or sets the value of next link.
   */
  nextLink?: string;
}

/**
 * Class representing the config for the solution in the migrate project.
 */
export interface SolutionConfig {
  /**
   * Gets or sets the publisher sas uri for the solution.
   */
  publisherSasUri?: string;
}

/**
 * List of API operations.
 */
export interface OperationResultList {
  /**
   * List of operations.
   */
  value?: Operation[];
}

/**
 * A REST API operation supported by the provider.
 */
export interface Operation {
  /**
   * Name of the operation.
   */
  readonly name?: string;
  /**
   * Displayable properties of the operation.
   */
  readonly display?: OperationDisplay;
  /**
   * Origin of the operation.
   */
  readonly origin?: string;
}

/**
 * Displayable properties of the operation.
 */
export interface OperationDisplay {
  /**
   * Provider of the operation.
   */
  readonly provider?: string;
  /**
   * Resource operated on by the operation.
   */
  readonly resource?: string;
  /**
   * Operation Type.
   */
  readonly operation?: string;
  /**
   * Description of the operation.
   */
  readonly description?: string;
}

export interface ODataQueryOptions1 {
  readonly filter?: FilterQueryOption;
}

export interface FilterQueryOption {
  readonly context?: ODataQueryContext;
  /**
   * Any object
   */
  validator?: any;
  readonly filterClause?: FilterClause;
  readonly rawValue?: string;
}

export interface ODataQueryContext {
  readonly defaultQuerySettings?: DefaultQuerySettings;
  readonly model?: IEdmModel;
  readonly elementType?: IEdmType;
  readonly navigationSource?: IEdmNavigationSource;
  readonly elementClrType?: string;
  readonly path?: ODataPath;
  /**
   * Any object
   */
  readonly requestContainer?: any;
}

export interface DefaultQuerySettings {
  enableExpand?: boolean;
  enableSelect?: boolean;
  enableCount?: boolean;
  enableOrderBy?: boolean;
  enableFilter?: boolean;
  maxTop?: number;
}

export interface IEdmModel {
  readonly schemaElements?: IEdmSchemaElement[];
  readonly vocabularyAnnotations?: IEdmVocabularyAnnotation[];
  readonly referencedModels?: IEdmModel[];
  readonly declaredNamespaces?: string[];
  /**
   * Any object
   */
  readonly directValueAnnotationsManager?: any;
  readonly entityContainer?: IEdmEntityContainer;
}

export interface IEdmSchemaElement {
  readonly schemaElementKind?: IEdmSchemaElementKind;
  readonly namespace?: string;
  readonly name?: string;
}

export interface IEdmVocabularyAnnotation {
  readonly qualifier?: string;
  readonly term?: IEdmTerm;
  /**
   * Any object
   */
  readonly target?: any;
  readonly value?: IEdmExpression;
}

export interface IEdmTerm {
  readonly type?: IEdmTypeReference;
  readonly appliesTo?: string;
  readonly defaultValue?: string;
  readonly schemaElementKind?: IEdmTermSchemaElementKind;
  readonly namespace?: string;
  readonly name?: string;
}

export interface IEdmTypeReference {
  readonly isNullable?: boolean;
  readonly definition?: IEdmType;
}

export interface IEdmType {
  readonly typeKind?: IEdmTypeKind;
}

export interface IEdmExpression {
  readonly expressionKind?: IEdmExpressionKind;
}

export interface IEdmEntityContainer {
  readonly elements?: IEdmEntityContainerElement[];
  readonly schemaElementKind?: IEdmEntityContainerSchemaElementKind;
  readonly namespace?: string;
  readonly name?: string;
}

export interface IEdmEntityContainerElement {
  readonly containerElementKind?: IEdmEntityContainerElementKind;
  readonly container?: IEdmEntityContainer;
  readonly name?: string;
}

export interface IEdmNavigationSource {
  readonly navigationPropertyBindings?: IEdmNavigationPropertyBinding[];
  readonly path?: IEdmPathExpression;
  readonly type?: IEdmType;
  readonly name?: string;
}

export interface IEdmNavigationPropertyBinding {
  readonly navigationProperty?: IEdmNavigationProperty;
  readonly target?: IEdmNavigationSource;
  readonly path?: IEdmPathExpression;
}

export interface IEdmNavigationProperty {
  readonly partner?: IEdmNavigationProperty;
  readonly onDelete?: IEdmNavigationPropertyOnDelete;
  readonly containsTarget?: boolean;
  readonly referentialConstraint?: IEdmReferentialConstraint;
  readonly propertyKind?: IEdmNavigationPropertyKind;
  readonly type?: IEdmTypeReference;
  readonly declaringType?: IEdmStructuredType;
  readonly name?: string;
}

export interface IEdmReferentialConstraint {
  readonly propertyPairs?: EdmReferentialConstraintPropertyPair[];
}

export interface EdmReferentialConstraintPropertyPair {
  readonly dependentProperty?: IEdmStructuralProperty;
  readonly principalProperty?: IEdmStructuralProperty;
}

export interface IEdmStructuralProperty {
  readonly defaultValueString?: string;
  readonly propertyKind?: IEdmStructuralPropertyKind;
  readonly type?: IEdmTypeReference;
  readonly declaringType?: IEdmStructuredType;
  readonly name?: string;
}

export interface IEdmStructuredType {
  readonly isAbstract?: boolean;
  readonly isOpen?: boolean;
  readonly baseType?: IEdmStructuredType;
  readonly declaredProperties?: IEdmProperty[];
  readonly typeKind?: IEdmStructuredTypeKind;
}

export interface IEdmProperty {
  readonly propertyKind?: IEdmPropertyKind;
  readonly type?: IEdmTypeReference;
  readonly declaringType?: IEdmStructuredType;
  readonly name?: string;
}

export interface IEdmPathExpression {
  readonly pathSegments?: string[];
  readonly path?: string;
  readonly expressionKind?: IEdmPathExpressionKind;
}

export interface ODataPath {
  readonly edmType?: IEdmType;
  readonly navigationSource?: IEdmNavigationSource;
  readonly segments?: ODataPathSegment[];
  readonly pathTemplate?: string;
  readonly path?: ODataPathSegment[];
}

export interface ODataPathSegment {
  readonly edmType?: IEdmType;
  identifier?: string;
}

export interface FilterClause {
  readonly expression?: SingleValueNode;
  readonly rangeVariable?: RangeVariable;
  readonly itemType?: IEdmTypeReference;
}

export interface SingleValueNode {
  readonly typeReference?: IEdmTypeReference;
  readonly kind?: SingleValueNodeKind;
}

export interface RangeVariable {
  readonly name?: string;
  readonly typeReference?: IEdmTypeReference;
  readonly kind?: number;
}

export interface ODataRawQueryOptions {
  readonly filter?: string;
}

export interface SelectExpandClause {
  readonly selectedItems?: any[];
  readonly allSelected?: boolean;
}

export interface ApplyClause {
  readonly transformations?: TransformationNode[];
}

export interface TransformationNode {
  readonly kind?: TransformationNodeKind;
}

/**
 * Class representing the servers project summary.
 */
export type ServersProjectSummary = ProjectSummary & {
  /**
   * Gets or sets the count of entities discovered.
   */
  discoveredCount?: number;
  /**
   * Gets or sets the count of entities assessed.
   */
  assessedCount?: number;
  /**
   * Gets or sets the count of entities being replicated.
   */
  replicatingCount?: number;
  /**
   * Gets or sets the count of entities test migrated.
   */
  testMigratedCount?: number;
  /**
   * Gets or sets the count of entities migrated.
   */
  migratedCount?: number;
};

/**
 * The database project summary class.
 */
export type DatabaseProjectSummary = ProjectSummary & {};

/**
 * Class representing the servers solution summary.
 */
export type ServersSolutionSummary = SolutionSummary & {
  /**
   * Gets or sets the count of servers discovered.
   */
  discoveredCount?: number;
  /**
   * Gets or sets the count of servers assessed.
   */
  assessedCount?: number;
  /**
   * Gets or sets the count of servers being replicated.
   */
  replicatingCount?: number;
  /**
   * Gets or sets the count of servers test migrated.
   */
  testMigratedCount?: number;
  /**
   * Gets or sets the count of servers migrated.
   */
  migratedCount?: number;
};

/**
 * Class representing the databases solution summary.
 */
export type DatabasesSolutionSummary = SolutionSummary & {
  /**
   * Gets or sets the count of databases assessed.
   */
  databasesAssessedCount?: number;
  /**
   * Gets or sets the count of database instances assessed.
   */
  databaseInstancesAssessedCount?: number;
  /**
   * Gets or sets the count of databases ready for migration.
   */
  migrationReadyCount?: number;
};

/**
 * Properties of the machine error resource.
 */
export type MachineMigrateEventProperties = MigrateEventProperties & {
  /**
   * Gets or sets the machine for which the error is being reported.
   */
  machine?: string;
};

/**
 * Properties of the database error resource.
 */
export type DatabaseMigrateEventProperties = MigrateEventProperties & {
  /**
   * Gets or sets the database for which the error is being reported.
   */
  database?: string;
  /**
   * Gets or sets the database instance for which the error is being reported.
   */
  databaseInstanceId?: string;
};
/**
 * Defines values for MigrateProjectPropertiesRegisteredToolsItem.
 */
export type MigrateProjectPropertiesRegisteredToolsItem =
  | "ServerDiscovery"
  | "ServerAssessment"
  | "ServerMigration"
  | "Cloudamize"
  | "Turbonomic"
  | "Zerto"
  | "CorentTech"
  | "ServerAssessmentV1"
  | "ServerMigration_Replication"
  | "Carbonite"
  | "DataMigrationAssistant"
  | "DatabaseMigrationService";
/**
 * Defines values for ProjectSummaryRefreshSummaryState.
 */
export type ProjectSummaryRefreshSummaryState =
  | "Started"
  | "InProgress"
  | "Completed"
  | "Failed";
/**
 * Defines values for MigrateProjectPropertiesRefreshSummaryState.
 */
export type MigrateProjectPropertiesRefreshSummaryState =
  | "Started"
  | "InProgress"
  | "Completed"
  | "Failed";
/**
 * Defines values for ProvisioningState.
 */
export type ProvisioningState =
  | "Accepted"
  | "Creating"
  | "Deleting"
  | "Failed"
  | "Moving"
  | "Succeeded";
/**
 * Defines values for RegisterToolInputTool.
 */
export type RegisterToolInputTool =
  | "ServerDiscovery"
  | "ServerAssessment"
  | "ServerMigration"
  | "Cloudamize"
  | "Turbonomic"
  | "Zerto"
  | "CorentTech"
  | "ServerAssessmentV1"
  | "ServerMigration_Replication"
  | "Carbonite"
  | "DataMigrationAssistant"
  | "DatabaseMigrationService";
/**
 * Defines values for RefreshSummaryInputGoal.
 */
export type RefreshSummaryInputGoal = "Servers" | "Databases";
/**
 * Defines values for SolutionPropertiesTool.
 */
export type SolutionPropertiesTool =
  | "ServerDiscovery"
  | "ServerAssessment"
  | "ServerMigration"
  | "Cloudamize"
  | "Turbonomic"
  | "Zerto"
  | "CorentTech"
  | "ServerAssessmentV1"
  | "ServerMigration_Replication"
  | "Carbonite"
  | "DataMigrationAssistant"
  | "DatabaseMigrationService";
/**
 * Defines values for SolutionPropertiesPurpose.
 */
export type SolutionPropertiesPurpose =
  | "Discovery"
  | "Assessment"
  | "Migration";
/**
 * Defines values for SolutionPropertiesGoal.
 */
export type SolutionPropertiesGoal = "Servers" | "Databases";
/**
 * Defines values for SolutionPropertiesStatus.
 */
export type SolutionPropertiesStatus = "Inactive" | "Active";
/**
 * Defines values for SolutionPropertiesCleanupState.
 */
export type SolutionPropertiesCleanupState =
  | "None"
  | "Started"
  | "InProgress"
  | "Completed"
  | "Failed";
/**
 * Defines values for IEdmSchemaElementKind.
 */
export type IEdmSchemaElementKind =
  | "None"
  | "TypeDefinition"
  | "Term"
  | "Action"
  | "EntityContainer"
  | "Function";
/**
 * Defines values for IEdmTypeKind.
 */
export type IEdmTypeKind =
  | "None"
  | "Primitive"
  | "Entity"
  | "Complex"
  | "Collection"
  | "EntityReference"
  | "Enum"
  | "TypeDefinition"
  | "Untyped"
  | "Path";
/**
 * Defines values for IEdmTermSchemaElementKind.
 */
export type IEdmTermSchemaElementKind =
  | "None"
  | "TypeDefinition"
  | "Term"
  | "Action"
  | "EntityContainer"
  | "Function";
/**
 * Defines values for IEdmExpressionKind.
 */
export type IEdmExpressionKind =
  | "None"
  | "BinaryConstant"
  | "BooleanConstant"
  | "DateTimeOffsetConstant"
  | "DecimalConstant"
  | "FloatingConstant"
  | "GuidConstant"
  | "IntegerConstant"
  | "StringConstant"
  | "DurationConstant"
  | "Null"
  | "Record"
  | "Collection"
  | "Path"
  | "If"
  | "Cast"
  | "IsType"
  | "FunctionApplication"
  | "LabeledExpressionReference"
  | "Labeled"
  | "PropertyPath"
  | "NavigationPropertyPath"
  | "DateConstant"
  | "TimeOfDayConstant"
  | "EnumMember"
  | "AnnotationPath";
/**
 * Defines values for IEdmEntityContainerElementKind.
 */
export type IEdmEntityContainerElementKind =
  | "None"
  | "EntitySet"
  | "ActionImport"
  | "FunctionImport"
  | "Singleton";
/**
 * Defines values for IEdmEntityContainerSchemaElementKind.
 */
export type IEdmEntityContainerSchemaElementKind =
  | "None"
  | "TypeDefinition"
  | "Term"
  | "Action"
  | "EntityContainer"
  | "Function";
/**
 * Defines values for IEdmNavigationPropertyOnDelete.
 */
export type IEdmNavigationPropertyOnDelete = "None" | "Cascade";
/**
 * Defines values for IEdmStructuralPropertyKind.
 */
export type IEdmStructuralPropertyKind = "None" | "Structural" | "Navigation";
/**
 * Defines values for IEdmPropertyKind.
 */
export type IEdmPropertyKind = "None" | "Structural" | "Navigation";
/**
 * Defines values for IEdmStructuredTypeKind.
 */
export type IEdmStructuredTypeKind =
  | "None"
  | "Primitive"
  | "Entity"
  | "Complex"
  | "Collection"
  | "EntityReference"
  | "Enum"
  | "TypeDefinition"
  | "Untyped"
  | "Path";
/**
 * Defines values for IEdmNavigationPropertyKind.
 */
export type IEdmNavigationPropertyKind = "None" | "Structural" | "Navigation";
/**
 * Defines values for IEdmPathExpressionKind.
 */
export type IEdmPathExpressionKind =
  | "None"
  | "BinaryConstant"
  | "BooleanConstant"
  | "DateTimeOffsetConstant"
  | "DecimalConstant"
  | "FloatingConstant"
  | "GuidConstant"
  | "IntegerConstant"
  | "StringConstant"
  | "DurationConstant"
  | "Null"
  | "Record"
  | "Collection"
  | "Path"
  | "If"
  | "Cast"
  | "IsType"
  | "FunctionApplication"
  | "LabeledExpressionReference"
  | "Labeled"
  | "PropertyPath"
  | "NavigationPropertyPath"
  | "DateConstant"
  | "TimeOfDayConstant"
  | "EnumMember"
  | "AnnotationPath";
/**
 * Defines values for SingleValueNodeKind.
 */
export type SingleValueNodeKind =
  | "None"
  | "Constant"
  | "Convert"
  | "NonResourceRangeVariableReference"
  | "BinaryOperator"
  | "UnaryOperator"
  | "SingleValuePropertyAccess"
  | "CollectionPropertyAccess"
  | "SingleValueFunctionCall"
  | "Any"
  | "CollectionNavigationNode"
  | "SingleNavigationNode"
  | "SingleValueOpenPropertyAccess"
  | "SingleResourceCast"
  | "All"
  | "CollectionResourceCast"
  | "ResourceRangeVariableReference"
  | "SingleResourceFunctionCall"
  | "CollectionFunctionCall"
  | "CollectionResourceFunctionCall"
  | "NamedFunctionParameter"
  | "ParameterAlias"
  | "EntitySet"
  | "KeyLookup"
  | "SearchTerm"
  | "CollectionOpenPropertyAccess"
  | "CollectionComplexNode"
  | "SingleComplexNode"
  | "Count"
  | "SingleValueCast"
  | "CollectionPropertyNode"
  | "AggregatedCollectionPropertyNode"
  | "In"
  | "CollectionConstant";
/**
 * Defines values for TransformationNodeKind.
 */
export type TransformationNodeKind =
  | "Aggregate"
  | "GroupBy"
  | "Filter"
  | "Compute";

/**
 * Optional parameters.
 */
export interface DatabaseInstancesEnumerateDatabaseInstancesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The continuation token.
   */
  continuationToken?: string;
  /**
   * The number of items to be returned in a single page. This value is honored only if it is less than the 100.
   */
  pageSize?: number;
}

/**
 * Contains response data for the enumerateDatabaseInstances operation.
 */
export type DatabaseInstancesEnumerateDatabaseInstancesResponse = DatabaseInstanceCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseInstanceCollection;
  };
};

/**
 * Contains response data for the getDatabaseInstance operation.
 */
export type DatabaseInstancesGetDatabaseInstanceResponse = DatabaseInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseInstance;
  };
};

/**
 * Optional parameters.
 */
export interface DatabasesEnumerateDatabasesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The continuation token.
   */
  continuationToken?: string;
  /**
   * The number of items to be returned in a single page. This value is honored only if it is less than the 100.
   */
  pageSize?: number;
}

/**
 * Contains response data for the enumerateDatabases operation.
 */
export type DatabasesEnumerateDatabasesResponse = DatabaseCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseCollection;
  };
};

/**
 * Contains response data for the getDatabase operation.
 */
export type DatabasesGetDatabaseResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Database;
  };
};

/**
 * Optional parameters.
 */
export interface EventsEnumerateEventsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The continuation token.
   */
  continuationToken?: string;
  /**
   * The number of items to be returned in a single page. This value is honored only if it is less than the 100.
   */
  pageSize?: number;
}

/**
 * Contains response data for the enumerateEvents operation.
 */
export type EventsEnumerateEventsResponse = EventCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventCollection;
  };
};

/**
 * Contains response data for the getEvent operation.
 */
export type EventsGetEventResponse = MigrateEvent & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MigrateEvent;
  };
};

/**
 * Optional parameters.
 */
export interface MachinesEnumerateMachinesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The continuation token.
   */
  continuationToken?: string;
  /**
   * The number of items to be returned in a single page. This value is honored only if it is less than the 100.
   */
  pageSize?: number;
}

/**
 * Contains response data for the enumerateMachines operation.
 */
export type MachinesEnumerateMachinesResponse = MachineCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MachineCollection;
  };
};

/**
 * Contains response data for the getMachine operation.
 */
export type MachinesGetMachineResponse = Machine & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Machine;
  };
};

/**
 * Contains response data for the getMigrateProject operation.
 */
export type MigrateProjectsGetMigrateProjectResponse = MigrateProject & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MigrateProject;
  };
};

/**
 * Contains response data for the putMigrateProject operation.
 */
export type MigrateProjectsPutMigrateProjectResponse = MigrateProject & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MigrateProject;
  };
};

/**
 * Contains response data for the patchMigrateProject operation.
 */
export type MigrateProjectsPatchMigrateProjectResponse = MigrateProject & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MigrateProject;
  };
};

/**
 * Contains response data for the registerTool operation.
 */
export type MigrateProjectsRegisterToolResponse = RegistrationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RegistrationResult;
  };
};

/**
 * Contains response data for the refreshMigrateProjectSummary operation.
 */
export type MigrateProjectsRefreshMigrateProjectSummaryResponse = RefreshSummaryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RefreshSummaryResult;
  };
};

/**
 * Contains response data for the getSolution operation.
 */
export type SolutionsGetSolutionResponse = Solution & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Solution;
  };
};

/**
 * Contains response data for the putSolution operation.
 */
export type SolutionsPutSolutionResponse = Solution & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Solution;
  };
};

/**
 * Contains response data for the patchSolution operation.
 */
export type SolutionsPatchSolutionResponse = Solution & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Solution;
  };
};

/**
 * Contains response data for the enumerateSolutions operation.
 */
export type SolutionsEnumerateSolutionsResponse = SolutionsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SolutionsCollection;
  };
};

/**
 * Contains response data for the getConfig operation.
 */
export type SolutionsGetConfigResponse = SolutionConfig & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SolutionConfig;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultList;
  };
};

/**
 * Optional parameters.
 */
export interface AzureMigrateHubOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Standard request header. Used by service to respond to client in appropriate language.
   */
  acceptLanguage?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
