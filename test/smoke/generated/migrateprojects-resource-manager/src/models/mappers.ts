/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const DatabaseInstanceCollection: coreHttp.CompositeMapper = {
  serializedName: "DatabaseInstanceCollection",
  type: {
    name: "Composite",
    className: "DatabaseInstanceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DatabaseInstance" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseInstance: coreHttp.CompositeMapper = {
  serializedName: "DatabaseInstance",
  type: {
    name: "Composite",
    className: "DatabaseInstance",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DatabaseInstanceProperties"
        }
      }
    }
  }
};

export const DatabaseInstanceProperties: coreHttp.CompositeMapper = {
  serializedName: "DatabaseInstanceProperties",
  type: {
    name: "Composite",
    className: "DatabaseInstanceProperties",
    modelProperties: {
      discoveryData: {
        serializedName: "discoveryData",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseInstanceDiscoveryDetails"
            }
          }
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "DatabaseInstanceSummary" }
          }
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseInstanceDiscoveryDetails: coreHttp.CompositeMapper = {
  serializedName: "DatabaseInstanceDiscoveryDetails",
  type: {
    name: "Composite",
    className: "DatabaseInstanceDiscoveryDetails",
    modelProperties: {
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      instanceId: {
        serializedName: "instanceId",
        type: {
          name: "String"
        }
      },
      enqueueTime: {
        serializedName: "enqueueTime",
        type: {
          name: "String"
        }
      },
      solutionName: {
        serializedName: "solutionName",
        type: {
          name: "String"
        }
      },
      instanceName: {
        serializedName: "instanceName",
        type: {
          name: "String"
        }
      },
      instanceVersion: {
        serializedName: "instanceVersion",
        type: {
          name: "String"
        }
      },
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      portNumber: {
        serializedName: "portNumber",
        type: {
          name: "Number"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const DatabaseInstanceSummary: coreHttp.CompositeMapper = {
  serializedName: "DatabaseInstanceSummary",
  type: {
    name: "Composite",
    className: "DatabaseInstanceSummary",
    modelProperties: {
      databasesAssessedCount: {
        serializedName: "databasesAssessedCount",
        type: {
          name: "Number"
        }
      },
      migrationReadyCount: {
        serializedName: "migrationReadyCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseCollection: coreHttp.CompositeMapper = {
  serializedName: "DatabaseCollection",
  type: {
    name: "Composite",
    className: "DatabaseCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Database" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Database: coreHttp.CompositeMapper = {
  serializedName: "Database",
  type: {
    name: "Composite",
    className: "Database",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DatabaseProperties"
        }
      }
    }
  }
};

export const DatabaseProperties: coreHttp.CompositeMapper = {
  serializedName: "DatabaseProperties",
  type: {
    name: "Composite",
    className: "DatabaseProperties",
    modelProperties: {
      assessmentData: {
        serializedName: "assessmentData",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DatabaseAssessmentDetails" }
          }
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseAssessmentDetails: coreHttp.CompositeMapper = {
  serializedName: "DatabaseAssessmentDetails",
  type: {
    name: "Composite",
    className: "DatabaseAssessmentDetails",
    modelProperties: {
      assessmentId: {
        serializedName: "assessmentId",
        type: {
          name: "String"
        }
      },
      migrationBlockersCount: {
        serializedName: "migrationBlockersCount",
        type: {
          name: "Number"
        }
      },
      breakingChangesCount: {
        serializedName: "breakingChangesCount",
        type: {
          name: "Number"
        }
      },
      isReadyForMigration: {
        serializedName: "isReadyForMigration",
        type: {
          name: "Boolean"
        }
      },
      assessmentTargetType: {
        serializedName: "assessmentTargetType",
        type: {
          name: "String"
        }
      },
      lastAssessedTime: {
        serializedName: "lastAssessedTime",
        type: {
          name: "DateTime"
        }
      },
      compatibilityLevel: {
        serializedName: "compatibilityLevel",
        type: {
          name: "String"
        }
      },
      databaseSizeInMB: {
        serializedName: "databaseSizeInMB",
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      enqueueTime: {
        serializedName: "enqueueTime",
        type: {
          name: "String"
        }
      },
      solutionName: {
        serializedName: "solutionName",
        type: {
          name: "String"
        }
      },
      instanceId: {
        serializedName: "instanceId",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const EventCollection: coreHttp.CompositeMapper = {
  serializedName: "EventCollection",
  type: {
    name: "Composite",
    className: "EventCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MigrateEvent" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrateEvent: coreHttp.CompositeMapper = {
  serializedName: "MigrateEvent",
  type: {
    name: "Composite",
    className: "MigrateEvent",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MigrateEventProperties"
        }
      }
    }
  }
};

export const MigrateEventProperties: coreHttp.CompositeMapper = {
  serializedName: "MigrateEventProperties",
  type: {
    name: "Composite",
    className: "MigrateEventProperties",
    uberParent: "MigrateEventProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      recommendation: {
        serializedName: "recommendation",
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        type: {
          name: "String"
        }
      },
      solution: {
        serializedName: "solution",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "clientRequestId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachineCollection: coreHttp.CompositeMapper = {
  serializedName: "MachineCollection",
  type: {
    name: "Composite",
    className: "MachineCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Machine" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Machine: coreHttp.CompositeMapper = {
  serializedName: "Machine",
  type: {
    name: "Composite",
    className: "Machine",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MachineProperties"
        }
      }
    }
  }
};

export const MachineProperties: coreHttp.CompositeMapper = {
  serializedName: "MachineProperties",
  type: {
    name: "Composite",
    className: "MachineProperties",
    modelProperties: {
      discoveryData: {
        serializedName: "discoveryData",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DiscoveryDetails" }
          }
        }
      },
      assessmentData: {
        serializedName: "assessmentData",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AssessmentDetails" }
          }
        }
      },
      migrationData: {
        serializedName: "migrationData",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MigrationDetails" }
          }
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DiscoveryDetails: coreHttp.CompositeMapper = {
  serializedName: "DiscoveryDetails",
  type: {
    name: "Composite",
    className: "DiscoveryDetails",
    modelProperties: {
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      enqueueTime: {
        serializedName: "enqueueTime",
        type: {
          name: "String"
        }
      },
      solutionName: {
        serializedName: "solutionName",
        type: {
          name: "String"
        }
      },
      machineId: {
        serializedName: "machineId",
        type: {
          name: "String"
        }
      },
      machineManagerId: {
        serializedName: "machineManagerId",
        type: {
          name: "String"
        }
      },
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      machineName: {
        serializedName: "machineName",
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "DiscoveryDetailsIpAddressesItem"
          }
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        type: {
          name: "String"
        }
      },
      macAddresses: {
        serializedName: "macAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "DiscoveryDetailsMacAddressesItem"
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const AssessmentDetails: coreHttp.CompositeMapper = {
  serializedName: "AssessmentDetails",
  type: {
    name: "Composite",
    className: "AssessmentDetails",
    modelProperties: {
      assessmentId: {
        serializedName: "assessmentId",
        type: {
          name: "String"
        }
      },
      targetVMSize: {
        serializedName: "targetVMSize",
        type: {
          name: "String"
        }
      },
      targetVMLocation: {
        serializedName: "targetVMLocation",
        type: {
          name: "String"
        }
      },
      targetStorageType: {
        serializedName: "targetStorageType",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      enqueueTime: {
        serializedName: "enqueueTime",
        type: {
          name: "String"
        }
      },
      solutionName: {
        serializedName: "solutionName",
        type: {
          name: "String"
        }
      },
      machineId: {
        serializedName: "machineId",
        type: {
          name: "String"
        }
      },
      machineManagerId: {
        serializedName: "machineManagerId",
        type: {
          name: "String"
        }
      },
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      machineName: {
        serializedName: "machineName",
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AssessmentDetailsIpAddressesItem"
          }
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        type: {
          name: "String"
        }
      },
      macAddresses: {
        serializedName: "macAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "AssessmentDetailsMacAddressesItem"
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const MigrationDetails: coreHttp.CompositeMapper = {
  serializedName: "MigrationDetails",
  type: {
    name: "Composite",
    className: "MigrationDetails",
    modelProperties: {
      migrationPhase: {
        serializedName: "migrationPhase",
        type: {
          name: "String"
        }
      },
      migrationTested: {
        serializedName: "migrationTested",
        type: {
          name: "Boolean"
        }
      },
      replicationProgressPercentage: {
        serializedName: "replicationProgressPercentage",
        type: {
          name: "Number"
        }
      },
      targetVMArmId: {
        serializedName: "targetVMArmId",
        type: {
          name: "String"
        }
      },
      enqueueTime: {
        serializedName: "enqueueTime",
        type: {
          name: "String"
        }
      },
      solutionName: {
        serializedName: "solutionName",
        type: {
          name: "String"
        }
      },
      machineId: {
        serializedName: "machineId",
        type: {
          name: "String"
        }
      },
      machineManagerId: {
        serializedName: "machineManagerId",
        type: {
          name: "String"
        }
      },
      fabricType: {
        serializedName: "fabricType",
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      machineName: {
        serializedName: "machineName",
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MigrationDetailsIpAddressesItem"
          }
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      biosId: {
        serializedName: "biosId",
        type: {
          name: "String"
        }
      },
      macAddresses: {
        serializedName: "macAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MigrationDetailsMacAddressesItem"
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const MigrateProject: coreHttp.CompositeMapper = {
  serializedName: "MigrateProject",
  type: {
    name: "Composite",
    className: "MigrateProject",
    modelProperties: {
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MigrateProjectProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Composite",
          className: "MigrateProjectTags"
        }
      }
    }
  }
};

export const MigrateProjectProperties: coreHttp.CompositeMapper = {
  serializedName: "MigrateProjectProperties",
  type: {
    name: "Composite",
    className: "MigrateProjectProperties",
    modelProperties: {
      registeredTools: {
        serializedName: "registeredTools",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "MigrateProjectPropertiesRegisteredToolsItem"
          }
        }
      },
      summary: {
        serializedName: "summary",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "ProjectSummary" } }
        }
      },
      lastSummaryRefreshedTime: {
        serializedName: "lastSummaryRefreshedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      refreshSummaryState: {
        serializedName: "refreshSummaryState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectSummary: coreHttp.CompositeMapper = {
  serializedName: "ProjectSummary",
  type: {
    name: "Composite",
    className: "ProjectSummary",
    uberParent: "ProjectSummary",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      refreshSummaryState: {
        serializedName: "refreshSummaryState",
        type: {
          name: "String"
        }
      },
      lastSummaryRefreshedTime: {
        serializedName: "lastSummaryRefreshedTime",
        type: {
          name: "DateTime"
        }
      },
      extendedSummary: {
        serializedName: "extendedSummary",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const MigrateProjectTags: coreHttp.CompositeMapper = {
  serializedName: "MigrateProjectTags",
  type: {
    name: "Composite",
    className: "MigrateProjectTags",
    modelProperties: {
      additionalProperties: {
        serializedName: "additionalProperties",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisterToolInput: coreHttp.CompositeMapper = {
  serializedName: "RegisterToolInput",
  type: {
    name: "Composite",
    className: "RegisterToolInput",
    modelProperties: {
      tool: {
        serializedName: "tool",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistrationResult: coreHttp.CompositeMapper = {
  serializedName: "RegistrationResult",
  type: {
    name: "Composite",
    className: "RegistrationResult",
    modelProperties: {
      isRegistered: {
        serializedName: "isRegistered",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RefreshSummaryInput: coreHttp.CompositeMapper = {
  serializedName: "RefreshSummaryInput",
  type: {
    name: "Composite",
    className: "RefreshSummaryInput",
    modelProperties: {
      goal: {
        serializedName: "goal",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RefreshSummaryResult: coreHttp.CompositeMapper = {
  serializedName: "RefreshSummaryResult",
  type: {
    name: "Composite",
    className: "RefreshSummaryResult",
    modelProperties: {
      isRefreshed: {
        serializedName: "isRefreshed",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Solution: coreHttp.CompositeMapper = {
  serializedName: "Solution",
  type: {
    name: "Composite",
    className: "Solution",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SolutionProperties"
        }
      }
    }
  }
};

export const SolutionProperties: coreHttp.CompositeMapper = {
  serializedName: "SolutionProperties",
  type: {
    name: "Composite",
    className: "SolutionProperties",
    modelProperties: {
      tool: {
        serializedName: "tool",
        type: {
          name: "String"
        }
      },
      purpose: {
        serializedName: "purpose",
        type: {
          name: "String"
        }
      },
      goal: {
        serializedName: "goal",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      cleanupState: {
        serializedName: "cleanupState",
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "SolutionSummary"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "SolutionDetails"
        }
      }
    }
  }
};

export const SolutionSummary: coreHttp.CompositeMapper = {
  serializedName: "SolutionSummary",
  type: {
    name: "Composite",
    className: "SolutionSummary",
    uberParent: "SolutionSummary",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SolutionDetails: coreHttp.CompositeMapper = {
  serializedName: "SolutionDetails",
  type: {
    name: "Composite",
    className: "SolutionDetails",
    modelProperties: {
      groupCount: {
        serializedName: "groupCount",
        type: {
          name: "Number"
        }
      },
      assessmentCount: {
        serializedName: "assessmentCount",
        type: {
          name: "Number"
        }
      },
      extendedDetails: {
        serializedName: "extendedDetails",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const SolutionsCollection: coreHttp.CompositeMapper = {
  serializedName: "SolutionsCollection",
  type: {
    name: "Composite",
    className: "SolutionsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Solution" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SolutionConfig: coreHttp.CompositeMapper = {
  serializedName: "SolutionConfig",
  type: {
    name: "Composite",
    className: "SolutionConfig",
    modelProperties: {
      publisherSasUri: {
        serializedName: "publisherSasUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResultList: coreHttp.CompositeMapper = {
  serializedName: "OperationResultList",
  type: {
    name: "Composite",
    className: "OperationResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ODataQueryOptions1: coreHttp.CompositeMapper = {
  serializedName: "ODataQueryOptions1",
  type: {
    name: "Composite",
    className: "ODataQueryOptions1",
    modelProperties: {
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "FilterQueryOption"
        }
      }
    }
  }
};

export const FilterQueryOption: coreHttp.CompositeMapper = {
  serializedName: "FilterQueryOption",
  type: {
    name: "Composite",
    className: "FilterQueryOption",
    modelProperties: {
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "ODataQueryContext"
        }
      },
      validator: {
        serializedName: "validator",
        type: {
          name: "any"
        }
      },
      filterClause: {
        serializedName: "filterClause",
        type: {
          name: "Composite",
          className: "FilterClause"
        }
      },
      rawValue: {
        serializedName: "rawValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ODataQueryContext: coreHttp.CompositeMapper = {
  serializedName: "ODataQueryContext",
  type: {
    name: "Composite",
    className: "ODataQueryContext",
    modelProperties: {
      defaultQuerySettings: {
        serializedName: "defaultQuerySettings",
        type: {
          name: "Composite",
          className: "DefaultQuerySettings"
        }
      },
      model: {
        serializedName: "model",
        type: {
          name: "Composite",
          className: "IEdmModel"
        }
      },
      elementType: {
        serializedName: "elementType",
        type: {
          name: "Composite",
          className: "IEdmType"
        }
      },
      navigationSource: {
        serializedName: "navigationSource",
        type: {
          name: "Composite",
          className: "IEdmNavigationSource"
        }
      },
      elementClrType: {
        serializedName: "elementClrType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "Composite",
          className: "ODataPath"
        }
      },
      requestContainer: {
        serializedName: "requestContainer",
        readOnly: true,
        type: {
          name: "any"
        }
      }
    }
  }
};

export const DefaultQuerySettings: coreHttp.CompositeMapper = {
  serializedName: "DefaultQuerySettings",
  type: {
    name: "Composite",
    className: "DefaultQuerySettings",
    modelProperties: {
      enableExpand: {
        serializedName: "enableExpand",
        type: {
          name: "Boolean"
        }
      },
      enableSelect: {
        serializedName: "enableSelect",
        type: {
          name: "Boolean"
        }
      },
      enableCount: {
        serializedName: "enableCount",
        type: {
          name: "Boolean"
        }
      },
      enableOrderBy: {
        serializedName: "enableOrderBy",
        type: {
          name: "Boolean"
        }
      },
      enableFilter: {
        serializedName: "enableFilter",
        type: {
          name: "Boolean"
        }
      },
      maxTop: {
        serializedName: "maxTop",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IEdmModel: coreHttp.CompositeMapper = {
  serializedName: "IEdmModel",
  type: {
    name: "Composite",
    className: "IEdmModel",
    modelProperties: {
      schemaElements: {
        serializedName: "schemaElements",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "IEdmSchemaElement" }
          }
        }
      },
      vocabularyAnnotations: {
        serializedName: "vocabularyAnnotations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "IEdmVocabularyAnnotation" }
          }
        }
      },
      referencedModels: {
        serializedName: "referencedModels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IEdmModel" } }
        }
      },
      declaredNamespaces: {
        serializedName: "declaredNamespaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "IEdmModelDeclaredNamespacesItem"
          }
        }
      },
      directValueAnnotationsManager: {
        serializedName: "directValueAnnotationsManager",
        readOnly: true,
        type: {
          name: "any"
        }
      },
      entityContainer: {
        serializedName: "entityContainer",
        type: {
          name: "Composite",
          className: "IEdmEntityContainer"
        }
      }
    }
  }
};

export const IEdmSchemaElement: coreHttp.CompositeMapper = {
  serializedName: "IEdmSchemaElement",
  type: {
    name: "Composite",
    className: "IEdmSchemaElement",
    modelProperties: {
      schemaElementKind: {
        serializedName: "schemaElementKind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmVocabularyAnnotation: coreHttp.CompositeMapper = {
  serializedName: "IEdmVocabularyAnnotation",
  type: {
    name: "Composite",
    className: "IEdmVocabularyAnnotation",
    modelProperties: {
      qualifier: {
        serializedName: "qualifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      term: {
        serializedName: "term",
        type: {
          name: "Composite",
          className: "IEdmTerm"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "any"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "IEdmExpression"
        }
      }
    }
  }
};

export const IEdmTerm: coreHttp.CompositeMapper = {
  serializedName: "IEdmTerm",
  type: {
    name: "Composite",
    className: "IEdmTerm",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Composite",
          className: "IEdmTypeReference"
        }
      },
      appliesTo: {
        serializedName: "appliesTo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      schemaElementKind: {
        serializedName: "schemaElementKind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmTypeReference: coreHttp.CompositeMapper = {
  serializedName: "IEdmTypeReference",
  type: {
    name: "Composite",
    className: "IEdmTypeReference",
    modelProperties: {
      isNullable: {
        serializedName: "isNullable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      definition: {
        serializedName: "definition",
        type: {
          name: "Composite",
          className: "IEdmType"
        }
      }
    }
  }
};

export const IEdmType: coreHttp.CompositeMapper = {
  serializedName: "IEdmType",
  type: {
    name: "Composite",
    className: "IEdmType",
    modelProperties: {
      typeKind: {
        serializedName: "typeKind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmExpression: coreHttp.CompositeMapper = {
  serializedName: "IEdmExpression",
  type: {
    name: "Composite",
    className: "IEdmExpression",
    modelProperties: {
      expressionKind: {
        serializedName: "expressionKind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmEntityContainer: coreHttp.CompositeMapper = {
  serializedName: "IEdmEntityContainer",
  type: {
    name: "Composite",
    className: "IEdmEntityContainer",
    modelProperties: {
      elements: {
        serializedName: "elements",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "IEdmEntityContainerElement" }
          }
        }
      },
      schemaElementKind: {
        serializedName: "schemaElementKind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmEntityContainerElement: coreHttp.CompositeMapper = {
  serializedName: "IEdmEntityContainerElement",
  type: {
    name: "Composite",
    className: "IEdmEntityContainerElement",
    modelProperties: {
      containerElementKind: {
        serializedName: "containerElementKind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        type: {
          name: "Composite",
          className: "IEdmEntityContainer"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmNavigationSource: coreHttp.CompositeMapper = {
  serializedName: "IEdmNavigationSource",
  type: {
    name: "Composite",
    className: "IEdmNavigationSource",
    modelProperties: {
      navigationPropertyBindings: {
        serializedName: "navigationPropertyBindings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IEdmNavigationPropertyBinding"
            }
          }
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "Composite",
          className: "IEdmPathExpression"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Composite",
          className: "IEdmType"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmNavigationPropertyBinding: coreHttp.CompositeMapper = {
  serializedName: "IEdmNavigationPropertyBinding",
  type: {
    name: "Composite",
    className: "IEdmNavigationPropertyBinding",
    modelProperties: {
      navigationProperty: {
        serializedName: "navigationProperty",
        type: {
          name: "Composite",
          className: "IEdmNavigationProperty"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "Composite",
          className: "IEdmNavigationSource"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "Composite",
          className: "IEdmPathExpression"
        }
      }
    }
  }
};

export const IEdmNavigationProperty: coreHttp.CompositeMapper = {
  serializedName: "IEdmNavigationProperty",
  type: {
    name: "Composite",
    className: "IEdmNavigationProperty",
    modelProperties: {
      partner: {
        serializedName: "partner",
        type: {
          name: "Composite",
          className: "IEdmNavigationProperty"
        }
      },
      onDelete: {
        serializedName: "onDelete",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containsTarget: {
        serializedName: "containsTarget",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      referentialConstraint: {
        serializedName: "referentialConstraint",
        type: {
          name: "Composite",
          className: "IEdmReferentialConstraint"
        }
      },
      propertyKind: {
        serializedName: "propertyKind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Composite",
          className: "IEdmTypeReference"
        }
      },
      declaringType: {
        serializedName: "declaringType",
        type: {
          name: "Composite",
          className: "IEdmStructuredType"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmReferentialConstraint: coreHttp.CompositeMapper = {
  serializedName: "IEdmReferentialConstraint",
  type: {
    name: "Composite",
    className: "IEdmReferentialConstraint",
    modelProperties: {
      propertyPairs: {
        serializedName: "propertyPairs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EdmReferentialConstraintPropertyPair"
            }
          }
        }
      }
    }
  }
};

export const EdmReferentialConstraintPropertyPair: coreHttp.CompositeMapper = {
  serializedName: "EdmReferentialConstraintPropertyPair",
  type: {
    name: "Composite",
    className: "EdmReferentialConstraintPropertyPair",
    modelProperties: {
      dependentProperty: {
        serializedName: "dependentProperty",
        type: {
          name: "Composite",
          className: "IEdmStructuralProperty"
        }
      },
      principalProperty: {
        serializedName: "principalProperty",
        type: {
          name: "Composite",
          className: "IEdmStructuralProperty"
        }
      }
    }
  }
};

export const IEdmStructuralProperty: coreHttp.CompositeMapper = {
  serializedName: "IEdmStructuralProperty",
  type: {
    name: "Composite",
    className: "IEdmStructuralProperty",
    modelProperties: {
      defaultValueString: {
        serializedName: "defaultValueString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      propertyKind: {
        serializedName: "propertyKind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Composite",
          className: "IEdmTypeReference"
        }
      },
      declaringType: {
        serializedName: "declaringType",
        type: {
          name: "Composite",
          className: "IEdmStructuredType"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmStructuredType: coreHttp.CompositeMapper = {
  serializedName: "IEdmStructuredType",
  type: {
    name: "Composite",
    className: "IEdmStructuredType",
    modelProperties: {
      isAbstract: {
        serializedName: "isAbstract",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isOpen: {
        serializedName: "isOpen",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      baseType: {
        serializedName: "baseType",
        type: {
          name: "Composite",
          className: "IEdmStructuredType"
        }
      },
      declaredProperties: {
        serializedName: "declaredProperties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IEdmProperty" } }
        }
      },
      typeKind: {
        serializedName: "typeKind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmProperty: coreHttp.CompositeMapper = {
  serializedName: "IEdmProperty",
  type: {
    name: "Composite",
    className: "IEdmProperty",
    modelProperties: {
      propertyKind: {
        serializedName: "propertyKind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Composite",
          className: "IEdmTypeReference"
        }
      },
      declaringType: {
        serializedName: "declaringType",
        type: {
          name: "Composite",
          className: "IEdmStructuredType"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IEdmPathExpression: coreHttp.CompositeMapper = {
  serializedName: "IEdmPathExpression",
  type: {
    name: "Composite",
    className: "IEdmPathExpression",
    modelProperties: {
      pathSegments: {
        serializedName: "pathSegments",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "IEdmPathExpressionPathSegmentsItem"
          }
        }
      },
      path: {
        serializedName: "path",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expressionKind: {
        serializedName: "expressionKind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ODataPath: coreHttp.CompositeMapper = {
  serializedName: "ODataPath",
  type: {
    name: "Composite",
    className: "ODataPath",
    modelProperties: {
      edmType: {
        serializedName: "edmType",
        type: {
          name: "Composite",
          className: "IEdmType"
        }
      },
      navigationSource: {
        serializedName: "navigationSource",
        type: {
          name: "Composite",
          className: "IEdmNavigationSource"
        }
      },
      segments: {
        serializedName: "segments",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ODataPathSegment" }
          }
        }
      },
      pathTemplate: {
        serializedName: "pathTemplate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ODataPathSegment" }
          }
        }
      }
    }
  }
};

export const ODataPathSegment: coreHttp.CompositeMapper = {
  serializedName: "ODataPathSegment",
  type: {
    name: "Composite",
    className: "ODataPathSegment",
    modelProperties: {
      edmType: {
        serializedName: "edmType",
        type: {
          name: "Composite",
          className: "IEdmType"
        }
      },
      identifier: {
        serializedName: "identifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FilterClause: coreHttp.CompositeMapper = {
  serializedName: "FilterClause",
  type: {
    name: "Composite",
    className: "FilterClause",
    modelProperties: {
      expression: {
        serializedName: "expression",
        type: {
          name: "Composite",
          className: "SingleValueNode"
        }
      },
      rangeVariable: {
        serializedName: "rangeVariable",
        type: {
          name: "Composite",
          className: "RangeVariable"
        }
      },
      itemType: {
        serializedName: "itemType",
        type: {
          name: "Composite",
          className: "IEdmTypeReference"
        }
      }
    }
  }
};

export const SingleValueNode: coreHttp.CompositeMapper = {
  serializedName: "SingleValueNode",
  type: {
    name: "Composite",
    className: "SingleValueNode",
    modelProperties: {
      typeReference: {
        serializedName: "typeReference",
        type: {
          name: "Composite",
          className: "IEdmTypeReference"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RangeVariable: coreHttp.CompositeMapper = {
  serializedName: "RangeVariable",
  type: {
    name: "Composite",
    className: "RangeVariable",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      typeReference: {
        serializedName: "typeReference",
        type: {
          name: "Composite",
          className: "IEdmTypeReference"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ODataRawQueryOptions: coreHttp.CompositeMapper = {
  serializedName: "ODataRawQueryOptions",
  type: {
    name: "Composite",
    className: "ODataRawQueryOptions",
    modelProperties: {
      filter: {
        serializedName: "filter",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SelectExpandClause: coreHttp.CompositeMapper = {
  serializedName: "SelectExpandClause",
  type: {
    name: "Composite",
    className: "SelectExpandClause",
    modelProperties: {
      selectedItems: {
        serializedName: "selectedItems",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "any" }, serializedName: "any" }
        }
      },
      allSelected: {
        serializedName: "allSelected",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ApplyClause: coreHttp.CompositeMapper = {
  serializedName: "ApplyClause",
  type: {
    name: "Composite",
    className: "ApplyClause",
    modelProperties: {
      transformations: {
        serializedName: "transformations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TransformationNode" }
          }
        }
      }
    }
  }
};

export const TransformationNode: coreHttp.CompositeMapper = {
  serializedName: "TransformationNode",
  type: {
    name: "Composite",
    className: "TransformationNode",
    modelProperties: {
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServersProjectSummary: coreHttp.CompositeMapper = {
  serializedName: "Servers",
  type: {
    name: "Composite",
    className: "ServersProjectSummary",
    uberParent: "ProjectSummary",
    polymorphicDiscriminator: ProjectSummary.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProjectSummary.type.modelProperties,
      discoveredCount: {
        serializedName: "discoveredCount",
        type: {
          name: "Number"
        }
      },
      assessedCount: {
        serializedName: "assessedCount",
        type: {
          name: "Number"
        }
      },
      replicatingCount: {
        serializedName: "replicatingCount",
        type: {
          name: "Number"
        }
      },
      testMigratedCount: {
        serializedName: "testMigratedCount",
        type: {
          name: "Number"
        }
      },
      migratedCount: {
        serializedName: "migratedCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseProjectSummary: coreHttp.CompositeMapper = {
  serializedName: "Databases",
  type: {
    name: "Composite",
    className: "DatabaseProjectSummary",
    uberParent: "ProjectSummary",
    polymorphicDiscriminator: ProjectSummary.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProjectSummary.type.modelProperties
    }
  }
};

export const ServersSolutionSummary: coreHttp.CompositeMapper = {
  serializedName: "Servers",
  type: {
    name: "Composite",
    className: "ServersSolutionSummary",
    uberParent: "SolutionSummary",
    polymorphicDiscriminator: SolutionSummary.type.polymorphicDiscriminator,
    modelProperties: {
      ...SolutionSummary.type.modelProperties,
      discoveredCount: {
        serializedName: "discoveredCount",
        type: {
          name: "Number"
        }
      },
      assessedCount: {
        serializedName: "assessedCount",
        type: {
          name: "Number"
        }
      },
      replicatingCount: {
        serializedName: "replicatingCount",
        type: {
          name: "Number"
        }
      },
      testMigratedCount: {
        serializedName: "testMigratedCount",
        type: {
          name: "Number"
        }
      },
      migratedCount: {
        serializedName: "migratedCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabasesSolutionSummary: coreHttp.CompositeMapper = {
  serializedName: "Databases",
  type: {
    name: "Composite",
    className: "DatabasesSolutionSummary",
    uberParent: "SolutionSummary",
    polymorphicDiscriminator: SolutionSummary.type.polymorphicDiscriminator,
    modelProperties: {
      ...SolutionSummary.type.modelProperties,
      databasesAssessedCount: {
        serializedName: "databasesAssessedCount",
        type: {
          name: "Number"
        }
      },
      databaseInstancesAssessedCount: {
        serializedName: "databaseInstancesAssessedCount",
        type: {
          name: "Number"
        }
      },
      migrationReadyCount: {
        serializedName: "migrationReadyCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MachineMigrateEventProperties: coreHttp.CompositeMapper = {
  serializedName: "Servers",
  type: {
    name: "Composite",
    className: "MachineMigrateEventProperties",
    uberParent: "MigrateEventProperties",
    polymorphicDiscriminator:
      MigrateEventProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...MigrateEventProperties.type.modelProperties,
      machine: {
        serializedName: "machine",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseMigrateEventProperties: coreHttp.CompositeMapper = {
  serializedName: "Databases",
  type: {
    name: "Composite",
    className: "DatabaseMigrateEventProperties",
    uberParent: "MigrateEventProperties",
    polymorphicDiscriminator:
      MigrateEventProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...MigrateEventProperties.type.modelProperties,
      database: {
        serializedName: "database",
        type: {
          name: "String"
        }
      },
      databaseInstanceId: {
        serializedName: "databaseInstanceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  MigrateEventProperties: MigrateEventProperties,
  ProjectSummary: ProjectSummary,
  SolutionSummary: SolutionSummary,
  "ProjectSummary.Servers": ServersProjectSummary,
  "ProjectSummary.Databases": DatabaseProjectSummary,
  "SolutionSummary.Servers": ServersSolutionSummary,
  "SolutionSummary.Databases": DatabasesSolutionSummary,
  "MigrateEventProperties.Servers": MachineMigrateEventProperties,
  "MigrateEventProperties.Databases": DatabaseMigrateEventProperties
};
