/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlVirtualMachineManagementClient } from "../sqlVirtualMachineManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  SqlVirtualMachinesListBySqlVmGroupResponse,
  SqlVirtualMachinesListResponse,
  SqlVirtualMachinesGetOptionalParams,
  SqlVirtualMachinesGetResponse,
  SqlVirtualMachine,
  SqlVirtualMachinesCreateOrUpdateResponse,
  SqlVirtualMachineUpdate,
  SqlVirtualMachinesUpdateResponse,
  SqlVirtualMachinesListByResourceGroupResponse,
  SqlVirtualMachinesListBySqlVmGroupNextResponse,
  SqlVirtualMachinesListNextResponse,
  SqlVirtualMachinesListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a SqlVirtualMachines.
 */
export class SqlVirtualMachines {
  private readonly client: SqlVirtualMachineManagementClient;

  /**
   * Initialize a new instance of the class SqlVirtualMachines class.
   * @param client Reference to the service client
   */
  constructor(client: SqlVirtualMachineManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of sql virtual machines in a SQL virtual machine group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param options The options parameters.
   */
  listBySqlVmGroup(
    resourceGroupName: string,
    sqlVirtualMachineGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlVirtualMachinesListBySqlVmGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlVirtualMachineGroupName,
        options: operationOptions
      },
      listBySqlVmGroupOperationSpec
    ) as Promise<SqlVirtualMachinesListBySqlVmGroupResponse>;
  }

  /**
   * Gets all SQL virtual machines in a subscription.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<SqlVirtualMachinesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<SqlVirtualMachinesListResponse>;
  }

  /**
   * Gets a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: SqlVirtualMachinesGetOptionalParams
  ): Promise<SqlVirtualMachinesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlVirtualMachineName, options: operationOptions },
      getOperationSpec
    ) as Promise<SqlVirtualMachinesGetResponse>;
  }

  /**
   * Creates or updates a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param parameters The SQL virtual machine.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    parameters: SqlVirtualMachine,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SqlVirtualMachinesCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      sqlVirtualMachineName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlVirtualMachinesCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      sqlVirtualMachineName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param parameters The SQL virtual machine.
   * @param options The options parameters.
   */
  async update(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    parameters: SqlVirtualMachineUpdate,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SqlVirtualMachinesUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      sqlVirtualMachineName,
      parameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlVirtualMachinesUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets all SQL virtual machines in a resource group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlVirtualMachinesListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<SqlVirtualMachinesListByResourceGroupResponse>;
  }

  /**
   * ListBySqlVmGroupNext
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param nextLink The nextLink from the previous successful call to the ListBySqlVmGroup method.
   * @param options The options parameters.
   */
  listBySqlVmGroupNext(
    resourceGroupName: string,
    sqlVirtualMachineGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlVirtualMachinesListBySqlVmGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlVirtualMachineGroupName,
        nextLink,
        options: operationOptions
      },
      listBySqlVmGroupNextOperationSpec
    ) as Promise<SqlVirtualMachinesListBySqlVmGroupNextResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlVirtualMachinesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<SqlVirtualMachinesListNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlVirtualMachinesListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<SqlVirtualMachinesListByResourceGroupNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listBySqlVmGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/sqlVirtualMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.sqlVirtualMachineGroupName,
    Parameters.subscriptionId
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    201: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    202: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    204: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    default: {}
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    201: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    202: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    204: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    default: {}
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  serializer
};
const listBySqlVmGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.sqlVirtualMachineGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink3
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink2
  ],
  serializer
};
