/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NotificationHubsManagementClient } from "../notificationHubsManagementClient";
import {
  CheckAvailabilityParameters,
  NotificationHubsCheckNotificationHubAvailabilityResponse,
  NotificationHubCreateOrUpdateParameters,
  NotificationHubsCreateOrUpdateResponse,
  NotificationHubsPatchOptionalParams,
  NotificationHubsPatchResponse,
  NotificationHubsGetResponse,
  NotificationHubsDebugSendOptionalParams,
  NotificationHubsDebugSendResponse,
  SharedAccessAuthorizationRuleCreateOrUpdateParameters,
  NotificationHubsCreateOrUpdateAuthorizationRuleResponse,
  NotificationHubsGetAuthorizationRuleResponse,
  NotificationHubsListResponse,
  NotificationHubsListAuthorizationRulesResponse,
  NotificationHubsListKeysResponse,
  PolicykeyResource,
  NotificationHubsRegenerateKeysResponse,
  NotificationHubsGetPnsCredentialsResponse,
  NotificationHubsListNextResponse,
  NotificationHubsListAuthorizationRulesNextResponse
} from "../models";

/**
 * Class representing a NotificationHubs.
 */
export class NotificationHubs {
  private readonly client: NotificationHubsManagementClient;

  /**
   * Initialize a new instance of the class NotificationHubs class.
   * @param client Reference to the service client
   */
  constructor(client: NotificationHubsManagementClient) {
    this.client = client;
  }

  /**
   * Checks the availability of the given notificationHub in a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters The notificationHub name.
   * @param options The options parameters.
   */
  checkNotificationHubAvailability(
    resourceGroupName: string,
    namespaceName: string,
    parameters: CheckAvailabilityParameters,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsCheckNotificationHubAvailabilityResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        parameters,
        options: operationOptions
      },
      checkNotificationHubAvailabilityOperationSpec
    ) as Promise<NotificationHubsCheckNotificationHubAvailabilityResponse>;
  }

  /**
   * Creates/Update a NotificationHub in a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to the create/update a NotificationHub Resource.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    parameters: NotificationHubCreateOrUpdateParameters,
    notificationHubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        parameters,
        notificationHubName,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<NotificationHubsCreateOrUpdateResponse>;
  }

  /**
   * Patch a NotificationHub in a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  patch(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    options?: NotificationHubsPatchOptionalParams
  ): Promise<NotificationHubsPatchResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options: operationOptions
      },
      patchOperationSpec
    ) as Promise<NotificationHubsPatchResponse>;
  }

  /**
   * Deletes a notification hub associated with a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Lists the notification hubs associated with a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<NotificationHubsGetResponse>;
  }

  /**
   * test send a push notification
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  debugSend(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    options?: NotificationHubsDebugSendOptionalParams
  ): Promise<NotificationHubsDebugSendResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options: operationOptions
      },
      debugSendOperationSpec
    ) as Promise<NotificationHubsDebugSendResponse>;
  }

  /**
   * Creates/Updates an authorization rule for a NotificationHub
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters The shared access authorization rule.
   * @param authorizationRuleName Authorization Rule Name.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  createOrUpdateAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SharedAccessAuthorizationRuleCreateOrUpdateParameters,
    authorizationRuleName: string,
    notificationHubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsCreateOrUpdateAuthorizationRuleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        parameters,
        authorizationRuleName,
        notificationHubName,
        options: operationOptions
      },
      createOrUpdateAuthorizationRuleOperationSpec
    ) as Promise<NotificationHubsCreateOrUpdateAuthorizationRuleResponse>;
  }

  /**
   * Deletes a notificationHub authorization rule
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  deleteAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    notificationHubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        notificationHubName,
        options: operationOptions
      },
      deleteAuthorizationRuleOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets an authorization rule for a NotificationHub by name.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName authorization rule name.
   * @param options The options parameters.
   */
  getAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    authorizationRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsGetAuthorizationRuleResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        authorizationRuleName,
        options: operationOptions
      },
      getAuthorizationRuleOperationSpec
    ) as Promise<NotificationHubsGetAuthorizationRuleResponse>;
  }

  /**
   * Lists the notification hubs associated with a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    namespaceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options: operationOptions },
      listOperationSpec
    ) as Promise<NotificationHubsListResponse>;
  }

  /**
   * Gets the authorization rules for a NotificationHub.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  listAuthorizationRules(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsListAuthorizationRulesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options: operationOptions
      },
      listAuthorizationRulesOperationSpec
    ) as Promise<NotificationHubsListAuthorizationRulesResponse>;
  }

  /**
   * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName The connection string of the NotificationHub for the specified
   *                              authorizationRule.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    authorizationRuleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsListKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        authorizationRuleName,
        options: operationOptions
      },
      listKeysOperationSpec
    ) as Promise<NotificationHubsListKeysResponse>;
  }

  /**
   * Regenerates the Primary/Secondary Keys to the NotificationHub Authorization Rule
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName The connection string of the NotificationHub for the specified
   *                              authorizationRule.
   * @param parameters Parameters supplied to regenerate the NotificationHub Authorization Rule Key.
   * @param options The options parameters.
   */
  regenerateKeys(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    authorizationRuleName: string,
    parameters: PolicykeyResource,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsRegenerateKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        authorizationRuleName,
        parameters,
        options: operationOptions
      },
      regenerateKeysOperationSpec
    ) as Promise<NotificationHubsRegenerateKeysResponse>;
  }

  /**
   * Lists the PNS Credentials associated with a notification hub .
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  getPnsCredentials(
    resourceGroupName: string,
    namespaceName: string,
    notificationHubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsGetPnsCredentialsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options: operationOptions
      },
      getPnsCredentialsOperationSpec
    ) as Promise<NotificationHubsGetPnsCredentialsResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    namespaceName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, namespaceName, options: operationOptions },
      listNextOperationSpec
    ) as Promise<NotificationHubsListNextResponse>;
  }

  /**
   * ListAuthorizationRulesNext
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
   * @param notificationHubName The notification hub name.
   * @param options The options parameters.
   */
  listAuthorizationRulesNext(
    resourceGroupName: string,
    namespaceName: string,
    nextLink: string,
    notificationHubName: string,
    options?: coreHttp.OperationOptions
  ): Promise<NotificationHubsListAuthorizationRulesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        nextLink,
        notificationHubName,
        options: operationOptions
      },
      listAuthorizationRulesNextOperationSpec
    ) as Promise<NotificationHubsListAuthorizationRulesNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkNotificationHubAvailabilityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/checkNotificationHubAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckAvailabilityResult
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubResource
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const patchOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubResource
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubResource
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName
  ],
  serializer
};
const debugSendOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/debugsend",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.DebugSendResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const createOrUpdateAuthorizationRuleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleResource
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.notificationHubName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteAuthorizationRuleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.notificationHubName
  ],
  serializer
};
const getAuthorizationRuleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleResource
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName1,
    Parameters.notificationHubName,
    Parameters.authorizationRuleName3
  ],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName
  ],
  serializer
};
const listAuthorizationRulesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName1,
    Parameters.notificationHubName
  ],
  serializer
};
const listKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceListKeys
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.authorizationRuleName4
  ],
  serializer
};
const regenerateKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceListKeys
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.authorizationRuleName4
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getPnsCredentialsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/pnsCredentials",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PnsCredentialsResource
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName
  ],
  serializer
};
const listAuthorizationRulesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName1,
    Parameters.nextLink2,
    Parameters.notificationHubName
  ],
  serializer
};
