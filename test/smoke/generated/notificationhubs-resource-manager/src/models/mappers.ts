/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckAvailabilityParameters",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      isAvailiable: {
        serializedName: "isAvailiable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const CheckAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckAvailabilityResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      isAvailiable: {
        serializedName: "isAvailiable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NamespaceCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "NamespaceCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "NamespaceCreateOrUpdateParameters",
    modelProperties: {
      ...Resource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "properties.region",
        type: {
          name: "String"
        }
      },
      metricId: {
        serializedName: "properties.metricId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "properties.updatedAt",
        type: {
          name: "DateTime"
        }
      },
      serviceBusEndpoint: {
        serializedName: "properties.serviceBusEndpoint",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      },
      scaleUnit: {
        serializedName: "properties.scaleUnit",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      critical: {
        serializedName: "properties.critical",
        type: {
          name: "Boolean"
        }
      },
      dataCenter: {
        serializedName: "properties.dataCenter",
        type: {
          name: "String"
        }
      },
      namespaceType: {
        serializedName: "properties.namespaceType",
        type: {
          name: "Enum",
          allowedValues: ["Messaging", "NotificationHub"]
        }
      }
    }
  }
};

export const NamespaceResource: coreHttp.CompositeMapper = {
  serializedName: "NamespaceResource",
  type: {
    name: "Composite",
    className: "NamespaceResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "properties.region",
        type: {
          name: "String"
        }
      },
      metricId: {
        serializedName: "properties.metricId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "properties.updatedAt",
        type: {
          name: "DateTime"
        }
      },
      serviceBusEndpoint: {
        serializedName: "properties.serviceBusEndpoint",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      },
      scaleUnit: {
        serializedName: "properties.scaleUnit",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      critical: {
        serializedName: "properties.critical",
        type: {
          name: "Boolean"
        }
      },
      dataCenter: {
        serializedName: "properties.dataCenter",
        type: {
          name: "String"
        }
      },
      namespaceType: {
        serializedName: "properties.namespaceType",
        type: {
          name: "Enum",
          allowedValues: ["Messaging", "NotificationHub"]
        }
      }
    }
  }
};

export const NamespacePatchParameters: coreHttp.CompositeMapper = {
  serializedName: "NamespacePatchParameters",
  type: {
    name: "Composite",
    className: "NamespacePatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const SharedAccessAuthorizationRuleCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "SharedAccessAuthorizationRuleCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "SharedAccessAuthorizationRuleCreateOrUpdateParameters",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SharedAccessAuthorizationRuleProperties"
        }
      }
    }
  }
};

export const SharedAccessAuthorizationRuleProperties: coreHttp.CompositeMapper = {
  serializedName: "SharedAccessAuthorizationRuleProperties",
  type: {
    name: "Composite",
    className: "SharedAccessAuthorizationRuleProperties",
    modelProperties: {
      rights: {
        serializedName: "rights",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Enum", allowedValues: ["Manage", "Send", "Listen"] },
            serializedName: "AccessRights"
          }
        }
      },
      primaryKey: {
        serializedName: "primaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      claimType: {
        serializedName: "claimType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      claimValue: {
        serializedName: "claimValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdTime: {
        serializedName: "createdTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      revision: {
        serializedName: "revision",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SharedAccessAuthorizationRuleResource: coreHttp.CompositeMapper = {
  serializedName: "SharedAccessAuthorizationRuleResource",
  type: {
    name: "Composite",
    className: "SharedAccessAuthorizationRuleResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      rights: {
        serializedName: "properties.rights",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Enum", allowedValues: ["Manage", "Send", "Listen"] },
            serializedName: "AccessRights"
          }
        }
      },
      primaryKey: {
        serializedName: "properties.primaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "properties.secondaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      claimType: {
        serializedName: "properties.claimType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      claimValue: {
        serializedName: "properties.claimValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      modifiedTime: {
        serializedName: "properties.modifiedTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdTime: {
        serializedName: "properties.createdTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      revision: {
        serializedName: "properties.revision",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NamespaceListResult: coreHttp.CompositeMapper = {
  serializedName: "NamespaceListResult",
  type: {
    name: "Composite",
    className: "NamespaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NamespaceResource" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedAccessAuthorizationRuleListResult: coreHttp.CompositeMapper = {
  serializedName: "SharedAccessAuthorizationRuleListResult",
  type: {
    name: "Composite",
    className: "SharedAccessAuthorizationRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedAccessAuthorizationRuleResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicykeyResource: coreHttp.CompositeMapper = {
  serializedName: "PolicykeyResource",
  type: {
    name: "Composite",
    className: "PolicykeyResource",
    modelProperties: {
      policyKey: {
        serializedName: "policyKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceListKeys: coreHttp.CompositeMapper = {
  serializedName: "ResourceListKeys",
  type: {
    name: "Composite",
    className: "ResourceListKeys",
    modelProperties: {
      primaryConnectionString: {
        serializedName: "primaryConnectionString",
        type: {
          name: "String"
        }
      },
      secondaryConnectionString: {
        serializedName: "secondaryConnectionString",
        type: {
          name: "String"
        }
      },
      primaryKey: {
        serializedName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotificationHubCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "NotificationHubCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "NotificationHubCreateOrUpdateParameters",
    modelProperties: {
      ...Resource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      registrationTtl: {
        serializedName: "properties.registrationTtl",
        type: {
          name: "String"
        }
      },
      authorizationRules: {
        serializedName: "properties.authorizationRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedAccessAuthorizationRuleProperties"
            }
          }
        }
      },
      apnsCredential: {
        serializedName: "apnsCredential",
        type: {
          name: "Composite",
          className: "ApnsCredential"
        }
      },
      wnsCredential: {
        serializedName: "wnsCredential",
        type: {
          name: "Composite",
          className: "WnsCredential"
        }
      },
      gcmCredential: {
        serializedName: "gcmCredential",
        type: {
          name: "Composite",
          className: "GcmCredential"
        }
      },
      mpnsCredential: {
        serializedName: "mpnsCredential",
        type: {
          name: "Composite",
          className: "MpnsCredential"
        }
      },
      admCredential: {
        serializedName: "admCredential",
        type: {
          name: "Composite",
          className: "AdmCredential"
        }
      },
      baiduCredential: {
        serializedName: "baiduCredential",
        type: {
          name: "Composite",
          className: "BaiduCredential"
        }
      }
    }
  }
};

export const ApnsCredential: coreHttp.CompositeMapper = {
  serializedName: "ApnsCredential",
  type: {
    name: "Composite",
    className: "ApnsCredential",
    modelProperties: {
      apnsCertificate: {
        serializedName: "properties.apnsCertificate",
        type: {
          name: "String"
        }
      },
      certificateKey: {
        serializedName: "properties.certificateKey",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      keyId: {
        serializedName: "properties.keyId",
        type: {
          name: "String"
        }
      },
      appName: {
        serializedName: "properties.appName",
        type: {
          name: "String"
        }
      },
      appId: {
        serializedName: "properties.appId",
        type: {
          name: "String"
        }
      },
      token: {
        serializedName: "properties.token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WnsCredential: coreHttp.CompositeMapper = {
  serializedName: "WnsCredential",
  type: {
    name: "Composite",
    className: "WnsCredential",
    modelProperties: {
      packageSid: {
        serializedName: "properties.packageSid",
        type: {
          name: "String"
        }
      },
      secretKey: {
        serializedName: "properties.secretKey",
        type: {
          name: "String"
        }
      },
      windowsLiveEndpoint: {
        serializedName: "properties.windowsLiveEndpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GcmCredential: coreHttp.CompositeMapper = {
  serializedName: "GcmCredential",
  type: {
    name: "Composite",
    className: "GcmCredential",
    modelProperties: {
      gcmEndpoint: {
        serializedName: "properties.gcmEndpoint",
        type: {
          name: "String"
        }
      },
      googleApiKey: {
        serializedName: "properties.googleApiKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MpnsCredential: coreHttp.CompositeMapper = {
  serializedName: "MpnsCredential",
  type: {
    name: "Composite",
    className: "MpnsCredential",
    modelProperties: {
      mpnsCertificate: {
        serializedName: "properties.mpnsCertificate",
        type: {
          name: "String"
        }
      },
      certificateKey: {
        serializedName: "properties.certificateKey",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdmCredential: coreHttp.CompositeMapper = {
  serializedName: "AdmCredential",
  type: {
    name: "Composite",
    className: "AdmCredential",
    modelProperties: {
      clientId: {
        serializedName: "properties.clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "properties.clientSecret",
        type: {
          name: "String"
        }
      },
      authTokenUrl: {
        serializedName: "properties.authTokenUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BaiduCredential: coreHttp.CompositeMapper = {
  serializedName: "BaiduCredential",
  type: {
    name: "Composite",
    className: "BaiduCredential",
    modelProperties: {
      baiduApiKey: {
        serializedName: "properties.baiduApiKey",
        type: {
          name: "String"
        }
      },
      baiduEndPoint: {
        serializedName: "properties.baiduEndPoint",
        type: {
          name: "String"
        }
      },
      baiduSecretKey: {
        serializedName: "properties.baiduSecretKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotificationHubResource: coreHttp.CompositeMapper = {
  serializedName: "NotificationHubResource",
  type: {
    name: "Composite",
    className: "NotificationHubResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      registrationTtl: {
        serializedName: "properties.registrationTtl",
        type: {
          name: "String"
        }
      },
      authorizationRules: {
        serializedName: "properties.authorizationRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedAccessAuthorizationRuleProperties"
            }
          }
        }
      },
      apnsCredential: {
        serializedName: "apnsCredential",
        type: {
          name: "Composite",
          className: "ApnsCredential"
        }
      },
      wnsCredential: {
        serializedName: "wnsCredential",
        type: {
          name: "Composite",
          className: "WnsCredential"
        }
      },
      gcmCredential: {
        serializedName: "gcmCredential",
        type: {
          name: "Composite",
          className: "GcmCredential"
        }
      },
      mpnsCredential: {
        serializedName: "mpnsCredential",
        type: {
          name: "Composite",
          className: "MpnsCredential"
        }
      },
      admCredential: {
        serializedName: "admCredential",
        type: {
          name: "Composite",
          className: "AdmCredential"
        }
      },
      baiduCredential: {
        serializedName: "baiduCredential",
        type: {
          name: "Composite",
          className: "BaiduCredential"
        }
      }
    }
  }
};

export const NotificationHubPatchParameters: coreHttp.CompositeMapper = {
  serializedName: "NotificationHubPatchParameters",
  type: {
    name: "Composite",
    className: "NotificationHubPatchParameters",
    modelProperties: {
      ...Resource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      registrationTtl: {
        serializedName: "properties.registrationTtl",
        type: {
          name: "String"
        }
      },
      authorizationRules: {
        serializedName: "properties.authorizationRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedAccessAuthorizationRuleProperties"
            }
          }
        }
      },
      apnsCredential: {
        serializedName: "apnsCredential",
        type: {
          name: "Composite",
          className: "ApnsCredential"
        }
      },
      wnsCredential: {
        serializedName: "wnsCredential",
        type: {
          name: "Composite",
          className: "WnsCredential"
        }
      },
      gcmCredential: {
        serializedName: "gcmCredential",
        type: {
          name: "Composite",
          className: "GcmCredential"
        }
      },
      mpnsCredential: {
        serializedName: "mpnsCredential",
        type: {
          name: "Composite",
          className: "MpnsCredential"
        }
      },
      admCredential: {
        serializedName: "admCredential",
        type: {
          name: "Composite",
          className: "AdmCredential"
        }
      },
      baiduCredential: {
        serializedName: "baiduCredential",
        type: {
          name: "Composite",
          className: "BaiduCredential"
        }
      }
    }
  }
};

export const DebugSendResponse: coreHttp.CompositeMapper = {
  serializedName: "DebugSendResponse",
  type: {
    name: "Composite",
    className: "DebugSendResponse",
    modelProperties: {
      ...Resource.type.modelProperties,
      success: {
        serializedName: "properties.success",
        type: {
          name: "Number"
        }
      },
      failure: {
        serializedName: "properties.failure",
        type: {
          name: "Number"
        }
      },
      results: {
        serializedName: "properties.results",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const NotificationHubListResult: coreHttp.CompositeMapper = {
  serializedName: "NotificationHubListResult",
  type: {
    name: "Composite",
    className: "NotificationHubListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NotificationHubResource" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PnsCredentialsResource: coreHttp.CompositeMapper = {
  serializedName: "PnsCredentialsResource",
  type: {
    name: "Composite",
    className: "PnsCredentialsResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      apnsCredential: {
        serializedName: "apnsCredential",
        type: {
          name: "Composite",
          className: "ApnsCredential"
        }
      },
      wnsCredential: {
        serializedName: "wnsCredential",
        type: {
          name: "Composite",
          className: "WnsCredential"
        }
      },
      gcmCredential: {
        serializedName: "gcmCredential",
        type: {
          name: "Composite",
          className: "GcmCredential"
        }
      },
      mpnsCredential: {
        serializedName: "mpnsCredential",
        type: {
          name: "Composite",
          className: "MpnsCredential"
        }
      },
      admCredential: {
        serializedName: "admCredential",
        type: {
          name: "Composite",
          className: "AdmCredential"
        }
      },
      baiduCredential: {
        serializedName: "baiduCredential",
        type: {
          name: "Composite",
          className: "BaiduCredential"
        }
      }
    }
  }
};

export const SubResource: coreHttp.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};
