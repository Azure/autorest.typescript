/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Result of the request to list NotificationHubs operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of NotificationHubs operations supported by the Microsoft.NotificationHubs resource provider.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
}

/**
 * A NotificationHubs REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.NotificationHubs
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Invoice, etc.
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  readonly operation?: string;
}

/**
 * Error response indicates NotificationHubs service is not able to process the incoming request. The reason is provided in the error message.
 */
export interface ErrorResponse {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Parameters supplied to the Check Name Availability for Namespace and NotificationHubs.
 */
export interface CheckAvailabilityParameters {
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  name: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * The sku of the created namespace
   */
  sku?: Sku;
  /**
   * True if the name is available and can be used to create new Namespace/NotificationHub. Otherwise false.
   */
  isAvailiable?: boolean;
}

/**
 * The Sku description for a namespace
 */
export interface Sku {
  /**
   * Name of the notification hub sku
   */
  name: SkuName;
  /**
   * The tier of particular sku
   */
  tier?: string;
  /**
   * The Sku size
   */
  size?: string;
  /**
   * The Sku Family
   */
  family?: string;
  /**
   * The capacity of the resource
   */
  capacity?: number;
}

export interface Resource {
  /**
   * Resource Id
   */
  readonly id?: string;
  /**
   * Resource name
   */
  readonly name?: string;
  /**
   * Resource type
   */
  readonly type?: string;
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * The sku of the created namespace
   */
  sku?: Sku;
}

/**
 * Description of a CheckAvailability resource.
 */
export type CheckAvailabilityResult = Resource & {
  /**
   * True if the name is available and can be used to create new Namespace/NotificationHub. Otherwise false.
   */
  isAvailiable?: boolean;
};

/**
 * Parameters supplied to the CreateOrUpdate Namespace operation.
 */
export type NamespaceCreateOrUpdateParameters = Resource & {
  /**
   * The name of the namespace.
   */
  namePropertiesName?: string;
  /**
   * Provisioning state of the Namespace.
   */
  provisioningState?: string;
  /**
   * Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
   */
  region?: string;
  /**
   * Identifier for Azure Insights metrics
   */
  readonly metricId?: string;
  /**
   * Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
   */
  status?: string;
  /**
   * The time the namespace was created.
   */
  createdAt?: Date;
  /**
   * The time the namespace was updated.
   */
  updatedAt?: Date;
  /**
   * Endpoint you can use to perform NotificationHub operations.
   */
  serviceBusEndpoint?: string;
  /**
   * The Id of the Azure subscription associated with the namespace.
   */
  subscriptionId?: string;
  /**
   * ScaleUnit where the namespace gets created
   */
  scaleUnit?: string;
  /**
   * Whether or not the namespace is currently enabled.
   */
  enabled?: boolean;
  /**
   * Whether or not the namespace is set as Critical.
   */
  critical?: boolean;
  /**
   * Data center for the namespace
   */
  dataCenter?: string;
  /**
   * The namespace type.
   */
  namespaceType?: NamespaceType;
};

/**
 * Description of a Namespace resource.
 */
export type NamespaceResource = Resource & {
  /**
   * The name of the namespace.
   */
  namePropertiesName?: string;
  /**
   * Provisioning state of the Namespace.
   */
  provisioningState?: string;
  /**
   * Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
   */
  region?: string;
  /**
   * Identifier for Azure Insights metrics
   */
  readonly metricId?: string;
  /**
   * Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
   */
  status?: string;
  /**
   * The time the namespace was created.
   */
  createdAt?: Date;
  /**
   * The time the namespace was updated.
   */
  updatedAt?: Date;
  /**
   * Endpoint you can use to perform NotificationHub operations.
   */
  serviceBusEndpoint?: string;
  /**
   * The Id of the Azure subscription associated with the namespace.
   */
  subscriptionId?: string;
  /**
   * ScaleUnit where the namespace gets created
   */
  scaleUnit?: string;
  /**
   * Whether or not the namespace is currently enabled.
   */
  enabled?: boolean;
  /**
   * Whether or not the namespace is set as Critical.
   */
  critical?: boolean;
  /**
   * Data center for the namespace
   */
  dataCenter?: string;
  /**
   * The namespace type.
   */
  namespaceType?: NamespaceType;
};

/**
 * Parameters supplied to the Patch Namespace operation.
 */
export interface NamespacePatchParameters {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * The sku of the created namespace
   */
  sku?: Sku;
}

/**
 * Parameters supplied to the CreateOrUpdate Namespace AuthorizationRules.
 */
export interface SharedAccessAuthorizationRuleCreateOrUpdateParameters {
  /**
   * Properties of the Namespace AuthorizationRules.
   */
  properties: SharedAccessAuthorizationRuleProperties;
}

/**
 * SharedAccessAuthorizationRule properties.
 */
export interface SharedAccessAuthorizationRuleProperties {
  /**
   * The rights associated with the rule.
   */
  rights?: AccessRights[];
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  readonly primaryKey?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  readonly secondaryKey?: string;
  /**
   * A string that describes the authorization rule.
   */
  readonly keyName?: string;
  /**
   * A string that describes the claim type
   */
  readonly claimType?: string;
  /**
   * A string that describes the claim value
   */
  readonly claimValue?: string;
  /**
   * The last modified time for this rule
   */
  readonly modifiedTime?: string;
  /**
   * The created time for this rule
   */
  readonly createdTime?: string;
  /**
   * The revision number for the rule
   */
  readonly revision?: number;
}

/**
 * Description of a Namespace AuthorizationRules.
 */
export type SharedAccessAuthorizationRuleResource = Resource & {
  /**
   * The rights associated with the rule.
   */
  rights?: AccessRights[];
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  readonly primaryKey?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   */
  readonly secondaryKey?: string;
  /**
   * A string that describes the authorization rule.
   */
  readonly keyName?: string;
  /**
   * A string that describes the claim type
   */
  readonly claimType?: string;
  /**
   * A string that describes the claim value
   */
  readonly claimValue?: string;
  /**
   * The last modified time for this rule
   */
  readonly modifiedTime?: string;
  /**
   * The created time for this rule
   */
  readonly createdTime?: string;
  /**
   * The revision number for the rule
   */
  readonly revision?: number;
};

/**
 * The response of the List Namespace operation.
 */
export interface NamespaceListResult {
  /**
   * Result of the List Namespace operation.
   */
  value?: NamespaceResource[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of Namespaces
   */
  nextLink?: string;
}

/**
 * The response of the List Namespace operation.
 */
export interface SharedAccessAuthorizationRuleListResult {
  /**
   * Result of the List AuthorizationRules operation.
   */
  value?: SharedAccessAuthorizationRuleResource[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of AuthorizationRules
   */
  nextLink?: string;
}

/**
 * Namespace/NotificationHub Regenerate Keys
 */
export interface PolicykeyResource {
  /**
   * Name of the key that has to be regenerated for the Namespace/Notification Hub Authorization Rule. The value can be Primary Key/Secondary Key.
   */
  policyKey?: string;
}

/**
 * Namespace/NotificationHub Connection String
 */
export interface ResourceListKeys {
  /**
   * PrimaryConnectionString of the AuthorizationRule.
   */
  primaryConnectionString?: string;
  /**
   * SecondaryConnectionString of the created AuthorizationRule
   */
  secondaryConnectionString?: string;
  /**
   * PrimaryKey of the created AuthorizationRule.
   */
  primaryKey?: string;
  /**
   * SecondaryKey of the created AuthorizationRule
   */
  secondaryKey?: string;
  /**
   * KeyName of the created AuthorizationRule
   */
  keyName?: string;
}

/**
 * Parameters supplied to the CreateOrUpdate NotificationHub operation.
 */
export type NotificationHubCreateOrUpdateParameters = Resource & {
  /**
   * The NotificationHub name.
   */
  namePropertiesName?: string;
  /**
   * The RegistrationTtl of the created NotificationHub
   */
  registrationTtl?: string;
  /**
   * The AuthorizationRules of the created NotificationHub
   */
  authorizationRules?: SharedAccessAuthorizationRuleProperties[];
  /**
   * The ApnsCredential of the created NotificationHub
   */
  apnsCredential?: ApnsCredential;
  /**
   * The WnsCredential of the created NotificationHub
   */
  wnsCredential?: WnsCredential;
  /**
   * The GcmCredential of the created NotificationHub
   */
  gcmCredential?: GcmCredential;
  /**
   * The MpnsCredential of the created NotificationHub
   */
  mpnsCredential?: MpnsCredential;
  /**
   * The AdmCredential of the created NotificationHub
   */
  admCredential?: AdmCredential;
  /**
   * The BaiduCredential of the created NotificationHub
   */
  baiduCredential?: BaiduCredential;
};

/**
 * Description of a NotificationHub ApnsCredential.
 */
export interface ApnsCredential {
  /**
   * The APNS certificate.
   */
  apnsCertificate?: string;
  /**
   * The certificate key.
   */
  certificateKey?: string;
  /**
   * The endpoint of this credential.
   */
  endpoint?: string;
  /**
   * The APNS certificate Thumbprint
   */
  thumbprint?: string;
  /**
   * A 10-character key identifier (kid) key, obtained from your developer account
   */
  keyId?: string;
  /**
   * The name of the application
   */
  appName?: string;
  /**
   * The issuer (iss) registered claim key, whose value is your 10-character Team ID, obtained from your developer account
   */
  appId?: string;
  /**
   * Provider Authentication Token, obtained through your developer account
   */
  token?: string;
}

/**
 * Description of a NotificationHub WnsCredential.
 */
export interface WnsCredential {
  /**
   * The package ID for this credential.
   */
  packageSid?: string;
  /**
   * The secret key.
   */
  secretKey?: string;
  /**
   * The Windows Live endpoint.
   */
  windowsLiveEndpoint?: string;
}

/**
 * Description of a NotificationHub GcmCredential.
 */
export interface GcmCredential {
  /**
   * The GCM endpoint.
   */
  gcmEndpoint?: string;
  /**
   * The Google API key.
   */
  googleApiKey?: string;
}

/**
 * Description of a NotificationHub MpnsCredential.
 */
export interface MpnsCredential {
  /**
   * The MPNS certificate.
   */
  mpnsCertificate?: string;
  /**
   * The certificate key for this credential.
   */
  certificateKey?: string;
  /**
   * The MPNS certificate Thumbprint
   */
  thumbprint?: string;
}

/**
 * Description of a NotificationHub AdmCredential.
 */
export interface AdmCredential {
  /**
   * The client identifier.
   */
  clientId?: string;
  /**
   * The credential secret access key.
   */
  clientSecret?: string;
  /**
   * The URL of the authorization token.
   */
  authTokenUrl?: string;
}

/**
 * Description of a NotificationHub BaiduCredential.
 */
export interface BaiduCredential {
  /**
   * Baidu Api Key.
   */
  baiduApiKey?: string;
  /**
   * Baidu Endpoint.
   */
  baiduEndPoint?: string;
  /**
   * Baidu Secret Key
   */
  baiduSecretKey?: string;
}

/**
 * Description of a NotificationHub Resource.
 */
export type NotificationHubResource = Resource & {
  /**
   * The NotificationHub name.
   */
  namePropertiesName?: string;
  /**
   * The RegistrationTtl of the created NotificationHub
   */
  registrationTtl?: string;
  /**
   * The AuthorizationRules of the created NotificationHub
   */
  authorizationRules?: SharedAccessAuthorizationRuleProperties[];
  /**
   * The ApnsCredential of the created NotificationHub
   */
  apnsCredential?: ApnsCredential;
  /**
   * The WnsCredential of the created NotificationHub
   */
  wnsCredential?: WnsCredential;
  /**
   * The GcmCredential of the created NotificationHub
   */
  gcmCredential?: GcmCredential;
  /**
   * The MpnsCredential of the created NotificationHub
   */
  mpnsCredential?: MpnsCredential;
  /**
   * The AdmCredential of the created NotificationHub
   */
  admCredential?: AdmCredential;
  /**
   * The BaiduCredential of the created NotificationHub
   */
  baiduCredential?: BaiduCredential;
};

/**
 * Parameters supplied to the patch NotificationHub operation.
 */
export type NotificationHubPatchParameters = Resource & {
  /**
   * The NotificationHub name.
   */
  namePropertiesName?: string;
  /**
   * The RegistrationTtl of the created NotificationHub
   */
  registrationTtl?: string;
  /**
   * The AuthorizationRules of the created NotificationHub
   */
  authorizationRules?: SharedAccessAuthorizationRuleProperties[];
  /**
   * The ApnsCredential of the created NotificationHub
   */
  apnsCredential?: ApnsCredential;
  /**
   * The WnsCredential of the created NotificationHub
   */
  wnsCredential?: WnsCredential;
  /**
   * The GcmCredential of the created NotificationHub
   */
  gcmCredential?: GcmCredential;
  /**
   * The MpnsCredential of the created NotificationHub
   */
  mpnsCredential?: MpnsCredential;
  /**
   * The AdmCredential of the created NotificationHub
   */
  admCredential?: AdmCredential;
  /**
   * The BaiduCredential of the created NotificationHub
   */
  baiduCredential?: BaiduCredential;
};

/**
 * Description of a NotificationHub Resource.
 */
export type DebugSendResponse = Resource & {
  /**
   * successful send
   */
  success?: number;
  /**
   * send failure
   */
  failure?: number;
  /**
   * actual failure description
   */
  results?: any;
};

/**
 * The response of the List NotificationHub operation.
 */
export interface NotificationHubListResult {
  /**
   * Result of the List NotificationHub operation.
   */
  value?: NotificationHubResource[];
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of NotificationHub
   */
  nextLink?: string;
}

/**
 * Description of a NotificationHub PNS Credentials.
 */
export type PnsCredentialsResource = Resource & {
  /**
   * The ApnsCredential of the created NotificationHub
   */
  apnsCredential?: ApnsCredential;
  /**
   * The WnsCredential of the created NotificationHub
   */
  wnsCredential?: WnsCredential;
  /**
   * The GcmCredential of the created NotificationHub
   */
  gcmCredential?: GcmCredential;
  /**
   * The MpnsCredential of the created NotificationHub
   */
  mpnsCredential?: MpnsCredential;
  /**
   * The AdmCredential of the created NotificationHub
   */
  admCredential?: AdmCredential;
  /**
   * The BaiduCredential of the created NotificationHub
   */
  baiduCredential?: BaiduCredential;
};

export interface SubResource {
  /**
   * Resource Id
   */
  id?: string;
}

/**
 * Defines values for SkuName.
 */
export type SkuName = "Free" | "Basic" | "Standard";
/**
 * Defines values for NamespaceType.
 */
export type NamespaceType = "Messaging" | "NotificationHub";
/**
 * Defines values for AccessRights.
 */
export type AccessRights = "Manage" | "Send" | "Listen";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the checkAvailability operation.
 */
export type NamespacesCheckAvailabilityResponse = CheckAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckAvailabilityResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NamespacesCreateOrUpdateResponse = NamespaceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamespaceResource;
  };
};

/**
 * Contains response data for the patch operation.
 */
export type NamespacesPatchResponse = NamespaceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamespaceResource;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NamespacesGetResponse = NamespaceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamespaceResource;
  };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type NamespacesCreateOrUpdateAuthorizationRuleResponse = SharedAccessAuthorizationRuleResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleResource;
  };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type NamespacesGetAuthorizationRuleResponse = SharedAccessAuthorizationRuleResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleResource;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NamespacesListResponse = NamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamespaceListResult;
  };
};

/**
 * Contains response data for the listAll operation.
 */
export type NamespacesListAllResponse = NamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamespaceListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type NamespacesListAuthorizationRulesResponse = SharedAccessAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type NamespacesListKeysResponse = SharedAccessAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type NamespacesRegenerateKeysResponse = ResourceListKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceListKeys;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NamespacesListNextResponse = NamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamespaceListResult;
  };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NamespacesListAllNextResponse = NamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamespaceListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type NamespacesListAuthorizationRulesNextResponse = SharedAccessAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the checkNotificationHubAvailability operation.
 */
export type NotificationHubsCheckNotificationHubAvailabilityResponse = CheckAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckAvailabilityResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NotificationHubsCreateOrUpdateResponse = NotificationHubResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationHubResource;
  };
};

/**
 * Optional parameters.
 */
export interface NotificationHubsPatchOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameters supplied to patch a NotificationHub Resource.
   */
  parameters?: NotificationHubPatchParameters;
}

/**
 * Contains response data for the patch operation.
 */
export type NotificationHubsPatchResponse = NotificationHubResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationHubResource;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NotificationHubsGetResponse = NotificationHubResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationHubResource;
  };
};

/**
 * Optional parameters.
 */
export interface NotificationHubsDebugSendOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Debug send parameters
   */
  parameters?: any;
}

/**
 * Contains response data for the debugSend operation.
 */
export type NotificationHubsDebugSendResponse = DebugSendResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DebugSendResponse;
  };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type NotificationHubsCreateOrUpdateAuthorizationRuleResponse = SharedAccessAuthorizationRuleResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleResource;
  };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type NotificationHubsGetAuthorizationRuleResponse = SharedAccessAuthorizationRuleResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleResource;
  };
};

/**
 * Contains response data for the list operation.
 */
export type NotificationHubsListResponse = NotificationHubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationHubListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type NotificationHubsListAuthorizationRulesResponse = SharedAccessAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleListResult;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type NotificationHubsListKeysResponse = ResourceListKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceListKeys;
  };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type NotificationHubsRegenerateKeysResponse = ResourceListKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ResourceListKeys;
  };
};

/**
 * Contains response data for the getPnsCredentials operation.
 */
export type NotificationHubsGetPnsCredentialsResponse = PnsCredentialsResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PnsCredentialsResource;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type NotificationHubsListNextResponse = NotificationHubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotificationHubListResult;
  };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type NotificationHubsListAuthorizationRulesNextResponse = SharedAccessAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedAccessAuthorizationRuleListResult;
  };
};

/**
 * Optional parameters.
 */
export interface NotificationHubsManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
