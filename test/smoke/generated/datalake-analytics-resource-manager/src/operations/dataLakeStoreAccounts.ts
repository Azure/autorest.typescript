/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataLakeAnalyticsAccountManagementClient } from "../dataLakeAnalyticsAccountManagementClient";
import {
  DataLakeStoreAccountsListByAccountOptionalParams,
  DataLakeStoreAccountsListByAccountResponse,
  DataLakeStoreAccountsAddOptionalParams,
  DataLakeStoreAccountsGetResponse,
  DataLakeStoreAccountsListByAccountNextOptionalParams,
  DataLakeStoreAccountsListByAccountNextResponse
} from "../models";

/**
 * Class representing a DataLakeStoreAccounts.
 */
export class DataLakeStoreAccounts {
  private readonly client: DataLakeAnalyticsAccountManagementClient;

  /**
   * Initialize a new instance of the class DataLakeStoreAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: DataLakeAnalyticsAccountManagementClient) {
    this.client = client;
  }

  /**
   * Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account.
   * The response includes a link to the next page, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param options The options parameters.
   */
  listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: DataLakeStoreAccountsListByAccountOptionalParams
  ): Promise<DataLakeStoreAccountsListByAccountResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listByAccountOperationSpec
    ) as Promise<DataLakeStoreAccountsListByAccountResponse>;
  }

  /**
   * Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to add.
   * @param options The options parameters.
   */
  add(
    resourceGroupName: string,
    accountName: string,
    dataLakeStoreAccountName: string,
    options?: DataLakeStoreAccountsAddOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        dataLakeStoreAccountName,
        options: operationOptions
      },
      addOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to retrieve
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    dataLakeStoreAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DataLakeStoreAccountsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        dataLakeStoreAccountName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<DataLakeStoreAccountsGetResponse>;
  }

  /**
   * Updates the Data Lake Analytics account specified to remove the specified Data Lake Store account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to remove
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    dataLakeStoreAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        dataLakeStoreAccountName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListByAccountNext
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
   * @param options The options parameters.
   */
  listByAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: DataLakeStoreAccountsListByAccountNextOptionalParams
  ): Promise<DataLakeStoreAccountsListByAccountNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options: operationOptions },
      listByAccountNextOperationSpec
    ) as Promise<DataLakeStoreAccountsListByAccountNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByAccountOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataLakeStoreAccountInformationListResult
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.orderby,
    Parameters.count,
    Parameters.apiVersion
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  serializer
};
const addOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
  httpMethod: "PUT",
  responses: { 200: {} },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.dataLakeStoreAccountName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataLakeStoreAccountInformation
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.dataLakeStoreAccountName1
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.dataLakeStoreAccountName2
  ],
  serializer
};
const listByAccountNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataLakeStoreAccountInformationListResult
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.orderby,
    Parameters.count,
    Parameters.apiVersion
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink2
  ],
  serializer
};
