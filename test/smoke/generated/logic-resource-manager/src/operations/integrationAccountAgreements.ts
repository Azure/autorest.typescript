/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import {
  IntegrationAccountAgreementsListOptionalParams,
  IntegrationAccountAgreementsListResponse,
  IntegrationAccountAgreementsGetResponse,
  IntegrationAccountAgreement,
  IntegrationAccountAgreementsCreateOrUpdateResponse,
  GetCallbackUrlParameters,
  IntegrationAccountAgreementsListContentCallbackUrlResponse,
  IntegrationAccountAgreementsListNextOptionalParams,
  IntegrationAccountAgreementsListNextResponse
} from "../models";

/**
 * Class representing a IntegrationAccountAgreements.
 */
export class IntegrationAccountAgreements {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class IntegrationAccountAgreements class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of integration account agreements.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountAgreementsListOptionalParams
  ): Promise<IntegrationAccountAgreementsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, options: operationOptions },
      listOperationSpec
    ) as Promise<IntegrationAccountAgreementsListResponse>;
  }

  /**
   * Gets an integration account agreement.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param agreementName The integration account agreement name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    integrationAccountName: string,
    agreementName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountAgreementsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        agreementName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<IntegrationAccountAgreementsGetResponse>;
  }

  /**
   * Creates or updates an integration account agreement.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param agreementName The integration account agreement name.
   * @param agreement The integration account agreement.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    integrationAccountName: string,
    agreementName: string,
    agreement: IntegrationAccountAgreement,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountAgreementsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        agreementName,
        agreement,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<IntegrationAccountAgreementsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an integration account agreement.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param agreementName The integration account agreement name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    integrationAccountName: string,
    agreementName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        agreementName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get the content callback url.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param listContentCallbackUrl The callback url parameters.
   * @param agreementName The integration account agreement name.
   * @param options The options parameters.
   */
  listContentCallbackUrl(
    resourceGroupName: string,
    integrationAccountName: string,
    listContentCallbackUrl: GetCallbackUrlParameters,
    agreementName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountAgreementsListContentCallbackUrlResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        listContentCallbackUrl,
        agreementName,
        options: operationOptions
      },
      listContentCallbackUrlOperationSpec
    ) as Promise<IntegrationAccountAgreementsListContentCallbackUrlResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The resource group name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    nextLink: string,
    integrationAccountName: string,
    options?: IntegrationAccountAgreementsListNextOptionalParams
  ): Promise<IntegrationAccountAgreementsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        nextLink,
        integrationAccountName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<IntegrationAccountAgreementsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountAgreementListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter7],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountAgreement
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.agreementName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountAgreement
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.agreement,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.agreementName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.agreementName
  ],
  serializer
};
const listContentCallbackUrlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}/listContentCallbackUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.listContentCallbackUrl,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.agreementName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountAgreementListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter7],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink2,
    Parameters.integrationAccountName
  ],
  serializer
};
