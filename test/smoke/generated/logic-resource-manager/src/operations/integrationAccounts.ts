/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import {
  IntegrationAccountsListBySubscriptionOptionalParams,
  IntegrationAccountsListBySubscriptionResponse,
  IntegrationAccountsListByResourceGroupOptionalParams,
  IntegrationAccountsListByResourceGroupResponse,
  IntegrationAccountsGetResponse,
  IntegrationAccount,
  IntegrationAccountsCreateOrUpdateResponse,
  IntegrationAccountsUpdateResponse,
  GetCallbackUrlParameters,
  IntegrationAccountsListCallbackUrlResponse,
  ListKeyVaultKeysDefinition,
  IntegrationAccountsListKeyVaultKeysResponse,
  TrackingEventsDefinition,
  RegenerateActionParameter,
  IntegrationAccountsRegenerateAccessKeyResponse,
  IntegrationAccountsListBySubscriptionNextOptionalParams,
  IntegrationAccountsListBySubscriptionNextResponse,
  IntegrationAccountsListByResourceGroupNextOptionalParams,
  IntegrationAccountsListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a IntegrationAccounts.
 */
export class IntegrationAccounts {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class IntegrationAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of integration accounts by subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: IntegrationAccountsListBySubscriptionOptionalParams
  ): Promise<IntegrationAccountsListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<IntegrationAccountsListBySubscriptionResponse>;
  }

  /**
   * Gets a list of integration accounts by resource group.
   * @param resourceGroupName The resource group name.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: IntegrationAccountsListByResourceGroupOptionalParams
  ): Promise<IntegrationAccountsListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<IntegrationAccountsListByResourceGroupResponse>;
  }

  /**
   * Gets an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, options: operationOptions },
      getOperationSpec
    ) as Promise<IntegrationAccountsGetResponse>;
  }

  /**
   * Creates or updates an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param integrationAccount The integration account.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    integrationAccountName: string,
    integrationAccount: IntegrationAccount,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        integrationAccount,
        options: operationOptions
      },
      createOrUpdateOperationSpec
    ) as Promise<IntegrationAccountsCreateOrUpdateResponse>;
  }

  /**
   * Updates an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param integrationAccount The integration account.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    integrationAccountName: string,
    integrationAccount: IntegrationAccount,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        integrationAccount,
        options: operationOptions
      },
      updateOperationSpec
    ) as Promise<IntegrationAccountsUpdateResponse>;
  }

  /**
   * Deletes an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the integration account callback URL.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param parameters The callback URL parameters.
   * @param options The options parameters.
   */
  listCallbackUrl(
    resourceGroupName: string,
    integrationAccountName: string,
    parameters: GetCallbackUrlParameters,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountsListCallbackUrlResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        parameters,
        options: operationOptions
      },
      listCallbackUrlOperationSpec
    ) as Promise<IntegrationAccountsListCallbackUrlResponse>;
  }

  /**
   * Gets the integration account's Key Vault keys.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param listKeyVaultKeys The key vault parameters.
   * @param options The options parameters.
   */
  listKeyVaultKeys(
    resourceGroupName: string,
    integrationAccountName: string,
    listKeyVaultKeys: ListKeyVaultKeysDefinition,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountsListKeyVaultKeysResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        listKeyVaultKeys,
        options: operationOptions
      },
      listKeyVaultKeysOperationSpec
    ) as Promise<IntegrationAccountsListKeyVaultKeysResponse>;
  }

  /**
   * Logs the integration account's tracking events.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param logTrackingEvents The callback URL parameters.
   * @param options The options parameters.
   */
  logTrackingEvents(
    resourceGroupName: string,
    integrationAccountName: string,
    logTrackingEvents: TrackingEventsDefinition,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        logTrackingEvents,
        options: operationOptions
      },
      logTrackingEventsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Regenerates the integration account access key.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param regenerateAccessKey The access key type.
   * @param options The options parameters.
   */
  regenerateAccessKey(
    resourceGroupName: string,
    integrationAccountName: string,
    regenerateAccessKey: RegenerateActionParameter,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationAccountsRegenerateAccessKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        regenerateAccessKey,
        options: operationOptions
      },
      regenerateAccessKeyOperationSpec
    ) as Promise<IntegrationAccountsRegenerateAccessKeyResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: IntegrationAccountsListBySubscriptionNextOptionalParams
  ): Promise<IntegrationAccountsListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<IntegrationAccountsListBySubscriptionNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The resource group name.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: IntegrationAccountsListByResourceGroupNextOptionalParams
  ): Promise<IntegrationAccountsListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<IntegrationAccountsListByResourceGroupNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.integrationAccount,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.integrationAccount,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  serializer
};
const listCallbackUrlOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listCallbackUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CallbackUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listKeyVaultKeysOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listKeyVaultKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyVaultKeyCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.listKeyVaultKeys,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const logTrackingEventsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/logTrackingEvents",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.logTrackingEvents,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const regenerateAccessKeyOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/regenerateAccessKey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.regenerateAccessKey,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink1
  ],
  serializer
};
