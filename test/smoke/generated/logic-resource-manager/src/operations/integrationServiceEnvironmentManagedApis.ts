/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  IntegrationServiceEnvironmentManagedApisListResponse,
  IntegrationServiceEnvironmentManagedApisGetResponse,
  IntegrationServiceEnvironmentManagedApisPutResponse,
  IntegrationServiceEnvironmentManagedApisListNextResponse
} from "../models";

/**
 * Class representing a IntegrationServiceEnvironmentManagedApis.
 */
export class IntegrationServiceEnvironmentManagedApis {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class IntegrationServiceEnvironmentManagedApis class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets the integration service environment managed Apis.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    integrationServiceEnvironmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationServiceEnvironmentManagedApisListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<IntegrationServiceEnvironmentManagedApisListResponse>;
  }

  /**
   * Gets the integration service environment managed Api.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param resourceGroup The resource group name.
   * @param apiName The api name.
   * @param options The options parameters.
   */
  get(
    integrationServiceEnvironmentName: string,
    resourceGroup: string,
    apiName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationServiceEnvironmentManagedApisGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        integrationServiceEnvironmentName,
        resourceGroup,
        apiName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<IntegrationServiceEnvironmentManagedApisGetResponse>;
  }

  /**
   * Puts the integration service environment managed Api.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param resourceGroup The resource group name.
   * @param apiName The api name.
   * @param options The options parameters.
   */
  async put(
    integrationServiceEnvironmentName: string,
    resourceGroup: string,
    apiName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<IntegrationServiceEnvironmentManagedApisPutResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      integrationServiceEnvironmentName,
      resourceGroup,
      apiName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        IntegrationServiceEnvironmentManagedApisPutResponse
      >;
    const initialOperationResult = await sendOperation(args, putOperationSpec);

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: putOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the integration service environment managed Api.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param apiName The api name.
   * @param options The options parameters.
   */
  async delete(
    resourceGroup: string,
    integrationServiceEnvironmentName: string,
    apiName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroup,
      integrationServiceEnvironmentName,
      apiName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroup: string,
    integrationServiceEnvironmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationServiceEnvironmentManagedApisListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        nextLink,
        resourceGroup,
        integrationServiceEnvironmentName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<IntegrationServiceEnvironmentManagedApisListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedApiListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedApi
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
    Parameters.resourceGroup1,
    Parameters.apiName
  ],
  serializer
};
const putOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedApi
    },
    201: {
      bodyMapper: Mappers.ManagedApi
    },
    202: {
      bodyMapper: Mappers.ManagedApi
    },
    204: {
      bodyMapper: Mappers.ManagedApi
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
    Parameters.resourceGroup1,
    Parameters.apiName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName,
    Parameters.apiName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedApiListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink2,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  serializer
};
