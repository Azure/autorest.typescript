/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import {
  WorkflowTriggerHistoriesListOptionalParams,
  WorkflowTriggerHistoriesListResponse,
  WorkflowTriggerHistoriesGetResponse,
  WorkflowTriggerHistoriesListNextOptionalParams,
  WorkflowTriggerHistoriesListNextResponse
} from "../models";

/**
 * Class representing a WorkflowTriggerHistories.
 */
export class WorkflowTriggerHistories {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class WorkflowTriggerHistories class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of workflow trigger histories.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param triggerName The workflow trigger name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    workflowName: string,
    triggerName: string,
    options?: WorkflowTriggerHistoriesListOptionalParams
  ): Promise<WorkflowTriggerHistoriesListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        triggerName,
        options: operationOptions
      },
      listOperationSpec
    ) as Promise<WorkflowTriggerHistoriesListResponse>;
  }

  /**
   * Gets a workflow trigger history.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param triggerName The workflow trigger name.
   * @param historyName The workflow trigger history name. Corresponds to the run name for triggers that
   *                    resulted in a run.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    triggerName: string,
    historyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkflowTriggerHistoriesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        triggerName,
        historyName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<WorkflowTriggerHistoriesGetResponse>;
  }

  /**
   * Resubmits a workflow run based on the trigger history.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param triggerName The workflow trigger name.
   * @param historyName The workflow trigger history name. Corresponds to the run name for triggers that
   *                    resulted in a run.
   * @param options The options parameters.
   */
  resubmit(
    resourceGroupName: string,
    workflowName: string,
    triggerName: string,
    historyName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        triggerName,
        historyName,
        options: operationOptions
      },
      resubmitOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param triggerName The workflow trigger name.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    workflowName: string,
    nextLink: string,
    triggerName: string,
    options?: WorkflowTriggerHistoriesListNextOptionalParams
  ): Promise<WorkflowTriggerHistoriesListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        nextLink,
        triggerName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<WorkflowTriggerHistoriesListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerHistoryListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.triggerName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories/{historyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerHistory
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.triggerName,
    Parameters.historyName
  ],
  serializer
};
const resubmitOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories/{historyName}/resubmit",
  httpMethod: "POST",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.triggerName,
    Parameters.historyName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerHistoryListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.nextLink2,
    Parameters.triggerName
  ],
  serializer
};
