/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import {
  WorkflowVersionsListOptionalParams,
  WorkflowVersionsListResponse,
  WorkflowVersionsGetResponse,
  WorkflowVersionsListNextOptionalParams,
  WorkflowVersionsListNextResponse
} from "../models";

/**
 * Class representing a WorkflowVersions.
 */
export class WorkflowVersions {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class WorkflowVersions class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of workflow versions.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowVersionsListOptionalParams
  ): Promise<WorkflowVersionsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options: operationOptions },
      listOperationSpec
    ) as Promise<WorkflowVersionsListResponse>;
  }

  /**
   * Gets a workflow version.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param versionId The workflow versionId.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    versionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkflowVersionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, versionId, options: operationOptions },
      getOperationSpec
    ) as Promise<WorkflowVersionsGetResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    workflowName: string,
    nextLink: string,
    options?: WorkflowVersionsListNextOptionalParams
  ): Promise<WorkflowVersionsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, nextLink, options: operationOptions },
      listNextOperationSpec
    ) as Promise<WorkflowVersionsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowVersion
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.versionId
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.nextLink2
  ],
  serializer
};
