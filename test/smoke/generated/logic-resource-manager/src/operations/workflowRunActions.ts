/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import {
  WorkflowRunActionsListOptionalParams,
  WorkflowRunActionsListResponse,
  WorkflowRunActionsGetResponse,
  WorkflowRunActionsListExpressionTracesResponse,
  WorkflowRunActionsListNextOptionalParams,
  WorkflowRunActionsListNextResponse
} from "../models";

/**
 * Class representing a WorkflowRunActions.
 */
export class WorkflowRunActions {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class WorkflowRunActions class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of workflow run actions.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param runName The workflow run name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    options?: WorkflowRunActionsListOptionalParams
  ): Promise<WorkflowRunActionsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, runName, options: operationOptions },
      listOperationSpec
    ) as Promise<WorkflowRunActionsListResponse>;
  }

  /**
   * Gets a workflow run action.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param runName The workflow run name.
   * @param actionName The workflow action name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkflowRunActionsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        runName,
        actionName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<WorkflowRunActionsGetResponse>;
  }

  /**
   * Lists a workflow run expression trace.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param runName The workflow run name.
   * @param actionName The workflow action name.
   * @param options The options parameters.
   */
  listExpressionTraces(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<WorkflowRunActionsListExpressionTracesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        runName,
        actionName,
        options: operationOptions
      },
      listExpressionTracesOperationSpec
    ) as Promise<WorkflowRunActionsListExpressionTracesResponse>;
  }

  /**
   * ListNext
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param runName The workflow run name.
   * @param options The options parameters.
   */
  listNext(
    resourceGroupName: string,
    workflowName: string,
    nextLink: string,
    runName: string,
    options?: WorkflowRunActionsListNextOptionalParams
  ): Promise<WorkflowRunActionsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        nextLink,
        runName,
        options: operationOptions
      },
      listNextOperationSpec
    ) as Promise<WorkflowRunActionsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowRunActionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.runName
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowRunAction
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.runName,
    Parameters.actionName
  ],
  serializer
};
const listExpressionTracesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExpressionTraces
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.runName,
    Parameters.actionName
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowRunActionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.nextLink2,
    Parameters.runName
  ],
  serializer
};
