/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  IntegrationServiceEnvironmentsListBySubscriptionOptionalParams,
  IntegrationServiceEnvironmentsListBySubscriptionResponse,
  IntegrationServiceEnvironmentsListByResourceGroupOptionalParams,
  IntegrationServiceEnvironmentsListByResourceGroupResponse,
  IntegrationServiceEnvironmentsGetResponse,
  IntegrationServiceEnvironment,
  IntegrationServiceEnvironmentsCreateOrUpdateResponse,
  IntegrationServiceEnvironmentsUpdateResponse,
  IntegrationServiceEnvironmentsListBySubscriptionNextOptionalParams,
  IntegrationServiceEnvironmentsListBySubscriptionNextResponse,
  IntegrationServiceEnvironmentsListByResourceGroupNextOptionalParams,
  IntegrationServiceEnvironmentsListByResourceGroupNextResponse
} from "../models";

/**
 * Class representing a IntegrationServiceEnvironments.
 */
export class IntegrationServiceEnvironments {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class IntegrationServiceEnvironments class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of integration service environments by subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: IntegrationServiceEnvironmentsListBySubscriptionOptionalParams
  ): Promise<IntegrationServiceEnvironmentsListBySubscriptionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listBySubscriptionOperationSpec
    ) as Promise<IntegrationServiceEnvironmentsListBySubscriptionResponse>;
  }

  /**
   * Gets a list of integration service environments by resource group.
   * @param resourceGroup The resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroup: string,
    options?: IntegrationServiceEnvironmentsListByResourceGroupOptionalParams
  ): Promise<IntegrationServiceEnvironmentsListByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroup, options: operationOptions },
      listByResourceGroupOperationSpec
    ) as Promise<IntegrationServiceEnvironmentsListByResourceGroupResponse>;
  }

  /**
   * Gets an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    integrationServiceEnvironmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<IntegrationServiceEnvironmentsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        options: operationOptions
      },
      getOperationSpec
    ) as Promise<IntegrationServiceEnvironmentsGetResponse>;
  }

  /**
   * Creates or updates an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param integrationServiceEnvironment The integration service environment.
   * @param options The options parameters.
   */
  async createOrUpdate(
    resourceGroup: string,
    integrationServiceEnvironmentName: string,
    integrationServiceEnvironment: IntegrationServiceEnvironment,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<IntegrationServiceEnvironmentsCreateOrUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroup,
      integrationServiceEnvironmentName,
      integrationServiceEnvironment,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        IntegrationServiceEnvironmentsCreateOrUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOrUpdateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOrUpdateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Updates an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param integrationServiceEnvironment The integration service environment.
   * @param options The options parameters.
   */
  async update(
    resourceGroup: string,
    integrationServiceEnvironmentName: string,
    integrationServiceEnvironment: IntegrationServiceEnvironment,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<IntegrationServiceEnvironmentsUpdateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroup,
      integrationServiceEnvironmentName,
      integrationServiceEnvironment,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        IntegrationServiceEnvironmentsUpdateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    integrationServiceEnvironmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        options: operationOptions
      },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Restarts an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  restart(
    resourceGroup: string,
    integrationServiceEnvironmentName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        options: operationOptions
      },
      restartOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  listBySubscriptionNext(
    nextLink: string,
    options?: IntegrationServiceEnvironmentsListBySubscriptionNextOptionalParams
  ): Promise<IntegrationServiceEnvironmentsListBySubscriptionNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listBySubscriptionNextOperationSpec
    ) as Promise<IntegrationServiceEnvironmentsListBySubscriptionNextResponse>;
  }

  /**
   * ListByResourceGroupNext
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param resourceGroup The resource group.
   * @param options The options parameters.
   */
  listByResourceGroupNext(
    nextLink: string,
    resourceGroup: string,
    options?: IntegrationServiceEnvironmentsListByResourceGroupNextOptionalParams
  ): Promise<IntegrationServiceEnvironmentsListByResourceGroupNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroup, options: operationOptions },
      listByResourceGroupNextOperationSpec
    ) as Promise<IntegrationServiceEnvironmentsListByResourceGroupNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  serializer
};
const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    201: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    202: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    204: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.integrationServiceEnvironment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    201: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    202: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    204: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.integrationServiceEnvironment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  serializer
};
const restartOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/restart",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  serializer
};
const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  serializer
};
const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink1,
    Parameters.resourceGroup
  ],
  serializer
};
