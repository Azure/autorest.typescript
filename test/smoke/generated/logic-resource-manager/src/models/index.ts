/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The list of workflows.
 */
export interface WorkflowListResult {
  /**
   * The list of workflows.
   */
  value?: Workflow[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The base resource type.
 */
export interface Resource {
  /**
   * The resource id.
   */
  readonly id?: string;
  /**
   * Gets the resource name.
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   */
  readonly type?: string;
  /**
   * The resource location.
   */
  location?: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The workflow type.
 */
export type Workflow = Resource & {
  /**
   * Gets the provisioning state.
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /**
   * Gets the created time.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   */
  readonly changedTime?: Date;
  /**
   * The state.
   */
  state?: WorkflowState;
  /**
   * Gets the version.
   */
  readonly version?: string;
  /**
   * Gets the access endpoint.
   */
  readonly accessEndpoint?: string;
  /**
   * The endpoints configuration.
   */
  endpointsConfiguration?: FlowEndpointsConfiguration;
  /**
   * The sku.
   */
  sku?: Sku;
  /**
   * The integration account.
   */
  integrationAccount?: ResourceReference;
  /**
   * The integration service environment.
   */
  integrationServiceEnvironment?: ResourceReference;
  /**
   * The definition.
   */
  definition?: any;
  /**
   * The parameters.
   */
  parameters?: { [propertyName: string]: WorkflowParameter };
};

/**
 * The endpoints configuration.
 */
export interface FlowEndpointsConfiguration {
  /**
   * The workflow endpoints.
   */
  workflow?: FlowEndpoints;
  /**
   * The connector endpoints.
   */
  connector?: FlowEndpoints;
}

/**
 * The flow endpoints configuration.
 */
export interface FlowEndpoints {
  /**
   * The outgoing ip address.
   */
  outgoingIpAddresses?: IpAddress[];
  /**
   * The access endpoint ip address.
   */
  accessEndpointIpAddresses?: IpAddress[];
}

/**
 * The ip address.
 */
export interface IpAddress {
  /**
   * The address.
   */
  address?: string;
}

/**
 * The sku type.
 */
export interface Sku {
  /**
   * The name.
   */
  name: SkuName;
  /**
   * The reference to plan.
   */
  plan?: ResourceReference;
}

/**
 * The resource reference.
 */
export interface ResourceReference {
  /**
   * The resource id.
   */
  id?: string;
  /**
   * Gets the resource name.
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   */
  readonly type?: string;
}

/**
 * The workflow parameters.
 */
export interface WorkflowParameter {
  /**
   * The type.
   */
  type?: ParameterType;
  /**
   * The value.
   */
  value?: any;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The description.
   */
  description?: string;
}

/**
 * Error response indicates Logic service is not able to process the incoming request. The error property contains the error details.
 */
export interface ErrorResponse {
  /**
   * The error properties.
   */
  error?: ErrorProperties;
}

/**
 * Error properties indicate why the Logic service was not able to process the incoming request. The reason is provided in the error message.
 */
export interface ErrorProperties {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * The parameters to generate upgraded definition.
 */
export interface GenerateUpgradedDefinitionParameters {
  /**
   * The target schema version.
   */
  targetSchemaVersion?: string;
}

/**
 * The callback url parameters.
 */
export interface GetCallbackUrlParameters {
  /**
   * The expiry time.
   */
  notAfter?: Date;
  /**
   * The key type.
   */
  keyType?: KeyType;
}

/**
 * The workflow trigger callback URL.
 */
export interface WorkflowTriggerCallbackUrl {
  /**
   * Gets the workflow trigger callback URL.
   */
  readonly value?: string;
  /**
   * Gets the workflow trigger callback URL HTTP method.
   */
  readonly method?: string;
  /**
   * Gets the workflow trigger callback URL base path.
   */
  readonly basePath?: string;
  /**
   * Gets the workflow trigger callback URL relative path.
   */
  readonly relativePath?: string;
  /**
   * Gets the workflow trigger callback URL relative path parameters.
   */
  relativePathParameters?: string[];
  /**
   * Gets the workflow trigger callback URL query parameters.
   */
  queries?: WorkflowTriggerListCallbackUrlQueries;
}

/**
 * Gets the workflow trigger callback URL query parameters.
 */
export interface WorkflowTriggerListCallbackUrlQueries {
  /**
   * The api version.
   */
  apiVersion?: string;
  /**
   * The SAS permissions.
   */
  sp?: string;
  /**
   * The SAS version.
   */
  sv?: string;
  /**
   * The SAS signature.
   */
  sig?: string;
  /**
   * The SAS timestamp.
   */
  se?: string;
}

/**
 * The access key regenerate action content.
 */
export interface RegenerateActionParameter {
  /**
   * The key type.
   */
  keyType?: KeyType;
}

/**
 * The list of workflow versions.
 */
export interface WorkflowVersionListResult {
  /**
   * A list of workflow versions.
   */
  value?: WorkflowVersion[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The workflow version.
 */
export type WorkflowVersion = Resource & {
  /**
   * Gets the created time.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   */
  readonly changedTime?: Date;
  /**
   * The state.
   */
  state?: WorkflowState;
  /**
   * Gets the version.
   */
  readonly version?: string;
  /**
   * Gets the access endpoint.
   */
  readonly accessEndpoint?: string;
  /**
   * The sku.
   */
  sku?: Sku;
  /**
   * The integration account.
   */
  integrationAccount?: ResourceReference;
  /**
   * The definition.
   */
  definition?: any;
  /**
   * The parameters.
   */
  parameters?: { [propertyName: string]: WorkflowParameter };
};

/**
 * The list of workflow triggers.
 */
export interface WorkflowTriggerListResult {
  /**
   * A list of workflow triggers.
   */
  value?: WorkflowTrigger[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The sub resource type.
 */
export interface SubResource {
  /**
   * The resource id.
   */
  readonly id?: string;
}

/**
 * The workflow trigger.
 */
export type WorkflowTrigger = SubResource & {
  /**
   * Gets the workflow trigger name.
   */
  readonly name?: string;
  /**
   * Gets the workflow trigger type.
   */
  readonly type?: string;
  /**
   * Gets the provisioning state.
   */
  readonly provisioningState?: WorkflowTriggerProvisioningState;
  /**
   * Gets the created time.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   */
  readonly changedTime?: Date;
  /**
   * Gets the state.
   */
  readonly state?: WorkflowState;
  /**
   * Gets the status.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the last execution time.
   */
  readonly lastExecutionTime?: Date;
  /**
   * Gets the next execution time.
   */
  readonly nextExecutionTime?: Date;
  /**
   * Gets the workflow trigger recurrence.
   */
  readonly recurrence?: WorkflowTriggerRecurrence;
  /**
   * Gets the reference to workflow.
   */
  readonly workflow?: ResourceReference;
};

/**
 * The workflow trigger recurrence.
 */
export interface WorkflowTriggerRecurrence {
  /**
   * The frequency.
   */
  frequency?: RecurrenceFrequency;
  /**
   * The interval.
   */
  interval?: number;
  /**
   * The start time.
   */
  startTime?: string;
  /**
   * The end time.
   */
  endTime?: string;
  /**
   * The time zone.
   */
  timeZone?: string;
  /**
   * The recurrence schedule.
   */
  schedule?: RecurrenceSchedule;
}

/**
 * The recurrence schedule.
 */
export interface RecurrenceSchedule {
  /**
   * The minutes.
   */
  minutes?: number[];
  /**
   * The hours.
   */
  hours?: number[];
  /**
   * The days of the week.
   */
  weekDays?: DaysOfWeek[];
  /**
   * The month days.
   */
  monthDays?: number[];
  /**
   * The monthly occurrences.
   */
  monthlyOccurrences?: RecurrenceScheduleOccurrence[];
}

/**
 * The recurrence schedule occurrence.
 */
export interface RecurrenceScheduleOccurrence {
  /**
   * The day of the week.
   */
  day?: DayOfWeek;
  /**
   * The occurrence.
   */
  occurrence?: number;
}

/**
 * The JSON schema.
 */
export interface JsonSchema {
  /**
   * The JSON title.
   */
  title?: string;
  /**
   * The JSON content.
   */
  content?: string;
}

/**
 * The set trigger state action definition.
 */
export interface SetTriggerStateActionDefinition {
  /**
   * The source.
   */
  source: WorkflowTrigger;
}

/**
 * The list of workflow trigger histories.
 */
export interface WorkflowTriggerHistoryListResult {
  /**
   * A list of workflow trigger histories.
   */
  value?: WorkflowTriggerHistory[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The workflow trigger history.
 */
export type WorkflowTriggerHistory = SubResource & {
  /**
   * Gets the workflow trigger history name.
   */
  readonly name?: string;
  /**
   * Gets the workflow trigger history type.
   */
  readonly type?: string;
  /**
   * Gets the start time.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   */
  readonly endTime?: Date;
  /**
   * Gets the status.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   */
  readonly code?: string;
  /**
   * Gets the error.
   */
  readonly error?: any;
  /**
   * Gets the tracking id.
   */
  readonly trackingId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the link to input parameters.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the link to output parameters.
   */
  readonly outputsLink?: ContentLink;
  /**
   * The value indicating whether trigger was fired.
   */
  readonly fired?: boolean;
  /**
   * Gets the reference to workflow run.
   */
  readonly run?: ResourceReference;
};

/**
 * The correlation property.
 */
export interface Correlation {
  /**
   * The client tracking id.
   */
  clientTrackingId?: string;
}

/**
 * The content link.
 */
export interface ContentLink {
  /**
   * The content link URI.
   */
  uri?: string;
  /**
   * The content version.
   */
  contentVersion?: string;
  /**
   * The content size.
   */
  contentSize?: number;
  /**
   * The content hash.
   */
  contentHash?: ContentHash;
  /**
   * The metadata.
   */
  metadata?: any;
}

/**
 * The content hash.
 */
export interface ContentHash {
  /**
   * The algorithm of the content hash.
   */
  algorithm?: string;
  /**
   * The value of the content hash.
   */
  value?: string;
}

/**
 * The list of workflow runs.
 */
export interface WorkflowRunListResult {
  /**
   * A list of workflow runs.
   */
  value?: WorkflowRun[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The workflow run.
 */
export type WorkflowRun = SubResource & {
  /**
   * Gets the workflow run name.
   */
  readonly name?: string;
  /**
   * Gets the workflow run type.
   */
  readonly type?: string;
  /**
   * Gets the wait end time.
   */
  readonly waitEndTime?: Date;
  /**
   * Gets the start time.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   */
  readonly endTime?: Date;
  /**
   * Gets the status.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   */
  readonly code?: string;
  /**
   * Gets the error.
   */
  readonly error?: any;
  /**
   * Gets the correlation id.
   */
  readonly correlationId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the reference to workflow version.
   */
  readonly workflow?: ResourceReference;
  /**
   * Gets the fired trigger.
   */
  readonly trigger?: WorkflowRunTrigger;
  /**
   * Gets the outputs.
   */
  readonly outputs?: { [propertyName: string]: WorkflowOutputParameter };
  /**
   * Gets the response of the flow run.
   */
  readonly response?: WorkflowRunTrigger;
};

/**
 * The workflow run trigger.
 */
export interface WorkflowRunTrigger {
  /**
   * Gets the name.
   */
  readonly name?: string;
  /**
   * Gets the inputs.
   */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the scheduled time.
   */
  readonly scheduledTime?: Date;
  /**
   * Gets the start time.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   */
  readonly endTime?: Date;
  /**
   * Gets the tracking id.
   */
  readonly trackingId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the code.
   */
  readonly code?: string;
  /**
   * Gets the status.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the error.
   */
  readonly error?: any;
  /**
   * Gets the tracked properties.
   */
  readonly trackedProperties?: any;
}

/**
 * The workflow output parameter.
 */
export type WorkflowOutputParameter = WorkflowParameter & {
  /**
   * Gets the error.
   */
  readonly error?: any;
};

/**
 * The list of workflow run actions.
 */
export interface WorkflowRunActionListResult {
  /**
   * A list of workflow run actions.
   */
  value?: WorkflowRunAction[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The workflow run action.
 */
export type WorkflowRunAction = SubResource & {
  /**
   * Gets the workflow run action name.
   */
  readonly name?: string;
  /**
   * Gets the workflow run action type.
   */
  readonly type?: string;
  /**
   * Gets the start time.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   */
  readonly endTime?: Date;
  /**
   * Gets the status.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   */
  readonly code?: string;
  /**
   * Gets the error.
   */
  readonly error?: any;
  /**
   * Gets the tracking id.
   */
  readonly trackingId?: string;
  /**
   * The correlation properties.
   */
  correlation?: Correlation;
  /**
   * Gets the link to inputs.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the link to outputs.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
   */
  retryHistory?: RetryHistory[];
};

/**
 * The retry history.
 */
export interface RetryHistory {
  /**
   * Gets the start time.
   */
  startTime?: Date;
  /**
   * Gets the end time.
   */
  endTime?: Date;
  /**
   * Gets the status code.
   */
  code?: string;
  /**
   * Gets the client request Id.
   */
  clientRequestId?: string;
  /**
   * Gets the service request Id.
   */
  serviceRequestId?: string;
  /**
   * Gets the error response.
   */
  error?: ErrorResponse;
}

/**
 * The expression traces.
 */
export interface ExpressionTraces {
  inputs?: ExpressionRoot[];
}

/**
 * The expression.
 */
export interface Expression {
  /**
   * The text.
   */
  text?: string;
  /**
   * Any object
   */
  value?: any;
  /**
   * The sub expressions.
   */
  subexpressions?: Expression[];
  /**
   * The azure resource error info.
   */
  error?: AzureResourceErrorInfo;
}

/**
 * The error info.
 */
export interface ErrorInfo {
  /**
   * The error code.
   */
  code: string;
}

/**
 * The azure resource error info.
 */
export type AzureResourceErrorInfo = ErrorInfo & {
  /**
   * The error message.
   */
  message: string;
  /**
   * The error details.
   */
  details?: AzureResourceErrorInfo[];
};

/**
 * The expression root.
 */
export type ExpressionRoot = Expression & {
  /**
   * The path.
   */
  path?: string;
};

/**
 * A collection of workflow run action repetitions.
 */
export interface WorkflowRunActionRepetitionDefinitionCollection {
  /**
   * The link used to get the next page of recommendations.
   */
  nextLink?: string;
  value?: WorkflowRunActionRepetitionDefinition[];
}

/**
 * The workflow run action repetition definition.
 */
export type WorkflowRunActionRepetitionDefinition = Resource & {
  /**
   * The start time of the workflow scope repetition.
   */
  startTime?: Date;
  /**
   * The end time of the workflow scope repetition.
   */
  endTime?: Date;
  /**
   * The correlation properties.
   */
  correlation?: RunActionCorrelation;
  /**
   * The status of the workflow scope repetition.
   */
  status?: WorkflowStatus;
  /**
   * The workflow scope repetition code.
   */
  code?: string;
  /**
   * Any object
   */
  error?: any;
  /**
   * Gets the tracking id.
   */
  readonly trackingId?: string;
  /**
   * Gets the inputs.
   */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
   */
  retryHistory?: RetryHistory[];
  iterationCount?: number;
  /**
   * The repetition indexes.
   */
  repetitionIndexes?: RepetitionIndex[];
};

/**
 * The run operation result properties.
 */
export interface OperationResultProperties {
  /**
   * The start time of the workflow scope repetition.
   */
  startTime?: Date;
  /**
   * The end time of the workflow scope repetition.
   */
  endTime?: Date;
  /**
   * The correlation properties.
   */
  correlation?: RunActionCorrelation;
  /**
   * The status of the workflow scope repetition.
   */
  status?: WorkflowStatus;
  /**
   * The workflow scope repetition code.
   */
  code?: string;
  /**
   * Any object
   */
  error?: any;
}

/**
 * The correlation properties.
 */
export interface RunCorrelation {
  /**
   * The client tracking identifier.
   */
  clientTrackingId?: string;
  /**
   * The client keywords.
   */
  clientKeywords?: string[];
}

/**
 * The workflow run action correlation properties.
 */
export type RunActionCorrelation = RunCorrelation & {
  /**
   * The action tracking identifier.
   */
  actionTrackingId?: string;
};

/**
 * The operation result definition.
 */
export type OperationResult = OperationResultProperties & {
  /**
   * Gets the tracking id.
   */
  readonly trackingId?: string;
  /**
   * Gets the inputs.
   */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
   */
  retryHistory?: RetryHistory[];
  iterationCount?: number;
};

/**
 * The workflow run action repetition properties definition.
 */
export type WorkflowRunActionRepetitionProperties = OperationResult & {
  /**
   * The repetition indexes.
   */
  repetitionIndexes?: RepetitionIndex[];
};

/**
 * The workflow run action repetition index.
 */
export interface RepetitionIndex {
  /**
   * The scope.
   */
  scopeName?: string;
  /**
   * The index.
   */
  itemIndex: number;
}

/**
 * The list of workflow request histories.
 */
export interface RequestHistoryListResult {
  /**
   * A list of workflow request histories.
   */
  value?: RequestHistory[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The request history.
 */
export type RequestHistory = Resource & {
  /**
   * The request history properties.
   */
  properties?: RequestHistoryProperties;
};

/**
 * The request history.
 */
export interface RequestHistoryProperties {
  /**
   * The time the request started.
   */
  startTime?: Date;
  /**
   * The time the request ended.
   */
  endTime?: Date;
  /**
   * The request.
   */
  request?: Request;
  /**
   * The response.
   */
  response?: Response;
}

/**
 * A request.
 */
export interface Request {
  /**
   * A list of all the headers attached to the request.
   */
  headers?: any;
  /**
   * The destination for the request.
   */
  uri?: string;
  /**
   * The HTTP method used for the request.
   */
  method?: string;
}

/**
 * A response.
 */
export interface Response {
  /**
   * A list of all the headers attached to the response.
   */
  headers?: any;
  /**
   * The status code of the response.
   */
  statusCode?: number;
  /**
   * Details on the location of the body content.
   */
  bodyLink?: ContentLink;
}

/**
 * The list of integration accounts.
 */
export interface IntegrationAccountListResult {
  /**
   * The list of integration accounts.
   */
  value?: IntegrationAccount[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The integration account.
 */
export type IntegrationAccount = Resource & {
  /**
   * The sku.
   */
  sku?: IntegrationAccountSku;
  /**
   * The integration service environment.
   */
  integrationServiceEnvironment?: IntegrationServiceEnvironment;
  /**
   * The workflow state.
   */
  state?: WorkflowState;
};

/**
 * The integration service environment.
 */
export type IntegrationServiceEnvironment = Resource & {
  /**
   * The integration service environment properties.
   */
  properties?: IntegrationServiceEnvironmentProperties;
  /**
   * The sku.
   */
  sku?: IntegrationServiceEnvironmentSku;
};

/**
 * The integration service environment properties.
 */
export interface IntegrationServiceEnvironmentProperties {
  /**
   * The provisioning state.
   */
  provisioningState?: WorkflowProvisioningState;
  /**
   * The integration service environment state.
   */
  state?: WorkflowState;
  /**
   * Gets the tracking id.
   */
  integrationServiceEnvironmentId?: string;
  /**
   * The endpoints configuration.
   */
  endpointsConfiguration?: FlowEndpointsConfiguration;
  /**
   * The network configuration.
   */
  networkConfiguration?: NetworkConfiguration;
}

/**
 * The network configuration.
 */
export interface NetworkConfiguration {
  /**
   * Gets the virtual network address space.
   */
  virtualNetworkAddressSpace?: string;
  /**
   * The access endpoint.
   */
  accessEndpoint?: IntegrationServiceEnvironmentAccessEndpoint;
  /**
   * The subnets.
   */
  subnets?: ResourceReference[];
}

/**
 * The integration service environment access endpoint.
 */
export interface IntegrationServiceEnvironmentAccessEndpoint {
  /**
   * The access endpoint type.
   */
  type?: IntegrationServiceEnvironmentAccessEndpointType;
}

/**
 * The integration service environment sku.
 */
export interface IntegrationServiceEnvironmentSku {
  /**
   * The sku name.
   */
  name?: IntegrationServiceEnvironmentSkuName;
  /**
   * The sku capacity.
   */
  capacity?: number;
}

/**
 * The integration account sku.
 */
export interface IntegrationAccountSku {
  /**
   * The sku name.
   */
  name: IntegrationAccountSkuName;
}

/**
 * A collection of assembly definitions.
 */
export interface AssemblyCollection {
  value?: AssemblyDefinition[];
}

/**
 * The assembly definition.
 */
export type AssemblyDefinition = Resource & {
  /**
   * The assembly properties.
   */
  properties: AssemblyProperties;
};

/**
 * The artifact properties definition.
 */
export interface ArtifactProperties {
  /**
   * The artifact creation time.
   */
  createdTime?: Date;
  /**
   * The artifact changed time.
   */
  changedTime?: Date;
  /**
   * Any object
   */
  metadata?: any;
}

/**
 * The artifact content properties definition.
 */
export type ArtifactContentPropertiesDefinition = ArtifactProperties & {
  /**
   * Any object
   */
  content?: any;
  /**
   * The content type.
   */
  contentType?: string;
  /**
   * The content link.
   */
  contentLink?: ContentLink;
};

/**
 * The assembly properties definition.
 */
export type AssemblyProperties = ArtifactContentPropertiesDefinition & {
  /**
   * The assembly name.
   */
  assemblyName: string;
  /**
   * The assembly version.
   */
  assemblyVersion?: string;
  /**
   * The assembly culture.
   */
  assemblyCulture?: string;
  /**
   * The assembly public key token.
   */
  assemblyPublicKeyToken?: string;
};

/**
 * A collection of batch configurations.
 */
export interface BatchConfigurationCollection {
  value?: BatchConfiguration[];
}

/**
 * The batch configuration resource definition.
 */
export type BatchConfiguration = Resource & {
  /**
   * The batch configuration properties.
   */
  properties: BatchConfigurationProperties;
};

/**
 * The batch configuration properties definition.
 */
export type BatchConfigurationProperties = ArtifactProperties & {
  /**
   * The name of the batch group.
   */
  batchGroupName: string;
  /**
   * The batch release criteria.
   */
  releaseCriteria: BatchReleaseCriteria;
  /**
   * The created time.
   */
  createdTime?: Date;
  /**
   * The changed time.
   */
  changedTime?: Date;
};

/**
 * The batch release criteria.
 */
export interface BatchReleaseCriteria {
  /**
   * The message count.
   */
  messageCount?: number;
  /**
   * The batch size in bytes.
   */
  batchSize?: number;
  /**
   * The recurrence.
   */
  recurrence?: WorkflowTriggerRecurrence;
}

/**
 * The callback url.
 */
export interface CallbackUrl {
  /**
   * The URL value.
   */
  value?: string;
}

/**
 * The list key vault keys definition.
 */
export interface ListKeyVaultKeysDefinition {
  /**
   * The key vault reference.
   */
  keyVault: KeyVaultReference;
  /**
   * The skip token.
   */
  skipToken?: string;
}

/**
 * The key vault reference.
 */
export type KeyVaultReference = ResourceReference & {
  /**
   * The key vault name.
   */
  name?: string;
};

/**
 * Collection of key vault keys.
 */
export interface KeyVaultKeyCollection {
  /**
   * The key vault keys.
   */
  value?: KeyVaultKey[];
  /**
   * The skip token.
   */
  skipToken?: string;
}

/**
 * The key vault key.
 */
export interface KeyVaultKey {
  /**
   * The key id.
   */
  kid?: string;
  /**
   * The key attributes.
   */
  attributes?: KeyVaultKeyAttributes;
}

/**
 * The key attributes.
 */
export interface KeyVaultKeyAttributes {
  /**
   * Whether the key is enabled or not.
   */
  enabled?: boolean;
  /**
   * When the key was created.
   */
  created?: number;
  /**
   * When the key was updated.
   */
  updated?: number;
}

/**
 * The tracking events definition.
 */
export interface TrackingEventsDefinition {
  /**
   * The source type.
   */
  sourceType: string;
  /**
   * The track events options.
   */
  trackEventsOptions?: TrackEventsOperationOptions;
  /**
   * The events.
   */
  events: TrackingEvent[];
}

/**
 * The tracking event.
 */
export interface TrackingEvent {
  /**
   * The event level.
   */
  eventLevel: EventLevel;
  /**
   * The event time.
   */
  eventTime: Date;
  /**
   * The record type.
   */
  recordType: TrackingRecordType;
  /**
   * The error.
   */
  error?: TrackingEventErrorInfo;
}

/**
 * The tracking event error info.
 */
export interface TrackingEventErrorInfo {
  /**
   * The message.
   */
  message?: string;
  /**
   * The code.
   */
  code?: string;
}

/**
 * The list of integration account schemas.
 */
export interface IntegrationAccountSchemaListResult {
  /**
   * The list of integration account schemas.
   */
  value?: IntegrationAccountSchema[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The integration account schema.
 */
export type IntegrationAccountSchema = Resource & {
  /**
   * The schema type.
   */
  schemaType: SchemaType;
  /**
   * The target namespace of the schema.
   */
  targetNamespace?: string;
  /**
   * The document name.
   */
  documentName?: string;
  /**
   * The file name.
   */
  fileName?: string;
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The content.
   */
  content?: string;
  /**
   * The content type.
   */
  contentType?: string;
  /**
   * The content link.
   */
  readonly contentLink?: ContentLink;
};

/**
 * The list of integration account maps.
 */
export interface IntegrationAccountMapListResult {
  /**
   * The list of integration account maps.
   */
  value?: IntegrationAccountMap[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The integration account map.
 */
export type IntegrationAccountMap = Resource & {
  /**
   * The map type.
   */
  mapType: MapType;
  /**
   * The parameters schema of integration account map.
   */
  parametersSchema?: IntegrationAccountMapPropertiesParametersSchema;
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The content.
   */
  content?: string;
  /**
   * The content type.
   */
  contentType?: string;
  /**
   * The content link.
   */
  readonly contentLink?: ContentLink;
  /**
   * The metadata.
   */
  metadata?: any;
};

/**
 * The parameters schema of integration account map.
 */
export interface IntegrationAccountMapPropertiesParametersSchema {
  /**
   * The reference name.
   */
  ref?: string;
}

/**
 * The list of integration account partners.
 */
export interface IntegrationAccountPartnerListResult {
  /**
   * The list of integration account partners.
   */
  value?: IntegrationAccountPartner[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The integration account partner.
 */
export type IntegrationAccountPartner = Resource & {
  /**
   * The partner type.
   */
  partnerType: PartnerType;
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The partner content.
   */
  content: PartnerContent;
};

/**
 * The integration account partner content.
 */
export interface PartnerContent {
  /**
   * The B2B partner content.
   */
  b2B?: B2BPartnerContent;
}

/**
 * The B2B partner content.
 */
export interface B2BPartnerContent {
  /**
   * The list of partner business identities.
   */
  businessIdentities?: BusinessIdentity[];
}

/**
 * The integration account partner's business identity.
 */
export interface BusinessIdentity {
  /**
   * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   */
  qualifier: string;
  /**
   * The user defined business identity value.
   */
  value: string;
}

/**
 * The list of integration account agreements.
 */
export interface IntegrationAccountAgreementListResult {
  /**
   * The list of integration account agreements.
   */
  value?: IntegrationAccountAgreement[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The integration account agreement.
 */
export type IntegrationAccountAgreement = Resource & {
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The agreement type.
   */
  agreementType: AgreementType;
  /**
   * The integration account partner that is set as host partner for this agreement.
   */
  hostPartner: string;
  /**
   * The integration account partner that is set as guest partner for this agreement.
   */
  guestPartner: string;
  /**
   * The business identity of the host partner.
   */
  hostIdentity: BusinessIdentity;
  /**
   * The business identity of the guest partner.
   */
  guestIdentity: BusinessIdentity;
  /**
   * The agreement content.
   */
  content: AgreementContent;
};

/**
 * The integration account agreement content.
 */
export interface AgreementContent {
  /**
   * The AS2 agreement content.
   */
  aS2?: AS2AgreementContent;
  /**
   * The X12 agreement content.
   */
  x12?: X12AgreementContent;
  /**
   * The EDIFACT agreement content.
   */
  edifact?: EdifactAgreementContent;
}

/**
 * The integration account AS2 agreement content.
 */
export interface AS2AgreementContent {
  /**
   * The AS2 one-way receive agreement.
   */
  receiveAgreement: AS2OneWayAgreement;
  /**
   * The AS2 one-way send agreement.
   */
  sendAgreement: AS2OneWayAgreement;
}

/**
 * The integration account AS2 one-way agreement.
 */
export interface AS2OneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The AS2 protocol settings.
   */
  protocolSettings: AS2ProtocolSettings;
}

/**
 * The AS2 agreement protocol settings.
 */
export interface AS2ProtocolSettings {
  /**
   * The message connection settings.
   */
  messageConnectionSettings: AS2MessageConnectionSettings;
  /**
   * The acknowledgement connection settings.
   */
  acknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings;
  /**
   * The MDN settings.
   */
  mdnSettings: AS2MdnSettings;
  /**
   * The security settings.
   */
  securitySettings: AS2SecuritySettings;
  /**
   * The validation settings.
   */
  validationSettings: AS2ValidationSettings;
  /**
   * The envelope settings.
   */
  envelopeSettings: AS2EnvelopeSettings;
  /**
   * The error settings.
   */
  errorSettings: AS2ErrorSettings;
}

/**
 * The AS2 agreement message connection settings.
 */
export interface AS2MessageConnectionSettings {
  /**
   * The value indicating whether to ignore mismatch in certificate name.
   */
  ignoreCertificateNameMismatch: boolean;
  /**
   * The value indicating whether to support HTTP status code 'CONTINUE'.
   */
  supportHttpStatusCodeContinue: boolean;
  /**
   * The value indicating whether to keep the connection alive.
   */
  keepHttpConnectionAlive: boolean;
  /**
   * The value indicating whether to unfold the HTTP headers.
   */
  unfoldHttpHeaders: boolean;
}

/**
 * The AS2 agreement acknowledgement connection settings.
 */
export interface AS2AcknowledgementConnectionSettings {
  /**
   * Indicates whether to ignore mismatch in certificate name.
   */
  ignoreCertificateNameMismatch: boolean;
  /**
   * Indicates whether to support HTTP status code 'CONTINUE'.
   */
  supportHttpStatusCodeContinue: boolean;
  /**
   * Indicates whether to keep the connection alive.
   */
  keepHttpConnectionAlive: boolean;
  /**
   * Indicates whether to unfold the HTTP headers.
   */
  unfoldHttpHeaders: boolean;
}

/**
 * The AS2 agreement mdn settings.
 */
export interface AS2MdnSettings {
  /**
   * The value indicating whether to send or request a MDN.
   */
  needMDN: boolean;
  /**
   * The value indicating whether the MDN needs to be signed or not.
   */
  signMDN: boolean;
  /**
   * The value indicating whether to send the asynchronous MDN.
   */
  sendMDNAsynchronously: boolean;
  /**
   * The receipt delivery URL.
   */
  receiptDeliveryUrl?: string;
  /**
   * The disposition notification to header value.
   */
  dispositionNotificationTo?: string;
  /**
   * The value indicating whether to sign the outbound MDN if optional.
   */
  signOutboundMDNIfOptional: boolean;
  /**
   * The MDN text.
   */
  mdnText?: string;
  /**
   * The value indicating whether to send inbound MDN to message box.
   */
  sendInboundMDNToMessageBox: boolean;
  /**
   * The signing or hashing algorithm.
   */
  micHashingAlgorithm: HashingAlgorithm;
}

/**
 * The AS2 agreement security settings.
 */
export interface AS2SecuritySettings {
  /**
   * The value indicating whether to send or request a MDN.
   */
  overrideGroupSigningCertificate: boolean;
  /**
   * The name of the signing certificate.
   */
  signingCertificateName?: string;
  /**
   * The name of the encryption certificate.
   */
  encryptionCertificateName?: string;
  /**
   * The value indicating whether to enable NRR for inbound encoded messages.
   */
  enableNRRForInboundEncodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for inbound decoded messages.
   */
  enableNRRForInboundDecodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for outbound MDN.
   */
  enableNRRForOutboundMDN: boolean;
  /**
   * The value indicating whether to enable NRR for outbound encoded messages.
   */
  enableNRRForOutboundEncodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for outbound decoded messages.
   */
  enableNRRForOutboundDecodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for inbound MDN.
   */
  enableNRRForInboundMDN: boolean;
  /**
   * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
   */
  sha2AlgorithmFormat?: string;
}

/**
 * The AS2 agreement validation settings.
 */
export interface AS2ValidationSettings {
  /**
   * The value indicating whether to override incoming message properties with those in agreement.
   */
  overrideMessageProperties: boolean;
  /**
   * The value indicating whether the message has to be encrypted.
   */
  encryptMessage: boolean;
  /**
   * The value indicating whether the message has to be signed.
   */
  signMessage: boolean;
  /**
   * The value indicating whether the message has to be compressed.
   */
  compressMessage: boolean;
  /**
   * The value indicating whether to check for duplicate message.
   */
  checkDuplicateMessage: boolean;
  /**
   * The number of days to look back for duplicate interchange.
   */
  interchangeDuplicatesValidityDays: number;
  /**
   * The value indicating whether to check for certificate revocation list on send.
   */
  checkCertificateRevocationListOnSend: boolean;
  /**
   * The value indicating whether to check for certificate revocation list on receive.
   */
  checkCertificateRevocationListOnReceive: boolean;
  /**
   * The encryption algorithm.
   */
  encryptionAlgorithm: EncryptionAlgorithm;
  /**
   * The signing algorithm.
   */
  signingAlgorithm?: SigningAlgorithm;
}

/**
 * The AS2 agreement envelope settings.
 */
export interface AS2EnvelopeSettings {
  /**
   * The message content type.
   */
  messageContentType: string;
  /**
   * The value indicating whether to transmit file name in mime header.
   */
  transmitFileNameInMimeHeader: boolean;
  /**
   * The template for file name.
   */
  fileNameTemplate: string;
  /**
   * The value indicating whether to suspend message on file name generation error.
   */
  suspendMessageOnFileNameGenerationError: boolean;
  /**
   * The value indicating whether to auto generate file name.
   */
  autogenerateFileName: boolean;
}

/**
 * The AS2 agreement error settings.
 */
export interface AS2ErrorSettings {
  /**
   * The value indicating whether to suspend duplicate message.
   */
  suspendDuplicateMessage: boolean;
  /**
   * The value indicating whether to resend message If MDN is not received.
   */
  resendIfMDNNotReceived: boolean;
}

/**
 * The X12 agreement content.
 */
export interface X12AgreementContent {
  /**
   * The X12 one-way receive agreement.
   */
  receiveAgreement: X12OneWayAgreement;
  /**
   * The X12 one-way send agreement.
   */
  sendAgreement: X12OneWayAgreement;
}

/**
 * The X12 one-way agreement.
 */
export interface X12OneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The X12 protocol settings.
   */
  protocolSettings: X12ProtocolSettings;
}

/**
 * The X12 agreement protocol settings.
 */
export interface X12ProtocolSettings {
  /**
   * The X12 validation settings.
   */
  validationSettings: X12ValidationSettings;
  /**
   * The X12 framing settings.
   */
  framingSettings: X12FramingSettings;
  /**
   * The X12 envelope settings.
   */
  envelopeSettings: X12EnvelopeSettings;
  /**
   * The X12 acknowledgment settings.
   */
  acknowledgementSettings: X12AcknowledgementSettings;
  /**
   * The X12 message filter.
   */
  messageFilter: X12MessageFilter;
  /**
   * The X12 security settings.
   */
  securitySettings: X12SecuritySettings;
  /**
   * The X12 processing settings.
   */
  processingSettings: X12ProcessingSettings;
  /**
   * The X12 envelope override settings.
   */
  envelopeOverrides?: X12EnvelopeOverride[];
  /**
   * The X12 validation override settings.
   */
  validationOverrides?: X12ValidationOverride[];
  /**
   * The X12 message filter list.
   */
  messageFilterList?: X12MessageIdentifier[];
  /**
   * The X12 schema references.
   */
  schemaReferences: X12SchemaReference[];
  /**
   * The X12 delimiter override settings.
   */
  x12DelimiterOverrides?: X12DelimiterOverrides[];
}

/**
 * The X12 agreement validation settings.
 */
export interface X12ValidationSettings {
  /**
   * The value indicating whether to validate character set in the message.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to check for duplicate interchange control number.
   */
  checkDuplicateInterchangeControlNumber: boolean;
  /**
   * The validity period of interchange control number.
   */
  interchangeControlNumberValidityDays: number;
  /**
   * The value indicating whether to check for duplicate group control number.
   */
  checkDuplicateGroupControlNumber: boolean;
  /**
   * The value indicating whether to check for duplicate transaction set control number.
   */
  checkDuplicateTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether to Whether to validate EDI types.
   */
  validateEDITypes: boolean;
  /**
   * The value indicating whether to Whether to validate XSD types.
   */
  validateXSDTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy.
   */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/**
 * The X12 agreement framing settings.
 */
export interface X12FramingSettings {
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The value indicating whether to replace separators in payload.
   */
  replaceSeparatorsInPayload: boolean;
  /**
   * The replacement character.
   */
  replaceCharacter: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The X12 character set.
   */
  characterSet: X12CharacterSet;
  /**
   * The segment terminator suffix.
   */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
}

/**
 * The X12 agreement envelope settings.
 */
export interface X12EnvelopeSettings {
  /**
   * The controls standards id.
   */
  controlStandardsId: number;
  /**
   * The value indicating whether to use control standards id as repetition character.
   */
  useControlStandardsIdAsRepetitionCharacter: boolean;
  /**
   * The sender application id.
   */
  senderApplicationId: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId: string;
  /**
   * The control version number.
   */
  controlVersionNumber: string;
  /**
   * The interchange  control number lower bound.
   */
  interchangeControlNumberLowerBound: number;
  /**
   * The interchange  control number upper bound.
   */
  interchangeControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover interchange control number.
   */
  rolloverInterchangeControlNumber: boolean;
  /**
   * The value indicating whether to enable default group headers.
   */
  enableDefaultGroupHeaders: boolean;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The group control number lower bound.
   */
  groupControlNumberLowerBound: number;
  /**
   * The group control number upper bound.
   */
  groupControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover group control number.
   */
  rolloverGroupControlNumber: boolean;
  /**
   * The group header agency code.
   */
  groupHeaderAgencyCode: string;
  /**
   * The group header version.
   */
  groupHeaderVersion: string;
  /**
   * The transaction set control number lower bound.
   */
  transactionSetControlNumberLowerBound: number;
  /**
   * The transaction set control number upper bound.
   */
  transactionSetControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover transaction set control number.
   */
  rolloverTransactionSetControlNumber: boolean;
  /**
   * The transaction set control number prefix.
   */
  transactionSetControlNumberPrefix?: string;
  /**
   * The transaction set control number suffix.
   */
  transactionSetControlNumberSuffix?: string;
  /**
   * The value indicating whether to overwrite existing transaction set control number.
   */
  overwriteExistingTransactionSetControlNumber: boolean;
  /**
   * The group header date format.
   */
  groupHeaderDateFormat: X12DateFormat;
  /**
   * The group header time format.
   */
  groupHeaderTimeFormat: X12TimeFormat;
  /**
   * The usage indicator.
   */
  usageIndicator: UsageIndicator;
}

/**
 * The X12 agreement acknowledgement settings.
 */
export interface X12AcknowledgementSettings {
  /**
   * The value indicating whether technical acknowledgement is needed.
   */
  needTechnicalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch the technical acknowledgements.
   */
  batchTechnicalAcknowledgements: boolean;
  /**
   * The value indicating whether functional acknowledgement is needed.
   */
  needFunctionalAcknowledgement: boolean;
  /**
   * The functional acknowledgement version.
   */
  functionalAcknowledgementVersion?: string;
  /**
   * The value indicating whether to batch functional acknowledgements.
   */
  batchFunctionalAcknowledgements: boolean;
  /**
   * The value indicating whether implementation acknowledgement is needed.
   */
  needImplementationAcknowledgement: boolean;
  /**
   * The implementation acknowledgement version.
   */
  implementationAcknowledgementVersion?: string;
  /**
   * The value indicating whether to batch implementation acknowledgements.
   */
  batchImplementationAcknowledgements: boolean;
  /**
   * The value indicating whether a loop is needed for valid messages.
   */
  needLoopForValidMessages: boolean;
  /**
   * The value indicating whether to send synchronous acknowledgement.
   */
  sendSynchronousAcknowledgement: boolean;
  /**
   * The acknowledgement control number prefix.
   */
  acknowledgementControlNumberPrefix?: string;
  /**
   * The acknowledgement control number suffix.
   */
  acknowledgementControlNumberSuffix?: string;
  /**
   * The acknowledgement control number lower bound.
   */
  acknowledgementControlNumberLowerBound: number;
  /**
   * The acknowledgement control number upper bound.
   */
  acknowledgementControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover acknowledgement control number.
   */
  rolloverAcknowledgementControlNumber: boolean;
}

/**
 * The X12 message filter for odata query.
 */
export interface X12MessageFilter {
  /**
   * The message filter type.
   */
  messageFilterType: MessageFilterType;
}

/**
 * The X12 agreement security settings.
 */
export interface X12SecuritySettings {
  /**
   * The authorization qualifier.
   */
  authorizationQualifier: string;
  /**
   * The authorization value.
   */
  authorizationValue?: string;
  /**
   * The security qualifier.
   */
  securityQualifier: string;
  /**
   * The password value.
   */
  passwordValue?: string;
}

/**
 * The X12 processing settings.
 */
export interface X12ProcessingSettings {
  /**
   * The value indicating whether to mask security information.
   */
  maskSecurityInfo: boolean;
  /**
   * The value indicating whether to convert numerical type to implied decimal.
   */
  convertImpliedDecimal: boolean;
  /**
   * The value indicating whether to preserve interchange.
   */
  preserveInterchange: boolean;
  /**
   * The value indicating whether to suspend interchange on error.
   */
  suspendInterchangeOnError: boolean;
  /**
   * The value indicating whether to create empty xml tags for trailing separators.
   */
  createEmptyXmlTagsForTrailingSeparators: boolean;
  /**
   * The value indicating whether to use dot as decimal separator.
   */
  useDotAsDecimalSeparator: boolean;
}

/**
 * The X12 envelope override settings.
 */
export interface X12EnvelopeOverride {
  /**
   * The target namespace on which this envelope settings has to be applied.
   */
  targetNamespace: string;
  /**
   * The protocol version on which this envelope settings has to be applied.
   */
  protocolVersion: string;
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId: string;
  /**
   * The responsible agency code.
   */
  responsibleAgencyCode: string;
  /**
   * The header version.
   */
  headerVersion: string;
  /**
   * The sender application id.
   */
  senderApplicationId: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId: string;
  /**
   * The functional identifier code.
   */
  functionalIdentifierCode?: string;
  /**
   * The date format.
   */
  dateFormat: X12DateFormat;
  /**
   * The time format.
   */
  timeFormat: X12TimeFormat;
}

/**
 * The X12 validation override settings.
 */
export interface X12ValidationOverride {
  /**
   * The message id on which the validation settings has to be applied.
   */
  messageId: string;
  /**
   * The value indicating whether to validate EDI types.
   */
  validateEDITypes: boolean;
  /**
   * The value indicating whether to validate XSD types.
   */
  validateXSDTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to validate character Set.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy.
   */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/**
 * The X12 message identifier.
 */
export interface X12MessageIdentifier {
  /**
   * The message id.
   */
  messageId: string;
}

/**
 * The X12 schema reference.
 */
export interface X12SchemaReference {
  /**
   * The message id.
   */
  messageId: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The schema version.
   */
  schemaVersion: string;
  /**
   * The schema name.
   */
  schemaName: string;
}

/**
 * The X12 delimiter override settings.
 */
export interface X12DelimiterOverrides {
  /**
   * The protocol version.
   */
  protocolVersion?: string;
  /**
   * The message id.
   */
  messageId?: string;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The segment terminator suffix.
   */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
  /**
   * The replacement character.
   */
  replaceCharacter: number;
  /**
   * The value indicating whether to replace separators in payload.
   */
  replaceSeparatorsInPayload: boolean;
  /**
   * The target namespace on which this delimiter settings has to be applied.
   */
  targetNamespace?: string;
}

/**
 * The Edifact agreement content.
 */
export interface EdifactAgreementContent {
  /**
   * The EDIFACT one-way receive agreement.
   */
  receiveAgreement: EdifactOneWayAgreement;
  /**
   * The EDIFACT one-way send agreement.
   */
  sendAgreement: EdifactOneWayAgreement;
}

/**
 * The Edifact one way agreement.
 */
export interface EdifactOneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The EDIFACT protocol settings.
   */
  protocolSettings: EdifactProtocolSettings;
}

/**
 * The Edifact agreement protocol settings.
 */
export interface EdifactProtocolSettings {
  /**
   * The EDIFACT validation settings.
   */
  validationSettings: EdifactValidationSettings;
  /**
   * The EDIFACT framing settings.
   */
  framingSettings: EdifactFramingSettings;
  /**
   * The EDIFACT envelope settings.
   */
  envelopeSettings: EdifactEnvelopeSettings;
  /**
   * The EDIFACT acknowledgement settings.
   */
  acknowledgementSettings: EdifactAcknowledgementSettings;
  /**
   * The EDIFACT message filter.
   */
  messageFilter: EdifactMessageFilter;
  /**
   * The EDIFACT processing Settings.
   */
  processingSettings: EdifactProcessingSettings;
  /**
   * The EDIFACT envelope override settings.
   */
  envelopeOverrides?: EdifactEnvelopeOverride[];
  /**
   * The EDIFACT message filter list.
   */
  messageFilterList?: EdifactMessageIdentifier[];
  /**
   * The EDIFACT schema references.
   */
  schemaReferences: EdifactSchemaReference[];
  /**
   * The EDIFACT validation override settings.
   */
  validationOverrides?: EdifactValidationOverride[];
  /**
   * The EDIFACT delimiter override settings.
   */
  edifactDelimiterOverrides?: EdifactDelimiterOverride[];
}

/**
 * The Edifact agreement validation settings.
 */
export interface EdifactValidationSettings {
  /**
   * The value indicating whether to validate character set in the message.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to check for duplicate interchange control number.
   */
  checkDuplicateInterchangeControlNumber: boolean;
  /**
   * The validity period of interchange control number.
   */
  interchangeControlNumberValidityDays: number;
  /**
   * The value indicating whether to check for duplicate group control number.
   */
  checkDuplicateGroupControlNumber: boolean;
  /**
   * The value indicating whether to check for duplicate transaction set control number.
   */
  checkDuplicateTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether to Whether to validate EDI types.
   */
  validateEDITypes: boolean;
  /**
   * The value indicating whether to Whether to validate XSD types.
   */
  validateXSDTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy.
   */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/**
 * The Edifact agreement framing settings.
 */
export interface EdifactFramingSettings {
  /**
   * The service code list directory version.
   */
  serviceCodeListDirectoryVersion?: string;
  /**
   * The character encoding.
   */
  characterEncoding?: string;
  /**
   * The protocol version.
   */
  protocolVersion: number;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The release indicator.
   */
  releaseIndicator: number;
  /**
   * The repetition separator.
   */
  repetitionSeparator: number;
  /**
   * The EDIFACT frame setting characterSet.
   */
  characterSet: EdifactCharacterSet;
  /**
   * The EDIFACT frame setting decimal indicator.
   */
  decimalPointIndicator: EdifactDecimalIndicator;
  /**
   * The EDIFACT frame setting segment terminator suffix.
   */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
}

/**
 * The Edifact agreement envelope settings.
 */
export interface EdifactEnvelopeSettings {
  /**
   * The group association assigned code.
   */
  groupAssociationAssignedCode?: string;
  /**
   * The communication agreement id.
   */
  communicationAgreementId?: string;
  /**
   * The value indicating whether to apply delimiter string advice.
   */
  applyDelimiterStringAdvice: boolean;
  /**
   * The value indicating whether to create grouping segments.
   */
  createGroupingSegments: boolean;
  /**
   * The value indicating whether to enable default group headers.
   */
  enableDefaultGroupHeaders: boolean;
  /**
   * The recipient reference password value.
   */
  recipientReferencePasswordValue?: string;
  /**
   * The recipient reference password qualifier.
   */
  recipientReferencePasswordQualifier?: string;
  /**
   * The application reference id.
   */
  applicationReferenceId?: string;
  /**
   * The processing priority code.
   */
  processingPriorityCode?: string;
  /**
   * The interchange control number lower bound.
   */
  interchangeControlNumberLowerBound: number;
  /**
   * The interchange control number upper bound.
   */
  interchangeControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover interchange control number.
   */
  rolloverInterchangeControlNumber: boolean;
  /**
   * The interchange control number prefix.
   */
  interchangeControlNumberPrefix?: string;
  /**
   * The interchange control number suffix.
   */
  interchangeControlNumberSuffix?: string;
  /**
   * The sender reverse routing address.
   */
  senderReverseRoutingAddress?: string;
  /**
   * The receiver reverse routing address.
   */
  receiverReverseRoutingAddress?: string;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The group controlling agency code.
   */
  groupControllingAgencyCode?: string;
  /**
   * The group message version.
   */
  groupMessageVersion?: string;
  /**
   * The group message release.
   */
  groupMessageRelease?: string;
  /**
   * The group control number lower bound.
   */
  groupControlNumberLowerBound: number;
  /**
   * The group control number upper bound.
   */
  groupControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover group control number.
   */
  rolloverGroupControlNumber: boolean;
  /**
   * The group control number prefix.
   */
  groupControlNumberPrefix?: string;
  /**
   * The group control number suffix.
   */
  groupControlNumberSuffix?: string;
  /**
   * The group application receiver qualifier.
   */
  groupApplicationReceiverQualifier?: string;
  /**
   * The group application receiver id.
   */
  groupApplicationReceiverId?: string;
  /**
   * The group application sender qualifier.
   */
  groupApplicationSenderQualifier?: string;
  /**
   * The group application sender id.
   */
  groupApplicationSenderId?: string;
  /**
   * The group application password.
   */
  groupApplicationPassword?: string;
  /**
   * The value indicating whether to overwrite existing transaction set control number.
   */
  overwriteExistingTransactionSetControlNumber: boolean;
  /**
   * The transaction set control number prefix.
   */
  transactionSetControlNumberPrefix?: string;
  /**
   * The transaction set control number suffix.
   */
  transactionSetControlNumberSuffix?: string;
  /**
   * The transaction set control number lower bound.
   */
  transactionSetControlNumberLowerBound: number;
  /**
   * The transaction set control number upper bound.
   */
  transactionSetControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover transaction set control number.
   */
  rolloverTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether the message is a test interchange.
   */
  isTestInterchange: boolean;
  /**
   * The sender internal identification.
   */
  senderInternalIdentification?: string;
  /**
   * The sender internal sub identification.
   */
  senderInternalSubIdentification?: string;
  /**
   * The receiver internal identification.
   */
  receiverInternalIdentification?: string;
  /**
   * The receiver internal sub identification.
   */
  receiverInternalSubIdentification?: string;
}

/**
 * The Edifact agreement acknowledgement settings.
 */
export interface EdifactAcknowledgementSettings {
  /**
   * The value indicating whether technical acknowledgement is needed.
   */
  needTechnicalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch the technical acknowledgements.
   */
  batchTechnicalAcknowledgements: boolean;
  /**
   * The value indicating whether functional acknowledgement is needed.
   */
  needFunctionalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch functional acknowledgements.
   */
  batchFunctionalAcknowledgements: boolean;
  /**
   * The value indicating whether a loop is needed for valid messages.
   */
  needLoopForValidMessages: boolean;
  /**
   * The value indicating whether to send synchronous acknowledgement.
   */
  sendSynchronousAcknowledgement: boolean;
  /**
   * The acknowledgement control number prefix.
   */
  acknowledgementControlNumberPrefix?: string;
  /**
   * The acknowledgement control number suffix.
   */
  acknowledgementControlNumberSuffix?: string;
  /**
   * The acknowledgement control number lower bound.
   */
  acknowledgementControlNumberLowerBound: number;
  /**
   * The acknowledgement control number upper bound.
   */
  acknowledgementControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover acknowledgement control number.
   */
  rolloverAcknowledgementControlNumber: boolean;
}

/**
 * The Edifact message filter for odata query.
 */
export interface EdifactMessageFilter {
  /**
   * The message filter type.
   */
  messageFilterType: MessageFilterType;
}

/**
 * The Edifact agreement protocol settings.
 */
export interface EdifactProcessingSettings {
  /**
   * The value indicating whether to mask security information.
   */
  maskSecurityInfo: boolean;
  /**
   * The value indicating whether to preserve interchange.
   */
  preserveInterchange: boolean;
  /**
   * The value indicating whether to suspend interchange on error.
   */
  suspendInterchangeOnError: boolean;
  /**
   * The value indicating whether to create empty xml tags for trailing separators.
   */
  createEmptyXmlTagsForTrailingSeparators: boolean;
  /**
   * The value indicating whether to use dot as decimal separator.
   */
  useDotAsDecimalSeparator: boolean;
}

/**
 * The Edifact envelope override settings.
 */
export interface EdifactEnvelopeOverride {
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId?: string;
  /**
   * The message version on which this envelope settings has to be applied.
   */
  messageVersion?: string;
  /**
   * The message release version on which this envelope settings has to be applied.
   */
  messageRelease?: string;
  /**
   * The message association assigned code.
   */
  messageAssociationAssignedCode?: string;
  /**
   * The target namespace on which this envelope settings has to be applied.
   */
  targetNamespace?: string;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The sender application qualifier.
   */
  senderApplicationQualifier?: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The receiver application qualifier.
   */
  receiverApplicationQualifier?: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId?: string;
  /**
   * The controlling agency code.
   */
  controllingAgencyCode?: string;
  /**
   * The group header message version.
   */
  groupHeaderMessageVersion?: string;
  /**
   * The group header message release.
   */
  groupHeaderMessageRelease?: string;
  /**
   * The association assigned code.
   */
  associationAssignedCode?: string;
  /**
   * The application password.
   */
  applicationPassword?: string;
}

/**
 * The Edifact message identifier.
 */
export interface EdifactMessageIdentifier {
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId: string;
}

/**
 * The Edifact schema reference.
 */
export interface EdifactSchemaReference {
  /**
   * The message id.
   */
  messageId: string;
  /**
   * The message version.
   */
  messageVersion: string;
  /**
   * The message release version.
   */
  messageRelease: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The sender application qualifier.
   */
  senderApplicationQualifier?: string;
  /**
   * The association assigned code.
   */
  associationAssignedCode?: string;
  /**
   * The schema name.
   */
  schemaName: string;
}

/**
 * The Edifact validation override settings.
 */
export interface EdifactValidationOverride {
  /**
   * The message id on which the validation settings has to be applied.
   */
  messageId: string;
  /**
   * The value indicating whether to validate character Set.
   */
  enforceCharacterSet: boolean;
  /**
   * The value indicating whether to validate EDI types.
   */
  validateEDITypes: boolean;
  /**
   * The value indicating whether to validate XSD types.
   */
  validateXSDTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy.
   */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
}

/**
 * The Edifact delimiter override settings.
 */
export interface EdifactDelimiterOverride {
  /**
   * The message id.
   */
  messageId?: string;
  /**
   * The message version.
   */
  messageVersion?: string;
  /**
   * The message release.
   */
  messageRelease?: string;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The repetition separator.
   */
  repetitionSeparator: number;
  /**
   * The segment terminator suffix.
   */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
  /**
   * The decimal point indicator.
   */
  decimalPointIndicator: EdifactDecimalIndicator;
  /**
   * The release indicator.
   */
  releaseIndicator: number;
  /**
   * The message association assigned code.
   */
  messageAssociationAssignedCode?: string;
  /**
   * The target namespace on which this delimiter settings has to be applied.
   */
  targetNamespace?: string;
}

/**
 * The list of integration account certificates.
 */
export interface IntegrationAccountCertificateListResult {
  /**
   * The list of integration account certificates.
   */
  value?: IntegrationAccountCertificate[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The integration account certificate.
 */
export type IntegrationAccountCertificate = Resource & {
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The key details in the key vault.
   */
  key?: KeyVaultKeyReference;
  /**
   * The public certificate.
   */
  publicCertificate?: string;
};

/**
 * The reference to the key vault key.
 */
export interface KeyVaultKeyReference {
  /**
   * The key vault reference.
   */
  keyVault: KeyVaultKeyReferenceKeyVault;
  /**
   * The private key name in key vault.
   */
  keyName: string;
  /**
   * The private key version in key vault.
   */
  keyVersion?: string;
}

/**
 * The key vault reference.
 */
export interface KeyVaultKeyReferenceKeyVault {
  /**
   * The resource id.
   */
  id?: string;
  /**
   * The resource name.
   */
  readonly name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
}

/**
 * The list of integration account sessions.
 */
export interface IntegrationAccountSessionListResult {
  /**
   * The list of integration account sessions.
   */
  value?: IntegrationAccountSession[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The integration account session.
 */
export type IntegrationAccountSession = Resource & {
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The session content.
   */
  content?: any;
};

/**
 * The list of integration service environments.
 */
export interface IntegrationServiceEnvironmentListResult {
  value?: IntegrationServiceEnvironment[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The list of integration service environment skus.
 */
export interface IntegrationServiceEnvironmentSkuList {
  /**
   * The list of integration service environment skus.
   */
  value?: IntegrationServiceEnvironmentSkuDefinition[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The integration service environment sku definition.
 */
export interface IntegrationServiceEnvironmentSkuDefinition {
  /**
   * The resource type.
   */
  resourceType?: string;
  /**
   * The sku.
   */
  sku?: IntegrationServiceEnvironmentSkuDefinitionSku;
  /**
   * The sku capacity.
   */
  capacity?: IntegrationServiceEnvironmentSkuCapacity;
}

/**
 * The sku.
 */
export interface IntegrationServiceEnvironmentSkuDefinitionSku {
  /**
   * The sku name.
   */
  name?: IntegrationServiceEnvironmentSkuName;
  /**
   * The sku tier.
   */
  tier?: string;
}

/**
 * The integration service environment sku capacity.
 */
export interface IntegrationServiceEnvironmentSkuCapacity {
  /**
   * The minimum capacity.
   */
  minimum?: number;
  /**
   * The maximum capacity.
   */
  maximum?: number;
  /**
   * The default capacity.
   */
  default?: number;
  /**
   * The sku scale type.
   */
  scaleType?: IntegrationServiceEnvironmentSkuScaleType;
}

/**
 * The integration service environment subnet network health.
 */
export interface IntegrationServiceEnvironmentSubnetNetworkHealth {
  /**
   * The outbound network dependencies.
   */
  outboundNetworkDependencies?: IntegrationServiceEnvironmentNetworkDependency[];
  /**
   * The integration service environment network health.
   */
  outboundNetworkHealth?: IntegrationServiceEnvironmentNetworkDependencyHealth;
  /**
   * The integration service environment network health state.
   */
  networkDependencyHealthState: IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;
}

/**
 * The azure async operation resource.
 */
export interface IntegrationServiceEnvironmentNetworkDependency {
  /**
   * The network dependency category type.
   */
  category?: IntegrationServiceEnvironmentNetworkDependencyCategoryType;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The endpoints.
   */
  endpoints?: IntegrationServiceEnvironmentNetworkEndpoint[];
}

/**
 * The network endpoint.
 */
export interface IntegrationServiceEnvironmentNetworkEndpoint {
  /**
   * The accessibility state.
   */
  accessibility?: IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;
  /**
   * The domain name.
   */
  domainName?: string;
  /**
   * The ports.
   */
  ports?: string[];
}

/**
 * The integration service environment subnet network health.
 */
export interface IntegrationServiceEnvironmentNetworkDependencyHealth {
  /**
   * The error if any occurred during the operation.
   */
  error?: ExtendedErrorInfo;
  /**
   * The network dependency health state.
   */
  state?: IntegrationServiceEnvironmentNetworkDependencyHealthState;
}

/**
 * The extended error info.
 */
export interface ExtendedErrorInfo {
  /**
   * The error code.
   */
  code: ErrorResponseCode;
  /**
   * The error message.
   */
  message: string;
  /**
   * The error message details.
   */
  details?: ExtendedErrorInfo[];
  /**
   * The inner error.
   */
  innerError?: any;
}

/**
 * The list of managed APIs.
 */
export interface ManagedApiListResult {
  /**
   * The managed APIs.
   */
  value?: ManagedApi[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The managed api definition.
 */
export type ManagedApi = Resource & {
  /**
   * The api resource properties.
   */
  properties?: ApiResourceProperties;
};

/**
 * The API resource properties.
 */
export interface ApiResourceProperties {
  /**
   * The name
   */
  name?: string;
  /**
   * The connection parameters.
   */
  connectionParameters?: { [propertyName: string]: any };
  /**
   * The metadata.
   */
  metadata?: ApiResourceMetadata;
  /**
   * The runtime urls.
   */
  runtimeUrls?: string[];
  /**
   * The api general information.
   */
  generalInformation?: ApiResourceGeneralInformation;
  /**
   * The capabilities.
   */
  capabilities?: string[];
  /**
   * The backend service.
   */
  backendService?: ApiResourceBackendService;
  /**
   * The policies for the API.
   */
  policies?: ApiResourcePolicies;
  /**
   * The API definition.
   */
  apiDefinitionUrl?: string;
  /**
   * The api definitions.
   */
  apiDefinitions?: ApiResourceDefinitions;
  /**
   * The integration service environment reference.
   */
  integrationServiceEnvironment?: ResourceReference;
  /**
   * The provisioning state.
   */
  provisioningState?: WorkflowProvisioningState;
  /**
   * The category.
   */
  category?: ApiTier;
}

/**
 * The api resource metadata.
 */
export interface ApiResourceMetadata {
  /**
   * The source.
   */
  source?: string;
  /**
   * The brand color.
   */
  brandColor?: string;
  /**
   * The hide key.
   */
  hideKey?: string;
  /**
   * The tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The api type.
   */
  apiType?: ApiType;
  /**
   * The WSDL service.
   */
  wsdlService?: WsdlService;
  /**
   * The WSDL import method.
   */
  wsdlImportMethod?: WsdlImportMethod;
  /**
   * The connection type.
   */
  connectionType?: string;
  /**
   * The provisioning state.
   */
  provisioningState?: WorkflowProvisioningState;
  /**
   * The connector deployment parameters metadata.
   */
  deploymentParameters?: ApiDeploymentParameterMetadataSet;
}

/**
 * The WSDL service.
 */
export interface WsdlService {
  /**
   * The qualified name.
   */
  qualifiedName?: string;
  /**
   * The list of endpoints' qualified names.
   */
  endpointQualifiedNames?: string[];
}

/**
 * The API deployment parameters metadata.
 */
export interface ApiDeploymentParameterMetadataSet {
  /**
   * The package content link parameter.
   */
  packageContentLink?: ApiDeploymentParameterMetadata;
  /**
   * The package content link parameter.
   */
  redisCacheConnectionString?: ApiDeploymentParameterMetadata;
}

/**
 * The API deployment parameter metadata.
 */
export interface ApiDeploymentParameterMetadata {
  /**
   * The type.
   */
  type?: string;
  /**
   * Indicates whether its required.
   */
  isRequired?: boolean;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The description.
   */
  description?: string;
  /**
   * The visibility.
   */
  visibility?: ApiDeploymentParameterVisibility;
}

/**
 * The API general information.
 */
export interface ApiResourceGeneralInformation {
  /**
   * The icon url.
   */
  iconUrl?: string;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The description.
   */
  description?: string;
  /**
   * The terms of use url.
   */
  termsOfUseUrl?: string;
  /**
   * The release tag.
   */
  releaseTag?: string;
  /**
   * The tier.
   */
  tier?: ApiTier;
}

/**
 * The API backend service.
 */
export interface ApiResourceBackendService {
  /**
   * The service URL.
   */
  serviceUrl?: string;
}

/**
 * The API resource policies.
 */
export interface ApiResourcePolicies {
  /**
   * The API level only policies XML as embedded content.
   */
  content?: string;
  /**
   * The content link to the policies.
   */
  contentLink?: string;
}

/**
 * The Api resource definition.
 */
export interface ApiResourceDefinitions {
  /**
   * The original swagger url.
   */
  originalSwaggerUrl?: string;
  /**
   * The modified swagger url.
   */
  modifiedSwaggerUrl?: string;
}

/**
 * The list of managed API operations.
 */
export interface ApiOperationListResult {
  /**
   * The api operation definitions for an API.
   */
  value?: ApiOperation[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The api operation.
 */
export type ApiOperation = Resource & {
  /**
   * The api operations properties
   */
  properties?: ApiOperationPropertiesDefinition;
};

/**
 * The api operations properties
 */
export interface ApiOperationPropertiesDefinition {
  /**
   * The summary of the api operation.
   */
  summary?: string;
  /**
   * The description of the api operation.
   */
  description?: string;
  /**
   * The visibility of the api operation.
   */
  visibility?: string;
  /**
   * The trigger type of api operation.
   */
  trigger?: string;
  /**
   * The trigger hint for the api operation.
   */
  triggerHint?: string;
  /**
   * Indicates whether the api operation is pageable.
   */
  pageable?: boolean;
  /**
   * The annotation of api operation.
   */
  annotation?: ApiOperationAnnotation;
  /**
   * The api reference.
   */
  api?: ApiReference;
  /**
   * The operation inputs definition schema.
   */
  inputsDefinition?: SwaggerSchema;
  /**
   * The operation responses definition schemas.
   */
  responsesDefinition?: { [propertyName: string]: SwaggerSchema };
  /**
   * Indicates whether the API operation is webhook or not.
   */
  isWebhook?: boolean;
  /**
   * Indicates whether the API operation is notification or not.
   */
  isNotification?: boolean;
}

/**
 * The Api Operation Annotation.
 */
export interface ApiOperationAnnotation {
  /**
   * The status annotation.
   */
  status?: StatusAnnotation;
  /**
   * The family.
   */
  family?: string;
  /**
   * The revision.
   */
  revision?: number;
}

/**
 * The Api reference.
 */
export type ApiReference = ResourceReference & {
  /**
   * The display name of the api.
   */
  displayName?: string;
  /**
   * The description of the api.
   */
  description?: string;
  /**
   * The icon uri of the api.
   */
  iconUri?: string;
  /**
   * The swagger of the api.
   */
  swagger?: any;
  /**
   * The brand color of the api.
   */
  brandColor?: string;
  /**
   * The tier.
   */
  category?: ApiTier;
  /**
   * The integration service environment reference.
   */
  integrationServiceEnvironment?: ResourceReference;
};

/**
 * The swagger schema.
 */
export interface SwaggerSchema {
  /**
   * The reference.
   */
  ref?: string;
  /**
   * The type
   */
  type?: SwaggerSchemaType;
  /**
   * The title.
   */
  title?: string;
  /**
   * The items schema.
   */
  items?: SwaggerSchema;
  /**
   * The object properties
   */
  properties?: { [propertyName: string]: SwaggerSchema };
  /**
   * The additional properties.
   */
  additionalProperties?: any;
  /**
   * The object required properties.
   */
  required?: string[];
  /**
   * The maximum number of allowed properties.
   */
  maxProperties?: number;
  /**
   * The minimum number of allowed properties.
   */
  minProperties?: number;
  /**
   * The schemas which must pass validation when this schema is used.
   */
  allOf?: SwaggerSchema[];
  /**
   * The discriminator.
   */
  discriminator?: string;
  /**
   * Indicates whether this property must be present in the a request.
   */
  readOnly?: boolean;
  /**
   * The xml representation format for a property.
   */
  xml?: SwaggerXml;
  /**
   * The external documentation.
   */
  externalDocs?: SwaggerExternalDocumentation;
  /**
   * The example value.
   */
  example?: any;
  /**
   * Indicates the notification url extension. If this is set, the property's value should be a callback url for a webhook.
   */
  notificationUrlExtension?: boolean;
  /**
   * The dynamic schema configuration.
   */
  dynamicSchemaOld?: SwaggerCustomDynamicSchema;
  /**
   * The dynamic schema configuration.
   */
  dynamicSchemaNew?: SwaggerCustomDynamicProperties;
  /**
   * The dynamic list.
   */
  dynamicListNew?: SwaggerCustomDynamicList;
  /**
   * The dynamic values tree configuration.
   */
  dynamicTree?: SwaggerCustomDynamicTree;
}

/**
 * The Swagger XML.
 */
export interface SwaggerXml {
  /**
   * The xml element or attribute name.
   */
  name?: string;
  /**
   * The xml namespace.
   */
  namespace?: string;
  /**
   * The name prefix.
   */
  prefix?: string;
  /**
   * Indicates whether the property should be an attribute instead of an element.
   */
  attribute?: boolean;
  /**
   * Indicates whether the array elements are wrapped in a container element.
   */
  wrapped?: boolean;
  /**
   * The vendor extensions.
   */
  extensions?: { [propertyName: string]: any };
}

/**
 * The swagger external documentation
 */
export interface SwaggerExternalDocumentation {
  /**
   * The document description.
   */
  description?: string;
  /**
   * The documentation Uri.
   */
  uri?: string;
  /**
   * The vendor extensions.
   */
  extensions?: { [propertyName: string]: any };
}

/**
 * The swagger custom dynamic schema.
 */
export interface SwaggerCustomDynamicSchema {
  /**
   * The operation id to fetch dynamic schema.
   */
  operationId?: string;
  /**
   * Json pointer to the dynamic schema on the response body.
   */
  valuePath?: string;
  /**
   * The operation parameters.
   */
  parameters?: { [propertyName: string]: any };
}

/**
 * The swagger custom dynamic properties.
 */
export interface SwaggerCustomDynamicProperties {
  /**
   * The operation id to fetch dynamic schema.
   */
  operationId?: string;
  /**
   * Json pointer to the dynamic schema on the response body.
   */
  valuePath?: string;
  /**
   * The operation parameters.
   */
  parameters?: { [propertyName: string]: SwaggerCustomDynamicProperties };
}

/**
 * The swagger custom dynamic list.
 */
export interface SwaggerCustomDynamicList {
  /**
   * The operation id to fetch dynamic schema.
   */
  operationId?: string;
  /**
   * The built in operation.
   */
  builtInOperation?: string;
  /**
   * The path to a response property (relative to the response object, not the response body) which contains an array of dynamic value items.
   */
  itemsPath?: string;
  /**
   * The path to a property which defines the value which should be used.
   */
  itemValuePath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemTitlePath?: string;
  /**
   * The parameters.
   */
  parameters?: { [propertyName: string]: SwaggerCustomDynamicProperties };
}

/**
 * The swagger custom dynamic tree.
 */
export interface SwaggerCustomDynamicTree {
  /**
   * The tree settings
   */
  settings?: SwaggerCustomDynamicTreeSettings;
  /**
   * The tree on-open configuration
   */
  open?: SwaggerCustomDynamicTreeCommand;
  /**
   * The tree on-browse configuration
   */
  browse?: SwaggerCustomDynamicTreeCommand;
}

/**
 * The swagger custom dynamic tree settings.
 */
export interface SwaggerCustomDynamicTreeSettings {
  /**
   * Indicates whether parent nodes can be selected.
   */
  canSelectParentNodes?: boolean;
  /**
   * Indicates whether leaf nodes can be selected.
   */
  canSelectLeafNodes?: boolean;
}

/**
 * The swagger tree command.
 */
export interface SwaggerCustomDynamicTreeCommand {
  /**
   * The path to an item property which defines the display name of the item.
   */
  operationId?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemsPath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemValuePath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemTitlePath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemFullTitlePath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemIsParent?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  selectableFilter?: string;
  /**
   * Dictionary of <SwaggerCustomDynamicTreeParameter>
   */
  parameters?: { [propertyName: string]: SwaggerCustomDynamicTreeParameter };
}

/**
 * The swagger custom dynamic tree parameter.
 */
export interface SwaggerCustomDynamicTreeParameter {
  /**
   * Gets or sets a path to a property in the currently selected item to pass as a value to a parameter for the given operation.
   */
  selectedItemValuePath?: string;
  /**
   * The parameter value.
   */
  value?: any;
  /**
   * The parameter reference.
   */
  parameterReference?: string;
  /**
   * Indicates whether the parameter is required.
   */
  required?: boolean;
}

/**
 * Result of the request to list Logic operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of Logic operations supported by the Logic resource provider.
   */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Logic REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Logic
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Profile, endpoint, etc.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
}

/**
 * The workflow filter.
 */
export interface WorkflowFilter {
  /**
   * The state of workflows.
   */
  state?: WorkflowState;
}

/**
 * The workflow trigger filter.
 */
export interface WorkflowTriggerFilter {
  /**
   * The state of workflow trigger.
   */
  state?: WorkflowState;
}

/**
 * The workflow trigger history filter.
 */
export interface WorkflowTriggerHistoryFilter {
  /**
   * The status of workflow trigger history.
   */
  status?: WorkflowStatus;
}

/**
 * The workflow run filter.
 */
export interface WorkflowRunFilter {
  /**
   * The status of workflow run.
   */
  status?: WorkflowStatus;
}

/**
 * The workflow run action filter.
 */
export interface WorkflowRunActionFilter {
  /**
   * The status of workflow run action.
   */
  status?: WorkflowStatus;
}

/**
 * The integration account schema filter for odata query.
 */
export interface IntegrationAccountSchemaFilter {
  /**
   * The schema type of integration account schema.
   */
  schemaType: SchemaType;
}

/**
 * The integration account map filter for odata query.
 */
export interface IntegrationAccountMapFilter {
  /**
   * The map type of integration account map.
   */
  mapType: MapType;
}

/**
 * The integration account partner filter for odata query.
 */
export interface IntegrationAccountPartnerFilter {
  /**
   * The partner type of integration account partner.
   */
  partnerType: PartnerType;
}

/**
 * The integration account agreement filter for odata query.
 */
export interface IntegrationAccountAgreementFilter {
  /**
   * The agreement type of integration account agreement.
   */
  agreementType: AgreementType;
}

/**
 * The integration account session filter.
 */
export interface IntegrationAccountSessionFilter {
  /**
   * The changed time of integration account sessions.
   */
  changedTime: Date;
}

/**
 * Defines values for WorkflowProvisioningState.
 */
export type WorkflowProvisioningState =
  | "NotSpecified"
  | "Accepted"
  | "Running"
  | "Ready"
  | "Creating"
  | "Created"
  | "Deleting"
  | "Deleted"
  | "Canceled"
  | "Failed"
  | "Succeeded"
  | "Moving"
  | "Updating"
  | "Registering"
  | "Registered"
  | "Unregistering"
  | "Unregistered"
  | "Completed";
/**
 * Defines values for WorkflowState.
 */
export type WorkflowState =
  | "NotSpecified"
  | "Completed"
  | "Enabled"
  | "Disabled"
  | "Deleted"
  | "Suspended";
/**
 * Defines values for SkuName.
 */
export type SkuName =
  | "NotSpecified"
  | "Free"
  | "Shared"
  | "Basic"
  | "Standard"
  | "Premium";
/**
 * Defines values for ParameterType.
 */
export type ParameterType =
  | "NotSpecified"
  | "String"
  | "SecureString"
  | "Int"
  | "Float"
  | "Bool"
  | "Array"
  | "Object"
  | "SecureObject";
/**
 * Defines values for KeyType.
 */
export type KeyType = "NotSpecified" | "Primary" | "Secondary";
/**
 * Defines values for WorkflowTriggerProvisioningState.
 */
export type WorkflowTriggerProvisioningState =
  | "NotSpecified"
  | "Accepted"
  | "Running"
  | "Ready"
  | "Creating"
  | "Created"
  | "Deleting"
  | "Deleted"
  | "Canceled"
  | "Failed"
  | "Succeeded"
  | "Moving"
  | "Updating"
  | "Registering"
  | "Registered"
  | "Unregistering"
  | "Unregistered"
  | "Completed";
/**
 * Defines values for WorkflowStatus.
 */
export type WorkflowStatus =
  | "NotSpecified"
  | "Paused"
  | "Running"
  | "Waiting"
  | "Succeeded"
  | "Skipped"
  | "Suspended"
  | "Cancelled"
  | "Failed"
  | "Faulted"
  | "TimedOut"
  | "Aborted"
  | "Ignored";
/**
 * Defines values for RecurrenceFrequency.
 */
export type RecurrenceFrequency =
  | "NotSpecified"
  | "Second"
  | "Minute"
  | "Hour"
  | "Day"
  | "Week"
  | "Month"
  | "Year";
/**
 * Defines values for IntegrationServiceEnvironmentAccessEndpointType.
 */
export type IntegrationServiceEnvironmentAccessEndpointType =
  | "NotSpecified"
  | "External"
  | "Internal";
/**
 * Defines values for IntegrationServiceEnvironmentSkuName.
 */
export type IntegrationServiceEnvironmentSkuName =
  | "NotSpecified"
  | "Premium"
  | "Developer";
/**
 * Defines values for IntegrationAccountSkuName.
 */
export type IntegrationAccountSkuName =
  | "NotSpecified"
  | "Free"
  | "Basic"
  | "Standard";
/**
 * Defines values for TrackEventsOperationOptions.
 */
export type TrackEventsOperationOptions = "None" | "DisableSourceInfoEnrich";
/**
 * Defines values for TrackingRecordType.
 */
export type TrackingRecordType =
  | "NotSpecified"
  | "Custom"
  | "AS2Message"
  | "AS2MDN"
  | "X12Interchange"
  | "X12FunctionalGroup"
  | "X12TransactionSet"
  | "X12InterchangeAcknowledgment"
  | "X12FunctionalGroupAcknowledgment"
  | "X12TransactionSetAcknowledgment"
  | "EdifactInterchange"
  | "EdifactFunctionalGroup"
  | "EdifactTransactionSet"
  | "EdifactInterchangeAcknowledgment"
  | "EdifactFunctionalGroupAcknowledgment"
  | "EdifactTransactionSetAcknowledgment";
/**
 * Defines values for SchemaType.
 */
export type SchemaType = "NotSpecified" | "Xml";
/**
 * Defines values for MapType.
 */
export type MapType = "NotSpecified" | "Xslt" | "Xslt20" | "Xslt30" | "Liquid";
/**
 * Defines values for PartnerType.
 */
export type PartnerType = "NotSpecified" | "B2B";
/**
 * Defines values for HashingAlgorithm.
 */
export type HashingAlgorithm =
  | "NotSpecified"
  | "None"
  | "MD5"
  | "SHA1"
  | "SHA2256"
  | "SHA2384"
  | "SHA2512";
/**
 * Defines values for EncryptionAlgorithm.
 */
export type EncryptionAlgorithm =
  | "NotSpecified"
  | "None"
  | "DES3"
  | "RC2"
  | "AES128"
  | "AES192"
  | "AES256";
/**
 * Defines values for SigningAlgorithm.
 */
export type SigningAlgorithm =
  | "NotSpecified"
  | "Default"
  | "SHA1"
  | "SHA2256"
  | "SHA2384"
  | "SHA2512";
/**
 * Defines values for TrailingSeparatorPolicy.
 */
export type TrailingSeparatorPolicy =
  | "NotSpecified"
  | "NotAllowed"
  | "Optional"
  | "Mandatory";
/**
 * Defines values for X12CharacterSet.
 */
export type X12CharacterSet = "NotSpecified" | "Basic" | "Extended" | "UTF8";
/**
 * Defines values for X12DateFormat.
 */
export type X12DateFormat = "NotSpecified" | "CCYYMMDD" | "YYMMDD";
/**
 * Defines values for X12TimeFormat.
 */
export type X12TimeFormat =
  | "NotSpecified"
  | "HHMM"
  | "HHMMSS"
  | "HHMMSSdd"
  | "HHMMSSd";
/**
 * Defines values for UsageIndicator.
 */
export type UsageIndicator =
  | "NotSpecified"
  | "Test"
  | "Information"
  | "Production";
/**
 * Defines values for MessageFilterType.
 */
export type MessageFilterType = "NotSpecified" | "Include" | "Exclude";
/**
 * Defines values for EdifactCharacterSet.
 */
export type EdifactCharacterSet =
  | "NotSpecified"
  | "UNOB"
  | "UNOA"
  | "UNOC"
  | "UNOD"
  | "UNOE"
  | "UNOF"
  | "UNOG"
  | "UNOH"
  | "UNOI"
  | "UNOJ"
  | "UNOK"
  | "UNOX"
  | "UNOY"
  | "KECA";
/**
 * Defines values for IntegrationServiceEnvironmentSkuScaleType.
 */
export type IntegrationServiceEnvironmentSkuScaleType =
  | "Manual"
  | "Automatic"
  | "None";
/**
 * Defines values for IntegrationServiceEnvironmentNetworkDependencyCategoryType.
 */
export type IntegrationServiceEnvironmentNetworkDependencyCategoryType =
  | "NotSpecified"
  | "AzureStorage"
  | "AzureManagement"
  | "AzureActiveDirectory"
  | "SSLCertificateVerification"
  | "DiagnosticLogsAndMetrics"
  | "IntegrationServiceEnvironmentConnectors"
  | "RedisCache"
  | "AccessEndpoints"
  | "RecoveryService"
  | "SQL"
  | "RegionalService";
/**
 * Defines values for IntegrationServiceEnvironmentNetworkEndPointAccessibilityState.
 */
export type IntegrationServiceEnvironmentNetworkEndPointAccessibilityState =
  | "NotSpecified"
  | "Unknown"
  | "Available"
  | "NotAvailable";
/**
 * Defines values for ErrorResponseCode.
 */
export type ErrorResponseCode =
  | "NotSpecified"
  | "IntegrationServiceEnvironmentNotFound"
  | "InternalServerError"
  | "InvalidOperationId";
/**
 * Defines values for IntegrationServiceEnvironmentNetworkDependencyHealthState.
 */
export type IntegrationServiceEnvironmentNetworkDependencyHealthState =
  | "NotSpecified"
  | "Healthy"
  | "Unhealthy"
  | "Unknown";
/**
 * Defines values for ApiType.
 */
export type ApiType = "NotSpecified" | "Rest" | "Soap";
/**
 * Defines values for WsdlImportMethod.
 */
export type WsdlImportMethod =
  | "NotSpecified"
  | "SoapToRest"
  | "SoapPassThrough";
/**
 * Defines values for ApiDeploymentParameterVisibility.
 */
export type ApiDeploymentParameterVisibility =
  | "NotSpecified"
  | "Default"
  | "Internal";
/**
 * Defines values for ApiTier.
 */
export type ApiTier = "NotSpecified" | "Enterprise" | "Standard" | "Premium";
/**
 * Defines values for StatusAnnotation.
 */
export type StatusAnnotation = "NotSpecified" | "Preview" | "Production";
/**
 * Defines values for SwaggerSchemaType.
 */
export type SwaggerSchemaType =
  | "String"
  | "Number"
  | "Integer"
  | "Boolean"
  | "Array"
  | "File"
  | "Object"
  | "Null";
/**
 * Defines values for AzureAsyncOperationState.
 */
export type AzureAsyncOperationState =
  | "Failed"
  | "Succeeded"
  | "Pending"
  | "Canceled";
/**
 * Defines values for DaysOfWeek.
 */
export type DaysOfWeek =
  | "Sunday"
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday";
/**
 * Defines values for DayOfWeek.
 */
export type DayOfWeek =
  | "Sunday"
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday";
/**
 * Defines values for EventLevel.
 */
export type EventLevel =
  | "LogAlways"
  | "Critical"
  | "Error"
  | "Warning"
  | "Informational"
  | "Verbose";
/**
 * Defines values for AgreementType.
 */
export type AgreementType = "NotSpecified" | "AS2" | "X12" | "Edifact";
/**
 * Defines values for SegmentTerminatorSuffix.
 */
export type SegmentTerminatorSuffix =
  | "NotSpecified"
  | "None"
  | "CR"
  | "LF"
  | "CRLF";
/**
 * Defines values for EdifactDecimalIndicator.
 */
export type EdifactDecimalIndicator = "NotSpecified" | "Comma" | "Decimal";

/**
 * Optional parameters.
 */
export interface WorkflowsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId.
   */
  filter?: string;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type WorkflowsListBySubscriptionResponse = WorkflowListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowListResult;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId.
   */
  filter?: string;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type WorkflowsListByResourceGroupResponse = WorkflowListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowsGetResponse = Workflow & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Workflow;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WorkflowsCreateOrUpdateResponse = Workflow & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Workflow;
  };
};

/**
 * Contains response data for the update operation.
 */
export type WorkflowsUpdateResponse = Workflow & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Workflow;
  };
};

/**
 * Contains response data for the generateUpgradedDefinition operation.
 */
export type WorkflowsGenerateUpgradedDefinitionResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the listCallbackUrl operation.
 */
export type WorkflowsListCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerCallbackUrl;
  };
};

/**
 * Contains response data for the listSwagger operation.
 */
export type WorkflowsListSwaggerResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId.
   */
  filter?: string;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type WorkflowsListBySubscriptionNextResponse = WorkflowListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowListResult;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId.
   */
  filter?: string;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type WorkflowsListByResourceGroupNextResponse = WorkflowListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowListResult;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowVersionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the list operation.
 */
export type WorkflowVersionsListResponse = WorkflowVersionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowVersionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowVersionsGetResponse = WorkflowVersion & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowVersion;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowVersionsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowVersionsListNextResponse = WorkflowVersionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowVersionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowTriggersListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type WorkflowTriggersListResponse = WorkflowTriggerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowTriggersGetResponse = WorkflowTrigger & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTrigger;
  };
};

/**
 * Contains response data for the getSchemaJson operation.
 */
export type WorkflowTriggersGetSchemaJsonResponse = JsonSchema & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: JsonSchema;
  };
};

/**
 * Contains response data for the listCallbackUrl operation.
 */
export type WorkflowTriggersListCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerCallbackUrl;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowTriggersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowTriggersListNextResponse = WorkflowTriggerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerListResult;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowVersionTriggersListCallbackUrlOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The callback URL parameters.
   */
  parameters?: GetCallbackUrlParameters;
}

/**
 * Contains response data for the listCallbackUrl operation.
 */
export type WorkflowVersionTriggersListCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerCallbackUrl;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowTriggerHistoriesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type WorkflowTriggerHistoriesListResponse = WorkflowTriggerHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerHistoryListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowTriggerHistoriesGetResponse = WorkflowTriggerHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerHistory;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowTriggerHistoriesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowTriggerHistoriesListNextResponse = WorkflowTriggerHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerHistoryListResult;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowRunsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunsListResponse = WorkflowRunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunsGetResponse = WorkflowRun & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRun;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowRunsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowRunsListNextResponse = WorkflowRunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunListResult;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowRunActionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionsListResponse = WorkflowRunActionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunActionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionsGetResponse = WorkflowRunAction & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunAction;
  };
};

/**
 * Contains response data for the listExpressionTraces operation.
 */
export type WorkflowRunActionsListExpressionTracesResponse = ExpressionTraces & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressionTraces;
  };
};

/**
 * Optional parameters.
 */
export interface WorkflowRunActionsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowRunActionsListNextResponse = WorkflowRunActionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunActionListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionRepetitionsListResponse = WorkflowRunActionRepetitionDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunActionRepetitionDefinitionCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionRepetitionsGetResponse = WorkflowRunActionRepetitionDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunActionRepetitionDefinition;
  };
};

/**
 * Contains response data for the listExpressionTraces operation.
 */
export type WorkflowRunActionRepetitionsListExpressionTracesResponse = ExpressionTraces & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExpressionTraces;
  };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionRepetitionsRequestHistoriesListResponse = RequestHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RequestHistoryListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionRepetitionsRequestHistoriesGetResponse = RequestHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RequestHistory;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowRunActionRepetitionsRequestHistoriesListNextResponse = RequestHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RequestHistoryListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionRequestHistoriesListResponse = RequestHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RequestHistoryListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionRequestHistoriesGetResponse = RequestHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RequestHistory;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowRunActionRequestHistoriesListNextResponse = RequestHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RequestHistoryListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionScopeRepetitionsListResponse = WorkflowRunActionRepetitionDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunActionRepetitionDefinitionCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionScopeRepetitionsGetResponse = WorkflowRunActionRepetitionDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRunActionRepetitionDefinition;
  };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunOperationsGetResponse = WorkflowRun & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowRun;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type IntegrationAccountsListBySubscriptionResponse = IntegrationAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type IntegrationAccountsListByResourceGroupResponse = IntegrationAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountsGetResponse = IntegrationAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccount;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountsCreateOrUpdateResponse = IntegrationAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccount;
  };
};

/**
 * Contains response data for the update operation.
 */
export type IntegrationAccountsUpdateResponse = IntegrationAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccount;
  };
};

/**
 * Contains response data for the listCallbackUrl operation.
 */
export type IntegrationAccountsListCallbackUrlResponse = CallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CallbackUrl;
  };
};

/**
 * Contains response data for the listKeyVaultKeys operation.
 */
export type IntegrationAccountsListKeyVaultKeysResponse = KeyVaultKeyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyVaultKeyCollection;
  };
};

/**
 * Contains response data for the regenerateAccessKey operation.
 */
export type IntegrationAccountsRegenerateAccessKeyResponse = IntegrationAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccount;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type IntegrationAccountsListBySubscriptionNextResponse = IntegrationAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type IntegrationAccountsListByResourceGroupNextResponse = IntegrationAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountAssembliesListResponse = AssemblyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AssemblyCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountAssembliesGetResponse = AssemblyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AssemblyDefinition;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountAssembliesCreateOrUpdateResponse = AssemblyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AssemblyDefinition;
  };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountAssembliesListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerCallbackUrl;
  };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountBatchConfigurationsListResponse = BatchConfigurationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchConfigurationCollection;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountBatchConfigurationsGetResponse = BatchConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchConfiguration;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountBatchConfigurationsCreateOrUpdateResponse = BatchConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BatchConfiguration;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountSchemasListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: SchemaType.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountSchemasListResponse = IntegrationAccountSchemaListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountSchemaListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountSchemasGetResponse = IntegrationAccountSchema & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountSchema;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountSchemasCreateOrUpdateResponse = IntegrationAccountSchema & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountSchema;
  };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountSchemasListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerCallbackUrl;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountSchemasListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: SchemaType.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountSchemasListNextResponse = IntegrationAccountSchemaListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountSchemaListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountMapsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: MapType.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountMapsListResponse = IntegrationAccountMapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountMapListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountMapsGetResponse = IntegrationAccountMap & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountMap;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountMapsCreateOrUpdateResponse = IntegrationAccountMap & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountMap;
  };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountMapsListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerCallbackUrl;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountMapsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: MapType.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountMapsListNextResponse = IntegrationAccountMapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountMapListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountPartnersListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: PartnerType.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountPartnersListResponse = IntegrationAccountPartnerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountPartnerListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountPartnersGetResponse = IntegrationAccountPartner & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountPartner;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountPartnersCreateOrUpdateResponse = IntegrationAccountPartner & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountPartner;
  };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountPartnersListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerCallbackUrl;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountPartnersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: PartnerType.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountPartnersListNextResponse = IntegrationAccountPartnerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountPartnerListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountAgreementsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: AgreementType.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountAgreementsListResponse = IntegrationAccountAgreementListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountAgreementListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountAgreementsGetResponse = IntegrationAccountAgreement & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountAgreement;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountAgreementsCreateOrUpdateResponse = IntegrationAccountAgreement & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountAgreement;
  };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountAgreementsListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: WorkflowTriggerCallbackUrl;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountAgreementsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: AgreementType.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountAgreementsListNextResponse = IntegrationAccountAgreementListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountAgreementListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountCertificatesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountCertificatesListResponse = IntegrationAccountCertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountCertificateListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountCertificatesGetResponse = IntegrationAccountCertificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountCertificate;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountCertificatesCreateOrUpdateResponse = IntegrationAccountCertificate & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountCertificate;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountCertificatesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountCertificatesListNextResponse = IntegrationAccountCertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountCertificateListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountSessionsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: ChangedTime.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountSessionsListResponse = IntegrationAccountSessionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountSessionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountSessionsGetResponse = IntegrationAccountSession & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountSession;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountSessionsCreateOrUpdateResponse = IntegrationAccountSession & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountSession;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationAccountSessionsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: ChangedTime.
   */
  filter?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountSessionsListNextResponse = IntegrationAccountSessionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationAccountSessionListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationServiceEnvironmentsListBySubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscription operation.
 */
export type IntegrationServiceEnvironmentsListBySubscriptionResponse = IntegrationServiceEnvironmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironmentListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationServiceEnvironmentsListByResourceGroupOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type IntegrationServiceEnvironmentsListByResourceGroupResponse = IntegrationServiceEnvironmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironmentListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationServiceEnvironmentsGetResponse = IntegrationServiceEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironment;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationServiceEnvironmentsCreateOrUpdateResponse = IntegrationServiceEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironment;
  };
};

/**
 * Contains response data for the update operation.
 */
export type IntegrationServiceEnvironmentsUpdateResponse = IntegrationServiceEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironment;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationServiceEnvironmentsListBySubscriptionNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type IntegrationServiceEnvironmentsListBySubscriptionNextResponse = IntegrationServiceEnvironmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironmentListResult;
  };
};

/**
 * Optional parameters.
 */
export interface IntegrationServiceEnvironmentsListByResourceGroupNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type IntegrationServiceEnvironmentsListByResourceGroupNextResponse = IntegrationServiceEnvironmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironmentListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationServiceEnvironmentSkusListResponse = IntegrationServiceEnvironmentSkuList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironmentSkuList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationServiceEnvironmentSkusListNextResponse = IntegrationServiceEnvironmentSkuList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IntegrationServiceEnvironmentSkuList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationServiceEnvironmentNetworkHealthGetResponse = {
  [propertyName: string]: IntegrationServiceEnvironmentSubnetNetworkHealth;
} & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: {
      [propertyName: string]: IntegrationServiceEnvironmentSubnetNetworkHealth;
    };
  };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationServiceEnvironmentManagedApisListResponse = ManagedApiListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedApiListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationServiceEnvironmentManagedApisGetResponse = ManagedApi & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedApi;
  };
};

/**
 * Contains response data for the put operation.
 */
export type IntegrationServiceEnvironmentManagedApisPutResponse = ManagedApi & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedApi;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationServiceEnvironmentManagedApisListNextResponse = ManagedApiListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ManagedApiListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationServiceEnvironmentManagedApiOperationsListResponse = ApiOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiOperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationServiceEnvironmentManagedApiOperationsListNextResponse = ApiOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ApiOperationListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Optional parameters.
 */
export interface LogicManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
