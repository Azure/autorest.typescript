/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-05-01",
    serializedName: "api-version",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const top: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workflowName: coreHttp.OperationURLParameter = {
  parameterPath: "workflowName",
  mapper: {
    serializedName: "workflowName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    serializedName: "Content-Type",
    isConstant: true,
    type: {
      name: "String"
    }
  }
};

export const workflow: coreHttp.OperationParameter = {
  parameterPath: "workflow",
  mapper: Mappers.Workflow
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GenerateUpgradedDefinitionParameters
};

export const listCallbackUrl: coreHttp.OperationParameter = {
  parameterPath: "listCallbackUrl",
  mapper: Mappers.GetCallbackUrlParameters
};

export const move: coreHttp.OperationParameter = {
  parameterPath: "move",
  mapper: Mappers.Workflow
};

export const keyType: coreHttp.OperationParameter = {
  parameterPath: "keyType",
  mapper: Mappers.RegenerateActionParameter
};

export const validate: coreHttp.OperationParameter = {
  parameterPath: "validate",
  mapper: Mappers.Workflow
};

export const location: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink1: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const versionId: coreHttp.OperationURLParameter = {
  parameterPath: "versionId",
  mapper: {
    serializedName: "versionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink2: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const triggerName: coreHttp.OperationURLParameter = {
  parameterPath: "triggerName",
  mapper: {
    serializedName: "triggerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const setState: coreHttp.OperationParameter = {
  parameterPath: "setState",
  mapper: Mappers.SetTriggerStateActionDefinition
};

export const parameters1: coreHttp.OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: Mappers.GetCallbackUrlParameters
};

export const filter2: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const historyName: coreHttp.OperationURLParameter = {
  parameterPath: "historyName",
  mapper: {
    serializedName: "historyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const runName: coreHttp.OperationURLParameter = {
  parameterPath: "runName",
  mapper: {
    serializedName: "runName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter3: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const actionName: coreHttp.OperationURLParameter = {
  parameterPath: "actionName",
  mapper: {
    serializedName: "actionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const repetitionName: coreHttp.OperationURLParameter = {
  parameterPath: "repetitionName",
  mapper: {
    serializedName: "repetitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const requestHistoryName: coreHttp.OperationURLParameter = {
  parameterPath: "requestHistoryName",
  mapper: {
    serializedName: "requestHistoryName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operationId: coreHttp.OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationAccountName: coreHttp.OperationURLParameter = {
  parameterPath: "integrationAccountName",
  mapper: {
    serializedName: "integrationAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationAccount: coreHttp.OperationParameter = {
  parameterPath: "integrationAccount",
  mapper: Mappers.IntegrationAccount
};

export const parameters2: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.GetCallbackUrlParameters
};

export const listKeyVaultKeys: coreHttp.OperationParameter = {
  parameterPath: "listKeyVaultKeys",
  mapper: Mappers.ListKeyVaultKeysDefinition
};

export const logTrackingEvents: coreHttp.OperationParameter = {
  parameterPath: "logTrackingEvents",
  mapper: Mappers.TrackingEventsDefinition
};

export const regenerateAccessKey: coreHttp.OperationParameter = {
  parameterPath: "regenerateAccessKey",
  mapper: Mappers.RegenerateActionParameter
};

export const assemblyArtifactName: coreHttp.OperationURLParameter = {
  parameterPath: "assemblyArtifactName",
  mapper: {
    serializedName: "assemblyArtifactName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const assemblyArtifact: coreHttp.OperationParameter = {
  parameterPath: "assemblyArtifact",
  mapper: Mappers.AssemblyDefinition
};

export const batchConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "batchConfigurationName",
  mapper: {
    serializedName: "batchConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const batchConfiguration: coreHttp.OperationParameter = {
  parameterPath: "batchConfiguration",
  mapper: Mappers.BatchConfiguration
};

export const filter4: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const schemaName: coreHttp.OperationURLParameter = {
  parameterPath: "schemaName",
  mapper: {
    serializedName: "schemaName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const schema: coreHttp.OperationParameter = {
  parameterPath: "schema",
  mapper: Mappers.IntegrationAccountSchema
};

export const listContentCallbackUrl: coreHttp.OperationParameter = {
  parameterPath: "listContentCallbackUrl",
  mapper: Mappers.GetCallbackUrlParameters
};

export const filter5: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const mapName: coreHttp.OperationURLParameter = {
  parameterPath: "mapName",
  mapper: {
    serializedName: "mapName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const map: coreHttp.OperationParameter = {
  parameterPath: "map",
  mapper: Mappers.IntegrationAccountMap
};

export const filter6: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const partnerName: coreHttp.OperationURLParameter = {
  parameterPath: "partnerName",
  mapper: {
    serializedName: "partnerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const partner: coreHttp.OperationParameter = {
  parameterPath: "partner",
  mapper: Mappers.IntegrationAccountPartner
};

export const filter7: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const agreementName: coreHttp.OperationURLParameter = {
  parameterPath: "agreementName",
  mapper: {
    serializedName: "agreementName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const agreement: coreHttp.OperationParameter = {
  parameterPath: "agreement",
  mapper: Mappers.IntegrationAccountAgreement
};

export const certificateName: coreHttp.OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificate: coreHttp.OperationParameter = {
  parameterPath: "certificate",
  mapper: Mappers.IntegrationAccountCertificate
};

export const filter8: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const sessionName: coreHttp.OperationURLParameter = {
  parameterPath: "sessionName",
  mapper: {
    serializedName: "sessionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const session: coreHttp.OperationParameter = {
  parameterPath: "session",
  mapper: Mappers.IntegrationAccountSession
};

export const resourceGroup: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroup",
  mapper: {
    serializedName: "resourceGroup",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationServiceEnvironmentName: coreHttp.OperationURLParameter = {
  parameterPath: "integrationServiceEnvironmentName",
  mapper: {
    serializedName: "integrationServiceEnvironmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationServiceEnvironment: coreHttp.OperationParameter = {
  parameterPath: "integrationServiceEnvironment",
  mapper: Mappers.IntegrationServiceEnvironment
};

export const resourceGroup1: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroup",
  mapper: {
    serializedName: "resourceGroup",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiName: coreHttp.OperationURLParameter = {
  parameterPath: "apiName",
  mapper: {
    serializedName: "apiName",
    required: true,
    type: {
      name: "String"
    }
  }
};
