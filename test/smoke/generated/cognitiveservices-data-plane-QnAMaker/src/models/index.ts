/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * POST body schema to query the knowledgebase.
 */
export interface QueryDTO {
  /**
   * Exact qnaId to fetch from the knowledgebase, this field takes priority over question.
   */
  qnaId?: string;
  /**
   * User question to query against the knowledge base.
   */
  question?: string;
  /**
   * Max number of answers to be returned for the question.
   */
  top?: number;
  /**
   * Unique identifier for the user.
   */
  userId?: string;
  /**
   * Query against the test index.
   */
  isTest?: boolean;
  /**
   * Threshold for answers returned based on score.
   */
  scoreThreshold?: number;
  /**
   * Context object with previous QnA's information.
   */
  context?: QueryDTOContext;
  /**
   * Optional field. Set to 'QuestionOnly' for using a question only Ranker.
   */
  rankerType?: string;
  /**
   * Find only answers that contain these metadata.
   */
  strictFilters?: MetadataDTO[];
}

/**
 * Context object with previous QnA's information.
 */
export interface QueryContextDTO {
  /**
   * Previous QnA Id - qnaId of the top result.
   */
  previousQnaId?: string;
  /**
   * Previous user query.
   */
  previousUserQuery?: string;
}

/**
 * Context object with previous QnA's information.
 */
export type QueryDTOContext = QueryContextDTO & {};

/**
 * Name - value pair of metadata.
 */
export interface MetadataDTO {
  /**
   * Metadata name.
   */
  name: string;
  /**
   * Metadata value.
   */
  value: string;
}

/**
 * Represents List of Question Answers.
 */
export interface QnASearchResultList {
  /**
   * Represents Search Result list.
   */
  answers?: QnASearchResult[];
}

/**
 * Represents Search Result.
 */
export interface QnASearchResult {
  /**
   * List of questions.
   */
  questions?: string[];
  /**
   * Answer.
   */
  answer?: string;
  /**
   * Search result score.
   */
  score?: number;
  /**
   * Id of the QnA result.
   */
  id?: number;
  /**
   * Source of QnA result.
   */
  source?: string;
  /**
   * List of metadata.
   */
  metadata?: MetadataDTO[];
  /**
   * Context object of the QnA
   */
  context?: QnASearchResultContext;
}

/**
 * Context associated with Qna.
 */
export interface ContextDTO {
  /**
   * To mark if a prompt is relevant only with a previous question or not.
   * true - Do not include this QnA as search result for queries without context
   * false - ignores context and includes this QnA in search result
   */
  isContextOnly?: boolean;
  /**
   * List of prompts associated with the answer.
   */
  prompts?: PromptDTO[];
}

/**
 * Prompt for an answer.
 */
export interface PromptDTO {
  /**
   * Index of the prompt - used in ordering of the prompts
   */
  displayOrder?: number;
  /**
   * Qna id corresponding to the prompt - if QnaId is present, QnADTO object is ignored.
   */
  qnaId?: number;
  /**
   * QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object
   */
  qna?: PromptDTOQna;
  /**
   * Text displayed to represent a follow up question prompt
   */
  displayText?: string;
}

/**
 * Q-A object.
 */
export interface QnAdto {
  /**
   * Unique id for the Q-A.
   */
  id?: number;
  /**
   * Answer text
   */
  answer: string;
  /**
   * Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
   */
  source?: string;
  /**
   * List of questions associated with the answer.
   */
  questions: string[];
  /**
   * List of metadata associated with the answer.
   */
  metadata?: MetadataDTO[];
  /**
   * Context of a QnA
   */
  context?: QnAdtoContext;
}

/**
 * Context of a QnA
 */
export type QnAdtoContext = ContextDTO & {};

/**
 * QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object
 */
export type PromptDTOQna = QnAdto & {};

/**
 * Context object of the QnA
 */
export type QnASearchResultContext = ContextDTO & {};

/**
 * Error response. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface ErrorResponse {
  /**
   * The error object.
   */
  error?: ErrorResponseError;
}

/**
 * The error object. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface Error {
  /**
   * One of a server-defined set of error codes.
   */
  code: ErrorCodeType;
  /**
   * A human-readable representation of the error.
   */
  message?: string;
  /**
   * The target of the error.
   */
  target?: string;
  /**
   * An array of details about specific errors that led to this reported error.
   */
  details?: Error[];
  /**
   * An object containing more specific information than the current object about the error.
   */
  innerError?: InnerErrorModel;
}

/**
 * An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface InnerErrorModel {
  /**
   * A more specific error code than was provided by the containing error.
   */
  code?: string;
  /**
   * An object containing more specific information than the current object about the error.
   */
  innerError?: InnerErrorModel;
}

/**
 * The error object.
 */
export type ErrorResponseError = Error & {};

/**
 * Active learning feedback records.
 */
export interface FeedbackRecordsDTO {
  /**
   * List of feedback records.
   */
  feedbackRecords?: FeedbackRecordDTO[];
}

/**
 * Active learning feedback record.
 */
export interface FeedbackRecordDTO {
  /**
   * Unique identifier for the user.
   */
  userId?: string;
  /**
   * The suggested question being provided as feedback.
   */
  userQuestion?: string;
  /**
   * The qnaId for which the suggested question is provided as feedback.
   */
  qnaId?: number;
}

/**
 * Defines values for ErrorCodeType.
 */
export type ErrorCodeType =
  | "BadArgument"
  | "Forbidden"
  | "NotFound"
  | "KbNotFound"
  | "Unauthorized"
  | "Unspecified"
  | "EndpointKeysError"
  | "QuotaExceeded"
  | "QnaRuntimeError"
  | "SKULimitExceeded"
  | "OperationNotFound"
  | "ServiceError"
  | "ValidationFailure"
  | "ExtractionFailure";

/**
 * Contains response data for the generateAnswer operation.
 */
export type RuntimeGenerateAnswerResponse = QnASearchResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QnASearchResultList;
  };
};

/**
 * Optional parameters.
 */
export interface QnAMakerRuntimeClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
