/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { QnAMakerClient } from "../qnAMakerClient";
import {
  KnowledgebaseListAllResponse,
  KnowledgebaseGetDetailsResponse,
  ReplaceKbDTO,
  UpdateKbOperationDTO,
  KnowledgebaseUpdateResponse,
  CreateKbDTO,
  KnowledgebaseCreateResponse,
  EnvironmentType,
  KnowledgebaseDownloadResponse
} from "../models";

/**
 * Class representing a Knowledgebase.
 */
export class Knowledgebase {
  private readonly client: QnAMakerClient;

  /**
   * Initialize a new instance of the class Knowledgebase class.
   * @param client Reference to the service client
   */
  constructor(client: QnAMakerClient) {
    this.client = client;
  }

  /**
   * Gets all knowledgebases for a user.
   * @param options The options parameters.
   */
  listAll(
    options?: coreHttp.OperationOptions
  ): Promise<KnowledgebaseListAllResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listAllOperationSpec
    ) as Promise<KnowledgebaseListAllResponse>;
  }

  /**
   * Gets details of a specific knowledgebase.
   * @param kbId Knowledgebase id.
   * @param options The options parameters.
   */
  getDetails(
    kbId: string,
    options?: coreHttp.OperationOptions
  ): Promise<KnowledgebaseGetDetailsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { kbId, options: operationOptions },
      getDetailsOperationSpec
    ) as Promise<KnowledgebaseGetDetailsResponse>;
  }

  /**
   * Deletes the knowledgebase and all its data.
   * @param options The options parameters.
   */
  deleteModel(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      deleteModelOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Publishes all changes in test index of a knowledgebase to its prod index.
   * @param kbId Knowledgebase id.
   * @param options The options parameters.
   */
  publish(
    kbId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { kbId, options: operationOptions },
      publishOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Replace knowledgebase contents.
   * @param kbId Knowledgebase id.
   * @param replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded
   * @param options The options parameters.
   */
  replace(
    kbId: string,
    replaceKb: ReplaceKbDTO,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { kbId, replaceKb, options: operationOptions },
      replaceOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Asynchronous operation to modify a knowledgebase.
   * @param kbId Knowledgebase id.
   * @param updateKb Post body of the request.
   * @param options The options parameters.
   */
  update(
    kbId: string,
    updateKb: UpdateKbOperationDTO,
    options?: coreHttp.OperationOptions
  ): Promise<KnowledgebaseUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { kbId, updateKb, options: operationOptions },
      updateOperationSpec
    ) as Promise<KnowledgebaseUpdateResponse>;
  }

  /**
   * Asynchronous operation to create a new knowledgebase.
   * @param createKbPayload Post body of the request.
   * @param options The options parameters.
   */
  create(
    createKbPayload: CreateKbDTO,
    options?: coreHttp.OperationOptions
  ): Promise<KnowledgebaseCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { createKbPayload, options: operationOptions },
      createOperationSpec
    ) as Promise<KnowledgebaseCreateResponse>;
  }

  /**
   * Download the knowledgebase.
   * @param kbId Knowledgebase id.
   * @param environment Specifies whether environment is Test or Prod.
   * @param options The options parameters.
   */
  download(
    kbId: string,
    environment: EnvironmentType,
    options?: coreHttp.OperationOptions
  ): Promise<KnowledgebaseDownloadResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { kbId, environment, options: operationOptions },
      downloadOperationSpec
    ) as Promise<KnowledgebaseDownloadResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listAllOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KnowledgebasesDTO
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint],
  serializer
};
const getDetailsOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/{kbId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KnowledgebaseDTO
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.kbId],
  serializer
};
const deleteModelOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/{kbId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
const publishOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/{kbId}",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.kbId],
  serializer
};
const replaceOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/{kbId}",
  httpMethod: "PUT",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.replaceKb,
  urlParameters: [Parameters.endpoint, Parameters.kbId],
  headerParameters: [Parameters.contentType],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/{kbId}",
  httpMethod: "PATCH",
  responses: {
    202: {
      bodyMapper: Mappers.Operation,
      headersMapper: Mappers.KnowledgebaseUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.updateKb,
  urlParameters: [Parameters.endpoint, Parameters.kbId],
  headerParameters: [Parameters.contentType],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/create",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.Operation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.createKbPayload,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
const downloadOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/{kbId}/{environment}/qna",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QnADocumentsDTO
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.kbId, Parameters.environment],
  serializer
};
