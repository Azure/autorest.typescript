/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { QnAMakerRuntimeClient } from "../qnAMakerRuntimeClient";
import {
  QueryDTO,
  RuntimeGenerateAnswerResponse,
  FeedbackRecordsDTO
} from "../models";

/**
 * Class representing a Runtime.
 */
export class Runtime {
  private readonly client: QnAMakerRuntimeClient;

  /**
   * Initialize a new instance of the class Runtime class.
   * @param client Reference to the service client
   */
  constructor(client: QnAMakerRuntimeClient) {
    this.client = client;
  }

  /**
   * GenerateAnswer call to query the knowledgebase.
   * @param generateAnswerPayload Post body of the request.
   * @param kbId Knowledgebase id.
   * @param options The options parameters.
   */
  generateAnswer(
    generateAnswerPayload: QueryDTO,
    kbId: string,
    options?: coreHttp.OperationOptions
  ): Promise<RuntimeGenerateAnswerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { generateAnswerPayload, kbId, options: operationOptions },
      generateAnswerOperationSpec
    ) as Promise<RuntimeGenerateAnswerResponse>;
  }

  /**
   * Train call to add suggestions to the knowledgebase.
   * @param kbId Knowledgebase id.
   * @param trainPayload Post body of the request.
   * @param options The options parameters.
   */
  train(
    kbId: string,
    trainPayload: FeedbackRecordsDTO,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { kbId, trainPayload, options: operationOptions },
      trainOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const generateAnswerOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/{kbId}/generateAnswer",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.QnASearchResultList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.generateAnswerPayload,
  urlParameters: [Parameters.runtimeEndpoint, Parameters.kbId],
  headerParameters: [Parameters.contentType],
  serializer
};
const trainOperationSpec: coreHttp.OperationSpec = {
  path: "/knowledgebases/{kbId}/train",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.trainPayload,
  urlParameters: [Parameters.runtimeEndpoint, Parameters.kbId],
  headerParameters: [Parameters.contentType],
  serializer
};
