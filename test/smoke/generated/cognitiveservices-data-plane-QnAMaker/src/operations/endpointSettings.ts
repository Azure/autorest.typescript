/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { QnAMakerClient } from "../qnAMakerClient";
import {
  EndpointSettingsGetSettingsResponse,
  EndpointSettingsDTO,
  EndpointSettingsUpdateSettingsResponse
} from "../models";

/**
 * Class representing a EndpointSettings.
 */
export class EndpointSettings {
  private readonly client: QnAMakerClient;

  /**
   * Initialize a new instance of the class EndpointSettings class.
   * @param client Reference to the service client
   */
  constructor(client: QnAMakerClient) {
    this.client = client;
  }

  /**
   * Gets endpoint settings for an endpoint.
   * @param options The options parameters.
   */
  getSettings(
    options?: coreHttp.OperationOptions
  ): Promise<EndpointSettingsGetSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getSettingsOperationSpec
    ) as Promise<EndpointSettingsGetSettingsResponse>;
  }

  /**
   * Updates endpoint settings for an endpoint.
   * @param endpointSettingsPayload Post body of the request.
   * @param options The options parameters.
   */
  updateSettings(
    endpointSettingsPayload: EndpointSettingsDTO,
    options?: coreHttp.OperationOptions
  ): Promise<EndpointSettingsUpdateSettingsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { endpointSettingsPayload, options: operationOptions },
      updateSettingsOperationSpec
    ) as Promise<EndpointSettingsUpdateSettingsResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getSettingsOperationSpec: coreHttp.OperationSpec = {
  path: "/endpointSettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EndpointSettingsDTO
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint],
  serializer
};
const updateSettingsOperationSpec: coreHttp.OperationSpec = {
  path: "/endpointSettings",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" }, serializedName: "String" }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.endpointSettingsPayload,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
