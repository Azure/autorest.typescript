/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { QnAMakerClient } from "../qnAMakerClient";
import { AlterationsGetResponse, WordAlterationsDTO } from "../models";

/**
 * Class representing a Alterations.
 */
export class Alterations {
  private readonly client: QnAMakerClient;

  /**
   * Initialize a new instance of the class Alterations class.
   * @param client Reference to the service client
   */
  constructor(client: QnAMakerClient) {
    this.client = client;
  }

  /**
   * Download alterations from runtime.
   * @param options The options parameters.
   */
  getModel(
    options?: coreHttp.OperationOptions
  ): Promise<AlterationsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getModelOperationSpec
    ) as Promise<AlterationsGetResponse>;
  }

  /**
   * Replace alterations data.
   * @param wordAlterations New alterations data.
   * @param options The options parameters.
   */
  replace(
    wordAlterations: WordAlterationsDTO,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { wordAlterations, options: operationOptions },
      replaceOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getModelOperationSpec: coreHttp.OperationSpec = {
  path: "/alterations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WordAlterationsDTO
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
const replaceOperationSpec: coreHttp.OperationSpec = {
  path: "/alterations",
  httpMethod: "PUT",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.wordAlterations,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
