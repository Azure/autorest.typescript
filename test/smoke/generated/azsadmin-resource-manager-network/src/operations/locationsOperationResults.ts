/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkAdminClient } from "../networkAdminClient";
import {
  LocationsOperationResultsListResponse,
  LocationsOperationResultsListNextResponse
} from "../models";

/**
 * Class representing a LocationsOperationResults.
 */
export class LocationsOperationResults {
  private readonly client: NetworkAdminClient;

  /**
   * Initialize a new instance of the class LocationsOperationResults class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkAdminClient) {
    this.client = client;
  }

  /**
   * Returns the list of operation results for a location
   * @param location Location of the resource.
   * @param options The options parameters.
   */
  list(
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<LocationsOperationResultsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { location, options: operationOptions },
      listOperationSpec
    ) as Promise<LocationsOperationResultsListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param location Location of the resource.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<LocationsOperationResultsListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, location, options: operationOptions },
      listNextOperationSpec
    ) as Promise<LocationsOperationResultsListNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/providers/Microsoft.Network.Admin/locations/{location}/operationResults",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.location],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.location],
  serializer
};
