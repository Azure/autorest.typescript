/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const AdminOverview: coreHttp.CompositeMapper = {
  serializedName: "AdminOverview",
  type: {
    name: "Composite",
    className: "AdminOverview",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualNetworkHealth: {
        serializedName: "virtualNetworkHealth",
        type: {
          name: "Composite",
          className: "AdminOverviewResourceHealth"
        }
      },
      loadBalancerMuxHealth: {
        serializedName: "loadBalancerMuxHealth",
        type: {
          name: "Composite",
          className: "AdminOverviewResourceHealth"
        }
      },
      virtualGatewayHealth: {
        serializedName: "virtualGatewayHealth",
        type: {
          name: "Composite",
          className: "AdminOverviewResourceHealth"
        }
      },
      publicIpAddressUsage: {
        serializedName: "publicIpAddressUsage",
        type: {
          name: "Composite",
          className: "AdminOverviewResourceUsage"
        }
      },
      backendIpUsage: {
        serializedName: "backendIpUsage",
        type: {
          name: "Composite",
          className: "AdminOverviewResourceUsage"
        }
      },
      macAddressUsage: {
        serializedName: "macAddressUsage",
        type: {
          name: "Composite",
          className: "AdminOverviewResourceUsage"
        }
      }
    }
  }
};

export const AdminOverviewResourceHealth: coreHttp.CompositeMapper = {
  serializedName: "AdminOverviewResourceHealth",
  type: {
    name: "Composite",
    className: "AdminOverviewResourceHealth",
    modelProperties: {
      totalResourceCount: {
        serializedName: "totalResourceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      healthyResourceCount: {
        serializedName: "healthyResourceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorResourceCount: {
        serializedName: "errorResourceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      warningResourceCount: {
        serializedName: "warningResourceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      healthUnknownCount: {
        serializedName: "healthUnknownCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AdminOverviewResourceUsage: coreHttp.CompositeMapper = {
  serializedName: "AdminOverviewResourceUsage",
  type: {
    name: "Composite",
    className: "AdminOverviewResourceUsage",
    modelProperties: {
      totalResourceCount: {
        serializedName: "totalResourceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      inUseResourceCount: {
        serializedName: "inUseResourceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationList: coreHttp.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      }
    }
  }
};

export const Display: coreHttp.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocationsList: coreHttp.CompositeMapper = {
  serializedName: "LocationsList",
  type: {
    name: "Composite",
    className: "LocationsList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Location" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Location: coreHttp.CompositeMapper = {
  serializedName: "Location",
  type: {
    name: "Composite",
    className: "Location",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResultList: coreHttp.CompositeMapper = {
  serializedName: "OperationResultList",
  type: {
    name: "Composite",
    className: "OperationResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "OperationResult" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResult: coreHttp.CompositeMapper = {
  serializedName: "OperationResult",
  type: {
    name: "Composite",
    className: "OperationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerList: coreHttp.CompositeMapper = {
  serializedName: "LoadBalancerList",
  type: {
    name: "Composite",
    className: "LoadBalancerList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LoadBalancer" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancer: coreHttp.CompositeMapper = {
  serializedName: "LoadBalancer",
  type: {
    name: "Composite",
    className: "LoadBalancer",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantResourceUri: {
        serializedName: "properties.tenantResourceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpAddresses: {
        serializedName: "properties.publicIpAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "LoadBalancerPropertyPublicIpAddressesItem"
          }
        }
      }
    }
  }
};

export const ProvisionedResource: coreHttp.CompositeMapper = {
  serializedName: "ProvisionedResource",
  type: {
    name: "Composite",
    className: "ProvisionedResource",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TenantResource: coreHttp.CompositeMapper = {
  serializedName: "TenantResource",
  type: {
    name: "Composite",
    className: "TenantResource",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantResourceUri: {
        serializedName: "tenantResourceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerProperty: coreHttp.CompositeMapper = {
  serializedName: "LoadBalancerProperty",
  type: {
    name: "Composite",
    className: "LoadBalancerProperty",
    modelProperties: {
      ...ProvisionedResource.type.modelProperties,
      ...TenantResource.type.modelProperties,
      publicIpAddresses: {
        serializedName: "publicIpAddresses",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "LoadBalancerPropertyPublicIpAddressesItem"
          }
        }
      }
    }
  }
};

export const PublicIpAddressList: coreHttp.CompositeMapper = {
  serializedName: "PublicIpAddressList",
  type: {
    name: "Composite",
    className: "PublicIpAddressList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PublicIpAddress" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIpAddress: coreHttp.CompositeMapper = {
  serializedName: "PublicIpAddress",
  type: {
    name: "Composite",
    className: "PublicIpAddress",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantResourceUri: {
        serializedName: "properties.tenantResourceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        type: {
          name: "String"
        }
      },
      ipPool: {
        serializedName: "properties.ipPool",
        type: {
          name: "String"
        }
      },
      allocationMethod: {
        serializedName: "properties.allocationMethod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddressProperties: coreHttp.CompositeMapper = {
  serializedName: "PublicIPAddressProperties",
  type: {
    name: "Composite",
    className: "PublicIPAddressProperties",
    modelProperties: {
      ...ProvisionedResource.type.modelProperties,
      ...TenantResource.type.modelProperties,
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      ipPool: {
        serializedName: "ipPool",
        type: {
          name: "String"
        }
      },
      allocationMethod: {
        serializedName: "allocationMethod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaList: coreHttp.CompositeMapper = {
  serializedName: "QuotaList",
  type: {
    name: "Composite",
    className: "QuotaList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Quota" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Quota: coreHttp.CompositeMapper = {
  serializedName: "Quota",
  type: {
    name: "Composite",
    className: "Quota",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxPublicIpsPerSubscription: {
        serializedName: "properties.maxPublicIpsPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxVnetsPerSubscription: {
        serializedName: "properties.maxVnetsPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxVirtualNetworkGatewaysPerSubscription: {
        serializedName: "properties.maxVirtualNetworkGatewaysPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxVirtualNetworkGatewayConnectionsPerSubscription: {
        serializedName:
          "properties.maxVirtualNetworkGatewayConnectionsPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxLoadBalancersPerSubscription: {
        serializedName: "properties.maxLoadBalancersPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxNicsPerSubscription: {
        serializedName: "properties.maxNicsPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxSecurityGroupsPerSubscription: {
        serializedName: "properties.maxSecurityGroupsPerSubscription",
        type: {
          name: "Number"
        }
      },
      migrationPhase: {
        serializedName: "properties.migrationPhase",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaProperties: coreHttp.CompositeMapper = {
  serializedName: "QuotaProperties",
  type: {
    name: "Composite",
    className: "QuotaProperties",
    modelProperties: {
      ...ProvisionedResource.type.modelProperties,
      maxPublicIpsPerSubscription: {
        serializedName: "maxPublicIpsPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxVnetsPerSubscription: {
        serializedName: "maxVnetsPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxVirtualNetworkGatewaysPerSubscription: {
        serializedName: "maxVirtualNetworkGatewaysPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxVirtualNetworkGatewayConnectionsPerSubscription: {
        serializedName: "maxVirtualNetworkGatewayConnectionsPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxLoadBalancersPerSubscription: {
        serializedName: "maxLoadBalancersPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxNicsPerSubscription: {
        serializedName: "maxNicsPerSubscription",
        type: {
          name: "Number"
        }
      },
      maxSecurityGroupsPerSubscription: {
        serializedName: "maxSecurityGroupsPerSubscription",
        type: {
          name: "Number"
        }
      },
      migrationPhase: {
        serializedName: "migrationPhase",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksList: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworksList",
  type: {
    name: "Composite",
    className: "VirtualNetworksList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "VirtualNetwork" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetwork: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetwork",
  type: {
    name: "Composite",
    className: "VirtualNetwork",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantResourceUri: {
        serializedName: "properties.tenantResourceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        type: {
          name: "Composite",
          className: "VirtualNetworkConfigurationState"
        }
      }
    }
  }
};

export const VirtualNetworkProperties: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkProperties",
  type: {
    name: "Composite",
    className: "VirtualNetworkProperties",
    modelProperties: {
      ...ProvisionedResource.type.modelProperties,
      ...TenantResource.type.modelProperties,
      configurationState: {
        serializedName: "configurationState",
        type: {
          name: "Composite",
          className: "VirtualNetworkConfigurationState"
        }
      }
    }
  }
};

export const VirtualNetworkConfigurationState: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkConfigurationState",
  type: {
    name: "Composite",
    className: "VirtualNetworkConfigurationState",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      virtualNetworkInterfaceErrors: {
        serializedName: "virtualNetworkInterfaceErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkConfigurationStatus"
            }
          }
        }
      },
      hostErrors: {
        serializedName: "hostErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkConfigurationStatus"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkConfigurationStatus: coreHttp.CompositeMapper = {
  serializedName: "VirtualNetworkConfigurationStatus",
  type: {
    name: "Composite",
    className: "VirtualNetworkConfigurationStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};
