/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * Base Resource Object
 */
export interface Resource {
  /**
   * URI of the resource.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   */
  readonly name?: string;
  /**
   * Type of resource.
   */
  readonly type?: string;
  /**
   * Region location of resource.
   */
  readonly location?: string;
  /**
   * List of key value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Admin overview resource object.
 */
export type AdminOverview = Resource & {
  /**
   * The provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * Health for all virtual networks as reported by the NC.
   */
  virtualNetworkHealth?: AdminOverviewResourceHealth;
  /**
   * Health for all LB MUXes as reported by the NC.
   */
  loadBalancerMuxHealth?: AdminOverviewResourceHealth;
  /**
   * Health for all gateways as reported by the NC.
   */
  virtualGatewayHealth?: AdminOverviewResourceHealth;
  /**
   * Total Public IP usage as reported by the NC.
   */
  publicIpAddressUsage?: AdminOverviewResourceUsage;
  /**
   * Total Backend IP usage as reported by the NC.
   */
  backendIpUsage?: AdminOverviewResourceUsage;
  /**
   * Total MAC address usage as reported by the NC.
   */
  macAddressUsage?: AdminOverviewResourceUsage;
};

/**
 * Resource health information.
 */
export interface AdminOverviewResourceHealth {
  /**
   * Total number of resources.
   */
  readonly totalResourceCount?: number;
  /**
   * Number of resources in the success state.
   */
  readonly healthyResourceCount?: number;
  /**
   * Number of resources in the error state.
   */
  readonly errorResourceCount?: number;
  /**
   * Number of resources in the warning state.
   */
  readonly warningResourceCount?: number;
  /**
   * Number of resources in an unknown state.
   */
  readonly healthUnknownCount?: number;
}

/**
 * Resource usage information.
 */
export interface AdminOverviewResourceUsage {
  /**
   * Total number of resources.
   */
  readonly totalResourceCount?: number;
  /**
   * Number of resources in use.
   */
  readonly inUseResourceCount?: number;
}

/**
 * List of Operations
 */
export interface OperationList {
  /**
   * Array of operations
   */
  readonly value?: Operation[];
  /**
   * URI to the next page of operations.
   */
  readonly nextLink?: string;
}

/**
 * Describes the supported REST operation.
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object. This name should match the name that appears in RBAC or the event service.
   */
  readonly name?: string;
  /**
   * Contains the localized display information for this particular operation / action.
   */
  readonly display?: Display;
}

/**
 * Contains the localized display information for this particular operation / action.
 */
export interface Display {
  /**
   * The localized friendly form of the resource provider name â€“ it is expected to also include the publisher/company responsible. It should use Title Casing and begin with "Microsoft" for 1st party services. e.g. "Microsoft Monitoring Insights" or "Microsoft Compute."
   */
  readonly provider?: string;
  /**
   * The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.
   */
  readonly resource?: string;
  /**
   * The localized, friendly name for the operation. Use the name as it will displayed to the user.
   */
  readonly operation?: string;
  /**
   * The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.
   */
  readonly description?: string;
}

/**
 * List of Locations
 */
export interface LocationsList {
  /**
   * Array of locations
   */
  readonly value?: Location[];
  /**
   * URI to the next page of locations.
   */
  readonly nextLink?: string;
}

/**
 * Describes the supported Location
 */
export interface Location {
  /**
   * The name of the location the operation is being held.
   */
  readonly name?: string;
}

/**
 * List of Operation Results
 */
export interface OperationResultList {
  /**
   * Array of operation results
   */
  readonly value?: OperationResult[];
  /**
   * URI to the next page of operations.
   */
  readonly nextLink?: string;
}

/**
 * Describes results of a given operation
 */
export interface OperationResult {
  /**
   * The name of the operation being performed on this particular object.
   */
  readonly name?: string;
}

/**
 * Pageable list of load balancers.
 */
export interface LoadBalancerList {
  /**
   * List of load balancers for this page.
   */
  value?: LoadBalancer[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * Representation of a load balancer.
 */
export type LoadBalancer = Resource & {
  /**
   * The provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * The subscription ID.
   */
  readonly subscriptionId?: string;
  /**
   * The tenant resource URI.
   */
  readonly tenantResourceUri?: string;
  /**
   * List of public IP addresses.
   */
  publicIpAddresses?: string[];
};

/**
 * Objects which have a provisioning state.
 */
export interface ProvisionedResource {
  /**
   * The provisioning state.
   */
  readonly provisioningState?: string;
}

/**
 * These resources are utilized by a single tenant.
 */
export interface TenantResource {
  /**
   * The subscription ID.
   */
  readonly subscriptionId?: string;
  /**
   * The tenant resource URI.
   */
  readonly tenantResourceUri?: string;
}

/**
 * Properties of a load balancer.
 */
export type LoadBalancerProperty = ProvisionedResource &
  TenantResource & {
    /**
     * List of public IP addresses.
     */
    publicIpAddresses?: string[];
  };

/**
 * Pageable list of public ip addresses.
 */
export interface PublicIpAddressList {
  /**
   * List of public ip addresses for this page.
   */
  value?: PublicIpAddress[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * This resource represents an IP Address.
 */
export type PublicIpAddress = Resource & {
  /**
   * The provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * The subscription ID.
   */
  readonly subscriptionId?: string;
  /**
   * The tenant resource URI.
   */
  readonly tenantResourceUri?: string;
  /**
   * The IP address.
   */
  ipAddress?: string;
  /**
   * The IP pool.
   */
  ipPool?: string;
  /**
   * The allocation method.
   */
  allocationMethod?: AllocationMethodType;
};

/**
 * Properties of a public IP Address.
 */
export type PublicIPAddressProperties = ProvisionedResource &
  TenantResource & {
    /**
     * The IP address.
     */
    ipAddress?: string;
    /**
     * The IP pool.
     */
    ipPool?: string;
    /**
     * The allocation method.
     */
    allocationMethod?: AllocationMethodType;
  };

/**
 * A pageable list of network quotas.
 */
export interface QuotaList {
  /**
   * List of quotas on this page.
   */
  value?: Quota[];
  /**
   * The URI to the next page.
   */
  nextLink?: string;
}

/**
 * Network quota resource.
 */
export type Quota = Resource & {
  /**
   * The provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * Maximum number of public IP addresses a tenant subscription can provision.
   */
  maxPublicIpsPerSubscription?: number;
  /**
   * Maximum number of virtual networks a tenant subscription can provision.
   */
  maxVnetsPerSubscription?: number;
  /**
   * Maximum number of virtual network gateways a tenant subscription can provision.
   */
  maxVirtualNetworkGatewaysPerSubscription?: number;
  /**
   * Maximum number of virtual network gateway Connections a tenant subscription can provision.
   */
  maxVirtualNetworkGatewayConnectionsPerSubscription?: number;
  /**
   * Maximum number of load balancers a tenant subscription can provision.
   */
  maxLoadBalancersPerSubscription?: number;
  /**
   * Maximum number of NICs a tenant subscription can provision.
   */
  maxNicsPerSubscription?: number;
  /**
   * Maximum number of security groups a tenant subscription can provision.
   */
  maxSecurityGroupsPerSubscription?: number;
  /**
   * State of migration such as None, Prepare, Commit, and Abort.
   */
  readonly migrationPhase?: MigrationPhaseType;
};

/**
 * Properties of a quota.
 */
export type QuotaProperties = ProvisionedResource & {
  /**
   * Maximum number of public IP addresses a tenant subscription can provision.
   */
  maxPublicIpsPerSubscription?: number;
  /**
   * Maximum number of virtual networks a tenant subscription can provision.
   */
  maxVnetsPerSubscription?: number;
  /**
   * Maximum number of virtual network gateways a tenant subscription can provision.
   */
  maxVirtualNetworkGatewaysPerSubscription?: number;
  /**
   * Maximum number of virtual network gateway Connections a tenant subscription can provision.
   */
  maxVirtualNetworkGatewayConnectionsPerSubscription?: number;
  /**
   * Maximum number of load balancers a tenant subscription can provision.
   */
  maxLoadBalancersPerSubscription?: number;
  /**
   * Maximum number of NICs a tenant subscription can provision.
   */
  maxNicsPerSubscription?: number;
  /**
   * Maximum number of security groups a tenant subscription can provision.
   */
  maxSecurityGroupsPerSubscription?: number;
  /**
   * State of migration such as None, Prepare, Commit, and Abort.
   */
  readonly migrationPhase?: MigrationPhaseType;
};

/**
 * Pageable list of virtual networks.
 */
export interface VirtualNetworksList {
  /**
   * List of virtual networks for this page.
   */
  value?: VirtualNetwork[];
  /**
   * URI to the next page.
   */
  nextLink?: string;
}

/**
 * This represents a virtual network.
 */
export type VirtualNetwork = Resource & {
  /**
   * The provisioning state.
   */
  readonly provisioningState?: string;
  /**
   * The subscription ID.
   */
  readonly subscriptionId?: string;
  /**
   * The tenant resource URI.
   */
  readonly tenantResourceUri?: string;
  /**
   * The virtual network configuration state.
   */
  configurationState?: VirtualNetworkConfigurationState;
};

/**
 * Properties of a virtual network.
 */
export type VirtualNetworkProperties = ProvisionedResource &
  TenantResource & {
    /**
     * The virtual network configuration state.
     */
    configurationState?: VirtualNetworkConfigurationState;
  };

/**
 * The virtual network configuration state.
 */
export interface VirtualNetworkConfigurationState {
  /**
   * The virtual network status.
   */
  readonly status?: VirtualNetworkConfigurationStateStatusType;
  /**
   * Last updated time for the running state.
   */
  readonly lastUpdatedTime?: Date;
  /**
   * List of NIC errors associated with the resource.
   */
  virtualNetworkInterfaceErrors?: VirtualNetworkConfigurationStatus[];
  /**
   * List of NIC errors associated with the resource.
   */
  hostErrors?: VirtualNetworkConfigurationStatus[];
}

/**
 * Virtual network configuration status.
 */
export interface VirtualNetworkConfigurationStatus {
  /**
   * The virtual network configuration status.
   */
  readonly status?: VirtualNetworkConfigurationStatusType;
  /**
   * Last updated time for the configuration status.
   */
  readonly lastUpdatedTime?: Date;
}

/**
 * Defines values for AllocationMethodType.
 */
export type AllocationMethodType = "Dynamic" | "Static";
/**
 * Defines values for MigrationPhaseType.
 */
export type MigrationPhaseType = "None" | "Prepare" | "Commit" | "Abort";
/**
 * Defines values for VirtualNetworkConfigurationStateStatusType.
 */
export type VirtualNetworkConfigurationStateStatusType =
  | "Failure"
  | "Warning"
  | "Success"
  | "Uninitialized"
  | "InProgress"
  | "Unknown";
/**
 * Defines values for VirtualNetworkConfigurationStatusType.
 */
export type VirtualNetworkConfigurationStatusType =
  | "Failure"
  | "Warning"
  | "Success"
  | "Uninitialized"
  | "InProgress"
  | "Unknown";

/**
 * Contains response data for the get operation.
 */
export type ResourceProviderStateGetResponse = AdminOverview & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AdminOverview;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OnPremLocationsListResponse = LocationsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocationsList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OnPremLocationsListNextResponse = LocationsList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LocationsList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LocationsOperationResultsListResponse = OperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LocationsOperationResultsListNextResponse = OperationResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationResultList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type LocationsOperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type LocationsOperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Optional parameters.
 */
export interface LoadBalancersListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
  /**
   * OData orderBy parameter.
   */
  orderBy?: string;
  /**
   * OData top parameter.
   */
  top?: string;
  /**
   * OData skip parameter.
   */
  skip?: string;
  /**
   * OData inline count parameter.
   */
  inlineCount?: string;
}

/**
 * Contains response data for the list operation.
 */
export type LoadBalancersListResponse = LoadBalancerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerList;
  };
};

/**
 * Optional parameters.
 */
export interface LoadBalancersListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
  /**
   * OData orderBy parameter.
   */
  orderBy?: string;
  /**
   * OData top parameter.
   */
  top?: string;
  /**
   * OData skip parameter.
   */
  skip?: string;
  /**
   * OData inline count parameter.
   */
  inlineCount?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancersListNextResponse = LoadBalancerList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: LoadBalancerList;
  };
};

/**
 * Optional parameters.
 */
export interface PublicIPAddressesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
  /**
   * OData orderBy parameter.
   */
  orderBy?: string;
  /**
   * OData top parameter.
   */
  top?: string;
  /**
   * OData skip parameter.
   */
  skip?: string;
  /**
   * OData inline count parameter.
   */
  inlineCount?: string;
}

/**
 * Contains response data for the list operation.
 */
export type PublicIPAddressesListResponse = PublicIpAddressList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIpAddressList;
  };
};

/**
 * Optional parameters.
 */
export interface PublicIPAddressesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
  /**
   * OData orderBy parameter.
   */
  orderBy?: string;
  /**
   * OData top parameter.
   */
  top?: string;
  /**
   * OData skip parameter.
   */
  skip?: string;
  /**
   * OData inline count parameter.
   */
  inlineCount?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type PublicIPAddressesListNextResponse = PublicIpAddressList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PublicIpAddressList;
  };
};

/**
 * Optional parameters.
 */
export interface QuotasListOptionalParams extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
}

/**
 * Contains response data for the list operation.
 */
export type QuotasListResponse = QuotaList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type QuotasGetResponse = Quota & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Quota;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type QuotasCreateOrUpdateResponse = Quota & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Quota;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualNetworksListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
  /**
   * OData orderBy parameter.
   */
  orderBy?: string;
  /**
   * OData top parameter.
   */
  top?: string;
  /**
   * OData skip parameter.
   */
  skip?: string;
  /**
   * OData inline count parameter.
   */
  inlineCount?: string;
}

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworksListResponse = VirtualNetworksList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworksList;
  };
};

/**
 * Optional parameters.
 */
export interface VirtualNetworksListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * OData filter parameter.
   */
  filter?: string;
  /**
   * OData orderBy parameter.
   */
  orderBy?: string;
  /**
   * OData top parameter.
   */
  top?: string;
  /**
   * OData skip parameter.
   */
  skip?: string;
  /**
   * OData inline count parameter.
   */
  inlineCount?: string;
}

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworksListNextResponse = VirtualNetworksList & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VirtualNetworksList;
  };
};

/**
 * Optional parameters.
 */
export interface NetworkAdminClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
