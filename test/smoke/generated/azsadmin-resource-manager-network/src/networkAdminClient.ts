/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as operations from "./operations";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { NetworkAdminClientContext } from "./networkAdminClientContext";

class NetworkAdminClient extends NetworkAdminClientContext {
  /**
   * Initializes a new instance of the NetworkAdminClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.
   *                       The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    subscriptionId: string,
    options?: Models.NetworkAdminClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.resourceProviderState = new operations.ResourceProviderState(this);
    this.operations = new operations.Operations(this);
    this.onPremLocations = new operations.OnPremLocations(this);
    this.locationsOperationResults = new operations.LocationsOperationResults(
      this
    );
    this.locationsOperations = new operations.LocationsOperations(this);
    this.loadBalancers = new operations.LoadBalancers(this);
    this.publicIPAddresses = new operations.PublicIPAddresses(this);
    this.quotas = new operations.Quotas(this);
    this.virtualNetworks = new operations.VirtualNetworks(this);
  }

  resourceProviderState: operations.ResourceProviderState;
  operations: operations.Operations;
  onPremLocations: operations.OnPremLocations;
  locationsOperationResults: operations.LocationsOperationResults;
  locationsOperations: operations.LocationsOperations;
  loadBalancers: operations.LoadBalancers;
  publicIPAddresses: operations.PublicIPAddresses;
  quotas: operations.Quotas;
  virtualNetworks: operations.VirtualNetworks;
}

// Operation Specifications

export {
  NetworkAdminClient,
  NetworkAdminClientContext,
  Models as NetworkAdminModels,
  Mappers as NetworkAdminMappers
};
export * from "./operations";
