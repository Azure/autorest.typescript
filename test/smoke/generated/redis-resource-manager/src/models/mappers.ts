/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      typeModel: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotificationListResponse: coreHttp.CompositeMapper = {
  serializedName: "NotificationListResponse",
  type: {
    name: "Composite",
    className: "NotificationListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "UpgradeNotification" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpgradeNotification: coreHttp.CompositeMapper = {
  serializedName: "UpgradeNotification",
  type: {
    name: "Composite",
    className: "UpgradeNotification",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      upsellNotification: {
        serializedName: "upsellNotification",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const RedisCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "RedisCreateParameters",
  type: {
    name: "Composite",
    className: "RedisCreateParameters",
    modelProperties: {
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "RedisCreateParametersZonesItem"
          }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      redisConfiguration: {
        serializedName: "properties.redisConfiguration",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      enableNonSslPort: {
        serializedName: "properties.enableNonSslPort",
        type: {
          name: "Boolean"
        }
      },
      replicasPerMaster: {
        serializedName: "properties.replicasPerMaster",
        type: {
          name: "Number"
        }
      },
      tenantSettings: {
        serializedName: "properties.tenantSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      shardCount: {
        serializedName: "properties.shardCount",
        type: {
          name: "Number"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      subnetId: {
        constraints: {
          Pattern: new RegExp(
            "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
          )
        },
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      staticIP: {
        constraints: {
          Pattern: new RegExp("^d+.d+.d+.d+$")
        },
        serializedName: "properties.staticIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisCommonProperties: coreHttp.CompositeMapper = {
  serializedName: "RedisCommonProperties",
  type: {
    name: "Composite",
    className: "RedisCommonProperties",
    modelProperties: {
      redisConfiguration: {
        serializedName: "redisConfiguration",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      enableNonSslPort: {
        serializedName: "enableNonSslPort",
        type: {
          name: "Boolean"
        }
      },
      replicasPerMaster: {
        serializedName: "replicasPerMaster",
        type: {
          name: "Number"
        }
      },
      tenantSettings: {
        serializedName: "tenantSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      shardCount: {
        serializedName: "shardCount",
        type: {
          name: "Number"
        }
      },
      minimumTlsVersion: {
        serializedName: "minimumTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisCreateProperties: coreHttp.CompositeMapper = {
  serializedName: "RedisCreateProperties",
  type: {
    name: "Composite",
    className: "RedisCreateProperties",
    modelProperties: {
      ...RedisCommonProperties.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      subnetId: {
        constraints: {
          Pattern: new RegExp(
            "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
          )
        },
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      staticIP: {
        constraints: {
          Pattern: new RegExp("^d+.d+.d+.d+$")
        },
        serializedName: "staticIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreHttp.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        required: true,
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      typeModel: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreHttp.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisResource: coreHttp.CompositeMapper = {
  serializedName: "RedisResource",
  type: {
    name: "Composite",
    className: "RedisResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "RedisResourceZonesItem"
          }
        }
      },
      redisConfiguration: {
        serializedName: "properties.redisConfiguration",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      enableNonSslPort: {
        serializedName: "properties.enableNonSslPort",
        type: {
          name: "Boolean"
        }
      },
      replicasPerMaster: {
        serializedName: "properties.replicasPerMaster",
        type: {
          name: "Number"
        }
      },
      tenantSettings: {
        serializedName: "properties.tenantSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      shardCount: {
        serializedName: "properties.shardCount",
        type: {
          name: "Number"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      subnetId: {
        constraints: {
          Pattern: new RegExp(
            "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
          )
        },
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      staticIP: {
        constraints: {
          Pattern: new RegExp("^d+.d+.d+.d+$")
        },
        serializedName: "properties.staticIP",
        type: {
          name: "String"
        }
      },
      redisVersion: {
        serializedName: "properties.redisVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sslPort: {
        serializedName: "properties.sslPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accessKeys: {
        serializedName: "accessKeys",
        type: {
          name: "Composite",
          className: "RedisAccessKeys"
        }
      },
      linkedServers: {
        serializedName: "properties.linkedServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RedisLinkedServer" }
          }
        }
      },
      instances: {
        serializedName: "properties.instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RedisInstanceDetails" }
          }
        }
      }
    }
  }
};

export const RedisProperties: coreHttp.CompositeMapper = {
  serializedName: "RedisProperties",
  type: {
    name: "Composite",
    className: "RedisProperties",
    modelProperties: {
      ...RedisCreateProperties.type.modelProperties,
      redisVersion: {
        serializedName: "redisVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sslPort: {
        serializedName: "sslPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accessKeys: {
        serializedName: "accessKeys",
        type: {
          name: "Composite",
          className: "RedisAccessKeys"
        }
      },
      linkedServers: {
        serializedName: "linkedServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RedisLinkedServer" }
          }
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RedisInstanceDetails" }
          }
        }
      }
    }
  }
};

export const RedisAccessKeys: coreHttp.CompositeMapper = {
  serializedName: "RedisAccessKeys",
  type: {
    name: "Composite",
    className: "RedisAccessKeys",
    modelProperties: {
      primaryKey: {
        serializedName: "primaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisLinkedServer: coreHttp.CompositeMapper = {
  serializedName: "RedisLinkedServer",
  type: {
    name: "Composite",
    className: "RedisLinkedServer",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisInstanceDetails: coreHttp.CompositeMapper = {
  serializedName: "RedisInstanceDetails",
  type: {
    name: "Composite",
    className: "RedisInstanceDetails",
    modelProperties: {
      sslPort: {
        serializedName: "sslPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nonSslPort: {
        serializedName: "nonSslPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      zone: {
        serializedName: "zone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shardId: {
        serializedName: "shardId",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RedisUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "RedisUpdateParameters",
  type: {
    name: "Composite",
    className: "RedisUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      redisConfiguration: {
        serializedName: "properties.redisConfiguration",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      enableNonSslPort: {
        serializedName: "properties.enableNonSslPort",
        type: {
          name: "Boolean"
        }
      },
      replicasPerMaster: {
        serializedName: "properties.replicasPerMaster",
        type: {
          name: "Number"
        }
      },
      tenantSettings: {
        serializedName: "properties.tenantSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      shardCount: {
        serializedName: "properties.shardCount",
        type: {
          name: "Number"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const RedisUpdateProperties: coreHttp.CompositeMapper = {
  serializedName: "RedisUpdateProperties",
  type: {
    name: "Composite",
    className: "RedisUpdateProperties",
    modelProperties: {
      ...RedisCommonProperties.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const RedisListResult: coreHttp.CompositeMapper = {
  serializedName: "RedisListResult",
  type: {
    name: "Composite",
    className: "RedisListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "RedisResource" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisRegenerateKeyParameters: coreHttp.CompositeMapper = {
  serializedName: "RedisRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "RedisRegenerateKeyParameters",
    modelProperties: {
      keyType: {
        serializedName: "keyType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      }
    }
  }
};

export const RedisRebootParameters: coreHttp.CompositeMapper = {
  serializedName: "RedisRebootParameters",
  type: {
    name: "Composite",
    className: "RedisRebootParameters",
    modelProperties: {
      rebootType: {
        serializedName: "rebootType",
        required: true,
        type: {
          name: "String"
        }
      },
      shardId: {
        serializedName: "shardId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RedisForceRebootResponse: coreHttp.CompositeMapper = {
  serializedName: "RedisForceRebootResponse",
  type: {
    name: "Composite",
    className: "RedisForceRebootResponse",
    modelProperties: {
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportRDBParameters: coreHttp.CompositeMapper = {
  serializedName: "ImportRDBParameters",
  type: {
    name: "Composite",
    className: "ImportRDBParameters",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      files: {
        serializedName: "files",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ImportRDBParametersFilesItem"
          }
        }
      }
    }
  }
};

export const ExportRDBParameters: coreHttp.CompositeMapper = {
  serializedName: "ExportRDBParameters",
  type: {
    name: "Composite",
    className: "ExportRDBParameters",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "prefix",
        required: true,
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisFirewallRuleListResult: coreHttp.CompositeMapper = {
  serializedName: "RedisFirewallRuleListResult",
  type: {
    name: "Composite",
    className: "RedisFirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RedisFirewallRule" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const RedisFirewallRule: coreHttp.CompositeMapper = {
  serializedName: "RedisFirewallRule",
  type: {
    name: "Composite",
    className: "RedisFirewallRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      startIP: {
        serializedName: "properties.startIP",
        required: true,
        type: {
          name: "String"
        }
      },
      endIP: {
        serializedName: "properties.endIP",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisFirewallRuleCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "RedisFirewallRuleCreateParameters",
  type: {
    name: "Composite",
    className: "RedisFirewallRuleCreateParameters",
    modelProperties: {
      startIP: {
        serializedName: "properties.startIP",
        required: true,
        type: {
          name: "String"
        }
      },
      endIP: {
        serializedName: "properties.endIP",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisPatchScheduleListResult: coreHttp.CompositeMapper = {
  serializedName: "RedisPatchScheduleListResult",
  type: {
    name: "Composite",
    className: "RedisPatchScheduleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RedisPatchSchedule" }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisPatchSchedule: coreHttp.CompositeMapper = {
  serializedName: "RedisPatchSchedule",
  type: {
    name: "Composite",
    className: "RedisPatchSchedule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      scheduleEntries: {
        serializedName: "properties.scheduleEntries",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ScheduleEntry" } }
        }
      }
    }
  }
};

export const ScheduleEntry: coreHttp.CompositeMapper = {
  serializedName: "ScheduleEntry",
  type: {
    name: "Composite",
    className: "ScheduleEntry",
    modelProperties: {
      dayOfWeek: {
        serializedName: "dayOfWeek",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "Everyday",
            "Weekend"
          ]
        }
      },
      startHourUtc: {
        serializedName: "startHourUtc",
        required: true,
        type: {
          name: "Number"
        }
      },
      maintenanceWindow: {
        serializedName: "maintenanceWindow",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const RedisLinkedServerCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "RedisLinkedServerCreateParameters",
  type: {
    name: "Composite",
    className: "RedisLinkedServerCreateParameters",
    modelProperties: {
      linkedRedisCacheId: {
        serializedName: "properties.linkedRedisCacheId",
        required: true,
        type: {
          name: "String"
        }
      },
      linkedRedisCacheLocation: {
        serializedName: "properties.linkedRedisCacheLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      serverRole: {
        serializedName: "properties.serverRole",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      }
    }
  }
};

export const RedisLinkedServerCreateProperties: coreHttp.CompositeMapper = {
  serializedName: "RedisLinkedServerCreateProperties",
  type: {
    name: "Composite",
    className: "RedisLinkedServerCreateProperties",
    modelProperties: {
      linkedRedisCacheId: {
        serializedName: "linkedRedisCacheId",
        required: true,
        type: {
          name: "String"
        }
      },
      linkedRedisCacheLocation: {
        serializedName: "linkedRedisCacheLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      serverRole: {
        serializedName: "serverRole",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      }
    }
  }
};

export const RedisLinkedServerWithProperties: coreHttp.CompositeMapper = {
  serializedName: "RedisLinkedServerWithProperties",
  type: {
    name: "Composite",
    className: "RedisLinkedServerWithProperties",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      linkedRedisCacheId: {
        serializedName: "properties.linkedRedisCacheId",
        type: {
          name: "String"
        }
      },
      linkedRedisCacheLocation: {
        serializedName: "properties.linkedRedisCacheLocation",
        type: {
          name: "String"
        }
      },
      serverRole: {
        serializedName: "properties.serverRole",
        type: {
          name: "Enum",
          allowedValues: ["Primary", "Secondary"]
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisLinkedServerProperties: coreHttp.CompositeMapper = {
  serializedName: "RedisLinkedServerProperties",
  type: {
    name: "Composite",
    className: "RedisLinkedServerProperties",
    modelProperties: {
      ...RedisLinkedServerCreateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RedisLinkedServerWithPropertiesList: coreHttp.CompositeMapper = {
  serializedName: "RedisLinkedServerWithPropertiesList",
  type: {
    name: "Composite",
    className: "RedisLinkedServerWithPropertiesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RedisLinkedServerWithProperties"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
