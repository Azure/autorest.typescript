/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RedisManagementClient } from "../redisManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  RedisLinkedServerCreateParameters,
  LinkedServerCreateResponse,
  LinkedServerGetResponse,
  LinkedServerListResponse,
  LinkedServerListNextResponse
} from "../models";

/**
 * Class representing a LinkedServer.
 */
export class LinkedServer {
  private readonly client: RedisManagementClient;

  /**
   * Initialize a new instance of the class LinkedServer class.
   * @param client Reference to the service client
   */
  constructor(client: RedisManagementClient) {
    this.client = client;
  }

  /**
   * Adds a linked server to the Redis cache (requires Premium SKU).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters supplied to the Create Linked server operation.
   * @param linkedServerName The name of the linked server that is being added to the Redis cache.
   * @param options The options parameters.
   */
  async create(
    resourceGroupName: string,
    name: string,
    parameters: RedisLinkedServerCreateParameters,
    linkedServerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<LinkedServerCreateResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      name,
      parameters,
      linkedServerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        LinkedServerCreateResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes the linked server from a redis cache (requires Premium SKU).
   * @param options The options parameters.
   */
  deleteModel(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      deleteModelOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
   * @param options The options parameters.
   */
  getModel(
    options?: coreHttp.OperationOptions
  ): Promise<LinkedServerGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getModelOperationSpec
    ) as Promise<LinkedServerGetResponse>;
  }

  /**
   * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LinkedServerListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options: operationOptions },
      listOperationSpec
    ) as Promise<LinkedServerListResponse>;
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the redis cache.
   * @param options The options parameters.
   */
  listNext(
    nextLink: string,
    resourceGroupName: string,
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<LinkedServerListNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, resourceGroupName, name, options: operationOptions },
      listNextOperationSpec
    ) as Promise<LinkedServerListNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RedisLinkedServerWithProperties
    },
    201: {
      bodyMapper: Mappers.RedisLinkedServerWithProperties
    },
    202: {
      bodyMapper: Mappers.RedisLinkedServerWithProperties
    },
    204: {
      bodyMapper: Mappers.RedisLinkedServerWithProperties
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.linkedServerName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  serializer
};
const getModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisLinkedServerWithProperties
    }
  },
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisLinkedServerWithPropertiesList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name1
  ],
  serializer
};
const listNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisLinkedServerWithPropertiesList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name1
  ],
  serializer
};
