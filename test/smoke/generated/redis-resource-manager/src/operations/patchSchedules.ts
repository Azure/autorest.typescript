/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RedisManagementClient } from "../redisManagementClient";
import {
  PatchSchedulesListByRedisResourceResponse,
  RedisPatchSchedule,
  PatchSchedulesCreateOrUpdateResponse,
  PatchSchedulesGetResponse,
  PatchSchedulesListByRedisResourceNextResponse
} from "../models";

/**
 * Class representing a PatchSchedules.
 */
export class PatchSchedules {
  private readonly client: RedisManagementClient;

  /**
   * Initialize a new instance of the class PatchSchedules class.
   * @param client Reference to the service client
   */
  constructor(client: RedisManagementClient) {
    this.client = client;
  }

  /**
   * Gets all patch schedules in the specified redis cache (there is only one).
   * @param resourceGroupName The name of the resource group.
   * @param cacheName The name of the Redis cache.
   * @param options The options parameters.
   */
  listByRedisResource(
    resourceGroupName: string,
    cacheName: string,
    options?: coreHttp.OperationOptions
  ): Promise<PatchSchedulesListByRedisResourceResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, cacheName, options: operationOptions },
      listByRedisResourceOperationSpec
    ) as Promise<PatchSchedulesListByRedisResourceResponse>;
  }

  /**
   * Create or replace the patching schedule for Redis cache (requires Premium SKU).
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the Redis cache.
   * @param parameters Parameters to set the patching schedule for Redis cache.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    name: string,
    parameters: RedisPatchSchedule,
    options?: coreHttp.OperationOptions
  ): Promise<PatchSchedulesCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, name, parameters, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<PatchSchedulesCreateOrUpdateResponse>;
  }

  /**
   * Deletes the patching schedule of a redis cache (requires Premium SKU).
   * @param options The options parameters.
   */
  deleteModel(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      deleteModelOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the patching schedule of a redis cache (requires Premium SKU).
   * @param options The options parameters.
   */
  getModel(
    options?: coreHttp.OperationOptions
  ): Promise<PatchSchedulesGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getModelOperationSpec
    ) as Promise<PatchSchedulesGetResponse>;
  }

  /**
   * ListByRedisResourceNext
   * @param resourceGroupName The name of the resource group.
   * @param cacheName The name of the Redis cache.
   * @param nextLink The nextLink from the previous successful call to the ListByRedisResource method.
   * @param options The options parameters.
   */
  listByRedisResourceNext(
    resourceGroupName: string,
    cacheName: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PatchSchedulesListByRedisResourceNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, cacheName, nextLink, options: operationOptions },
      listByRedisResourceNextOperationSpec
    ) as Promise<PatchSchedulesListByRedisResourceNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listByRedisResourceOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/patchSchedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisPatchScheduleListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RedisPatchSchedule
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.defaultModel
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  serializer
};
const getModelOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisPatchSchedule
    }
  },
  serializer
};
const listByRedisResourceNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RedisPatchScheduleListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName,
    Parameters.nextLink2
  ],
  serializer
};
