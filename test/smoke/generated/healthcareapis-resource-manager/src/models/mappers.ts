/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^[a-z0-9][a-z0-9-]{1,21}[a-z0-9]$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["fhir", "fhir-Stu3", "fhir-R4"]
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      }
    }
  }
};

export const ResourceIdentity: coreHttp.CompositeMapper = {
  serializedName: "ResourceIdentity",
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicesDescription: coreHttp.CompositeMapper = {
  serializedName: "ServicesDescription",
  type: {
    name: "Composite",
    className: "ServicesDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServicesProperties"
        }
      }
    }
  }
};

export const ServicesProperties: coreHttp.CompositeMapper = {
  serializedName: "ServicesProperties",
  type: {
    name: "Composite",
    className: "ServicesProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accessPolicies: {
        constraints: {
          MinItems: 1
        },
        serializedName: "accessPolicies",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceAccessPolicyEntry" }
          }
        }
      },
      cosmosDbConfiguration: {
        serializedName: "cosmosDbConfiguration",
        type: {
          name: "Composite",
          className: "ServiceCosmosDbConfigurationInfo"
        }
      },
      authenticationConfiguration: {
        serializedName: "authenticationConfiguration",
        type: {
          name: "Composite",
          className: "ServiceAuthenticationConfigurationInfo"
        }
      },
      corsConfiguration: {
        serializedName: "corsConfiguration",
        type: {
          name: "Composite",
          className: "ServiceCorsConfigurationInfo"
        }
      }
    }
  }
};

export const ServiceAccessPolicyEntry: coreHttp.CompositeMapper = {
  serializedName: "ServiceAccessPolicyEntry",
  type: {
    name: "Composite",
    className: "ServiceAccessPolicyEntry",
    modelProperties: {
      objectId: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}){1})+$"
          )
        },
        serializedName: "objectId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceCosmosDbConfigurationInfo: coreHttp.CompositeMapper = {
  serializedName: "ServiceCosmosDbConfigurationInfo",
  type: {
    name: "Composite",
    className: "ServiceCosmosDbConfigurationInfo",
    modelProperties: {
      offerThroughput: {
        constraints: {
          InclusiveMaximum: 10000,
          InclusiveMinimum: 400
        },
        serializedName: "offerThroughput",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceAuthenticationConfigurationInfo: coreHttp.CompositeMapper = {
  serializedName: "ServiceAuthenticationConfigurationInfo",
  type: {
    name: "Composite",
    className: "ServiceAuthenticationConfigurationInfo",
    modelProperties: {
      authority: {
        serializedName: "authority",
        type: {
          name: "String"
        }
      },
      audience: {
        serializedName: "audience",
        type: {
          name: "String"
        }
      },
      smartProxyEnabled: {
        serializedName: "smartProxyEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ServiceCorsConfigurationInfo: coreHttp.CompositeMapper = {
  serializedName: "ServiceCorsConfigurationInfo",
  type: {
    name: "Composite",
    className: "ServiceCorsConfigurationInfo",
    modelProperties: {
      origins: {
        serializedName: "origins",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ServiceCorsConfigurationOriginEntry",
            constraints: { Pattern: {} }
          }
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ServiceCorsConfigurationHeaderEntry"
          }
        }
      },
      methods: {
        serializedName: "methods",
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "ServiceCorsConfigurationMethodEntry"
          }
        }
      },
      maxAge: {
        constraints: {
          InclusiveMaximum: 99999
        },
        serializedName: "maxAge",
        type: {
          name: "Number"
        }
      },
      allowCredentials: {
        serializedName: "allowCredentials",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ErrorDetails: coreHttp.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetailsInternal"
        }
      }
    }
  }
};

export const ErrorDetailsInternal: coreHttp.CompositeMapper = {
  serializedName: "ErrorDetailsInternal",
  type: {
    name: "Composite",
    className: "ErrorDetailsInternal",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicesPatchDescription: coreHttp.CompositeMapper = {
  serializedName: "ServicesPatchDescription",
  type: {
    name: "Composite",
    className: "ServicesPatchDescription",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        }
      }
    }
  }
};

export const ServicesDescriptionListResult: coreHttp.CompositeMapper = {
  serializedName: "ServicesDescriptionListResult",
  type: {
    name: "Composite",
    className: "ServicesDescriptionListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServicesDescription" }
          }
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicesNameAvailabilityInfo: coreHttp.CompositeMapper = {
  serializedName: "ServicesNameAvailabilityInfo",
  type: {
    name: "Composite",
    className: "ServicesNameAvailabilityInfo",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResultsDescription: coreHttp.CompositeMapper = {
  serializedName: "OperationResultsDescription",
  type: {
    name: "Composite",
    className: "OperationResultsDescription",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};
