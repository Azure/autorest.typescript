/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";

export const $host: coreHttp.OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-w._()]+$"),
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accountName: coreHttp.OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9]+(-[a-z0-9]+)*"),
      MaxLength: 50,
      MinLength: 3
    },
    serializedName: "accountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-03-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const contentType: coreHttp.OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const updateParameters: coreHttp.OperationParameter = {
  parameterPath: "updateParameters",
  mapper: Mappers.DatabaseAccountUpdateParameters
};

export const createUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateParameters",
  mapper: Mappers.DatabaseAccountCreateUpdateParameters
};

export const failoverParameters: coreHttp.OperationParameter = {
  parameterPath: "failoverParameters",
  mapper: Mappers.FailoverPolicies
};

export const regionParameterForOffline: coreHttp.OperationParameter = {
  parameterPath: "regionParameterForOffline",
  mapper: Mappers.RegionForOnlineOffline
};

export const regionParameterForOnline: coreHttp.OperationParameter = {
  parameterPath: "regionParameterForOnline",
  mapper: Mappers.RegionForOnlineOffline
};

export const keyToRegenerate: coreHttp.OperationParameter = {
  parameterPath: "keyToRegenerate",
  mapper: Mappers.DatabaseAccountRegenerateKeyParameters
};

export const filter: coreHttp.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const nextLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const databaseRid: coreHttp.OperationURLParameter = {
  parameterPath: "databaseRid",
  mapper: {
    serializedName: "databaseRid",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const collectionRid: coreHttp.OperationURLParameter = {
  parameterPath: "collectionRid",
  mapper: {
    serializedName: "collectionRid",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const region: coreHttp.OperationURLParameter = {
  parameterPath: "region",
  mapper: {
    serializedName: "region",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sourceRegion: coreHttp.OperationURLParameter = {
  parameterPath: "sourceRegion",
  mapper: {
    serializedName: "sourceRegion",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const targetRegion: coreHttp.OperationURLParameter = {
  parameterPath: "targetRegion",
  mapper: {
    serializedName: "targetRegion",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const partitionKeyRangeId: coreHttp.OperationURLParameter = {
  parameterPath: "partitionKeyRangeId",
  mapper: {
    serializedName: "partitionKeyRangeId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const databaseName: coreHttp.OperationURLParameter = {
  parameterPath: "databaseName",
  mapper: {
    serializedName: "databaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateSqlDatabaseParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateSqlDatabaseParameters",
  mapper: Mappers.SqlDatabaseCreateUpdateParameters
};

export const updateThroughputParameters: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const containerName: coreHttp.OperationURLParameter = {
  parameterPath: "containerName",
  mapper: {
    serializedName: "containerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateSqlContainerParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateSqlContainerParameters",
  mapper: Mappers.SqlContainerCreateUpdateParameters
};

export const updateThroughputParameters1: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const storedProcedureName: coreHttp.OperationURLParameter = {
  parameterPath: "storedProcedureName",
  mapper: {
    serializedName: "storedProcedureName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateSqlStoredProcedureParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateSqlStoredProcedureParameters",
  mapper: Mappers.SqlStoredProcedureCreateUpdateParameters
};

export const userDefinedFunctionName: coreHttp.OperationURLParameter = {
  parameterPath: "userDefinedFunctionName",
  mapper: {
    serializedName: "userDefinedFunctionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateSqlUserDefinedFunctionParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateSqlUserDefinedFunctionParameters",
  mapper: Mappers.SqlUserDefinedFunctionCreateUpdateParameters
};

export const triggerName: coreHttp.OperationURLParameter = {
  parameterPath: "triggerName",
  mapper: {
    serializedName: "triggerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateSqlTriggerParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateSqlTriggerParameters",
  mapper: Mappers.SqlTriggerCreateUpdateParameters
};

export const createUpdateMongoDBDatabaseParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateMongoDBDatabaseParameters",
  mapper: Mappers.MongoDBDatabaseCreateUpdateParameters
};

export const updateThroughputParameters2: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const collectionName: coreHttp.OperationURLParameter = {
  parameterPath: "collectionName",
  mapper: {
    serializedName: "collectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateMongoDBCollectionParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateMongoDBCollectionParameters",
  mapper: Mappers.MongoDBCollectionCreateUpdateParameters
};

export const updateThroughputParameters3: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const tableName: coreHttp.OperationURLParameter = {
  parameterPath: "tableName",
  mapper: {
    serializedName: "tableName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateTableParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateTableParameters",
  mapper: Mappers.TableCreateUpdateParameters
};

export const updateThroughputParameters4: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const keyspaceName: coreHttp.OperationURLParameter = {
  parameterPath: "keyspaceName",
  mapper: {
    serializedName: "keyspaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateCassandraKeyspaceParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateCassandraKeyspaceParameters",
  mapper: Mappers.CassandraKeyspaceCreateUpdateParameters
};

export const updateThroughputParameters5: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const createUpdateCassandraTableParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateCassandraTableParameters",
  mapper: Mappers.CassandraTableCreateUpdateParameters
};

export const updateThroughputParameters6: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const createUpdateGremlinDatabaseParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateGremlinDatabaseParameters",
  mapper: Mappers.GremlinDatabaseCreateUpdateParameters
};

export const updateThroughputParameters7: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const graphName: coreHttp.OperationURLParameter = {
  parameterPath: "graphName",
  mapper: {
    serializedName: "graphName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createUpdateGremlinGraphParameters: coreHttp.OperationParameter = {
  parameterPath: "createUpdateGremlinGraphParameters",
  mapper: Mappers.GremlinGraphCreateUpdateParameters
};

export const updateThroughputParameters8: coreHttp.OperationParameter = {
  parameterPath: "updateThroughputParameters",
  mapper: Mappers.ThroughputSettingsUpdateParameters
};

export const apiVersion1: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-08-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const notebookWorkspaceName: coreHttp.OperationURLParameter = {
  parameterPath: "notebookWorkspaceName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "notebookWorkspaceName",
    type: {
      name: "String"
    }
  }
};

export const notebookCreateUpdateParameters: coreHttp.OperationParameter = {
  parameterPath: "notebookCreateUpdateParameters",
  mapper: Mappers.ARMProxyResource
};

export const apiVersion2: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-08-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const groupName: coreHttp.OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: coreHttp.OperationParameter = {
  parameterPath: "parameters",
  mapper: Mappers.PrivateEndpointConnectionAutoGenerated
};
