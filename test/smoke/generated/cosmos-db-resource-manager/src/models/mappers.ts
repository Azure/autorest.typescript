/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ConsistencyPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConsistencyPolicy",
    modelProperties: {
      defaultConsistencyLevel: {
        serializedName: "defaultConsistencyLevel",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Eventual",
            "Session",
            "BoundedStaleness",
            "Strong",
            "ConsistentPrefix"
          ]
        }
      },
      maxStalenessPrefix: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        serializedName: "maxStalenessPrefix",
        type: {
          name: "Number"
        }
      },
      maxIntervalInSeconds: {
        constraints: {
          InclusiveMaximum: 86400,
          InclusiveMinimum: 5
        },
        serializedName: "maxIntervalInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Capability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Location: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Location",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        serializedName: "documentEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        constraints: {},
        serializedName: "failoverPriority",
        type: {
          name: "Number"
        }
      },
      isZoneRedundant: {
        serializedName: "isZoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FailoverPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        constraints: {},
        serializedName: "failoverPriority",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      ignoreMissingVNetServiceEndpoint: {
        serializedName: "ignoreMissingVNetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PrivateEndpointProperty: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStateProperty: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStateProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ARMResourceProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ARMResourceProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DatabaseAccountUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      consistencyPolicy: {
        serializedName: "consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      locations: {
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Location" } }
        }
      },
      ipRangeFilter: {
        serializedName: "properties.ipRangeFilter",
        type: {
          name: "String"
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Capability" } }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "properties.enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "properties.connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "properties.disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "properties.keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverPolicies: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverPolicies",
    modelProperties: {
      failoverPolicies: {
        serializedName: "failoverPolicies",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FailoverPolicy" } }
        }
      }
    }
  }
};

export const DatabaseAccountsListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DatabaseAccountGetResults" }
          }
        }
      }
    }
  }
};

export const DatabaseAccountListReadOnlyKeysResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountListReadOnlyKeysResult",
    modelProperties: {
      primaryReadonlyMasterKey: {
        serializedName: "primaryReadonlyMasterKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryReadonlyMasterKey: {
        serializedName: "secondaryReadonlyMasterKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountListConnectionStringsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountListConnectionStringsResult",
    modelProperties: {
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccountConnectionString"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountConnectionString: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountConnectionString",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegionForOnlineOffline: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegionForOnlineOffline",
    modelProperties: {
      region: {
        serializedName: "region",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountRegenerateKeyParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountRegenerateKeyParameters",
    modelProperties: {
      keyKind: {
        serializedName: "keyKind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Operation" } }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "Provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "Resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "Operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "Description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Metric" } }
        }
      }
    }
  }
};

export const Metric: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        serializedName: "metricValues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MetricValue" } }
        }
      }
    }
  }
};

export const MetricName: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricValue: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      count: {
        serializedName: "_count",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      average: {
        serializedName: "average",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minimum: {
        serializedName: "minimum",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      total: {
        serializedName: "total",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PercentileMetricListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PercentileMetricListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PercentileMetric" }
          }
        }
      }
    }
  }
};

export const PercentileMetric: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PercentileMetric",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        serializedName: "metricValues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PercentileMetricValue" }
          }
        }
      }
    }
  }
};

export const PartitionMetricListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionMetricListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PartitionMetric" } }
        }
      }
    }
  }
};

export const UsagesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Usage" } }
        }
      }
    }
  }
};

export const Usage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PartitionUsagesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "PartitionUsage" } }
        }
      }
    }
  }
};

export const MetricDefinitionsListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinitionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricDefinition" }
          }
        }
      }
    }
  }
};

export const MetricDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      metricAvailabilities: {
        serializedName: "metricAvailabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MetricAvailability" }
          }
        }
      },
      primaryAggregationType: {
        serializedName: "primaryAggregationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      }
    }
  }
};

export const MetricAvailability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      retention: {
        serializedName: "retention",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SqlDatabaseGetResults" }
          }
        }
      }
    }
  }
};

export const SqlDatabaseResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedResourceProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedResourceProperties",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ts: {
        serializedName: "_ts",
        readOnly: true,
        type: {
          name: "any"
        }
      },
      etag: {
        serializedName: "_etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OptionsResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionsResource",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateUpdateOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateUpdateOptions",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThroughputSettingsResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputSettingsResource",
    modelProperties: {
      throughput: {
        serializedName: "throughput",
        type: {
          name: "Number"
        }
      },
      provisionedThroughputSettings: {
        serializedName: "provisionedThroughputSettings",
        type: {
          name: "Composite",
          className: "ProvisionedThroughputSettingsResource"
        }
      },
      minimumThroughput: {
        serializedName: "minimumThroughput",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offerReplacePending: {
        serializedName: "offerReplacePending",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedThroughputSettingsResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedThroughputSettingsResource",
    modelProperties: {
      maxThroughput: {
        serializedName: "maxThroughput",
        required: true,
        type: {
          name: "Number"
        }
      },
      autoUpgradePolicy: {
        serializedName: "autoUpgradePolicy",
        type: {
          name: "Composite",
          className: "AutoUpgradePolicyResource"
        }
      },
      targetMaxThroughput: {
        serializedName: "targetMaxThroughput",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoUpgradePolicyResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoUpgradePolicyResource",
    modelProperties: {
      throughputPolicy: {
        serializedName: "throughputPolicy",
        type: {
          name: "Composite",
          className: "ThroughputPolicyResource"
        }
      }
    }
  }
};

export const ThroughputPolicyResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputPolicyResource",
    modelProperties: {
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      incrementPercent: {
        serializedName: "incrementPercent",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SqlContainerListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SqlContainerGetResults" }
          }
        }
      }
    }
  }
};

export const SqlContainerResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      }
    }
  }
};

export const IndexingPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexingPolicy",
    modelProperties: {
      automatic: {
        serializedName: "automatic",
        type: {
          name: "Boolean"
        }
      },
      indexingMode: {
        defaultValue: "Consistent",
        serializedName: "indexingMode",
        type: {
          name: "String"
        }
      },
      includedPaths: {
        serializedName: "includedPaths",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IncludedPath" } }
        }
      },
      excludedPaths: {
        serializedName: "excludedPaths",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ExcludedPath" } }
        }
      },
      compositeIndexes: {
        serializedName: "compositeIndexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: { name: "Composite", className: "CompositePath" }
              }
            }
          }
        }
      },
      spatialIndexes: {
        serializedName: "spatialIndexes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "SpatialSpec" } }
        }
      }
    }
  }
};

export const IncludedPath: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IncludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Indexes" } }
        }
      }
    }
  }
};

export const Indexes: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Indexes",
    modelProperties: {
      dataType: {
        defaultValue: "String",
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      precision: {
        serializedName: "precision",
        type: {
          name: "Number"
        }
      },
      kind: {
        defaultValue: "Hash",
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExcludedPath: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExcludedPath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompositePath: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CompositePath",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialSpec: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialSpec",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      types: {
        serializedName: "types",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ContainerPartitionKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerPartitionKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      kind: {
        defaultValue: "Hash",
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      version: {
        constraints: {
          InclusiveMaximum: 2,
          InclusiveMinimum: 1
        },
        serializedName: "version",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UniqueKeyPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UniqueKeyPolicy",
    modelProperties: {
      uniqueKeys: {
        serializedName: "uniqueKeys",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "UniqueKey" } }
        }
      }
    }
  }
};

export const UniqueKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UniqueKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ConflictResolutionPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConflictResolutionPolicy",
    modelProperties: {
      mode: {
        defaultValue: "LastWriterWins",
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      conflictResolutionPath: {
        serializedName: "conflictResolutionPath",
        type: {
          name: "String"
        }
      },
      conflictResolutionProcedure: {
        serializedName: "conflictResolutionProcedure",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlStoredProcedureListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlStoredProcedureGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlStoredProcedureResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlUserDefinedFunctionGetResults"
            }
          }
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlTriggerListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SqlTriggerGetResults" }
          }
        }
      }
    }
  }
};

export const SqlTriggerResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "triggerType",
        type: {
          name: "String"
        }
      },
      triggerOperation: {
        serializedName: "triggerOperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MongoDBDatabaseGetResults" }
          }
        }
      }
    }
  }
};

export const MongoDBDatabaseResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBCollectionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MongoDBCollectionGetResults"
            }
          }
        }
      }
    }
  }
};

export const MongoDBCollectionResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      shardKey: {
        serializedName: "shardKey",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      indexes: {
        serializedName: "indexes",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "MongoIndex" } }
        }
      }
    }
  }
};

export const MongoIndex: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoIndex",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "MongoIndexKeys"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "MongoIndexOptions"
        }
      }
    }
  }
};

export const MongoIndexKeys: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoIndexKeys",
    modelProperties: {
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const MongoIndexOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoIndexOptions",
    modelProperties: {
      expireAfterSeconds: {
        serializedName: "expireAfterSeconds",
        type: {
          name: "Number"
        }
      },
      unique: {
        serializedName: "unique",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TableListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TableGetResults" } }
        }
      }
    }
  }
};

export const TableResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraKeyspaceListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CassandraKeyspaceGetResults"
            }
          }
        }
      }
    }
  }
};

export const CassandraKeyspaceResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraTableListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CassandraTableGetResults" }
          }
        }
      }
    }
  }
};

export const CassandraTableResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      schema: {
        serializedName: "schema",
        type: {
          name: "Composite",
          className: "CassandraSchema"
        }
      }
    }
  }
};

export const CassandraSchema: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraSchema",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Column" } }
        }
      },
      partitionKeys: {
        serializedName: "partitionKeys",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CassandraPartitionKey" }
          }
        }
      },
      clusterKeys: {
        serializedName: "clusterKeys",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ClusterKey" } }
        }
      }
    }
  }
};

export const Column: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Column",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CassandraPartitionKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraPartitionKey",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterKey",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      orderBy: {
        serializedName: "orderBy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinDatabaseListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "GremlinDatabaseGetResults" }
          }
        }
      }
    }
  }
};

export const GremlinDatabaseResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GremlinGraphListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "GremlinGraphGetResults" }
          }
        }
      }
    }
  }
};

export const GremlinGraphResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "ContainerPartitionKey"
        }
      },
      defaultTtl: {
        serializedName: "defaultTtl",
        type: {
          name: "Number"
        }
      },
      uniqueKeyPolicy: {
        serializedName: "uniqueKeyPolicy",
        type: {
          name: "Composite",
          className: "UniqueKeyPolicy"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "conflictResolutionPolicy",
        type: {
          name: "Composite",
          className: "ConflictResolutionPolicy"
        }
      }
    }
  }
};

export const NotebookWorkspaceListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookWorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "NotebookWorkspace" }
          }
        }
      }
    }
  }
};

export const ARMProxyResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ARMProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookWorkspaceConnectionInfoResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookWorkspaceConnectionInfoResult",
    modelProperties: {
      authToken: {
        serializedName: "authToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      notebookServerEndpoint: {
        serializedName: "notebookServerEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateLinkResource" }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnectionAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStatePropertyAutoGenerated: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStatePropertyAutoGenerated",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStateProperty"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionAutoGenerated: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionAutoGenerated",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStatePropertyAutoGenerated"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const DatabaseAccountGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        serializedName: "properties.documentEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseAccountOfferType: {
        defaultValue: "Standard",
        isConstant: true,
        serializedName: "properties.databaseAccountOfferType",
        type: {
          name: "String"
        }
      },
      ipRangeFilter: {
        serializedName: "properties.ipRangeFilter",
        type: {
          name: "String"
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      consistencyPolicy: {
        serializedName: "consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Capability" } }
        }
      },
      writeLocations: {
        serializedName: "properties.writeLocations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Location" } }
        }
      },
      readLocations: {
        serializedName: "properties.readLocations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Location" } }
        }
      },
      locations: {
        serializedName: "properties.locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Location" } }
        }
      },
      failoverPolicies: {
        serializedName: "properties.failoverPolicies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "FailoverPolicy" } }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "PrivateEndpointConnection" }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "properties.enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "properties.connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "properties.disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "properties.keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      consistencyPolicy: {
        serializedName: "consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      locations: {
        serializedName: "properties.locations",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Location" } }
        }
      },
      databaseAccountOfferType: {
        defaultValue: "Standard",
        isConstant: true,
        serializedName: "properties.databaseAccountOfferType",
        type: {
          name: "String"
        }
      },
      ipRangeFilter: {
        serializedName: "properties.ipRangeFilter",
        type: {
          name: "String"
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Capability" } }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "VirtualNetworkRule" }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      },
      enableCassandraConnector: {
        serializedName: "properties.enableCassandraConnector",
        type: {
          name: "Boolean"
        }
      },
      connectorOffer: {
        serializedName: "properties.connectorOffer",
        type: {
          name: "String"
        }
      },
      disableKeyBasedMetadataWriteAccess: {
        serializedName: "properties.disableKeyBasedMetadataWriteAccess",
        type: {
          name: "Boolean"
        }
      },
      keyVaultKeyUri: {
        serializedName: "properties.keyVaultKeyUri",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const SqlDatabaseCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlDatabaseResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const ThroughputSettingsGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputSettingsGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "ThroughputSettingsGetPropertiesResource"
        }
      }
    }
  }
};

export const ThroughputSettingsUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputSettingsUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "ThroughputSettingsResource"
        }
      }
    }
  }
};

export const SqlContainerGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlContainerGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const SqlContainerCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlContainerResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlStoredProcedureGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlStoredProcedureGetPropertiesResource"
        }
      }
    }
  }
};

export const SqlStoredProcedureCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlStoredProcedureResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlUserDefinedFunctionGetPropertiesResource"
        }
      }
    }
  }
};

export const SqlUserDefinedFunctionCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlUserDefinedFunctionResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const SqlTriggerGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlTriggerGetPropertiesResource"
        }
      }
    }
  }
};

export const SqlTriggerCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "SqlTriggerResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const MongoDBDatabaseGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const MongoDBDatabaseCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "MongoDBDatabaseResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const MongoDBCollectionGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "MongoDBCollectionGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const MongoDBCollectionCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "MongoDBCollectionResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const TableGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "TableGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const TableCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "TableResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const CassandraKeyspaceGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const CassandraKeyspaceCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "CassandraKeyspaceResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const CassandraTableGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "CassandraTableGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const CassandraTableCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "CassandraTableResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const GremlinDatabaseGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "GremlinDatabaseGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const GremlinDatabaseCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "GremlinDatabaseResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const GremlinGraphGetResults: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphGetResults",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "GremlinGraphGetPropertiesResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "OptionsResource"
        }
      }
    }
  }
};

export const GremlinGraphCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphCreateUpdateParameters",
    modelProperties: {
      ...ARMResourceProperties.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "GremlinGraphResource"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "CreateUpdateOptions"
        }
      }
    }
  }
};

export const DatabaseAccountListKeysResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseAccountListKeysResult",
    modelProperties: {
      ...DatabaseAccountListReadOnlyKeysResult.type.modelProperties,
      primaryMasterKey: {
        serializedName: "primaryMasterKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryMasterKey: {
        serializedName: "secondaryMasterKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartitionMetric: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionMetric",
    modelProperties: {
      ...Metric.type.modelProperties,
      partitionId: {
        serializedName: "partitionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        serializedName: "partitionKeyRangeId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PercentileMetricValue: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PercentileMetricValue",
    modelProperties: {
      ...MetricValue.type.modelProperties,
      p10: {
        serializedName: "P10",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p25: {
        serializedName: "P25",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p50: {
        serializedName: "P50",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p75: {
        serializedName: "P75",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p90: {
        serializedName: "P90",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p95: {
        serializedName: "P95",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      p99: {
        serializedName: "P99",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PartitionUsage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionUsage",
    modelProperties: {
      ...Usage.type.modelProperties,
      partitionId: {
        serializedName: "partitionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        serializedName: "partitionKeyRangeId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseGetPropertiesResource",
    modelProperties: {
      ...SqlDatabaseResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties,
      colls: {
        serializedName: "_colls",
        type: {
          name: "String"
        }
      },
      users: {
        serializedName: "_users",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThroughputSettingsGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThroughputSettingsGetPropertiesResource",
    modelProperties: {
      ...ThroughputSettingsResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlContainerGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerGetPropertiesResource",
    modelProperties: {
      ...SqlContainerResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlStoredProcedureGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlStoredProcedureGetPropertiesResource",
    modelProperties: {
      ...SqlStoredProcedureResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlUserDefinedFunctionGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlUserDefinedFunctionGetPropertiesResource",
    modelProperties: {
      ...SqlUserDefinedFunctionResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlTriggerGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlTriggerGetPropertiesResource",
    modelProperties: {
      ...SqlTriggerResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const MongoDBDatabaseGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetPropertiesResource",
    modelProperties: {
      ...MongoDBDatabaseResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const MongoDBCollectionGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetPropertiesResource",
    modelProperties: {
      ...MongoDBCollectionResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const TableGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableGetPropertiesResource",
    modelProperties: {
      ...TableResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const CassandraKeyspaceGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetPropertiesResource",
    modelProperties: {
      ...CassandraKeyspaceResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const CassandraTableGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableGetPropertiesResource",
    modelProperties: {
      ...CassandraTableResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const GremlinDatabaseGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetPropertiesResource",
    modelProperties: {
      ...GremlinDatabaseResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const GremlinGraphGetPropertiesResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphGetPropertiesResource",
    modelProperties: {
      ...GremlinGraphResource.type.modelProperties,
      ...ExtendedResourceProperties.type.modelProperties
    }
  }
};

export const SqlDatabaseGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const SqlContainerGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlContainerGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const MongoDBDatabaseGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const MongoDBCollectionGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBCollectionGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const TableGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const CassandraKeyspaceGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraKeyspaceGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const CassandraTableGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CassandraTableGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const GremlinDatabaseGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinDatabaseGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const GremlinGraphGetPropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GremlinGraphGetPropertiesOptions",
    modelProperties: {
      ...OptionsResource.type.modelProperties
    }
  }
};

export const NotebookWorkspace: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookWorkspace",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      notebookServerEndpoint: {
        serializedName: "properties.notebookServerEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const NotebookWorkspaceCreateUpdateParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookWorkspaceCreateUpdateParameters",
    modelProperties: {
      ...ARMProxyResource.type.modelProperties
    }
  }
};
