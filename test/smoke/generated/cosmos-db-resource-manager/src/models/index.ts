/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The consistency policy for the Cosmos DB database account.
 */
export interface ConsistencyPolicy {
  /**
   * The default consistency level and configuration settings of the Cosmos DB account.
   */
  defaultConsistencyLevel: DefaultConsistencyLevel;
  /**
   * When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
   */
  maxStalenessPrefix?: number;
  /**
   * When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
   */
  maxIntervalInSeconds?: number;
}

/**
 * Cosmos DB capability object
 */
export interface Capability {
  /**
   * Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
   */
  name?: string;
}

/**
 * A region in which the Azure Cosmos DB database account is deployed.
 */
export interface Location {
  /**
   * The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
   */
  readonly id?: string;
  /**
   * The name of the region.
   */
  locationName?: string;
  /**
   * The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
   */
  readonly documentEndpoint?: string;
  /**
   * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account deletion failed.
   */
  readonly provisioningState?: string;
  /**
   * The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
   */
  failoverPriority?: number;
  /**
   * Flag to indicate whether or not this region is an AvailabilityZone region
   */
  isZoneRedundant?: boolean;
}

/**
 * The failover policy for a given region of a database account.
 */
export interface FailoverPolicy {
  /**
   * The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
   */
  readonly id?: string;
  /**
   * The name of the region in which the database account exists.
   */
  locationName?: string;
  /**
   * The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
   */
  failoverPriority?: number;
}

/**
 * Virtual Network ACL Rule object
 */
export interface VirtualNetworkRule {
  /**
   * Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
   */
  id?: string;
  /**
   * Create firewall rule before the virtual network has vnet service endpoint enabled.
   */
  ignoreMissingVNetServiceEndpoint?: boolean;
}

/**
 * Private endpoint which the connection belongs to.
 */
export interface PrivateEndpointProperty {
  /**
   * Resource id of the private endpoint.
   */
  id?: string;
}

/**
 * Connection State of the Private Endpoint Connection.
 */
export interface PrivateLinkServiceConnectionStateProperty {
  /**
   * The private link service connection status.
   */
  status?: string;
  /**
   * Any action that is required beyond basic workflow (approve/ reject/ disconnect)
   */
  readonly actionsRequired?: string;
}

export interface Resource {
  /**
   * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   */
  readonly id?: string;
  /**
   * The name of the resource
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   */
  readonly type?: string;
}

/**
 * The core properties of ARM resources.
 */
export interface ARMResourceProperties {
  /**
   * The unique resource identifier of the ARM resource.
   */
  readonly id?: string;
  /**
   * The name of the ARM resource.
   */
  readonly name?: string;
  /**
   * The type of Azure resource.
   */
  readonly type?: string;
  /**
   * The location of the resource group to which the resource belongs.
   */
  location?: string;
  /**
   * Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Parameters for patching Azure Cosmos DB database account properties.
 */
export interface DatabaseAccountUpdateParameters {
  /**
   * Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
   */
  tags?: { [propertyName: string]: string };
  /**
   * The location of the resource group to which the resource belongs.
   */
  location?: string;
  /**
   * The consistency policy for the Cosmos DB account.
   */
  consistencyPolicy?: ConsistencyPolicy;
  /**
   * An array that contains the georeplication locations enabled for the Cosmos DB account.
   */
  locations?: Location[];
  /**
   * Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
   */
  ipRangeFilter?: string;
  /**
   * Flag to indicate whether to enable/disable Virtual Network ACL rules.
   */
  isVirtualNetworkFilterEnabled?: boolean;
  /**
   * Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
   */
  enableAutomaticFailover?: boolean;
  /**
   * List of Cosmos DB capabilities for the account
   */
  capabilities?: Capability[];
  /**
   * List of Virtual Network ACL rules configured for the Cosmos DB account.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * Enables the account to write in multiple locations
   */
  enableMultipleWriteLocations?: boolean;
  /**
   * Enables the cassandra connector on the Cosmos DB C* account
   */
  enableCassandraConnector?: boolean;
  /**
   * The cassandra connector offer type for the Cosmos DB database C* account.
   */
  connectorOffer?: ConnectorOffer;
  /**
   * Disable write operations on metadata resources (databases, containers, throughput) via account keys
   */
  disableKeyBasedMetadataWriteAccess?: boolean;
  /**
   * The URI of the key vault
   */
  keyVaultKeyUri?: string;
  /**
   * Whether requests from Public Network are allowed
   */
  readonly publicNetworkAccess?: PublicNetworkAccess;
}

/**
 * The list of new failover policies for the failover priority change.
 */
export interface FailoverPolicies {
  /**
   * List of failover policies.
   */
  failoverPolicies: FailoverPolicy[];
}

/**
 * The List operation response, that contains the database accounts and their properties.
 */
export interface DatabaseAccountsListResult {
  /**
   * List of database account and their properties.
   */
  readonly value?: DatabaseAccountGetResults[];
}

/**
 * The read-only access keys for the given database account.
 */
export interface DatabaseAccountListReadOnlyKeysResult {
  /**
   * Base 64 encoded value of the primary read-only key.
   */
  readonly primaryReadonlyMasterKey?: string;
  /**
   * Base 64 encoded value of the secondary read-only key.
   */
  readonly secondaryReadonlyMasterKey?: string;
}

/**
 * The connection strings for the given database account.
 */
export interface DatabaseAccountListConnectionStringsResult {
  /**
   * An array that contains the connection strings for the Cosmos DB account.
   */
  connectionStrings?: DatabaseAccountConnectionString[];
}

/**
 * Connection string for the Cosmos DB account
 */
export interface DatabaseAccountConnectionString {
  /**
   * Value of the connection string
   */
  readonly connectionString?: string;
  /**
   * Description of the connection string
   */
  readonly description?: string;
}

/**
 * Cosmos DB region to online or offline.
 */
export interface RegionForOnlineOffline {
  /**
   * Cosmos DB region, with spaces between words and each word capitalized.
   */
  region: string;
}

/**
 * Error Response.
 */
export interface ErrorResponse {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Parameters to regenerate the keys within the database account.
 */
export interface DatabaseAccountRegenerateKeyParameters {
  /**
   * The access key to regenerate.
   */
  keyKind: KeyKind;
}

/**
 * Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of operations supported by the Resource Provider.
   */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.ResourceProvider
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Profile, endpoint, etc.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
  /**
   * Description of operation
   */
  description?: string;
}

/**
 * The response to a list metrics request.
 */
export interface MetricListResult {
  /**
   * The list of metrics for the account.
   */
  readonly value?: Metric[];
}

/**
 * Metric data
 */
export interface Metric {
  /**
   * The start time for the metric (ISO-8601 format).
   */
  readonly startTime?: Date;
  /**
   * The end time for the metric (ISO-8601 format).
   */
  readonly endTime?: Date;
  /**
   * The time grain to be used to summarize the metric values.
   */
  readonly timeGrain?: string;
  /**
   * The unit of the metric.
   */
  readonly unit?: UnitType;
  /**
   * The name information for the metric.
   */
  readonly name?: MetricName;
  /**
   * The metric values for the specified time window and timestep.
   */
  readonly metricValues?: MetricValue[];
}

/**
 * A metric name.
 */
export interface MetricName {
  /**
   * The name of the metric.
   */
  readonly value?: string;
  /**
   * The friendly name of the metric.
   */
  readonly localizedValue?: string;
}

/**
 * Represents metrics values.
 */
export interface MetricValue {
  /**
   * The number of values for the metric.
   */
  readonly count?: number;
  /**
   * The average value of the metric.
   */
  readonly average?: number;
  /**
   * The max value of the metric.
   */
  readonly maximum?: number;
  /**
   * The min value of the metric.
   */
  readonly minimum?: number;
  /**
   * The metric timestamp (ISO-8601 format).
   */
  readonly timestamp?: Date;
  /**
   * The total value of the metric.
   */
  readonly total?: number;
}

/**
 * The response to a list percentile metrics request.
 */
export interface PercentileMetricListResult {
  /**
   * The list of percentile metrics for the account.
   */
  readonly value?: PercentileMetric[];
}

/**
 * Percentile Metric data
 */
export interface PercentileMetric {
  /**
   * The start time for the metric (ISO-8601 format).
   */
  readonly startTime?: Date;
  /**
   * The end time for the metric (ISO-8601 format).
   */
  readonly endTime?: Date;
  /**
   * The time grain to be used to summarize the metric values.
   */
  readonly timeGrain?: string;
  /**
   * The unit of the metric.
   */
  readonly unit?: UnitType;
  /**
   * The name information for the metric.
   */
  readonly name?: MetricName;
  /**
   * The percentile metric values for the specified time window and timestep.
   */
  readonly metricValues?: PercentileMetricValue[];
}

/**
 * The response to a list partition metrics request.
 */
export interface PartitionMetricListResult {
  /**
   * The list of partition-level metrics for the account.
   */
  readonly value?: PartitionMetric[];
}

/**
 * The response to a list usage request.
 */
export interface UsagesResult {
  /**
   * The list of usages for the database. A usage is a point in time metric
   */
  readonly value?: Usage[];
}

/**
 * The usage data for a usage request.
 */
export interface Usage {
  /**
   * The unit of the metric.
   */
  readonly unit?: UnitType;
  /**
   * The name information for the metric.
   */
  readonly name?: MetricName;
  /**
   * The quota period used to summarize the usage values.
   */
  readonly quotaPeriod?: string;
  /**
   * Maximum value for this metric
   */
  readonly limit?: number;
  /**
   * Current value for this metric
   */
  readonly currentValue?: number;
}

/**
 * The response to a list partition level usage request.
 */
export interface PartitionUsagesResult {
  /**
   * The list of partition-level usages for the database. A usage is a point in time metric
   */
  readonly value?: PartitionUsage[];
}

/**
 * The response to a list metric definitions request.
 */
export interface MetricDefinitionsListResult {
  /**
   * The list of metric definitions for the account.
   */
  readonly value?: MetricDefinition[];
}

/**
 * The definition of a metric.
 */
export interface MetricDefinition {
  /**
   * The list of metric availabilities for the account.
   */
  readonly metricAvailabilities?: MetricAvailability[];
  /**
   * The primary aggregation type of the metric.
   */
  readonly primaryAggregationType?: PrimaryAggregationType;
  /**
   * The unit of the metric.
   */
  readonly unit?: UnitType;
  /**
   * The resource uri of the database.
   */
  readonly resourceUri?: string;
  /**
   * The name information for the metric.
   */
  readonly name?: MetricName;
}

/**
 * The availability of the metric.
 */
export interface MetricAvailability {
  /**
   * The time grain to be used to summarize the metric values.
   */
  readonly timeGrain?: string;
  /**
   * The retention for the metric values.
   */
  readonly retention?: string;
}

/**
 * The List operation response, that contains the SQL databases and their properties.
 */
export interface SqlDatabaseListResult {
  /**
   * List of SQL databases and their properties.
   */
  readonly value?: SqlDatabaseGetResults[];
}

/**
 * Cosmos DB SQL database resource object
 */
export interface SqlDatabaseResource {
  /**
   * Name of the Cosmos DB SQL database
   */
  id: string;
}

/**
 * The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.
 */
export interface ExtendedResourceProperties {
  /**
   * A system generated property. A unique identifier.
   */
  readonly rid?: string;
  /**
   * A system generated property that denotes the last updated timestamp of the resource.
   */
  readonly ts?: any;
  /**
   * A system generated property representing the resource etag required for optimistic concurrency control.
   */
  readonly etag?: string;
}

/**
 * Cosmos DB options resource object
 */
export interface OptionsResource {
  /**
   * Value of the Cosmos DB resource throughput. Use the ThroughputSetting resource when retrieving offer details.
   */
  throughput?: number;
}

/**
 * CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
 */
export interface CreateUpdateOptions {
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
   */
  [property: string]: any;
  /**
   * Request Units per second. For example, "throughput": "10000".
   */
  throughput?: string;
}

/**
 * Cosmos DB resource throughput object. Either throughput is required or provisionedThroughputSettings is required, but not both.
 */
export interface ThroughputSettingsResource {
  /**
   * Value of the Cosmos DB resource throughput. Either throughput is required or provisionedThroughputSettings is required, but not both.
   */
  throughput?: number;
  /**
   * Cosmos DB resource for provisioned throughput settings. Either throughput is required or provisionedThroughputSettings is required, but not both.
   */
  provisionedThroughputSettings?: ProvisionedThroughputSettingsResource;
  /**
   * The minimum throughput of the resource
   */
  readonly minimumThroughput?: string;
  /**
   * The throughput replace is pending
   */
  readonly offerReplacePending?: string;
}

/**
 * Cosmos DB provisioned throughput settings object
 */
export interface ProvisionedThroughputSettingsResource {
  /**
   * Represents maximum throughput container can scale up to.
   */
  maxThroughput: number;
  /**
   * Cosmos DB resource auto-upgrade policy
   */
  autoUpgradePolicy?: AutoUpgradePolicyResource;
  /**
   * Represents target maximum throughput container can scale up to once offer is no longer in pending state.
   */
  readonly targetMaxThroughput?: number;
}

/**
 * Cosmos DB resource auto-upgrade policy
 */
export interface AutoUpgradePolicyResource {
  /**
   * Represents throughput policy which service must adhere to for auto-upgrade
   */
  throughputPolicy?: ThroughputPolicyResource;
}

/**
 * Cosmos DB resource throughput policy
 */
export interface ThroughputPolicyResource {
  /**
   * Determines whether the ThroughputPolicy is active or not
   */
  isEnabled?: boolean;
  /**
   * Represents the percentage by which throughput can increase every time throughput policy kicks in.
   */
  incrementPercent?: number;
}

/**
 * The List operation response, that contains the containers and their properties.
 */
export interface SqlContainerListResult {
  /**
   * List of containers and their properties.
   */
  readonly value?: SqlContainerGetResults[];
}

/**
 * Cosmos DB SQL container resource object
 */
export interface SqlContainerResource {
  /**
   * Name of the Cosmos DB SQL container
   */
  id: string;
  /**
   * The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * The configuration of the partition key to be used for partitioning data into multiple partitions
   */
  partitionKey?: ContainerPartitionKey;
  /**
   * Default time to live
   */
  defaultTtl?: number;
  /**
   * The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
   */
  uniqueKeyPolicy?: UniqueKeyPolicy;
  /**
   * The conflict resolution policy for the container.
   */
  conflictResolutionPolicy?: ConflictResolutionPolicy;
}

/**
 * Cosmos DB indexing policy
 */
export interface IndexingPolicy {
  /**
   * Indicates if the indexing policy is automatic
   */
  automatic?: boolean;
  /**
   * Indicates the indexing mode.
   */
  indexingMode?: IndexingMode;
  /**
   * List of paths to include in the indexing
   */
  includedPaths?: IncludedPath[];
  /**
   * List of paths to exclude from indexing
   */
  excludedPaths?: ExcludedPath[];
  /**
   * List of composite path list
   */
  compositeIndexes?: CompositePath[][];
  /**
   * List of spatial specifics
   */
  spatialIndexes?: SpatialSpec[];
}

/**
 * The paths that are included in indexing
 */
export interface IncludedPath {
  /**
   * The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
   */
  path?: string;
  /**
   * List of indexes for this path
   */
  indexes?: Indexes[];
}

/**
 * The indexes for the path.
 */
export interface Indexes {
  /**
   * The datatype for which the indexing behavior is applied to.
   */
  dataType?: DataType;
  /**
   * The precision of the index. -1 is maximum precision.
   */
  precision?: number;
  /**
   * Indicates the type of index.
   */
  kind?: IndexKind;
}

export interface ExcludedPath {
  /**
   * The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
   */
  path?: string;
}

export interface CompositePath {
  /**
   * The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
   */
  path?: string;
  /**
   * Sort order for composite paths.
   */
  order?: CompositePathSortOrder;
}

export interface SpatialSpec {
  /**
   * The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
   */
  path?: string;
  /**
   * List of path's spatial type
   */
  types?: SpatialType[];
}

/**
 * The configuration of the partition key to be used for partitioning data into multiple partitions
 */
export interface ContainerPartitionKey {
  /**
   * List of paths using which data within the container can be partitioned
   */
  paths?: string[];
  /**
   * Indicates the kind of algorithm used for partitioning
   */
  kind?: PartitionKind;
  /**
   * Indicates the version of the partition key definition
   */
  version?: number;
}

/**
 * The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
 */
export interface UniqueKeyPolicy {
  /**
   * List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
   */
  uniqueKeys?: UniqueKey[];
}

/**
 * The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
 */
export interface UniqueKey {
  /**
   * List of paths must be unique for each document in the Azure Cosmos DB service
   */
  paths?: string[];
}

/**
 * The conflict resolution policy for the container.
 */
export interface ConflictResolutionPolicy {
  /**
   * Indicates the conflict resolution mode.
   */
  mode?: ConflictResolutionMode;
  /**
   * The conflict resolution path in the case of LastWriterWins mode.
   */
  conflictResolutionPath?: string;
  /**
   * The procedure to resolve conflicts in the case of custom mode.
   */
  conflictResolutionProcedure?: string;
}

/**
 * The List operation response, that contains the storedProcedures and their properties.
 */
export interface SqlStoredProcedureListResult {
  /**
   * List of storedProcedures and their properties.
   */
  readonly value?: SqlStoredProcedureGetResults[];
}

/**
 * Cosmos DB SQL storedProcedure resource object
 */
export interface SqlStoredProcedureResource {
  /**
   * Name of the Cosmos DB SQL storedProcedure
   */
  id: string;
  /**
   * Body of the Stored Procedure
   */
  body?: string;
}

/**
 * The List operation response, that contains the userDefinedFunctions and their properties.
 */
export interface SqlUserDefinedFunctionListResult {
  /**
   * List of userDefinedFunctions and their properties.
   */
  readonly value?: SqlUserDefinedFunctionGetResults[];
}

/**
 * Cosmos DB SQL userDefinedFunction resource object
 */
export interface SqlUserDefinedFunctionResource {
  /**
   * Name of the Cosmos DB SQL userDefinedFunction
   */
  id: string;
  /**
   * Body of the User Defined Function
   */
  body?: string;
}

/**
 * The List operation response, that contains the triggers and their properties.
 */
export interface SqlTriggerListResult {
  /**
   * List of triggers and their properties.
   */
  readonly value?: SqlTriggerGetResults[];
}

/**
 * Cosmos DB SQL trigger resource object
 */
export interface SqlTriggerResource {
  /**
   * Name of the Cosmos DB SQL trigger
   */
  id: string;
  /**
   * Body of the Trigger
   */
  body?: string;
  /**
   * Type of the Trigger
   */
  triggerType?: TriggerType;
  /**
   * The operation the trigger is associated with
   */
  triggerOperation?: TriggerOperation;
}

/**
 * The List operation response, that contains the MongoDB databases and their properties.
 */
export interface MongoDBDatabaseListResult {
  /**
   * List of MongoDB databases and their properties.
   */
  readonly value?: MongoDBDatabaseGetResults[];
}

/**
 * Cosmos DB MongoDB database resource object
 */
export interface MongoDBDatabaseResource {
  /**
   * Name of the Cosmos DB MongoDB database
   */
  id: string;
}

/**
 * The List operation response, that contains the MongoDB collections and their properties.
 */
export interface MongoDBCollectionListResult {
  /**
   * List of MongoDB collections and their properties.
   */
  readonly value?: MongoDBCollectionGetResults[];
}

/**
 * Cosmos DB MongoDB collection resource object
 */
export interface MongoDBCollectionResource {
  /**
   * Name of the Cosmos DB MongoDB collection
   */
  id: string;
  /**
   * A key-value pair of shard keys to be applied for the request.
   */
  shardKey?: { [propertyName: string]: string };
  /**
   * List of index keys
   */
  indexes?: MongoIndex[];
}

/**
 * Cosmos DB MongoDB collection index key
 */
export interface MongoIndex {
  /**
   * Cosmos DB MongoDB collection index keys
   */
  key?: MongoIndexKeys;
  /**
   * Cosmos DB MongoDB collection index key options
   */
  options?: MongoIndexOptions;
}

/**
 * Cosmos DB MongoDB collection resource object
 */
export interface MongoIndexKeys {
  /**
   * List of keys for each MongoDB collection in the Azure Cosmos DB service
   */
  keys?: string[];
}

/**
 * Cosmos DB MongoDB collection index options
 */
export interface MongoIndexOptions {
  /**
   * Expire after seconds
   */
  expireAfterSeconds?: number;
  /**
   * Is unique or not
   */
  unique?: boolean;
}

/**
 * The List operation response, that contains the Table and their properties.
 */
export interface TableListResult {
  /**
   * List of Table and their properties.
   */
  readonly value?: TableGetResults[];
}

/**
 * Cosmos DB table resource object
 */
export interface TableResource {
  /**
   * Name of the Cosmos DB table
   */
  id: string;
}

/**
 * The List operation response, that contains the Cassandra keyspaces and their properties.
 */
export interface CassandraKeyspaceListResult {
  /**
   * List of Cassandra keyspaces and their properties.
   */
  readonly value?: CassandraKeyspaceGetResults[];
}

/**
 * Cosmos DB Cassandra keyspace resource object
 */
export interface CassandraKeyspaceResource {
  /**
   * Name of the Cosmos DB Cassandra keyspace
   */
  id: string;
}

/**
 * The List operation response, that contains the Cassandra tables and their properties.
 */
export interface CassandraTableListResult {
  /**
   * List of Cassandra tables and their properties.
   */
  readonly value?: CassandraTableGetResults[];
}

/**
 * Cosmos DB Cassandra table resource object
 */
export interface CassandraTableResource {
  /**
   * Name of the Cosmos DB Cassandra table
   */
  id: string;
  /**
   * Time to live of the Cosmos DB Cassandra table
   */
  defaultTtl?: number;
  /**
   * Schema of the Cosmos DB Cassandra table
   */
  schema?: CassandraSchema;
}

/**
 * Cosmos DB Cassandra table schema
 */
export interface CassandraSchema {
  /**
   * List of Cassandra table columns.
   */
  columns?: Column[];
  /**
   * List of partition key.
   */
  partitionKeys?: CassandraPartitionKey[];
  /**
   * List of cluster key.
   */
  clusterKeys?: ClusterKey[];
}

/**
 * Cosmos DB Cassandra table column
 */
export interface Column {
  /**
   * Name of the Cosmos DB Cassandra table column
   */
  name?: string;
  /**
   * Type of the Cosmos DB Cassandra table column
   */
  type?: string;
}

/**
 * Cosmos DB Cassandra table partition key
 */
export interface CassandraPartitionKey {
  /**
   * Name of the Cosmos DB Cassandra table partition key
   */
  name?: string;
}

/**
 * Cosmos DB Cassandra table cluster key
 */
export interface ClusterKey {
  /**
   * Name of the Cosmos DB Cassandra table cluster key
   */
  name?: string;
  /**
   * Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
   */
  orderBy?: string;
}

/**
 * The List operation response, that contains the Gremlin databases and their properties.
 */
export interface GremlinDatabaseListResult {
  /**
   * List of Gremlin databases and their properties.
   */
  readonly value?: GremlinDatabaseGetResults[];
}

/**
 * Cosmos DB Gremlin database resource object
 */
export interface GremlinDatabaseResource {
  /**
   * Name of the Cosmos DB Gremlin database
   */
  id: string;
}

/**
 * The List operation response, that contains the graphs and their properties.
 */
export interface GremlinGraphListResult {
  /**
   * List of graphs and their properties.
   */
  readonly value?: GremlinGraphGetResults[];
}

/**
 * Cosmos DB Gremlin graph resource object
 */
export interface GremlinGraphResource {
  /**
   * Name of the Cosmos DB Gremlin graph
   */
  id: string;
  /**
   * The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * The configuration of the partition key to be used for partitioning data into multiple partitions
   */
  partitionKey?: ContainerPartitionKey;
  /**
   * Default time to live
   */
  defaultTtl?: number;
  /**
   * The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
   */
  uniqueKeyPolicy?: UniqueKeyPolicy;
  /**
   * The conflict resolution policy for the graph.
   */
  conflictResolutionPolicy?: ConflictResolutionPolicy;
}

/**
 * A list of notebook workspace resources
 */
export interface NotebookWorkspaceListResult {
  /**
   * Array of notebook workspace resources
   */
  value?: NotebookWorkspace[];
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
 */
export interface ARMProxyResource {
  /**
   * The unique resource identifier of the database account.
   */
  readonly id?: string;
  /**
   * The name of the database account.
   */
  readonly name?: string;
  /**
   * The type of Azure resource.
   */
  readonly type?: string;
}

/**
 * The connection info for the given notebook workspace
 */
export interface NotebookWorkspaceConnectionInfoResult {
  /**
   * Specifies auth token used for connecting to Notebook server (uses token-based auth).
   */
  readonly authToken?: string;
  /**
   * Specifies the endpoint of Notebook server.
   */
  readonly notebookServerEndpoint?: string;
}

/**
 * A list of private link resources
 */
export interface PrivateLinkResourceListResult {
  /**
   * Array of private link resources
   */
  value?: PrivateLinkResource[];
}

/**
 * A list of private endpoint connections
 */
export interface PrivateEndpointConnectionListResult {
  /**
   * Array of private endpoint connections
   */
  value?: PrivateEndpointConnectionAutoGenerated[];
}

/**
 * Connection State of the Private Endpoint Connection.
 */
export interface PrivateLinkServiceConnectionStatePropertyAutoGenerated {
  /**
   * The private link service connection status.
   */
  status?: string;
  /**
   * The private link service connection description.
   */
  description?: string;
  /**
   * Any action that is required beyond basic workflow (approve/ reject/ disconnect)
   */
  readonly actionsRequired?: string;
}

/**
 * A private endpoint connection
 */
export type PrivateEndpointConnection = Resource & {
  /**
   * Private endpoint which the connection belongs to.
   */
  privateEndpoint?: PrivateEndpointProperty;
  /**
   * Connection State of the Private Endpoint Connection.
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStateProperty;
};

/**
 * A private endpoint connection
 */
export type PrivateEndpointConnectionAutoGenerated = Resource & {
  /**
   * Private endpoint which the connection belongs to.
   */
  privateEndpoint?: PrivateEndpointProperty;
  /**
   * Connection State of the Private Endpoint Connection.
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStatePropertyAutoGenerated;
  /**
   * Group id of the private endpoint.
   */
  groupId?: string;
  /**
   * Provisioning state of the private endpoint.
   */
  provisioningState?: string;
};

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
 */
export type ProxyResource = Resource & {};

/**
 * An Azure Cosmos DB database account.
 */
export type DatabaseAccountGetResults = ARMResourceProperties & {
  /**
   * Indicates the type of database account. This can only be set at database account creation.
   */
  kind?: DatabaseAccountKind;
  /**
   * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account deletion failed.
   */
  readonly provisioningState?: string;
  /**
   * The connection endpoint for the Cosmos DB database account.
   */
  readonly documentEndpoint?: string;
  /**
   * The offer type for the Cosmos DB database account. Default value: Standard.
   */
  readonly databaseAccountOfferType?: "Standard";
  /**
   * Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
   */
  ipRangeFilter?: string;
  /**
   * Flag to indicate whether to enable/disable Virtual Network ACL rules.
   */
  isVirtualNetworkFilterEnabled?: boolean;
  /**
   * Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
   */
  enableAutomaticFailover?: boolean;
  /**
   * The consistency policy for the Cosmos DB database account.
   */
  consistencyPolicy?: ConsistencyPolicy;
  /**
   * List of Cosmos DB capabilities for the account
   */
  capabilities?: Capability[];
  /**
   * An array that contains the write location for the Cosmos DB account.
   */
  readonly writeLocations?: Location[];
  /**
   * An array that contains of the read locations enabled for the Cosmos DB account.
   */
  readonly readLocations?: Location[];
  /**
   * An array that contains all of the locations enabled for the Cosmos DB account.
   */
  readonly locations?: Location[];
  /**
   * An array that contains the regions ordered by their failover priorities.
   */
  readonly failoverPolicies?: FailoverPolicy[];
  /**
   * List of Virtual Network ACL rules configured for the Cosmos DB account.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * List of Private Endpoint Connections configured for the Cosmos DB account.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * Enables the account to write in multiple locations
   */
  enableMultipleWriteLocations?: boolean;
  /**
   * Enables the cassandra connector on the Cosmos DB C* account
   */
  enableCassandraConnector?: boolean;
  /**
   * The cassandra connector offer type for the Cosmos DB database C* account.
   */
  connectorOffer?: ConnectorOffer;
  /**
   * Disable write operations on metadata resources (databases, containers, throughput) via account keys
   */
  disableKeyBasedMetadataWriteAccess?: boolean;
  /**
   * The URI of the key vault
   */
  keyVaultKeyUri?: string;
  /**
   * Whether requests from Public Network are allowed
   */
  readonly publicNetworkAccess?: PublicNetworkAccess;
};

/**
 * Parameters to create and update Cosmos DB database accounts.
 */
export type DatabaseAccountCreateUpdateParameters = ARMResourceProperties & {
  /**
   * Indicates the type of database account. This can only be set at database account creation.
   */
  kind?: DatabaseAccountKind;
  /**
   * The consistency policy for the Cosmos DB account.
   */
  consistencyPolicy?: ConsistencyPolicy;
  /**
   * An array that contains the georeplication locations enabled for the Cosmos DB account.
   */
  locations: Location[];
  /**
   * The offer type for the database
   */
  databaseAccountOfferType: "Standard";
  /**
   * Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
   */
  ipRangeFilter?: string;
  /**
   * Flag to indicate whether to enable/disable Virtual Network ACL rules.
   */
  isVirtualNetworkFilterEnabled?: boolean;
  /**
   * Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
   */
  enableAutomaticFailover?: boolean;
  /**
   * List of Cosmos DB capabilities for the account
   */
  capabilities?: Capability[];
  /**
   * List of Virtual Network ACL rules configured for the Cosmos DB account.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * Enables the account to write in multiple locations
   */
  enableMultipleWriteLocations?: boolean;
  /**
   * Enables the cassandra connector on the Cosmos DB C* account
   */
  enableCassandraConnector?: boolean;
  /**
   * The cassandra connector offer type for the Cosmos DB database C* account.
   */
  connectorOffer?: ConnectorOffer;
  /**
   * Disable write operations on metadata resources (databases, containers, throughput) via account keys
   */
  disableKeyBasedMetadataWriteAccess?: boolean;
  /**
   * The URI of the key vault
   */
  keyVaultKeyUri?: string;
  /**
   * Whether requests from Public Network are allowed
   */
  readonly publicNetworkAccess?: PublicNetworkAccess;
};

/**
 * An Azure Cosmos DB SQL database.
 */
export type SqlDatabaseGetResults = ARMResourceProperties & {
  resource?: SqlDatabaseGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB SQL database.
 */
export type SqlDatabaseCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a SQL database
   */
  resource: SqlDatabaseResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB resource throughput.
 */
export type ThroughputSettingsGetResults = ARMResourceProperties & {
  resource?: ThroughputSettingsGetPropertiesResource;
};

/**
 * Parameters to update Cosmos DB resource throughput.
 */
export type ThroughputSettingsUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a resource throughput
   */
  resource: ThroughputSettingsResource;
};

/**
 * An Azure Cosmos DB container.
 */
export type SqlContainerGetResults = ARMResourceProperties & {
  resource?: SqlContainerGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB container.
 */
export type SqlContainerCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a container
   */
  resource: SqlContainerResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB storedProcedure.
 */
export type SqlStoredProcedureGetResults = ARMResourceProperties & {
  resource?: SqlStoredProcedureGetPropertiesResource;
};

/**
 * Parameters to create and update Cosmos DB storedProcedure.
 */
export type SqlStoredProcedureCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a storedProcedure
   */
  resource: SqlStoredProcedureResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB userDefinedFunction.
 */
export type SqlUserDefinedFunctionGetResults = ARMResourceProperties & {
  resource?: SqlUserDefinedFunctionGetPropertiesResource;
};

/**
 * Parameters to create and update Cosmos DB userDefinedFunction.
 */
export type SqlUserDefinedFunctionCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a userDefinedFunction
   */
  resource: SqlUserDefinedFunctionResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB trigger.
 */
export type SqlTriggerGetResults = ARMResourceProperties & {
  resource?: SqlTriggerGetPropertiesResource;
};

/**
 * Parameters to create and update Cosmos DB trigger.
 */
export type SqlTriggerCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a trigger
   */
  resource: SqlTriggerResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB MongoDB database.
 */
export type MongoDBDatabaseGetResults = ARMResourceProperties & {
  resource?: MongoDBDatabaseGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB MongoDB database.
 */
export type MongoDBDatabaseCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a MongoDB database
   */
  resource: MongoDBDatabaseResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB MongoDB collection.
 */
export type MongoDBCollectionGetResults = ARMResourceProperties & {
  resource?: MongoDBCollectionGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB MongoDB collection.
 */
export type MongoDBCollectionCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a MongoDB collection
   */
  resource: MongoDBCollectionResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB Table.
 */
export type TableGetResults = ARMResourceProperties & {
  resource?: TableGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB Table.
 */
export type TableCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a Table
   */
  resource: TableResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB Cassandra keyspace.
 */
export type CassandraKeyspaceGetResults = ARMResourceProperties & {
  resource?: CassandraKeyspaceGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB Cassandra keyspace.
 */
export type CassandraKeyspaceCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a Cassandra keyspace
   */
  resource: CassandraKeyspaceResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB Cassandra table.
 */
export type CassandraTableGetResults = ARMResourceProperties & {
  resource?: CassandraTableGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB Cassandra table.
 */
export type CassandraTableCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a Cassandra table
   */
  resource: CassandraTableResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB Gremlin database.
 */
export type GremlinDatabaseGetResults = ARMResourceProperties & {
  resource?: GremlinDatabaseGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB Gremlin database.
 */
export type GremlinDatabaseCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a Gremlin database
   */
  resource: GremlinDatabaseResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * An Azure Cosmos DB Gremlin graph.
 */
export type GremlinGraphGetResults = ARMResourceProperties & {
  resource?: GremlinGraphGetPropertiesResource;
  /**
   * Cosmos DB options resource object
   */
  options?: OptionsResource;
};

/**
 * Parameters to create and update Cosmos DB Gremlin graph.
 */
export type GremlinGraphCreateUpdateParameters = ARMResourceProperties & {
  /**
   * The standard JSON format of a Gremlin graph
   */
  resource: GremlinGraphResource;
  /**
   * A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
   */
  options: CreateUpdateOptions;
};

/**
 * The access keys for the given database account.
 */
export type DatabaseAccountListKeysResult = DatabaseAccountListReadOnlyKeysResult & {
  /**
   * Base 64 encoded value of the primary read-write key.
   */
  readonly primaryMasterKey?: string;
  /**
   * Base 64 encoded value of the secondary read-write key.
   */
  readonly secondaryMasterKey?: string;
};

/**
 * The metric values for a single partition.
 */
export type PartitionMetric = Metric & {
  /**
   * The partition id (GUID identifier) of the metric values.
   */
  readonly partitionId?: string;
  /**
   * The partition key range id (integer identifier) of the metric values.
   */
  readonly partitionKeyRangeId?: string;
};

/**
 * Represents percentile metrics values.
 */
export type PercentileMetricValue = MetricValue & {
  /**
   * The 10th percentile value for the metric.
   */
  readonly p10?: number;
  /**
   * The 25th percentile value for the metric.
   */
  readonly p25?: number;
  /**
   * The 50th percentile value for the metric.
   */
  readonly p50?: number;
  /**
   * The 75th percentile value for the metric.
   */
  readonly p75?: number;
  /**
   * The 90th percentile value for the metric.
   */
  readonly p90?: number;
  /**
   * The 95th percentile value for the metric.
   */
  readonly p95?: number;
  /**
   * The 99th percentile value for the metric.
   */
  readonly p99?: number;
};

/**
 * The partition level usage data for a usage request.
 */
export type PartitionUsage = Usage & {
  /**
   * The partition id (GUID identifier) of the usages.
   */
  readonly partitionId?: string;
  /**
   * The partition key range id (integer identifier) of the usages.
   */
  readonly partitionKeyRangeId?: string;
};

export type SqlDatabaseGetPropertiesResource = SqlDatabaseResource &
  ExtendedResourceProperties & {
    /**
     * A system generated property that specified the addressable path of the collections resource.
     */
    colls?: string;
    /**
     * A system generated property that specifies the addressable path of the users resource.
     */
    users?: string;
  };

export type ThroughputSettingsGetPropertiesResource = ThroughputSettingsResource &
  ExtendedResourceProperties & {};

export type SqlContainerGetPropertiesResource = SqlContainerResource &
  ExtendedResourceProperties & {};

export type SqlStoredProcedureGetPropertiesResource = SqlStoredProcedureResource &
  ExtendedResourceProperties & {};

export type SqlUserDefinedFunctionGetPropertiesResource = SqlUserDefinedFunctionResource &
  ExtendedResourceProperties & {};

export type SqlTriggerGetPropertiesResource = SqlTriggerResource &
  ExtendedResourceProperties & {};

export type MongoDBDatabaseGetPropertiesResource = MongoDBDatabaseResource &
  ExtendedResourceProperties & {};

export type MongoDBCollectionGetPropertiesResource = MongoDBCollectionResource &
  ExtendedResourceProperties & {};

export type TableGetPropertiesResource = TableResource &
  ExtendedResourceProperties & {};

export type CassandraKeyspaceGetPropertiesResource = CassandraKeyspaceResource &
  ExtendedResourceProperties & {};

export type CassandraTableGetPropertiesResource = CassandraTableResource &
  ExtendedResourceProperties & {};

export type GremlinDatabaseGetPropertiesResource = GremlinDatabaseResource &
  ExtendedResourceProperties & {};

export type GremlinGraphGetPropertiesResource = GremlinGraphResource &
  ExtendedResourceProperties & {};

export type SqlDatabaseGetPropertiesOptions = OptionsResource & {};

export type SqlContainerGetPropertiesOptions = OptionsResource & {};

export type MongoDBDatabaseGetPropertiesOptions = OptionsResource & {};

export type MongoDBCollectionGetPropertiesOptions = OptionsResource & {};

export type TableGetPropertiesOptions = OptionsResource & {};

export type CassandraKeyspaceGetPropertiesOptions = OptionsResource & {};

export type CassandraTableGetPropertiesOptions = OptionsResource & {};

export type GremlinDatabaseGetPropertiesOptions = OptionsResource & {};

export type GremlinGraphGetPropertiesOptions = OptionsResource & {};

/**
 * A notebook workspace resource
 */
export type NotebookWorkspace = ARMProxyResource & {
  /**
   * Specifies the endpoint of Notebook server.
   */
  readonly notebookServerEndpoint?: string;
  /**
   * Status of the notebook workspace. Possible values are: Creating, Online, Deleting, Failed, Updating.
   */
  readonly status?: string;
};

/**
 * A private link resource
 */
export type PrivateLinkResource = ARMProxyResource & {
  /**
   * The private link resource group id.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   */
  readonly requiredMembers?: string[];
  /**
   * The private link resource required zone names.
   */
  readonly requiredZoneNames?: string[];
};

/**
 * Parameters to create a notebook workspace resource
 */
export type NotebookWorkspaceCreateUpdateParameters = ARMProxyResource & {};
/**
 * Defines values for DatabaseAccountKind.
 */
export type DatabaseAccountKind = "GlobalDocumentDB" | "MongoDB" | "Parse";
/**
 * Defines values for ConnectorOffer.
 */
export type ConnectorOffer = "Small";
/**
 * Defines values for PublicNetworkAccess.
 */
export type PublicNetworkAccess = "Enabled" | "Disabled";
/**
 * Defines values for KeyKind.
 */
export type KeyKind =
  | "primary"
  | "secondary"
  | "primaryReadonly"
  | "secondaryReadonly";
/**
 * Defines values for UnitType.
 */
export type UnitType =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "Percent"
  | "CountPerSecond"
  | "BytesPerSecond"
  | "Milliseconds";
/**
 * Defines values for PrimaryAggregationType.
 */
export type PrimaryAggregationType =
  | "None"
  | "Average"
  | "Total"
  | "Minimum"
  | "Maximum"
  | "Last";
/**
 * Defines values for IndexingMode.
 */
export type IndexingMode = "Consistent" | "Lazy" | "None";
/**
 * Defines values for DataType.
 */
export type DataType =
  | "String"
  | "Number"
  | "Point"
  | "Polygon"
  | "LineString"
  | "MultiPolygon";
/**
 * Defines values for IndexKind.
 */
export type IndexKind = "Hash" | "Range" | "Spatial";
/**
 * Defines values for CompositePathSortOrder.
 */
export type CompositePathSortOrder = "Ascending" | "Descending";
/**
 * Defines values for SpatialType.
 */
export type SpatialType = "Point" | "LineString" | "Polygon" | "MultiPolygon";
/**
 * Defines values for PartitionKind.
 */
export type PartitionKind = "Hash" | "Range";
/**
 * Defines values for ConflictResolutionMode.
 */
export type ConflictResolutionMode = "LastWriterWins" | "Custom";
/**
 * Defines values for TriggerType.
 */
export type TriggerType = "Pre" | "Post";
/**
 * Defines values for TriggerOperation.
 */
export type TriggerOperation =
  | "All"
  | "Create"
  | "Update"
  | "Delete"
  | "Replace";
/**
 * Defines values for NotebookWorkspaceName.
 */
export type NotebookWorkspaceName = "default";
/**
 * Defines values for DefaultConsistencyLevel.
 */
export type DefaultConsistencyLevel =
  | "Eventual"
  | "Session"
  | "BoundedStaleness"
  | "Strong"
  | "ConsistentPrefix";

/**
 * Contains response data for the get operation.
 */
export type DatabaseAccountsGetResponse = DatabaseAccountGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountGetResults;
  };
};

/**
 * Contains response data for the update operation.
 */
export type DatabaseAccountsUpdateResponse = DatabaseAccountGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountGetResults;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseAccountsCreateOrUpdateResponse = DatabaseAccountGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountGetResults;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DatabaseAccountsListResponse = DatabaseAccountsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountsListResult;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DatabaseAccountsListByResourceGroupResponse = DatabaseAccountsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountsListResult;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type DatabaseAccountsListKeysResponse = DatabaseAccountListKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountListKeysResult;
  };
};

/**
 * Contains response data for the listConnectionStrings operation.
 */
export type DatabaseAccountsListConnectionStringsResponse = DatabaseAccountListConnectionStringsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountListConnectionStringsResult;
  };
};

/**
 * Contains response data for the getReadOnlyKeys operation.
 */
export type DatabaseAccountsGetReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountListReadOnlyKeysResult;
  };
};

/**
 * Contains response data for the listReadOnlyKeys operation.
 */
export type DatabaseAccountsListReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseAccountListReadOnlyKeysResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseAccountsListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricListResult;
  };
};

/**
 * Optional parameters.
 */
export interface DatabaseAccountsListUsagesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * Contains response data for the listUsages operation.
 */
export type DatabaseAccountsListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsagesResult;
  };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type DatabaseAccountsListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricDefinitionsListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricListResult;
  };
};

/**
 * Optional parameters.
 */
export interface DatabaseListUsagesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * Contains response data for the listUsages operation.
 */
export type DatabaseListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsagesResult;
  };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type DatabaseListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricDefinitionsListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricListResult;
  };
};

/**
 * Optional parameters.
 */
export interface CollectionListUsagesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * Contains response data for the listUsages operation.
 */
export type CollectionListUsagesResponse = UsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: UsagesResult;
  };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type CollectionListMetricDefinitionsResponse = MetricDefinitionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricDefinitionsListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionRegionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabaseAccountRegionListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MetricListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileSourceTargetListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PercentileMetricListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileTargetListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PercentileMetricListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PercentileListMetricsResponse = PercentileMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PercentileMetricListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionPartitionRegionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartitionMetricListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type CollectionPartitionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartitionMetricListResult;
  };
};

/**
 * Optional parameters.
 */
export interface CollectionPartitionListUsagesOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
   */
  filter?: string;
}

/**
 * Contains response data for the listUsages operation.
 */
export type CollectionPartitionListUsagesResponse = PartitionUsagesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartitionUsagesResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PartitionKeyRangeIdListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartitionMetricListResult;
  };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type PartitionKeyRangeIdRegionListMetricsResponse = PartitionMetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PartitionMetricListResult;
  };
};

/**
 * Contains response data for the listSqlDatabases operation.
 */
export type SqlResourcesListSqlDatabasesResponse = SqlDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlDatabaseListResult;
  };
};

/**
 * Contains response data for the getSqlDatabase operation.
 */
export type SqlResourcesGetSqlDatabaseResponse = SqlDatabaseGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlDatabaseGetResults;
  };
};

/**
 * Contains response data for the createUpdateSqlDatabase operation.
 */
export type SqlResourcesCreateUpdateSqlDatabaseResponse = SqlDatabaseGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlDatabaseGetResults;
  };
};

/**
 * Contains response data for the getSqlDatabaseThroughput operation.
 */
export type SqlResourcesGetSqlDatabaseThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateSqlDatabaseThroughput operation.
 */
export type SqlResourcesUpdateSqlDatabaseThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listSqlContainers operation.
 */
export type SqlResourcesListSqlContainersResponse = SqlContainerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlContainerListResult;
  };
};

/**
 * Contains response data for the getSqlContainer operation.
 */
export type SqlResourcesGetSqlContainerResponse = SqlContainerGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlContainerGetResults;
  };
};

/**
 * Contains response data for the createUpdateSqlContainer operation.
 */
export type SqlResourcesCreateUpdateSqlContainerResponse = SqlContainerGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlContainerGetResults;
  };
};

/**
 * Contains response data for the getSqlContainerThroughput operation.
 */
export type SqlResourcesGetSqlContainerThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateSqlContainerThroughput operation.
 */
export type SqlResourcesUpdateSqlContainerThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listSqlStoredProcedures operation.
 */
export type SqlResourcesListSqlStoredProceduresResponse = SqlStoredProcedureListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlStoredProcedureListResult;
  };
};

/**
 * Contains response data for the getSqlStoredProcedure operation.
 */
export type SqlResourcesGetSqlStoredProcedureResponse = SqlStoredProcedureGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlStoredProcedureGetResults;
  };
};

/**
 * Contains response data for the createUpdateSqlStoredProcedure operation.
 */
export type SqlResourcesCreateUpdateSqlStoredProcedureResponse = SqlStoredProcedureGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlStoredProcedureGetResults;
  };
};

/**
 * Contains response data for the listSqlUserDefinedFunctions operation.
 */
export type SqlResourcesListSqlUserDefinedFunctionsResponse = SqlUserDefinedFunctionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlUserDefinedFunctionListResult;
  };
};

/**
 * Contains response data for the getSqlUserDefinedFunction operation.
 */
export type SqlResourcesGetSqlUserDefinedFunctionResponse = SqlUserDefinedFunctionGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlUserDefinedFunctionGetResults;
  };
};

/**
 * Contains response data for the createUpdateSqlUserDefinedFunction operation.
 */
export type SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse = SqlUserDefinedFunctionGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlUserDefinedFunctionGetResults;
  };
};

/**
 * Contains response data for the listSqlTriggers operation.
 */
export type SqlResourcesListSqlTriggersResponse = SqlTriggerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlTriggerListResult;
  };
};

/**
 * Contains response data for the getSqlTrigger operation.
 */
export type SqlResourcesGetSqlTriggerResponse = SqlTriggerGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlTriggerGetResults;
  };
};

/**
 * Contains response data for the createUpdateSqlTrigger operation.
 */
export type SqlResourcesCreateUpdateSqlTriggerResponse = SqlTriggerGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SqlTriggerGetResults;
  };
};

/**
 * Contains response data for the listMongoDBDatabases operation.
 */
export type MongoDBResourcesListMongoDBDatabasesResponse = MongoDBDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MongoDBDatabaseListResult;
  };
};

/**
 * Contains response data for the getMongoDBDatabase operation.
 */
export type MongoDBResourcesGetMongoDBDatabaseResponse = MongoDBDatabaseGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MongoDBDatabaseGetResults;
  };
};

/**
 * Contains response data for the createUpdateMongoDBDatabase operation.
 */
export type MongoDBResourcesCreateUpdateMongoDBDatabaseResponse = MongoDBDatabaseGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MongoDBDatabaseGetResults;
  };
};

/**
 * Contains response data for the getMongoDBDatabaseThroughput operation.
 */
export type MongoDBResourcesGetMongoDBDatabaseThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateMongoDBDatabaseThroughput operation.
 */
export type MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listMongoDBCollections operation.
 */
export type MongoDBResourcesListMongoDBCollectionsResponse = MongoDBCollectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MongoDBCollectionListResult;
  };
};

/**
 * Contains response data for the getMongoDBCollection operation.
 */
export type MongoDBResourcesGetMongoDBCollectionResponse = MongoDBCollectionGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MongoDBCollectionGetResults;
  };
};

/**
 * Contains response data for the createUpdateMongoDBCollection operation.
 */
export type MongoDBResourcesCreateUpdateMongoDBCollectionResponse = MongoDBCollectionGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MongoDBCollectionGetResults;
  };
};

/**
 * Contains response data for the getMongoDBCollectionThroughput operation.
 */
export type MongoDBResourcesGetMongoDBCollectionThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateMongoDBCollectionThroughput operation.
 */
export type MongoDBResourcesUpdateMongoDBCollectionThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listTables operation.
 */
export type TableResourcesListTablesResponse = TableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TableListResult;
  };
};

/**
 * Contains response data for the getTable operation.
 */
export type TableResourcesGetTableResponse = TableGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TableGetResults;
  };
};

/**
 * Contains response data for the createUpdateTable operation.
 */
export type TableResourcesCreateUpdateTableResponse = TableGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TableGetResults;
  };
};

/**
 * Contains response data for the getTableThroughput operation.
 */
export type TableResourcesGetTableThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateTableThroughput operation.
 */
export type TableResourcesUpdateTableThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listCassandraKeyspaces operation.
 */
export type CassandraResourcesListCassandraKeyspacesResponse = CassandraKeyspaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CassandraKeyspaceListResult;
  };
};

/**
 * Contains response data for the getCassandraKeyspace operation.
 */
export type CassandraResourcesGetCassandraKeyspaceResponse = CassandraKeyspaceGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CassandraKeyspaceGetResults;
  };
};

/**
 * Contains response data for the createUpdateCassandraKeyspace operation.
 */
export type CassandraResourcesCreateUpdateCassandraKeyspaceResponse = CassandraKeyspaceGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CassandraKeyspaceGetResults;
  };
};

/**
 * Contains response data for the getCassandraKeyspaceThroughput operation.
 */
export type CassandraResourcesGetCassandraKeyspaceThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateCassandraKeyspaceThroughput operation.
 */
export type CassandraResourcesUpdateCassandraKeyspaceThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listCassandraTables operation.
 */
export type CassandraResourcesListCassandraTablesResponse = CassandraTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CassandraTableListResult;
  };
};

/**
 * Contains response data for the getCassandraTable operation.
 */
export type CassandraResourcesGetCassandraTableResponse = CassandraTableGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CassandraTableGetResults;
  };
};

/**
 * Contains response data for the createUpdateCassandraTable operation.
 */
export type CassandraResourcesCreateUpdateCassandraTableResponse = CassandraTableGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CassandraTableGetResults;
  };
};

/**
 * Contains response data for the getCassandraTableThroughput operation.
 */
export type CassandraResourcesGetCassandraTableThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateCassandraTableThroughput operation.
 */
export type CassandraResourcesUpdateCassandraTableThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listGremlinDatabases operation.
 */
export type GremlinResourcesListGremlinDatabasesResponse = GremlinDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GremlinDatabaseListResult;
  };
};

/**
 * Contains response data for the getGremlinDatabase operation.
 */
export type GremlinResourcesGetGremlinDatabaseResponse = GremlinDatabaseGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GremlinDatabaseGetResults;
  };
};

/**
 * Contains response data for the createUpdateGremlinDatabase operation.
 */
export type GremlinResourcesCreateUpdateGremlinDatabaseResponse = GremlinDatabaseGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GremlinDatabaseGetResults;
  };
};

/**
 * Contains response data for the getGremlinDatabaseThroughput operation.
 */
export type GremlinResourcesGetGremlinDatabaseThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateGremlinDatabaseThroughput operation.
 */
export type GremlinResourcesUpdateGremlinDatabaseThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listGremlinGraphs operation.
 */
export type GremlinResourcesListGremlinGraphsResponse = GremlinGraphListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GremlinGraphListResult;
  };
};

/**
 * Contains response data for the getGremlinGraph operation.
 */
export type GremlinResourcesGetGremlinGraphResponse = GremlinGraphGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GremlinGraphGetResults;
  };
};

/**
 * Contains response data for the createUpdateGremlinGraph operation.
 */
export type GremlinResourcesCreateUpdateGremlinGraphResponse = GremlinGraphGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: GremlinGraphGetResults;
  };
};

/**
 * Contains response data for the getGremlinGraphThroughput operation.
 */
export type GremlinResourcesGetGremlinGraphThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the updateGremlinGraphThroughput operation.
 */
export type GremlinResourcesUpdateGremlinGraphThroughputResponse = ThroughputSettingsGetResults & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ThroughputSettingsGetResults;
  };
};

/**
 * Contains response data for the listByDatabaseAccount operation.
 */
export type NotebookWorkspacesListByDatabaseAccountResponse = NotebookWorkspaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotebookWorkspaceListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NotebookWorkspacesGetResponse = NotebookWorkspace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotebookWorkspace;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NotebookWorkspacesCreateOrUpdateResponse = NotebookWorkspace & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotebookWorkspace;
  };
};

/**
 * Contains response data for the listConnectionInfo operation.
 */
export type NotebookWorkspacesListConnectionInfoResponse = NotebookWorkspaceConnectionInfoResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NotebookWorkspaceConnectionInfoResult;
  };
};

/**
 * Contains response data for the listByDatabaseAccount operation.
 */
export type PrivateLinkResourcesListByDatabaseAccountResponse = PrivateLinkResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResourceListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateLinkResourcesGetResponse = PrivateLinkResource & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResource;
  };
};

/**
 * Contains response data for the listByDatabaseAccount operation.
 */
export type PrivateEndpointConnectionsListByDatabaseAccountResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionListResult;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnectionAutoGenerated & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionAutoGenerated;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnectionAutoGenerated & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionAutoGenerated;
  };
};

/**
 * Optional parameters.
 */
export interface CosmosDBManagementClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
