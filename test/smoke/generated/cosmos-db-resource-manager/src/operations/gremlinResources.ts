/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { GremlinResources } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClientContext } from "../cosmosDBManagementClientContext";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  GremlinDatabaseGetResults,
  GremlinResourcesListGremlinDatabasesOptionalParams,
  GremlinGraphGetResults,
  GremlinResourcesListGremlinGraphsOptionalParams,
  GremlinResourcesListGremlinDatabasesResponse,
  GremlinResourcesGetGremlinDatabaseOptionalParams,
  GremlinResourcesGetGremlinDatabaseResponse,
  GremlinDatabaseCreateUpdateParameters,
  GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams,
  GremlinResourcesCreateUpdateGremlinDatabaseResponse,
  GremlinResourcesDeleteGremlinDatabaseOptionalParams,
  GremlinResourcesGetGremlinDatabaseThroughputOptionalParams,
  GremlinResourcesGetGremlinDatabaseThroughputResponse,
  ThroughputSettingsUpdateParameters,
  GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams,
  GremlinResourcesUpdateGremlinDatabaseThroughputResponse,
  GremlinResourcesListGremlinGraphsResponse,
  GremlinResourcesGetGremlinGraphOptionalParams,
  GremlinResourcesGetGremlinGraphResponse,
  GremlinGraphCreateUpdateParameters,
  GremlinResourcesCreateUpdateGremlinGraphOptionalParams,
  GremlinResourcesCreateUpdateGremlinGraphResponse,
  GremlinResourcesDeleteGremlinGraphOptionalParams,
  GremlinResourcesGetGremlinGraphThroughputOptionalParams,
  GremlinResourcesGetGremlinGraphThroughputResponse,
  GremlinResourcesUpdateGremlinGraphThroughputOptionalParams,
  GremlinResourcesUpdateGremlinGraphThroughputResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a GremlinResources. */
export class GremlinResourcesImpl implements GremlinResources {
  private readonly client: CosmosDBManagementClientContext;

  /**
   * Initialize a new instance of the class GremlinResources class.
   * @param client Reference to the service client
   */
  constructor(client: CosmosDBManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  public listGremlinDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: GremlinResourcesListGremlinDatabasesOptionalParams
  ): PagedAsyncIterableIterator<GremlinDatabaseGetResults> {
    const iter = this.listGremlinDatabasesPagingAll(
      resourceGroupName,
      accountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listGremlinDatabasesPagingPage(
          resourceGroupName,
          accountName,
          options
        );
      }
    };
  }

  private async *listGremlinDatabasesPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: GremlinResourcesListGremlinDatabasesOptionalParams
  ): AsyncIterableIterator<GremlinDatabaseGetResults[]> {
    let result = await this._listGremlinDatabases(
      resourceGroupName,
      accountName,
      options
    );
    yield result.value || [];
  }

  private async *listGremlinDatabasesPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: GremlinResourcesListGremlinDatabasesOptionalParams
  ): AsyncIterableIterator<GremlinDatabaseGetResults> {
    for await (const page of this.listGremlinDatabasesPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  public listGremlinGraphs(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesListGremlinGraphsOptionalParams
  ): PagedAsyncIterableIterator<GremlinGraphGetResults> {
    const iter = this.listGremlinGraphsPagingAll(
      resourceGroupName,
      accountName,
      databaseName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listGremlinGraphsPagingPage(
          resourceGroupName,
          accountName,
          databaseName,
          options
        );
      }
    };
  }

  private async *listGremlinGraphsPagingPage(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesListGremlinGraphsOptionalParams
  ): AsyncIterableIterator<GremlinGraphGetResults[]> {
    let result = await this._listGremlinGraphs(
      resourceGroupName,
      accountName,
      databaseName,
      options
    );
    yield result.value || [];
  }

  private async *listGremlinGraphsPagingAll(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesListGremlinGraphsOptionalParams
  ): AsyncIterableIterator<GremlinGraphGetResults> {
    for await (const page of this.listGremlinGraphsPagingPage(
      resourceGroupName,
      accountName,
      databaseName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  private _listGremlinDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: GremlinResourcesListGremlinDatabasesOptionalParams
  ): Promise<GremlinResourcesListGremlinDatabasesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listGremlinDatabasesOperationSpec
    ) as Promise<GremlinResourcesListGremlinDatabasesResponse>;
  }

  /**
   * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided
   * name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getGremlinDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesGetGremlinDatabaseOptionalParams
  ): Promise<GremlinResourcesGetGremlinDatabaseResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getGremlinDatabaseOperationSpec
    ) as Promise<GremlinResourcesGetGremlinDatabaseResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin
   *                                              database.
   * @param options The options parameters.
   */
  async beginCreateUpdateGremlinDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateGremlinDatabaseParameters: GremlinDatabaseCreateUpdateParameters,
    options?: GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<GremlinResourcesCreateUpdateGremlinDatabaseResponse>,
      GremlinResourcesCreateUpdateGremlinDatabaseResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      createUpdateGremlinDatabaseParameters,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        GremlinResourcesCreateUpdateGremlinDatabaseResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      createUpdateGremlinDatabaseOperationSpec,
      sendOperation
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  async beginDeleteGremlinDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesDeleteGremlinDatabaseOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteGremlinDatabaseOperationSpec,
      sendOperation
    );
  }

  /**
   * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account
   * with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getGremlinDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesGetGremlinDatabaseThroughputOptionalParams
  ): Promise<GremlinResourcesGetGremlinDatabaseThroughputResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getGremlinDatabaseThroughputOperationSpec
    ) as Promise<GremlinResourcesGetGremlinDatabaseThroughputResponse>;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Gremlin database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   Gremlin database.
   * @param options The options parameters.
   */
  async beginUpdateGremlinDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GremlinResourcesUpdateGremlinDatabaseThroughputResponse
      >,
      GremlinResourcesUpdateGremlinDatabaseThroughputResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      updateThroughputParameters,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        GremlinResourcesUpdateGremlinDatabaseThroughputResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      updateGremlinDatabaseThroughputOperationSpec,
      sendOperation
    );
  }

  /**
   * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  private _listGremlinGraphs(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: GremlinResourcesListGremlinGraphsOptionalParams
  ): Promise<GremlinResourcesListGremlinGraphsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listGremlinGraphsOperationSpec
    ) as Promise<GremlinResourcesListGremlinGraphsResponse>;
  }

  /**
   * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  getGremlinGraph(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesGetGremlinGraphOptionalParams
  ): Promise<GremlinResourcesGetGremlinGraphResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getGremlinGraphOperationSpec
    ) as Promise<GremlinResourcesGetGremlinGraphResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB Gremlin graph
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.
   * @param options The options parameters.
   */
  async beginCreateUpdateGremlinGraph(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    createUpdateGremlinGraphParameters: GremlinGraphCreateUpdateParameters,
    options?: GremlinResourcesCreateUpdateGremlinGraphOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<GremlinResourcesCreateUpdateGremlinGraphResponse>,
      GremlinResourcesCreateUpdateGremlinGraphResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      createUpdateGremlinGraphParameters,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        GremlinResourcesCreateUpdateGremlinGraphResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      createUpdateGremlinGraphOperationSpec,
      sendOperation
    );
  }

  /**
   * Deletes an existing Azure Cosmos DB Gremlin graph.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  async beginDeleteGremlinGraph(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesDeleteGremlinGraphOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      deleteGremlinGraphOperationSpec,
      sendOperation
    );
  }

  /**
   * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the
   * provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param options The options parameters.
   */
  getGremlinGraphThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    options?: GremlinResourcesGetGremlinGraphThroughputOptionalParams
  ): Promise<GremlinResourcesGetGremlinGraphThroughputResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getGremlinGraphThroughputOperationSpec
    ) as Promise<GremlinResourcesGetGremlinGraphThroughputResponse>;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB Gremlin graph
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param graphName Cosmos DB graph name.
   * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
   *                                   Gremlin graph.
   * @param options The options parameters.
   */
  async beginUpdateGremlinGraphThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    graphName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: GremlinResourcesUpdateGremlinGraphThroughputOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<GremlinResourcesUpdateGremlinGraphThroughputResponse>,
      GremlinResourcesUpdateGremlinGraphThroughputResponse
    >
  > {
    const operationArguments: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      graphName,
      updateThroughputParameters,
      options: this.getOperationOptions(options, "undefined")
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) => {
      return this.client.sendOperationRequest(args, spec) as Promise<
        GremlinResourcesUpdateGremlinGraphThroughputResponse
      >;
    };

    return new LROPoller(
      { intervalInMs: options?.updateIntervalInMs },
      operationArguments,
      updateGremlinGraphThroughputOperationSpec,
      sendOperation
    );
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listGremlinDatabasesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabaseListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getGremlinDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateGremlinDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    },
    201: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    },
    202: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    },
    204: {
      bodyMapper: Mappers.GremlinDatabaseGetResults
    }
  },
  requestBody: Parameters.createUpdateGremlinDatabaseParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteGremlinDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  serializer
};
const getGremlinDatabaseThroughputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateGremlinDatabaseThroughputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  requestBody: Parameters.updateThroughputParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listGremlinGraphsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinGraphListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getGremlinGraphOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinGraphGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.graphName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateGremlinGraphOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GremlinGraphGetResults
    },
    201: {
      bodyMapper: Mappers.GremlinGraphGetResults
    },
    202: {
      bodyMapper: Mappers.GremlinGraphGetResults
    },
    204: {
      bodyMapper: Mappers.GremlinGraphGetResults
    }
  },
  requestBody: Parameters.createUpdateGremlinGraphParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.graphName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteGremlinGraphOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.graphName
  ],
  serializer
};
const getGremlinGraphThroughputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.graphName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateGremlinGraphThroughputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  requestBody: Parameters.updateThroughputParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.graphName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
