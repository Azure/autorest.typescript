/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CosmosDBManagementClient } from "../cosmosDBManagementClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  SqlResourcesListSqlDatabasesResponse,
  SqlResourcesGetSqlDatabaseResponse,
  SqlDatabaseCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlDatabaseResponse,
  SqlResourcesGetSqlDatabaseThroughputResponse,
  ThroughputSettingsUpdateParameters,
  SqlResourcesUpdateSqlDatabaseThroughputResponse,
  SqlResourcesListSqlContainersResponse,
  SqlResourcesGetSqlContainerResponse,
  SqlContainerCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlContainerResponse,
  SqlResourcesGetSqlContainerThroughputResponse,
  SqlResourcesUpdateSqlContainerThroughputResponse,
  SqlResourcesListSqlStoredProceduresResponse,
  SqlResourcesGetSqlStoredProcedureResponse,
  SqlStoredProcedureCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlStoredProcedureResponse,
  SqlResourcesListSqlUserDefinedFunctionsResponse,
  SqlResourcesGetSqlUserDefinedFunctionResponse,
  SqlUserDefinedFunctionCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse,
  SqlResourcesListSqlTriggersResponse,
  SqlResourcesGetSqlTriggerResponse,
  SqlTriggerCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlTriggerResponse
} from "../models";

/**
 * Class representing a SqlResources.
 */
export class SqlResources {
  private readonly client: CosmosDBManagementClient;

  /**
   * Initialize a new instance of the class SqlResources class.
   * @param client Reference to the service client
   */
  constructor(client: CosmosDBManagementClient) {
    this.client = client;
  }

  /**
   * Lists the SQL databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listSqlDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesListSqlDatabasesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options: operationOptions },
      listSqlDatabasesOperationSpec
    ) as Promise<SqlResourcesListSqlDatabasesResponse>;
  }

  /**
   * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesGetSqlDatabaseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options: operationOptions
      },
      getSqlDatabaseOperationSpec
    ) as Promise<SqlResourcesGetSqlDatabaseResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
   * @param options The options parameters.
   */
  async createUpdateSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SqlResourcesCreateUpdateSqlDatabaseResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      createUpdateSqlDatabaseParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlResourcesCreateUpdateSqlDatabaseResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createUpdateSqlDatabaseOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createUpdateSqlDatabaseOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  async deleteSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteSqlDatabaseOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteSqlDatabaseOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with
   * the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesGetSqlDatabaseThroughputResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options: operationOptions
      },
      getSqlDatabaseThroughputOperationSpec
    ) as Promise<SqlResourcesGetSqlDatabaseThroughputResponse>;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
   *                                   SQL database.
   * @param options The options parameters.
   */
  async updateSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SqlResourcesUpdateSqlDatabaseThroughputResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      updateThroughputParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlResourcesUpdateSqlDatabaseThroughputResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateSqlDatabaseThroughputOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateSqlDatabaseThroughputOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Lists the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  listSqlContainers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesListSqlContainersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        options: operationOptions
      },
      listSqlContainersOperationSpec
    ) as Promise<SqlResourcesListSqlContainersResponse>;
  }

  /**
   * Gets the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  getSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesGetSqlContainerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options: operationOptions
      },
      getSqlContainerOperationSpec
    ) as Promise<SqlResourcesGetSqlContainerResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container.
   * @param options The options parameters.
   */
  async createUpdateSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SqlResourcesCreateUpdateSqlContainerResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      createUpdateSqlContainerParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlResourcesCreateUpdateSqlContainerResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createUpdateSqlContainerOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createUpdateSqlContainerOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL container.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  async deleteSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteSqlContainerOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteSqlContainerOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  getSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesGetSqlContainerThroughputResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options: operationOptions
      },
      getSqlContainerThroughputOperationSpec
    ) as Promise<SqlResourcesGetSqlContainerThroughputResponse>;
  }

  /**
   * Update RUs per second of an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
   *                                   SQL container.
   * @param options The options parameters.
   */
  async updateSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SqlResourcesUpdateSqlContainerThroughputResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      updateThroughputParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlResourcesUpdateSqlContainerThroughputResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      updateSqlContainerThroughputOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updateSqlContainerThroughputOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  listSqlStoredProcedures(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesListSqlStoredProceduresResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options: operationOptions
      },
      listSqlStoredProceduresOperationSpec
    ) as Promise<SqlResourcesListSqlStoredProceduresResponse>;
  }

  /**
   * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param options The options parameters.
   */
  getSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesGetSqlStoredProcedureResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        storedProcedureName,
        options: operationOptions
      },
      getSqlStoredProcedureOperationSpec
    ) as Promise<SqlResourcesGetSqlStoredProcedureResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL storedProcedure
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL
   *                                                 storedProcedure.
   * @param options The options parameters.
   */
  async createUpdateSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    createUpdateSqlStoredProcedureParameters: SqlStoredProcedureCreateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SqlResourcesCreateUpdateSqlStoredProcedureResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      storedProcedureName,
      createUpdateSqlStoredProcedureParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlResourcesCreateUpdateSqlStoredProcedureResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createUpdateSqlStoredProcedureOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createUpdateSqlStoredProcedureOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL storedProcedure.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param options The options parameters.
   */
  async deleteSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      storedProcedureName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteSqlStoredProcedureOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteSqlStoredProcedureOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  listSqlUserDefinedFunctions(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesListSqlUserDefinedFunctionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options: operationOptions
      },
      listSqlUserDefinedFunctionsOperationSpec
    ) as Promise<SqlResourcesListSqlUserDefinedFunctionsResponse>;
  }

  /**
   * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param options The options parameters.
   */
  getSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesGetSqlUserDefinedFunctionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        userDefinedFunctionName,
        options: operationOptions
      },
      getSqlUserDefinedFunctionOperationSpec
    ) as Promise<SqlResourcesGetSqlUserDefinedFunctionResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL userDefinedFunction
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL
   *                                                     userDefinedFunction.
   * @param options The options parameters.
   */
  async createUpdateSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    createUpdateSqlUserDefinedFunctionParameters: SqlUserDefinedFunctionCreateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<
    LROPoller<SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>
  > {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      userDefinedFunctionName,
      createUpdateSqlUserDefinedFunctionParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createUpdateSqlUserDefinedFunctionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createUpdateSqlUserDefinedFunctionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param options The options parameters.
   */
  async deleteSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      userDefinedFunctionName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteSqlUserDefinedFunctionOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteSqlUserDefinedFunctionOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Lists the SQL trigger under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  listSqlTriggers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesListSqlTriggersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        options: operationOptions
      },
      listSqlTriggersOperationSpec
    ) as Promise<SqlResourcesListSqlTriggersResponse>;
  }

  /**
   * Gets the SQL trigger under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param options The options parameters.
   */
  getSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<SqlResourcesGetSqlTriggerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        databaseName,
        containerName,
        triggerName,
        options: operationOptions
      },
      getSqlTriggerOperationSpec
    ) as Promise<SqlResourcesGetSqlTriggerResponse>;
  }

  /**
   * Create or update an Azure Cosmos DB SQL trigger
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.
   * @param options The options parameters.
   */
  async createUpdateSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    createUpdateSqlTriggerParameters: SqlTriggerCreateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<SqlResourcesCreateUpdateSqlTriggerResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      triggerName,
      createUpdateSqlTriggerParameters,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        SqlResourcesCreateUpdateSqlTriggerResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      createUpdateSqlTriggerOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: createUpdateSqlTriggerOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Deletes an existing Azure Cosmos DB SQL trigger.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param options The options parameters.
   */
  async deleteSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      accountName,
      databaseName,
      containerName,
      triggerName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteSqlTriggerOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteSqlTriggerOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listSqlDatabasesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabaseListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSqlDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabaseGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateSqlDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlDatabaseGetResults
    },
    201: {
      bodyMapper: Mappers.SqlDatabaseGetResults
    },
    202: {
      bodyMapper: Mappers.SqlDatabaseGetResults
    },
    204: {
      bodyMapper: Mappers.SqlDatabaseGetResults
    }
  },
  requestBody: Parameters.createUpdateSqlDatabaseParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const deleteSqlDatabaseOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  serializer
};
const getSqlDatabaseThroughputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSqlDatabaseThroughputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  requestBody: Parameters.updateThroughputParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const listSqlContainersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlContainerListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSqlContainerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlContainerGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateSqlContainerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlContainerGetResults
    },
    201: {
      bodyMapper: Mappers.SqlContainerGetResults
    },
    202: {
      bodyMapper: Mappers.SqlContainerGetResults
    },
    204: {
      bodyMapper: Mappers.SqlContainerGetResults
    }
  },
  requestBody: Parameters.createUpdateSqlContainerParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const deleteSqlContainerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  serializer
};
const getSqlContainerThroughputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSqlContainerThroughputOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    201: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    202: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    },
    204: {
      bodyMapper: Mappers.ThroughputSettingsGetResults
    }
  },
  requestBody: Parameters.updateThroughputParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const listSqlStoredProceduresOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlStoredProcedureListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSqlStoredProcedureOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlStoredProcedureGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.storedProcedureName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateSqlStoredProcedureOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlStoredProcedureGetResults
    },
    201: {
      bodyMapper: Mappers.SqlStoredProcedureGetResults
    },
    202: {
      bodyMapper: Mappers.SqlStoredProcedureGetResults
    },
    204: {
      bodyMapper: Mappers.SqlStoredProcedureGetResults
    }
  },
  requestBody: Parameters.createUpdateSqlStoredProcedureParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.storedProcedureName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const deleteSqlStoredProcedureOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.storedProcedureName
  ],
  serializer
};
const listSqlUserDefinedFunctionsOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlUserDefinedFunctionListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSqlUserDefinedFunctionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.userDefinedFunctionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateSqlUserDefinedFunctionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults
    },
    201: {
      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults
    },
    202: {
      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults
    },
    204: {
      bodyMapper: Mappers.SqlUserDefinedFunctionGetResults
    }
  },
  requestBody: Parameters.createUpdateSqlUserDefinedFunctionParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.userDefinedFunctionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const deleteSqlUserDefinedFunctionOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.userDefinedFunctionName
  ],
  serializer
};
const listSqlTriggersOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlTriggerListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSqlTriggerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlTriggerGetResults
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.triggerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createUpdateSqlTriggerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlTriggerGetResults
    },
    201: {
      bodyMapper: Mappers.SqlTriggerGetResults
    },
    202: {
      bodyMapper: Mappers.SqlTriggerGetResults
    },
    204: {
      bodyMapper: Mappers.SqlTriggerGetResults
    }
  },
  requestBody: Parameters.createUpdateSqlTriggerParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.triggerName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const deleteSqlTriggerOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.databaseName,
    Parameters.containerName,
    Parameters.triggerName
  ],
  serializer
};
