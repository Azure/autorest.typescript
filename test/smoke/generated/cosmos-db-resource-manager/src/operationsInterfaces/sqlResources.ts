/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  SqlDatabaseGetResults,
  SqlResourcesListSqlDatabasesOptionalParams,
  SqlContainerGetResults,
  SqlResourcesListSqlContainersOptionalParams,
  SqlStoredProcedureGetResults,
  SqlResourcesListSqlStoredProceduresOptionalParams,
  SqlUserDefinedFunctionGetResults,
  SqlResourcesListSqlUserDefinedFunctionsOptionalParams,
  SqlTriggerGetResults,
  SqlResourcesListSqlTriggersOptionalParams,
  SqlResourcesGetSqlDatabaseOptionalParams,
  SqlResourcesGetSqlDatabaseResponse,
  SqlDatabaseCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlDatabaseOptionalParams,
  SqlResourcesCreateUpdateSqlDatabaseResponse,
  SqlResourcesDeleteSqlDatabaseOptionalParams,
  SqlResourcesGetSqlDatabaseThroughputOptionalParams,
  SqlResourcesGetSqlDatabaseThroughputResponse,
  ThroughputSettingsUpdateParameters,
  SqlResourcesUpdateSqlDatabaseThroughputOptionalParams,
  SqlResourcesUpdateSqlDatabaseThroughputResponse,
  SqlResourcesGetSqlContainerOptionalParams,
  SqlResourcesGetSqlContainerResponse,
  SqlContainerCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlContainerOptionalParams,
  SqlResourcesCreateUpdateSqlContainerResponse,
  SqlResourcesDeleteSqlContainerOptionalParams,
  SqlResourcesGetSqlContainerThroughputOptionalParams,
  SqlResourcesGetSqlContainerThroughputResponse,
  SqlResourcesUpdateSqlContainerThroughputOptionalParams,
  SqlResourcesUpdateSqlContainerThroughputResponse,
  SqlResourcesGetSqlStoredProcedureOptionalParams,
  SqlResourcesGetSqlStoredProcedureResponse,
  SqlStoredProcedureCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams,
  SqlResourcesCreateUpdateSqlStoredProcedureResponse,
  SqlResourcesDeleteSqlStoredProcedureOptionalParams,
  SqlResourcesGetSqlUserDefinedFunctionOptionalParams,
  SqlResourcesGetSqlUserDefinedFunctionResponse,
  SqlUserDefinedFunctionCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams,
  SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse,
  SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams,
  SqlResourcesGetSqlTriggerOptionalParams,
  SqlResourcesGetSqlTriggerResponse,
  SqlTriggerCreateUpdateParameters,
  SqlResourcesCreateUpdateSqlTriggerOptionalParams,
  SqlResourcesCreateUpdateSqlTriggerResponse,
  SqlResourcesDeleteSqlTriggerOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SqlResources. */
export interface SqlResources {
  /**
   * Lists the SQL databases under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listSqlDatabases(
    resourceGroupName: string,
    accountName: string,
    options?: SqlResourcesListSqlDatabasesOptionalParams
  ): PagedAsyncIterableIterator<SqlDatabaseGetResults>;
  /**
   * Lists the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  listSqlContainers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: SqlResourcesListSqlContainersOptionalParams
  ): PagedAsyncIterableIterator<SqlContainerGetResults>;
  /**
   * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  listSqlStoredProcedures(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: SqlResourcesListSqlStoredProceduresOptionalParams
  ): PagedAsyncIterableIterator<SqlStoredProcedureGetResults>;
  /**
   * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  listSqlUserDefinedFunctions(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: SqlResourcesListSqlUserDefinedFunctionsOptionalParams
  ): PagedAsyncIterableIterator<SqlUserDefinedFunctionGetResults>;
  /**
   * Lists the SQL trigger under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  listSqlTriggers(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: SqlResourcesListSqlTriggersOptionalParams
  ): PagedAsyncIterableIterator<SqlTriggerGetResults>;
  /**
   * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: SqlResourcesGetSqlDatabaseOptionalParams
  ): Promise<SqlResourcesGetSqlDatabaseResponse>;
  /**
   * Create or update an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlDatabaseOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SqlResourcesCreateUpdateSqlDatabaseResponse>,
      SqlResourcesCreateUpdateSqlDatabaseResponse
    >
  >;
  /**
   * Create or update an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlDatabaseAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlDatabaseOptionalParams
  ): Promise<SqlResourcesCreateUpdateSqlDatabaseResponse>;
  /**
   * Deletes an existing Azure Cosmos DB SQL database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  beginDeleteSqlDatabase(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: SqlResourcesDeleteSqlDatabaseOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Deletes an existing Azure Cosmos DB SQL database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  beginDeleteSqlDatabaseAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: SqlResourcesDeleteSqlDatabaseOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with
   * the provided name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param options The options parameters.
   */
  getSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    options?: SqlResourcesGetSqlDatabaseThroughputOptionalParams
  ): Promise<SqlResourcesGetSqlDatabaseThroughputResponse>;
  /**
   * Update RUs per second of an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
   *                                   SQL database.
   * @param options The options parameters.
   */
  beginUpdateSqlDatabaseThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: SqlResourcesUpdateSqlDatabaseThroughputOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SqlResourcesUpdateSqlDatabaseThroughputResponse>,
      SqlResourcesUpdateSqlDatabaseThroughputResponse
    >
  >;
  /**
   * Update RUs per second of an Azure Cosmos DB SQL database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
   *                                   SQL database.
   * @param options The options parameters.
   */
  beginUpdateSqlDatabaseThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: SqlResourcesUpdateSqlDatabaseThroughputOptionalParams
  ): Promise<SqlResourcesUpdateSqlDatabaseThroughputResponse>;
  /**
   * Gets the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  getSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: SqlResourcesGetSqlContainerOptionalParams
  ): Promise<SqlResourcesGetSqlContainerResponse>;
  /**
   * Create or update an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlContainerOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SqlResourcesCreateUpdateSqlContainerResponse>,
      SqlResourcesCreateUpdateSqlContainerResponse
    >
  >;
  /**
   * Create or update an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlContainerAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlContainerOptionalParams
  ): Promise<SqlResourcesCreateUpdateSqlContainerResponse>;
  /**
   * Deletes an existing Azure Cosmos DB SQL container.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  beginDeleteSqlContainer(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: SqlResourcesDeleteSqlContainerOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Deletes an existing Azure Cosmos DB SQL container.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  beginDeleteSqlContainerAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: SqlResourcesDeleteSqlContainerOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param options The options parameters.
   */
  getSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    options?: SqlResourcesGetSqlContainerThroughputOptionalParams
  ): Promise<SqlResourcesGetSqlContainerThroughputResponse>;
  /**
   * Update RUs per second of an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
   *                                   SQL container.
   * @param options The options parameters.
   */
  beginUpdateSqlContainerThroughput(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: SqlResourcesUpdateSqlContainerThroughputOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SqlResourcesUpdateSqlContainerThroughputResponse>,
      SqlResourcesUpdateSqlContainerThroughputResponse
    >
  >;
  /**
   * Update RUs per second of an Azure Cosmos DB SQL container
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
   *                                   SQL container.
   * @param options The options parameters.
   */
  beginUpdateSqlContainerThroughputAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    updateThroughputParameters: ThroughputSettingsUpdateParameters,
    options?: SqlResourcesUpdateSqlContainerThroughputOptionalParams
  ): Promise<SqlResourcesUpdateSqlContainerThroughputResponse>;
  /**
   * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param options The options parameters.
   */
  getSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?: SqlResourcesGetSqlStoredProcedureOptionalParams
  ): Promise<SqlResourcesGetSqlStoredProcedureResponse>;
  /**
   * Create or update an Azure Cosmos DB SQL storedProcedure
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL
   *                                                 storedProcedure.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    createUpdateSqlStoredProcedureParameters: SqlStoredProcedureCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SqlResourcesCreateUpdateSqlStoredProcedureResponse>,
      SqlResourcesCreateUpdateSqlStoredProcedureResponse
    >
  >;
  /**
   * Create or update an Azure Cosmos DB SQL storedProcedure
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL
   *                                                 storedProcedure.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlStoredProcedureAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    createUpdateSqlStoredProcedureParameters: SqlStoredProcedureCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams
  ): Promise<SqlResourcesCreateUpdateSqlStoredProcedureResponse>;
  /**
   * Deletes an existing Azure Cosmos DB SQL storedProcedure.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param options The options parameters.
   */
  beginDeleteSqlStoredProcedure(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?: SqlResourcesDeleteSqlStoredProcedureOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Deletes an existing Azure Cosmos DB SQL storedProcedure.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param storedProcedureName Cosmos DB storedProcedure name.
   * @param options The options parameters.
   */
  beginDeleteSqlStoredProcedureAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    storedProcedureName: string,
    options?: SqlResourcesDeleteSqlStoredProcedureOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param options The options parameters.
   */
  getSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?: SqlResourcesGetSqlUserDefinedFunctionOptionalParams
  ): Promise<SqlResourcesGetSqlUserDefinedFunctionResponse>;
  /**
   * Create or update an Azure Cosmos DB SQL userDefinedFunction
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL
   *                                                     userDefinedFunction.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    createUpdateSqlUserDefinedFunctionParameters: SqlUserDefinedFunctionCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse
      >,
      SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse
    >
  >;
  /**
   * Create or update an Azure Cosmos DB SQL userDefinedFunction
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL
   *                                                     userDefinedFunction.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlUserDefinedFunctionAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    createUpdateSqlUserDefinedFunctionParameters: SqlUserDefinedFunctionCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams
  ): Promise<SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>;
  /**
   * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param options The options parameters.
   */
  beginDeleteSqlUserDefinedFunction(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?: SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
   * @param options The options parameters.
   */
  beginDeleteSqlUserDefinedFunctionAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    userDefinedFunctionName: string,
    options?: SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Gets the SQL trigger under an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param options The options parameters.
   */
  getSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: SqlResourcesGetSqlTriggerOptionalParams
  ): Promise<SqlResourcesGetSqlTriggerResponse>;
  /**
   * Create or update an Azure Cosmos DB SQL trigger
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    createUpdateSqlTriggerParameters: SqlTriggerCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlTriggerOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SqlResourcesCreateUpdateSqlTriggerResponse>,
      SqlResourcesCreateUpdateSqlTriggerResponse
    >
  >;
  /**
   * Create or update an Azure Cosmos DB SQL trigger
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.
   * @param options The options parameters.
   */
  beginCreateUpdateSqlTriggerAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    createUpdateSqlTriggerParameters: SqlTriggerCreateUpdateParameters,
    options?: SqlResourcesCreateUpdateSqlTriggerOptionalParams
  ): Promise<SqlResourcesCreateUpdateSqlTriggerResponse>;
  /**
   * Deletes an existing Azure Cosmos DB SQL trigger.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param options The options parameters.
   */
  beginDeleteSqlTrigger(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: SqlResourcesDeleteSqlTriggerOptionalParams
  ): Promise<
    PollerLike<PollOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Deletes an existing Azure Cosmos DB SQL trigger.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param databaseName Cosmos DB database name.
   * @param containerName Cosmos DB container name.
   * @param triggerName Cosmos DB trigger name.
   * @param options The options parameters.
   */
  beginDeleteSqlTriggerAndWait(
    resourceGroupName: string,
    accountName: string,
    databaseName: string,
    containerName: string,
    triggerName: string,
    options?: SqlResourcesDeleteSqlTriggerOptionalParams
  ): Promise<coreHttp.RestResponse>;
}
