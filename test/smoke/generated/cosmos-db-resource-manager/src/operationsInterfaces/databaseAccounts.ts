/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import { LROOperationState } from "../lro";
import { PollerLike } from "@azure/core-lro";
import {
  DatabaseAccountGetResults,
  Metric,
  Usage,
  DatabaseAccountsListUsagesOptionalParams,
  MetricDefinition,
  DatabaseAccountsGetResponse,
  DatabaseAccountUpdateParameters,
  DatabaseAccountsUpdateResponse,
  DatabaseAccountCreateUpdateParameters,
  DatabaseAccountsCreateOrUpdateResponse,
  FailoverPolicies,
  DatabaseAccountsListKeysResponse,
  DatabaseAccountsListConnectionStringsResponse,
  RegionForOnlineOffline,
  DatabaseAccountsGetReadOnlyKeysResponse,
  DatabaseAccountsListReadOnlyKeysResponse,
  DatabaseAccountRegenerateKeyParameters
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DatabaseAccounts. */
export interface DatabaseAccounts {
  /**
   * Lists all the Azure Cosmos DB database accounts available under the subscription.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<DatabaseAccountGetResults>;
  /**
   * Lists all the Azure Cosmos DB database accounts available under the given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<DatabaseAccountGetResults>;
  /**
   * Retrieves the metrics determined by the given filter for the given database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param filter An OData filter expression that describes a subset of metrics to return. The
   *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
   *               names), startTime, endTime, and timeGrain. The supported operator is eq.
   * @param options The options parameters.
   */
  listMetrics(
    resourceGroupName: string,
    accountName: string,
    filter: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<Metric>;
  /**
   * Retrieves the usages (most recent data) for the given database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listUsages(
    resourceGroupName: string,
    accountName: string,
    options?: DatabaseAccountsListUsagesOptionalParams
  ): PagedAsyncIterableIterator<Usage>;
  /**
   * Retrieves metric definitions for the given database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listMetricDefinitions(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<MetricDefinition>;
  /**
   * Retrieves the properties of an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DatabaseAccountsGetResponse>;
  /**
   * Updates the properties of an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param updateParameters The parameters to provide for the current database account.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    updateParameters: DatabaseAccountUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabaseAccountsUpdateResponse>,
      DatabaseAccountsUpdateResponse
    >
  >;
  /**
   * Creates or updates an Azure Cosmos DB database account. The "Update" method is preferred when
   * performing updates on an account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param createUpdateParameters The parameters to provide for the current database account.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    createUpdateParameters: DatabaseAccountCreateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<
      LROOperationState<DatabaseAccountsCreateOrUpdateResponse>,
      DatabaseAccountsCreateOrUpdateResponse
    >
  >;
  /**
   * Deletes an existing Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
   * indicates a write region. The maximum value for a failover priority = (total number of regions - 1).
   * Failover priority values must be unique for each of the regions in which the database account
   * exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param failoverParameters The new failover policies for the database account.
   * @param options The options parameters.
   */
  failoverPriorityChange(
    resourceGroupName: string,
    accountName: string,
    failoverParameters: FailoverPolicies,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Lists the access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DatabaseAccountsListKeysResponse>;
  /**
   * Lists the connection strings for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listConnectionStrings(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DatabaseAccountsListConnectionStringsResponse>;
  /**
   * Offline the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOffline Cosmos DB region to offline for the database account.
   * @param options The options parameters.
   */
  offlineRegion(
    resourceGroupName: string,
    accountName: string,
    regionParameterForOffline: RegionForOnlineOffline,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Online the specified region for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param regionParameterForOnline Cosmos DB region to online for the database account.
   * @param options The options parameters.
   */
  onlineRegion(
    resourceGroupName: string,
    accountName: string,
    regionParameterForOnline: RegionForOnlineOffline,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Lists the read-only access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  getReadOnlyKeys(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DatabaseAccountsGetReadOnlyKeysResponse>;
  /**
   * Lists the read-only access keys for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  listReadOnlyKeys(
    resourceGroupName: string,
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DatabaseAccountsListReadOnlyKeysResponse>;
  /**
   * Regenerates an access key for the specified Azure Cosmos DB database account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Cosmos DB database account name.
   * @param keyToRegenerate The name of the key to regenerate.
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroupName: string,
    accountName: string,
    keyToRegenerate: DatabaseAccountRegenerateKeyParameters,
    options?: coreHttp.OperationOptions
  ): Promise<
    PollerLike<LROOperationState<coreHttp.RestResponse>, coreHttp.RestResponse>
  >;
  /**
   * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only
   * lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.
   * @param accountName Cosmos DB database account name.
   * @param options The options parameters.
   */
  checkNameExists(
    accountName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse>;
}
