/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataCatalogRestClient } from "../dataCatalogRestClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  ADCCatalogsListtByResourceGroupResponse,
  ADCCatalog,
  ADCCatalogsCreateOrUpdateResponse,
  ADCCatalogsGetResponse,
  ADCCatalogsUpdateResponse
} from "../models";

/**
 * Class representing a ADCCatalogs.
 */
export class ADCCatalogs {
  private readonly client: DataCatalogRestClient;

  /**
   * Initialize a new instance of the class ADCCatalogs class.
   * @param client Reference to the service client
   */
  constructor(client: DataCatalogRestClient) {
    this.client = client;
  }

  /**
   * The List catalogs in Resource Group operation lists all the Azure Data Catalogs available under the
   * given resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  listtByResourceGroup(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ADCCatalogsListtByResourceGroupResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      listtByResourceGroupOperationSpec
    ) as Promise<ADCCatalogsListtByResourceGroupResponse>;
  }

  /**
   * The Create Azure Data Catalog service operation creates a new data catalog service with the
   * specified parameters. If the specific service already exists, then any patchable properties will be
   * updated and any immutable properties will remain unchanged.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param properties Properties supplied to the Create or Update a data catalog.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    properties: ADCCatalog,
    options?: coreHttp.OperationOptions
  ): Promise<ADCCatalogsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, properties, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<ADCCatalogsCreateOrUpdateResponse>;
  }

  /**
   * The Get Azure Data Catalog Service operation retrieves a json representation of the data catalog.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ADCCatalogsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, options: operationOptions },
      getOperationSpec
    ) as Promise<ADCCatalogsGetResponse>;
  }

  /**
   * The Delete Azure Data Catalog Service operation deletes an existing data catalog.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  async delete(
    resourceGroupName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options
    );

    const args: coreHttp.OperationArguments = {
      resourceGroupName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        coreHttp.RestResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      deleteOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: deleteOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * The Update Azure Data Catalog Service operation can be used to update the existing deployment. The
   * update call only supports the properties listed in the PATCH body.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param properties Properties supplied to the Update a data catalog.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    properties: ADCCatalog,
    options?: coreHttp.OperationOptions
  ): Promise<ADCCatalogsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { resourceGroupName, properties, options: operationOptions },
      updateOperationSpec
    ) as Promise<ADCCatalogsUpdateResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listtByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ADCCatalogsListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs/{catalogName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ADCCatalog
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs/{catalogName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ADCCatalog
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs/{catalogName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs/{catalogName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ADCCatalog
    }
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.contentType],
  serializer
};
