/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Azureactivedirectory } from "../azureactivedirectory";
import {
  DiagnosticSettingsListResponse,
  DiagnosticSettingsGetResponse,
  DiagnosticSettingsResource,
  DiagnosticSettingsCreateOrUpdateResponse
} from "../models";

/**
 * Class representing a DiagnosticSettings.
 */
export class DiagnosticSettings {
  private readonly client: Azureactivedirectory;

  /**
   * Initialize a new instance of the class DiagnosticSettings class.
   * @param client Reference to the service client
   */
  constructor(client: Azureactivedirectory) {
    this.client = client;
  }

  /**
   * Gets the active diagnostic settings list for AadIam.
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticSettingsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<DiagnosticSettingsListResponse>;
  }

  /**
   * Gets the active diagnostic setting for AadIam.
   * @param name The name of the diagnostic setting.
   * @param options The options parameters.
   */
  get(
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticSettingsGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, options: operationOptions },
      getOperationSpec
    ) as Promise<DiagnosticSettingsGetResponse>;
  }

  /**
   * Creates or updates diagnostic settings for AadIam.
   * @param name The name of the diagnostic setting.
   * @param parameters Parameters supplied to the operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    name: string,
    parameters: DiagnosticSettingsResource,
    options?: coreHttp.OperationOptions
  ): Promise<DiagnosticSettingsCreateOrUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, parameters, options: operationOptions },
      createOrUpdateOperationSpec
    ) as Promise<DiagnosticSettingsCreateOrUpdateResponse>;
  }

  /**
   * Deletes existing diagnostic setting for AadIam.
   * @param name The name of the diagnostic setting.
   * @param options The options parameters.
   */
  delete(
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { name, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/microsoft.aadiam/diagnosticSettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/microsoft.aadiam/diagnosticSettings/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/microsoft.aadiam/diagnosticSettings/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name],
  headerParameters: [Parameters.contentType],
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/providers/microsoft.aadiam/diagnosticSettings/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name],
  serializer
};
