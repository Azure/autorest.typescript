/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/arrayModelMappers";
import { AutoRestSwaggerBATArrayServiceContext } from "../autoRestSwaggerBATArrayServiceContext";

/** Class representing a ArrayModel. */
export class ArrayModel {
  private readonly client: AutoRestSwaggerBATArrayServiceContext;

  /**
   * Create a ArrayModel.
   * @param {AutoRestSwaggerBATArrayServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATArrayServiceContext) {
    this.client = client;
  }

  /**
   * Get null array value
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetNullResponse>
   */
  getNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetNullResponse>;
  /**
   * @param callback The callback
   */
  getNull(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetNullResponse>;
  }

  /**
   * Get invalid array [1, 2, 3
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetInvalidResponse>
   */
  getInvalid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetInvalidResponse>;
  /**
   * @param callback The callback
   */
  getInvalid(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getInvalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getInvalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetInvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidOperationSpec,
      callback) as Promise<Models.ArrayModelGetInvalidResponse>;
  }

  /**
   * Get empty array value []
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetEmptyResponse>
   */
  getEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetEmptyResponse>;
  /**
   * @param callback The callback
   */
  getEmpty(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyOperationSpec,
      callback) as Promise<Models.ArrayModelGetEmptyResponse>;
  }

  /**
   * Set array value empty []
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putEmpty(arrayBody: string[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putEmpty(arrayBody: string[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putEmpty(arrayBody: string[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putEmpty(arrayBody: string[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putEmptyOperationSpec,
      callback);
  }

  /**
   * Get boolean array value [true, false, false, true]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetBooleanTfftResponse>
   */
  getBooleanTfft(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetBooleanTfftResponse>;
  /**
   * @param callback The callback
   */
  getBooleanTfft(callback: coreHttp.ServiceCallback<boolean[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBooleanTfft(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean[]>): void;
  getBooleanTfft(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean[]>, callback?: coreHttp.ServiceCallback<boolean[]>): Promise<Models.ArrayModelGetBooleanTfftResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanTfftOperationSpec,
      callback) as Promise<Models.ArrayModelGetBooleanTfftResponse>;
  }

  /**
   * Set array value empty [true, false, false, true]
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBooleanTfft(arrayBody: boolean[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putBooleanTfft(arrayBody: boolean[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putBooleanTfft(arrayBody: boolean[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBooleanTfft(arrayBody: boolean[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putBooleanTfftOperationSpec,
      callback);
  }

  /**
   * Get boolean array value [true, null, false]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetBooleanInvalidNullResponse>
   */
  getBooleanInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetBooleanInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getBooleanInvalidNull(callback: coreHttp.ServiceCallback<boolean[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBooleanInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean[]>): void;
  getBooleanInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean[]>, callback?: coreHttp.ServiceCallback<boolean[]>): Promise<Models.ArrayModelGetBooleanInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanInvalidNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetBooleanInvalidNullResponse>;
  }

  /**
   * Get boolean array value [true, 'boolean', false]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetBooleanInvalidStringResponse>
   */
  getBooleanInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetBooleanInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getBooleanInvalidString(callback: coreHttp.ServiceCallback<boolean[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBooleanInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean[]>): void;
  getBooleanInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean[]>, callback?: coreHttp.ServiceCallback<boolean[]>): Promise<Models.ArrayModelGetBooleanInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanInvalidStringOperationSpec,
      callback) as Promise<Models.ArrayModelGetBooleanInvalidStringResponse>;
  }

  /**
   * Get integer array value [1, -1, 3, 300]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetIntegerValidResponse>
   */
  getIntegerValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetIntegerValidResponse>;
  /**
   * @param callback The callback
   */
  getIntegerValid(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntegerValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getIntegerValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetIntegerValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntegerValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetIntegerValidResponse>;
  }

  /**
   * Set array value empty [1, -1, 3, 300]
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putIntegerValid(arrayBody: number[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putIntegerValid(arrayBody: number[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putIntegerValid(arrayBody: number[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putIntegerValid(arrayBody: number[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putIntegerValidOperationSpec,
      callback);
  }

  /**
   * Get integer array value [1, null, 0]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetIntInvalidNullResponse>
   */
  getIntInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetIntInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getIntInvalidNull(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getIntInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetIntInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntInvalidNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetIntInvalidNullResponse>;
  }

  /**
   * Get integer array value [1, 'integer', 0]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetIntInvalidStringResponse>
   */
  getIntInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetIntInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getIntInvalidString(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getIntInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetIntInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntInvalidStringOperationSpec,
      callback) as Promise<Models.ArrayModelGetIntInvalidStringResponse>;
  }

  /**
   * Get integer array value [1, -1, 3, 300]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetLongValidResponse>
   */
  getLongValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetLongValidResponse>;
  /**
   * @param callback The callback
   */
  getLongValid(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLongValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getLongValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetLongValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetLongValidResponse>;
  }

  /**
   * Set array value empty [1, -1, 3, 300]
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putLongValid(arrayBody: number[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putLongValid(arrayBody: number[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putLongValid(arrayBody: number[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putLongValid(arrayBody: number[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putLongValidOperationSpec,
      callback);
  }

  /**
   * Get long array value [1, null, 0]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetLongInvalidNullResponse>
   */
  getLongInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetLongInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getLongInvalidNull(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLongInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getLongInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetLongInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongInvalidNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetLongInvalidNullResponse>;
  }

  /**
   * Get long array value [1, 'integer', 0]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetLongInvalidStringResponse>
   */
  getLongInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetLongInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getLongInvalidString(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLongInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getLongInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetLongInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongInvalidStringOperationSpec,
      callback) as Promise<Models.ArrayModelGetLongInvalidStringResponse>;
  }

  /**
   * Get float array value [0, -0.01, 1.2e20]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetFloatValidResponse>
   */
  getFloatValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetFloatValidResponse>;
  /**
   * @param callback The callback
   */
  getFloatValid(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFloatValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getFloatValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetFloatValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetFloatValidResponse>;
  }

  /**
   * Set array value [0, -0.01, 1.2e20]
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putFloatValid(arrayBody: number[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putFloatValid(arrayBody: number[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putFloatValid(arrayBody: number[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putFloatValid(arrayBody: number[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putFloatValidOperationSpec,
      callback);
  }

  /**
   * Get float array value [0.0, null, -1.2e20]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetFloatInvalidNullResponse>
   */
  getFloatInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetFloatInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getFloatInvalidNull(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFloatInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getFloatInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetFloatInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatInvalidNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetFloatInvalidNullResponse>;
  }

  /**
   * Get boolean array value [1.0, 'number', 0.0]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetFloatInvalidStringResponse>
   */
  getFloatInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetFloatInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getFloatInvalidString(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFloatInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getFloatInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetFloatInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatInvalidStringOperationSpec,
      callback) as Promise<Models.ArrayModelGetFloatInvalidStringResponse>;
  }

  /**
   * Get float array value [0, -0.01, 1.2e20]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDoubleValidResponse>
   */
  getDoubleValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDoubleValidResponse>;
  /**
   * @param callback The callback
   */
  getDoubleValid(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDoubleValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getDoubleValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetDoubleValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetDoubleValidResponse>;
  }

  /**
   * Set array value [0, -0.01, 1.2e20]
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDoubleValid(arrayBody: number[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDoubleValid(arrayBody: number[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDoubleValid(arrayBody: number[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDoubleValid(arrayBody: number[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDoubleValidOperationSpec,
      callback);
  }

  /**
   * Get float array value [0.0, null, -1.2e20]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDoubleInvalidNullResponse>
   */
  getDoubleInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDoubleInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getDoubleInvalidNull(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDoubleInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getDoubleInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetDoubleInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleInvalidNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetDoubleInvalidNullResponse>;
  }

  /**
   * Get boolean array value [1.0, 'number', 0.0]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDoubleInvalidStringResponse>
   */
  getDoubleInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDoubleInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getDoubleInvalidString(callback: coreHttp.ServiceCallback<number[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDoubleInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number[]>): void;
  getDoubleInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number[]>, callback?: coreHttp.ServiceCallback<number[]>): Promise<Models.ArrayModelGetDoubleInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleInvalidStringOperationSpec,
      callback) as Promise<Models.ArrayModelGetDoubleInvalidStringResponse>;
  }

  /**
   * Get string array value ['foo1', 'foo2', 'foo3']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetStringValidResponse>
   */
  getStringValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetStringValidResponse>;
  /**
   * @param callback The callback
   */
  getStringValid(callback: coreHttp.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStringValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[]>): void;
  getStringValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[]>, callback?: coreHttp.ServiceCallback<string[]>): Promise<Models.ArrayModelGetStringValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetStringValidResponse>;
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putStringValid(arrayBody: string[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putStringValid(arrayBody: string[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putStringValid(arrayBody: string[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putStringValid(arrayBody: string[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putStringValidOperationSpec,
      callback);
  }

  /**
   * Get enum array value ['foo1', 'foo2', 'foo3']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetEnumValidResponse>
   */
  getEnumValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetEnumValidResponse>;
  /**
   * @param callback The callback
   */
  getEnumValid(callback: coreHttp.ServiceCallback<Models.FooEnum[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEnumValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.FooEnum[]>): void;
  getEnumValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.FooEnum[]>, callback?: coreHttp.ServiceCallback<Models.FooEnum[]>): Promise<Models.ArrayModelGetEnumValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEnumValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetEnumValidResponse>;
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putEnumValid(arrayBody: Models.FooEnum[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putEnumValid(arrayBody: Models.FooEnum[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putEnumValid(arrayBody: Models.FooEnum[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putEnumValid(arrayBody: Models.FooEnum[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putEnumValidOperationSpec,
      callback);
  }

  /**
   * Get enum array value ['foo1', 'foo2', 'foo3']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetStringEnumValidResponse>
   */
  getStringEnumValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetStringEnumValidResponse>;
  /**
   * @param callback The callback
   */
  getStringEnumValid(callback: coreHttp.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStringEnumValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[]>): void;
  getStringEnumValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[]>, callback?: coreHttp.ServiceCallback<string[]>): Promise<Models.ArrayModelGetStringEnumValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringEnumValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetStringEnumValidResponse>;
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putStringEnumValid(arrayBody: string[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putStringEnumValid(arrayBody: string[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putStringEnumValid(arrayBody: string[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putStringEnumValid(arrayBody: string[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putStringEnumValidOperationSpec,
      callback);
  }

  /**
   * Get string array value ['foo', null, 'foo2']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetStringWithNullResponse>
   */
  getStringWithNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetStringWithNullResponse>;
  /**
   * @param callback The callback
   */
  getStringWithNull(callback: coreHttp.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStringWithNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[]>): void;
  getStringWithNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[]>, callback?: coreHttp.ServiceCallback<string[]>): Promise<Models.ArrayModelGetStringWithNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringWithNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetStringWithNullResponse>;
  }

  /**
   * Get string array value ['foo', 123, 'foo2']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetStringWithInvalidResponse>
   */
  getStringWithInvalid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetStringWithInvalidResponse>;
  /**
   * @param callback The callback
   */
  getStringWithInvalid(callback: coreHttp.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStringWithInvalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[]>): void;
  getStringWithInvalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[]>, callback?: coreHttp.ServiceCallback<string[]>): Promise<Models.ArrayModelGetStringWithInvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringWithInvalidOperationSpec,
      callback) as Promise<Models.ArrayModelGetStringWithInvalidResponse>;
  }

  /**
   * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
   * 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetUuidValidResponse>
   */
  getUuidValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetUuidValidResponse>;
  /**
   * @param callback The callback
   */
  getUuidValid(callback: coreHttp.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUuidValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[]>): void;
  getUuidValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[]>, callback?: coreHttp.ServiceCallback<string[]>): Promise<Models.ArrayModelGetUuidValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUuidValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetUuidValidResponse>;
  }

  /**
   * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
   * 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putUuidValid(arrayBody: string[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putUuidValid(arrayBody: string[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putUuidValid(arrayBody: string[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putUuidValid(arrayBody: string[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putUuidValidOperationSpec,
      callback);
  }

  /**
   * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetUuidInvalidCharsResponse>
   */
  getUuidInvalidChars(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetUuidInvalidCharsResponse>;
  /**
   * @param callback The callback
   */
  getUuidInvalidChars(callback: coreHttp.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUuidInvalidChars(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[]>): void;
  getUuidInvalidChars(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[]>, callback?: coreHttp.ServiceCallback<string[]>): Promise<Models.ArrayModelGetUuidInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUuidInvalidCharsOperationSpec,
      callback) as Promise<Models.ArrayModelGetUuidInvalidCharsResponse>;
  }

  /**
   * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDateValidResponse>
   */
  getDateValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDateValidResponse>;
  /**
   * @param callback The callback
   */
  getDateValid(callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  getDateValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date[] | string[]>, callback?: coreHttp.ServiceCallback<Date[] | string[]>): Promise<Models.ArrayModelGetDateValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetDateValidResponse>;
  }

  /**
   * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDateValid(arrayBody: Array<Date> | Array<string>, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDateValid(arrayBody: Array<Date> | Array<string>, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDateValid(arrayBody: Array<Date> | Array<string>, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDateValid(arrayBody: Array<Date> | Array<string>, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateValidOperationSpec,
      callback);
  }

  /**
   * Get date array value ['2012-01-01', null, '1776-07-04']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDateInvalidNullResponse>
   */
  getDateInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDateInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getDateInvalidNull(callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  getDateInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date[] | string[]>, callback?: coreHttp.ServiceCallback<Date[] | string[]>): Promise<Models.ArrayModelGetDateInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateInvalidNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetDateInvalidNullResponse>;
  }

  /**
   * Get date array value ['2011-03-22', 'date']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDateInvalidCharsResponse>
   */
  getDateInvalidChars(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDateInvalidCharsResponse>;
  /**
   * @param callback The callback
   */
  getDateInvalidChars(callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateInvalidChars(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  getDateInvalidChars(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date[] | string[]>, callback?: coreHttp.ServiceCallback<Date[] | string[]>): Promise<Models.ArrayModelGetDateInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateInvalidCharsOperationSpec,
      callback) as Promise<Models.ArrayModelGetDateInvalidCharsResponse>;
  }

  /**
   * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
   * '1492-10-12T10:15:01-08:00']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDateTimeValidResponse>
   */
  getDateTimeValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDateTimeValidResponse>;
  /**
   * @param callback The callback
   */
  getDateTimeValid(callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateTimeValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  getDateTimeValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date[] | string[]>, callback?: coreHttp.ServiceCallback<Date[] | string[]>): Promise<Models.ArrayModelGetDateTimeValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetDateTimeValidResponse>;
  }

  /**
   * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
   * '1492-10-12T10:15:01-08:00']
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDateTimeValid(arrayBody: Array<Date> | Array<string>, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDateTimeValid(arrayBody: Array<Date> | Array<string>, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDateTimeValid(arrayBody: Array<Date> | Array<string>, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDateTimeValid(arrayBody: Array<Date> | Array<string>, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateTimeValidOperationSpec,
      callback);
  }

  /**
   * Get date array value ['2000-12-01t00:00:01z', null]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDateTimeInvalidNullResponse>
   */
  getDateTimeInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDateTimeInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getDateTimeInvalidNull(callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateTimeInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  getDateTimeInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date[] | string[]>, callback?: coreHttp.ServiceCallback<Date[] | string[]>): Promise<Models.ArrayModelGetDateTimeInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeInvalidNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetDateTimeInvalidNullResponse>;
  }

  /**
   * Get date array value ['2000-12-01t00:00:01z', 'date-time']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDateTimeInvalidCharsResponse>
   */
  getDateTimeInvalidChars(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDateTimeInvalidCharsResponse>;
  /**
   * @param callback The callback
   */
  getDateTimeInvalidChars(callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateTimeInvalidChars(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  getDateTimeInvalidChars(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date[] | string[]>, callback?: coreHttp.ServiceCallback<Date[] | string[]>): Promise<Models.ArrayModelGetDateTimeInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeInvalidCharsOperationSpec,
      callback) as Promise<Models.ArrayModelGetDateTimeInvalidCharsResponse>;
  }

  /**
   * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT',
   * 'Wed, 12 Oct 1492 10:15:01 GMT']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDateTimeRfc1123ValidResponse>
   */
  getDateTimeRfc1123Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDateTimeRfc1123ValidResponse>;
  /**
   * @param callback The callback
   */
  getDateTimeRfc1123Valid(callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateTimeRfc1123Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date[] | string[]>): void;
  getDateTimeRfc1123Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date[] | string[]>, callback?: coreHttp.ServiceCallback<Date[] | string[]>): Promise<Models.ArrayModelGetDateTimeRfc1123ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeRfc1123ValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetDateTimeRfc1123ValidResponse>;
  }

  /**
   * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct
   * 1492 10:15:01 GMT']
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateTimeRfc1123ValidOperationSpec,
      callback);
  }

  /**
   * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDurationValidResponse>
   */
  getDurationValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDurationValidResponse>;
  /**
   * @param callback The callback
   */
  getDurationValid(callback: coreHttp.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDurationValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[]>): void;
  getDurationValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[]>, callback?: coreHttp.ServiceCallback<string[]>): Promise<Models.ArrayModelGetDurationValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDurationValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetDurationValidResponse>;
  }

  /**
   * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDurationValid(arrayBody: string[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDurationValid(arrayBody: string[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDurationValid(arrayBody: string[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDurationValid(arrayBody: string[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDurationValidOperationSpec,
      callback);
  }

  /**
   * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded
   * in base64
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetByteValidResponse>
   */
  getByteValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetByteValidResponse>;
  /**
   * @param callback The callback
   */
  getByteValid(callback: coreHttp.ServiceCallback<Uint8Array[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getByteValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Uint8Array[]>): void;
  getByteValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Uint8Array[]>, callback?: coreHttp.ServiceCallback<Uint8Array[]>): Promise<Models.ArrayModelGetByteValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getByteValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetByteValidResponse>;
  }

  /**
   * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded
   * in base 64
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putByteValid(arrayBody: Uint8Array[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putByteValid(arrayBody: Uint8Array[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putByteValid(arrayBody: Uint8Array[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putByteValid(arrayBody: Uint8Array[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putByteValidOperationSpec,
      callback);
  }

  /**
   * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetByteInvalidNullResponse>
   */
  getByteInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetByteInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getByteInvalidNull(callback: coreHttp.ServiceCallback<Uint8Array[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getByteInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Uint8Array[]>): void;
  getByteInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Uint8Array[]>, callback?: coreHttp.ServiceCallback<Uint8Array[]>): Promise<Models.ArrayModelGetByteInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getByteInvalidNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetByteInvalidNullResponse>;
  }

  /**
   * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with
   * the items base64url encoded
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetBase64UrlResponse>
   */
  getBase64Url(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetBase64UrlResponse>;
  /**
   * @param callback The callback
   */
  getBase64Url(callback: coreHttp.ServiceCallback<Uint8Array[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBase64Url(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Uint8Array[]>): void;
  getBase64Url(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Uint8Array[]>, callback?: coreHttp.ServiceCallback<Uint8Array[]>): Promise<Models.ArrayModelGetBase64UrlResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBase64UrlOperationSpec,
      callback) as Promise<Models.ArrayModelGetBase64UrlResponse>;
  }

  /**
   * Get array of complex type null value
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetComplexNullResponse>
   */
  getComplexNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetComplexNullResponse>;
  /**
   * @param callback The callback
   */
  getComplexNull(callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  getComplexNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Product[]>, callback?: coreHttp.ServiceCallback<Models.Product[]>): Promise<Models.ArrayModelGetComplexNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetComplexNullResponse>;
  }

  /**
   * Get empty array of complex type []
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetComplexEmptyResponse>
   */
  getComplexEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetComplexEmptyResponse>;
  /**
   * @param callback The callback
   */
  getComplexEmpty(callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  getComplexEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Product[]>, callback?: coreHttp.ServiceCallback<Models.Product[]>): Promise<Models.ArrayModelGetComplexEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexEmptyOperationSpec,
      callback) as Promise<Models.ArrayModelGetComplexEmptyResponse>;
  }

  /**
   * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5,
   * 'string': '6'}]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetComplexItemNullResponse>
   */
  getComplexItemNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetComplexItemNullResponse>;
  /**
   * @param callback The callback
   */
  getComplexItemNull(callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexItemNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  getComplexItemNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Product[]>, callback?: coreHttp.ServiceCallback<Models.Product[]>): Promise<Models.ArrayModelGetComplexItemNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexItemNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetComplexItemNullResponse>;
  }

  /**
   * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5,
   * 'string': '6'}]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetComplexItemEmptyResponse>
   */
  getComplexItemEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetComplexItemEmptyResponse>;
  /**
   * @param callback The callback
   */
  getComplexItemEmpty(callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexItemEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  getComplexItemEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Product[]>, callback?: coreHttp.ServiceCallback<Models.Product[]>): Promise<Models.ArrayModelGetComplexItemEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexItemEmptyOperationSpec,
      callback) as Promise<Models.ArrayModelGetComplexItemEmptyResponse>;
  }

  /**
   * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'},
   * {'integer': 5, 'string': '6'}]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetComplexValidResponse>
   */
  getComplexValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetComplexValidResponse>;
  /**
   * @param callback The callback
   */
  getComplexValid(callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Product[]>): void;
  getComplexValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Product[]>, callback?: coreHttp.ServiceCallback<Models.Product[]>): Promise<Models.ArrayModelGetComplexValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetComplexValidResponse>;
  }

  /**
   * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string':
   * '4'}, {'integer': 5, 'string': '6'}]
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putComplexValid(arrayBody: Models.Product[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putComplexValid(arrayBody: Models.Product[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putComplexValid(arrayBody: Models.Product[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putComplexValid(arrayBody: Models.Product[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putComplexValidOperationSpec,
      callback);
  }

  /**
   * Get a null array
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetArrayNullResponse>
   */
  getArrayNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetArrayNullResponse>;
  /**
   * @param callback The callback
   */
  getArrayNull(callback: coreHttp.ServiceCallback<string[][]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[][]>): void;
  getArrayNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[][]>, callback?: coreHttp.ServiceCallback<string[][]>): Promise<Models.ArrayModelGetArrayNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetArrayNullResponse>;
  }

  /**
   * Get an empty array []
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetArrayEmptyResponse>
   */
  getArrayEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetArrayEmptyResponse>;
  /**
   * @param callback The callback
   */
  getArrayEmpty(callback: coreHttp.ServiceCallback<string[][]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[][]>): void;
  getArrayEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[][]>, callback?: coreHttp.ServiceCallback<string[][]>): Promise<Models.ArrayModelGetArrayEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayEmptyOperationSpec,
      callback) as Promise<Models.ArrayModelGetArrayEmptyResponse>;
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetArrayItemNullResponse>
   */
  getArrayItemNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetArrayItemNullResponse>;
  /**
   * @param callback The callback
   */
  getArrayItemNull(callback: coreHttp.ServiceCallback<string[][]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayItemNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[][]>): void;
  getArrayItemNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[][]>, callback?: coreHttp.ServiceCallback<string[][]>): Promise<Models.ArrayModelGetArrayItemNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayItemNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetArrayItemNullResponse>;
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetArrayItemEmptyResponse>
   */
  getArrayItemEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetArrayItemEmptyResponse>;
  /**
   * @param callback The callback
   */
  getArrayItemEmpty(callback: coreHttp.ServiceCallback<string[][]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayItemEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[][]>): void;
  getArrayItemEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[][]>, callback?: coreHttp.ServiceCallback<string[][]>): Promise<Models.ArrayModelGetArrayItemEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayItemEmptyOperationSpec,
      callback) as Promise<Models.ArrayModelGetArrayItemEmptyResponse>;
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetArrayValidResponse>
   */
  getArrayValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetArrayValidResponse>;
  /**
   * @param callback The callback
   */
  getArrayValid(callback: coreHttp.ServiceCallback<string[][]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<string[][]>): void;
  getArrayValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<string[][]>, callback?: coreHttp.ServiceCallback<string[][]>): Promise<Models.ArrayModelGetArrayValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetArrayValidResponse>;
  }

  /**
   * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putArrayValid(arrayBody: string[][], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putArrayValid(arrayBody: string[][], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putArrayValid(arrayBody: string[][], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putArrayValid(arrayBody: string[][], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putArrayValidOperationSpec,
      callback);
  }

  /**
   * Get an array of Dictionaries with value null
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDictionaryNullResponse>
   */
  getDictionaryNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDictionaryNullResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): Promise<Models.ArrayModelGetDictionaryNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetDictionaryNullResponse>;
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value []
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDictionaryEmptyResponse>
   */
  getDictionaryEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDictionaryEmptyResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): Promise<Models.ArrayModelGetDictionaryEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryEmptyOperationSpec,
      callback) as Promise<Models.ArrayModelGetDictionaryEmptyResponse>;
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDictionaryItemNullResponse>
   */
  getDictionaryItemNull(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDictionaryItemNullResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryItemNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryItemNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryItemNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): Promise<Models.ArrayModelGetDictionaryItemNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryItemNullOperationSpec,
      callback) as Promise<Models.ArrayModelGetDictionaryItemNullResponse>;
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDictionaryItemEmptyResponse>
   */
  getDictionaryItemEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDictionaryItemEmptyResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryItemEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryItemEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryItemEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): Promise<Models.ArrayModelGetDictionaryItemEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryItemEmptyOperationSpec,
      callback) as Promise<Models.ArrayModelGetDictionaryItemEmptyResponse>;
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   * @param [options] The optional parameters
   * @returns Promise<Models.ArrayModelGetDictionaryValidResponse>
   */
  getDictionaryValid(options?: coreHttp.RequestOptionsBase): Promise<Models.ArrayModelGetDictionaryValidResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }[]>): Promise<Models.ArrayModelGetDictionaryValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryValidOperationSpec,
      callback) as Promise<Models.ArrayModelGetDictionaryValidResponse>;
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDictionaryValidOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/invalid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/empty",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanTfftOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/boolean/tfft",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBooleanTfftOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/boolean/tfft",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Boolean"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/boolean/true.null.false",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/boolean/true.boolean.false",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntegerValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/integer/1.-1.3.300",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putIntegerValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/integer/1.-1.3.300",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/integer/1.null.zero",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/integer/1.integer.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/long/1.-1.3.300",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putLongValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/long/1.-1.3.300",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/long/1.null.zero",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/long/1.integer.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/float/0--0.01-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putFloatValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/float/0--0.01-1.2e20",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/float/0.0-null-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/float/1.number.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/double/0--0.01-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDoubleValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/double/0--0.01-1.2e20",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/double/0.0-null-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/double/1.number.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/string/foo1.foo2.foo3",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putStringValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/string/foo1.foo2.foo3",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEnumValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/enum/foo1.foo2.foo3",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "foo1",
                "foo2",
                "foo3"
              ]
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putEnumValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/enum/foo1.foo2.foo3",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Enum",
            allowedValues: [
              "foo1",
              "foo2",
              "foo3"
            ]
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringEnumValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/string-enum/foo1.foo2.foo3",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putStringEnumValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/string-enum/foo1.foo2.foo3",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringWithNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/string/foo.null.foo2",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringWithInvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/string/foo.123.foo2",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUuidValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/uuid/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putUuidValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/uuid/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Uuid"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUuidInvalidCharsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/uuid/invalidchars",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/date/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Date"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateInvalidCharsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date/invalidchars",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date-time/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateTimeValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/date-time/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "DateTime"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date-time/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeInvalidCharsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date-time/invalidchars",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeRfc1123ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date-time-rfc1123/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateTimeRfc1123ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/date-time-rfc1123/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "DateTimeRfc1123"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDurationValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/duration/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "TimeSpan"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDurationValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/duration/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "TimeSpan"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByteValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/byte/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putByteValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/byte/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "ByteArray"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByteInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/byte/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBase64UrlOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/base64url/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Base64Url"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexItemNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexItemEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putComplexValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/complex/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Product"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayItemNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayItemEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putArrayValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/array/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String"
              }
            }
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryItemNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryItemEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDictionaryValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "array/dictionary/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Dictionary",
            value: {
              type: {
                name: "String"
              }
            }
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
