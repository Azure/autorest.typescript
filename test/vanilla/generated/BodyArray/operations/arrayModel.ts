/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/arrayModelMappers";
import { AutoRestSwaggerBATArrayServiceContext } from "../autoRestSwaggerBATArrayServiceContext";

/** Class representing a ArrayModel. */
export class ArrayModel {
  private readonly client: AutoRestSwaggerBATArrayServiceContext;

  /**
   * Create a ArrayModel.
   * @param {AutoRestSwaggerBATArrayServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATArrayServiceContext) {
    this.client = client;
  }

  /**
   * Get null array value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec);
  }

  /**
   * Get invalid array [1, 2, 3
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getInvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidOperationSpec);
  }

  /**
   * Get empty array value []
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyOperationSpec);
  }

  /**
   * Set array value empty []
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putEmptyWithHttpOperationResponse(arrayBody: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putEmptyOperationSpec);
  }

  /**
   * Get boolean array value [true, false, false, true]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBooleanTfftWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<boolean[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanTfftOperationSpec);
  }

  /**
   * Set array value empty [true, false, false, true]
   *
   * @param {boolean[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBooleanTfftWithHttpOperationResponse(arrayBody: boolean[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putBooleanTfftOperationSpec);
  }

  /**
   * Get boolean array value [true, null, false]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBooleanInvalidNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<boolean[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanInvalidNullOperationSpec);
  }

  /**
   * Get boolean array value [true, 'boolean', false]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBooleanInvalidStringWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<boolean[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanInvalidStringOperationSpec);
  }

  /**
   * Get integer array value [1, -1, 3, 300]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getIntegerValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntegerValidOperationSpec);
  }

  /**
   * Set array value empty [1, -1, 3, 300]
   *
   * @param {number[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putIntegerValidWithHttpOperationResponse(arrayBody: number[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putIntegerValidOperationSpec);
  }

  /**
   * Get integer array value [1, null, 0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getIntInvalidNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntInvalidNullOperationSpec);
  }

  /**
   * Get integer array value [1, 'integer', 0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getIntInvalidStringWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntInvalidStringOperationSpec);
  }

  /**
   * Get integer array value [1, -1, 3, 300]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getLongValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongValidOperationSpec);
  }

  /**
   * Set array value empty [1, -1, 3, 300]
   *
   * @param {number[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putLongValidWithHttpOperationResponse(arrayBody: number[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putLongValidOperationSpec);
  }

  /**
   * Get long array value [1, null, 0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getLongInvalidNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongInvalidNullOperationSpec);
  }

  /**
   * Get long array value [1, 'integer', 0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getLongInvalidStringWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongInvalidStringOperationSpec);
  }

  /**
   * Get float array value [0, -0.01, 1.2e20]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getFloatValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatValidOperationSpec);
  }

  /**
   * Set array value [0, -0.01, 1.2e20]
   *
   * @param {number[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putFloatValidWithHttpOperationResponse(arrayBody: number[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putFloatValidOperationSpec);
  }

  /**
   * Get float array value [0.0, null, -1.2e20]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getFloatInvalidNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatInvalidNullOperationSpec);
  }

  /**
   * Get boolean array value [1.0, 'number', 0.0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getFloatInvalidStringWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatInvalidStringOperationSpec);
  }

  /**
   * Get float array value [0, -0.01, 1.2e20]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDoubleValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleValidOperationSpec);
  }

  /**
   * Set array value [0, -0.01, 1.2e20]
   *
   * @param {number[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDoubleValidWithHttpOperationResponse(arrayBody: number[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDoubleValidOperationSpec);
  }

  /**
   * Get float array value [0.0, null, -1.2e20]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDoubleInvalidNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleInvalidNullOperationSpec);
  }

  /**
   * Get boolean array value [1.0, 'number', 0.0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDoubleInvalidStringWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleInvalidStringOperationSpec);
  }

  /**
   * Get string array value ['foo1', 'foo2', 'foo3']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getStringValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringValidOperationSpec);
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putStringValidWithHttpOperationResponse(arrayBody: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putStringValidOperationSpec);
  }

  /**
   * Get enum array value ['foo1', 'foo2', 'foo3']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getEnumValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.FooEnum[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEnumValidOperationSpec);
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   *
   * @param {FooEnum[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putEnumValidWithHttpOperationResponse(arrayBody: Models.FooEnum[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putEnumValidOperationSpec);
  }

  /**
   * Get enum array value ['foo1', 'foo2', 'foo3']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getStringEnumValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringEnumValidOperationSpec);
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putStringEnumValidWithHttpOperationResponse(arrayBody: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putStringEnumValidOperationSpec);
  }

  /**
   * Get string array value ['foo', null, 'foo2']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getStringWithNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringWithNullOperationSpec);
  }

  /**
   * Get string array value ['foo', 123, 'foo2']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getStringWithInvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringWithInvalidOperationSpec);
  }

  /**
   * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
   * 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getUuidValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUuidValidOperationSpec);
  }

  /**
   * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
   * 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putUuidValidWithHttpOperationResponse(arrayBody: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putUuidValidOperationSpec);
  }

  /**
   * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getUuidInvalidCharsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUuidInvalidCharsOperationSpec);
  }

  /**
   * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Date[] | string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateValidOperationSpec);
  }

  /**
   * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
   *
   * @param {Array<Date> | Array<string>} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDateValidWithHttpOperationResponse(arrayBody: Array<Date> | Array<string>, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateValidOperationSpec);
  }

  /**
   * Get date array value ['2012-01-01', null, '1776-07-04']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateInvalidNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Date[] | string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateInvalidNullOperationSpec);
  }

  /**
   * Get date array value ['2011-03-22', 'date']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateInvalidCharsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Date[] | string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateInvalidCharsOperationSpec);
  }

  /**
   * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
   * '1492-10-12T10:15:01-08:00']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateTimeValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Date[] | string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeValidOperationSpec);
  }

  /**
   * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
   * '1492-10-12T10:15:01-08:00']
   *
   * @param {Array<Date> | Array<string>} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDateTimeValidWithHttpOperationResponse(arrayBody: Array<Date> | Array<string>, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateTimeValidOperationSpec);
  }

  /**
   * Get date array value ['2000-12-01t00:00:01z', null]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateTimeInvalidNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Date[] | string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeInvalidNullOperationSpec);
  }

  /**
   * Get date array value ['2000-12-01t00:00:01z', 'date-time']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateTimeInvalidCharsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Date[] | string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeInvalidCharsOperationSpec);
  }

  /**
   * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT',
   * 'Wed, 12 Oct 1492 10:15:01 GMT']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDateTimeRfc1123ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Date[] | string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeRfc1123ValidOperationSpec);
  }

  /**
   * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct
   * 1492 10:15:01 GMT']
   *
   * @param {Array<Date> | Array<string>} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDateTimeRfc1123ValidWithHttpOperationResponse(arrayBody: Array<Date> | Array<string>, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateTimeRfc1123ValidOperationSpec);
  }

  /**
   * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDurationValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDurationValidOperationSpec);
  }

  /**
   * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDurationValidWithHttpOperationResponse(arrayBody: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDurationValidOperationSpec);
  }

  /**
   * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded
   * in base64
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByteValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Uint8Array[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getByteValidOperationSpec);
  }

  /**
   * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded
   * in base 64
   *
   * @param {Uint8Array[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putByteValidWithHttpOperationResponse(arrayBody: Uint8Array[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putByteValidOperationSpec);
  }

  /**
   * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByteInvalidNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Uint8Array[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getByteInvalidNullOperationSpec);
  }

  /**
   * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with
   * the items base64url encoded
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBase64UrlWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Uint8Array[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBase64UrlOperationSpec);
  }

  /**
   * Get array of complex type null value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getComplexNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Product[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexNullOperationSpec);
  }

  /**
   * Get empty array of complex type []
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getComplexEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Product[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexEmptyOperationSpec);
  }

  /**
   * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5,
   * 'string': '6'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getComplexItemNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Product[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexItemNullOperationSpec);
  }

  /**
   * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5,
   * 'string': '6'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getComplexItemEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Product[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexItemEmptyOperationSpec);
  }

  /**
   * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'},
   * {'integer': 5, 'string': '6'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getComplexValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Product[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexValidOperationSpec);
  }

  /**
   * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string':
   * '4'}, {'integer': 5, 'string': '6'}]
   *
   * @param {Product[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putComplexValidWithHttpOperationResponse(arrayBody: Models.Product[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putComplexValidOperationSpec);
  }

  /**
   * Get a null array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getArrayNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[][]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayNullOperationSpec);
  }

  /**
   * Get an empty array []
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getArrayEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[][]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayEmptyOperationSpec);
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getArrayItemNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[][]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayItemNullOperationSpec);
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getArrayItemEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[][]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayItemEmptyOperationSpec);
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getArrayValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<string[][]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayValidOperationSpec);
  }

  /**
   * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   *
   * @param {string[][]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putArrayValidWithHttpOperationResponse(arrayBody: string[][], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putArrayValidOperationSpec);
  }

  /**
   * Get an array of Dictionaries with value null
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDictionaryNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string }[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryNullOperationSpec);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value []
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDictionaryEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string }[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryEmptyOperationSpec);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDictionaryItemNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string }[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryItemNullOperationSpec);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDictionaryItemEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string }[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryItemEmptyOperationSpec);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDictionaryValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string }[]>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryValidOperationSpec);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   *
   * @param {{ [propertyName: string]: string }[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDictionaryValidWithHttpOperationResponse(arrayBody: { [propertyName: string]: string }[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDictionaryValidOperationSpec);
  }

  /**
   * Get null array value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getNull(): Promise<number[]>;
  getNull(options: msRest.RequestOptionsBase): Promise<number[]>;
  getNull(callback: msRest.ServiceCallback<number[]>): void;
  getNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get invalid array [1, 2, 3
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getInvalid(): Promise<number[]>;
  getInvalid(options: msRest.RequestOptionsBase): Promise<number[]>;
  getInvalid(callback: msRest.ServiceCallback<number[]>): void;
  getInvalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getInvalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getInvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get empty array value []
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEmpty(): Promise<number[]>;
  getEmpty(options: msRest.RequestOptionsBase): Promise<number[]>;
  getEmpty(callback: msRest.ServiceCallback<number[]>): void;
  getEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value empty []
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putEmpty(arrayBody: string[]): Promise<void>;
  putEmpty(arrayBody: string[], options: msRest.RequestOptionsBase): Promise<void>;
  putEmpty(arrayBody: string[], callback: msRest.ServiceCallback<void>): void;
  putEmpty(arrayBody: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putEmpty(arrayBody: string[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putEmptyWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get boolean array value [true, false, false, true]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {boolean[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBooleanTfft(): Promise<boolean[]>;
  getBooleanTfft(options: msRest.RequestOptionsBase): Promise<boolean[]>;
  getBooleanTfft(callback: msRest.ServiceCallback<boolean[]>): void;
  getBooleanTfft(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean[]>): void;
  getBooleanTfft(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<boolean[]>): any {
    return msRest.responseToBody(this.getBooleanTfftWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value empty [true, false, false, true]
   *
   * @param {boolean[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBooleanTfft(arrayBody: boolean[]): Promise<void>;
  putBooleanTfft(arrayBody: boolean[], options: msRest.RequestOptionsBase): Promise<void>;
  putBooleanTfft(arrayBody: boolean[], callback: msRest.ServiceCallback<void>): void;
  putBooleanTfft(arrayBody: boolean[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBooleanTfft(arrayBody: boolean[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBooleanTfftWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get boolean array value [true, null, false]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {boolean[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBooleanInvalidNull(): Promise<boolean[]>;
  getBooleanInvalidNull(options: msRest.RequestOptionsBase): Promise<boolean[]>;
  getBooleanInvalidNull(callback: msRest.ServiceCallback<boolean[]>): void;
  getBooleanInvalidNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean[]>): void;
  getBooleanInvalidNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<boolean[]>): any {
    return msRest.responseToBody(this.getBooleanInvalidNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get boolean array value [true, 'boolean', false]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {boolean[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBooleanInvalidString(): Promise<boolean[]>;
  getBooleanInvalidString(options: msRest.RequestOptionsBase): Promise<boolean[]>;
  getBooleanInvalidString(callback: msRest.ServiceCallback<boolean[]>): void;
  getBooleanInvalidString(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean[]>): void;
  getBooleanInvalidString(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<boolean[]>): any {
    return msRest.responseToBody(this.getBooleanInvalidStringWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get integer array value [1, -1, 3, 300]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getIntegerValid(): Promise<number[]>;
  getIntegerValid(options: msRest.RequestOptionsBase): Promise<number[]>;
  getIntegerValid(callback: msRest.ServiceCallback<number[]>): void;
  getIntegerValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getIntegerValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getIntegerValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value empty [1, -1, 3, 300]
   *
   * @param {number[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putIntegerValid(arrayBody: number[]): Promise<void>;
  putIntegerValid(arrayBody: number[], options: msRest.RequestOptionsBase): Promise<void>;
  putIntegerValid(arrayBody: number[], callback: msRest.ServiceCallback<void>): void;
  putIntegerValid(arrayBody: number[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putIntegerValid(arrayBody: number[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putIntegerValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get integer array value [1, null, 0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getIntInvalidNull(): Promise<number[]>;
  getIntInvalidNull(options: msRest.RequestOptionsBase): Promise<number[]>;
  getIntInvalidNull(callback: msRest.ServiceCallback<number[]>): void;
  getIntInvalidNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getIntInvalidNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getIntInvalidNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get integer array value [1, 'integer', 0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getIntInvalidString(): Promise<number[]>;
  getIntInvalidString(options: msRest.RequestOptionsBase): Promise<number[]>;
  getIntInvalidString(callback: msRest.ServiceCallback<number[]>): void;
  getIntInvalidString(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getIntInvalidString(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getIntInvalidStringWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get integer array value [1, -1, 3, 300]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getLongValid(): Promise<number[]>;
  getLongValid(options: msRest.RequestOptionsBase): Promise<number[]>;
  getLongValid(callback: msRest.ServiceCallback<number[]>): void;
  getLongValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getLongValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getLongValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value empty [1, -1, 3, 300]
   *
   * @param {number[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putLongValid(arrayBody: number[]): Promise<void>;
  putLongValid(arrayBody: number[], options: msRest.RequestOptionsBase): Promise<void>;
  putLongValid(arrayBody: number[], callback: msRest.ServiceCallback<void>): void;
  putLongValid(arrayBody: number[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putLongValid(arrayBody: number[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putLongValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get long array value [1, null, 0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getLongInvalidNull(): Promise<number[]>;
  getLongInvalidNull(options: msRest.RequestOptionsBase): Promise<number[]>;
  getLongInvalidNull(callback: msRest.ServiceCallback<number[]>): void;
  getLongInvalidNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getLongInvalidNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getLongInvalidNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get long array value [1, 'integer', 0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getLongInvalidString(): Promise<number[]>;
  getLongInvalidString(options: msRest.RequestOptionsBase): Promise<number[]>;
  getLongInvalidString(callback: msRest.ServiceCallback<number[]>): void;
  getLongInvalidString(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getLongInvalidString(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getLongInvalidStringWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get float array value [0, -0.01, 1.2e20]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getFloatValid(): Promise<number[]>;
  getFloatValid(options: msRest.RequestOptionsBase): Promise<number[]>;
  getFloatValid(callback: msRest.ServiceCallback<number[]>): void;
  getFloatValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getFloatValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getFloatValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value [0, -0.01, 1.2e20]
   *
   * @param {number[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putFloatValid(arrayBody: number[]): Promise<void>;
  putFloatValid(arrayBody: number[], options: msRest.RequestOptionsBase): Promise<void>;
  putFloatValid(arrayBody: number[], callback: msRest.ServiceCallback<void>): void;
  putFloatValid(arrayBody: number[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putFloatValid(arrayBody: number[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putFloatValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get float array value [0.0, null, -1.2e20]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getFloatInvalidNull(): Promise<number[]>;
  getFloatInvalidNull(options: msRest.RequestOptionsBase): Promise<number[]>;
  getFloatInvalidNull(callback: msRest.ServiceCallback<number[]>): void;
  getFloatInvalidNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getFloatInvalidNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getFloatInvalidNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get boolean array value [1.0, 'number', 0.0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getFloatInvalidString(): Promise<number[]>;
  getFloatInvalidString(options: msRest.RequestOptionsBase): Promise<number[]>;
  getFloatInvalidString(callback: msRest.ServiceCallback<number[]>): void;
  getFloatInvalidString(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getFloatInvalidString(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getFloatInvalidStringWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get float array value [0, -0.01, 1.2e20]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDoubleValid(): Promise<number[]>;
  getDoubleValid(options: msRest.RequestOptionsBase): Promise<number[]>;
  getDoubleValid(callback: msRest.ServiceCallback<number[]>): void;
  getDoubleValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getDoubleValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getDoubleValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value [0, -0.01, 1.2e20]
   *
   * @param {number[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDoubleValid(arrayBody: number[]): Promise<void>;
  putDoubleValid(arrayBody: number[], options: msRest.RequestOptionsBase): Promise<void>;
  putDoubleValid(arrayBody: number[], callback: msRest.ServiceCallback<void>): void;
  putDoubleValid(arrayBody: number[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDoubleValid(arrayBody: number[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDoubleValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get float array value [0.0, null, -1.2e20]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDoubleInvalidNull(): Promise<number[]>;
  getDoubleInvalidNull(options: msRest.RequestOptionsBase): Promise<number[]>;
  getDoubleInvalidNull(callback: msRest.ServiceCallback<number[]>): void;
  getDoubleInvalidNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getDoubleInvalidNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getDoubleInvalidNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get boolean array value [1.0, 'number', 0.0]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDoubleInvalidString(): Promise<number[]>;
  getDoubleInvalidString(options: msRest.RequestOptionsBase): Promise<number[]>;
  getDoubleInvalidString(callback: msRest.ServiceCallback<number[]>): void;
  getDoubleInvalidString(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number[]>): void;
  getDoubleInvalidString(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number[]>): any {
    return msRest.responseToBody(this.getDoubleInvalidStringWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get string array value ['foo1', 'foo2', 'foo3']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getStringValid(): Promise<string[]>;
  getStringValid(options: msRest.RequestOptionsBase): Promise<string[]>;
  getStringValid(callback: msRest.ServiceCallback<string[]>): void;
  getStringValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  getStringValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.getStringValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putStringValid(arrayBody: string[]): Promise<void>;
  putStringValid(arrayBody: string[], options: msRest.RequestOptionsBase): Promise<void>;
  putStringValid(arrayBody: string[], callback: msRest.ServiceCallback<void>): void;
  putStringValid(arrayBody: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putStringValid(arrayBody: string[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putStringValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get enum array value ['foo1', 'foo2', 'foo3']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.FooEnum[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEnumValid(): Promise<Models.FooEnum[]>;
  getEnumValid(options: msRest.RequestOptionsBase): Promise<Models.FooEnum[]>;
  getEnumValid(callback: msRest.ServiceCallback<Models.FooEnum[]>): void;
  getEnumValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FooEnum[]>): void;
  getEnumValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.FooEnum[]>): any {
    return msRest.responseToBody(this.getEnumValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   *
   * @param {FooEnum[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putEnumValid(arrayBody: Models.FooEnum[]): Promise<void>;
  putEnumValid(arrayBody: Models.FooEnum[], options: msRest.RequestOptionsBase): Promise<void>;
  putEnumValid(arrayBody: Models.FooEnum[], callback: msRest.ServiceCallback<void>): void;
  putEnumValid(arrayBody: Models.FooEnum[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putEnumValid(arrayBody: Models.FooEnum[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putEnumValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get enum array value ['foo1', 'foo2', 'foo3']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getStringEnumValid(): Promise<string[]>;
  getStringEnumValid(options: msRest.RequestOptionsBase): Promise<string[]>;
  getStringEnumValid(callback: msRest.ServiceCallback<string[]>): void;
  getStringEnumValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  getStringEnumValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.getStringEnumValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putStringEnumValid(arrayBody: string[]): Promise<void>;
  putStringEnumValid(arrayBody: string[], options: msRest.RequestOptionsBase): Promise<void>;
  putStringEnumValid(arrayBody: string[], callback: msRest.ServiceCallback<void>): void;
  putStringEnumValid(arrayBody: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putStringEnumValid(arrayBody: string[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putStringEnumValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get string array value ['foo', null, 'foo2']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getStringWithNull(): Promise<string[]>;
  getStringWithNull(options: msRest.RequestOptionsBase): Promise<string[]>;
  getStringWithNull(callback: msRest.ServiceCallback<string[]>): void;
  getStringWithNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  getStringWithNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.getStringWithNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get string array value ['foo', 123, 'foo2']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getStringWithInvalid(): Promise<string[]>;
  getStringWithInvalid(options: msRest.RequestOptionsBase): Promise<string[]>;
  getStringWithInvalid(callback: msRest.ServiceCallback<string[]>): void;
  getStringWithInvalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  getStringWithInvalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.getStringWithInvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
   * 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getUuidValid(): Promise<string[]>;
  getUuidValid(options: msRest.RequestOptionsBase): Promise<string[]>;
  getUuidValid(callback: msRest.ServiceCallback<string[]>): void;
  getUuidValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  getUuidValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.getUuidValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
   * 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putUuidValid(arrayBody: string[]): Promise<void>;
  putUuidValid(arrayBody: string[], options: msRest.RequestOptionsBase): Promise<void>;
  putUuidValid(arrayBody: string[], callback: msRest.ServiceCallback<void>): void;
  putUuidValid(arrayBody: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putUuidValid(arrayBody: string[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putUuidValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getUuidInvalidChars(): Promise<string[]>;
  getUuidInvalidChars(options: msRest.RequestOptionsBase): Promise<string[]>;
  getUuidInvalidChars(callback: msRest.ServiceCallback<string[]>): void;
  getUuidInvalidChars(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  getUuidInvalidChars(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.getUuidInvalidCharsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Date[] | string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateValid(): Promise<Date[] | string[]>;
  getDateValid(options: msRest.RequestOptionsBase): Promise<Date[] | string[]>;
  getDateValid(callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Date[] | string[]>): any {
    return msRest.responseToBody(this.getDateValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
   *
   * @param {Array<Date> | Array<string>} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDateValid(arrayBody: Array<Date> | Array<string>): Promise<void>;
  putDateValid(arrayBody: Array<Date> | Array<string>, options: msRest.RequestOptionsBase): Promise<void>;
  putDateValid(arrayBody: Array<Date> | Array<string>, callback: msRest.ServiceCallback<void>): void;
  putDateValid(arrayBody: Array<Date> | Array<string>, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDateValid(arrayBody: Array<Date> | Array<string>, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDateValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get date array value ['2012-01-01', null, '1776-07-04']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Date[] | string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateInvalidNull(): Promise<Date[] | string[]>;
  getDateInvalidNull(options: msRest.RequestOptionsBase): Promise<Date[] | string[]>;
  getDateInvalidNull(callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateInvalidNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateInvalidNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Date[] | string[]>): any {
    return msRest.responseToBody(this.getDateInvalidNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get date array value ['2011-03-22', 'date']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Date[] | string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateInvalidChars(): Promise<Date[] | string[]>;
  getDateInvalidChars(options: msRest.RequestOptionsBase): Promise<Date[] | string[]>;
  getDateInvalidChars(callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateInvalidChars(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateInvalidChars(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Date[] | string[]>): any {
    return msRest.responseToBody(this.getDateInvalidCharsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
   * '1492-10-12T10:15:01-08:00']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Date[] | string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateTimeValid(): Promise<Date[] | string[]>;
  getDateTimeValid(options: msRest.RequestOptionsBase): Promise<Date[] | string[]>;
  getDateTimeValid(callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateTimeValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateTimeValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Date[] | string[]>): any {
    return msRest.responseToBody(this.getDateTimeValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
   * '1492-10-12T10:15:01-08:00']
   *
   * @param {Array<Date> | Array<string>} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDateTimeValid(arrayBody: Array<Date> | Array<string>): Promise<void>;
  putDateTimeValid(arrayBody: Array<Date> | Array<string>, options: msRest.RequestOptionsBase): Promise<void>;
  putDateTimeValid(arrayBody: Array<Date> | Array<string>, callback: msRest.ServiceCallback<void>): void;
  putDateTimeValid(arrayBody: Array<Date> | Array<string>, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDateTimeValid(arrayBody: Array<Date> | Array<string>, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDateTimeValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get date array value ['2000-12-01t00:00:01z', null]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Date[] | string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateTimeInvalidNull(): Promise<Date[] | string[]>;
  getDateTimeInvalidNull(options: msRest.RequestOptionsBase): Promise<Date[] | string[]>;
  getDateTimeInvalidNull(callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateTimeInvalidNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateTimeInvalidNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Date[] | string[]>): any {
    return msRest.responseToBody(this.getDateTimeInvalidNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get date array value ['2000-12-01t00:00:01z', 'date-time']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Date[] | string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateTimeInvalidChars(): Promise<Date[] | string[]>;
  getDateTimeInvalidChars(options: msRest.RequestOptionsBase): Promise<Date[] | string[]>;
  getDateTimeInvalidChars(callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateTimeInvalidChars(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateTimeInvalidChars(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Date[] | string[]>): any {
    return msRest.responseToBody(this.getDateTimeInvalidCharsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT',
   * 'Wed, 12 Oct 1492 10:15:01 GMT']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Date[] | string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDateTimeRfc1123Valid(): Promise<Date[] | string[]>;
  getDateTimeRfc1123Valid(options: msRest.RequestOptionsBase): Promise<Date[] | string[]>;
  getDateTimeRfc1123Valid(callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateTimeRfc1123Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Date[] | string[]>): void;
  getDateTimeRfc1123Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Date[] | string[]>): any {
    return msRest.responseToBody(this.getDateTimeRfc1123ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct
   * 1492 10:15:01 GMT']
   *
   * @param {Array<Date> | Array<string>} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>): Promise<void>;
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>, options: msRest.RequestOptionsBase): Promise<void>;
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>, callback: msRest.ServiceCallback<void>): void;
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDateTimeRfc1123Valid(arrayBody: Array<Date> | Array<string>, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDateTimeRfc1123ValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDurationValid(): Promise<string[]>;
  getDurationValid(options: msRest.RequestOptionsBase): Promise<string[]>;
  getDurationValid(callback: msRest.ServiceCallback<string[]>): void;
  getDurationValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  getDurationValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[]>): any {
    return msRest.responseToBody(this.getDurationValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   *
   * @param {string[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDurationValid(arrayBody: string[]): Promise<void>;
  putDurationValid(arrayBody: string[], options: msRest.RequestOptionsBase): Promise<void>;
  putDurationValid(arrayBody: string[], callback: msRest.ServiceCallback<void>): void;
  putDurationValid(arrayBody: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDurationValid(arrayBody: string[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDurationValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded
   * in base64
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Uint8Array[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByteValid(): Promise<Uint8Array[]>;
  getByteValid(options: msRest.RequestOptionsBase): Promise<Uint8Array[]>;
  getByteValid(callback: msRest.ServiceCallback<Uint8Array[]>): void;
  getByteValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Uint8Array[]>): void;
  getByteValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Uint8Array[]>): any {
    return msRest.responseToBody(this.getByteValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded
   * in base 64
   *
   * @param {Uint8Array[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putByteValid(arrayBody: Uint8Array[]): Promise<void>;
  putByteValid(arrayBody: Uint8Array[], options: msRest.RequestOptionsBase): Promise<void>;
  putByteValid(arrayBody: Uint8Array[], callback: msRest.ServiceCallback<void>): void;
  putByteValid(arrayBody: Uint8Array[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putByteValid(arrayBody: Uint8Array[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putByteValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Uint8Array[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByteInvalidNull(): Promise<Uint8Array[]>;
  getByteInvalidNull(options: msRest.RequestOptionsBase): Promise<Uint8Array[]>;
  getByteInvalidNull(callback: msRest.ServiceCallback<Uint8Array[]>): void;
  getByteInvalidNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Uint8Array[]>): void;
  getByteInvalidNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Uint8Array[]>): any {
    return msRest.responseToBody(this.getByteInvalidNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with
   * the items base64url encoded
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Uint8Array[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBase64Url(): Promise<Uint8Array[]>;
  getBase64Url(options: msRest.RequestOptionsBase): Promise<Uint8Array[]>;
  getBase64Url(callback: msRest.ServiceCallback<Uint8Array[]>): void;
  getBase64Url(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Uint8Array[]>): void;
  getBase64Url(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Uint8Array[]>): any {
    return msRest.responseToBody(this.getBase64UrlWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get array of complex type null value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getComplexNull(): Promise<Models.Product[]>;
  getComplexNull(options: msRest.RequestOptionsBase): Promise<Models.Product[]>;
  getComplexNull(callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Product[]>): any {
    return msRest.responseToBody(this.getComplexNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get empty array of complex type []
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getComplexEmpty(): Promise<Models.Product[]>;
  getComplexEmpty(options: msRest.RequestOptionsBase): Promise<Models.Product[]>;
  getComplexEmpty(callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Product[]>): any {
    return msRest.responseToBody(this.getComplexEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5,
   * 'string': '6'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getComplexItemNull(): Promise<Models.Product[]>;
  getComplexItemNull(options: msRest.RequestOptionsBase): Promise<Models.Product[]>;
  getComplexItemNull(callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexItemNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexItemNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Product[]>): any {
    return msRest.responseToBody(this.getComplexItemNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5,
   * 'string': '6'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getComplexItemEmpty(): Promise<Models.Product[]>;
  getComplexItemEmpty(options: msRest.RequestOptionsBase): Promise<Models.Product[]>;
  getComplexItemEmpty(callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexItemEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexItemEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Product[]>): any {
    return msRest.responseToBody(this.getComplexItemEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'},
   * {'integer': 5, 'string': '6'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Product[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getComplexValid(): Promise<Models.Product[]>;
  getComplexValid(options: msRest.RequestOptionsBase): Promise<Models.Product[]>;
  getComplexValid(callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product[]>): void;
  getComplexValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Product[]>): any {
    return msRest.responseToBody(this.getComplexValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string':
   * '4'}, {'integer': 5, 'string': '6'}]
   *
   * @param {Product[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putComplexValid(arrayBody: Models.Product[]): Promise<void>;
  putComplexValid(arrayBody: Models.Product[], options: msRest.RequestOptionsBase): Promise<void>;
  putComplexValid(arrayBody: Models.Product[], callback: msRest.ServiceCallback<void>): void;
  putComplexValid(arrayBody: Models.Product[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putComplexValid(arrayBody: Models.Product[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putComplexValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get a null array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[][]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getArrayNull(): Promise<string[][]>;
  getArrayNull(options: msRest.RequestOptionsBase): Promise<string[][]>;
  getArrayNull(callback: msRest.ServiceCallback<string[][]>): void;
  getArrayNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[][]>): void;
  getArrayNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[][]>): any {
    return msRest.responseToBody(this.getArrayNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an empty array []
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[][]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getArrayEmpty(): Promise<string[][]>;
  getArrayEmpty(options: msRest.RequestOptionsBase): Promise<string[][]>;
  getArrayEmpty(callback: msRest.ServiceCallback<string[][]>): void;
  getArrayEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[][]>): void;
  getArrayEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[][]>): any {
    return msRest.responseToBody(this.getArrayEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[][]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getArrayItemNull(): Promise<string[][]>;
  getArrayItemNull(options: msRest.RequestOptionsBase): Promise<string[][]>;
  getArrayItemNull(callback: msRest.ServiceCallback<string[][]>): void;
  getArrayItemNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[][]>): void;
  getArrayItemNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[][]>): any {
    return msRest.responseToBody(this.getArrayItemNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[][]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getArrayItemEmpty(): Promise<string[][]>;
  getArrayItemEmpty(options: msRest.RequestOptionsBase): Promise<string[][]>;
  getArrayItemEmpty(callback: msRest.ServiceCallback<string[][]>): void;
  getArrayItemEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[][]>): void;
  getArrayItemEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[][]>): any {
    return msRest.responseToBody(this.getArrayItemEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string[][]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getArrayValid(): Promise<string[][]>;
  getArrayValid(options: msRest.RequestOptionsBase): Promise<string[][]>;
  getArrayValid(callback: msRest.ServiceCallback<string[][]>): void;
  getArrayValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[][]>): void;
  getArrayValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string[][]>): any {
    return msRest.responseToBody(this.getArrayValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   *
   * @param {string[][]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putArrayValid(arrayBody: string[][]): Promise<void>;
  putArrayValid(arrayBody: string[][], options: msRest.RequestOptionsBase): Promise<void>;
  putArrayValid(arrayBody: string[][], callback: msRest.ServiceCallback<void>): void;
  putArrayValid(arrayBody: string[][], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putArrayValid(arrayBody: string[][], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putArrayValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

  /**
   * Get an array of Dictionaries with value null
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string }[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDictionaryNull(): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryNull(options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryNull(callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): any {
    return msRest.responseToBody(this.getDictionaryNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value []
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string }[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDictionaryEmpty(): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryEmpty(options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryEmpty(callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): any {
    return msRest.responseToBody(this.getDictionaryEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string }[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDictionaryItemNull(): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryItemNull(options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryItemNull(callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryItemNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryItemNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): any {
    return msRest.responseToBody(this.getDictionaryItemNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string }[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDictionaryItemEmpty(): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryItemEmpty(options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryItemEmpty(callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryItemEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryItemEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): any {
    return msRest.responseToBody(this.getDictionaryItemEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string }[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDictionaryValid(): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryValid(options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string }[]>;
  getDictionaryValid(callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): void;
  getDictionaryValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string }[]>): any {
    return msRest.responseToBody(this.getDictionaryValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   *
   * @param {{ [propertyName: string]: string }[]} arrayBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[]): Promise<void>;
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[], options: msRest.RequestOptionsBase): Promise<void>;
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[], callback: msRest.ServiceCallback<void>): void;
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putDictionaryValid(arrayBody: { [propertyName: string]: string }[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDictionaryValidWithHttpOperationResponse.bind(this), arrayBody, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/invalid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/empty",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "stringElementType",
          type: {
            name: "String"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanTfftOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/boolean/tfft",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "booleanElementType",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBooleanTfftOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/boolean/tfft",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "booleanElementType",
          type: {
            name: "Boolean"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanInvalidNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/boolean/true.null.false",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "booleanElementType",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanInvalidStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/boolean/true.boolean.false",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "booleanElementType",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntegerValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/integer/1.-1.3.300",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putIntegerValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/integer/1.-1.3.300",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "numberElementType",
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntInvalidNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/integer/1.null.zero",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntInvalidStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/integer/1.integer.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/long/1.-1.3.300",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putLongValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/long/1.-1.3.300",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "numberElementType",
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongInvalidNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/long/1.null.zero",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongInvalidStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/long/1.integer.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/float/0--0.01-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putFloatValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/float/0--0.01-1.2e20",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "numberElementType",
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatInvalidNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/float/0.0-null-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatInvalidStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/float/1.number.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/double/0--0.01-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDoubleValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/double/0--0.01-1.2e20",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "numberElementType",
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleInvalidNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/double/0.0-null-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleInvalidStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/double/1.number.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "numberElementType",
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/string/foo1.foo2.foo3",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putStringValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/string/foo1.foo2.foo3",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "stringElementType",
          type: {
            name: "String"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEnumValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/enum/foo1.foo2.foo3",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "FooEnumElementType",
            type: {
              name: "Enum",
              allowedValues: [
                "foo1",
                "foo2",
                "foo3"
              ]
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putEnumValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/enum/foo1.foo2.foo3",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "FooEnumElementType",
          type: {
            name: "Enum",
            allowedValues: [
              "foo1",
              "foo2",
              "foo3"
            ]
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringEnumValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/string-enum/foo1.foo2.foo3",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putStringEnumValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/string-enum/foo1.foo2.foo3",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "stringElementType",
          type: {
            name: "String"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringWithNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/string/foo.null.foo2",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringWithInvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/string/foo.123.foo2",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUuidValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/uuid/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "Uuid"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putUuidValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/uuid/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "stringElementType",
          type: {
            name: "Uuid"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUuidInvalidCharsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/uuid/invalidchars",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "Uuid"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "DateElementType",
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/date/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "DateElementType",
          type: {
            name: "Date"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateInvalidNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "DateElementType",
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateInvalidCharsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date/invalidchars",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "DateElementType",
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date-time/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "DateElementType",
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateTimeValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/date-time/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "DateElementType",
          type: {
            name: "DateTime"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeInvalidNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date-time/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "DateElementType",
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeInvalidCharsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date-time/invalidchars",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "DateElementType",
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeRfc1123ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/date-time-rfc1123/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "DateElementType",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateTimeRfc1123ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/date-time-rfc1123/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "DateElementType",
          type: {
            name: "DateTimeRfc1123"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDurationValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/duration/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "TimeSpan"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDurationValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/duration/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "stringElementType",
          type: {
            name: "TimeSpan"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByteValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/byte/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "Uint8ArrayElementType",
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putByteValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/prim/byte/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "Uint8ArrayElementType",
          type: {
            name: "ByteArray"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByteInvalidNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/byte/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "Uint8ArrayElementType",
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBase64UrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/prim/base64url/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "Uint8ArrayElementType",
            type: {
              name: "Base64Url"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ProductElementType",
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ProductElementType",
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexItemNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ProductElementType",
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexItemEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ProductElementType",
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/complex/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ProductElementType",
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putComplexValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/complex/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "ProductElementType",
          type: {
            name: "Composite",
            className: "Product"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ArrayElementType",
            type: {
              name: "Sequence",
              element: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ArrayElementType",
            type: {
              name: "Sequence",
              element: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayItemNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ArrayElementType",
            type: {
              name: "Sequence",
              element: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayItemEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ArrayElementType",
            type: {
              name: "Sequence",
              element: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/array/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ArrayElementType",
            type: {
              name: "Sequence",
              element: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putArrayValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/array/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "ArrayElementType",
          type: {
            name: "Sequence",
            element: {
              serializedName: "stringElementType",
              type: {
                name: "String"
              }
            }
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ObjectElementType",
            type: {
              name: "Dictionary",
              value: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ObjectElementType",
            type: {
              name: "Dictionary",
              value: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryItemNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ObjectElementType",
            type: {
              name: "Dictionary",
              value: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryItemEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ObjectElementType",
            type: {
              name: "Dictionary",
              value: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "array/dictionary/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "ObjectElementType",
            type: {
              name: "Dictionary",
              value: {
                serializedName: "stringElementType",
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDictionaryValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "array/dictionary/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Sequence",
        element: {
          serializedName: "ObjectElementType",
          type: {
            name: "Dictionary",
            value: {
              serializedName: "stringElementType",
              type: {
                name: "String"
              }
            }
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
