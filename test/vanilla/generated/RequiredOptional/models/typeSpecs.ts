/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { compositeSpec, CompositeTypeSpec, numberSpec, sequenceSpec, stringSpec } from "ms-rest-js";

export const ErrorModel: CompositeTypeSpec = compositeSpec("ErrorModel", {
  status: {
    valueSpec: numberSpec
  },
  message: {
    valueSpec: stringSpec
  }
});

export const IntWrapper: CompositeTypeSpec = compositeSpec("IntWrapper", {
  value: {
    required: true,
    valueSpec: numberSpec
  }
});

export const IntOptionalWrapper: CompositeTypeSpec = compositeSpec("IntOptionalWrapper", {
  value: {
    valueSpec: numberSpec
  }
});

export const StringWrapper: CompositeTypeSpec = compositeSpec("StringWrapper", {
  value: {
    required: true,
    valueSpec: stringSpec
  }
});

export const StringOptionalWrapper: CompositeTypeSpec = compositeSpec("StringOptionalWrapper", {
  value: {
    valueSpec: stringSpec
  }
});

export const ArrayWrapper: CompositeTypeSpec = compositeSpec("ArrayWrapper", {
  value: {
    required: true,
    valueSpec: sequenceSpec(stringSpec)
  }
});

export const ArrayOptionalWrapper: CompositeTypeSpec = compositeSpec("ArrayOptionalWrapper", {
  value: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

export const Product: CompositeTypeSpec = compositeSpec("Product", {
  id: {
    required: true,
    valueSpec: numberSpec
  },
  name: {
    valueSpec: stringSpec
  }
});

export const ClassWrapper: CompositeTypeSpec = compositeSpec("ClassWrapper", {
  value: {
    required: true,
    valueSpec: Product
  }
});

export const ClassOptionalWrapper: CompositeTypeSpec = compositeSpec("ClassOptionalWrapper", {
  value: {
    valueSpec: Product
  }
});

export const AutoRestRequiredOptionalTestServiceOptions: CompositeTypeSpec = compositeSpec("AutoRestRequiredOptionalTestServiceOptions", {
  /**
   * number of items to skip
   */
  optionalGlobalQuery: {
    serializedName: "optional-global-query",
    valueSpec: numberSpec
  }
});

/**
 * Optional Parameters.
 */
export const ImplicitPutOptionalQueryOptionalParams: CompositeTypeSpec = compositeSpec("ImplicitPutOptionalQueryOptionalParams", {
  queryParameter: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const ImplicitPutOptionalHeaderOptionalParams: CompositeTypeSpec = compositeSpec("ImplicitPutOptionalHeaderOptionalParams", {
  queryParameter: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const ImplicitPutOptionalBodyOptionalParams: CompositeTypeSpec = compositeSpec("ImplicitPutOptionalBodyOptionalParams", {
  bodyParameter: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalIntegerParameterOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalIntegerParameterOptionalParams", {
  bodyParameter: {
    valueSpec: numberSpec
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalIntegerPropertyOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalIntegerPropertyOptionalParams", {
  value: {
    valueSpec: numberSpec
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalIntegerHeaderOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalIntegerHeaderOptionalParams", {
  headerParameter: {
    valueSpec: numberSpec
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalStringParameterOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalStringParameterOptionalParams", {
  bodyParameter: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalStringPropertyOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalStringPropertyOptionalParams", {
  value: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalStringHeaderOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalStringHeaderOptionalParams", {
  bodyParameter: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalClassParameterOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalClassParameterOptionalParams", {
  bodyParameter: {
    valueSpec: Product
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalClassPropertyOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalClassPropertyOptionalParams", {
  value: {
    valueSpec: Product
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalArrayParameterOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalArrayParameterOptionalParams", {
  bodyParameter: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalArrayPropertyOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalArrayPropertyOptionalParams", {
  value: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalArrayHeaderOptionalParams: CompositeTypeSpec = compositeSpec("ExplicitPostOptionalArrayHeaderOptionalParams", {
  headerParameter: {
    valueSpec: sequenceSpec(stringSpec)
  }
});
