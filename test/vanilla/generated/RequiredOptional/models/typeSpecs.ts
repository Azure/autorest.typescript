/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { compositeSpec, CompositeTypeSpec, numberSpec, sequenceSpec, stringSpec } from "ms-rest-js";

export const ErrorModel: CompositeTypeSpec = compositeSpec({
  typeName: "ErrorModel",
  propertySpecs: {
    status: {
      valueSpec: numberSpec
    },
    message: {
      valueSpec: stringSpec
    }
  }
});

export const IntWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "IntWrapper",
  propertySpecs: {
    value: {
      required: true,
      valueSpec: numberSpec
    }
  }
});

export const IntOptionalWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "IntOptionalWrapper",
  propertySpecs: {
    value: {
      valueSpec: numberSpec
    }
  }
});

export const StringWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "StringWrapper",
  propertySpecs: {
    value: {
      required: true,
      valueSpec: stringSpec
    }
  }
});

export const StringOptionalWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "StringOptionalWrapper",
  propertySpecs: {
    value: {
      valueSpec: stringSpec
    }
  }
});

export const ArrayWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "ArrayWrapper",
  propertySpecs: {
    value: {
      required: true,
      valueSpec: sequenceSpec(stringSpec)
    }
  }
});

export const ArrayOptionalWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "ArrayOptionalWrapper",
  propertySpecs: {
    value: {
      valueSpec: sequenceSpec(stringSpec)
    }
  }
});

export const Product: CompositeTypeSpec = compositeSpec({
  typeName: "Product",
  propertySpecs: {
    id: {
      required: true,
      valueSpec: numberSpec
    },
    name: {
      valueSpec: stringSpec
    }
  }
});

export const ClassWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "ClassWrapper",
  propertySpecs: {
    value: {
      required: true,
      valueSpec: Product
    }
  }
});

export const ClassOptionalWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "ClassOptionalWrapper",
  propertySpecs: {
    value: {
      valueSpec: Product
    }
  }
});

export const AutoRestRequiredOptionalTestServiceOptions: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestRequiredOptionalTestServiceOptions",
  propertySpecs: {
    /**
     * number of items to skip
     */
    optionalGlobalQuery: {
      serializedName: "optional-global-query",
      valueSpec: numberSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ImplicitPutOptionalQueryOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ImplicitPutOptionalQueryOptionalParams",
  propertySpecs: {
    queryParameter: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ImplicitPutOptionalHeaderOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ImplicitPutOptionalHeaderOptionalParams",
  propertySpecs: {
    queryParameter: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ImplicitPutOptionalBodyOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ImplicitPutOptionalBodyOptionalParams",
  propertySpecs: {
    bodyParameter: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalIntegerParameterOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalIntegerParameterOptionalParams",
  propertySpecs: {
    bodyParameter: {
      valueSpec: numberSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalIntegerPropertyOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalIntegerPropertyOptionalParams",
  propertySpecs: {
    value: {
      valueSpec: numberSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalIntegerHeaderOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalIntegerHeaderOptionalParams",
  propertySpecs: {
    headerParameter: {
      valueSpec: numberSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalStringParameterOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalStringParameterOptionalParams",
  propertySpecs: {
    bodyParameter: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalStringPropertyOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalStringPropertyOptionalParams",
  propertySpecs: {
    value: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalStringHeaderOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalStringHeaderOptionalParams",
  propertySpecs: {
    bodyParameter: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalClassParameterOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalClassParameterOptionalParams",
  propertySpecs: {
    bodyParameter: {
      valueSpec: Product
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalClassPropertyOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalClassPropertyOptionalParams",
  propertySpecs: {
    value: {
      valueSpec: Product
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalArrayParameterOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalArrayParameterOptionalParams",
  propertySpecs: {
    bodyParameter: {
      valueSpec: sequenceSpec(stringSpec)
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalArrayPropertyOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalArrayPropertyOptionalParams",
  propertySpecs: {
    value: {
      valueSpec: sequenceSpec(stringSpec)
    }
  }
});

/**
 * Optional Parameters.
 */
export const ExplicitPostOptionalArrayHeaderOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "ExplicitPostOptionalArrayHeaderOptionalParams",
  propertySpecs: {
    headerParameter: {
      valueSpec: sequenceSpec(stringSpec)
    }
  }
});
