/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/implicitMappers";
import { AutoRestRequiredOptionalTestServiceContext } from "../autoRestRequiredOptionalTestServiceContext";

/** Class representing a Implicit. */
export class Implicit {
  private readonly client: AutoRestRequiredOptionalTestServiceContext;

  /**
   * Create a Implicit.
   * @param {AutoRestRequiredOptionalTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestRequiredOptionalTestServiceContext) {
    this.client = client;
  }

  /**
   * Test implicitly required path parameter
   *
   * @param {string} pathParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getRequiredPathWithHttpOperationResponse(pathParameter: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            pathParameter
          },
          options),
        getRequiredPathOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test implicitly optional query parameter
   *
   * @param {ImplicitPutOptionalQueryOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putOptionalQueryWithHttpOperationResponse(options?: Models.ImplicitPutOptionalQueryOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let queryParameter = (options && options.queryParameter !== undefined) ? options.queryParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            queryParameter
          },
          options),
        putOptionalQueryOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test implicitly optional header parameter
   *
   * @param {ImplicitPutOptionalHeaderOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putOptionalHeaderWithHttpOperationResponse(options?: Models.ImplicitPutOptionalHeaderOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let queryParameter = (options && options.queryParameter !== undefined) ? options.queryParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            queryParameter
          },
          options),
        putOptionalHeaderOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test implicitly optional body parameter
   *
   * @param {ImplicitPutOptionalBodyOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async putOptionalBodyWithHttpOperationResponse(options?: Models.ImplicitPutOptionalBodyOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let bodyParameter = (options && options.bodyParameter !== undefined) ? options.bodyParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        putOptionalBodyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test implicitly required path parameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getRequiredGlobalPathWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getRequiredGlobalPathOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test implicitly required query parameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getRequiredGlobalQueryWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getRequiredGlobalQueryOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test implicitly optional query parameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getOptionalGlobalQueryWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), getOptionalGlobalQueryOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test implicitly required path parameter
   *
   * @param {string} pathParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getRequiredPath(pathParameter: string): Promise<Models.ErrorModel>;
  getRequiredPath(pathParameter: string, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  getRequiredPath(pathParameter: string, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  getRequiredPath(pathParameter: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  getRequiredPath(): any {
    return msRest.responseToBody(this.getRequiredPathWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test implicitly optional query parameter
   *
   * @param {ImplicitPutOptionalQueryOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putOptionalQuery(): Promise<void>;
  putOptionalQuery(options: Models.ImplicitPutOptionalQueryOptionalParams): Promise<void>;
  putOptionalQuery(callback: msRest.ServiceCallback<void>): void;
  putOptionalQuery(options: Models.ImplicitPutOptionalQueryOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putOptionalQuery(): any {
    return msRest.responseToBody(this.putOptionalQueryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test implicitly optional header parameter
   *
   * @param {ImplicitPutOptionalHeaderOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putOptionalHeader(): Promise<void>;
  putOptionalHeader(options: Models.ImplicitPutOptionalHeaderOptionalParams): Promise<void>;
  putOptionalHeader(callback: msRest.ServiceCallback<void>): void;
  putOptionalHeader(options: Models.ImplicitPutOptionalHeaderOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putOptionalHeader(): any {
    return msRest.responseToBody(this.putOptionalHeaderWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test implicitly optional body parameter
   *
   * @param {ImplicitPutOptionalBodyOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putOptionalBody(): Promise<void>;
  putOptionalBody(options: Models.ImplicitPutOptionalBodyOptionalParams): Promise<void>;
  putOptionalBody(callback: msRest.ServiceCallback<void>): void;
  putOptionalBody(options: Models.ImplicitPutOptionalBodyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putOptionalBody(): any {
    return msRest.responseToBody(this.putOptionalBodyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test implicitly required path parameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getRequiredGlobalPath(): Promise<Models.ErrorModel>;
  getRequiredGlobalPath(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  getRequiredGlobalPath(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  getRequiredGlobalPath(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  getRequiredGlobalPath(): any {
    return msRest.responseToBody(this.getRequiredGlobalPathWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test implicitly required query parameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getRequiredGlobalQuery(): Promise<Models.ErrorModel>;
  getRequiredGlobalQuery(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  getRequiredGlobalQuery(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  getRequiredGlobalQuery(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  getRequiredGlobalQuery(): any {
    return msRest.responseToBody(this.getRequiredGlobalQueryWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test implicitly optional query parameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOptionalGlobalQuery(): Promise<Models.ErrorModel>;
  getOptionalGlobalQuery(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  getOptionalGlobalQuery(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  getOptionalGlobalQuery(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  getOptionalGlobalQuery(): any {
    return msRest.responseToBody(this.getOptionalGlobalQueryWithHttpOperationResponse.bind(this), arguments);
  }

}

// Operation Specifications
const getRequiredPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "reqopt/implicit/required/path/{pathParameter}",
  urlParameters: [
    {
      parameterPath: "pathParameter",
      mapper: {
        required: true,
        serializedName: "pathParameter",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putOptionalQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "reqopt/implicit/optional/query",
  queryParameters: [
    {
      parameterPath: "queryParameter",
      mapper: {
        serializedName: "queryParameter",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putOptionalHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "reqopt/implicit/optional/header",
  headerParameters: [
    {
      parameterPath: "queryParameter",
      mapper: {
        serializedName: "queryParameter",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putOptionalBodyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "reqopt/implicit/optional/body",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: {
      serializedName: "bodyParameter",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getRequiredGlobalPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "reqopt/global/required/path/{required-global-path}",
  urlParameters: [
    {
      parameterPath: "requiredGlobalPath",
      mapper: {
        required: true,
        serializedName: "required-global-path",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getRequiredGlobalQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "reqopt/global/required/query",
  queryParameters: [
    {
      parameterPath: "requiredGlobalQuery",
      mapper: {
        required: true,
        serializedName: "required-global-query",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getOptionalGlobalQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "reqopt/global/optional/query",
  queryParameters: [
    {
      parameterPath: "optionalGlobalQuery",
      mapper: {
        serializedName: "optional-global-query",
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
