/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/implicitMappers";
import * as Parameters from "../models/parameters";
import { AutoRestRequiredOptionalTestServiceContext } from "../autoRestRequiredOptionalTestServiceContext";

/** Class representing a Implicit. */
export class Implicit {
  private readonly client: AutoRestRequiredOptionalTestServiceContext;

  /**
   * Create a Implicit.
   * @param {AutoRestRequiredOptionalTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestRequiredOptionalTestServiceContext) {
    this.client = client;
  }

  /**
   * Test implicitly required path parameter
   * @param pathParameter
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getRequiredPath(pathParameter: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param pathParameter
   * @param callback The callback
   */
  getRequiredPath(pathParameter: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param pathParameter
   * @param options The optional parameters
   * @param callback The callback
   */
  getRequiredPath(pathParameter: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getRequiredPath(pathParameter: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        pathParameter,
        options
      },
      getRequiredPathOperationSpec,
      callback);
  }

  /**
   * Test implicitly optional query parameter
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putOptionalQuery(options?: Models.ImplicitPutOptionalQueryOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putOptionalQuery(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putOptionalQuery(options: Models.ImplicitPutOptionalQueryOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  putOptionalQuery(options?: Models.ImplicitPutOptionalQueryOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putOptionalQueryOperationSpec,
      callback);
  }

  /**
   * Test implicitly optional header parameter
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putOptionalHeader(options?: Models.ImplicitPutOptionalHeaderOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putOptionalHeader(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putOptionalHeader(options: Models.ImplicitPutOptionalHeaderOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  putOptionalHeader(options?: Models.ImplicitPutOptionalHeaderOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putOptionalHeaderOperationSpec,
      callback);
  }

  /**
   * Test implicitly optional body parameter
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putOptionalBody(options?: Models.ImplicitPutOptionalBodyOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putOptionalBody(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putOptionalBody(options: Models.ImplicitPutOptionalBodyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  putOptionalBody(options?: Models.ImplicitPutOptionalBodyOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putOptionalBodyOperationSpec,
      callback);
  }

  /**
   * Test implicitly required path parameter
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getRequiredGlobalPath(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getRequiredGlobalPath(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRequiredGlobalPath(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getRequiredGlobalPath(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRequiredGlobalPathOperationSpec,
      callback);
  }

  /**
   * Test implicitly required query parameter
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getRequiredGlobalQuery(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getRequiredGlobalQuery(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRequiredGlobalQuery(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getRequiredGlobalQuery(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRequiredGlobalQueryOperationSpec,
      callback);
  }

  /**
   * Test implicitly optional query parameter
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getOptionalGlobalQuery(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getOptionalGlobalQuery(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOptionalGlobalQuery(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getOptionalGlobalQuery(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOptionalGlobalQueryOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getRequiredPathOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "reqopt/implicit/required/path/{pathParameter}",
  urlParameters: [
    Parameters.pathParameter
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putOptionalQueryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "reqopt/implicit/optional/query",
  queryParameters: [
    Parameters.queryParameter
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putOptionalHeaderOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "reqopt/implicit/optional/header",
  headerParameters: [
    Parameters.queryParameter
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putOptionalBodyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "reqopt/implicit/optional/body",
  requestBody: {
    parameterPath: [
      "options",
      "bodyParameter"
    ],
    mapper: {
      serializedName: "bodyParameter",
      type: {
        name: "String"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getRequiredGlobalPathOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "reqopt/global/required/path/{required-global-path}",
  urlParameters: [
    Parameters.requiredGlobalPath
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getRequiredGlobalQueryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "reqopt/global/required/query",
  queryParameters: [
    Parameters.requiredGlobalQuery
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOptionalGlobalQueryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "reqopt/global/optional/query",
  queryParameters: [
    Parameters.optionalGlobalQuery
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
