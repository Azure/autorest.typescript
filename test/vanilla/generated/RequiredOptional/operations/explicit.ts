/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/explicitMappers";
import { AutoRestRequiredOptionalTestServiceContext } from "../autoRestRequiredOptionalTestServiceContext";

/** Class representing a Explicit. */
export class Explicit {
  private readonly client: AutoRestRequiredOptionalTestServiceContext;

  /**
   * Create a Explicit.
   * @param {AutoRestRequiredOptionalTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestRequiredOptionalTestServiceContext) {
    this.client = client;
  }

  /**
   * Test explicitly required integer. Please put null and the client library should throw before the
   * request is sent.
   *
   * @param {number} bodyParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredIntegerParameterWithHttpOperationResponse(bodyParameter: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postRequiredIntegerParameterOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional integer. Please put null.
   *
   * @param {ExplicitPostOptionalIntegerParameterOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalIntegerParameterWithHttpOperationResponse(options?: Models.ExplicitPostOptionalIntegerParameterOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let bodyParameter = (options && options.bodyParameter !== undefined) ? options.bodyParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postOptionalIntegerParameterOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the
   * client library should throw before the request is sent.
   *
   * @param {number} value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredIntegerPropertyWithHttpOperationResponse(value: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            value
          },
          options),
        postRequiredIntegerPropertyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
   *
   * @param {ExplicitPostOptionalIntegerPropertyOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalIntegerPropertyWithHttpOperationResponse(options?: Models.ExplicitPostOptionalIntegerPropertyOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let value = (options && options.value !== undefined) ? options.value : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            value
          },
          options),
        postOptionalIntegerPropertyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required integer. Please put a header 'headerParameter' => null and the client
   * library should throw before the request is sent.
   *
   * @param {number} headerParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredIntegerHeaderWithHttpOperationResponse(headerParameter: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            headerParameter
          },
          options),
        postRequiredIntegerHeaderOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional integer. Please put a header 'headerParameter' => null.
   *
   * @param {ExplicitPostOptionalIntegerHeaderOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalIntegerHeaderWithHttpOperationResponse(options?: Models.ExplicitPostOptionalIntegerHeaderOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let headerParameter = (options && options.headerParameter !== undefined) ? options.headerParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            headerParameter
          },
          options),
        postOptionalIntegerHeaderOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required string. Please put null and the client library should throw before the
   * request is sent.
   *
   * @param {string} bodyParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredStringParameterWithHttpOperationResponse(bodyParameter: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postRequiredStringParameterOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional string. Please put null.
   *
   * @param {ExplicitPostOptionalStringParameterOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalStringParameterWithHttpOperationResponse(options?: Models.ExplicitPostOptionalStringParameterOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let bodyParameter = (options && options.bodyParameter !== undefined) ? options.bodyParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postOptionalStringParameterOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the
   * client library should throw before the request is sent.
   *
   * @param {string} value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredStringPropertyWithHttpOperationResponse(value: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            value
          },
          options),
        postRequiredStringPropertyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
   *
   * @param {ExplicitPostOptionalStringPropertyOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalStringPropertyWithHttpOperationResponse(options?: Models.ExplicitPostOptionalStringPropertyOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let value = (options && options.value !== undefined) ? options.value : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            value
          },
          options),
        postOptionalStringPropertyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required string. Please put a header 'headerParameter' => null and the client
   * library should throw before the request is sent.
   *
   * @param {string} headerParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredStringHeaderWithHttpOperationResponse(headerParameter: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            headerParameter
          },
          options),
        postRequiredStringHeaderOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional string. Please put a header 'headerParameter' => null.
   *
   * @param {ExplicitPostOptionalStringHeaderOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalStringHeaderWithHttpOperationResponse(options?: Models.ExplicitPostOptionalStringHeaderOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let bodyParameter = (options && options.bodyParameter !== undefined) ? options.bodyParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postOptionalStringHeaderOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required complex object. Please put null and the client library should throw
   * before the request is sent.
   *
   * @param {Product} bodyParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredClassParameterWithHttpOperationResponse(bodyParameter: Models.Product, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postRequiredClassParameterOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional complex object. Please put null.
   *
   * @param {ExplicitPostOptionalClassParameterOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalClassParameterWithHttpOperationResponse(options?: Models.ExplicitPostOptionalClassParameterOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let bodyParameter = (options && options.bodyParameter !== undefined) ? options.bodyParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postOptionalClassParameterOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null
   * and the client library should throw before the request is sent.
   *
   * @param {Product} value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredClassPropertyWithHttpOperationResponse(value: Models.Product, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            value
          },
          options),
        postRequiredClassPropertyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
   *
   * @param {ExplicitPostOptionalClassPropertyOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalClassPropertyWithHttpOperationResponse(options?: Models.ExplicitPostOptionalClassPropertyOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let value = (options && options.value !== undefined) ? options.value : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            value
          },
          options),
        postOptionalClassPropertyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required array. Please put null and the client library should throw before the
   * request is sent.
   *
   * @param {string[]} bodyParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredArrayParameterWithHttpOperationResponse(bodyParameter: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postRequiredArrayParameterOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional array. Please put null.
   *
   * @param {ExplicitPostOptionalArrayParameterOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalArrayParameterWithHttpOperationResponse(options?: Models.ExplicitPostOptionalArrayParameterOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let bodyParameter = (options && options.bodyParameter !== undefined) ? options.bodyParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            bodyParameter
          },
          options),
        postOptionalArrayParameterOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the
   * client library should throw before the request is sent.
   *
   * @param {string[]} value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredArrayPropertyWithHttpOperationResponse(value: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            value
          },
          options),
        postRequiredArrayPropertyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
   *
   * @param {ExplicitPostOptionalArrayPropertyOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalArrayPropertyWithHttpOperationResponse(options?: Models.ExplicitPostOptionalArrayPropertyOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let value = (options && options.value !== undefined) ? options.value : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            value
          },
          options),
        postOptionalArrayPropertyOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required array. Please put a header 'headerParameter' => null and the client
   * library should throw before the request is sent.
   *
   * @param {string[]} headerParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postRequiredArrayHeaderWithHttpOperationResponse(headerParameter: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            headerParameter
          },
          options),
        postRequiredArrayHeaderOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly optional integer. Please put a header 'headerParameter' => null.
   *
   * @param {ExplicitPostOptionalArrayHeaderOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async postOptionalArrayHeaderWithHttpOperationResponse(options?: Models.ExplicitPostOptionalArrayHeaderOptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let headerParameter = (options && options.headerParameter !== undefined) ? options.headerParameter : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            headerParameter
          },
          options),
        postOptionalArrayHeaderOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Test explicitly required integer. Please put null and the client library should throw before the
   * request is sent.
   *
   * @param {number} bodyParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredIntegerParameter(bodyParameter: number): Promise<Models.ErrorModel>;
  postRequiredIntegerParameter(bodyParameter: number, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredIntegerParameter(bodyParameter: number, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredIntegerParameter(bodyParameter: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredIntegerParameter(): any {
    return msRest.responseToBody(this.postRequiredIntegerParameterWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional integer. Please put null.
   *
   * @param {ExplicitPostOptionalIntegerParameterOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalIntegerParameter(): Promise<void>;
  postOptionalIntegerParameter(options: Models.ExplicitPostOptionalIntegerParameterOptionalParams): Promise<void>;
  postOptionalIntegerParameter(callback: msRest.ServiceCallback<void>): void;
  postOptionalIntegerParameter(options: Models.ExplicitPostOptionalIntegerParameterOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalIntegerParameter(): any {
    return msRest.responseToBody(this.postOptionalIntegerParameterWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the
   * client library should throw before the request is sent.
   *
   * @param {number} value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredIntegerProperty(value: number): Promise<Models.ErrorModel>;
  postRequiredIntegerProperty(value: number, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredIntegerProperty(value: number, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredIntegerProperty(value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredIntegerProperty(): any {
    return msRest.responseToBody(this.postRequiredIntegerPropertyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
   *
   * @param {ExplicitPostOptionalIntegerPropertyOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalIntegerProperty(): Promise<void>;
  postOptionalIntegerProperty(options: Models.ExplicitPostOptionalIntegerPropertyOptionalParams): Promise<void>;
  postOptionalIntegerProperty(callback: msRest.ServiceCallback<void>): void;
  postOptionalIntegerProperty(options: Models.ExplicitPostOptionalIntegerPropertyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalIntegerProperty(): any {
    return msRest.responseToBody(this.postOptionalIntegerPropertyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required integer. Please put a header 'headerParameter' => null and the client
   * library should throw before the request is sent.
   *
   * @param {number} headerParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredIntegerHeader(headerParameter: number): Promise<Models.ErrorModel>;
  postRequiredIntegerHeader(headerParameter: number, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredIntegerHeader(headerParameter: number, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredIntegerHeader(headerParameter: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredIntegerHeader(): any {
    return msRest.responseToBody(this.postRequiredIntegerHeaderWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional integer. Please put a header 'headerParameter' => null.
   *
   * @param {ExplicitPostOptionalIntegerHeaderOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalIntegerHeader(): Promise<void>;
  postOptionalIntegerHeader(options: Models.ExplicitPostOptionalIntegerHeaderOptionalParams): Promise<void>;
  postOptionalIntegerHeader(callback: msRest.ServiceCallback<void>): void;
  postOptionalIntegerHeader(options: Models.ExplicitPostOptionalIntegerHeaderOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalIntegerHeader(): any {
    return msRest.responseToBody(this.postOptionalIntegerHeaderWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required string. Please put null and the client library should throw before the
   * request is sent.
   *
   * @param {string} bodyParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredStringParameter(bodyParameter: string): Promise<Models.ErrorModel>;
  postRequiredStringParameter(bodyParameter: string, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredStringParameter(bodyParameter: string, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredStringParameter(bodyParameter: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredStringParameter(): any {
    return msRest.responseToBody(this.postRequiredStringParameterWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional string. Please put null.
   *
   * @param {ExplicitPostOptionalStringParameterOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalStringParameter(): Promise<void>;
  postOptionalStringParameter(options: Models.ExplicitPostOptionalStringParameterOptionalParams): Promise<void>;
  postOptionalStringParameter(callback: msRest.ServiceCallback<void>): void;
  postOptionalStringParameter(options: Models.ExplicitPostOptionalStringParameterOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalStringParameter(): any {
    return msRest.responseToBody(this.postOptionalStringParameterWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the
   * client library should throw before the request is sent.
   *
   * @param {string} value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredStringProperty(value: string): Promise<Models.ErrorModel>;
  postRequiredStringProperty(value: string, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredStringProperty(value: string, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredStringProperty(value: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredStringProperty(): any {
    return msRest.responseToBody(this.postRequiredStringPropertyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
   *
   * @param {ExplicitPostOptionalStringPropertyOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalStringProperty(): Promise<void>;
  postOptionalStringProperty(options: Models.ExplicitPostOptionalStringPropertyOptionalParams): Promise<void>;
  postOptionalStringProperty(callback: msRest.ServiceCallback<void>): void;
  postOptionalStringProperty(options: Models.ExplicitPostOptionalStringPropertyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalStringProperty(): any {
    return msRest.responseToBody(this.postOptionalStringPropertyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required string. Please put a header 'headerParameter' => null and the client
   * library should throw before the request is sent.
   *
   * @param {string} headerParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredStringHeader(headerParameter: string): Promise<Models.ErrorModel>;
  postRequiredStringHeader(headerParameter: string, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredStringHeader(headerParameter: string, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredStringHeader(headerParameter: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredStringHeader(): any {
    return msRest.responseToBody(this.postRequiredStringHeaderWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional string. Please put a header 'headerParameter' => null.
   *
   * @param {ExplicitPostOptionalStringHeaderOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalStringHeader(): Promise<void>;
  postOptionalStringHeader(options: Models.ExplicitPostOptionalStringHeaderOptionalParams): Promise<void>;
  postOptionalStringHeader(callback: msRest.ServiceCallback<void>): void;
  postOptionalStringHeader(options: Models.ExplicitPostOptionalStringHeaderOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalStringHeader(): any {
    return msRest.responseToBody(this.postOptionalStringHeaderWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required complex object. Please put null and the client library should throw
   * before the request is sent.
   *
   * @param {Product} bodyParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredClassParameter(bodyParameter: Models.Product): Promise<Models.ErrorModel>;
  postRequiredClassParameter(bodyParameter: Models.Product, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredClassParameter(bodyParameter: Models.Product, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredClassParameter(bodyParameter: Models.Product, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredClassParameter(): any {
    return msRest.responseToBody(this.postRequiredClassParameterWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional complex object. Please put null.
   *
   * @param {ExplicitPostOptionalClassParameterOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalClassParameter(): Promise<void>;
  postOptionalClassParameter(options: Models.ExplicitPostOptionalClassParameterOptionalParams): Promise<void>;
  postOptionalClassParameter(callback: msRest.ServiceCallback<void>): void;
  postOptionalClassParameter(options: Models.ExplicitPostOptionalClassParameterOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalClassParameter(): any {
    return msRest.responseToBody(this.postOptionalClassParameterWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null
   * and the client library should throw before the request is sent.
   *
   * @param {Product} value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredClassProperty(value: Models.Product): Promise<Models.ErrorModel>;
  postRequiredClassProperty(value: Models.Product, options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredClassProperty(value: Models.Product, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredClassProperty(value: Models.Product, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredClassProperty(): any {
    return msRest.responseToBody(this.postRequiredClassPropertyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
   *
   * @param {ExplicitPostOptionalClassPropertyOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalClassProperty(): Promise<void>;
  postOptionalClassProperty(options: Models.ExplicitPostOptionalClassPropertyOptionalParams): Promise<void>;
  postOptionalClassProperty(callback: msRest.ServiceCallback<void>): void;
  postOptionalClassProperty(options: Models.ExplicitPostOptionalClassPropertyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalClassProperty(): any {
    return msRest.responseToBody(this.postOptionalClassPropertyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required array. Please put null and the client library should throw before the
   * request is sent.
   *
   * @param {string[]} bodyParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredArrayParameter(bodyParameter: string[]): Promise<Models.ErrorModel>;
  postRequiredArrayParameter(bodyParameter: string[], options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredArrayParameter(bodyParameter: string[], callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredArrayParameter(bodyParameter: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredArrayParameter(): any {
    return msRest.responseToBody(this.postRequiredArrayParameterWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional array. Please put null.
   *
   * @param {ExplicitPostOptionalArrayParameterOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalArrayParameter(): Promise<void>;
  postOptionalArrayParameter(options: Models.ExplicitPostOptionalArrayParameterOptionalParams): Promise<void>;
  postOptionalArrayParameter(callback: msRest.ServiceCallback<void>): void;
  postOptionalArrayParameter(options: Models.ExplicitPostOptionalArrayParameterOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalArrayParameter(): any {
    return msRest.responseToBody(this.postOptionalArrayParameterWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the
   * client library should throw before the request is sent.
   *
   * @param {string[]} value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredArrayProperty(value: string[]): Promise<Models.ErrorModel>;
  postRequiredArrayProperty(value: string[], options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredArrayProperty(value: string[], callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredArrayProperty(value: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredArrayProperty(): any {
    return msRest.responseToBody(this.postRequiredArrayPropertyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
   *
   * @param {ExplicitPostOptionalArrayPropertyOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalArrayProperty(): Promise<void>;
  postOptionalArrayProperty(options: Models.ExplicitPostOptionalArrayPropertyOptionalParams): Promise<void>;
  postOptionalArrayProperty(callback: msRest.ServiceCallback<void>): void;
  postOptionalArrayProperty(options: Models.ExplicitPostOptionalArrayPropertyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalArrayProperty(): any {
    return msRest.responseToBody(this.postOptionalArrayPropertyWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly required array. Please put a header 'headerParameter' => null and the client
   * library should throw before the request is sent.
   *
   * @param {string[]} headerParameter
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequiredArrayHeader(headerParameter: string[]): Promise<Models.ErrorModel>;
  postRequiredArrayHeader(headerParameter: string[], options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  postRequiredArrayHeader(headerParameter: string[], callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredArrayHeader(headerParameter: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  postRequiredArrayHeader(): any {
    return msRest.responseToBody(this.postRequiredArrayHeaderWithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Test explicitly optional integer. Please put a header 'headerParameter' => null.
   *
   * @param {ExplicitPostOptionalArrayHeaderOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptionalArrayHeader(): Promise<void>;
  postOptionalArrayHeader(options: Models.ExplicitPostOptionalArrayHeaderOptionalParams): Promise<void>;
  postOptionalArrayHeader(callback: msRest.ServiceCallback<void>): void;
  postOptionalArrayHeader(options: Models.ExplicitPostOptionalArrayHeaderOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postOptionalArrayHeader(): any {
    return msRest.responseToBody(this.postOptionalArrayHeaderWithHttpOperationResponse.bind(this), arguments);
  }

}

// Operation Specifications
const postRequiredIntegerParameterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/integer/parameter",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: {
      required: true,
      serializedName: "bodyParameter",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalIntegerParameterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/integer/parameter",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: {
      serializedName: "bodyParameter",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredIntegerPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/integer/property",
  requestBody: {
    parameterPath: {
      value: "value"
    },
    mapper: {
      ...Mappers.IntWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalIntegerPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/integer/property",
  requestBody: {
    parameterPath: {
      value: "value"
    },
    mapper: Mappers.IntOptionalWrapper
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredIntegerHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/integer/header",
  headerParameters: [
    {
      parameterPath: "headerParameter",
      mapper: {
        required: true,
        serializedName: "headerParameter",
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalIntegerHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/integer/header",
  headerParameters: [
    {
      parameterPath: "headerParameter",
      mapper: {
        serializedName: "headerParameter",
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredStringParameterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/string/parameter",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: {
      required: true,
      serializedName: "bodyParameter",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalStringParameterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/string/parameter",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: {
      serializedName: "bodyParameter",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredStringPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/string/property",
  requestBody: {
    parameterPath: {
      value: "value"
    },
    mapper: {
      ...Mappers.StringWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalStringPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/string/property",
  requestBody: {
    parameterPath: {
      value: "value"
    },
    mapper: Mappers.StringOptionalWrapper
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredStringHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/string/header",
  headerParameters: [
    {
      parameterPath: "headerParameter",
      mapper: {
        required: true,
        serializedName: "headerParameter",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalStringHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/string/header",
  headerParameters: [
    {
      parameterPath: "bodyParameter",
      mapper: {
        serializedName: "bodyParameter",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredClassParameterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/class/parameter",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: {
      ...Mappers.Product,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalClassParameterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/class/parameter",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: Mappers.Product
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredClassPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/class/property",
  requestBody: {
    parameterPath: {
      value: "value"
    },
    mapper: {
      ...Mappers.ClassWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalClassPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/class/property",
  requestBody: {
    parameterPath: {
      value: "value"
    },
    mapper: Mappers.ClassOptionalWrapper
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredArrayParameterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/array/parameter",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: {
      required: true,
      serializedName: "bodyParameter",
      type: {
        name: "Sequence",
        element: {
          serializedName: "stringElementType",
          type: {
            name: "String"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalArrayParameterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/array/parameter",
  requestBody: {
    parameterPath: "bodyParameter",
    mapper: {
      serializedName: "bodyParameter",
      type: {
        name: "Sequence",
        element: {
          serializedName: "stringElementType",
          type: {
            name: "String"
          }
        }
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredArrayPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/array/property",
  requestBody: {
    parameterPath: {
      value: "value"
    },
    mapper: {
      ...Mappers.ArrayWrapper,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalArrayPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/array/property",
  requestBody: {
    parameterPath: {
      value: "value"
    },
    mapper: Mappers.ArrayOptionalWrapper
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postRequiredArrayHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/requied/array/header",
  headerParameters: [
    {
      parameterPath: "headerParameter",
      mapper: {
        required: true,
        serializedName: "headerParameter",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "String"
            }
          }
        }
      }
    }
  ],
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const postOptionalArrayHeaderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "reqopt/optional/array/header",
  headerParameters: [
    {
      parameterPath: "headerParameter",
      mapper: {
        serializedName: "headerParameter",
        type: {
          name: "Sequence",
          element: {
            serializedName: "stringElementType",
            type: {
              name: "String"
            }
          }
        }
      }
    }
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
