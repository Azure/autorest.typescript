/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/petOperationsMappers";
import * as Parameters from "../models/parameters";
import { PetStoreIncContext } from "../petStoreIncContext";

/** Class representing a PetOperations. */
export class PetOperations {
  private readonly client: PetStoreIncContext;

  /**
   * Create a PetOperations.
   * @param {PetStoreIncContext} client Reference to the service client.
   */
  constructor(client: PetStoreIncContext) {
    this.client = client;
  }

  /**
   * @param petId Pet id
   * @param [options] The optional parameters
   * @returns Promise<Models.PetGetByPetIdResponse>
   */
  getByPetId(petId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PetGetByPetIdResponse>;
  /**
   * @param petId Pet id
   * @param callback The callback
   */
  getByPetId(petId: string, callback: coreHttp.ServiceCallback<Models.Pet>): void;
  /**
   * @param petId Pet id
   * @param options The optional parameters
   * @param callback The callback
   */
  getByPetId(petId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Pet>): void;
  getByPetId(petId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Pet>, callback?: coreHttp.ServiceCallback<Models.Pet>): Promise<Models.PetGetByPetIdResponse> {
    return this.client.sendOperationRequest(
      {
        petId,
        options
      },
      getByPetIdOperationSpec,
      callback) as Promise<Models.PetGetByPetIdResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.PetAddPetResponse>
   */
  addPet(options?: Models.PetAddPetOptionalParams): Promise<Models.PetAddPetResponse>;
  /**
   * @param callback The callback
   */
  addPet(callback: coreHttp.ServiceCallback<Models.Pet>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  addPet(options: Models.PetAddPetOptionalParams, callback: coreHttp.ServiceCallback<Models.Pet>): void;
  addPet(options?: Models.PetAddPetOptionalParams | coreHttp.ServiceCallback<Models.Pet>, callback?: coreHttp.ServiceCallback<Models.Pet>): Promise<Models.PetAddPetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      addPetOperationSpec,
      callback) as Promise<Models.PetAddPetResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getByPetIdOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "extensibleenums/pet/{petId}",
  urlParameters: [
    Parameters.petId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Pet
    },
    default: {}
  },
  serializer
};

const addPetOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "extensibleenums/pet/addPet",
  requestBody: {
    parameterPath: [
      "options",
      "petParam"
    ],
    mapper: Mappers.Pet
  },
  responses: {
    200: {
      bodyMapper: Mappers.Pet
    },
    default: {}
  },
  serializer
};
