/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";


/**
 * @interface
 * An interface representing Pet.
 */
export interface Pet {
  /**
   * @member {string} [name]
   */
  name?: string;
  /**
   * @member {DaysOfWeekExtensibleEnum} [daysOfWeek] Type of Pet. Possible
   * values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
   * 'Saturday', 'Sunday'. Default value: 'Friday' .
   */
  daysOfWeek?: DaysOfWeekExtensibleEnum;
  /**
   * @member {IntEnum} intEnum Possible values include: '1', '2', '3'
   */
  intEnum: IntEnum;
}

/**
 * @interface
 * An interface representing PetAddPetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PetAddPetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Pet} [petParam]
   */
  petParam?: Pet;
}

/**
 * Defines values for DaysOfWeekExtensibleEnum.
 * Possible values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
 * 'Friday', 'Saturday', 'Sunday'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DaysOfWeekExtensibleEnum =
 * <DaysOfWeekExtensibleEnum>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DaysOfWeekExtensibleEnum {
  Monday = 'Monday',
  Tuesday = 'Tuesday',
  Wednesday = 'Wednesday',
  Thursday = 'Thursday',
  Friday = 'Friday',
  Saturday = 'Saturday',
  Sunday = 'Sunday',
}

/**
 * Defines values for IntEnum.
 * Possible values include: '1', '2', '3'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntEnum = <IntEnum>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntEnum {
  /**
   * one
   */
  One = '1',
  /**
   * two
   */
  Two = '2',
  /**
   * three
   */
  Three = '3',
}

/**
 * Contains response data for the getByPetId operation.
 */
export type PetGetByPetIdResponse = Pet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pet;
    };
};

/**
 * Contains response data for the addPet operation.
 */
export type PetAddPetResponse = Pet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pet;
    };
};
