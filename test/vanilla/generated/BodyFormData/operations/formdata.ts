/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/formdataMappers";
import * as Parameters from "../models/parameters";
import { AutoRestSwaggerBATFormDataServiceContext } from "../autoRestSwaggerBATFormDataServiceContext";

/** Class representing a Formdata. */
export class Formdata {
  private readonly client: AutoRestSwaggerBATFormDataServiceContext;

  /**
   * Create a Formdata.
   * @param {AutoRestSwaggerBATFormDataServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATFormDataServiceContext) {
    this.client = client;
  }

  /**
   * Upload file
   * @param fileContent File to upload.
   * @param fileName File name to upload. Name has to be spelled exactly as written here.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormdataUploadFileResponse>
   */
  uploadFile(fileContent: msRest.HttpRequestBody, fileName: string, options?: msRest.RequestOptionsBase): Promise<Models.FormdataUploadFileResponse>;
  /**
   * @param fileContent File to upload.
   * @param fileName File name to upload. Name has to be spelled exactly as written here.
   * @param callback The callback
   */
  uploadFile(fileContent: msRest.HttpRequestBody, fileName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param fileContent File to upload.
   * @param fileName File name to upload. Name has to be spelled exactly as written here.
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadFile(fileContent: msRest.HttpRequestBody, fileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  uploadFile(fileContent: msRest.HttpRequestBody, fileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.FormdataUploadFileResponse> {
    return this.client.sendOperationRequest(
      {
        fileContent,
        fileName,
        options
      },
      uploadFileOperationSpec,
      callback) as Promise<Models.FormdataUploadFileResponse>;
  }

  /**
   * Upload file
   * @param fileContent File to upload.
   * @param [options] The optional parameters
   * @returns Promise<Models.FormdataUploadFileViaBodyResponse>
   */
  uploadFileViaBody(fileContent: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.FormdataUploadFileViaBodyResponse>;
  /**
   * @param fileContent File to upload.
   * @param callback The callback
   */
  uploadFileViaBody(fileContent: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param fileContent File to upload.
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadFileViaBody(fileContent: msRest.HttpRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  uploadFileViaBody(fileContent: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.FormdataUploadFileViaBodyResponse> {
    return this.client.sendOperationRequest(
      {
        fileContent,
        options
      },
      uploadFileViaBodyOperationSpec,
      callback) as Promise<Models.FormdataUploadFileViaBodyResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const uploadFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "formdata/stream/uploadfile",
  formDataParameters: [
    Parameters.fileContent,
    Parameters.fileName
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const uploadFileViaBodyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "formdata/stream/uploadfile",
  requestBody: {
    parameterPath: "fileContent",
    mapper: {
      required: true,
      serializedName: "fileContent",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
