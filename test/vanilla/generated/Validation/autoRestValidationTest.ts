/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AutoRestValidationTestContext } from "./autoRestValidationTestContext";

class AutoRestValidationTest extends AutoRestValidationTestContext {
  /**
   * @class
   * Initializes a new instance of the AutoRestValidationTest class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(subscriptionId: string, apiVersion: string, baseUri?: string, options?: msRest.ServiceClientOptions) {
    super(subscriptionId, apiVersion, baseUri, options);
  }
  // methods on the client.

  /**
   * Validates input parameters on the method. See swagger for details.
   *
   * @param {string} resourceGroupName Required string between 3 and 10 chars with pattern
   * [a-zA-Z0-9]+.
   *
   * @param {number} id Required int multiple of 10 from 100 to 1000.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  validationOfMethodParameters(resourceGroupName: string, id: number): Promise<Models.ValidationOfMethodParametersResponse>;
  validationOfMethodParameters(resourceGroupName: string, id: number, options: msRest.RequestOptionsBase): Promise<Models.ValidationOfMethodParametersResponse>;
  validationOfMethodParameters(resourceGroupName: string, id: number, callback: msRest.ServiceCallback<Models.Product>): void;
  validationOfMethodParameters(resourceGroupName: string, id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Product>): void;
  validationOfMethodParameters(resourceGroupName: string, id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Product>): Promise<Models.ValidationOfMethodParametersResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        id,
        options
      },
      validationOfMethodParametersOperationSpec,
      callback) as Promise<Models.ValidationOfMethodParametersResponse>;
  }
  // methods on the client.

  /**
   * Validates body parameters on the method. See swagger for details.
   *
   * @param {string} resourceGroupName Required string between 3 and 10 chars with pattern
   * [a-zA-Z0-9]+.
   *
   * @param {number} id Required int multiple of 10 from 100 to 1000.
   *
   * @param {AutoRestValidationTestValidationOfBodyOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  validationOfBody(resourceGroupName: string, id: number): Promise<Models.ValidationOfBodyResponse>;
  validationOfBody(resourceGroupName: string, id: number, options: Models.AutoRestValidationTestValidationOfBodyOptionalParams): Promise<Models.ValidationOfBodyResponse>;
  validationOfBody(resourceGroupName: string, id: number, callback: msRest.ServiceCallback<Models.Product>): void;
  validationOfBody(resourceGroupName: string, id: number, options: Models.AutoRestValidationTestValidationOfBodyOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  validationOfBody(resourceGroupName: string, id: number, options?: Models.AutoRestValidationTestValidationOfBodyOptionalParams, callback?: msRest.ServiceCallback<Models.Product>): Promise<Models.ValidationOfBodyResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        id,
        options
      },
      validationOfBodyOperationSpec,
      callback) as Promise<Models.ValidationOfBodyResponse>;
  }
  // methods on the client.

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWithConstantInPath(): Promise<msRest.RestResponse>;
  getWithConstantInPath(options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  getWithConstantInPath(callback: msRest.ServiceCallback<void>): void;
  getWithConstantInPath(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getWithConstantInPath(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getWithConstantInPathOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @param {AutoRestValidationTestPostWithConstantInBodyOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  postWithConstantInBody(): Promise<Models.PostWithConstantInBodyResponse>;
  postWithConstantInBody(options: Models.AutoRestValidationTestPostWithConstantInBodyOptionalParams): Promise<Models.PostWithConstantInBodyResponse>;
  postWithConstantInBody(callback: msRest.ServiceCallback<Models.Product>): void;
  postWithConstantInBody(options: Models.AutoRestValidationTestPostWithConstantInBodyOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;
  postWithConstantInBody(options?: Models.AutoRestValidationTestPostWithConstantInBodyOptionalParams, callback?: msRest.ServiceCallback<Models.Product>): Promise<Models.PostWithConstantInBodyResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      postWithConstantInBodyOperationSpec,
      callback) as Promise<Models.PostWithConstantInBodyResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const validationOfMethodParametersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "fakepath/{subscriptionId}/{resourceGroupName}/{id}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const validationOfBodyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "fakepath/{subscriptionId}/{resourceGroupName}/{id}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getWithConstantInPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "validation/constantsInPath/{constantParam}/value",
  urlParameters: [
    Parameters.constantParam
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const postWithConstantInBodyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "validation/constantsInPath/{constantParam}/value",
  urlParameters: [
    Parameters.constantParam
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Product
  },
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {}
  },
  serializer
};

export {
  AutoRestValidationTest,
  AutoRestValidationTestContext,
  Models as AutoRestValidationTestModels,
  Mappers as AutoRestValidationTestMappers
};
