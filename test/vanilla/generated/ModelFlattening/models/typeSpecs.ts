/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { compositeSpec, CompositeTypeSpec, dictionarySpec, numberSpec, sequenceSpec, stringSpec } from "ms-rest-js";

export const ErrorModel: CompositeTypeSpec = compositeSpec({
  typeName: "ErrorModel",
  propertySpecs: {
    status: {
      valueSpec: numberSpec
    },
    message: {
      valueSpec: stringSpec
    },
    parentError: {
      valueSpec: "ErrorModel"
    }
  }
});

export const Resource: CompositeTypeSpec = compositeSpec({
  typeName: "Resource",
  propertySpecs: {
    /**
     * Resource Id
     */
    id: {
      valueSpec: stringSpec
    },
    /**
     * Resource Type
     */
    type: {
      valueSpec: stringSpec
    },
    tags: {
      valueSpec: dictionarySpec(stringSpec)
    },
    /**
     * Resource Location
     */
    location: {
      valueSpec: stringSpec
    },
    /**
     * Resource Name
     */
    name: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Flattened product.
 */
export const FlattenedProduct: CompositeTypeSpec = compositeSpec({
  typeName: "FlattenedProduct",
  propertySpecs: {
    /**
     * Resource Id
     */
    id: {
      valueSpec: stringSpec
    },
    /**
     * Resource Type
     */
    type: {
      valueSpec: stringSpec
    },
    tags: {
      valueSpec: dictionarySpec(stringSpec)
    },
    /**
     * Resource Location
     */
    location: {
      valueSpec: stringSpec
    },
    /**
     * Resource Name
     */
    name: {
      valueSpec: stringSpec
    },
    pname: {
      serializedName: "properties.p\\.name",
      valueSpec: stringSpec
    },
    flattenedProductType: {
      serializedName: "properties.type",
      valueSpec: stringSpec
    },
    /**
     * Possible values include: 'Succeeded', 'Failed', 'canceled', 'Accepted', 'Creating',
     * 'Created', 'Updating', 'Updated', 'Deleting', 'Deleted', 'OK'
     */
    provisioningStateValues: {
      serializedName: "properties.provisioningStateValues",
      valueSpec: stringSpec
    },
    provisioningState: {
      serializedName: "properties.provisioningState",
      valueSpec: stringSpec
    }
  }
});

export const ResourceCollection: CompositeTypeSpec = compositeSpec({
  typeName: "ResourceCollection",
  propertySpecs: {
    productresource: {
      valueSpec: FlattenedProduct
    },
    arrayofresources: {
      valueSpec: sequenceSpec(FlattenedProduct)
    },
    dictionaryofresources: {
      valueSpec: dictionarySpec(FlattenedProduct)
    }
  }
});

/**
 * The product documentation.
 */
export const BaseProduct: CompositeTypeSpec = compositeSpec({
  typeName: "BaseProduct",
  propertySpecs: {
    /**
     * Unique identifier representing a specific product for a given latitude & longitude. For
     * example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
     */
    productId: {
      required: true,
      serializedName: "base_product_id",
      valueSpec: stringSpec
    },
    /**
     * Description of product.
     */
    description: {
      serializedName: "base_product_description",
      valueSpec: stringSpec
    }
  }
});

/**
 * The product documentation.
 */
export const SimpleProduct: CompositeTypeSpec = compositeSpec({
  typeName: "SimpleProduct",
  propertySpecs: {
    /**
     * Unique identifier representing a specific product for a given latitude & longitude. For
     * example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
     */
    productId: {
      required: true,
      serializedName: "base_product_id",
      valueSpec: stringSpec
    },
    /**
     * Description of product.
     */
    description: {
      serializedName: "base_product_description",
      valueSpec: stringSpec
    },
    /**
     * Display name of product.
     */
    maxProductDisplayName: {
      required: true,
      serializedName: "details.max_product_display_name",
      valueSpec: stringSpec
    },
    /**
     * Capacity of product. For example, 4 people.
     */
    capacity: {
      required: true,
      serializedName: "details.max_product_capacity",
      valueSpec: stringSpec
    },
    /**
     * Generic URL value.
     */
    genericValue: {
      serializedName: "details.max_product_image.generic_value",
      valueSpec: stringSpec
    },
    /**
     * URL value.
     */
    odatavalue: {
      serializedName: "details.max_product_image.@odata\\.value",
      valueSpec: stringSpec
    }
  }
});

/**
 * The Generic URL.
 */
export const GenericUrl: CompositeTypeSpec = compositeSpec({
  typeName: "GenericUrl",
  propertySpecs: {
    /**
     * Generic URL value.
     */
    genericValue: {
      serializedName: "generic_value",
      valueSpec: stringSpec
    }
  }
});

/**
 * The wrapped produc.
 */
export const WrappedProduct: CompositeTypeSpec = compositeSpec({
  typeName: "WrappedProduct",
  propertySpecs: {
    /**
     * the product value
     */
    value: {
      valueSpec: stringSpec
    }
  }
});

/**
 * The wrapped produc.
 */
export const ProductWrapper: CompositeTypeSpec = compositeSpec({
  typeName: "ProductWrapper",
  propertySpecs: {
    /**
     * the product value
     */
    value: {
      serializedName: "property.value",
      valueSpec: stringSpec
    }
  }
});

/**
 * Additional parameters for putSimpleProductWithGrouping operation.
 */
export const FlattenParameterGroup: CompositeTypeSpec = compositeSpec({
  typeName: "FlattenParameterGroup",
  propertySpecs: {
    /**
     * Product name with value 'groupproduct'
     */
    name: {
      required: true,
      valueSpec: stringSpec
    },
    /**
     * Unique identifier representing a specific product for a given latitude & longitude. For
     * example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
     */
    productId: {
      required: true,
      valueSpec: stringSpec
    },
    /**
     * Description of product.
     */
    description: {
      valueSpec: stringSpec
    },
    /**
     * Display name of product.
     */
    maxProductDisplayName: {
      required: true,
      valueSpec: stringSpec
    },
    /**
     * Generic URL value.
     */
    genericValue: {
      valueSpec: stringSpec
    },
    /**
     * URL value.
     */
    odatavalue: {
      valueSpec: stringSpec
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePutArrayOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePutArrayOptionalParams",
  propertySpecs: {
    /**
     * External Resource as an Array to put
     */
    resourceArray: {
      serializedName: "ResourceArray",
      valueSpec: sequenceSpec(Resource)
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams",
  propertySpecs: {
    /**
     * External Resource as an Array to put
     */
    resourceArray: {
      serializedName: "ResourceArray",
      valueSpec: sequenceSpec(WrappedProduct)
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams",
  propertySpecs: {
    /**
     * External Resource as a Dictionary to put
     */
    resourceDictionary: {
      serializedName: "ResourceDictionary",
      valueSpec: dictionarySpec(FlattenedProduct)
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams",
  propertySpecs: {
    /**
     * External Resource as a ResourceCollection to put
     */
    resourceComplexObject: {
      serializedName: "ResourceComplexObject",
      valueSpec: ResourceCollection
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams",
  propertySpecs: {
    /**
     * Simple body product to put
     */
    simpleBodyProduct: {
      serializedName: "SimpleBodyProduct",
      valueSpec: SimpleProduct
    }
  }
});

/**
 * Optional Parameters.
 */
export const AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams: CompositeTypeSpec = compositeSpec({
  typeName: "AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams",
  propertySpecs: {
    /**
     * Description of product.
     */
    description: {
      serializedName: "base_product_description",
      valueSpec: stringSpec
    },
    /**
     * Generic URL value.
     */
    genericValue: {
      serializedName: "details.max_product_image.generic_value",
      valueSpec: stringSpec
    },
    /**
     * URL value.
     */
    odatavalue: {
      serializedName: "details.max_product_image.@odata\\.value",
      valueSpec: stringSpec
    }
  }
});
