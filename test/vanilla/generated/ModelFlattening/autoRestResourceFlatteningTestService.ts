/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AutoRestResourceFlatteningTestServiceContext } from "./autoRestResourceFlatteningTestServiceContext";

class AutoRestResourceFlatteningTestService extends AutoRestResourceFlatteningTestServiceContext {
  /**
   * Initializes a new instance of the AutoRestResourceFlatteningTestService class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.AutoRestResourceFlatteningTestServiceOptions) {
    super(options);
  }

  /**
   * Put External Resource as an Array
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putArray(options?: Models.AutoRestResourceFlatteningTestServicePutArrayOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  putArray(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putArray(options: Models.AutoRestResourceFlatteningTestServicePutArrayOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putArray(options?: Models.AutoRestResourceFlatteningTestServicePutArrayOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putArrayOperationSpec,
      callback);
  }

  /**
   * Get External Resource as an Array
   * @param [options] The optional parameters
   * @returns Promise<Models.GetArrayResponse>
   */
  getArray(options?: msRest.RequestOptionsBase): Promise<Models.GetArrayResponse>;
  /**
   * @param callback The callback
   */
  getArray(callback: msRest.ServiceCallback<Models.FlattenedProduct[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArray(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FlattenedProduct[]>): void;
  getArray(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FlattenedProduct[]>, callback?: msRest.ServiceCallback<Models.FlattenedProduct[]>): Promise<Models.GetArrayResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getArrayOperationSpec,
      callback) as Promise<Models.GetArrayResponse>;
  }

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened
   * is not removed if it's referenced in an array
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putWrappedArray(options?: Models.AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  putWrappedArray(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putWrappedArray(options: Models.AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putWrappedArray(options?: Models.AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putWrappedArrayOperationSpec,
      callback);
  }

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened
   * is not removed if it's referenced in an array
   * @param [options] The optional parameters
   * @returns Promise<Models.GetWrappedArrayResponse>
   */
  getWrappedArray(options?: msRest.RequestOptionsBase): Promise<Models.GetWrappedArrayResponse>;
  /**
   * @param callback The callback
   */
  getWrappedArray(callback: msRest.ServiceCallback<Models.ProductWrapper[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getWrappedArray(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductWrapper[]>): void;
  getWrappedArray(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProductWrapper[]>, callback?: msRest.ServiceCallback<Models.ProductWrapper[]>): Promise<Models.GetWrappedArrayResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getWrappedArrayOperationSpec,
      callback) as Promise<Models.GetWrappedArrayResponse>;
  }

  /**
   * Put External Resource as a Dictionary
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putDictionary(options?: Models.AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  putDictionary(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putDictionary(options: Models.AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putDictionary(options?: Models.AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putDictionaryOperationSpec,
      callback);
  }

  /**
   * Get External Resource as a Dictionary
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDictionaryResponse>
   */
  getDictionary(options?: msRest.RequestOptionsBase): Promise<Models.GetDictionaryResponse>;
  /**
   * @param callback The callback
   */
  getDictionary(callback: msRest.ServiceCallback<{ [propertyName: string]: Models.FlattenedProduct }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionary(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: Models.FlattenedProduct }>): void;
  getDictionary(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<{ [propertyName: string]: Models.FlattenedProduct }>, callback?: msRest.ServiceCallback<{ [propertyName: string]: Models.FlattenedProduct }>): Promise<Models.GetDictionaryResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getDictionaryOperationSpec,
      callback) as Promise<Models.GetDictionaryResponse>;
  }

  /**
   * Put External Resource as a ResourceCollection
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putResourceCollection(options?: Models.AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  putResourceCollection(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putResourceCollection(options: Models.AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putResourceCollection(options?: Models.AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putResourceCollectionOperationSpec,
      callback);
  }

  /**
   * Get External Resource as a ResourceCollection
   * @param [options] The optional parameters
   * @returns Promise<Models.GetResourceCollectionResponse>
   */
  getResourceCollection(options?: msRest.RequestOptionsBase): Promise<Models.GetResourceCollectionResponse>;
  /**
   * @param callback The callback
   */
  getResourceCollection(callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getResourceCollection(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
  getResourceCollection(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceCollection>, callback?: msRest.ServiceCallback<Models.ResourceCollection>): Promise<Models.GetResourceCollectionResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getResourceCollectionOperationSpec,
      callback) as Promise<Models.GetResourceCollectionResponse>;
  }

  /**
   * Put Simple Product with client flattening true on the model
   * @param [options] The optional parameters
   * @returns Promise<Models.PutSimpleProductResponse>
   */
  putSimpleProduct(options?: Models.AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams): Promise<Models.PutSimpleProductResponse>;
  /**
   * @param callback The callback
   */
  putSimpleProduct(callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putSimpleProduct(options: Models.AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  putSimpleProduct(options?: Models.AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams | msRest.ServiceCallback<Models.SimpleProduct>, callback?: msRest.ServiceCallback<Models.SimpleProduct>): Promise<Models.PutSimpleProductResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putSimpleProductOperationSpec,
      callback) as Promise<Models.PutSimpleProductResponse>;
  }

  /**
   * Put Flattened Simple Product with client flattening true on the parameter
   * @param productId Unique identifier representing a specific product for a given latitude &
   * longitude. For example, uberX in San Francisco will have a different product_id than uberX in
   * Los Angeles.
   * @param maxProductDisplayName Display name of product.
   * @param [options] The optional parameters
   * @returns Promise<Models.PostFlattenedSimpleProductResponse>
   */
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string, options?: Models.AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams): Promise<Models.PostFlattenedSimpleProductResponse>;
  /**
   * @param productId Unique identifier representing a specific product for a given latitude &
   * longitude. For example, uberX in San Francisco will have a different product_id than uberX in
   * Los Angeles.
   * @param maxProductDisplayName Display name of product.
   * @param callback The callback
   */
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  /**
   * @param productId Unique identifier representing a specific product for a given latitude &
   * longitude. For example, uberX in San Francisco will have a different product_id than uberX in
   * Los Angeles.
   * @param maxProductDisplayName Display name of product.
   * @param options The optional parameters
   * @param callback The callback
   */
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string, options: Models.AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string, options?: Models.AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams | msRest.ServiceCallback<Models.SimpleProduct>, callback?: msRest.ServiceCallback<Models.SimpleProduct>): Promise<Models.PostFlattenedSimpleProductResponse> {
    return this.sendOperationRequest(
      {
        productId,
        maxProductDisplayName,
        options
      },
      postFlattenedSimpleProductOperationSpec,
      callback) as Promise<Models.PostFlattenedSimpleProductResponse>;
  }

  /**
   * Put Simple Product with client flattening true on the model
   * @param flattenParameterGroup Additional parameters for the operation
   * @param [options] The optional parameters
   * @returns Promise<Models.PutSimpleProductWithGroupingResponse>
   */
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup, options?: msRest.RequestOptionsBase): Promise<Models.PutSimpleProductWithGroupingResponse>;
  /**
   * @param flattenParameterGroup Additional parameters for the operation
   * @param callback The callback
   */
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  /**
   * @param flattenParameterGroup Additional parameters for the operation
   * @param options The optional parameters
   * @param callback The callback
   */
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SimpleProduct>, callback?: msRest.ServiceCallback<Models.SimpleProduct>): Promise<Models.PutSimpleProductWithGroupingResponse> {
    return this.sendOperationRequest(
      {
        flattenParameterGroup,
        options
      },
      putSimpleProductWithGroupingOperationSpec,
      callback) as Promise<Models.PutSimpleProductWithGroupingResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const putArrayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/array",
  requestBody: {
    parameterPath: [
      "options",
      "resourceArray"
    ],
    mapper: {
      serializedName: "ResourceArray",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Resource"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "model-flatten/array",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FlattenedProduct"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putWrappedArrayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/wrappedarray",
  requestBody: {
    parameterPath: [
      "options",
      "resourceArray"
    ],
    mapper: {
      serializedName: "ResourceArray",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "WrappedProduct"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getWrappedArrayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "model-flatten/wrappedarray",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProductWrapper"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDictionaryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/dictionary",
  requestBody: {
    parameterPath: [
      "options",
      "resourceDictionary"
    ],
    mapper: {
      serializedName: "ResourceDictionary",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Composite",
            className: "FlattenedProduct"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "model-flatten/dictionary",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "FlattenedProduct"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putResourceCollectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/resourcecollection",
  requestBody: {
    parameterPath: [
      "options",
      "resourceComplexObject"
    ],
    mapper: Mappers.ResourceCollection
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getResourceCollectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "model-flatten/resourcecollection",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putSimpleProductOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/customFlattening",
  requestBody: {
    parameterPath: [
      "options",
      "simpleBodyProduct"
    ],
    mapper: Mappers.SimpleProduct
  },
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const postFlattenedSimpleProductOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "model-flatten/customFlattening",
  requestBody: {
    parameterPath: {
      productId: "productId",
      description: [
        "options",
        "description"
      ],
      maxProductDisplayName: "maxProductDisplayName",
      genericValue: [
        "options",
        "genericValue"
      ],
      odatavalue: [
        "options",
        "odatavalue"
      ]
    },
    mapper: Mappers.SimpleProduct
  },
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putSimpleProductWithGroupingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/customFlattening/parametergrouping/{name}/",
  urlParameters: [
    Parameters.name
  ],
  requestBody: {
    parameterPath: {
      productId: [
        "flattenParameterGroup",
        "productId"
      ],
      description: [
        "flattenParameterGroup",
        "description"
      ],
      maxProductDisplayName: [
        "flattenParameterGroup",
        "maxProductDisplayName"
      ],
      genericValue: [
        "flattenParameterGroup",
        "genericValue"
      ],
      odatavalue: [
        "flattenParameterGroup",
        "odatavalue"
      ]
    },
    mapper: Mappers.SimpleProduct
  },
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

export {
  AutoRestResourceFlatteningTestService,
  AutoRestResourceFlatteningTestServiceContext,
  Models as AutoRestResourceFlatteningTestServiceModels,
  Mappers as AutoRestResourceFlatteningTestServiceMappers
};
