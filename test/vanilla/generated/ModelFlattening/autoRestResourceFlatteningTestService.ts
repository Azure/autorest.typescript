/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AutoRestResourceFlatteningTestServiceContext } from "./autoRestResourceFlatteningTestServiceContext";

class AutoRestResourceFlatteningTestService extends AutoRestResourceFlatteningTestServiceContext {
  /**
   * @class
   * Initializes a new instance of the AutoRestResourceFlatteningTestService class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(baseUri?: string, options?: msRest.ServiceClientOptions) {
    super(baseUri, options);
  }
  // methods on the client.

  /**
   * Put External Resource as an Array
   *
   * @param {AutoRestResourceFlatteningTestServicePutArrayOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putArrayWithHttpOperationResponse(options?: Models.AutoRestResourceFlatteningTestServicePutArrayOptionalParams): Promise<msRest.HttpResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putArrayOperationSpec);
  }
  // methods on the client.

  /**
   * Get External Resource as an Array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getArrayWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.GetArrayResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getArrayOperationSpec) as Promise<Models.GetArrayResponse>;
  }
  // methods on the client.

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened
   * is not removed if it's referenced in an array
   *
   * @param {AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putWrappedArrayWithHttpOperationResponse(options?: Models.AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams): Promise<msRest.HttpResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putWrappedArrayOperationSpec);
  }
  // methods on the client.

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened
   * is not removed if it's referenced in an array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWrappedArrayWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.GetWrappedArrayResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getWrappedArrayOperationSpec) as Promise<Models.GetWrappedArrayResponse>;
  }
  // methods on the client.

  /**
   * Put External Resource as a Dictionary
   *
   * @param {AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putDictionaryWithHttpOperationResponse(options?: Models.AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams): Promise<msRest.HttpResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putDictionaryOperationSpec);
  }
  // methods on the client.

  /**
   * Get External Resource as a Dictionary
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDictionaryWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.GetDictionaryResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getDictionaryOperationSpec) as Promise<Models.GetDictionaryResponse>;
  }
  // methods on the client.

  /**
   * Put External Resource as a ResourceCollection
   *
   * @param {AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams} [options]
   * Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putResourceCollectionWithHttpOperationResponse(options?: Models.AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams): Promise<msRest.HttpResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putResourceCollectionOperationSpec);
  }
  // methods on the client.

  /**
   * Get External Resource as a ResourceCollection
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getResourceCollectionWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.GetResourceCollectionResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getResourceCollectionOperationSpec) as Promise<Models.GetResourceCollectionResponse>;
  }
  // methods on the client.

  /**
   * Put Simple Product with client flattening true on the model
   *
   * @param {AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putSimpleProductWithHttpOperationResponse(options?: Models.AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams): Promise<Models.PutSimpleProductResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      putSimpleProductOperationSpec) as Promise<Models.PutSimpleProductResponse>;
  }
  // methods on the client.

  /**
   * Put Flattened Simple Product with client flattening true on the parameter
   *
   * @param {string} productId Unique identifier representing a specific product for a given latitude
   * & longitude. For example, uberX in San Francisco will have a different product_id than uberX in
   * Los Angeles.
   *
   * @param {string} maxProductDisplayName Display name of product.
   *
   * @param {AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams} [options]
   * Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  postFlattenedSimpleProductWithHttpOperationResponse(productId: string, maxProductDisplayName: string, options?: Models.AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams): Promise<Models.PostFlattenedSimpleProductResponse> {
    return this.sendOperationRequest(
      {
        productId,
        maxProductDisplayName,
        options
      },
      postFlattenedSimpleProductOperationSpec) as Promise<Models.PostFlattenedSimpleProductResponse>;
  }
  // methods on the client.

  /**
   * Put Simple Product with client flattening true on the model
   *
   * @param {FlattenParameterGroup} flattenParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putSimpleProductWithGroupingWithHttpOperationResponse(flattenParameterGroup: Models.FlattenParameterGroup, options?: msRest.RequestOptionsBase): Promise<Models.PutSimpleProductWithGroupingResponse> {
    return this.sendOperationRequest(
      {
        flattenParameterGroup,
        options
      },
      putSimpleProductWithGroupingOperationSpec) as Promise<Models.PutSimpleProductWithGroupingResponse>;
  }

  /**
   * Put External Resource as an Array
   *
   * @param {AutoRestResourceFlatteningTestServicePutArrayOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putArray(): Promise<void>;
  putArray(options: Models.AutoRestResourceFlatteningTestServicePutArrayOptionalParams): Promise<void>;
  putArray(callback: msRest.ServiceCallback<void>): void;
  putArray(options: Models.AutoRestResourceFlatteningTestServicePutArrayOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putArray(options?: Models.AutoRestResourceFlatteningTestServicePutArrayOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putArrayWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get External Resource as an Array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.FlattenedProduct[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getArray(): Promise<Models.FlattenedProduct[]>;
  getArray(options: msRest.RequestOptionsBase): Promise<Models.FlattenedProduct[]>;
  getArray(callback: msRest.ServiceCallback<Models.FlattenedProduct[]>): void;
  getArray(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FlattenedProduct[]>): void;
  getArray(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.FlattenedProduct[]>): any {
    return msRest.responseToBody(this.getArrayWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened
   * is not removed if it's referenced in an array
   *
   * @param {AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putWrappedArray(): Promise<void>;
  putWrappedArray(options: Models.AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams): Promise<void>;
  putWrappedArray(callback: msRest.ServiceCallback<void>): void;
  putWrappedArray(options: Models.AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putWrappedArray(options?: Models.AutoRestResourceFlatteningTestServicePutWrappedArrayOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putWrappedArrayWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened
   * is not removed if it's referenced in an array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ProductWrapper[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getWrappedArray(): Promise<Models.ProductWrapper[]>;
  getWrappedArray(options: msRest.RequestOptionsBase): Promise<Models.ProductWrapper[]>;
  getWrappedArray(callback: msRest.ServiceCallback<Models.ProductWrapper[]>): void;
  getWrappedArray(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductWrapper[]>): void;
  getWrappedArray(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProductWrapper[]>): any {
    return msRest.responseToBody(this.getWrappedArrayWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put External Resource as a Dictionary
   *
   * @param {AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putDictionary(): Promise<void>;
  putDictionary(options: Models.AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams): Promise<void>;
  putDictionary(callback: msRest.ServiceCallback<void>): void;
  putDictionary(options: Models.AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putDictionary(options?: Models.AutoRestResourceFlatteningTestServicePutDictionaryOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putDictionaryWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get External Resource as a Dictionary
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: Models.FlattenedProduct }} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDictionary(): Promise<{ [propertyName: string]: Models.FlattenedProduct }>;
  getDictionary(options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: Models.FlattenedProduct }>;
  getDictionary(callback: msRest.ServiceCallback<{ [propertyName: string]: Models.FlattenedProduct }>): void;
  getDictionary(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: Models.FlattenedProduct }>): void;
  getDictionary(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: Models.FlattenedProduct }>): any {
    return msRest.responseToBody(this.getDictionaryWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put External Resource as a ResourceCollection
   *
   * @param {AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams} [options]
   * Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putResourceCollection(): Promise<void>;
  putResourceCollection(options: Models.AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams): Promise<void>;
  putResourceCollection(callback: msRest.ServiceCallback<void>): void;
  putResourceCollection(options: Models.AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putResourceCollection(options?: Models.AutoRestResourceFlatteningTestServicePutResourceCollectionOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putResourceCollectionWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get External Resource as a ResourceCollection
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ResourceCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ResourceCollection} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getResourceCollection(): Promise<Models.ResourceCollection>;
  getResourceCollection(options: msRest.RequestOptionsBase): Promise<Models.ResourceCollection>;
  getResourceCollection(callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
  getResourceCollection(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
  getResourceCollection(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ResourceCollection>): any {
    return msRest.responseToBody(this.getResourceCollectionWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put Simple Product with client flattening true on the model
   *
   * @param {AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SimpleProduct} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SimpleProduct} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putSimpleProduct(): Promise<Models.SimpleProduct>;
  putSimpleProduct(options: Models.AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams): Promise<Models.SimpleProduct>;
  putSimpleProduct(callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  putSimpleProduct(options: Models.AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  putSimpleProduct(options?: Models.AutoRestResourceFlatteningTestServicePutSimpleProductOptionalParams, callback?: msRest.ServiceCallback<Models.SimpleProduct>): any {
    return msRest.responseToBody(this.putSimpleProductWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put Flattened Simple Product with client flattening true on the parameter
   *
   * @param {string} productId Unique identifier representing a specific product for a given latitude
   * & longitude. For example, uberX in San Francisco will have a different product_id than uberX in
   * Los Angeles.
   *
   * @param {string} maxProductDisplayName Display name of product.
   *
   * @param {AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams} [options]
   * Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SimpleProduct} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SimpleProduct} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string): Promise<Models.SimpleProduct>;
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string, options: Models.AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams): Promise<Models.SimpleProduct>;
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string, options: Models.AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  postFlattenedSimpleProduct(productId: string, maxProductDisplayName: string, options?: Models.AutoRestResourceFlatteningTestServicePostFlattenedSimpleProductOptionalParams, callback?: msRest.ServiceCallback<Models.SimpleProduct>): any {
    return msRest.responseToBody(this.postFlattenedSimpleProductWithHttpOperationResponse.bind(this), productId, maxProductDisplayName, options, callback);
  }

  /**
   * Put Simple Product with client flattening true on the model
   *
   * @param {FlattenParameterGroup} flattenParameterGroup Additional parameters for the operation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SimpleProduct} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SimpleProduct} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup): Promise<Models.SimpleProduct>;
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup, options: msRest.RequestOptionsBase): Promise<Models.SimpleProduct>;
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SimpleProduct>): void;
  putSimpleProductWithGrouping(flattenParameterGroup: Models.FlattenParameterGroup, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SimpleProduct>): any {
    return msRest.responseToBody(this.putSimpleProductWithGroupingWithHttpOperationResponse.bind(this), flattenParameterGroup, options, callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const putArrayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/array",
  requestBody: {
    parameterPath: [
      "options",
      "resourceArray"
    ],
    mapper: {
      serializedName: "ResourceArray",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Resource"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "model-flatten/array",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FlattenedProduct"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putWrappedArrayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/wrappedarray",
  requestBody: {
    parameterPath: [
      "options",
      "resourceArray"
    ],
    mapper: {
      serializedName: "ResourceArray",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "WrappedProduct"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getWrappedArrayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "model-flatten/wrappedarray",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProductWrapper"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDictionaryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/dictionary",
  requestBody: {
    parameterPath: [
      "options",
      "resourceDictionary"
    ],
    mapper: {
      serializedName: "ResourceDictionary",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Composite",
            className: "FlattenedProduct"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "model-flatten/dictionary",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "FlattenedProduct"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putResourceCollectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/resourcecollection",
  requestBody: {
    parameterPath: [
      "options",
      "resourceComplexObject"
    ],
    mapper: Mappers.ResourceCollection
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getResourceCollectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "model-flatten/resourcecollection",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putSimpleProductOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/customFlattening",
  requestBody: {
    parameterPath: [
      "options",
      "simpleBodyProduct"
    ],
    mapper: Mappers.SimpleProduct
  },
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const postFlattenedSimpleProductOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "model-flatten/customFlattening",
  requestBody: {
    parameterPath: {
      productId: "productId",
      description: [
        "options",
        "description"
      ],
      maxProductDisplayName: "maxProductDisplayName",
      genericValue: [
        "options",
        "genericValue"
      ],
      odatavalue: [
        "options",
        "odatavalue"
      ]
    },
    mapper: Mappers.SimpleProduct
  },
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putSimpleProductWithGroupingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "model-flatten/customFlattening/parametergrouping/{name}/",
  urlParameters: [
    Parameters.name
  ],
  requestBody: {
    parameterPath: {
      productId: [
        "flattenParameterGroup",
        "productId"
      ],
      description: [
        "flattenParameterGroup",
        "description"
      ],
      maxProductDisplayName: [
        "flattenParameterGroup",
        "maxProductDisplayName"
      ],
      genericValue: [
        "flattenParameterGroup",
        "genericValue"
      ],
      odatavalue: [
        "flattenParameterGroup",
        "odatavalue"
      ]
    },
    mapper: Mappers.SimpleProduct
  },
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

export { AutoRestResourceFlatteningTestService, Models as AutoRestResourceFlatteningTestServiceModels, Mappers as AutoRestResourceFlatteningTestServiceMappers };
