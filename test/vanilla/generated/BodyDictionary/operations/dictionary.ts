/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/dictionaryMappers";
import { AutoRestSwaggerBATdictionaryServiceContext } from "../autoRestSwaggerBATdictionaryServiceContext";

/** Class representing a Dictionary. */
export class Dictionary {
  private readonly client: AutoRestSwaggerBATdictionaryServiceContext;

  /**
   * Create a Dictionary.
   * @param {AutoRestSwaggerBATdictionaryServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATdictionaryServiceContext) {
    this.client = client;
  }

  /**
   * Get null dictionary value
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetNullResponse>
   */
  getNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetNullResponse>;
  /**
   * @param callback The callback
   */
  getNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec,
      callback) as Promise<Models.DictionaryGetNullResponse>;
  }

  /**
   * Get empty dictionary value {}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetEmptyResponse>
   */
  getEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetEmptyResponse>;
  /**
   * @param callback The callback
   */
  getEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyOperationSpec,
      callback) as Promise<Models.DictionaryGetEmptyResponse>;
  }

  /**
   * Set dictionary value empty {}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putEmpty(arrayBody: { [propertyName: string]: string }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putEmpty(arrayBody: { [propertyName: string]: string }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putEmpty(arrayBody: { [propertyName: string]: string }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putEmpty(arrayBody: { [propertyName: string]: string }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putEmptyOperationSpec,
      callback);
  }

  /**
   * Get Dictionary with null value
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetNullValueResponse>
   */
  getNullValue(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetNullValueResponse>;
  /**
   * @param callback The callback
   */
  getNullValue(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNullValue(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  getNullValue(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): Promise<Models.DictionaryGetNullValueResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullValueOperationSpec,
      callback) as Promise<Models.DictionaryGetNullValueResponse>;
  }

  /**
   * Get Dictionary with null key
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetNullKeyResponse>
   */
  getNullKey(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetNullKeyResponse>;
  /**
   * @param callback The callback
   */
  getNullKey(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNullKey(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  getNullKey(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): Promise<Models.DictionaryGetNullKeyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullKeyOperationSpec,
      callback) as Promise<Models.DictionaryGetNullKeyResponse>;
  }

  /**
   * Get Dictionary with key as empty string
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetEmptyStringKeyResponse>
   */
  getEmptyStringKey(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetEmptyStringKeyResponse>;
  /**
   * @param callback The callback
   */
  getEmptyStringKey(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmptyStringKey(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  getEmptyStringKey(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): Promise<Models.DictionaryGetEmptyStringKeyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyStringKeyOperationSpec,
      callback) as Promise<Models.DictionaryGetEmptyStringKeyResponse>;
  }

  /**
   * Get invalid Dictionary value
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetInvalidResponse>
   */
  getInvalid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetInvalidResponse>;
  /**
   * @param callback The callback
   */
  getInvalid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getInvalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  getInvalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): Promise<Models.DictionaryGetInvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidOperationSpec,
      callback) as Promise<Models.DictionaryGetInvalidResponse>;
  }

  /**
   * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetBooleanTfftResponse>
   */
  getBooleanTfft(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetBooleanTfftResponse>;
  /**
   * @param callback The callback
   */
  getBooleanTfft(callback: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBooleanTfft(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): void;
  getBooleanTfft(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): Promise<Models.DictionaryGetBooleanTfftResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanTfftOperationSpec,
      callback) as Promise<Models.DictionaryGetBooleanTfftResponse>;
  }

  /**
   * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBooleanTfft(arrayBody: { [propertyName: string]: boolean }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putBooleanTfft(arrayBody: { [propertyName: string]: boolean }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putBooleanTfft(arrayBody: { [propertyName: string]: boolean }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBooleanTfft(arrayBody: { [propertyName: string]: boolean }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putBooleanTfftOperationSpec,
      callback);
  }

  /**
   * Get boolean dictionary value {"0": true, "1": null, "2": false }
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetBooleanInvalidNullResponse>
   */
  getBooleanInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetBooleanInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getBooleanInvalidNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBooleanInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): void;
  getBooleanInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): Promise<Models.DictionaryGetBooleanInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanInvalidNullOperationSpec,
      callback) as Promise<Models.DictionaryGetBooleanInvalidNullResponse>;
  }

  /**
   * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetBooleanInvalidStringResponse>
   */
  getBooleanInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetBooleanInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getBooleanInvalidString(callback: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBooleanInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): void;
  getBooleanInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: boolean }>): Promise<Models.DictionaryGetBooleanInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanInvalidStringOperationSpec,
      callback) as Promise<Models.DictionaryGetBooleanInvalidStringResponse>;
  }

  /**
   * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetIntegerValidResponse>
   */
  getIntegerValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetIntegerValidResponse>;
  /**
   * @param callback The callback
   */
  getIntegerValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntegerValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getIntegerValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetIntegerValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntegerValidOperationSpec,
      callback) as Promise<Models.DictionaryGetIntegerValidResponse>;
  }

  /**
   * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putIntegerValid(arrayBody: { [propertyName: string]: number }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putIntegerValid(arrayBody: { [propertyName: string]: number }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putIntegerValid(arrayBody: { [propertyName: string]: number }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putIntegerValid(arrayBody: { [propertyName: string]: number }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putIntegerValidOperationSpec,
      callback);
  }

  /**
   * Get integer dictionary value {"0": 1, "1": null, "2": 0}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetIntInvalidNullResponse>
   */
  getIntInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetIntInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getIntInvalidNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getIntInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetIntInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntInvalidNullOperationSpec,
      callback) as Promise<Models.DictionaryGetIntInvalidNullResponse>;
  }

  /**
   * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetIntInvalidStringResponse>
   */
  getIntInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetIntInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getIntInvalidString(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getIntInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetIntInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntInvalidStringOperationSpec,
      callback) as Promise<Models.DictionaryGetIntInvalidStringResponse>;
  }

  /**
   * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetLongValidResponse>
   */
  getLongValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetLongValidResponse>;
  /**
   * @param callback The callback
   */
  getLongValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLongValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getLongValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetLongValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongValidOperationSpec,
      callback) as Promise<Models.DictionaryGetLongValidResponse>;
  }

  /**
   * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putLongValid(arrayBody: { [propertyName: string]: number }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putLongValid(arrayBody: { [propertyName: string]: number }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putLongValid(arrayBody: { [propertyName: string]: number }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putLongValid(arrayBody: { [propertyName: string]: number }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putLongValidOperationSpec,
      callback);
  }

  /**
   * Get long dictionary value {"0": 1, "1": null, "2": 0}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetLongInvalidNullResponse>
   */
  getLongInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetLongInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getLongInvalidNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLongInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getLongInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetLongInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongInvalidNullOperationSpec,
      callback) as Promise<Models.DictionaryGetLongInvalidNullResponse>;
  }

  /**
   * Get long dictionary value {"0": 1, "1": "integer", "2": 0}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetLongInvalidStringResponse>
   */
  getLongInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetLongInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getLongInvalidString(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLongInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getLongInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetLongInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLongInvalidStringOperationSpec,
      callback) as Promise<Models.DictionaryGetLongInvalidStringResponse>;
  }

  /**
   * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetFloatValidResponse>
   */
  getFloatValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetFloatValidResponse>;
  /**
   * @param callback The callback
   */
  getFloatValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFloatValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getFloatValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetFloatValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatValidOperationSpec,
      callback) as Promise<Models.DictionaryGetFloatValidResponse>;
  }

  /**
   * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putFloatValid(arrayBody: { [propertyName: string]: number }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putFloatValid(arrayBody: { [propertyName: string]: number }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putFloatValid(arrayBody: { [propertyName: string]: number }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putFloatValid(arrayBody: { [propertyName: string]: number }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putFloatValidOperationSpec,
      callback);
  }

  /**
   * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetFloatInvalidNullResponse>
   */
  getFloatInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetFloatInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getFloatInvalidNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFloatInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getFloatInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetFloatInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatInvalidNullOperationSpec,
      callback) as Promise<Models.DictionaryGetFloatInvalidNullResponse>;
  }

  /**
   * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetFloatInvalidStringResponse>
   */
  getFloatInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetFloatInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getFloatInvalidString(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFloatInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getFloatInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetFloatInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFloatInvalidStringOperationSpec,
      callback) as Promise<Models.DictionaryGetFloatInvalidStringResponse>;
  }

  /**
   * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDoubleValidResponse>
   */
  getDoubleValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDoubleValidResponse>;
  /**
   * @param callback The callback
   */
  getDoubleValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDoubleValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getDoubleValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetDoubleValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleValidOperationSpec,
      callback) as Promise<Models.DictionaryGetDoubleValidResponse>;
  }

  /**
   * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDoubleValid(arrayBody: { [propertyName: string]: number }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDoubleValid(arrayBody: { [propertyName: string]: number }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDoubleValid(arrayBody: { [propertyName: string]: number }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDoubleValid(arrayBody: { [propertyName: string]: number }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDoubleValidOperationSpec,
      callback);
  }

  /**
   * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDoubleInvalidNullResponse>
   */
  getDoubleInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDoubleInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getDoubleInvalidNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDoubleInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getDoubleInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetDoubleInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleInvalidNullOperationSpec,
      callback) as Promise<Models.DictionaryGetDoubleInvalidNullResponse>;
  }

  /**
   * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDoubleInvalidStringResponse>
   */
  getDoubleInvalidString(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDoubleInvalidStringResponse>;
  /**
   * @param callback The callback
   */
  getDoubleInvalidString(callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDoubleInvalidString(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): void;
  getDoubleInvalidString(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: number }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: number }>): Promise<Models.DictionaryGetDoubleInvalidStringResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDoubleInvalidStringOperationSpec,
      callback) as Promise<Models.DictionaryGetDoubleInvalidStringResponse>;
  }

  /**
   * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetStringValidResponse>
   */
  getStringValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetStringValidResponse>;
  /**
   * @param callback The callback
   */
  getStringValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStringValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  getStringValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): Promise<Models.DictionaryGetStringValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringValidOperationSpec,
      callback) as Promise<Models.DictionaryGetStringValidResponse>;
  }

  /**
   * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putStringValid(arrayBody: { [propertyName: string]: string }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putStringValid(arrayBody: { [propertyName: string]: string }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putStringValid(arrayBody: { [propertyName: string]: string }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putStringValid(arrayBody: { [propertyName: string]: string }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putStringValidOperationSpec,
      callback);
  }

  /**
   * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetStringWithNullResponse>
   */
  getStringWithNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetStringWithNullResponse>;
  /**
   * @param callback The callback
   */
  getStringWithNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStringWithNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  getStringWithNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): Promise<Models.DictionaryGetStringWithNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringWithNullOperationSpec,
      callback) as Promise<Models.DictionaryGetStringWithNullResponse>;
  }

  /**
   * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetStringWithInvalidResponse>
   */
  getStringWithInvalid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetStringWithInvalidResponse>;
  /**
   * @param callback The callback
   */
  getStringWithInvalid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStringWithInvalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  getStringWithInvalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): Promise<Models.DictionaryGetStringWithInvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStringWithInvalidOperationSpec,
      callback) as Promise<Models.DictionaryGetStringWithInvalidResponse>;
  }

  /**
   * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDateValidResponse>
   */
  getDateValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDateValidResponse>;
  /**
   * @param callback The callback
   */
  getDateValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  getDateValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): Promise<Models.DictionaryGetDateValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateValidOperationSpec,
      callback) as Promise<Models.DictionaryGetDateValidResponse>;
  }

  /**
   * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDateValid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDateValid(arrayBody: { [key: string]: Date } | { [key: string]: string }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDateValid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDateValid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateValidOperationSpec,
      callback);
  }

  /**
   * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDateInvalidNullResponse>
   */
  getDateInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDateInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getDateInvalidNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  getDateInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): Promise<Models.DictionaryGetDateInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateInvalidNullOperationSpec,
      callback) as Promise<Models.DictionaryGetDateInvalidNullResponse>;
  }

  /**
   * Get date dictionary value {"0": "2011-03-22", "1": "date"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDateInvalidCharsResponse>
   */
  getDateInvalidChars(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDateInvalidCharsResponse>;
  /**
   * @param callback The callback
   */
  getDateInvalidChars(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateInvalidChars(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  getDateInvalidChars(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): Promise<Models.DictionaryGetDateInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateInvalidCharsOperationSpec,
      callback) as Promise<Models.DictionaryGetDateInvalidCharsResponse>;
  }

  /**
   * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00",
   * "2": "1492-10-12T10:15:01-08:00"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDateTimeValidResponse>
   */
  getDateTimeValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDateTimeValidResponse>;
  /**
   * @param callback The callback
   */
  getDateTimeValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateTimeValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  getDateTimeValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): Promise<Models.DictionaryGetDateTimeValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeValidOperationSpec,
      callback) as Promise<Models.DictionaryGetDateTimeValidResponse>;
  }

  /**
   * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
   * "1492-10-12T10:15:01-08:00"}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDateTimeValid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDateTimeValid(arrayBody: { [key: string]: Date } | { [key: string]: string }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDateTimeValid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDateTimeValid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateTimeValidOperationSpec,
      callback);
  }

  /**
   * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDateTimeInvalidNullResponse>
   */
  getDateTimeInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDateTimeInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getDateTimeInvalidNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateTimeInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  getDateTimeInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): Promise<Models.DictionaryGetDateTimeInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeInvalidNullOperationSpec,
      callback) as Promise<Models.DictionaryGetDateTimeInvalidNullResponse>;
  }

  /**
   * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDateTimeInvalidCharsResponse>
   */
  getDateTimeInvalidChars(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDateTimeInvalidCharsResponse>;
  /**
   * @param callback The callback
   */
  getDateTimeInvalidChars(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateTimeInvalidChars(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  getDateTimeInvalidChars(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): Promise<Models.DictionaryGetDateTimeInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeInvalidCharsOperationSpec,
      callback) as Promise<Models.DictionaryGetDateTimeInvalidCharsResponse>;
  }

  /**
   * Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan
   * 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDateTimeRfc1123ValidResponse>
   */
  getDateTimeRfc1123Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDateTimeRfc1123ValidResponse>;
  /**
   * @param callback The callback
   */
  getDateTimeRfc1123Valid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDateTimeRfc1123Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): void;
  getDateTimeRfc1123Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Date } | { [propertyName: string]: string }>): Promise<Models.DictionaryGetDateTimeRfc1123ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDateTimeRfc1123ValidOperationSpec,
      callback) as Promise<Models.DictionaryGetDateTimeRfc1123ValidResponse>;
  }

  /**
   * Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980
   * 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDateTimeRfc1123Valid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDateTimeRfc1123Valid(arrayBody: { [key: string]: Date } | { [key: string]: string }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDateTimeRfc1123Valid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDateTimeRfc1123Valid(arrayBody: { [key: string]: Date } | { [key: string]: string }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDateTimeRfc1123ValidOperationSpec,
      callback);
  }

  /**
   * Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDurationValidResponse>
   */
  getDurationValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDurationValidResponse>;
  /**
   * @param callback The callback
   */
  getDurationValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDurationValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): void;
  getDurationValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string }>): Promise<Models.DictionaryGetDurationValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDurationValidOperationSpec,
      callback) as Promise<Models.DictionaryGetDurationValidResponse>;
  }

  /**
   * Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDurationValid(arrayBody: { [propertyName: string]: string }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDurationValid(arrayBody: { [propertyName: string]: string }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDurationValid(arrayBody: { [propertyName: string]: string }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDurationValid(arrayBody: { [propertyName: string]: string }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDurationValidOperationSpec,
      callback);
  }

  /**
   * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)}
   * with each item encoded in base64
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetByteValidResponse>
   */
  getByteValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetByteValidResponse>;
  /**
   * @param callback The callback
   */
  getByteValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getByteValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): void;
  getByteValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): Promise<Models.DictionaryGetByteValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getByteValidOperationSpec,
      callback) as Promise<Models.DictionaryGetByteValidResponse>;
  }

  /**
   * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with
   * each elementencoded in base 64
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putByteValid(arrayBody: { [propertyName: string]: Uint8Array }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putByteValid(arrayBody: { [propertyName: string]: Uint8Array }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putByteValid(arrayBody: { [propertyName: string]: Uint8Array }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putByteValid(arrayBody: { [propertyName: string]: Uint8Array }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putByteValidOperationSpec,
      callback);
  }

  /**
   * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetByteInvalidNullResponse>
   */
  getByteInvalidNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetByteInvalidNullResponse>;
  /**
   * @param callback The callback
   */
  getByteInvalidNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getByteInvalidNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): void;
  getByteInvalidNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): Promise<Models.DictionaryGetByteInvalidNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getByteInvalidNullOperationSpec,
      callback) as Promise<Models.DictionaryGetByteInvalidNullResponse>;
  }

  /**
   * Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test
   * string", "2": "Lorem ipsum"}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetBase64UrlResponse>
   */
  getBase64Url(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetBase64UrlResponse>;
  /**
   * @param callback The callback
   */
  getBase64Url(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBase64Url(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): void;
  getBase64Url(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Uint8Array }>): Promise<Models.DictionaryGetBase64UrlResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBase64UrlOperationSpec,
      callback) as Promise<Models.DictionaryGetBase64UrlResponse>;
  }

  /**
   * Get dictionary of complex type null value
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetComplexNullResponse>
   */
  getComplexNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetComplexNullResponse>;
  /**
   * @param callback The callback
   */
  getComplexNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  getComplexNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): Promise<Models.DictionaryGetComplexNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexNullOperationSpec,
      callback) as Promise<Models.DictionaryGetComplexNullResponse>;
  }

  /**
   * Get empty dictionary of complex type {}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetComplexEmptyResponse>
   */
  getComplexEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetComplexEmptyResponse>;
  /**
   * @param callback The callback
   */
  getComplexEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  getComplexEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): Promise<Models.DictionaryGetComplexEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexEmptyOperationSpec,
      callback) as Promise<Models.DictionaryGetComplexEmptyResponse>;
  }

  /**
   * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null,
   * "2": {"integer": 5, "string": "6"}}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetComplexItemNullResponse>
   */
  getComplexItemNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetComplexItemNullResponse>;
  /**
   * @param callback The callback
   */
  getComplexItemNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexItemNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  getComplexItemNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): Promise<Models.DictionaryGetComplexItemNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexItemNullOperationSpec,
      callback) as Promise<Models.DictionaryGetComplexItemNullResponse>;
  }

  /**
   * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {},
   * "2": {"integer": 5, "string": "6"}}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetComplexItemEmptyResponse>
   */
  getComplexItemEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetComplexItemEmptyResponse>;
  /**
   * @param callback The callback
   */
  getComplexItemEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexItemEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  getComplexItemEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): Promise<Models.DictionaryGetComplexItemEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexItemEmptyOperationSpec,
      callback) as Promise<Models.DictionaryGetComplexItemEmptyResponse>;
  }

  /**
   * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3,
   * "string": "4"}, "2": {"integer": 5, "string": "6"}}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetComplexValidResponse>
   */
  getComplexValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetComplexValidResponse>;
  /**
   * @param callback The callback
   */
  getComplexValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComplexValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): void;
  getComplexValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: Models.Widget }>): Promise<Models.DictionaryGetComplexValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getComplexValidOperationSpec,
      callback) as Promise<Models.DictionaryGetComplexValidResponse>;
  }

  /**
   * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1":
   * {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putComplexValid(arrayBody: { [propertyName: string]: Models.Widget }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putComplexValid(arrayBody: { [propertyName: string]: Models.Widget }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putComplexValid(arrayBody: { [propertyName: string]: Models.Widget }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putComplexValid(arrayBody: { [propertyName: string]: Models.Widget }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putComplexValidOperationSpec,
      callback);
  }

  /**
   * Get a null array
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetArrayNullResponse>
   */
  getArrayNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetArrayNullResponse>;
  /**
   * @param callback The callback
   */
  getArrayNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  getArrayNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): Promise<Models.DictionaryGetArrayNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayNullOperationSpec,
      callback) as Promise<Models.DictionaryGetArrayNullResponse>;
  }

  /**
   * Get an empty dictionary {}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetArrayEmptyResponse>
   */
  getArrayEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetArrayEmptyResponse>;
  /**
   * @param callback The callback
   */
  getArrayEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  getArrayEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): Promise<Models.DictionaryGetArrayEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayEmptyOperationSpec,
      callback) as Promise<Models.DictionaryGetArrayEmptyResponse>;
  }

  /**
   * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetArrayItemNullResponse>
   */
  getArrayItemNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetArrayItemNullResponse>;
  /**
   * @param callback The callback
   */
  getArrayItemNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayItemNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  getArrayItemNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): Promise<Models.DictionaryGetArrayItemNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayItemNullOperationSpec,
      callback) as Promise<Models.DictionaryGetArrayItemNullResponse>;
  }

  /**
   * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetArrayItemEmptyResponse>
   */
  getArrayItemEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetArrayItemEmptyResponse>;
  /**
   * @param callback The callback
   */
  getArrayItemEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayItemEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  getArrayItemEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): Promise<Models.DictionaryGetArrayItemEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayItemEmptyOperationSpec,
      callback) as Promise<Models.DictionaryGetArrayItemEmptyResponse>;
  }

  /**
   * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8",
   * "9"]}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetArrayValidResponse>
   */
  getArrayValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetArrayValidResponse>;
  /**
   * @param callback The callback
   */
  getArrayValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getArrayValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  getArrayValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: string[] }>): Promise<Models.DictionaryGetArrayValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArrayValidOperationSpec,
      callback) as Promise<Models.DictionaryGetArrayValidResponse>;
  }

  /**
   * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8",
   * "9"]}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putArrayValid(arrayBody: { [propertyName: string]: string[] }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putArrayValid(arrayBody: { [propertyName: string]: string[] }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putArrayValid(arrayBody: { [propertyName: string]: string[] }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putArrayValid(arrayBody: { [propertyName: string]: string[] }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putArrayValidOperationSpec,
      callback);
  }

  /**
   * Get an dictionaries of dictionaries with value null
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDictionaryNullResponse>
   */
  getDictionaryNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDictionaryNullResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  getDictionaryNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): Promise<Models.DictionaryGetDictionaryNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryNullOperationSpec,
      callback) as Promise<Models.DictionaryGetDictionaryNullResponse>;
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDictionaryEmptyResponse>
   */
  getDictionaryEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDictionaryEmptyResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  getDictionaryEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): Promise<Models.DictionaryGetDictionaryEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryEmptyOperationSpec,
      callback) as Promise<Models.DictionaryGetDictionaryEmptyResponse>;
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
   * "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDictionaryItemNullResponse>
   */
  getDictionaryItemNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDictionaryItemNullResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryItemNull(callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryItemNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  getDictionaryItemNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): Promise<Models.DictionaryGetDictionaryItemNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryItemNullOperationSpec,
      callback) as Promise<Models.DictionaryGetDictionaryItemNullResponse>;
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
   * "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDictionaryItemEmptyResponse>
   */
  getDictionaryItemEmpty(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDictionaryItemEmptyResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryItemEmpty(callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryItemEmpty(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  getDictionaryItemEmpty(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): Promise<Models.DictionaryGetDictionaryItemEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryItemEmptyOperationSpec,
      callback) as Promise<Models.DictionaryGetDictionaryItemEmptyResponse>;
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
   * "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8":
   * "eight", "9": "nine"}}
   * @param [options] The optional parameters
   * @returns Promise<Models.DictionaryGetDictionaryValidResponse>
   */
  getDictionaryValid(options?: coreHttp.RequestOptionsBase): Promise<Models.DictionaryGetDictionaryValidResponse>;
  /**
   * @param callback The callback
   */
  getDictionaryValid(callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDictionaryValid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): void;
  getDictionaryValid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>, callback?: coreHttp.ServiceCallback<{ [propertyName: string]: { [propertyName: string]: string } }>): Promise<Models.DictionaryGetDictionaryValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDictionaryValidOperationSpec,
      callback) as Promise<Models.DictionaryGetDictionaryValidResponse>;
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
   * "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8":
   * "eight", "9": "nine"}}
   * @param arrayBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putDictionaryValid(arrayBody: { [propertyName: string]: { [propertyName: string]: string } }, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param arrayBody
   * @param callback The callback
   */
  putDictionaryValid(arrayBody: { [propertyName: string]: { [propertyName: string]: string } }, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param arrayBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putDictionaryValid(arrayBody: { [propertyName: string]: { [propertyName: string]: string } }, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putDictionaryValid(arrayBody: { [propertyName: string]: { [propertyName: string]: string } }, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        arrayBody,
        options
      },
      putDictionaryValidOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/empty",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNullValueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/nullvalue",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNullKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/nullkey",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEmptyStringKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/keyemptystring",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/invalid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanTfftOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/boolean/tfft",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBooleanTfftOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/boolean/tfft",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Boolean"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/boolean/true.null.false",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/boolean/true.boolean.false",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntegerValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/integer/1.-1.3.300",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putIntegerValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/integer/1.-1.3.300",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/integer/1.null.zero",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/integer/1.integer.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/long/1.-1.3.300",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putLongValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/long/1.-1.3.300",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/long/1.null.zero",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLongInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/long/1.integer.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/float/0--0.01-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putFloatValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/float/0--0.01-1.2e20",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/float/0.0-null-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFloatInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/float/1.number.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/double/0--0.01-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDoubleValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/double/0--0.01-1.2e20",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Number"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/double/0.0-null-1.2e20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDoubleInvalidStringOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/double/1.number.0",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/string/foo1.foo2.foo3",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putStringValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/string/foo1.foo2.foo3",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringWithNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/string/foo.null.foo2",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getStringWithInvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/string/foo.123.foo2",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/date/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/date/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Date"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/date/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateInvalidCharsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/date/invalidchars",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Date"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/date-time/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateTimeValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/date-time/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "DateTime"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/date-time/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeInvalidCharsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/date-time/invalidchars",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDateTimeRfc1123ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/date-time-rfc1123/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDateTimeRfc1123ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/date-time-rfc1123/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "DateTimeRfc1123"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDurationValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/duration/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "TimeSpan"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDurationValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/duration/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "TimeSpan"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByteValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/byte/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putByteValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/prim/byte/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "ByteArray"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByteInvalidNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/byte/invalidnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBase64UrlOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/prim/base64url/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Base64Url"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/complex/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "Widget"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/complex/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "Widget"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexItemNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/complex/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "Widget"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexItemEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/complex/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "Widget"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getComplexValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/complex/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "Widget"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putComplexValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/complex/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Composite",
            className: "Widget"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/array/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/array/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayItemNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/array/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayItemEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/array/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArrayValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/array/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putArrayValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/array/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String"
              }
            }
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/dictionary/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/dictionary/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryItemNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/dictionary/itemnull",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryItemEmptyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/dictionary/itemempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getDictionaryValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "dictionary/dictionary/valid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putDictionaryValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "dictionary/dictionary/valid",
  requestBody: {
    parameterPath: "arrayBody",
    mapper: {
      required: true,
      serializedName: "arrayBody",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Dictionary",
            value: {
              type: {
                name: "String"
              }
            }
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
