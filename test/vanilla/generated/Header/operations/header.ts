/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/headerMappers";
import * as Parameters from "../models/parameters";
import { AutoRestSwaggerBATHeaderServiceContext } from "../autoRestSwaggerBATHeaderServiceContext";

/** Class representing a Header. */
export class Header {
  private readonly client: AutoRestSwaggerBATHeaderServiceContext;

  /**
   * Create a Header.
   * @param {AutoRestSwaggerBATHeaderServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATHeaderServiceContext) {
    this.client = client;
  }

  /**
   * Send a post request with header value "User-Agent": "overwrite"
   *
   * @param {string} userAgent Send a post request with header value "User-Agent": "overwrite"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramExistingKeyWithHttpOperationResponse(userAgent: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        userAgent,
        options
      },
      paramExistingKeyOperationSpec);
  }

  /**
   * Get a response with header value "User-Agent": "overwrite"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseExistingKeyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseExistingKeyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      responseExistingKeyOperationSpec) as Promise<Models.HeaderResponseExistingKeyResponse>;
  }

  /**
   * Send a post request with header value "Content-Type": "text/html"
   *
   * @param {string} contentType Send a post request with header value "Content-Type": "text/html"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramProtectedKeyWithHttpOperationResponse(contentType: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        contentType,
        options
      },
      paramProtectedKeyOperationSpec);
  }

  /**
   * Get a response with header value "Content-Type": "text/html"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseProtectedKeyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseProtectedKeyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      responseProtectedKeyOperationSpec) as Promise<Models.HeaderResponseProtectedKeyResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 1 or "scenario":
   * "negative", "value": -2
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {number} value Send a post request with header values 1 or -2
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramIntegerWithHttpOperationResponse(scenario: string, value: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramIntegerOperationSpec);
  }

  /**
   * Get a response with header value "value": 1 or -2
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseIntegerWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseIntegerResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseIntegerOperationSpec) as Promise<Models.HeaderResponseIntegerResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 105 or "scenario":
   * "negative", "value": -2
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {number} value Send a post request with header values 105 or -2
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramLongWithHttpOperationResponse(scenario: string, value: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramLongOperationSpec);
  }

  /**
   * Get a response with header value "value": 105 or -2
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseLongWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseLongResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseLongOperationSpec) as Promise<Models.HeaderResponseLongResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario":
   * "negative", "value": -3.0
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {number} value Send a post request with header values 0.07 or -3.0
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramFloatWithHttpOperationResponse(scenario: string, value: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramFloatOperationSpec);
  }

  /**
   * Get a response with header value "value": 0.07 or -3.0
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseFloatWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseFloatResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseFloatOperationSpec) as Promise<Models.HeaderResponseFloatResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario":
   * "negative", "value": -3.0
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {number} value Send a post request with header values 7e120 or -3.0
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramDoubleWithHttpOperationResponse(scenario: string, value: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramDoubleOperationSpec);
  }

  /**
   * Get a response with header value "value": 7e120 or -3.0
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseDoubleWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDoubleResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDoubleOperationSpec) as Promise<Models.HeaderResponseDoubleResponse>;
  }

  /**
   * Send a post request with header values "scenario": "true", "value": true or "scenario": "false",
   * "value": false
   *
   * @param {string} scenario Send a post request with header values "scenario": "true" or "false"
   *
   * @param {boolean} value Send a post request with header values true or false
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramBoolWithHttpOperationResponse(scenario: string, value: boolean, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramBoolOperationSpec);
  }

  /**
   * Get a response with header value "value": true or false
   *
   * @param {string} scenario Send a post request with header values "scenario": "true" or "false"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseBoolWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseBoolResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseBoolOperationSpec) as Promise<Models.HeaderResponseBoolResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps
   * over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": ""
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "null" or
   * "empty"
   *
   * @param {HeaderParamStringOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramStringWithHttpOperationResponse(scenario: string, options?: Models.HeaderParamStringOptionalParams): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      paramStringOperationSpec);
  }

  /**
   * Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "null" or
   * "empty"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseStringWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseStringResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseStringOperationSpec) as Promise<Models.HeaderResponseStringResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario":
   * "min", "value": "0001-01-01"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {Date | string} value Send a post request with header values "2010-01-01" or "0001-01-01"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramDateWithHttpOperationResponse(scenario: string, value: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramDateOperationSpec);
  }

  /**
   * Get a response with header values "2010-01-01" or "0001-01-01"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseDateWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDateResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDateOperationSpec) as Promise<Models.HeaderResponseDateResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or
   * "scenario": "min", "value": "0001-01-01T00:00:00Z"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {Date | string} value Send a post request with header values "2010-01-01T12:34:56Z" or
   * "0001-01-01T00:00:00Z"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramDatetimeWithHttpOperationResponse(scenario: string, value: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramDatetimeOperationSpec);
  }

  /**
   * Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseDatetimeWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDatetimeResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDatetimeOperationSpec) as Promise<Models.HeaderResponseDatetimeResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56
   * GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {HeaderParamDatetimeRfc1123OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramDatetimeRfc1123WithHttpOperationResponse(scenario: string, options?: Models.HeaderParamDatetimeRfc1123OptionalParams): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      paramDatetimeRfc1123OperationSpec);
  }

  /**
   * Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00
   * GMT"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseDatetimeRfc1123WithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDatetimeRfc1123Response> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDatetimeRfc1123OperationSpec) as Promise<Models.HeaderResponseDatetimeRfc1123Response>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid"
   *
   * @param {string} value Send a post request with header values "P123DT22H14M12.011S"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramDurationWithHttpOperationResponse(scenario: string, value: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramDurationOperationSpec);
  }

  /**
   * Get a response with header values "P123DT22H14M12.011S"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseDurationWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDurationResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDurationOperationSpec) as Promise<Models.HeaderResponseDurationResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid"
   *
   * @param {Uint8Array} value Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramByteWithHttpOperationResponse(scenario: string, value: Uint8Array, options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramByteOperationSpec);
  }

  /**
   * Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseByteWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseByteResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseByteOperationSpec) as Promise<Models.HeaderResponseByteResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario":
   * "null", "value": null
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "null" or
   * "empty"
   *
   * @param {HeaderParamEnumOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  paramEnumWithHttpOperationResponse(scenario: string, options?: Models.HeaderParamEnumOptionalParams): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      paramEnumOperationSpec);
  }

  /**
   * Get a response with header values "GREY" or null
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "null" or
   * "empty"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  responseEnumWithHttpOperationResponse(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseEnumResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseEnumOperationSpec) as Promise<Models.HeaderResponseEnumResponse>;
  }

  /**
   * Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  customRequestIdWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      customRequestIdOperationSpec);
  }

  /**
   * Send a post request with header value "User-Agent": "overwrite"
   *
   * @param {string} userAgent Send a post request with header value "User-Agent": "overwrite"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramExistingKey(userAgent: string): Promise<void>;
  paramExistingKey(userAgent: string, options: msRest.RequestOptionsBase): Promise<void>;
  paramExistingKey(userAgent: string, callback: msRest.ServiceCallback<void>): void;
  paramExistingKey(userAgent: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramExistingKey(userAgent: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramExistingKeyWithHttpOperationResponse.bind(this), userAgent, options, callback);
  }

  /**
   * Get a response with header value "User-Agent": "overwrite"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseExistingKey(): Promise<void>;
  responseExistingKey(options: msRest.RequestOptionsBase): Promise<void>;
  responseExistingKey(callback: msRest.ServiceCallback<void>): void;
  responseExistingKey(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseExistingKey(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseExistingKeyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a post request with header value "Content-Type": "text/html"
   *
   * @param {string} contentType Send a post request with header value "Content-Type": "text/html"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramProtectedKey(contentType: string): Promise<void>;
  paramProtectedKey(contentType: string, options: msRest.RequestOptionsBase): Promise<void>;
  paramProtectedKey(contentType: string, callback: msRest.ServiceCallback<void>): void;
  paramProtectedKey(contentType: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramProtectedKey(contentType: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramProtectedKeyWithHttpOperationResponse.bind(this), contentType, options, callback);
  }

  /**
   * Get a response with header value "Content-Type": "text/html"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseProtectedKey(): Promise<void>;
  responseProtectedKey(options: msRest.RequestOptionsBase): Promise<void>;
  responseProtectedKey(callback: msRest.ServiceCallback<void>): void;
  responseProtectedKey(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseProtectedKey(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseProtectedKeyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 1 or "scenario":
   * "negative", "value": -2
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {number} value Send a post request with header values 1 or -2
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramInteger(scenario: string, value: number): Promise<void>;
  paramInteger(scenario: string, value: number, options: msRest.RequestOptionsBase): Promise<void>;
  paramInteger(scenario: string, value: number, callback: msRest.ServiceCallback<void>): void;
  paramInteger(scenario: string, value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramInteger(scenario: string, value: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramIntegerWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header value "value": 1 or -2
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseInteger(scenario: string): Promise<void>;
  responseInteger(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseInteger(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseInteger(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseInteger(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseIntegerWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 105 or "scenario":
   * "negative", "value": -2
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {number} value Send a post request with header values 105 or -2
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramLong(scenario: string, value: number): Promise<void>;
  paramLong(scenario: string, value: number, options: msRest.RequestOptionsBase): Promise<void>;
  paramLong(scenario: string, value: number, callback: msRest.ServiceCallback<void>): void;
  paramLong(scenario: string, value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramLong(scenario: string, value: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramLongWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header value "value": 105 or -2
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseLong(scenario: string): Promise<void>;
  responseLong(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseLong(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseLong(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseLong(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseLongWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario":
   * "negative", "value": -3.0
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {number} value Send a post request with header values 0.07 or -3.0
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramFloat(scenario: string, value: number): Promise<void>;
  paramFloat(scenario: string, value: number, options: msRest.RequestOptionsBase): Promise<void>;
  paramFloat(scenario: string, value: number, callback: msRest.ServiceCallback<void>): void;
  paramFloat(scenario: string, value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramFloat(scenario: string, value: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramFloatWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header value "value": 0.07 or -3.0
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseFloat(scenario: string): Promise<void>;
  responseFloat(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseFloat(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseFloat(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseFloat(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseFloatWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario":
   * "negative", "value": -3.0
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {number} value Send a post request with header values 7e120 or -3.0
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramDouble(scenario: string, value: number): Promise<void>;
  paramDouble(scenario: string, value: number, options: msRest.RequestOptionsBase): Promise<void>;
  paramDouble(scenario: string, value: number, callback: msRest.ServiceCallback<void>): void;
  paramDouble(scenario: string, value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramDouble(scenario: string, value: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramDoubleWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header value "value": 7e120 or -3.0
   *
   * @param {string} scenario Send a post request with header values "scenario": "positive" or
   * "negative"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseDouble(scenario: string): Promise<void>;
  responseDouble(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseDouble(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseDouble(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDouble(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseDoubleWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "true", "value": true or "scenario": "false",
   * "value": false
   *
   * @param {string} scenario Send a post request with header values "scenario": "true" or "false"
   *
   * @param {boolean} value Send a post request with header values true or false
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramBool(scenario: string, value: boolean): Promise<void>;
  paramBool(scenario: string, value: boolean, options: msRest.RequestOptionsBase): Promise<void>;
  paramBool(scenario: string, value: boolean, callback: msRest.ServiceCallback<void>): void;
  paramBool(scenario: string, value: boolean, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramBool(scenario: string, value: boolean, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramBoolWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header value "value": true or false
   *
   * @param {string} scenario Send a post request with header values "scenario": "true" or "false"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseBool(scenario: string): Promise<void>;
  responseBool(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseBool(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseBool(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseBool(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseBoolWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps
   * over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": ""
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "null" or
   * "empty"
   *
   * @param {HeaderParamStringOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramString(scenario: string): Promise<void>;
  paramString(scenario: string, options: Models.HeaderParamStringOptionalParams): Promise<void>;
  paramString(scenario: string, callback: msRest.ServiceCallback<void>): void;
  paramString(scenario: string, options: Models.HeaderParamStringOptionalParams, callback: msRest.ServiceCallback<void>): void;
  paramString(scenario: string, options?: Models.HeaderParamStringOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramStringWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "null" or
   * "empty"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseString(scenario: string): Promise<void>;
  responseString(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseString(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseString(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseString(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseStringWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario":
   * "min", "value": "0001-01-01"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {Date | string} value Send a post request with header values "2010-01-01" or "0001-01-01"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramDate(scenario: string, value: Date | string): Promise<void>;
  paramDate(scenario: string, value: Date | string, options: msRest.RequestOptionsBase): Promise<void>;
  paramDate(scenario: string, value: Date | string, callback: msRest.ServiceCallback<void>): void;
  paramDate(scenario: string, value: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramDate(scenario: string, value: Date | string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramDateWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header values "2010-01-01" or "0001-01-01"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseDate(scenario: string): Promise<void>;
  responseDate(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseDate(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseDate(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDate(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseDateWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or
   * "scenario": "min", "value": "0001-01-01T00:00:00Z"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {Date | string} value Send a post request with header values "2010-01-01T12:34:56Z" or
   * "0001-01-01T00:00:00Z"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramDatetime(scenario: string, value: Date | string): Promise<void>;
  paramDatetime(scenario: string, value: Date | string, options: msRest.RequestOptionsBase): Promise<void>;
  paramDatetime(scenario: string, value: Date | string, callback: msRest.ServiceCallback<void>): void;
  paramDatetime(scenario: string, value: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramDatetime(scenario: string, value: Date | string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramDatetimeWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseDatetime(scenario: string): Promise<void>;
  responseDatetime(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseDatetime(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseDatetime(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDatetime(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseDatetimeWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56
   * GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {HeaderParamDatetimeRfc1123OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramDatetimeRfc1123(scenario: string): Promise<void>;
  paramDatetimeRfc1123(scenario: string, options: Models.HeaderParamDatetimeRfc1123OptionalParams): Promise<void>;
  paramDatetimeRfc1123(scenario: string, callback: msRest.ServiceCallback<void>): void;
  paramDatetimeRfc1123(scenario: string, options: Models.HeaderParamDatetimeRfc1123OptionalParams, callback: msRest.ServiceCallback<void>): void;
  paramDatetimeRfc1123(scenario: string, options?: Models.HeaderParamDatetimeRfc1123OptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramDatetimeRfc1123WithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00
   * GMT"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "min"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseDatetimeRfc1123(scenario: string): Promise<void>;
  responseDatetimeRfc1123(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseDatetimeRfc1123(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseDatetimeRfc1123(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDatetimeRfc1123(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseDatetimeRfc1123WithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid"
   *
   * @param {string} value Send a post request with header values "P123DT22H14M12.011S"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramDuration(scenario: string, value: string): Promise<void>;
  paramDuration(scenario: string, value: string, options: msRest.RequestOptionsBase): Promise<void>;
  paramDuration(scenario: string, value: string, callback: msRest.ServiceCallback<void>): void;
  paramDuration(scenario: string, value: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramDuration(scenario: string, value: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramDurationWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header values "P123DT22H14M12.011S"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseDuration(scenario: string): Promise<void>;
  responseDuration(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseDuration(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseDuration(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDuration(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseDurationWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid"
   *
   * @param {Uint8Array} value Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramByte(scenario: string, value: Uint8Array): Promise<void>;
  paramByte(scenario: string, value: Uint8Array, options: msRest.RequestOptionsBase): Promise<void>;
  paramByte(scenario: string, value: Uint8Array, callback: msRest.ServiceCallback<void>): void;
  paramByte(scenario: string, value: Uint8Array, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramByte(scenario: string, value: Uint8Array, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramByteWithHttpOperationResponse.bind(this), scenario, value, options, callback);
  }

  /**
   * Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseByte(scenario: string): Promise<void>;
  responseByte(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseByte(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseByte(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseByte(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseByteWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario":
   * "null", "value": null
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "null" or
   * "empty"
   *
   * @param {HeaderParamEnumOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  paramEnum(scenario: string): Promise<void>;
  paramEnum(scenario: string, options: Models.HeaderParamEnumOptionalParams): Promise<void>;
  paramEnum(scenario: string, callback: msRest.ServiceCallback<void>): void;
  paramEnum(scenario: string, options: Models.HeaderParamEnumOptionalParams, callback: msRest.ServiceCallback<void>): void;
  paramEnum(scenario: string, options?: Models.HeaderParamEnumOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.paramEnumWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Get a response with header values "GREY" or null
   *
   * @param {string} scenario Send a post request with header values "scenario": "valid" or "null" or
   * "empty"
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  responseEnum(scenario: string): Promise<void>;
  responseEnum(scenario: string, options: msRest.RequestOptionsBase): Promise<void>;
  responseEnum(scenario: string, callback: msRest.ServiceCallback<void>): void;
  responseEnum(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseEnum(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.responseEnumWithHttpOperationResponse.bind(this), scenario, options, callback);
  }

  /**
   * Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  customRequestId(): Promise<void>;
  customRequestId(options: msRest.RequestOptionsBase): Promise<void>;
  customRequestId(callback: msRest.ServiceCallback<void>): void;
  customRequestId(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  customRequestId(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.customRequestIdWithHttpOperationResponse.bind(this), options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const paramExistingKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/existingkey",
  headerParameters: [
    Parameters.userAgent
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseExistingKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/existingkey",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseExistingKeyHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramProtectedKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/protectedkey",
  headerParameters: [
    Parameters.contentType
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseProtectedKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/protectedkey",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseProtectedKeyHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramIntegerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/integer",
  headerParameters: [
    Parameters.scenario,
    Parameters.value0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseIntegerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/integer",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseIntegerHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramLongOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/long",
  headerParameters: [
    Parameters.scenario,
    Parameters.value0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseLongOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/long",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseLongHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/float",
  headerParameters: [
    Parameters.scenario,
    Parameters.value0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/float",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseFloatHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/double",
  headerParameters: [
    Parameters.scenario,
    Parameters.value0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/double",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDoubleHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramBoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/bool",
  headerParameters: [
    Parameters.scenario,
    Parameters.value1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseBoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/bool",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseBoolHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/string",
  headerParameters: [
    Parameters.scenario,
    Parameters.value2
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/string",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseStringHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/date",
  headerParameters: [
    Parameters.scenario,
    Parameters.value3
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/date",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDatetimeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/datetime",
  headerParameters: [
    Parameters.scenario,
    Parameters.value4
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDatetimeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/datetime",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDatetimeHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDatetimeRfc1123OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/datetimerfc1123",
  headerParameters: [
    Parameters.scenario,
    Parameters.value5
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDatetimeRfc1123OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/datetimerfc1123",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDatetimeRfc1123Headers
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/duration",
  headerParameters: [
    Parameters.scenario,
    Parameters.value6
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/duration",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDurationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramByteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/byte",
  headerParameters: [
    Parameters.scenario,
    Parameters.value7
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseByteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/byte",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseByteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramEnumOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/enum",
  headerParameters: [
    Parameters.scenario,
    Parameters.value8
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseEnumOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/enum",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseEnumHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const customRequestIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
