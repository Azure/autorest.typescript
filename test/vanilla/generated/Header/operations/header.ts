/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/headerMappers";
import * as Parameters from "../models/parameters";
import { AutoRestSwaggerBATHeaderServiceContext } from "../autoRestSwaggerBATHeaderServiceContext";

/** Class representing a Header. */
export class Header {
  private readonly client: AutoRestSwaggerBATHeaderServiceContext;

  /**
   * Create a Header.
   * @param {AutoRestSwaggerBATHeaderServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATHeaderServiceContext) {
    this.client = client;
  }

  /**
   * Send a post request with header value "User-Agent": "overwrite"
   * @param userAgent Send a post request with header value "User-Agent": "overwrite"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramExistingKey(userAgent: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userAgent Send a post request with header value "User-Agent": "overwrite"
   * @param callback The callback
   */
  paramExistingKey(userAgent: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userAgent Send a post request with header value "User-Agent": "overwrite"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramExistingKey(userAgent: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramExistingKey(userAgent: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        userAgent,
        options
      },
      paramExistingKeyOperationSpec,
      callback);
  }

  /**
   * Get a response with header value "User-Agent": "overwrite"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseExistingKeyResponse>
   */
  responseExistingKey(options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseExistingKeyResponse>;
  /**
   * @param callback The callback
   */
  responseExistingKey(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  responseExistingKey(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseExistingKey(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseExistingKeyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      responseExistingKeyOperationSpec,
      callback) as Promise<Models.HeaderResponseExistingKeyResponse>;
  }

  /**
   * Send a post request with header value "Content-Type": "text/html"
   * @param contentType Send a post request with header value "Content-Type": "text/html"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramProtectedKey(contentType: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param contentType Send a post request with header value "Content-Type": "text/html"
   * @param callback The callback
   */
  paramProtectedKey(contentType: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param contentType Send a post request with header value "Content-Type": "text/html"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramProtectedKey(contentType: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramProtectedKey(contentType: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        contentType,
        options
      },
      paramProtectedKeyOperationSpec,
      callback);
  }

  /**
   * Get a response with header value "Content-Type": "text/html"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseProtectedKeyResponse>
   */
  responseProtectedKey(options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseProtectedKeyResponse>;
  /**
   * @param callback The callback
   */
  responseProtectedKey(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  responseProtectedKey(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseProtectedKey(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseProtectedKeyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      responseProtectedKeyOperationSpec,
      callback) as Promise<Models.HeaderResponseProtectedKeyResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 1 or "scenario":
   * "negative", "value": -2
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 1 or -2
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramInteger(scenario: string, value: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 1 or -2
   * @param callback The callback
   */
  paramInteger(scenario: string, value: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 1 or -2
   * @param options The optional parameters
   * @param callback The callback
   */
  paramInteger(scenario: string, value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramInteger(scenario: string, value: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramIntegerOperationSpec,
      callback);
  }

  /**
   * Get a response with header value "value": 1 or -2
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseIntegerResponse>
   */
  responseInteger(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseIntegerResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param callback The callback
   */
  responseInteger(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseInteger(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseInteger(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseIntegerResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseIntegerOperationSpec,
      callback) as Promise<Models.HeaderResponseIntegerResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 105 or "scenario":
   * "negative", "value": -2
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 105 or -2
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramLong(scenario: string, value: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 105 or -2
   * @param callback The callback
   */
  paramLong(scenario: string, value: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 105 or -2
   * @param options The optional parameters
   * @param callback The callback
   */
  paramLong(scenario: string, value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramLong(scenario: string, value: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramLongOperationSpec,
      callback);
  }

  /**
   * Get a response with header value "value": 105 or -2
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseLongResponse>
   */
  responseLong(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseLongResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param callback The callback
   */
  responseLong(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseLong(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseLong(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseLongResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseLongOperationSpec,
      callback) as Promise<Models.HeaderResponseLongResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario":
   * "negative", "value": -3.0
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 0.07 or -3.0
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramFloat(scenario: string, value: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 0.07 or -3.0
   * @param callback The callback
   */
  paramFloat(scenario: string, value: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 0.07 or -3.0
   * @param options The optional parameters
   * @param callback The callback
   */
  paramFloat(scenario: string, value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramFloat(scenario: string, value: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramFloatOperationSpec,
      callback);
  }

  /**
   * Get a response with header value "value": 0.07 or -3.0
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseFloatResponse>
   */
  responseFloat(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseFloatResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param callback The callback
   */
  responseFloat(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseFloat(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseFloat(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseFloatResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseFloatOperationSpec,
      callback) as Promise<Models.HeaderResponseFloatResponse>;
  }

  /**
   * Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario":
   * "negative", "value": -3.0
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 7e120 or -3.0
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramDouble(scenario: string, value: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 7e120 or -3.0
   * @param callback The callback
   */
  paramDouble(scenario: string, value: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param value Send a post request with header values 7e120 or -3.0
   * @param options The optional parameters
   * @param callback The callback
   */
  paramDouble(scenario: string, value: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramDouble(scenario: string, value: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramDoubleOperationSpec,
      callback);
  }

  /**
   * Get a response with header value "value": 7e120 or -3.0
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseDoubleResponse>
   */
  responseDouble(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDoubleResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param callback The callback
   */
  responseDouble(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "positive" or "negative"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseDouble(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDouble(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseDoubleResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDoubleOperationSpec,
      callback) as Promise<Models.HeaderResponseDoubleResponse>;
  }

  /**
   * Send a post request with header values "scenario": "true", "value": true or "scenario": "false",
   * "value": false
   * @param scenario Send a post request with header values "scenario": "true" or "false"
   * @param value Send a post request with header values true or false
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramBool(scenario: string, value: boolean, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "true" or "false"
   * @param value Send a post request with header values true or false
   * @param callback The callback
   */
  paramBool(scenario: string, value: boolean, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "true" or "false"
   * @param value Send a post request with header values true or false
   * @param options The optional parameters
   * @param callback The callback
   */
  paramBool(scenario: string, value: boolean, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramBool(scenario: string, value: boolean, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramBoolOperationSpec,
      callback);
  }

  /**
   * Get a response with header value "value": true or false
   * @param scenario Send a post request with header values "scenario": "true" or "false"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseBoolResponse>
   */
  responseBool(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseBoolResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "true" or "false"
   * @param callback The callback
   */
  responseBool(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "true" or "false"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseBool(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseBool(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseBoolResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseBoolOperationSpec,
      callback) as Promise<Models.HeaderResponseBoolResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps
   * over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": ""
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramString(scenario: string, options?: Models.HeaderParamStringOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param callback The callback
   */
  paramString(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramString(scenario: string, options: Models.HeaderParamStringOptionalParams, callback: msRest.ServiceCallback<void>): void;
  paramString(scenario: string, options?: Models.HeaderParamStringOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      paramStringOperationSpec,
      callback);
  }

  /**
   * Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseStringResponse>
   */
  responseString(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseStringResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param callback The callback
   */
  responseString(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseString(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseString(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseStringResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseStringOperationSpec,
      callback) as Promise<Models.HeaderResponseStringResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario":
   * "min", "value": "0001-01-01"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param value Send a post request with header values "2010-01-01" or "0001-01-01"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramDate(scenario: string, value: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param value Send a post request with header values "2010-01-01" or "0001-01-01"
   * @param callback The callback
   */
  paramDate(scenario: string, value: Date | string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param value Send a post request with header values "2010-01-01" or "0001-01-01"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramDate(scenario: string, value: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramDate(scenario: string, value: Date | string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramDateOperationSpec,
      callback);
  }

  /**
   * Get a response with header values "2010-01-01" or "0001-01-01"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseDateResponse>
   */
  responseDate(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDateResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param callback The callback
   */
  responseDate(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseDate(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDate(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseDateResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDateOperationSpec,
      callback) as Promise<Models.HeaderResponseDateResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or
   * "scenario": "min", "value": "0001-01-01T00:00:00Z"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param value Send a post request with header values "2010-01-01T12:34:56Z" or
   * "0001-01-01T00:00:00Z"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramDatetime(scenario: string, value: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param value Send a post request with header values "2010-01-01T12:34:56Z" or
   * "0001-01-01T00:00:00Z"
   * @param callback The callback
   */
  paramDatetime(scenario: string, value: Date | string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param value Send a post request with header values "2010-01-01T12:34:56Z" or
   * "0001-01-01T00:00:00Z"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramDatetime(scenario: string, value: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramDatetime(scenario: string, value: Date | string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramDatetimeOperationSpec,
      callback);
  }

  /**
   * Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseDatetimeResponse>
   */
  responseDatetime(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDatetimeResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param callback The callback
   */
  responseDatetime(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseDatetime(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDatetime(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseDatetimeResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDatetimeOperationSpec,
      callback) as Promise<Models.HeaderResponseDatetimeResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56
   * GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramDatetimeRfc1123(scenario: string, options?: Models.HeaderParamDatetimeRfc1123OptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param callback The callback
   */
  paramDatetimeRfc1123(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramDatetimeRfc1123(scenario: string, options: Models.HeaderParamDatetimeRfc1123OptionalParams, callback: msRest.ServiceCallback<void>): void;
  paramDatetimeRfc1123(scenario: string, options?: Models.HeaderParamDatetimeRfc1123OptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      paramDatetimeRfc1123OperationSpec,
      callback);
  }

  /**
   * Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00
   * GMT"
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseDatetimeRfc1123Response>
   */
  responseDatetimeRfc1123(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDatetimeRfc1123Response>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param callback The callback
   */
  responseDatetimeRfc1123(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "min"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseDatetimeRfc1123(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDatetimeRfc1123(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseDatetimeRfc1123Response> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDatetimeRfc1123OperationSpec,
      callback) as Promise<Models.HeaderResponseDatetimeRfc1123Response>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param value Send a post request with header values "P123DT22H14M12.011S"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramDuration(scenario: string, value: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param value Send a post request with header values "P123DT22H14M12.011S"
   * @param callback The callback
   */
  paramDuration(scenario: string, value: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param value Send a post request with header values "P123DT22H14M12.011S"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramDuration(scenario: string, value: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramDuration(scenario: string, value: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramDurationOperationSpec,
      callback);
  }

  /**
   * Get a response with header values "P123DT22H14M12.011S"
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseDurationResponse>
   */
  responseDuration(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseDurationResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param callback The callback
   */
  responseDuration(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseDuration(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseDuration(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseDurationResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseDurationOperationSpec,
      callback) as Promise<Models.HeaderResponseDurationResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param value Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramByte(scenario: string, value: Uint8Array, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param value Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
   * @param callback The callback
   */
  paramByte(scenario: string, value: Uint8Array, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param value Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramByte(scenario: string, value: Uint8Array, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  paramByte(scenario: string, value: Uint8Array, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        value,
        options
      },
      paramByteOperationSpec,
      callback);
  }

  /**
   * Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseByteResponse>
   */
  responseByte(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseByteResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param callback The callback
   */
  responseByte(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseByte(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseByte(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseByteResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseByteOperationSpec,
      callback) as Promise<Models.HeaderResponseByteResponse>;
  }

  /**
   * Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario":
   * "null", "value": null
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  paramEnum(scenario: string, options?: Models.HeaderParamEnumOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param callback The callback
   */
  paramEnum(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param options The optional parameters
   * @param callback The callback
   */
  paramEnum(scenario: string, options: Models.HeaderParamEnumOptionalParams, callback: msRest.ServiceCallback<void>): void;
  paramEnum(scenario: string, options?: Models.HeaderParamEnumOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      paramEnumOperationSpec,
      callback);
  }

  /**
   * Get a response with header values "GREY" or null
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param [options] The optional parameters
   * @returns Promise<Models.HeaderResponseEnumResponse>
   */
  responseEnum(scenario: string, options?: msRest.RequestOptionsBase): Promise<Models.HeaderResponseEnumResponse>;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param callback The callback
   */
  responseEnum(scenario: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
   * @param options The optional parameters
   * @param callback The callback
   */
  responseEnum(scenario: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  responseEnum(scenario: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<Models.HeaderResponseEnumResponse> {
    return this.client.sendOperationRequest(
      {
        scenario,
        options
      },
      responseEnumOperationSpec,
      callback) as Promise<Models.HeaderResponseEnumResponse>;
  }

  /**
   * Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  customRequestId(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  customRequestId(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  customRequestId(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  customRequestId(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      customRequestIdOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const paramExistingKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/existingkey",
  headerParameters: [
    Parameters.userAgent
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseExistingKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/existingkey",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseExistingKeyHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramProtectedKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/protectedkey",
  headerParameters: [
    Parameters.contentType
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseProtectedKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/protectedkey",
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseProtectedKeyHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramIntegerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/integer",
  headerParameters: [
    Parameters.scenario,
    Parameters.value0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseIntegerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/integer",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseIntegerHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramLongOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/long",
  headerParameters: [
    Parameters.scenario,
    Parameters.value0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseLongOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/long",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseLongHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/float",
  headerParameters: [
    Parameters.scenario,
    Parameters.value0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/float",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseFloatHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/double",
  headerParameters: [
    Parameters.scenario,
    Parameters.value0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/double",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDoubleHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramBoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/bool",
  headerParameters: [
    Parameters.scenario,
    Parameters.value1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseBoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/bool",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseBoolHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/string",
  headerParameters: [
    Parameters.scenario,
    Parameters.value2
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseStringOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/string",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseStringHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/date",
  headerParameters: [
    Parameters.scenario,
    Parameters.value3
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/date",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDatetimeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/datetime",
  headerParameters: [
    Parameters.scenario,
    Parameters.value4
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDatetimeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/datetime",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDatetimeHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDatetimeRfc1123OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/datetimerfc1123",
  headerParameters: [
    Parameters.scenario,
    Parameters.value5
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDatetimeRfc1123OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/datetimerfc1123",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDatetimeRfc1123Headers
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramDurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/duration",
  headerParameters: [
    Parameters.scenario,
    Parameters.value6
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseDurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/duration",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseDurationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramByteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/byte",
  headerParameters: [
    Parameters.scenario,
    Parameters.value7
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseByteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/byte",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseByteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const paramEnumOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/param/prim/enum",
  headerParameters: [
    Parameters.scenario,
    Parameters.value8
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const responseEnumOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/response/prim/enum",
  headerParameters: [
    Parameters.scenario
  ],
  responses: {
    200: {
      headersMapper: Mappers.HeaderResponseEnumHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const customRequestIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
