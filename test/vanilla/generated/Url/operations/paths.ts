/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/pathsMappers";
import * as Parameters from "../models/parameters";
import { AutoRestUrlTestServiceContext } from "../autoRestUrlTestServiceContext";

/** Class representing a Paths. */
export class Paths {
  private readonly client: AutoRestUrlTestServiceContext;

  /**
   * Create a Paths.
   * @param {AutoRestUrlTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestUrlTestServiceContext) {
    this.client = client;
  }

  /**
   * Get true Boolean value on path
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBooleanTrueWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanTrueOperationSpec);
  }

  /**
   * Get false Boolean value on path
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBooleanFalseWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBooleanFalseOperationSpec);
  }

  /**
   * Get '1000000' integer value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getIntOneMillionWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntOneMillionOperationSpec);
  }

  /**
   * Get '-1000000' integer value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getIntNegativeOneMillionWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getIntNegativeOneMillionOperationSpec);
  }

  /**
   * Get '10000000000' 64 bit integer value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getTenBillionWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getTenBillionOperationSpec);
  }

  /**
   * Get '-10000000000' 64 bit integer value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getNegativeTenBillionWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNegativeTenBillionOperationSpec);
  }

  /**
   * Get '1.034E+20' numeric value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  floatScientificPositiveWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      floatScientificPositiveOperationSpec);
  }

  /**
   * Get '-1.034E-20' numeric value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  floatScientificNegativeWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      floatScientificNegativeOperationSpec);
  }

  /**
   * Get '9999999.999' numeric value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  doubleDecimalPositiveWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      doubleDecimalPositiveOperationSpec);
  }

  /**
   * Get '-9999999.999' numeric value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  doubleDecimalNegativeWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      doubleDecimalNegativeOperationSpec);
  }

  /**
   * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  stringUnicodeWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      stringUnicodeOperationSpec);
  }

  /**
   * Get 'begin!*'();:@ &=+$,/?#[]end
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  stringUrlEncodedWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      stringUrlEncodedOperationSpec);
  }

  /**
   * Get ''
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  stringEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      stringEmptyOperationSpec);
  }

  /**
   * Get null (should throw)
   *
   * @param {string} stringPath null string value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  stringNullWithHttpOperationResponse(stringPath: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        stringPath,
        options
      },
      stringNullOperationSpec);
  }

  /**
   * Get using uri with 'green color' in path parameter
   *
   * @param {UriColor} enumPath send the value green. Possible values include: 'red color', 'green
   * color', 'blue color'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  enumValidWithHttpOperationResponse(enumPath: Models.UriColor, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        enumPath,
        options
      },
      enumValidOperationSpec);
  }

  /**
   * Get null (should throw on the client before the request is sent on wire)
   *
   * @param {UriColor} enumPath send null should throw. Possible values include: 'red color', 'green
   * color', 'blue color'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  enumNullWithHttpOperationResponse(enumPath: Models.UriColor, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        enumPath,
        options
      },
      enumNullOperationSpec);
  }

  /**
   * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
   *
   * @param {Uint8Array} bytePath '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  byteMultiByteWithHttpOperationResponse(bytePath: Uint8Array, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        bytePath,
        options
      },
      byteMultiByteOperationSpec);
  }

  /**
   * Get '' as byte array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  byteEmptyWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      byteEmptyOperationSpec);
  }

  /**
   * Get null as byte array (should throw)
   *
   * @param {Uint8Array} bytePath null as byte array (should throw)
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  byteNullWithHttpOperationResponse(bytePath: Uint8Array, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        bytePath,
        options
      },
      byteNullOperationSpec);
  }

  /**
   * Get '2012-01-01' as date
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  dateValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      dateValidOperationSpec);
  }

  /**
   * Get null as date - this should throw or be unusable on the client side, depending on date
   * representation
   *
   * @param {Date | string} datePath null as date (should throw)
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  dateNullWithHttpOperationResponse(datePath: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        datePath,
        options
      },
      dateNullOperationSpec);
  }

  /**
   * Get '2012-01-01T01:01:01Z' as date-time
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  dateTimeValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      dateTimeValidOperationSpec);
  }

  /**
   * Get null as date-time, should be disallowed or throw depending on representation of date-time
   *
   * @param {Date | string} dateTimePath null as date-time
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  dateTimeNullWithHttpOperationResponse(dateTimePath: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        dateTimePath,
        options
      },
      dateTimeNullOperationSpec);
  }

  /**
   * Get 'lorem' encoded value as 'bG9yZW0' (base64url)
   *
   * @param {Uint8Array} base64UrlPath base64url encoded value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  base64UrlWithHttpOperationResponse(base64UrlPath: Uint8Array, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        base64UrlPath,
        options
      },
      base64UrlOperationSpec);
  }

  /**
   * Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
   * csv-array format
   *
   * @param {string[]} arrayPath an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' ,
   * null, ''] using the csv-array format
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  arrayCsvInPathWithHttpOperationResponse(arrayPath: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        arrayPath,
        options
      },
      arrayCsvInPathOperationSpec);
  }

  /**
   * Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
   *
   * @param {Date | string} unixTimeUrlPath Unix time encoded value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  unixTimeUrlWithHttpOperationResponse(unixTimeUrlPath: Date | string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        unixTimeUrlPath,
        options
      },
      unixTimeUrlOperationSpec);
  }

  /**
   * Get true Boolean value on path
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBooleanTrue(): Promise<void>;
  getBooleanTrue(options: msRest.RequestOptionsBase): Promise<void>;
  getBooleanTrue(callback: msRest.ServiceCallback<void>): void;
  getBooleanTrue(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getBooleanTrue(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getBooleanTrueWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get false Boolean value on path
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBooleanFalse(): Promise<void>;
  getBooleanFalse(options: msRest.RequestOptionsBase): Promise<void>;
  getBooleanFalse(callback: msRest.ServiceCallback<void>): void;
  getBooleanFalse(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getBooleanFalse(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getBooleanFalseWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '1000000' integer value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getIntOneMillion(): Promise<void>;
  getIntOneMillion(options: msRest.RequestOptionsBase): Promise<void>;
  getIntOneMillion(callback: msRest.ServiceCallback<void>): void;
  getIntOneMillion(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getIntOneMillion(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getIntOneMillionWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '-1000000' integer value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getIntNegativeOneMillion(): Promise<void>;
  getIntNegativeOneMillion(options: msRest.RequestOptionsBase): Promise<void>;
  getIntNegativeOneMillion(callback: msRest.ServiceCallback<void>): void;
  getIntNegativeOneMillion(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getIntNegativeOneMillion(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getIntNegativeOneMillionWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '10000000000' 64 bit integer value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getTenBillion(): Promise<void>;
  getTenBillion(options: msRest.RequestOptionsBase): Promise<void>;
  getTenBillion(callback: msRest.ServiceCallback<void>): void;
  getTenBillion(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getTenBillion(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getTenBillionWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '-10000000000' 64 bit integer value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getNegativeTenBillion(): Promise<void>;
  getNegativeTenBillion(options: msRest.RequestOptionsBase): Promise<void>;
  getNegativeTenBillion(callback: msRest.ServiceCallback<void>): void;
  getNegativeTenBillion(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getNegativeTenBillion(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getNegativeTenBillionWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '1.034E+20' numeric value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  floatScientificPositive(): Promise<void>;
  floatScientificPositive(options: msRest.RequestOptionsBase): Promise<void>;
  floatScientificPositive(callback: msRest.ServiceCallback<void>): void;
  floatScientificPositive(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  floatScientificPositive(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.floatScientificPositiveWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '-1.034E-20' numeric value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  floatScientificNegative(): Promise<void>;
  floatScientificNegative(options: msRest.RequestOptionsBase): Promise<void>;
  floatScientificNegative(callback: msRest.ServiceCallback<void>): void;
  floatScientificNegative(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  floatScientificNegative(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.floatScientificNegativeWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '9999999.999' numeric value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  doubleDecimalPositive(): Promise<void>;
  doubleDecimalPositive(options: msRest.RequestOptionsBase): Promise<void>;
  doubleDecimalPositive(callback: msRest.ServiceCallback<void>): void;
  doubleDecimalPositive(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  doubleDecimalPositive(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.doubleDecimalPositiveWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '-9999999.999' numeric value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  doubleDecimalNegative(): Promise<void>;
  doubleDecimalNegative(options: msRest.RequestOptionsBase): Promise<void>;
  doubleDecimalNegative(callback: msRest.ServiceCallback<void>): void;
  doubleDecimalNegative(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  doubleDecimalNegative(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.doubleDecimalNegativeWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  stringUnicode(): Promise<void>;
  stringUnicode(options: msRest.RequestOptionsBase): Promise<void>;
  stringUnicode(callback: msRest.ServiceCallback<void>): void;
  stringUnicode(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stringUnicode(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.stringUnicodeWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get 'begin!*'();:@ &=+$,/?#[]end
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  stringUrlEncoded(): Promise<void>;
  stringUrlEncoded(options: msRest.RequestOptionsBase): Promise<void>;
  stringUrlEncoded(callback: msRest.ServiceCallback<void>): void;
  stringUrlEncoded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stringUrlEncoded(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.stringUrlEncodedWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get ''
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  stringEmpty(): Promise<void>;
  stringEmpty(options: msRest.RequestOptionsBase): Promise<void>;
  stringEmpty(callback: msRest.ServiceCallback<void>): void;
  stringEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stringEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.stringEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get null (should throw)
   *
   * @param {string} stringPath null string value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  stringNull(stringPath: string): Promise<void>;
  stringNull(stringPath: string, options: msRest.RequestOptionsBase): Promise<void>;
  stringNull(stringPath: string, callback: msRest.ServiceCallback<void>): void;
  stringNull(stringPath: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stringNull(stringPath: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.stringNullWithHttpOperationResponse.bind(this), stringPath, options, callback);
  }

  /**
   * Get using uri with 'green color' in path parameter
   *
   * @param {UriColor} enumPath send the value green. Possible values include: 'red color', 'green
   * color', 'blue color'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  enumValid(enumPath: Models.UriColor): Promise<void>;
  enumValid(enumPath: Models.UriColor, options: msRest.RequestOptionsBase): Promise<void>;
  enumValid(enumPath: Models.UriColor, callback: msRest.ServiceCallback<void>): void;
  enumValid(enumPath: Models.UriColor, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  enumValid(enumPath: Models.UriColor, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.enumValidWithHttpOperationResponse.bind(this), enumPath, options, callback);
  }

  /**
   * Get null (should throw on the client before the request is sent on wire)
   *
   * @param {UriColor} enumPath send null should throw. Possible values include: 'red color', 'green
   * color', 'blue color'
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  enumNull(enumPath: Models.UriColor): Promise<void>;
  enumNull(enumPath: Models.UriColor, options: msRest.RequestOptionsBase): Promise<void>;
  enumNull(enumPath: Models.UriColor, callback: msRest.ServiceCallback<void>): void;
  enumNull(enumPath: Models.UriColor, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  enumNull(enumPath: Models.UriColor, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.enumNullWithHttpOperationResponse.bind(this), enumPath, options, callback);
  }

  /**
   * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
   *
   * @param {Uint8Array} bytePath '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  byteMultiByte(bytePath: Uint8Array): Promise<void>;
  byteMultiByte(bytePath: Uint8Array, options: msRest.RequestOptionsBase): Promise<void>;
  byteMultiByte(bytePath: Uint8Array, callback: msRest.ServiceCallback<void>): void;
  byteMultiByte(bytePath: Uint8Array, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  byteMultiByte(bytePath: Uint8Array, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.byteMultiByteWithHttpOperationResponse.bind(this), bytePath, options, callback);
  }

  /**
   * Get '' as byte array
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  byteEmpty(): Promise<void>;
  byteEmpty(options: msRest.RequestOptionsBase): Promise<void>;
  byteEmpty(callback: msRest.ServiceCallback<void>): void;
  byteEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  byteEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.byteEmptyWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get null as byte array (should throw)
   *
   * @param {Uint8Array} bytePath null as byte array (should throw)
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  byteNull(bytePath: Uint8Array): Promise<void>;
  byteNull(bytePath: Uint8Array, options: msRest.RequestOptionsBase): Promise<void>;
  byteNull(bytePath: Uint8Array, callback: msRest.ServiceCallback<void>): void;
  byteNull(bytePath: Uint8Array, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  byteNull(bytePath: Uint8Array, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.byteNullWithHttpOperationResponse.bind(this), bytePath, options, callback);
  }

  /**
   * Get '2012-01-01' as date
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  dateValid(): Promise<void>;
  dateValid(options: msRest.RequestOptionsBase): Promise<void>;
  dateValid(callback: msRest.ServiceCallback<void>): void;
  dateValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  dateValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.dateValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get null as date - this should throw or be unusable on the client side, depending on date
   * representation
   *
   * @param {Date | string} datePath null as date (should throw)
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  dateNull(datePath: Date | string): Promise<void>;
  dateNull(datePath: Date | string, options: msRest.RequestOptionsBase): Promise<void>;
  dateNull(datePath: Date | string, callback: msRest.ServiceCallback<void>): void;
  dateNull(datePath: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  dateNull(datePath: Date | string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.dateNullWithHttpOperationResponse.bind(this), datePath, options, callback);
  }

  /**
   * Get '2012-01-01T01:01:01Z' as date-time
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  dateTimeValid(): Promise<void>;
  dateTimeValid(options: msRest.RequestOptionsBase): Promise<void>;
  dateTimeValid(callback: msRest.ServiceCallback<void>): void;
  dateTimeValid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  dateTimeValid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.dateTimeValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get null as date-time, should be disallowed or throw depending on representation of date-time
   *
   * @param {Date | string} dateTimePath null as date-time
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  dateTimeNull(dateTimePath: Date | string): Promise<void>;
  dateTimeNull(dateTimePath: Date | string, options: msRest.RequestOptionsBase): Promise<void>;
  dateTimeNull(dateTimePath: Date | string, callback: msRest.ServiceCallback<void>): void;
  dateTimeNull(dateTimePath: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  dateTimeNull(dateTimePath: Date | string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.dateTimeNullWithHttpOperationResponse.bind(this), dateTimePath, options, callback);
  }

  /**
   * Get 'lorem' encoded value as 'bG9yZW0' (base64url)
   *
   * @param {Uint8Array} base64UrlPath base64url encoded value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  base64Url(base64UrlPath: Uint8Array): Promise<void>;
  base64Url(base64UrlPath: Uint8Array, options: msRest.RequestOptionsBase): Promise<void>;
  base64Url(base64UrlPath: Uint8Array, callback: msRest.ServiceCallback<void>): void;
  base64Url(base64UrlPath: Uint8Array, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  base64Url(base64UrlPath: Uint8Array, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.base64UrlWithHttpOperationResponse.bind(this), base64UrlPath, options, callback);
  }

  /**
   * Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
   * csv-array format
   *
   * @param {string[]} arrayPath an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' ,
   * null, ''] using the csv-array format
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  arrayCsvInPath(arrayPath: string[]): Promise<void>;
  arrayCsvInPath(arrayPath: string[], options: msRest.RequestOptionsBase): Promise<void>;
  arrayCsvInPath(arrayPath: string[], callback: msRest.ServiceCallback<void>): void;
  arrayCsvInPath(arrayPath: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  arrayCsvInPath(arrayPath: string[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.arrayCsvInPathWithHttpOperationResponse.bind(this), arrayPath, options, callback);
  }

  /**
   * Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
   *
   * @param {Date | string} unixTimeUrlPath Unix time encoded value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  unixTimeUrl(unixTimeUrlPath: Date | string): Promise<void>;
  unixTimeUrl(unixTimeUrlPath: Date | string, options: msRest.RequestOptionsBase): Promise<void>;
  unixTimeUrl(unixTimeUrlPath: Date | string, callback: msRest.ServiceCallback<void>): void;
  unixTimeUrl(unixTimeUrlPath: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unixTimeUrl(unixTimeUrlPath: Date | string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.unixTimeUrlWithHttpOperationResponse.bind(this), unixTimeUrlPath, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getBooleanTrueOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/bool/true/{boolPath}",
  urlParameters: [
    Parameters.boolPath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBooleanFalseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/bool/false/{boolPath}",
  urlParameters: [
    Parameters.boolPath1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntOneMillionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/int/1000000/{intPath}",
  urlParameters: [
    Parameters.intPath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getIntNegativeOneMillionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/int/-1000000/{intPath}",
  urlParameters: [
    Parameters.intPath1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getTenBillionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/long/10000000000/{longPath}",
  urlParameters: [
    Parameters.longPath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNegativeTenBillionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/long/-10000000000/{longPath}",
  urlParameters: [
    Parameters.longPath1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const floatScientificPositiveOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/float/1.034E+20/{floatPath}",
  urlParameters: [
    Parameters.floatPath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const floatScientificNegativeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/float/-1.034E-20/{floatPath}",
  urlParameters: [
    Parameters.floatPath1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const doubleDecimalPositiveOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/double/9999999.999/{doublePath}",
  urlParameters: [
    Parameters.doublePath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const doubleDecimalNegativeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/double/-9999999.999/{doublePath}",
  urlParameters: [
    Parameters.doublePath1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const stringUnicodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/string/unicode/{stringPath}",
  urlParameters: [
    Parameters.stringPath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const stringUrlEncodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}",
  urlParameters: [
    Parameters.stringPath1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const stringEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/string/empty/{stringPath}",
  urlParameters: [
    Parameters.stringPath2
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const stringNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/string/null/{stringPath}",
  urlParameters: [
    Parameters.stringPath3
  ],
  responses: {
    400: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const enumValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/enum/green%20color/{enumPath}",
  urlParameters: [
    Parameters.enumPath
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const enumNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/string/null/{enumPath}",
  urlParameters: [
    Parameters.enumPath
  ],
  responses: {
    400: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const byteMultiByteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/byte/multibyte/{bytePath}",
  urlParameters: [
    Parameters.bytePath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const byteEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/byte/empty/{bytePath}",
  urlParameters: [
    Parameters.bytePath1
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const byteNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/byte/null/{bytePath}",
  urlParameters: [
    Parameters.bytePath0
  ],
  responses: {
    400: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const dateValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/date/2012-01-01/{datePath}",
  urlParameters: [
    Parameters.datePath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const dateNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/date/null/{datePath}",
  urlParameters: [
    Parameters.datePath1
  ],
  responses: {
    400: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const dateTimeValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}",
  urlParameters: [
    Parameters.dateTimePath0
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const dateTimeNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/datetime/null/{dateTimePath}",
  urlParameters: [
    Parameters.dateTimePath1
  ],
  responses: {
    400: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const base64UrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/string/bG9yZW0/{base64UrlPath}",
  urlParameters: [
    Parameters.base64UrlPath
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const arrayCsvInPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}",
  urlParameters: [
    Parameters.arrayPath
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const unixTimeUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "paths/int/1460505600/{unixTimeUrlPath}",
  urlParameters: [
    Parameters.unixTimeUrlPath
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
