/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { booleanSpec, byteArraySpec, compositeSpec, CompositeTypeSpec, dateSpec, dateTimeSpec, enumSpec, numberSpec, sequenceSpec, stringSpec } from "ms-rest-js";

export const ErrorModel: CompositeTypeSpec = compositeSpec("ErrorModel", {
  status: {
    valueSpec: numberSpec
  },
  message: {
    valueSpec: stringSpec
  }
});

export const AutoRestUrlTestServiceOptions: CompositeTypeSpec = compositeSpec("AutoRestUrlTestServiceOptions", {
  /**
   * should contain value null
   */
  globalStringQuery: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesGetBooleanNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesGetBooleanNullOptionalParams", {
  /**
   * null boolean value
   */
  boolQuery: {
    valueSpec: booleanSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesGetIntNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesGetIntNullOptionalParams", {
  /**
   * null integer value
   */
  intQuery: {
    valueSpec: numberSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesGetLongNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesGetLongNullOptionalParams", {
  /**
   * null 64 bit integer value
   */
  longQuery: {
    valueSpec: numberSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesFloatNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesFloatNullOptionalParams", {
  /**
   * null numeric value
   */
  floatQuery: {
    valueSpec: numberSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesDoubleNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesDoubleNullOptionalParams", {
  /**
   * null numeric value
   */
  doubleQuery: {
    valueSpec: numberSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesStringNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesStringNullOptionalParams", {
  /**
   * null string value
   */
  stringQuery: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesEnumValidOptionalParams: CompositeTypeSpec = compositeSpec("QueriesEnumValidOptionalParams", {
  /**
   * 'green color' enum value. Possible values include: 'red color', 'green color', 'blue color'
   */
  enumQuery: {
    valueSpec: enumSpec("UriColor", [ 'red color', 'green color', 'blue color' ])
  }
});

/**
 * Optional Parameters.
 */
export const QueriesEnumNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesEnumNullOptionalParams", {
  /**
   * null string value. Possible values include: 'red color', 'green color', 'blue color'
   */
  enumQuery: {
    valueSpec: enumSpec("UriColor", [ 'red color', 'green color', 'blue color' ])
  }
});

/**
 * Optional Parameters.
 */
export const QueriesByteMultiByteOptionalParams: CompositeTypeSpec = compositeSpec("QueriesByteMultiByteOptionalParams", {
  /**
   * '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
   */
  byteQuery: {
    valueSpec: byteArraySpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesByteNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesByteNullOptionalParams", {
  /**
   * null as byte array (no query parameters in uri)
   */
  byteQuery: {
    valueSpec: byteArraySpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesDateNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesDateNullOptionalParams", {
  /**
   * null as date (no query parameters in uri)
   */
  dateQuery: {
    valueSpec: dateSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesDateTimeNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesDateTimeNullOptionalParams", {
  /**
   * null as date-time (no query parameters)
   */
  dateTimeQuery: {
    valueSpec: dateTimeSpec
  }
});

/**
 * Optional Parameters.
 */
export const QueriesArrayStringCsvValidOptionalParams: CompositeTypeSpec = compositeSpec("QueriesArrayStringCsvValidOptionalParams", {
  /**
   * an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
   * csv-array format
   */
  arrayQuery: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

/**
 * Optional Parameters.
 */
export const QueriesArrayStringCsvNullOptionalParams: CompositeTypeSpec = compositeSpec("QueriesArrayStringCsvNullOptionalParams", {
  /**
   * a null array of string using the csv-array format
   */
  arrayQuery: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

/**
 * Optional Parameters.
 */
export const QueriesArrayStringCsvEmptyOptionalParams: CompositeTypeSpec = compositeSpec("QueriesArrayStringCsvEmptyOptionalParams", {
  /**
   * an empty array [] of string using the csv-array format
   */
  arrayQuery: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

/**
 * Optional Parameters.
 */
export const QueriesArrayStringSsvValidOptionalParams: CompositeTypeSpec = compositeSpec("QueriesArrayStringSsvValidOptionalParams", {
  /**
   * an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
   * ssv-array format
   */
  arrayQuery: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

/**
 * Optional Parameters.
 */
export const QueriesArrayStringTsvValidOptionalParams: CompositeTypeSpec = compositeSpec("QueriesArrayStringTsvValidOptionalParams", {
  /**
   * an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
   * tsv-array format
   */
  arrayQuery: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

/**
 * Optional Parameters.
 */
export const QueriesArrayStringPipesValidOptionalParams: CompositeTypeSpec = compositeSpec("QueriesArrayStringPipesValidOptionalParams", {
  /**
   * an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
   * pipes-array format
   */
  arrayQuery: {
    valueSpec: sequenceSpec(stringSpec)
  }
});

/**
 * Optional Parameters.
 */
export const PathItemsGetAllWithValuesOptionalParams: CompositeTypeSpec = compositeSpec("PathItemsGetAllWithValuesOptionalParams", {
  /**
   * should contain value 'localStringQuery'
   */
  localStringQuery: {
    valueSpec: stringSpec
  },
  /**
   * A string value 'pathItemStringQuery' that appears as a query parameter
   */
  pathItemStringQuery: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const PathItemsGetGlobalQueryNullOptionalParams: CompositeTypeSpec = compositeSpec("PathItemsGetGlobalQueryNullOptionalParams", {
  /**
   * should contain value 'localStringQuery'
   */
  localStringQuery: {
    valueSpec: stringSpec
  },
  /**
   * A string value 'pathItemStringQuery' that appears as a query parameter
   */
  pathItemStringQuery: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const PathItemsGetGlobalAndLocalQueryNullOptionalParams: CompositeTypeSpec = compositeSpec("PathItemsGetGlobalAndLocalQueryNullOptionalParams", {
  /**
   * should contain null value
   */
  localStringQuery: {
    valueSpec: stringSpec
  },
  /**
   * A string value 'pathItemStringQuery' that appears as a query parameter
   */
  pathItemStringQuery: {
    valueSpec: stringSpec
  }
});

/**
 * Optional Parameters.
 */
export const PathItemsGetLocalPathItemQueryNullOptionalParams: CompositeTypeSpec = compositeSpec("PathItemsGetLocalPathItemQueryNullOptionalParams", {
  /**
   * should contain value null
   */
  localStringQuery: {
    valueSpec: stringSpec
  },
  /**
   * should contain value null
   */
  pathItemStringQuery: {
    valueSpec: stringSpec
  }
});
