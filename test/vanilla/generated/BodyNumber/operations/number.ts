/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Mappers from "../models/numberMappers";
import { AutoRestNumberTestServiceContext } from "../autoRestNumberTestServiceContext";

/** Class representing a Number. */
export class Number {
  private readonly client: AutoRestNumberTestServiceContext;

  /**
   * Create a Number.
   * @param {AutoRestNumberTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestNumberTestServiceContext) {
    this.client = client;
  }

  /**
   * Get null Number value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getNullWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec);
  }

  /**
   * Get invalid float Number value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getInvalidFloatWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidFloatOperationSpec);
  }

  /**
   * Get invalid double Number value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getInvalidDoubleWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidDoubleOperationSpec);
  }

  /**
   * Get invalid decimal Number value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getInvalidDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidDecimalOperationSpec);
  }

  /**
   * Put big float value 3.402823e+20
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBigFloatWithHttpOperationResponse(numberBody: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putBigFloatOperationSpec);
  }

  /**
   * Get big float value 3.402823e+20
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBigFloatWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigFloatOperationSpec);
  }

  /**
   * Put big double value 2.5976931e+101
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBigDoubleWithHttpOperationResponse(numberBody: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putBigDoubleOperationSpec);
  }

  /**
   * Get big double value 2.5976931e+101
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBigDoubleWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDoubleOperationSpec);
  }

  /**
   * Put big double value 99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBigDoublePositiveDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putBigDoublePositiveDecimalOperationSpec);
  }

  /**
   * Get big double value 99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBigDoublePositiveDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDoublePositiveDecimalOperationSpec);
  }

  /**
   * Put big double value -99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBigDoubleNegativeDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putBigDoubleNegativeDecimalOperationSpec);
  }

  /**
   * Get big double value -99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBigDoubleNegativeDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDoubleNegativeDecimalOperationSpec);
  }

  /**
   * Put big decimal value 2.5976931e+101
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBigDecimalWithHttpOperationResponse(numberBody: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putBigDecimalOperationSpec);
  }

  /**
   * Get big decimal value 2.5976931e+101
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBigDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDecimalOperationSpec);
  }

  /**
   * Put big decimal value 99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBigDecimalPositiveDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putBigDecimalPositiveDecimalOperationSpec);
  }

  /**
   * Get big decimal value 99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBigDecimalPositiveDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDecimalPositiveDecimalOperationSpec);
  }

  /**
   * Put big decimal value -99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putBigDecimalNegativeDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putBigDecimalNegativeDecimalOperationSpec);
  }

  /**
   * Get big decimal value -99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBigDecimalNegativeDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDecimalNegativeDecimalOperationSpec);
  }

  /**
   * Put small float value 3.402823e-20
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putSmallFloatWithHttpOperationResponse(numberBody: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putSmallFloatOperationSpec);
  }

  /**
   * Get big double value 3.402823e-20
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSmallFloatWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSmallFloatOperationSpec);
  }

  /**
   * Put small double value 2.5976931e-101
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putSmallDoubleWithHttpOperationResponse(numberBody: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putSmallDoubleOperationSpec);
  }

  /**
   * Get big double value 2.5976931e-101
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSmallDoubleWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSmallDoubleOperationSpec);
  }

  /**
   * Put small decimal value 2.5976931e-101
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  putSmallDecimalWithHttpOperationResponse(numberBody: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putSmallDecimalOperationSpec);
  }

  /**
   * Get small decimal value 2.5976931e-101
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSmallDecimalWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<number>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSmallDecimalOperationSpec);
  }

  /**
   * Get null Number value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getNull(): Promise<number>;
  getNull(options: msRest.RequestOptionsBase): Promise<number>;
  getNull(callback: msRest.ServiceCallback<number>): void;
  getNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getNullWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get invalid float Number value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getInvalidFloat(): Promise<number>;
  getInvalidFloat(options: msRest.RequestOptionsBase): Promise<number>;
  getInvalidFloat(callback: msRest.ServiceCallback<number>): void;
  getInvalidFloat(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getInvalidFloat(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getInvalidFloatWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get invalid double Number value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getInvalidDouble(): Promise<number>;
  getInvalidDouble(options: msRest.RequestOptionsBase): Promise<number>;
  getInvalidDouble(callback: msRest.ServiceCallback<number>): void;
  getInvalidDouble(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getInvalidDouble(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getInvalidDoubleWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get invalid decimal Number value
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getInvalidDecimal(): Promise<number>;
  getInvalidDecimal(options: msRest.RequestOptionsBase): Promise<number>;
  getInvalidDecimal(callback: msRest.ServiceCallback<number>): void;
  getInvalidDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getInvalidDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getInvalidDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put big float value 3.402823e+20
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBigFloat(numberBody: number): Promise<void>;
  putBigFloat(numberBody: number, options: msRest.RequestOptionsBase): Promise<void>;
  putBigFloat(numberBody: number, callback: msRest.ServiceCallback<void>): void;
  putBigFloat(numberBody: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBigFloat(numberBody: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBigFloatWithHttpOperationResponse.bind(this), numberBody, options, callback);
  }

  /**
   * Get big float value 3.402823e+20
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBigFloat(): Promise<number>;
  getBigFloat(options: msRest.RequestOptionsBase): Promise<number>;
  getBigFloat(callback: msRest.ServiceCallback<number>): void;
  getBigFloat(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getBigFloat(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getBigFloatWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put big double value 2.5976931e+101
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBigDouble(numberBody: number): Promise<void>;
  putBigDouble(numberBody: number, options: msRest.RequestOptionsBase): Promise<void>;
  putBigDouble(numberBody: number, callback: msRest.ServiceCallback<void>): void;
  putBigDouble(numberBody: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBigDouble(numberBody: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBigDoubleWithHttpOperationResponse.bind(this), numberBody, options, callback);
  }

  /**
   * Get big double value 2.5976931e+101
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBigDouble(): Promise<number>;
  getBigDouble(options: msRest.RequestOptionsBase): Promise<number>;
  getBigDouble(callback: msRest.ServiceCallback<number>): void;
  getBigDouble(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getBigDouble(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getBigDoubleWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put big double value 99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBigDoublePositiveDecimal(): Promise<void>;
  putBigDoublePositiveDecimal(options: msRest.RequestOptionsBase): Promise<void>;
  putBigDoublePositiveDecimal(callback: msRest.ServiceCallback<void>): void;
  putBigDoublePositiveDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBigDoublePositiveDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBigDoublePositiveDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get big double value 99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBigDoublePositiveDecimal(): Promise<number>;
  getBigDoublePositiveDecimal(options: msRest.RequestOptionsBase): Promise<number>;
  getBigDoublePositiveDecimal(callback: msRest.ServiceCallback<number>): void;
  getBigDoublePositiveDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getBigDoublePositiveDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getBigDoublePositiveDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put big double value -99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBigDoubleNegativeDecimal(): Promise<void>;
  putBigDoubleNegativeDecimal(options: msRest.RequestOptionsBase): Promise<void>;
  putBigDoubleNegativeDecimal(callback: msRest.ServiceCallback<void>): void;
  putBigDoubleNegativeDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBigDoubleNegativeDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBigDoubleNegativeDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get big double value -99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBigDoubleNegativeDecimal(): Promise<number>;
  getBigDoubleNegativeDecimal(options: msRest.RequestOptionsBase): Promise<number>;
  getBigDoubleNegativeDecimal(callback: msRest.ServiceCallback<number>): void;
  getBigDoubleNegativeDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getBigDoubleNegativeDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getBigDoubleNegativeDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put big decimal value 2.5976931e+101
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBigDecimal(numberBody: number): Promise<void>;
  putBigDecimal(numberBody: number, options: msRest.RequestOptionsBase): Promise<void>;
  putBigDecimal(numberBody: number, callback: msRest.ServiceCallback<void>): void;
  putBigDecimal(numberBody: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBigDecimal(numberBody: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBigDecimalWithHttpOperationResponse.bind(this), numberBody, options, callback);
  }

  /**
   * Get big decimal value 2.5976931e+101
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBigDecimal(): Promise<number>;
  getBigDecimal(options: msRest.RequestOptionsBase): Promise<number>;
  getBigDecimal(callback: msRest.ServiceCallback<number>): void;
  getBigDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getBigDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getBigDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put big decimal value 99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBigDecimalPositiveDecimal(): Promise<void>;
  putBigDecimalPositiveDecimal(options: msRest.RequestOptionsBase): Promise<void>;
  putBigDecimalPositiveDecimal(callback: msRest.ServiceCallback<void>): void;
  putBigDecimalPositiveDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBigDecimalPositiveDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBigDecimalPositiveDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get big decimal value 99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBigDecimalPositiveDecimal(): Promise<number>;
  getBigDecimalPositiveDecimal(options: msRest.RequestOptionsBase): Promise<number>;
  getBigDecimalPositiveDecimal(callback: msRest.ServiceCallback<number>): void;
  getBigDecimalPositiveDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getBigDecimalPositiveDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getBigDecimalPositiveDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put big decimal value -99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putBigDecimalNegativeDecimal(): Promise<void>;
  putBigDecimalNegativeDecimal(options: msRest.RequestOptionsBase): Promise<void>;
  putBigDecimalNegativeDecimal(callback: msRest.ServiceCallback<void>): void;
  putBigDecimalNegativeDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBigDecimalNegativeDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putBigDecimalNegativeDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Get big decimal value -99999999.99
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBigDecimalNegativeDecimal(): Promise<number>;
  getBigDecimalNegativeDecimal(options: msRest.RequestOptionsBase): Promise<number>;
  getBigDecimalNegativeDecimal(callback: msRest.ServiceCallback<number>): void;
  getBigDecimalNegativeDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getBigDecimalNegativeDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getBigDecimalNegativeDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put small float value 3.402823e-20
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putSmallFloat(numberBody: number): Promise<void>;
  putSmallFloat(numberBody: number, options: msRest.RequestOptionsBase): Promise<void>;
  putSmallFloat(numberBody: number, callback: msRest.ServiceCallback<void>): void;
  putSmallFloat(numberBody: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putSmallFloat(numberBody: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putSmallFloatWithHttpOperationResponse.bind(this), numberBody, options, callback);
  }

  /**
   * Get big double value 3.402823e-20
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSmallFloat(): Promise<number>;
  getSmallFloat(options: msRest.RequestOptionsBase): Promise<number>;
  getSmallFloat(callback: msRest.ServiceCallback<number>): void;
  getSmallFloat(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getSmallFloat(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getSmallFloatWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put small double value 2.5976931e-101
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putSmallDouble(numberBody: number): Promise<void>;
  putSmallDouble(numberBody: number, options: msRest.RequestOptionsBase): Promise<void>;
  putSmallDouble(numberBody: number, callback: msRest.ServiceCallback<void>): void;
  putSmallDouble(numberBody: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putSmallDouble(numberBody: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putSmallDoubleWithHttpOperationResponse.bind(this), numberBody, options, callback);
  }

  /**
   * Get big double value 2.5976931e-101
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSmallDouble(): Promise<number>;
  getSmallDouble(options: msRest.RequestOptionsBase): Promise<number>;
  getSmallDouble(callback: msRest.ServiceCallback<number>): void;
  getSmallDouble(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getSmallDouble(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getSmallDoubleWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Put small decimal value 2.5976931e-101
   *
   * @param {number} numberBody
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  putSmallDecimal(numberBody: number): Promise<void>;
  putSmallDecimal(numberBody: number, options: msRest.RequestOptionsBase): Promise<void>;
  putSmallDecimal(numberBody: number, callback: msRest.ServiceCallback<void>): void;
  putSmallDecimal(numberBody: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putSmallDecimal(numberBody: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.putSmallDecimalWithHttpOperationResponse.bind(this), numberBody, options, callback);
  }

  /**
   * Get small decimal value 2.5976931e-101
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSmallDecimal(): Promise<number>;
  getSmallDecimal(options: msRest.RequestOptionsBase): Promise<number>;
  getSmallDecimal(callback: msRest.ServiceCallback<number>): void;
  getSmallDecimal(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  getSmallDecimal(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<number>): any {
    return msRest.responseToBody(this.getSmallDecimalWithHttpOperationResponse.bind(this), options, callback);
  }

}

// Operation Specifications
const getNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getInvalidFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/invalidfloat",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getInvalidDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/invaliddouble",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getInvalidDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/invaliddecimal",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putBigFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/float/3.402823e+20",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getBigFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/float/3.402823e+20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putBigDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/double/2.5976931e+101",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getBigDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/double/2.5976931e+101",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putBigDoublePositiveDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/double/99999999.99",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "numberBody",
      defaultValue: 99999999.99,
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getBigDoublePositiveDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/double/99999999.99",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putBigDoubleNegativeDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/double/-99999999.99",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "numberBody",
      defaultValue: -99999999.99,
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getBigDoubleNegativeDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/double/-99999999.99",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putBigDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/decimal/2.5976931e+101",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getBigDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/decimal/2.5976931e+101",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putBigDecimalPositiveDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/decimal/99999999.99",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "numberBody",
      defaultValue: 99999999.99,
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getBigDecimalPositiveDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/decimal/99999999.99",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putBigDecimalNegativeDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/decimal/-99999999.99",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "numberBody",
      defaultValue: -99999999.99,
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getBigDecimalNegativeDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/decimal/-99999999.99",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putSmallFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/small/float/3.402823e-20",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getSmallFloatOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/small/float/3.402823e-20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putSmallDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/small/double/2.5976931e-101",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getSmallDoubleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/small/double/2.5976931e-101",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const putSmallDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "number/small/decimal/2.5976931e-101",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getSmallDecimalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "number/small/decimal/2.5976931e-101",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
