/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/numberMappers";
import { AutoRestNumberTestServiceContext } from "../autoRestNumberTestServiceContext";

/** Class representing a Number. */
export class Number {
  private readonly client: AutoRestNumberTestServiceContext;

  /**
   * Create a Number.
   * @param {AutoRestNumberTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestNumberTestServiceContext) {
    this.client = client;
  }

  /**
   * Get null Number value
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetNullResponse>
   */
  getNull(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetNullResponse>;
  /**
   * @param callback The callback
   */
  getNull(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec,
      callback) as Promise<Models.NumberGetNullResponse>;
  }

  /**
   * Get invalid float Number value
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetInvalidFloatResponse>
   */
  getInvalidFloat(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetInvalidFloatResponse>;
  /**
   * @param callback The callback
   */
  getInvalidFloat(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getInvalidFloat(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getInvalidFloat(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetInvalidFloatResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidFloatOperationSpec,
      callback) as Promise<Models.NumberGetInvalidFloatResponse>;
  }

  /**
   * Get invalid double Number value
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetInvalidDoubleResponse>
   */
  getInvalidDouble(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetInvalidDoubleResponse>;
  /**
   * @param callback The callback
   */
  getInvalidDouble(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getInvalidDouble(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getInvalidDouble(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetInvalidDoubleResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidDoubleOperationSpec,
      callback) as Promise<Models.NumberGetInvalidDoubleResponse>;
  }

  /**
   * Get invalid decimal Number value
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetInvalidDecimalResponse>
   */
  getInvalidDecimal(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetInvalidDecimalResponse>;
  /**
   * @param callback The callback
   */
  getInvalidDecimal(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getInvalidDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getInvalidDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetInvalidDecimalResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidDecimalOperationSpec,
      callback) as Promise<Models.NumberGetInvalidDecimalResponse>;
  }

  /**
   * Put big float value 3.402823e+20
   * @param numberBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBigFloat(numberBody: number, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param numberBody
   * @param callback The callback
   */
  putBigFloat(numberBody: number, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param numberBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putBigFloat(numberBody: number, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBigFloat(numberBody: number, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putBigFloatOperationSpec,
      callback);
  }

  /**
   * Get big float value 3.402823e+20
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetBigFloatResponse>
   */
  getBigFloat(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetBigFloatResponse>;
  /**
   * @param callback The callback
   */
  getBigFloat(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBigFloat(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getBigFloat(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetBigFloatResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigFloatOperationSpec,
      callback) as Promise<Models.NumberGetBigFloatResponse>;
  }

  /**
   * Put big double value 2.5976931e+101
   * @param numberBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBigDouble(numberBody: number, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param numberBody
   * @param callback The callback
   */
  putBigDouble(numberBody: number, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param numberBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putBigDouble(numberBody: number, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBigDouble(numberBody: number, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putBigDoubleOperationSpec,
      callback);
  }

  /**
   * Get big double value 2.5976931e+101
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetBigDoubleResponse>
   */
  getBigDouble(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetBigDoubleResponse>;
  /**
   * @param callback The callback
   */
  getBigDouble(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBigDouble(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getBigDouble(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetBigDoubleResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDoubleOperationSpec,
      callback) as Promise<Models.NumberGetBigDoubleResponse>;
  }

  /**
   * Put big double value 99999999.99
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBigDoublePositiveDecimal(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putBigDoublePositiveDecimal(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putBigDoublePositiveDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBigDoublePositiveDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putBigDoublePositiveDecimalOperationSpec,
      callback);
  }

  /**
   * Get big double value 99999999.99
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetBigDoublePositiveDecimalResponse>
   */
  getBigDoublePositiveDecimal(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetBigDoublePositiveDecimalResponse>;
  /**
   * @param callback The callback
   */
  getBigDoublePositiveDecimal(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBigDoublePositiveDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getBigDoublePositiveDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetBigDoublePositiveDecimalResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDoublePositiveDecimalOperationSpec,
      callback) as Promise<Models.NumberGetBigDoublePositiveDecimalResponse>;
  }

  /**
   * Put big double value -99999999.99
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBigDoubleNegativeDecimal(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putBigDoubleNegativeDecimal(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putBigDoubleNegativeDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBigDoubleNegativeDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putBigDoubleNegativeDecimalOperationSpec,
      callback);
  }

  /**
   * Get big double value -99999999.99
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetBigDoubleNegativeDecimalResponse>
   */
  getBigDoubleNegativeDecimal(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetBigDoubleNegativeDecimalResponse>;
  /**
   * @param callback The callback
   */
  getBigDoubleNegativeDecimal(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBigDoubleNegativeDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getBigDoubleNegativeDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetBigDoubleNegativeDecimalResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDoubleNegativeDecimalOperationSpec,
      callback) as Promise<Models.NumberGetBigDoubleNegativeDecimalResponse>;
  }

  /**
   * Put big decimal value 2.5976931e+101
   * @param numberBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBigDecimal(numberBody: number, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param numberBody
   * @param callback The callback
   */
  putBigDecimal(numberBody: number, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param numberBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putBigDecimal(numberBody: number, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBigDecimal(numberBody: number, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putBigDecimalOperationSpec,
      callback);
  }

  /**
   * Get big decimal value 2.5976931e+101
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetBigDecimalResponse>
   */
  getBigDecimal(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetBigDecimalResponse>;
  /**
   * @param callback The callback
   */
  getBigDecimal(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBigDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getBigDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetBigDecimalResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDecimalOperationSpec,
      callback) as Promise<Models.NumberGetBigDecimalResponse>;
  }

  /**
   * Put big decimal value 99999999.99
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBigDecimalPositiveDecimal(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putBigDecimalPositiveDecimal(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putBigDecimalPositiveDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBigDecimalPositiveDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putBigDecimalPositiveDecimalOperationSpec,
      callback);
  }

  /**
   * Get big decimal value 99999999.99
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetBigDecimalPositiveDecimalResponse>
   */
  getBigDecimalPositiveDecimal(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetBigDecimalPositiveDecimalResponse>;
  /**
   * @param callback The callback
   */
  getBigDecimalPositiveDecimal(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBigDecimalPositiveDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getBigDecimalPositiveDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetBigDecimalPositiveDecimalResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDecimalPositiveDecimalOperationSpec,
      callback) as Promise<Models.NumberGetBigDecimalPositiveDecimalResponse>;
  }

  /**
   * Put big decimal value -99999999.99
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putBigDecimalNegativeDecimal(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putBigDecimalNegativeDecimal(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putBigDecimalNegativeDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putBigDecimalNegativeDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putBigDecimalNegativeDecimalOperationSpec,
      callback);
  }

  /**
   * Get big decimal value -99999999.99
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetBigDecimalNegativeDecimalResponse>
   */
  getBigDecimalNegativeDecimal(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetBigDecimalNegativeDecimalResponse>;
  /**
   * @param callback The callback
   */
  getBigDecimalNegativeDecimal(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBigDecimalNegativeDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getBigDecimalNegativeDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetBigDecimalNegativeDecimalResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBigDecimalNegativeDecimalOperationSpec,
      callback) as Promise<Models.NumberGetBigDecimalNegativeDecimalResponse>;
  }

  /**
   * Put small float value 3.402823e-20
   * @param numberBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putSmallFloat(numberBody: number, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param numberBody
   * @param callback The callback
   */
  putSmallFloat(numberBody: number, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param numberBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putSmallFloat(numberBody: number, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putSmallFloat(numberBody: number, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putSmallFloatOperationSpec,
      callback);
  }

  /**
   * Get big double value 3.402823e-20
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetSmallFloatResponse>
   */
  getSmallFloat(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetSmallFloatResponse>;
  /**
   * @param callback The callback
   */
  getSmallFloat(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSmallFloat(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getSmallFloat(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetSmallFloatResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSmallFloatOperationSpec,
      callback) as Promise<Models.NumberGetSmallFloatResponse>;
  }

  /**
   * Put small double value 2.5976931e-101
   * @param numberBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putSmallDouble(numberBody: number, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param numberBody
   * @param callback The callback
   */
  putSmallDouble(numberBody: number, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param numberBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putSmallDouble(numberBody: number, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putSmallDouble(numberBody: number, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putSmallDoubleOperationSpec,
      callback);
  }

  /**
   * Get big double value 2.5976931e-101
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetSmallDoubleResponse>
   */
  getSmallDouble(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetSmallDoubleResponse>;
  /**
   * @param callback The callback
   */
  getSmallDouble(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSmallDouble(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getSmallDouble(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetSmallDoubleResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSmallDoubleOperationSpec,
      callback) as Promise<Models.NumberGetSmallDoubleResponse>;
  }

  /**
   * Put small decimal value 2.5976931e-101
   * @param numberBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putSmallDecimal(numberBody: number, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param numberBody
   * @param callback The callback
   */
  putSmallDecimal(numberBody: number, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param numberBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putSmallDecimal(numberBody: number, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putSmallDecimal(numberBody: number, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        numberBody,
        options
      },
      putSmallDecimalOperationSpec,
      callback);
  }

  /**
   * Get small decimal value 2.5976931e-101
   * @param [options] The optional parameters
   * @returns Promise<Models.NumberGetSmallDecimalResponse>
   */
  getSmallDecimal(options?: coreHttp.RequestOptionsBase): Promise<Models.NumberGetSmallDecimalResponse>;
  /**
   * @param callback The callback
   */
  getSmallDecimal(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSmallDecimal(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  getSmallDecimal(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.NumberGetSmallDecimalResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSmallDecimalOperationSpec,
      callback) as Promise<Models.NumberGetSmallDecimalResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidFloatOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/invalidfloat",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidDoubleOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/invaliddouble",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/invaliddecimal",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBigFloatOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/float/3.402823e+20",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBigFloatOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/float/3.402823e+20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBigDoubleOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/double/2.5976931e+101",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBigDoubleOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/double/2.5976931e+101",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBigDoublePositiveDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/double/99999999.99",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "numberBody",
      defaultValue: 99999999.99,
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBigDoublePositiveDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/double/99999999.99",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBigDoubleNegativeDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/double/-99999999.99",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "numberBody",
      defaultValue: -99999999.99,
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBigDoubleNegativeDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/double/-99999999.99",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBigDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/decimal/2.5976931e+101",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBigDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/decimal/2.5976931e+101",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBigDecimalPositiveDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/decimal/99999999.99",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "numberBody",
      defaultValue: 99999999.99,
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBigDecimalPositiveDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/decimal/99999999.99",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBigDecimalNegativeDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/big/decimal/-99999999.99",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "numberBody",
      defaultValue: -99999999.99,
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBigDecimalNegativeDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/big/decimal/-99999999.99",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putSmallFloatOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/small/float/3.402823e-20",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getSmallFloatOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/small/float/3.402823e-20",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putSmallDoubleOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/small/double/2.5976931e-101",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getSmallDoubleOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/small/double/2.5976931e-101",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putSmallDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "number/small/decimal/2.5976931e-101",
  requestBody: {
    parameterPath: "numberBody",
    mapper: {
      required: true,
      serializedName: "numberBody",
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getSmallDecimalOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "number/small/decimal/2.5976931e-101",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
