/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/boolMappers";
import { AutoRestBoolTestServiceContext } from "../autoRestBoolTestServiceContext";

/** Class representing a Bool. */
export class Bool {
  private readonly client: AutoRestBoolTestServiceContext;

  /**
   * Create a Bool.
   * @param {AutoRestBoolTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestBoolTestServiceContext) {
    this.client = client;
  }

  /**
   * Get true Boolean value
   * @param [options] The optional parameters
   * @returns Promise<Models.BoolGetTrueResponse>
   */
  getTrue(options?: coreHttp.RequestOptionsBase): Promise<Models.BoolGetTrueResponse>;
  /**
   * @param callback The callback
   */
  getTrue(callback: coreHttp.ServiceCallback<boolean>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getTrue(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean>): void;
  getTrue(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean>, callback?: coreHttp.ServiceCallback<boolean>): Promise<Models.BoolGetTrueResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getTrueOperationSpec,
      callback) as Promise<Models.BoolGetTrueResponse>;
  }

  /**
   * Set Boolean value true
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putTrue(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putTrue(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putTrue(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putTrue(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putTrueOperationSpec,
      callback);
  }

  /**
   * Get false Boolean value
   * @param [options] The optional parameters
   * @returns Promise<Models.BoolGetFalseResponse>
   */
  getFalse(options?: coreHttp.RequestOptionsBase): Promise<Models.BoolGetFalseResponse>;
  /**
   * @param callback The callback
   */
  getFalse(callback: coreHttp.ServiceCallback<boolean>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFalse(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean>): void;
  getFalse(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean>, callback?: coreHttp.ServiceCallback<boolean>): Promise<Models.BoolGetFalseResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFalseOperationSpec,
      callback) as Promise<Models.BoolGetFalseResponse>;
  }

  /**
   * Set Boolean value false
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putFalse(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  putFalse(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putFalse(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putFalse(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putFalseOperationSpec,
      callback);
  }

  /**
   * Get null Boolean value
   * @param [options] The optional parameters
   * @returns Promise<Models.BoolGetNullResponse>
   */
  getNull(options?: coreHttp.RequestOptionsBase): Promise<Models.BoolGetNullResponse>;
  /**
   * @param callback The callback
   */
  getNull(callback: coreHttp.ServiceCallback<boolean>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean>): void;
  getNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean>, callback?: coreHttp.ServiceCallback<boolean>): Promise<Models.BoolGetNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec,
      callback) as Promise<Models.BoolGetNullResponse>;
  }

  /**
   * Get invalid Boolean value
   * @param [options] The optional parameters
   * @returns Promise<Models.BoolGetInvalidResponse>
   */
  getInvalid(options?: coreHttp.RequestOptionsBase): Promise<Models.BoolGetInvalidResponse>;
  /**
   * @param callback The callback
   */
  getInvalid(callback: coreHttp.ServiceCallback<boolean>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getInvalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean>): void;
  getInvalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean>, callback?: coreHttp.ServiceCallback<boolean>): Promise<Models.BoolGetInvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidOperationSpec,
      callback) as Promise<Models.BoolGetInvalidResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getTrueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "bool/true",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putTrueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "bool/true",
  requestBody: {
    parameterPath: "boolBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "boolBody",
      defaultValue: true,
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFalseOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "bool/false",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putFalseOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "bool/false",
  requestBody: {
    parameterPath: "boolBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "boolBody",
      defaultValue: false,
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "bool/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "bool/invalid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
