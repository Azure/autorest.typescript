/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/httpClientFailureMappers";
import { AutoRestHttpInfrastructureTestServiceContext } from "../autoRestHttpInfrastructureTestServiceContext";

/** Class representing a HttpClientFailure. */
export class HttpClientFailure {
  private readonly client: AutoRestHttpInfrastructureTestServiceContext;

  /**
   * Create a HttpClientFailure.
   * @param {AutoRestHttpInfrastructureTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestHttpInfrastructureTestServiceContext) {
    this.client = client;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  head400WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      head400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get400WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePut400OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  put400WithHttpOperationResponse(options?: Models.HttpClientFailurePut400OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      put400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePatch400OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  patch400WithHttpOperationResponse(options?: Models.HttpClientFailurePatch400OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      patch400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePost400OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  post400WithHttpOperationResponse(options?: Models.HttpClientFailurePost400OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      post400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailureDelete400OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  delete400WithHttpOperationResponse(options?: Models.HttpClientFailureDelete400OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      delete400OperationSpec);
  }

  /**
   * Return 401 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  head401WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      head401OperationSpec);
  }

  /**
   * Return 402 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get402WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get402OperationSpec);
  }

  /**
   * Return 403 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get403WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get403OperationSpec);
  }

  /**
   * Return 404 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePut404OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  put404WithHttpOperationResponse(options?: Models.HttpClientFailurePut404OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      put404OperationSpec);
  }

  /**
   * Return 405 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePatch405OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  patch405WithHttpOperationResponse(options?: Models.HttpClientFailurePatch405OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      patch405OperationSpec);
  }

  /**
   * Return 406 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePost406OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  post406WithHttpOperationResponse(options?: Models.HttpClientFailurePost406OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      post406OperationSpec);
  }

  /**
   * Return 407 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailureDelete407OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  delete407WithHttpOperationResponse(options?: Models.HttpClientFailureDelete407OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      delete407OperationSpec);
  }

  /**
   * Return 409 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePut409OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  put409WithHttpOperationResponse(options?: Models.HttpClientFailurePut409OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      put409OperationSpec);
  }

  /**
   * Return 410 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  head410WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      head410OperationSpec);
  }

  /**
   * Return 411 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get411WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get411OperationSpec);
  }

  /**
   * Return 412 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get412WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get412OperationSpec);
  }

  /**
   * Return 413 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePut413OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  put413WithHttpOperationResponse(options?: Models.HttpClientFailurePut413OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      put413OperationSpec);
  }

  /**
   * Return 414 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePatch414OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  patch414WithHttpOperationResponse(options?: Models.HttpClientFailurePatch414OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      patch414OperationSpec);
  }

  /**
   * Return 415 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePost415OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  post415WithHttpOperationResponse(options?: Models.HttpClientFailurePost415OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      post415OperationSpec);
  }

  /**
   * Return 416 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get416WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get416OperationSpec);
  }

  /**
   * Return 417 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailureDelete417OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  delete417WithHttpOperationResponse(options?: Models.HttpClientFailureDelete417OptionalParams): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      delete417OperationSpec);
  }

  /**
   * Return 429 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  head429WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ErrorModel>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      head429OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  head400(): Promise<Models.ErrorModel>;
  head400(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  head400(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  head400(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  head400(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.head400WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get400(): Promise<Models.ErrorModel>;
  get400(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  get400(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get400(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get400(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.get400WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePut400OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put400(): Promise<Models.ErrorModel>;
  put400(options: Models.HttpClientFailurePut400OptionalParams): Promise<Models.ErrorModel>;
  put400(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  put400(options: Models.HttpClientFailurePut400OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  put400(options?: Models.HttpClientFailurePut400OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.put400WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePatch400OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  patch400(): Promise<Models.ErrorModel>;
  patch400(options: Models.HttpClientFailurePatch400OptionalParams): Promise<Models.ErrorModel>;
  patch400(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  patch400(options: Models.HttpClientFailurePatch400OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  patch400(options?: Models.HttpClientFailurePatch400OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.patch400WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePost400OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post400(): Promise<Models.ErrorModel>;
  post400(options: Models.HttpClientFailurePost400OptionalParams): Promise<Models.ErrorModel>;
  post400(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  post400(options: Models.HttpClientFailurePost400OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  post400(options?: Models.HttpClientFailurePost400OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.post400WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailureDelete400OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete400(): Promise<Models.ErrorModel>;
  delete400(options: Models.HttpClientFailureDelete400OptionalParams): Promise<Models.ErrorModel>;
  delete400(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  delete400(options: Models.HttpClientFailureDelete400OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  delete400(options?: Models.HttpClientFailureDelete400OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.delete400WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 401 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  head401(): Promise<Models.ErrorModel>;
  head401(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  head401(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  head401(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  head401(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.head401WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 402 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get402(): Promise<Models.ErrorModel>;
  get402(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  get402(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get402(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get402(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.get402WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 403 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get403(): Promise<Models.ErrorModel>;
  get403(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  get403(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get403(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get403(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.get403WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 404 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePut404OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put404(): Promise<Models.ErrorModel>;
  put404(options: Models.HttpClientFailurePut404OptionalParams): Promise<Models.ErrorModel>;
  put404(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  put404(options: Models.HttpClientFailurePut404OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  put404(options?: Models.HttpClientFailurePut404OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.put404WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 405 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePatch405OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  patch405(): Promise<Models.ErrorModel>;
  patch405(options: Models.HttpClientFailurePatch405OptionalParams): Promise<Models.ErrorModel>;
  patch405(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  patch405(options: Models.HttpClientFailurePatch405OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  patch405(options?: Models.HttpClientFailurePatch405OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.patch405WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 406 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePost406OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post406(): Promise<Models.ErrorModel>;
  post406(options: Models.HttpClientFailurePost406OptionalParams): Promise<Models.ErrorModel>;
  post406(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  post406(options: Models.HttpClientFailurePost406OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  post406(options?: Models.HttpClientFailurePost406OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.post406WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 407 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailureDelete407OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete407(): Promise<Models.ErrorModel>;
  delete407(options: Models.HttpClientFailureDelete407OptionalParams): Promise<Models.ErrorModel>;
  delete407(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  delete407(options: Models.HttpClientFailureDelete407OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  delete407(options?: Models.HttpClientFailureDelete407OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.delete407WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 409 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePut409OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put409(): Promise<Models.ErrorModel>;
  put409(options: Models.HttpClientFailurePut409OptionalParams): Promise<Models.ErrorModel>;
  put409(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  put409(options: Models.HttpClientFailurePut409OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  put409(options?: Models.HttpClientFailurePut409OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.put409WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 410 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  head410(): Promise<Models.ErrorModel>;
  head410(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  head410(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  head410(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  head410(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.head410WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 411 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get411(): Promise<Models.ErrorModel>;
  get411(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  get411(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get411(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get411(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.get411WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 412 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get412(): Promise<Models.ErrorModel>;
  get412(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  get412(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get412(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get412(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.get412WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 413 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePut413OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put413(): Promise<Models.ErrorModel>;
  put413(options: Models.HttpClientFailurePut413OptionalParams): Promise<Models.ErrorModel>;
  put413(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  put413(options: Models.HttpClientFailurePut413OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  put413(options?: Models.HttpClientFailurePut413OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.put413WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 414 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePatch414OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  patch414(): Promise<Models.ErrorModel>;
  patch414(options: Models.HttpClientFailurePatch414OptionalParams): Promise<Models.ErrorModel>;
  patch414(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  patch414(options: Models.HttpClientFailurePatch414OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  patch414(options?: Models.HttpClientFailurePatch414OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.patch414WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 415 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailurePost415OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post415(): Promise<Models.ErrorModel>;
  post415(options: Models.HttpClientFailurePost415OptionalParams): Promise<Models.ErrorModel>;
  post415(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  post415(options: Models.HttpClientFailurePost415OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  post415(options?: Models.HttpClientFailurePost415OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.post415WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 416 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get416(): Promise<Models.ErrorModel>;
  get416(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  get416(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get416(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  get416(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.get416WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 417 status code - should be represented in the client as an error
   *
   * @param {HttpClientFailureDelete417OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete417(): Promise<Models.ErrorModel>;
  delete417(options: Models.HttpClientFailureDelete417OptionalParams): Promise<Models.ErrorModel>;
  delete417(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  delete417(options: Models.HttpClientFailureDelete417OptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  delete417(options?: Models.HttpClientFailureDelete417OptionalParams, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.delete417WithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Return 429 status code - should be represented in the client as an error
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ErrorModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ErrorModel} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  head429(): Promise<Models.ErrorModel>;
  head429(options: msRest.RequestOptionsBase): Promise<Models.ErrorModel>;
  head429(callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  head429(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  head429(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ErrorModel>): any {
    return msRest.responseToBody(this.head429WithHttpOperationResponse.bind(this), options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const head400OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "http/failure/client/400",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get400OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/failure/client/400",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const put400OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "http/failure/client/400",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const patch400OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "http/failure/client/400",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const post400OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "http/failure/client/400",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const delete400OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "http/failure/client/400",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const head401OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "http/failure/client/401",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get402OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/failure/client/402",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get403OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/failure/client/403",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const put404OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "http/failure/client/404",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const patch405OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "http/failure/client/405",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const post406OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "http/failure/client/406",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const delete407OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "http/failure/client/407",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const put409OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "http/failure/client/409",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const head410OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "http/failure/client/410",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get411OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/failure/client/411",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get412OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/failure/client/412",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const put413OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "http/failure/client/413",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const patch414OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "http/failure/client/414",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const post415OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "http/failure/client/415",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get416OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/failure/client/416",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const delete417OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "http/failure/client/417",
  requestBody: {
    parameterPath: [
      "options",
      "booleanValue"
    ],
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const head429OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "http/failure/client/429",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
