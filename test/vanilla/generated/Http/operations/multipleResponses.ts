/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/multipleResponsesMappers";
import { AutoRestHttpInfrastructureTestServiceContext } from "../autoRestHttpInfrastructureTestServiceContext";

/** Class representing a MultipleResponses. */
export class MultipleResponses {
  private readonly client: AutoRestHttpInfrastructureTestServiceContext;

  /**
   * Create a MultipleResponses.
   * @param {AutoRestHttpInfrastructureTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestHttpInfrastructureTestServiceContext) {
    this.client = client;
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200Model204NoModelDefaultError200ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError200ValidOperationSpec) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError200ValidResponse>;
  }

  /**
   * Send a 204 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200Model204NoModelDefaultError204ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError204ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError204ValidOperationSpec) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError204ValidResponse>;
  }

  /**
   * Send a 201 response with valid payload: {'statusCode': '201'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200Model204NoModelDefaultError201InvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError201InvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError201InvalidOperationSpec) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError201InvalidResponse>;
  }

  /**
   * Send a 202 response with no payload:
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200Model204NoModelDefaultError202NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError202NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError202NoneOperationSpec) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError202NoneResponse>;
  }

  /**
   * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200Model204NoModelDefaultError400ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError400ValidOperationSpec) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError400ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200Model201ModelDefaultError200ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model201ModelDefaultError200ValidOperationSpec) as Promise<Models.MultipleResponsesGet200Model201ModelDefaultError200ValidResponse>;
  }

  /**
   * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200Model201ModelDefaultError201ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError201ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model201ModelDefaultError201ValidOperationSpec) as Promise<Models.MultipleResponsesGet200Model201ModelDefaultError201ValidResponse>;
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200Model201ModelDefaultError400ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model201ModelDefaultError400ValidOperationSpec) as Promise<Models.MultipleResponsesGet200Model201ModelDefaultError400ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA201ModelC404ModelDDefaultError200ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA201ModelC404ModelDDefaultError200ValidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'httpCode': '201'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA201ModelC404ModelDDefaultError201ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA201ModelC404ModelDDefaultError201ValidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'httpStatusCode': '404'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA201ModelC404ModelDDefaultError404ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA201ModelC404ModelDDefaultError404ValidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidResponse>;
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA201ModelC404ModelDDefaultError400ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA201ModelC404ModelDDefaultError400ValidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidResponse>;
  }

  /**
   * Send a 202 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get202None204NoneDefaultError202NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultError202NoneOperationSpec);
  }

  /**
   * Send a 204 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get202None204NoneDefaultError204NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultError204NoneOperationSpec);
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get202None204NoneDefaultError400ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultError400ValidOperationSpec);
  }

  /**
   * Send a 202 response with an unexpected payload {'property': 'value'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get202None204NoneDefaultNone202InvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultNone202InvalidOperationSpec);
  }

  /**
   * Send a 204 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get202None204NoneDefaultNone204NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultNone204NoneOperationSpec);
  }

  /**
   * Send a 400 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get202None204NoneDefaultNone400NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultNone400NoneOperationSpec);
  }

  /**
   * Send a 400 response with an unexpected payload {'property': 'value'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get202None204NoneDefaultNone400InvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultNone400InvalidOperationSpec);
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDefaultModelA200ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGetDefaultModelA200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultModelA200ValidOperationSpec) as Promise<Models.MultipleResponsesGetDefaultModelA200ValidResponse>;
  }

  /**
   * Send a 200 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDefaultModelA200NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGetDefaultModelA200NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultModelA200NoneOperationSpec) as Promise<Models.MultipleResponsesGetDefaultModelA200NoneResponse>;
  }

  /**
   * Send a 400 response with valid payload: {'statusCode': '400'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDefaultModelA400ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGetDefaultModelA400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultModelA400ValidOperationSpec) as Promise<Models.MultipleResponsesGetDefaultModelA400ValidResponse>;
  }

  /**
   * Send a 400 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDefaultModelA400NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGetDefaultModelA400NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultModelA400NoneOperationSpec) as Promise<Models.MultipleResponsesGetDefaultModelA400NoneResponse>;
  }

  /**
   * Send a 200 response with invalid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDefaultNone200InvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultNone200InvalidOperationSpec);
  }

  /**
   * Send a 200 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDefaultNone200NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultNone200NoneOperationSpec);
  }

  /**
   * Send a 400 response with valid payload: {'statusCode': '400'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDefaultNone400InvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultNone400InvalidOperationSpec);
  }

  /**
   * Send a 400 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getDefaultNone400NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultNone400NoneOperationSpec);
  }

  /**
   * Send a 200 response with no payload, when a payload is expected - client should return a null
   * object of thde type for model A
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA200NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA200NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA200NoneOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA200NoneResponse>;
  }

  /**
   * Send a 200 response with payload {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA200ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA200ValidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA200ValidResponse>;
  }

  /**
   * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA200InvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA200InvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA200InvalidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA200InvalidResponse>;
  }

  /**
   * Send a 400 response with no payload client should treat as an http error with no error model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA400NoneWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA400NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA400NoneOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA400NoneResponse>;
  }

  /**
   * Send a 200 response with payload {'statusCode': '400'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA400ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA400ValidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA400ValidResponse>;
  }

  /**
   * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA400InvalidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA400InvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA400InvalidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA400InvalidResponse>;
  }

  /**
   * Send a 202 response with payload {'statusCode': '202'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get200ModelA202ValidWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA202ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA202ValidOperationSpec) as Promise<Models.MultipleResponsesGet200ModelA202ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200Model204NoModelDefaultError200Valid(): Promise<Models.A>;
  get200Model204NoModelDefaultError200Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200Model204NoModelDefaultError200Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError200Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError200Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200Model204NoModelDefaultError200ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 204 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200Model204NoModelDefaultError204Valid(): Promise<Models.A>;
  get200Model204NoModelDefaultError204Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200Model204NoModelDefaultError204Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError204Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError204Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200Model204NoModelDefaultError204ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 201 response with valid payload: {'statusCode': '201'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200Model204NoModelDefaultError201Invalid(): Promise<Models.A>;
  get200Model204NoModelDefaultError201Invalid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200Model204NoModelDefaultError201Invalid(callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError201Invalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError201Invalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200Model204NoModelDefaultError201InvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 202 response with no payload:
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200Model204NoModelDefaultError202None(): Promise<Models.A>;
  get200Model204NoModelDefaultError202None(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200Model204NoModelDefaultError202None(callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError202None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError202None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200Model204NoModelDefaultError202NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200Model204NoModelDefaultError400Valid(): Promise<Models.A>;
  get200Model204NoModelDefaultError400Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200Model204NoModelDefaultError400Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError400Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError400Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200Model204NoModelDefaultError400ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200Model201ModelDefaultError200Valid(): Promise<Models.A>;
  get200Model201ModelDefaultError200Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200Model201ModelDefaultError200Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError200Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError200Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200Model201ModelDefaultError200ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200Model201ModelDefaultError201Valid(): Promise<Models.A>;
  get200Model201ModelDefaultError201Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200Model201ModelDefaultError201Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError201Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError201Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200Model201ModelDefaultError201ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200Model201ModelDefaultError400Valid(): Promise<Models.A>;
  get200Model201ModelDefaultError400Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200Model201ModelDefaultError400Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError400Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError400Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200Model201ModelDefaultError400ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA201ModelC404ModelDDefaultError200Valid(): Promise<any>;
  get200ModelA201ModelC404ModelDDefaultError200Valid(options: msRest.RequestOptionsBase): Promise<any>;
  get200ModelA201ModelC404ModelDDefaultError200Valid(callback: msRest.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError200Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError200Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.get200ModelA201ModelC404ModelDDefaultError200ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with valid payload: {'httpCode': '201'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA201ModelC404ModelDDefaultError201Valid(): Promise<any>;
  get200ModelA201ModelC404ModelDDefaultError201Valid(options: msRest.RequestOptionsBase): Promise<any>;
  get200ModelA201ModelC404ModelDDefaultError201Valid(callback: msRest.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError201Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError201Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.get200ModelA201ModelC404ModelDDefaultError201ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with valid payload: {'httpStatusCode': '404'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA201ModelC404ModelDDefaultError404Valid(): Promise<any>;
  get200ModelA201ModelC404ModelDDefaultError404Valid(options: msRest.RequestOptionsBase): Promise<any>;
  get200ModelA201ModelC404ModelDDefaultError404Valid(callback: msRest.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError404Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError404Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.get200ModelA201ModelC404ModelDDefaultError404ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA201ModelC404ModelDDefaultError400Valid(): Promise<any>;
  get200ModelA201ModelC404ModelDDefaultError400Valid(options: msRest.RequestOptionsBase): Promise<any>;
  get200ModelA201ModelC404ModelDDefaultError400Valid(callback: msRest.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError400Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError400Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.get200ModelA201ModelC404ModelDDefaultError400ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 202 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get202None204NoneDefaultError202None(): Promise<void>;
  get202None204NoneDefaultError202None(options: msRest.RequestOptionsBase): Promise<void>;
  get202None204NoneDefaultError202None(callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultError202None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultError202None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.get202None204NoneDefaultError202NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 204 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get202None204NoneDefaultError204None(): Promise<void>;
  get202None204NoneDefaultError204None(options: msRest.RequestOptionsBase): Promise<void>;
  get202None204NoneDefaultError204None(callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultError204None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultError204None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.get202None204NoneDefaultError204NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get202None204NoneDefaultError400Valid(): Promise<void>;
  get202None204NoneDefaultError400Valid(options: msRest.RequestOptionsBase): Promise<void>;
  get202None204NoneDefaultError400Valid(callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultError400Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultError400Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.get202None204NoneDefaultError400ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 202 response with an unexpected payload {'property': 'value'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get202None204NoneDefaultNone202Invalid(): Promise<void>;
  get202None204NoneDefaultNone202Invalid(options: msRest.RequestOptionsBase): Promise<void>;
  get202None204NoneDefaultNone202Invalid(callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultNone202Invalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultNone202Invalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.get202None204NoneDefaultNone202InvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 204 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get202None204NoneDefaultNone204None(): Promise<void>;
  get202None204NoneDefaultNone204None(options: msRest.RequestOptionsBase): Promise<void>;
  get202None204NoneDefaultNone204None(callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultNone204None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultNone204None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.get202None204NoneDefaultNone204NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get202None204NoneDefaultNone400None(): Promise<void>;
  get202None204NoneDefaultNone400None(options: msRest.RequestOptionsBase): Promise<void>;
  get202None204NoneDefaultNone400None(callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultNone400None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultNone400None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.get202None204NoneDefaultNone400NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with an unexpected payload {'property': 'value'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get202None204NoneDefaultNone400Invalid(): Promise<void>;
  get202None204NoneDefaultNone400Invalid(options: msRest.RequestOptionsBase): Promise<void>;
  get202None204NoneDefaultNone400Invalid(callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultNone400Invalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get202None204NoneDefaultNone400Invalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.get202None204NoneDefaultNone400InvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultModelA200Valid(): Promise<Models.A>;
  getDefaultModelA200Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  getDefaultModelA200Valid(callback: msRest.ServiceCallback<Models.A>): void;
  getDefaultModelA200Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  getDefaultModelA200Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.getDefaultModelA200ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultModelA200None(): Promise<Models.A>;
  getDefaultModelA200None(options: msRest.RequestOptionsBase): Promise<Models.A>;
  getDefaultModelA200None(callback: msRest.ServiceCallback<Models.A>): void;
  getDefaultModelA200None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  getDefaultModelA200None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.getDefaultModelA200NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with valid payload: {'statusCode': '400'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultModelA400Valid(): Promise<Models.A>;
  getDefaultModelA400Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  getDefaultModelA400Valid(callback: msRest.ServiceCallback<Models.A>): void;
  getDefaultModelA400Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  getDefaultModelA400Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.getDefaultModelA400ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultModelA400None(): Promise<Models.A>;
  getDefaultModelA400None(options: msRest.RequestOptionsBase): Promise<Models.A>;
  getDefaultModelA400None(callback: msRest.ServiceCallback<Models.A>): void;
  getDefaultModelA400None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  getDefaultModelA400None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.getDefaultModelA400NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with invalid payload: {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultNone200Invalid(): Promise<void>;
  getDefaultNone200Invalid(options: msRest.RequestOptionsBase): Promise<void>;
  getDefaultNone200Invalid(callback: msRest.ServiceCallback<void>): void;
  getDefaultNone200Invalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getDefaultNone200Invalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getDefaultNone200InvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultNone200None(): Promise<void>;
  getDefaultNone200None(options: msRest.RequestOptionsBase): Promise<void>;
  getDefaultNone200None(callback: msRest.ServiceCallback<void>): void;
  getDefaultNone200None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getDefaultNone200None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getDefaultNone200NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with valid payload: {'statusCode': '400'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultNone400Invalid(): Promise<void>;
  getDefaultNone400Invalid(options: msRest.RequestOptionsBase): Promise<void>;
  getDefaultNone400Invalid(callback: msRest.ServiceCallback<void>): void;
  getDefaultNone400Invalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getDefaultNone400Invalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getDefaultNone400InvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with no payload
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultNone400None(): Promise<void>;
  getDefaultNone400None(options: msRest.RequestOptionsBase): Promise<void>;
  getDefaultNone400None(callback: msRest.ServiceCallback<void>): void;
  getDefaultNone400None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getDefaultNone400None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.getDefaultNone400NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with no payload, when a payload is expected - client should return a null
   * object of thde type for model A
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA200None(): Promise<Models.A>;
  get200ModelA200None(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200ModelA200None(callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA200None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA200None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200ModelA200NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with payload {'statusCode': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA200Valid(): Promise<Models.A>;
  get200ModelA200Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200ModelA200Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA200Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA200Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200ModelA200ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA200Invalid(): Promise<Models.A>;
  get200ModelA200Invalid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200ModelA200Invalid(callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA200Invalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA200Invalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200ModelA200InvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 400 response with no payload client should treat as an http error with no error model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA400None(): Promise<Models.A>;
  get200ModelA400None(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200ModelA400None(callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA400None(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA400None(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200ModelA400NoneWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with payload {'statusCode': '400'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA400Valid(): Promise<Models.A>;
  get200ModelA400Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200ModelA400Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA400Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA400Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200ModelA400ValidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA400Invalid(): Promise<Models.A>;
  get200ModelA400Invalid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200ModelA400Invalid(callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA400Invalid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA400Invalid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200ModelA400InvalidWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Send a 202 response with payload {'statusCode': '202'}
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.A} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.A} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200ModelA202Valid(): Promise<Models.A>;
  get200ModelA202Valid(options: msRest.RequestOptionsBase): Promise<Models.A>;
  get200ModelA202Valid(callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA202Valid(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.A>): void;
  get200ModelA202Valid(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.A>): any {
    return msRest.responseToBody(this.get200ModelA202ValidWithHttpOperationResponse.bind(this), options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const get200Model204NoModelDefaultError200ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/200/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model204NoModelDefaultError204ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/204/none",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model204NoModelDefaultError201InvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/201/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model204NoModelDefaultError202NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/202/none",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model204NoModelDefaultError400ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/400/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model201ModelDefaultError200ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/B/default/Error/response/200/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.B
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model201ModelDefaultError201ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/B/default/Error/response/201/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.B
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model201ModelDefaultError400ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/B/default/Error/response/400/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.B
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200ModelA201ModelC404ModelDDefaultError200ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/C/404/D/default/Error/response/200/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.C
    },
    404: {
      bodyMapper: Mappers.D
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200ModelA201ModelC404ModelDDefaultError201ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/C/404/D/default/Error/response/201/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.C
    },
    404: {
      bodyMapper: Mappers.D
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200ModelA201ModelC404ModelDDefaultError404ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/C/404/D/default/Error/response/404/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.C
    },
    404: {
      bodyMapper: Mappers.D
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200ModelA201ModelC404ModelDDefaultError400ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/C/404/D/default/Error/response/400/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.C
    },
    404: {
      bodyMapper: Mappers.D
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get202None204NoneDefaultError202NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/Error/response/202/none",
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get202None204NoneDefaultError204NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/Error/response/204/none",
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get202None204NoneDefaultError400ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/Error/response/400/valid",
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get202None204NoneDefaultNone202InvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/none/response/202/invalid",
  responses: {
    202: {},
    204: {},
    default: {}
  },
  serializer
};

const get202None204NoneDefaultNone204NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/none/response/204/none",
  responses: {
    202: {},
    204: {},
    default: {}
  },
  serializer
};

const get202None204NoneDefaultNone400NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/none/response/400/none",
  responses: {
    202: {},
    204: {},
    default: {}
  },
  serializer
};

const get202None204NoneDefaultNone400InvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/none/response/400/invalid",
  responses: {
    202: {},
    204: {},
    default: {}
  },
  serializer
};

const getDefaultModelA200ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/A/response/200/valid",
  responses: {
    default: {
      bodyMapper: Mappers.A
    }
  },
  serializer
};

const getDefaultModelA200NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/A/response/200/none",
  responses: {
    default: {
      bodyMapper: Mappers.A
    }
  },
  serializer
};

const getDefaultModelA400ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/A/response/400/valid",
  responses: {
    default: {
      bodyMapper: Mappers.A
    }
  },
  serializer
};

const getDefaultModelA400NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/A/response/400/none",
  responses: {
    default: {
      bodyMapper: Mappers.A
    }
  },
  serializer
};

const getDefaultNone200InvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/none/response/200/invalid",
  responses: {
    default: {}
  },
  serializer
};

const getDefaultNone200NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/none/response/200/none",
  responses: {
    default: {}
  },
  serializer
};

const getDefaultNone400InvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/none/response/400/invalid",
  responses: {
    default: {}
  },
  serializer
};

const getDefaultNone400NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/none/response/400/none",
  responses: {
    default: {}
  },
  serializer
};

const get200ModelA200NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/200/none",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA200ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/200/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA200InvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/200/invalid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA400NoneOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/400/none",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA400ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/400/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA400InvalidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/400/invalid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA202ValidOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/202/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};
