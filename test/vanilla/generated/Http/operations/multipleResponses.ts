/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/multipleResponsesMappers";
import { AutoRestHttpInfrastructureTestServiceContext } from "../autoRestHttpInfrastructureTestServiceContext";

/** Class representing a MultipleResponses. */
export class MultipleResponses {
  private readonly client: AutoRestHttpInfrastructureTestServiceContext;

  /**
   * Create a MultipleResponses.
   * @param {AutoRestHttpInfrastructureTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestHttpInfrastructureTestServiceContext) {
    this.client = client;
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError200ValidResponse>
   */
  get200Model204NoModelDefaultError200Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError200ValidResponse>;
  /**
   * @param callback The callback
   */
  get200Model204NoModelDefaultError200Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200Model204NoModelDefaultError200Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError200Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError200ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError200ValidResponse>;
  }

  /**
   * Send a 204 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError204ValidResponse>
   */
  get200Model204NoModelDefaultError204Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError204ValidResponse>;
  /**
   * @param callback The callback
   */
  get200Model204NoModelDefaultError204Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200Model204NoModelDefaultError204Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError204Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError204ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError204ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError204ValidResponse>;
  }

  /**
   * Send a 201 response with valid payload: {'statusCode': '201'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError201InvalidResponse>
   */
  get200Model204NoModelDefaultError201Invalid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError201InvalidResponse>;
  /**
   * @param callback The callback
   */
  get200Model204NoModelDefaultError201Invalid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200Model204NoModelDefaultError201Invalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError201Invalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError201InvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError201InvalidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError201InvalidResponse>;
  }

  /**
   * Send a 202 response with no payload:
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError202NoneResponse>
   */
  get200Model204NoModelDefaultError202None(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError202NoneResponse>;
  /**
   * @param callback The callback
   */
  get200Model204NoModelDefaultError202None(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200Model204NoModelDefaultError202None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError202None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError202NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError202NoneOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError202NoneResponse>;
  }

  /**
   * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError400ValidResponse>
   */
  get200Model204NoModelDefaultError400Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError400ValidResponse>;
  /**
   * @param callback The callback
   */
  get200Model204NoModelDefaultError400Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200Model204NoModelDefaultError400Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200Model204NoModelDefaultError400Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model204NoModelDefaultError400ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200Model204NoModelDefaultError400ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200Model201ModelDefaultError200ValidResponse>
   */
  get200Model201ModelDefaultError200Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError200ValidResponse>;
  /**
   * @param callback The callback
   */
  get200Model201ModelDefaultError200Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200Model201ModelDefaultError200Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError200Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model201ModelDefaultError200ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200Model201ModelDefaultError200ValidResponse>;
  }

  /**
   * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200Model201ModelDefaultError201ValidResponse>
   */
  get200Model201ModelDefaultError201Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError201ValidResponse>;
  /**
   * @param callback The callback
   */
  get200Model201ModelDefaultError201Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200Model201ModelDefaultError201Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError201Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError201ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model201ModelDefaultError201ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200Model201ModelDefaultError201ValidResponse>;
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200Model201ModelDefaultError400ValidResponse>
   */
  get200Model201ModelDefaultError400Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError400ValidResponse>;
  /**
   * @param callback The callback
   */
  get200Model201ModelDefaultError400Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200Model201ModelDefaultError400Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200Model201ModelDefaultError400Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200Model201ModelDefaultError400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200Model201ModelDefaultError400ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200Model201ModelDefaultError400ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidResponse>
   */
  get200ModelA201ModelC404ModelDDefaultError200Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA201ModelC404ModelDDefaultError200Valid(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA201ModelC404ModelDDefaultError200Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError200Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA201ModelC404ModelDDefaultError200ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError200ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'httpCode': '201'}
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidResponse>
   */
  get200ModelA201ModelC404ModelDDefaultError201Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA201ModelC404ModelDDefaultError201Valid(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA201ModelC404ModelDDefaultError201Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError201Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA201ModelC404ModelDDefaultError201ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError201ValidResponse>;
  }

  /**
   * Send a 200 response with valid payload: {'httpStatusCode': '404'}
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidResponse>
   */
  get200ModelA201ModelC404ModelDDefaultError404Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA201ModelC404ModelDDefaultError404Valid(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA201ModelC404ModelDDefaultError404Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError404Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA201ModelC404ModelDDefaultError404ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError404ValidResponse>;
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidResponse>
   */
  get200ModelA201ModelC404ModelDDefaultError400Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA201ModelC404ModelDDefaultError400Valid(callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA201ModelC404ModelDDefaultError400Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  get200ModelA201ModelC404ModelDDefaultError400Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA201ModelC404ModelDDefaultError400ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA201ModelC404ModelDDefaultError400ValidResponse>;
  }

  /**
   * Send a 202 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  get202None204NoneDefaultError202None(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  get202None204NoneDefaultError202None(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get202None204NoneDefaultError202None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  get202None204NoneDefaultError202None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultError202NoneOperationSpec,
      callback);
  }

  /**
   * Send a 204 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  get202None204NoneDefaultError204None(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  get202None204NoneDefaultError204None(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get202None204NoneDefaultError204None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  get202None204NoneDefaultError204None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultError204NoneOperationSpec,
      callback);
  }

  /**
   * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  get202None204NoneDefaultError400Valid(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  get202None204NoneDefaultError400Valid(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get202None204NoneDefaultError400Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  get202None204NoneDefaultError400Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultError400ValidOperationSpec,
      callback);
  }

  /**
   * Send a 202 response with an unexpected payload {'property': 'value'}
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  get202None204NoneDefaultNone202Invalid(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  get202None204NoneDefaultNone202Invalid(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get202None204NoneDefaultNone202Invalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  get202None204NoneDefaultNone202Invalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultNone202InvalidOperationSpec,
      callback);
  }

  /**
   * Send a 204 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  get202None204NoneDefaultNone204None(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  get202None204NoneDefaultNone204None(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get202None204NoneDefaultNone204None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  get202None204NoneDefaultNone204None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultNone204NoneOperationSpec,
      callback);
  }

  /**
   * Send a 400 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  get202None204NoneDefaultNone400None(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  get202None204NoneDefaultNone400None(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get202None204NoneDefaultNone400None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  get202None204NoneDefaultNone400None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultNone400NoneOperationSpec,
      callback);
  }

  /**
   * Send a 400 response with an unexpected payload {'property': 'value'}
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  get202None204NoneDefaultNone400Invalid(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  get202None204NoneDefaultNone400Invalid(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get202None204NoneDefaultNone400Invalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  get202None204NoneDefaultNone400Invalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get202None204NoneDefaultNone400InvalidOperationSpec,
      callback);
  }

  /**
   * Send a 200 response with valid payload: {'statusCode': '200'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGetDefaultModelA200ValidResponse>
   */
  getDefaultModelA200Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGetDefaultModelA200ValidResponse>;
  /**
   * @param callback The callback
   */
  getDefaultModelA200Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultModelA200Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  getDefaultModelA200Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGetDefaultModelA200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultModelA200ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGetDefaultModelA200ValidResponse>;
  }

  /**
   * Send a 200 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGetDefaultModelA200NoneResponse>
   */
  getDefaultModelA200None(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGetDefaultModelA200NoneResponse>;
  /**
   * @param callback The callback
   */
  getDefaultModelA200None(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultModelA200None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  getDefaultModelA200None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGetDefaultModelA200NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultModelA200NoneOperationSpec,
      callback) as Promise<Models.MultipleResponsesGetDefaultModelA200NoneResponse>;
  }

  /**
   * Send a 400 response with valid payload: {'statusCode': '400'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGetDefaultModelA400ValidResponse>
   */
  getDefaultModelA400Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGetDefaultModelA400ValidResponse>;
  /**
   * @param callback The callback
   */
  getDefaultModelA400Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultModelA400Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  getDefaultModelA400Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGetDefaultModelA400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultModelA400ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGetDefaultModelA400ValidResponse>;
  }

  /**
   * Send a 400 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGetDefaultModelA400NoneResponse>
   */
  getDefaultModelA400None(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGetDefaultModelA400NoneResponse>;
  /**
   * @param callback The callback
   */
  getDefaultModelA400None(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultModelA400None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  getDefaultModelA400None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGetDefaultModelA400NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultModelA400NoneOperationSpec,
      callback) as Promise<Models.MultipleResponsesGetDefaultModelA400NoneResponse>;
  }

  /**
   * Send a 200 response with invalid payload: {'statusCode': '200'}
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getDefaultNone200Invalid(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getDefaultNone200Invalid(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultNone200Invalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getDefaultNone200Invalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultNone200InvalidOperationSpec,
      callback);
  }

  /**
   * Send a 200 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getDefaultNone200None(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getDefaultNone200None(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultNone200None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getDefaultNone200None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultNone200NoneOperationSpec,
      callback);
  }

  /**
   * Send a 400 response with valid payload: {'statusCode': '400'}
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getDefaultNone400Invalid(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getDefaultNone400Invalid(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultNone400Invalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getDefaultNone400Invalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultNone400InvalidOperationSpec,
      callback);
  }

  /**
   * Send a 400 response with no payload
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  getDefaultNone400None(options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param callback The callback
   */
  getDefaultNone400None(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultNone400None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getDefaultNone400None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDefaultNone400NoneOperationSpec,
      callback);
  }

  /**
   * Send a 200 response with no payload, when a payload is expected - client should return a null
   * object of thde type for model A
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200ModelA200NoneResponse>
   */
  get200ModelA200None(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA200NoneResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA200None(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA200None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200ModelA200None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200ModelA200NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA200NoneOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA200NoneResponse>;
  }

  /**
   * Send a 200 response with payload {'statusCode': '200'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200ModelA200ValidResponse>
   */
  get200ModelA200Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA200ValidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA200Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA200Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200ModelA200Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200ModelA200ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA200ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA200ValidResponse>;
  }

  /**
   * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200ModelA200InvalidResponse>
   */
  get200ModelA200Invalid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA200InvalidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA200Invalid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA200Invalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200ModelA200Invalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200ModelA200InvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA200InvalidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA200InvalidResponse>;
  }

  /**
   * Send a 400 response with no payload client should treat as an http error with no error model
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200ModelA400NoneResponse>
   */
  get200ModelA400None(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA400NoneResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA400None(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA400None(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200ModelA400None(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200ModelA400NoneResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA400NoneOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA400NoneResponse>;
  }

  /**
   * Send a 200 response with payload {'statusCode': '400'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200ModelA400ValidResponse>
   */
  get200ModelA400Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA400ValidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA400Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA400Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200ModelA400Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200ModelA400ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA400ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA400ValidResponse>;
  }

  /**
   * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200ModelA400InvalidResponse>
   */
  get200ModelA400Invalid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA400InvalidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA400Invalid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA400Invalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200ModelA400Invalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200ModelA400InvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA400InvalidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA400InvalidResponse>;
  }

  /**
   * Send a 202 response with payload {'statusCode': '202'}
   * @param [options] The optional parameters
   * @returns Promise<Models.MultipleResponsesGet200ModelA202ValidResponse>
   */
  get200ModelA202Valid(options?: coreHttp.RequestOptionsBase): Promise<Models.MultipleResponsesGet200ModelA202ValidResponse>;
  /**
   * @param callback The callback
   */
  get200ModelA202Valid(callback: coreHttp.ServiceCallback<Models.A>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get200ModelA202Valid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.A>): void;
  get200ModelA202Valid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.A>, callback?: coreHttp.ServiceCallback<Models.A>): Promise<Models.MultipleResponsesGet200ModelA202ValidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      get200ModelA202ValidOperationSpec,
      callback) as Promise<Models.MultipleResponsesGet200ModelA202ValidResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const get200Model204NoModelDefaultError200ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/200/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model204NoModelDefaultError204ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/204/none",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model204NoModelDefaultError201InvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/201/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model204NoModelDefaultError202NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/202/none",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model204NoModelDefaultError400ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/204/none/default/Error/response/400/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model201ModelDefaultError200ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/B/default/Error/response/200/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.B
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model201ModelDefaultError201ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/B/default/Error/response/201/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.B
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200Model201ModelDefaultError400ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/B/default/Error/response/400/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.B
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200ModelA201ModelC404ModelDDefaultError200ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/C/404/D/default/Error/response/200/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.C
    },
    404: {
      bodyMapper: Mappers.D
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200ModelA201ModelC404ModelDDefaultError201ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/C/404/D/default/Error/response/201/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.C
    },
    404: {
      bodyMapper: Mappers.D
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200ModelA201ModelC404ModelDDefaultError404ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/C/404/D/default/Error/response/404/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.C
    },
    404: {
      bodyMapper: Mappers.D
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get200ModelA201ModelC404ModelDDefaultError400ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/201/C/404/D/default/Error/response/400/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    201: {
      bodyMapper: Mappers.C
    },
    404: {
      bodyMapper: Mappers.D
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get202None204NoneDefaultError202NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/Error/response/202/none",
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get202None204NoneDefaultError204NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/Error/response/204/none",
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get202None204NoneDefaultError400ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/Error/response/400/valid",
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const get202None204NoneDefaultNone202InvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/none/response/202/invalid",
  responses: {
    202: {},
    204: {},
    default: {}
  },
  serializer
};

const get202None204NoneDefaultNone204NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/none/response/204/none",
  responses: {
    202: {},
    204: {},
    default: {}
  },
  serializer
};

const get202None204NoneDefaultNone400NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/none/response/400/none",
  responses: {
    202: {},
    204: {},
    default: {}
  },
  serializer
};

const get202None204NoneDefaultNone400InvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/202/none/204/none/default/none/response/400/invalid",
  responses: {
    202: {},
    204: {},
    default: {}
  },
  serializer
};

const getDefaultModelA200ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/A/response/200/valid",
  responses: {
    default: {
      bodyMapper: Mappers.A
    }
  },
  serializer
};

const getDefaultModelA200NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/A/response/200/none",
  responses: {
    default: {
      bodyMapper: Mappers.A
    }
  },
  serializer
};

const getDefaultModelA400ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/A/response/400/valid",
  responses: {
    default: {
      bodyMapper: Mappers.A
    }
  },
  serializer
};

const getDefaultModelA400NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/A/response/400/none",
  responses: {
    default: {
      bodyMapper: Mappers.A
    }
  },
  serializer
};

const getDefaultNone200InvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/none/response/200/invalid",
  responses: {
    default: {}
  },
  serializer
};

const getDefaultNone200NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/none/response/200/none",
  responses: {
    default: {}
  },
  serializer
};

const getDefaultNone400InvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/none/response/400/invalid",
  responses: {
    default: {}
  },
  serializer
};

const getDefaultNone400NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/default/none/response/400/none",
  responses: {
    default: {}
  },
  serializer
};

const get200ModelA200NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/200/none",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA200ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/200/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA200InvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/200/invalid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA400NoneOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/400/none",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA400ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/400/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA400InvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/400/invalid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};

const get200ModelA202ValidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "http/payloads/200/A/response/202/valid",
  responses: {
    200: {
      bodyMapper: Mappers.A
    },
    default: {}
  },
  serializer
};
