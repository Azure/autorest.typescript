/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/httpSuccessMappers";
import { AutoRestHttpInfrastructureTestServiceContext } from "../autoRestHttpInfrastructureTestServiceContext";

/** Class representing a HttpSuccess. */
export class HttpSuccess {
  private readonly client: AutoRestHttpInfrastructureTestServiceContext;

  /**
   * Create a HttpSuccess.
   * @param {AutoRestHttpInfrastructureTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestHttpInfrastructureTestServiceContext) {
    this.client = client;
  }

  /**
   * Return 200 status code if successful
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async head200WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), head200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Get 200 success
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async get200WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<boolean>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), get200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Put boolean value true returning 200 success
   *
   * @param {HttpSuccessPut200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put200WithHttpOperationResponse(options?: Models.HttpSuccessPut200OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        put200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Patch true Boolean value in request returning 200
   *
   * @param {HttpSuccessPatch200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async patch200WithHttpOperationResponse(options?: Models.HttpSuccessPatch200OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        patch200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Post bollean value true in request that returns a 200
   *
   * @param {HttpSuccessPost200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async post200WithHttpOperationResponse(options?: Models.HttpSuccessPost200OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        post200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Delete simple boolean value true returns 200
   *
   * @param {HttpSuccessDelete200OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async delete200WithHttpOperationResponse(options?: Models.HttpSuccessDelete200OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        delete200OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Put true Boolean value in request returns 201
   *
   * @param {HttpSuccessPut201OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put201WithHttpOperationResponse(options?: Models.HttpSuccessPut201OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        put201OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Post true Boolean value in request returns 201 (Created)
   *
   * @param {HttpSuccessPost201OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async post201WithHttpOperationResponse(options?: Models.HttpSuccessPost201OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        post201OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Put true Boolean value in request returns 202 (Accepted)
   *
   * @param {HttpSuccessPut202OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put202WithHttpOperationResponse(options?: Models.HttpSuccessPut202OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        put202OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Patch true Boolean value in request returns 202
   *
   * @param {HttpSuccessPatch202OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async patch202WithHttpOperationResponse(options?: Models.HttpSuccessPatch202OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        patch202OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Post true Boolean value in request returns 202 (Accepted)
   *
   * @param {HttpSuccessPost202OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async post202WithHttpOperationResponse(options?: Models.HttpSuccessPost202OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        post202OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Delete true Boolean value in request returns 202 (accepted)
   *
   * @param {HttpSuccessDelete202OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async delete202WithHttpOperationResponse(options?: Models.HttpSuccessDelete202OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        delete202OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Return 204 status code if successful
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async head204WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), head204OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Put true Boolean value in request returns 204 (no content)
   *
   * @param {HttpSuccessPut204OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async put204WithHttpOperationResponse(options?: Models.HttpSuccessPut204OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        put204OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Patch true Boolean value in request returns 204 (no content)
   *
   * @param {HttpSuccessPatch204OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async patch204WithHttpOperationResponse(options?: Models.HttpSuccessPatch204OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        patch204OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Post true Boolean value in request returns 204 (no content)
   *
   * @param {HttpSuccessPost204OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async post204WithHttpOperationResponse(options?: Models.HttpSuccessPost204OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        post204OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Delete true Boolean value in request returns 204 (no content)
   *
   * @param {HttpSuccessDelete204OptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async delete204WithHttpOperationResponse(options?: Models.HttpSuccessDelete204OptionalParams): Promise<msRest.HttpOperationResponse<void>> {
    let booleanValue = (options && options.booleanValue !== undefined) ? options.booleanValue : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            booleanValue
          },
          options),
        delete204OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Return 404 status code
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async head404WithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(msRest.createOperationArguments({}, options), head404OperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Return 200 status code if successful
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  head200(): Promise<void>;
  head200(options: msRest.RequestOptionsBase): Promise<void>;
  head200(callback: msRest.ServiceCallback<void>): void;
  head200(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  head200(): any {
    return msRest.responseToBody(this.head200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Get 200 success
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {boolean} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get200(): Promise<boolean>;
  get200(options: msRest.RequestOptionsBase): Promise<boolean>;
  get200(callback: msRest.ServiceCallback<boolean>): void;
  get200(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  get200(): any {
    return msRest.responseToBody(this.get200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Put boolean value true returning 200 success
   *
   * @param {HttpSuccessPut200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put200(): Promise<void>;
  put200(options: Models.HttpSuccessPut200OptionalParams): Promise<void>;
  put200(callback: msRest.ServiceCallback<void>): void;
  put200(options: Models.HttpSuccessPut200OptionalParams, callback: msRest.ServiceCallback<void>): void;
  put200(): any {
    return msRest.responseToBody(this.put200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Patch true Boolean value in request returning 200
   *
   * @param {HttpSuccessPatch200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  patch200(): Promise<void>;
  patch200(options: Models.HttpSuccessPatch200OptionalParams): Promise<void>;
  patch200(callback: msRest.ServiceCallback<void>): void;
  patch200(options: Models.HttpSuccessPatch200OptionalParams, callback: msRest.ServiceCallback<void>): void;
  patch200(): any {
    return msRest.responseToBody(this.patch200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Post bollean value true in request that returns a 200
   *
   * @param {HttpSuccessPost200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post200(): Promise<void>;
  post200(options: Models.HttpSuccessPost200OptionalParams): Promise<void>;
  post200(callback: msRest.ServiceCallback<void>): void;
  post200(options: Models.HttpSuccessPost200OptionalParams, callback: msRest.ServiceCallback<void>): void;
  post200(): any {
    return msRest.responseToBody(this.post200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Delete simple boolean value true returns 200
   *
   * @param {HttpSuccessDelete200OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete200(): Promise<void>;
  delete200(options: Models.HttpSuccessDelete200OptionalParams): Promise<void>;
  delete200(callback: msRest.ServiceCallback<void>): void;
  delete200(options: Models.HttpSuccessDelete200OptionalParams, callback: msRest.ServiceCallback<void>): void;
  delete200(): any {
    return msRest.responseToBody(this.delete200WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Put true Boolean value in request returns 201
   *
   * @param {HttpSuccessPut201OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put201(): Promise<void>;
  put201(options: Models.HttpSuccessPut201OptionalParams): Promise<void>;
  put201(callback: msRest.ServiceCallback<void>): void;
  put201(options: Models.HttpSuccessPut201OptionalParams, callback: msRest.ServiceCallback<void>): void;
  put201(): any {
    return msRest.responseToBody(this.put201WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Post true Boolean value in request returns 201 (Created)
   *
   * @param {HttpSuccessPost201OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post201(): Promise<void>;
  post201(options: Models.HttpSuccessPost201OptionalParams): Promise<void>;
  post201(callback: msRest.ServiceCallback<void>): void;
  post201(options: Models.HttpSuccessPost201OptionalParams, callback: msRest.ServiceCallback<void>): void;
  post201(): any {
    return msRest.responseToBody(this.post201WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Put true Boolean value in request returns 202 (Accepted)
   *
   * @param {HttpSuccessPut202OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put202(): Promise<void>;
  put202(options: Models.HttpSuccessPut202OptionalParams): Promise<void>;
  put202(callback: msRest.ServiceCallback<void>): void;
  put202(options: Models.HttpSuccessPut202OptionalParams, callback: msRest.ServiceCallback<void>): void;
  put202(): any {
    return msRest.responseToBody(this.put202WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Patch true Boolean value in request returns 202
   *
   * @param {HttpSuccessPatch202OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  patch202(): Promise<void>;
  patch202(options: Models.HttpSuccessPatch202OptionalParams): Promise<void>;
  patch202(callback: msRest.ServiceCallback<void>): void;
  patch202(options: Models.HttpSuccessPatch202OptionalParams, callback: msRest.ServiceCallback<void>): void;
  patch202(): any {
    return msRest.responseToBody(this.patch202WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Post true Boolean value in request returns 202 (Accepted)
   *
   * @param {HttpSuccessPost202OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post202(): Promise<void>;
  post202(options: Models.HttpSuccessPost202OptionalParams): Promise<void>;
  post202(callback: msRest.ServiceCallback<void>): void;
  post202(options: Models.HttpSuccessPost202OptionalParams, callback: msRest.ServiceCallback<void>): void;
  post202(): any {
    return msRest.responseToBody(this.post202WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Delete true Boolean value in request returns 202 (accepted)
   *
   * @param {HttpSuccessDelete202OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete202(): Promise<void>;
  delete202(options: Models.HttpSuccessDelete202OptionalParams): Promise<void>;
  delete202(callback: msRest.ServiceCallback<void>): void;
  delete202(options: Models.HttpSuccessDelete202OptionalParams, callback: msRest.ServiceCallback<void>): void;
  delete202(): any {
    return msRest.responseToBody(this.delete202WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Return 204 status code if successful
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  head204(): Promise<void>;
  head204(options: msRest.RequestOptionsBase): Promise<void>;
  head204(callback: msRest.ServiceCallback<void>): void;
  head204(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  head204(): any {
    return msRest.responseToBody(this.head204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Put true Boolean value in request returns 204 (no content)
   *
   * @param {HttpSuccessPut204OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  put204(): Promise<void>;
  put204(options: Models.HttpSuccessPut204OptionalParams): Promise<void>;
  put204(callback: msRest.ServiceCallback<void>): void;
  put204(options: Models.HttpSuccessPut204OptionalParams, callback: msRest.ServiceCallback<void>): void;
  put204(): any {
    return msRest.responseToBody(this.put204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Patch true Boolean value in request returns 204 (no content)
   *
   * @param {HttpSuccessPatch204OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  patch204(): Promise<void>;
  patch204(options: Models.HttpSuccessPatch204OptionalParams): Promise<void>;
  patch204(callback: msRest.ServiceCallback<void>): void;
  patch204(options: Models.HttpSuccessPatch204OptionalParams, callback: msRest.ServiceCallback<void>): void;
  patch204(): any {
    return msRest.responseToBody(this.patch204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Post true Boolean value in request returns 204 (no content)
   *
   * @param {HttpSuccessPost204OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  post204(): Promise<void>;
  post204(options: Models.HttpSuccessPost204OptionalParams): Promise<void>;
  post204(callback: msRest.ServiceCallback<void>): void;
  post204(options: Models.HttpSuccessPost204OptionalParams, callback: msRest.ServiceCallback<void>): void;
  post204(): any {
    return msRest.responseToBody(this.post204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Delete true Boolean value in request returns 204 (no content)
   *
   * @param {HttpSuccessDelete204OptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  delete204(): Promise<void>;
  delete204(options: Models.HttpSuccessDelete204OptionalParams): Promise<void>;
  delete204(callback: msRest.ServiceCallback<void>): void;
  delete204(options: Models.HttpSuccessDelete204OptionalParams, callback: msRest.ServiceCallback<void>): void;
  delete204(): any {
    return msRest.responseToBody(this.delete204WithHttpOperationResponse.bind(this), arguments);
  }

  /**
   * Return 404 status code
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  head404(): Promise<void>;
  head404(options: msRest.RequestOptionsBase): Promise<void>;
  head404(callback: msRest.ServiceCallback<void>): void;
  head404(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  head404(): any {
    return msRest.responseToBody(this.head404WithHttpOperationResponse.bind(this), arguments);
  }

}

// Operation Specifications
const head200OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "http/success/200",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const get200OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "http/success/200",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const put200OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "http/success/200",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const patch200OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "http/success/200",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const post200OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "http/success/200",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const delete200OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "http/success/200",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const put201OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "http/success/201",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const post201OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "http/success/201",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const put202OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "http/success/202",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const patch202OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "http/success/202",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const post202OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "http/success/202",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const delete202OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "http/success/202",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const head204OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "http/success/204",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const put204OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "http/success/204",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const patch204OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "http/success/204",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const post204OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "http/success/204",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const delete204OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "http/success/204",
  requestBody: {
    parameterPath: "booleanValue",
    mapper: {
      serializedName: "booleanValue",
      type: {
        name: "Boolean"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const head404OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "http/success/404",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
