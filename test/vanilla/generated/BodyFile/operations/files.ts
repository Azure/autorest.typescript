/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/filesMappers";
import { AutoRestSwaggerBATFileServiceContext } from "../autoRestSwaggerBATFileServiceContext";

/** Class representing a Files. */
export class Files {
  private readonly client: AutoRestSwaggerBATFileServiceContext;

  /**
   * Create a Files.
   * @param {AutoRestSwaggerBATFileServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATFileServiceContext) {
    this.client = client;
  }

  /**
   * Get file
   * @param [options] The optional parameters
   * @returns Promise<Models.FilesGetFileResponse>
   */
  getFile(options?: coreHttp.RequestOptionsBase): Promise<Models.FilesGetFileResponse>;
  /**
   * @param callback The callback
   */
  getFile(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFile(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getFile(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FilesGetFileResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFileOperationSpec,
      callback) as Promise<Models.FilesGetFileResponse>;
  }

  /**
   * Get a large file
   * @param [options] The optional parameters
   * @returns Promise<Models.FilesGetFileLargeResponse>
   */
  getFileLarge(options?: coreHttp.RequestOptionsBase): Promise<Models.FilesGetFileLargeResponse>;
  /**
   * @param callback The callback
   */
  getFileLarge(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFileLarge(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getFileLarge(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FilesGetFileLargeResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFileLargeOperationSpec,
      callback) as Promise<Models.FilesGetFileLargeResponse>;
  }

  /**
   * Get empty file
   * @param [options] The optional parameters
   * @returns Promise<Models.FilesGetEmptyFileResponse>
   */
  getEmptyFile(options?: coreHttp.RequestOptionsBase): Promise<Models.FilesGetEmptyFileResponse>;
  /**
   * @param callback The callback
   */
  getEmptyFile(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmptyFile(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  getEmptyFile(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FilesGetEmptyFileResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyFileOperationSpec,
      callback) as Promise<Models.FilesGetEmptyFileResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getFileOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "files/stream/nonempty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getFileLargeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "files/stream/verylarge",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEmptyFileOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "files/stream/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
