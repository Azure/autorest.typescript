/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/stringMappers";
import { AutoRestSwaggerBATServiceContext } from "../autoRestSwaggerBATServiceContext";

/** Class representing a String. */
export class String {
  private readonly client: AutoRestSwaggerBATServiceContext;

  /**
   * Create a String.
   * @param {AutoRestSwaggerBATServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATServiceContext) {
    this.client = client;
  }

  /**
   * Get null string value value
   * @param [options] The optional parameters
   * @returns Promise<Models.StringGetNullResponse>
   */
  getNull(options?: msRest.RequestOptionsBase): Promise<Models.StringGetNullResponse>;
  /**
   * @param callback The callback
   */
  getNull(callback: msRest.ServiceCallback<Models.GetNullOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNull(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetNullOKResponse>): void;
  getNull(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GetNullOKResponse>): Promise<Models.StringGetNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec,
      callback) as Promise<Models.StringGetNullResponse>;
  }

  /**
   * Set string value null
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putNull(options?: Models.StringPutNullOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  putNull(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putNull(options: Models.StringPutNullOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putNull(options?: Models.StringPutNullOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putNullOperationSpec,
      callback);
  }

  /**
   * Get empty string value value ''
   * @param [options] The optional parameters
   * @returns Promise<Models.StringGetEmptyResponse>
   */
  getEmpty(options?: msRest.RequestOptionsBase): Promise<Models.StringGetEmptyResponse>;
  /**
   * @param callback The callback
   */
  getEmpty(callback: msRest.ServiceCallback<Models.GetEmptyOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetEmptyOKResponse>): void;
  getEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GetEmptyOKResponse>): Promise<Models.StringGetEmptyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEmptyOperationSpec,
      callback) as Promise<Models.StringGetEmptyResponse>;
  }

  /**
   * Set string value empty ''
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putEmpty(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  putEmpty(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putEmpty(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putEmpty(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putEmptyOperationSpec,
      callback);
  }

  /**
   * Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€'
   * @param [options] The optional parameters
   * @returns Promise<Models.StringGetMbcsResponse>
   */
  getMbcs(options?: msRest.RequestOptionsBase): Promise<Models.StringGetMbcsResponse>;
  /**
   * @param callback The callback
   */
  getMbcs(callback: msRest.ServiceCallback<Models.GetMbcsOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMbcs(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMbcsOKResponse>): void;
  getMbcs(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GetMbcsOKResponse>): Promise<Models.StringGetMbcsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMbcsOperationSpec,
      callback) as Promise<Models.StringGetMbcsResponse>;
  }

  /**
   * Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putMbcs(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  putMbcs(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putMbcs(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putMbcs(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putMbcsOperationSpec,
      callback);
  }

  /**
   * Get string value with leading and trailing whitespace '<tab><space><space>Now is the time for
   * all good men to come to the aid of their country<tab><space><space>'
   * @param [options] The optional parameters
   * @returns Promise<Models.StringGetWhitespaceResponse>
   */
  getWhitespace(options?: msRest.RequestOptionsBase): Promise<Models.StringGetWhitespaceResponse>;
  /**
   * @param callback The callback
   */
  getWhitespace(callback: msRest.ServiceCallback<Models.GetWhitespaceOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getWhitespace(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetWhitespaceOKResponse>): void;
  getWhitespace(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GetWhitespaceOKResponse>): Promise<Models.StringGetWhitespaceResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getWhitespaceOperationSpec,
      callback) as Promise<Models.StringGetWhitespaceResponse>;
  }

  /**
   * Set String value with leading and trailing whitespace '<tab><space><space>Now is the time for
   * all good men to come to the aid of their country<tab><space><space>'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putWhitespace(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  putWhitespace(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putWhitespace(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putWhitespace(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putWhitespaceOperationSpec,
      callback);
  }

  /**
   * Get String value when no string value is sent in response payload
   * @param [options] The optional parameters
   * @returns Promise<Models.StringGetNotProvidedResponse>
   */
  getNotProvided(options?: msRest.RequestOptionsBase): Promise<Models.StringGetNotProvidedResponse>;
  /**
   * @param callback The callback
   */
  getNotProvided(callback: msRest.ServiceCallback<string>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNotProvided(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getNotProvided(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): Promise<Models.StringGetNotProvidedResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNotProvidedOperationSpec,
      callback) as Promise<Models.StringGetNotProvidedResponse>;
  }

  /**
   * Get value that is base64 encoded
   * @param [options] The optional parameters
   * @returns Promise<Models.StringGetBase64EncodedResponse>
   */
  getBase64Encoded(options?: msRest.RequestOptionsBase): Promise<Models.StringGetBase64EncodedResponse>;
  /**
   * @param callback The callback
   */
  getBase64Encoded(callback: msRest.ServiceCallback<Uint8Array>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBase64Encoded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Uint8Array>): void;
  getBase64Encoded(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Uint8Array>): Promise<Models.StringGetBase64EncodedResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBase64EncodedOperationSpec,
      callback) as Promise<Models.StringGetBase64EncodedResponse>;
  }

  /**
   * Get value that is base64url encoded
   * @param [options] The optional parameters
   * @returns Promise<Models.StringGetBase64UrlEncodedResponse>
   */
  getBase64UrlEncoded(options?: msRest.RequestOptionsBase): Promise<Models.StringGetBase64UrlEncodedResponse>;
  /**
   * @param callback The callback
   */
  getBase64UrlEncoded(callback: msRest.ServiceCallback<Uint8Array>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBase64UrlEncoded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Uint8Array>): void;
  getBase64UrlEncoded(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Uint8Array>): Promise<Models.StringGetBase64UrlEncodedResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getBase64UrlEncodedOperationSpec,
      callback) as Promise<Models.StringGetBase64UrlEncodedResponse>;
  }

  /**
   * Put value that is base64url encoded
   * @param stringBody
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putBase64UrlEncoded(stringBody: Uint8Array, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param stringBody
   * @param callback The callback
   */
  putBase64UrlEncoded(stringBody: Uint8Array, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param stringBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putBase64UrlEncoded(stringBody: Uint8Array, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putBase64UrlEncoded(stringBody: Uint8Array, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        stringBody,
        options
      },
      putBase64UrlEncodedOperationSpec,
      callback);
  }

  /**
   * Get null value that is expected to be base64url encoded
   * @param [options] The optional parameters
   * @returns Promise<Models.StringGetNullBase64UrlEncodedResponse>
   */
  getNullBase64UrlEncoded(options?: msRest.RequestOptionsBase): Promise<Models.StringGetNullBase64UrlEncodedResponse>;
  /**
   * @param callback The callback
   */
  getNullBase64UrlEncoded(callback: msRest.ServiceCallback<Uint8Array>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNullBase64UrlEncoded(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Uint8Array>): void;
  getNullBase64UrlEncoded(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Uint8Array>): Promise<Models.StringGetNullBase64UrlEncodedResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullBase64UrlEncodedOperationSpec,
      callback) as Promise<Models.StringGetNullBase64UrlEncodedResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "string/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putNullOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "string/null",
  requestBody: {
    parameterPath: [
      "options",
      "stringBody"
    ],
    mapper: {
      serializedName: "stringBody",
      type: {
        name: "String"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "string/empty",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putEmptyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "string/empty",
  requestBody: {
    parameterPath: "stringBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "stringBody",
      defaultValue: '',
      type: {
        name: "String"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getMbcsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "string/mbcs",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putMbcsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "string/mbcs",
  requestBody: {
    parameterPath: "stringBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "stringBody",
      defaultValue: '啊齄丂狛狜隣郎隣兀﨩ˊ〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€',
      type: {
        name: "String"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getWhitespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "string/whitespace",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putWhitespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "string/whitespace",
  requestBody: {
    parameterPath: "stringBody",
    mapper: {
      required: true,
      isConstant: true,
      serializedName: "stringBody",
      defaultValue: '    Now is the time for all good men to come to the aid of their country    ',
      type: {
        name: "String"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNotProvidedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "string/notProvided",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBase64EncodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "string/base64Encoding",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Base64Url"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getBase64UrlEncodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "string/base64UrlEncoding",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Base64Url"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putBase64UrlEncodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "string/base64UrlEncoding",
  requestBody: {
    parameterPath: "stringBody",
    mapper: {
      required: true,
      serializedName: "stringBody",
      type: {
        name: "Base64Url"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNullBase64UrlEncodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "string/nullBase64UrlEncoding",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Base64Url"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
