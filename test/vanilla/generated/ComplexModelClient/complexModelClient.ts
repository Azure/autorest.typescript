/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { ComplexModelClientContext } from "./complexModelClientContext";

class ComplexModelClient extends ComplexModelClientContext {
  /**
   * Initializes a new instance of the ComplexModelClient class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.ComplexModelClientOptions) {
    super(options);
  }

  /**
   * The Products endpoint returns information about the Uber products offered at a given location.
   * The response includes the display name and other details about each product, and lists the
   * products in the proper display order.
   * @summary Product Types
   * @param resourceGroupName Resource Group ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListResponse>
   */
  list(resourceGroupName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.ListResponse>;
  /**
   * @param resourceGroupName Resource Group ID.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: coreHttp.ServiceCallback<Models.CatalogArray>): void;
  /**
   * @param resourceGroupName Resource Group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CatalogArray>): void;
  list(resourceGroupName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CatalogArray>, callback?: coreHttp.ServiceCallback<Models.CatalogArray>): Promise<Models.ListResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ListResponse>;
  }

  /**
   * Resets products.
   * @summary Create products
   * @param subscriptionId Subscription ID.
   * @param resourceGroupName Resource Group ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateResponse>
   */
  create(subscriptionId: string, resourceGroupName: string, options?: Models.ComplexModelClientCreateOptionalParams): Promise<Models.CreateResponse>;
  /**
   * @param subscriptionId Subscription ID.
   * @param resourceGroupName Resource Group ID.
   * @param callback The callback
   */
  create(subscriptionId: string, resourceGroupName: string, callback: coreHttp.ServiceCallback<Models.CatalogDictionary>): void;
  /**
   * @param subscriptionId Subscription ID.
   * @param resourceGroupName Resource Group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(subscriptionId: string, resourceGroupName: string, options: Models.ComplexModelClientCreateOptionalParams, callback: coreHttp.ServiceCallback<Models.CatalogDictionary>): void;
  create(subscriptionId: string, resourceGroupName: string, options?: Models.ComplexModelClientCreateOptionalParams | coreHttp.ServiceCallback<Models.CatalogDictionary>, callback?: coreHttp.ServiceCallback<Models.CatalogDictionary>): Promise<Models.CreateResponse> {
    return this.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.CreateResponse>;
  }

  /**
   * Resets products.
   * @summary Update products
   * @param subscriptionId Subscription ID.
   * @param resourceGroupName Resource Group ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateResponse>
   */
  update(subscriptionId: string, resourceGroupName: string, options?: Models.ComplexModelClientUpdateOptionalParams): Promise<Models.UpdateResponse>;
  /**
   * @param subscriptionId Subscription ID.
   * @param resourceGroupName Resource Group ID.
   * @param callback The callback
   */
  update(subscriptionId: string, resourceGroupName: string, callback: coreHttp.ServiceCallback<Models.CatalogArray>): void;
  /**
   * @param subscriptionId Subscription ID.
   * @param resourceGroupName Resource Group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(subscriptionId: string, resourceGroupName: string, options: Models.ComplexModelClientUpdateOptionalParams, callback: coreHttp.ServiceCallback<Models.CatalogArray>): void;
  update(subscriptionId: string, resourceGroupName: string, options?: Models.ComplexModelClientUpdateOptionalParams | coreHttp.ServiceCallback<Models.CatalogArray>, callback?: coreHttp.ServiceCallback<Models.CatalogArray>): Promise<Models.UpdateResponse> {
    return this.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.UpdateResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis",
  urlParameters: [
    Parameters.subscriptionId0,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CatalogArray
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const createOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      productDictionaryOfArray: [
        "options",
        "productDictionaryOfArray"
      ]
    },
    mapper: {
      ...Mappers.CatalogDictionaryOfArray,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CatalogDictionary
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const updateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/Microsoft.Cache/Redis",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      productArrayOfDictionary: [
        "options",
        "productArrayOfDictionary"
      ]
    },
    mapper: {
      ...Mappers.CatalogArrayOfDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CatalogArray
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

export {
  ComplexModelClient,
  ComplexModelClientContext,
  Models as ComplexModelModels,
  Mappers as ComplexModelMappers
};
