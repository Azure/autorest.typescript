/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/datetimerfc1123Mappers";
import { AutoRestRFC1123DateTimeTestServiceContext } from "../autoRestRFC1123DateTimeTestServiceContext";

/** Class representing a Datetimerfc1123. */
export class Datetimerfc1123 {
  private readonly client: AutoRestRFC1123DateTimeTestServiceContext;

  /**
   * Create a Datetimerfc1123.
   * @param {AutoRestRFC1123DateTimeTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestRFC1123DateTimeTestServiceContext) {
    this.client = client;
  }

  /**
   * Get null datetime value
   * @param [options] The optional parameters
   * @returns Promise<Models.Datetimerfc1123GetNullResponse>
   */
  getNull(options?: coreHttp.RequestOptionsBase): Promise<Models.Datetimerfc1123GetNullResponse>;
  /**
   * @param callback The callback
   */
  getNull(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.Datetimerfc1123GetNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec,
      callback) as Promise<Models.Datetimerfc1123GetNullResponse>;
  }

  /**
   * Get invalid datetime value
   * @param [options] The optional parameters
   * @returns Promise<Models.Datetimerfc1123GetInvalidResponse>
   */
  getInvalid(options?: coreHttp.RequestOptionsBase): Promise<Models.Datetimerfc1123GetInvalidResponse>;
  /**
   * @param callback The callback
   */
  getInvalid(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getInvalid(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getInvalid(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.Datetimerfc1123GetInvalidResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidOperationSpec,
      callback) as Promise<Models.Datetimerfc1123GetInvalidResponse>;
  }

  /**
   * Get overflow datetime value
   * @param [options] The optional parameters
   * @returns Promise<Models.Datetimerfc1123GetOverflowResponse>
   */
  getOverflow(options?: coreHttp.RequestOptionsBase): Promise<Models.Datetimerfc1123GetOverflowResponse>;
  /**
   * @param callback The callback
   */
  getOverflow(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOverflow(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getOverflow(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.Datetimerfc1123GetOverflowResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOverflowOperationSpec,
      callback) as Promise<Models.Datetimerfc1123GetOverflowResponse>;
  }

  /**
   * Get underflow datetime value
   * @param [options] The optional parameters
   * @returns Promise<Models.Datetimerfc1123GetUnderflowResponse>
   */
  getUnderflow(options?: coreHttp.RequestOptionsBase): Promise<Models.Datetimerfc1123GetUnderflowResponse>;
  /**
   * @param callback The callback
   */
  getUnderflow(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUnderflow(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getUnderflow(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.Datetimerfc1123GetUnderflowResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUnderflowOperationSpec,
      callback) as Promise<Models.Datetimerfc1123GetUnderflowResponse>;
  }

  /**
   * Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT
   * @param datetimeBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putUtcMaxDateTime(datetimeBody: Date | string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param datetimeBody
   * @param callback The callback
   */
  putUtcMaxDateTime(datetimeBody: Date | string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param datetimeBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putUtcMaxDateTime(datetimeBody: Date | string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putUtcMaxDateTime(datetimeBody: Date | string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        datetimeBody,
        options
      },
      putUtcMaxDateTimeOperationSpec,
      callback);
  }

  /**
   * Get max datetime value fri, 31 dec 9999 23:59:59 gmt
   * @param [options] The optional parameters
   * @returns Promise<Models.Datetimerfc1123GetUtcLowercaseMaxDateTimeResponse>
   */
  getUtcLowercaseMaxDateTime(options?: coreHttp.RequestOptionsBase): Promise<Models.Datetimerfc1123GetUtcLowercaseMaxDateTimeResponse>;
  /**
   * @param callback The callback
   */
  getUtcLowercaseMaxDateTime(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUtcLowercaseMaxDateTime(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getUtcLowercaseMaxDateTime(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.Datetimerfc1123GetUtcLowercaseMaxDateTimeResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUtcLowercaseMaxDateTimeOperationSpec,
      callback) as Promise<Models.Datetimerfc1123GetUtcLowercaseMaxDateTimeResponse>;
  }

  /**
   * Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT
   * @param [options] The optional parameters
   * @returns Promise<Models.Datetimerfc1123GetUtcUppercaseMaxDateTimeResponse>
   */
  getUtcUppercaseMaxDateTime(options?: coreHttp.RequestOptionsBase): Promise<Models.Datetimerfc1123GetUtcUppercaseMaxDateTimeResponse>;
  /**
   * @param callback The callback
   */
  getUtcUppercaseMaxDateTime(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUtcUppercaseMaxDateTime(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getUtcUppercaseMaxDateTime(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.Datetimerfc1123GetUtcUppercaseMaxDateTimeResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUtcUppercaseMaxDateTimeOperationSpec,
      callback) as Promise<Models.Datetimerfc1123GetUtcUppercaseMaxDateTimeResponse>;
  }

  /**
   * Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT
   * @param datetimeBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putUtcMinDateTime(datetimeBody: Date | string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param datetimeBody
   * @param callback The callback
   */
  putUtcMinDateTime(datetimeBody: Date | string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param datetimeBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putUtcMinDateTime(datetimeBody: Date | string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putUtcMinDateTime(datetimeBody: Date | string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        datetimeBody,
        options
      },
      putUtcMinDateTimeOperationSpec,
      callback);
  }

  /**
   * Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT
   * @param [options] The optional parameters
   * @returns Promise<Models.Datetimerfc1123GetUtcMinDateTimeResponse>
   */
  getUtcMinDateTime(options?: coreHttp.RequestOptionsBase): Promise<Models.Datetimerfc1123GetUtcMinDateTimeResponse>;
  /**
   * @param callback The callback
   */
  getUtcMinDateTime(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUtcMinDateTime(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getUtcMinDateTime(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.Datetimerfc1123GetUtcMinDateTimeResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUtcMinDateTimeOperationSpec,
      callback) as Promise<Models.Datetimerfc1123GetUtcMinDateTimeResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "datetimerfc1123/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "datetimerfc1123/invalid",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOverflowOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "datetimerfc1123/overflow",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUnderflowOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "datetimerfc1123/underflow",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putUtcMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "datetimerfc1123/max",
  requestBody: {
    parameterPath: "datetimeBody",
    mapper: {
      required: true,
      serializedName: "datetimeBody",
      type: {
        name: "DateTimeRfc1123"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUtcLowercaseMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "datetimerfc1123/max/lowercase",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUtcUppercaseMaxDateTimeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "datetimerfc1123/max/uppercase",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putUtcMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "datetimerfc1123/min",
  requestBody: {
    parameterPath: "datetimeBody",
    mapper: {
      required: true,
      serializedName: "datetimeBody",
      type: {
        name: "DateTimeRfc1123"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUtcMinDateTimeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "datetimerfc1123/min",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
