/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/dateModelMappers";
import { AutoRestDateTestServiceContext } from "../autoRestDateTestServiceContext";

/** Class representing a DateModel. */
export class DateModel {
  private readonly client: AutoRestDateTestServiceContext;

  /**
   * Create a DateModel.
   * @param {AutoRestDateTestServiceContext} client Reference to the service client.
   */
  constructor(client: AutoRestDateTestServiceContext) {
    this.client = client;
  }

  /**
   * Get null date value
   * @param [options] The optional parameters
   * @returns Promise<Models.DateModelGetNullResponse>
   */
  getNull(options?: coreHttp.RequestOptionsBase): Promise<Models.DateModelGetNullResponse>;
  /**
   * @param callback The callback
   */
  getNull(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNull(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getNull(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.DateModelGetNullResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNullOperationSpec,
      callback) as Promise<Models.DateModelGetNullResponse>;
  }

  /**
   * Get invalid date value
   * @param [options] The optional parameters
   * @returns Promise<Models.DateModelGetInvalidDateResponse>
   */
  getInvalidDate(options?: coreHttp.RequestOptionsBase): Promise<Models.DateModelGetInvalidDateResponse>;
  /**
   * @param callback The callback
   */
  getInvalidDate(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getInvalidDate(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getInvalidDate(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.DateModelGetInvalidDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getInvalidDateOperationSpec,
      callback) as Promise<Models.DateModelGetInvalidDateResponse>;
  }

  /**
   * Get overflow date value
   * @param [options] The optional parameters
   * @returns Promise<Models.DateModelGetOverflowDateResponse>
   */
  getOverflowDate(options?: coreHttp.RequestOptionsBase): Promise<Models.DateModelGetOverflowDateResponse>;
  /**
   * @param callback The callback
   */
  getOverflowDate(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOverflowDate(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getOverflowDate(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.DateModelGetOverflowDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOverflowDateOperationSpec,
      callback) as Promise<Models.DateModelGetOverflowDateResponse>;
  }

  /**
   * Get underflow date value
   * @param [options] The optional parameters
   * @returns Promise<Models.DateModelGetUnderflowDateResponse>
   */
  getUnderflowDate(options?: coreHttp.RequestOptionsBase): Promise<Models.DateModelGetUnderflowDateResponse>;
  /**
   * @param callback The callback
   */
  getUnderflowDate(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUnderflowDate(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getUnderflowDate(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.DateModelGetUnderflowDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getUnderflowDateOperationSpec,
      callback) as Promise<Models.DateModelGetUnderflowDateResponse>;
  }

  /**
   * Put max date value 9999-12-31
   * @param dateBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putMaxDate(dateBody: Date | string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param dateBody
   * @param callback The callback
   */
  putMaxDate(dateBody: Date | string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param dateBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putMaxDate(dateBody: Date | string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putMaxDate(dateBody: Date | string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        dateBody,
        options
      },
      putMaxDateOperationSpec,
      callback);
  }

  /**
   * Get max date value 9999-12-31
   * @param [options] The optional parameters
   * @returns Promise<Models.DateModelGetMaxDateResponse>
   */
  getMaxDate(options?: coreHttp.RequestOptionsBase): Promise<Models.DateModelGetMaxDateResponse>;
  /**
   * @param callback The callback
   */
  getMaxDate(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMaxDate(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getMaxDate(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.DateModelGetMaxDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMaxDateOperationSpec,
      callback) as Promise<Models.DateModelGetMaxDateResponse>;
  }

  /**
   * Put min date value 0000-01-01
   * @param dateBody
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  putMinDate(dateBody: Date | string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param dateBody
   * @param callback The callback
   */
  putMinDate(dateBody: Date | string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param dateBody
   * @param options The optional parameters
   * @param callback The callback
   */
  putMinDate(dateBody: Date | string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  putMinDate(dateBody: Date | string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        dateBody,
        options
      },
      putMinDateOperationSpec,
      callback);
  }

  /**
   * Get min date value 0000-01-01
   * @param [options] The optional parameters
   * @returns Promise<Models.DateModelGetMinDateResponse>
   */
  getMinDate(options?: coreHttp.RequestOptionsBase): Promise<Models.DateModelGetMinDateResponse>;
  /**
   * @param callback The callback
   */
  getMinDate(callback: coreHttp.ServiceCallback<Date>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMinDate(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Date>): void;
  getMinDate(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Date>, callback?: coreHttp.ServiceCallback<Date>): Promise<Models.DateModelGetMinDateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMinDateOperationSpec,
      callback) as Promise<Models.DateModelGetMinDateResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getNullOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "date/null",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Date"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getInvalidDateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "date/invaliddate",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Date"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOverflowDateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "date/overflowdate",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Date"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getUnderflowDateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "date/underflowdate",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Date"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putMaxDateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "date/max",
  requestBody: {
    parameterPath: "dateBody",
    mapper: {
      required: true,
      serializedName: "dateBody",
      type: {
        name: "Date"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getMaxDateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "date/max",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Date"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putMinDateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "date/min",
  requestBody: {
    parameterPath: "dateBody",
    mapper: {
      required: true,
      serializedName: "dateBody",
      type: {
        name: "Date"
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getMinDateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "date/min",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Date"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
