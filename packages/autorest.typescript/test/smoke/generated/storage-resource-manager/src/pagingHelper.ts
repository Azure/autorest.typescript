/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

/**
 * Internal interface for storing pagination information associated with page objects.
 * This interface is used by the WeakMap-based token storage mechanism.
 *
 * @internal
 */
export interface PageInfo {
  continuationToken?: string;
}

const pageMap = new WeakMap<object, PageInfo>();

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 *
 * This function is auto-generated by the AutoRest TypeScript generator and is
 * part of the internal paging infrastructure. It works with the WeakMap-based
 * token storage mechanism to maintain pagination state.
 *
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 * @internal
 */
export function getContinuationToken(page: unknown): string | undefined {
  if (typeof page !== "object" || page === null) {
    return undefined;
  }
  return pageMap.get(page)?.continuationToken;
}

/**
 * Sets a continuation token for a given page object using WeakMap storage.
 * This function is used internally by the paging infrastructure to associate
 * continuation tokens with page objects for later retrieval.
 *
 * This function is auto-generated by the AutoRest TypeScript generator and
 * should not be called directly by user code.
 *
 * @param page The page object to associate with the continuation token
 * @param continuationToken The continuation token to store for this page
 * @internal
 */
export function setContinuationToken(
  page: unknown,
  continuationToken: string | undefined,
): void {
  if (typeof page !== "object" || page === null || !continuationToken) {
    return;
  }
  const pageInfo = pageMap.get(page) ?? {};
  pageInfo.continuationToken = continuationToken;
  pageMap.set(page, pageInfo);
}
