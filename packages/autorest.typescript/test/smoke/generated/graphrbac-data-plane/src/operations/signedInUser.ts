/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SignedInUser } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GraphRbacManagementClient } from "../graphRbacManagementClient";
import {
  DirectoryObjectUnion,
  SignedInUserListOwnedObjectsNextOptionalParams,
  SignedInUserListOwnedObjectsOptionalParams,
  SignedInUserListOwnedObjectsResponse,
  SignedInUserListOwnedObjectsNextResponse,
  SignedInUserGetOptionalParams,
  SignedInUserGetResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SignedInUser operations. */
export class SignedInUserImpl implements SignedInUser {
  private readonly client: GraphRbacManagementClient;

  /**
   * Initialize a new instance of the class SignedInUser class.
   * @param client Reference to the service client
   */
  constructor(client: GraphRbacManagementClient) {
    this.client = client;
  }

  /**
   * Get the list of directory objects that are owned by the user.
   * @param options The options parameters.
   */
  public listOwnedObjects(
    options?: SignedInUserListOwnedObjectsOptionalParams,
  ): PagedAsyncIterableIterator<DirectoryObjectUnion> {
    const iter = this.listOwnedObjectsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listOwnedObjectsPagingPage(options, settings);
      },
    };
  }

  private async *listOwnedObjectsPagingPage(
    options?: SignedInUserListOwnedObjectsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DirectoryObjectUnion[]> {
    let result: SignedInUserListOwnedObjectsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listOwnedObjects(options);
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listOwnedObjectsNext(continuationToken, options);
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listOwnedObjectsPagingAll(
    options?: SignedInUserListOwnedObjectsOptionalParams,
  ): AsyncIterableIterator<DirectoryObjectUnion> {
    for await (const page of this.listOwnedObjectsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get the list of directory objects that are owned by the user.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  public listOwnedObjectsNext(
    nextLink: string,
    options?: SignedInUserListOwnedObjectsNextOptionalParams,
  ): PagedAsyncIterableIterator<DirectoryObjectUnion> {
    const iter = this.listOwnedObjectsNextPagingAll(nextLink, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listOwnedObjectsNextPagingPage(nextLink, options, settings);
      },
    };
  }

  private async *listOwnedObjectsNextPagingPage(
    nextLink: string,
    options?: SignedInUserListOwnedObjectsNextOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DirectoryObjectUnion[]> {
    let result: SignedInUserListOwnedObjectsNextResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listOwnedObjectsNext(nextLink, options);
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listOwnedObjectsNext(continuationToken, options);
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listOwnedObjectsNextPagingAll(
    nextLink: string,
    options?: SignedInUserListOwnedObjectsNextOptionalParams,
  ): AsyncIterableIterator<DirectoryObjectUnion> {
    for await (const page of this.listOwnedObjectsNextPagingPage(
      nextLink,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the details for the currently logged-in user.
   * @param options The options parameters.
   */
  get(
    options?: SignedInUserGetOptionalParams,
  ): Promise<SignedInUserGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }

  /**
   * Get the list of directory objects that are owned by the user.
   * @param options The options parameters.
   */
  private _listOwnedObjects(
    options?: SignedInUserListOwnedObjectsOptionalParams,
  ): Promise<SignedInUserListOwnedObjectsResponse> {
    return this.client.sendOperationRequest(
      { options },
      listOwnedObjectsOperationSpec,
    );
  }

  /**
   * Get the list of directory objects that are owned by the user.
   * @param nextLink Next link for the list operation.
   * @param options The options parameters.
   */
  private _listOwnedObjectsNext(
    nextLink: string,
    options?: SignedInUserListOwnedObjectsNextOptionalParams,
  ): Promise<SignedInUserListOwnedObjectsNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listOwnedObjectsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/{tenantID}/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.User,
    },
    default: {
      bodyMapper: Mappers.GraphError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOwnedObjectsOperationSpec: coreClient.OperationSpec = {
  path: "/{tenantID}/me/ownedObjects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult,
    },
    default: {
      bodyMapper: Mappers.GraphError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOwnedObjectsNextOperationSpec: coreClient.OperationSpec = {
  path: "/{tenantID}/{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult,
    },
    default: {
      bodyMapper: Mappers.GraphError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.tenantID, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
