/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LocationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location",
            },
          },
        },
      },
    },
  },
};

export const Location: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Location",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      latitude: {
        serializedName: "latitude",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      longitude: {
        serializedName: "longitude",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Subscription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Subscription",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Warned",
            "PastDue",
            "Disabled",
            "Deleted",
          ],
        },
      },
      subscriptionPolicies: {
        serializedName: "subscriptionPolicies",
        type: {
          name: "Composite",
          className: "SubscriptionPolicies",
        },
      },
      authorizationSource: {
        serializedName: "authorizationSource",
        type: {
          name: "String",
        },
      },
      managedByTenants: {
        serializedName: "managedByTenants",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedByTenant",
            },
          },
        },
      },
    },
  },
};

export const SubscriptionPolicies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionPolicies",
    modelProperties: {
      locationPlacementId: {
        serializedName: "locationPlacementId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      quotaId: {
        serializedName: "quotaId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      spendingLimit: {
        serializedName: "spendingLimit",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["On", "Off", "CurrentPeriodOff"],
        },
      },
    },
  },
};

export const ManagedByTenant: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedByTenant",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SubscriptionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subscription",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TenantListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TenantListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TenantIdDescription",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TenantIdDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TenantIdDescription",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantCategory: {
        serializedName: "tenantCategory",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Home", "ProjectedBy", "ManagedBy"],
        },
      },
      country: {
        serializedName: "country",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      countryCode: {
        serializedName: "countryCode",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      domains: {
        serializedName: "domains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};
