/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Tags } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClient } from "../resourceManagementClient";
import {
  TagDetails,
  TagsListNextOptionalParams,
  TagsListOptionalParams,
  TagsListResponse,
  TagsDeleteValueOptionalParams,
  TagsCreateOrUpdateValueOptionalParams,
  TagsCreateOrUpdateValueResponse,
  TagsCreateOrUpdateOptionalParams,
  TagsCreateOrUpdateResponse,
  TagsDeleteOptionalParams,
  TagsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Tags operations. */
export class TagsImpl implements Tags {
  private readonly client: ResourceManagementClient;

  /**
   * Initialize a new instance of the class Tags class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceManagementClient) {
    this.client = client;
  }

  /**
   * Gets the names and values of all resource tags that are defined in a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: TagsListOptionalParams,
  ): PagedAsyncIterableIterator<TagDetails> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: TagsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<TagDetails[]> {
    let result: TagsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: TagsListOptionalParams,
  ): AsyncIterableIterator<TagDetails> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Deletes a tag value.
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to delete.
   * @param options The options parameters.
   */
  deleteValue(
    tagName: string,
    tagValue: string,
    options?: TagsDeleteValueOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { tagName, tagValue, options },
      deleteValueOperationSpec,
    );
  }

  /**
   * Creates a tag value. The name of the tag must already exist.
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to create.
   * @param options The options parameters.
   */
  createOrUpdateValue(
    tagName: string,
    tagValue: string,
    options?: TagsCreateOrUpdateValueOptionalParams,
  ): Promise<TagsCreateOrUpdateValueResponse> {
    return this.client.sendOperationRequest(
      { tagName, tagValue, options },
      createOrUpdateValueOperationSpec,
    );
  }

  /**
   * The tag name can have a maximum of 512 characters and is case insensitive. Tag names created by
   * Azure have prefixes of microsoft, azure, or windows. You cannot create tags with one of these
   * prefixes.
   * @param tagName The name of the tag to create.
   * @param options The options parameters.
   */
  createOrUpdate(
    tagName: string,
    options?: TagsCreateOrUpdateOptionalParams,
  ): Promise<TagsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { tagName, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * You must remove all values from a resource tag before you can delete it.
   * @param tagName The name of the tag.
   * @param options The options parameters.
   */
  delete(tagName: string, options?: TagsDeleteOptionalParams): Promise<void> {
    return this.client.sendOperationRequest(
      { tagName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Gets the names and values of all resource tags that are defined in a subscription.
   * @param options The options parameters.
   */
  private _list(options?: TagsListOptionalParams): Promise<TagsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: TagsListNextOptionalParams,
  ): Promise<TagsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteValueOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.tagName,
    Parameters.tagValue,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateValueOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TagValue,
    },
    201: {
      bodyMapper: Mappers.TagValue,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.tagName,
    Parameters.tagValue,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TagDetails,
    },
    201: {
      bodyMapper: Mappers.TagDetails,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.tagName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.tagName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/tagNames",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TagsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TagsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
