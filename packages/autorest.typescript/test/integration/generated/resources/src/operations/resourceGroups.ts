/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ResourceGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourcesClient } from "../resourcesClient";
import {
  ResourceGroupsCheckExistenceOptionalParams,
  ResourceGroupsCheckExistenceResponse,
} from "../models";

/** Class containing ResourceGroups operations. */
export class ResourceGroupsImpl implements ResourceGroups {
  private readonly client: ResourcesClient;

  /**
   * Initialize a new instance of the class ResourceGroups class.
   * @param client Reference to the service client
   */
  constructor(client: ResourcesClient) {
    this.client = client;
  }

  /**
   * Checks whether a resource group exists.
   * @param resourceGroupName The name of the resource group to check. The name is case insensitive.
   * @param options The options parameters.
   */
  checkExistence(
    resourceGroupName: string,
    options?: ResourceGroupsCheckExistenceOptionalParams,
  ): Promise<ResourceGroupsCheckExistenceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      checkExistenceOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkExistenceOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
  httpMethod: "HEAD",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
