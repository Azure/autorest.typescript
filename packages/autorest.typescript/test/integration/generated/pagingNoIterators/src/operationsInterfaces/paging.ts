/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  PagingGetNoItemNamePagesOptionalParams,
  PagingGetNoItemNamePagesResponse,
  PagingGetEmptyNextLinkNamePagesOptionalParams,
  PagingGetEmptyNextLinkNamePagesResponse,
  PagingGetNullNextLinkNamePagesOptionalParams,
  PagingGetNullNextLinkNamePagesResponse,
  PagingGetSinglePagesOptionalParams,
  PagingGetSinglePagesResponse,
  BodyParam,
  PagingGetSinglePagesWithBodyParamsOptionalParams,
  PagingGetSinglePagesWithBodyParamsResponse,
  PagingFirstResponseEmptyOptionalParams,
  PagingFirstResponseEmptyResponse,
  PagingGetMultiplePagesOptionalParams,
  PagingGetMultiplePagesResponse,
  PagingGetWithQueryParamsOptionalParams,
  PagingGetWithQueryParamsResponse,
  PagingDuplicateParamsOptionalParams,
  PagingDuplicateParamsResponse,
  PagingPageWithMaxPageSizeOptionalParams,
  PagingPageWithMaxPageSizeResponse,
  PagingNextOperationWithQueryParamsOptionalParams,
  PagingNextOperationWithQueryParamsResponse,
  PagingGetOdataMultiplePagesOptionalParams,
  PagingGetOdataMultiplePagesResponse,
  PagingGetMultiplePagesWithOffsetOptions,
  PagingGetMultiplePagesWithOffsetOptionalParams,
  PagingGetMultiplePagesWithOffsetResponse,
  PagingGetMultiplePagesRetryFirstOptionalParams,
  PagingGetMultiplePagesRetryFirstResponse,
  PagingGetMultiplePagesRetrySecondOptionalParams,
  PagingGetMultiplePagesRetrySecondResponse,
  PagingGetSinglePagesFailureOptionalParams,
  PagingGetSinglePagesFailureResponse,
  PagingGetMultiplePagesFailureOptionalParams,
  PagingGetMultiplePagesFailureResponse,
  PagingGetMultiplePagesFailureUriOptionalParams,
  PagingGetMultiplePagesFailureUriResponse,
  PagingGetMultiplePagesFragmentNextLinkOptionalParams,
  PagingGetMultiplePagesFragmentNextLinkResponse,
  CustomParameterGroup,
  PagingGetMultiplePagesFragmentWithGroupingNextLinkOptionalParams,
  PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse,
  PagingGetMultiplePagesLROOptionalParams,
  PagingGetMultiplePagesLROResponse,
  PagingAppendApiVersionOptionalParams,
  PagingAppendApiVersionResponse,
  PagingReplaceApiVersionOptionalParams,
  PagingReplaceApiVersionResponse,
  PagingNextFragmentOptionalParams,
  PagingNextFragmentResponse,
  PagingNextFragmentWithGroupingOptionalParams,
  PagingNextFragmentWithGroupingResponse,
  PagingGetPagingModelWithItemNameWithXMSClientNameOptionalParams,
  PagingGetPagingModelWithItemNameWithXMSClientNameResponse,
  PagingGetNoItemNamePagesNextOptionalParams,
  PagingGetNoItemNamePagesNextResponse,
  PagingGetEmptyNextLinkNamePagesNextOptionalParams,
  PagingGetEmptyNextLinkNamePagesNextResponse,
  PagingGetSinglePagesNextOptionalParams,
  PagingGetSinglePagesNextResponse,
  PagingGetSinglePagesWithBodyParamsNextOptionalParams,
  PagingGetSinglePagesWithBodyParamsNextResponse,
  PagingFirstResponseEmptyNextOptionalParams,
  PagingFirstResponseEmptyNextResponse,
  PagingGetMultiplePagesNextOptionalParams,
  PagingGetMultiplePagesNextResponse,
  PagingDuplicateParamsNextOptionalParams,
  PagingDuplicateParamsNextResponse,
  PagingPageWithMaxPageSizeNextOptionalParams,
  PagingPageWithMaxPageSizeNextResponse,
  PagingGetOdataMultiplePagesNextOptionalParams,
  PagingGetOdataMultiplePagesNextResponse,
  PagingGetMultiplePagesWithOffsetNextOptionalParams,
  PagingGetMultiplePagesWithOffsetNextResponse,
  PagingGetMultiplePagesRetryFirstNextOptionalParams,
  PagingGetMultiplePagesRetryFirstNextResponse,
  PagingGetMultiplePagesRetrySecondNextOptionalParams,
  PagingGetMultiplePagesRetrySecondNextResponse,
  PagingGetSinglePagesFailureNextOptionalParams,
  PagingGetSinglePagesFailureNextResponse,
  PagingGetMultiplePagesFailureNextOptionalParams,
  PagingGetMultiplePagesFailureNextResponse,
  PagingGetMultiplePagesFailureUriNextOptionalParams,
  PagingGetMultiplePagesFailureUriNextResponse,
  PagingGetMultiplePagesLRONextOptionalParams,
  PagingGetMultiplePagesLRONextResponse,
  PagingAppendApiVersionNextOptionalParams,
  PagingAppendApiVersionNextResponse,
  PagingReplaceApiVersionNextOptionalParams,
  PagingReplaceApiVersionNextResponse,
  PagingGetPagingModelWithItemNameWithXMSClientNameNextOptionalParams,
  PagingGetPagingModelWithItemNameWithXMSClientNameNextResponse,
} from "../models";

/** Interface representing a Paging. */
export interface Paging {
  /**
   * A paging operation that must return result of the default 'value' node.
   * @param options The options parameters.
   */
  getNoItemNamePages(
    options?: PagingGetNoItemNamePagesOptionalParams,
  ): Promise<PagingGetNoItemNamePagesResponse>;
  /**
   * A paging operation that gets an empty next link and should stop after page 1.
   * @param options The options parameters.
   */
  getEmptyNextLinkNamePages(
    options?: PagingGetEmptyNextLinkNamePagesOptionalParams,
  ): Promise<PagingGetEmptyNextLinkNamePagesResponse>;
  /**
   * A paging operation that must ignore any kind of nextLink, and stop after page 1.
   * @param options The options parameters.
   */
  getNullNextLinkNamePages(
    options?: PagingGetNullNextLinkNamePagesOptionalParams,
  ): Promise<PagingGetNullNextLinkNamePagesResponse>;
  /**
   * A paging operation that finishes on the first call without a nextlink
   * @param options The options parameters.
   */
  getSinglePages(
    options?: PagingGetSinglePagesOptionalParams,
  ): Promise<PagingGetSinglePagesResponse>;
  /**
   * A paging operation that finishes on the first call with body params without a nextlink
   * @param parameters put {'name': 'body'} to pass the test
   * @param options The options parameters.
   */
  getSinglePagesWithBodyParams(
    parameters: BodyParam,
    options?: PagingGetSinglePagesWithBodyParamsOptionalParams,
  ): Promise<PagingGetSinglePagesWithBodyParamsResponse>;
  /**
   * A paging operation whose first response's items list is empty, but still returns a next link. Second
   * (and final) call, will give you an items list of 1.
   * @param options The options parameters.
   */
  firstResponseEmpty(
    options?: PagingFirstResponseEmptyOptionalParams,
  ): Promise<PagingFirstResponseEmptyResponse>;
  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  getMultiplePages(
    options?: PagingGetMultiplePagesOptionalParams,
  ): Promise<PagingGetMultiplePagesResponse>;
  /**
   * A paging operation that includes a next operation. It has a different query parameter from it's next
   * operation nextOperationWithQueryParams. Returns a ProductResult
   * @param requiredQueryParameter A required integer query parameter. Put in value '100' to pass test.
   * @param options The options parameters.
   */
  getWithQueryParams(
    requiredQueryParameter: number,
    options?: PagingGetWithQueryParamsOptionalParams,
  ): Promise<PagingGetWithQueryParamsResponse>;
  /**
   * Define `filter` as a query param for all calls. However, the returned next link will also include
   * the `filter` as part of it. Make sure you don't end up duplicating the `filter` param in the url
   * sent.
   * @param options The options parameters.
   */
  duplicateParams(
    options?: PagingDuplicateParamsOptionalParams,
  ): Promise<PagingDuplicateParamsResponse>;
  /**
   * Paging with max page size. We don't want to
   * @param options The options parameters.
   */
  pageWithMaxPageSize(
    options?: PagingPageWithMaxPageSizeOptionalParams,
  ): Promise<PagingPageWithMaxPageSizeResponse>;
  /**
   * Next operation for getWithQueryParams. Pass in next=True to pass test. Returns a ProductResult
   * @param options The options parameters.
   */
  nextOperationWithQueryParams(
    options?: PagingNextOperationWithQueryParamsOptionalParams,
  ): Promise<PagingNextOperationWithQueryParamsResponse>;
  /**
   * A paging operation that includes a nextLink in odata format that has 10 pages
   * @param options The options parameters.
   */
  getOdataMultiplePages(
    options?: PagingGetOdataMultiplePagesOptionalParams,
  ): Promise<PagingGetOdataMultiplePagesResponse>;
  /**
   * A paging operation that includes a nextLink that has 10 pages
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param options The options parameters.
   */
  getMultiplePagesWithOffset(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    options?: PagingGetMultiplePagesWithOffsetOptionalParams,
  ): Promise<PagingGetMultiplePagesWithOffsetResponse>;
  /**
   * A paging operation that fails on the first call with 500 and then retries and then get a response
   * including a nextLink that has 10 pages
   * @param options The options parameters.
   */
  getMultiplePagesRetryFirst(
    options?: PagingGetMultiplePagesRetryFirstOptionalParams,
  ): Promise<PagingGetMultiplePagesRetryFirstResponse>;
  /**
   * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first
   * with 500. The client should retry and finish all 10 pages eventually.
   * @param options The options parameters.
   */
  getMultiplePagesRetrySecond(
    options?: PagingGetMultiplePagesRetrySecondOptionalParams,
  ): Promise<PagingGetMultiplePagesRetrySecondResponse>;
  /**
   * A paging operation that receives a 400 on the first call
   * @param options The options parameters.
   */
  getSinglePagesFailure(
    options?: PagingGetSinglePagesFailureOptionalParams,
  ): Promise<PagingGetSinglePagesFailureResponse>;
  /**
   * A paging operation that receives a 400 on the second call
   * @param options The options parameters.
   */
  getMultiplePagesFailure(
    options?: PagingGetMultiplePagesFailureOptionalParams,
  ): Promise<PagingGetMultiplePagesFailureResponse>;
  /**
   * A paging operation that receives an invalid nextLink
   * @param options The options parameters.
   */
  getMultiplePagesFailureUri(
    options?: PagingGetMultiplePagesFailureUriOptionalParams,
  ): Promise<PagingGetMultiplePagesFailureUriResponse>;
  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param options The options parameters.
   */
  getMultiplePagesFragmentNextLink(
    apiVersion: string,
    tenant: string,
    options?: PagingGetMultiplePagesFragmentNextLinkOptionalParams,
  ): Promise<PagingGetMultiplePagesFragmentNextLinkResponse>;
  /**
   * A paging operation that doesn't return a full URL, just a fragment with parameters grouped
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  getMultiplePagesFragmentWithGroupingNextLink(
    customParameterGroup: CustomParameterGroup,
    options?: PagingGetMultiplePagesFragmentWithGroupingNextLinkOptionalParams,
  ): Promise<PagingGetMultiplePagesFragmentWithGroupingNextLinkResponse>;
  /**
   * A long-running paging operation that includes a nextLink that has 10 pages
   * @param options The options parameters.
   */
  getMultiplePagesLRO(
    options?: PagingGetMultiplePagesLROOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PagingGetMultiplePagesLROResponse>,
      PagingGetMultiplePagesLROResponse
    >
  >;
  /**
   * A paging operation with api version. When calling the next link, you want to append your client's
   * api version to the next link
   * @param options The options parameters.
   */
  appendApiVersion(
    options?: PagingAppendApiVersionOptionalParams,
  ): Promise<PagingAppendApiVersionResponse>;
  /**
   * A paging operation with api version. When calling the next link, you want to reformat it and
   * override the returned api version with your client's api version
   * @param options The options parameters.
   */
  replaceApiVersion(
    options?: PagingReplaceApiVersionOptionalParams,
  ): Promise<PagingReplaceApiVersionResponse>;
  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param apiVersion Sets the api version to use.
   * @param tenant Sets the tenant to use.
   * @param nextLink Next link for list operation.
   * @param options The options parameters.
   */
  nextFragment(
    apiVersion: string,
    tenant: string,
    nextLink: string,
    options?: PagingNextFragmentOptionalParams,
  ): Promise<PagingNextFragmentResponse>;
  /**
   * A paging operation that doesn't return a full URL, just a fragment
   * @param nextLink Next link for list operation.
   * @param customParameterGroup Parameter group
   * @param options The options parameters.
   */
  nextFragmentWithGrouping(
    nextLink: string,
    customParameterGroup: CustomParameterGroup,
    options?: PagingNextFragmentWithGroupingOptionalParams,
  ): Promise<PagingNextFragmentWithGroupingResponse>;
  /**
   * A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name
   * 'indexes'.
   * @param options The options parameters.
   */
  getPagingModelWithItemNameWithXMSClientName(
    options?: PagingGetPagingModelWithItemNameWithXMSClientNameOptionalParams,
  ): Promise<PagingGetPagingModelWithItemNameWithXMSClientNameResponse>;
  /**
   * GetNoItemNamePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetNoItemNamePages method.
   * @param options The options parameters.
   */
  getNoItemNamePagesNext(
    nextLink: string,
    options?: PagingGetNoItemNamePagesNextOptionalParams,
  ): Promise<PagingGetNoItemNamePagesNextResponse>;
  /**
   * GetEmptyNextLinkNamePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetEmptyNextLinkNamePages
   *                 method.
   * @param options The options parameters.
   */
  getEmptyNextLinkNamePagesNext(
    nextLink: string,
    options?: PagingGetEmptyNextLinkNamePagesNextOptionalParams,
  ): Promise<PagingGetEmptyNextLinkNamePagesNextResponse>;
  /**
   * GetSinglePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePages method.
   * @param options The options parameters.
   */
  getSinglePagesNext(
    nextLink: string,
    options?: PagingGetSinglePagesNextOptionalParams,
  ): Promise<PagingGetSinglePagesNextResponse>;
  /**
   * GetSinglePagesWithBodyParamsNext
   * @param parameters put {'name': 'body'} to pass the test
   * @param nextLink The nextLink from the previous successful call to the GetSinglePagesWithBodyParams
   *                 method.
   * @param options The options parameters.
   */
  getSinglePagesWithBodyParamsNext(
    parameters: BodyParam,
    nextLink: string,
    options?: PagingGetSinglePagesWithBodyParamsNextOptionalParams,
  ): Promise<PagingGetSinglePagesWithBodyParamsNextResponse>;
  /**
   * FirstResponseEmptyNext
   * @param nextLink The nextLink from the previous successful call to the FirstResponseEmpty method.
   * @param options The options parameters.
   */
  firstResponseEmptyNext(
    nextLink: string,
    options?: PagingFirstResponseEmptyNextOptionalParams,
  ): Promise<PagingFirstResponseEmptyNextResponse>;
  /**
   * GetMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePages method.
   * @param options The options parameters.
   */
  getMultiplePagesNext(
    nextLink: string,
    options?: PagingGetMultiplePagesNextOptionalParams,
  ): Promise<PagingGetMultiplePagesNextResponse>;
  /**
   * DuplicateParamsNext
   * @param nextLink The nextLink from the previous successful call to the DuplicateParams method.
   * @param options The options parameters.
   */
  duplicateParamsNext(
    nextLink: string,
    options?: PagingDuplicateParamsNextOptionalParams,
  ): Promise<PagingDuplicateParamsNextResponse>;
  /**
   * PageWithMaxPageSizeNext
   * @param nextLink The nextLink from the previous successful call to the PageWithMaxPageSize method.
   * @param options The options parameters.
   */
  pageWithMaxPageSizeNext(
    nextLink: string,
    options?: PagingPageWithMaxPageSizeNextOptionalParams,
  ): Promise<PagingPageWithMaxPageSizeNextResponse>;
  /**
   * GetOdataMultiplePagesNext
   * @param nextLink The nextLink from the previous successful call to the GetOdataMultiplePages method.
   * @param options The options parameters.
   */
  getOdataMultiplePagesNext(
    nextLink: string,
    options?: PagingGetOdataMultiplePagesNextOptionalParams,
  ): Promise<PagingGetOdataMultiplePagesNextResponse>;
  /**
   * GetMultiplePagesWithOffsetNext
   * @param pagingGetMultiplePagesWithOffsetOptions Parameter group
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesWithOffset
   *                 method.
   * @param options The options parameters.
   */
  getMultiplePagesWithOffsetNext(
    pagingGetMultiplePagesWithOffsetOptions: PagingGetMultiplePagesWithOffsetOptions,
    nextLink: string,
    options?: PagingGetMultiplePagesWithOffsetNextOptionalParams,
  ): Promise<PagingGetMultiplePagesWithOffsetNextResponse>;
  /**
   * GetMultiplePagesRetryFirstNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetryFirst
   *                 method.
   * @param options The options parameters.
   */
  getMultiplePagesRetryFirstNext(
    nextLink: string,
    options?: PagingGetMultiplePagesRetryFirstNextOptionalParams,
  ): Promise<PagingGetMultiplePagesRetryFirstNextResponse>;
  /**
   * GetMultiplePagesRetrySecondNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesRetrySecond
   *                 method.
   * @param options The options parameters.
   */
  getMultiplePagesRetrySecondNext(
    nextLink: string,
    options?: PagingGetMultiplePagesRetrySecondNextOptionalParams,
  ): Promise<PagingGetMultiplePagesRetrySecondNextResponse>;
  /**
   * GetSinglePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetSinglePagesFailure method.
   * @param options The options parameters.
   */
  getSinglePagesFailureNext(
    nextLink: string,
    options?: PagingGetSinglePagesFailureNextOptionalParams,
  ): Promise<PagingGetSinglePagesFailureNextResponse>;
  /**
   * GetMultiplePagesFailureNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailure
   *                 method.
   * @param options The options parameters.
   */
  getMultiplePagesFailureNext(
    nextLink: string,
    options?: PagingGetMultiplePagesFailureNextOptionalParams,
  ): Promise<PagingGetMultiplePagesFailureNextResponse>;
  /**
   * GetMultiplePagesFailureUriNext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesFailureUri
   *                 method.
   * @param options The options parameters.
   */
  getMultiplePagesFailureUriNext(
    nextLink: string,
    options?: PagingGetMultiplePagesFailureUriNextOptionalParams,
  ): Promise<PagingGetMultiplePagesFailureUriNextResponse>;
  /**
   * GetMultiplePagesLRONext
   * @param nextLink The nextLink from the previous successful call to the GetMultiplePagesLRO method.
   * @param options The options parameters.
   */
  getMultiplePagesLRONext(
    nextLink: string,
    options?: PagingGetMultiplePagesLRONextOptionalParams,
  ): Promise<PagingGetMultiplePagesLRONextResponse>;
  /**
   * AppendApiVersionNext
   * @param nextLink The nextLink from the previous successful call to the AppendApiVersion method.
   * @param options The options parameters.
   */
  appendApiVersionNext(
    nextLink: string,
    options?: PagingAppendApiVersionNextOptionalParams,
  ): Promise<PagingAppendApiVersionNextResponse>;
  /**
   * ReplaceApiVersionNext
   * @param nextLink The nextLink from the previous successful call to the ReplaceApiVersion method.
   * @param options The options parameters.
   */
  replaceApiVersionNext(
    nextLink: string,
    options?: PagingReplaceApiVersionNextOptionalParams,
  ): Promise<PagingReplaceApiVersionNextResponse>;
  /**
   * GetPagingModelWithItemNameWithXMSClientNameNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetPagingModelWithItemNameWithXMSClientName method.
   * @param options The options parameters.
   */
  getPagingModelWithItemNameWithXMSClientNameNext(
    nextLink: string,
    options?: PagingGetPagingModelWithItemNameWithXMSClientNameNextOptionalParams,
  ): Promise<PagingGetPagingModelWithItemNameWithXMSClientNameNextResponse>;
}
