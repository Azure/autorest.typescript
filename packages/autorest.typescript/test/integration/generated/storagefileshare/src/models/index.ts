import * as coreClient from "@azure/core-client";

export interface StorageError {
  message?: string;
}

/** Defines headers for File_uploadRangeFromURL operation. */
export interface FileUploadRangeFromURLHeaders {
  /** The ETag contains a value which represents the version of the file, in quotes. */
  eTag?: string;
  /** Returns the date and time the directory was last modified. Any operation that modifies the share or its properties or metadata updates the last modified time. Operations on files do not affect the last modified time of the share. */
  lastModified?: Date;
  /** This header is returned so that the client can check for message content integrity. The value of this header is computed by the File service; it is not necessarily the same value as may have been specified in the request headers. */
  xMsContentCrc64?: Uint8Array;
  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
  requestId?: string;
  /** Indicates the version of the File service used to execute the request. */
  version?: string;
  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */
  date?: Date;
  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */
  isServerEncrypted?: boolean;
}

/** Defines headers for File_uploadRangeFromURL operation. */
export interface FileUploadRangeFromURLExceptionHeaders {
  errorCode?: string;
}

/** Parameter group */
export interface SourceModifiedAccessConditions {
  /** Specify the crc64 value to operate only on range with a matching crc64 checksum. */
  sourceIfMatchCrc64?: Uint8Array;
  /** Specify the crc64 value to operate only on range without a matching crc64 checksum. */
  sourceIfNoneMatchCrc64?: Uint8Array;
}

/** Parameter group */
export interface LeaseAccessConditions {
  /** If specified, the operation only succeeds if the resource's lease is active and matches this ID. */
  leaseId?: string;
}

/** Optional parameters. */
export interface FileUploadRangeFromURLOptionalParams
  extends coreClient.OperationOptions {
  /** Parameter group */
  sourceModifiedAccessConditions?: SourceModifiedAccessConditions;
  /** Parameter group */
  leaseAccessConditions?: LeaseAccessConditions;
  /** The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting Timeouts for File Service Operations.</a> */
  timeout?: number;
  /** Bytes of source data in the specified range. */
  sourceRange?: string;
  /** Specify the crc64 calculated for the range of bytes that must be read from the copy source. */
  sourceContentCrc64?: Uint8Array;
}

/** Contains response data for the uploadRangeFromURL operation. */
export type FileUploadRangeFromURLResponse = FileUploadRangeFromURLHeaders;

/** Optional parameters. */
export interface StorageFileShareClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Only update is supported: - Update: Writes the bytes downloaded from the source url into the specified range. */
  fileRangeWriteFromUrl?: string;
  /** Specifies the version of the operation to use for this request. */
  version?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
