/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const StorageError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "StorageErrorError",
        },
      },
    },
  },
};

export const StorageErrorError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageErrorError",
    modelProperties: {
      code: {
        serializedName: "Code",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "Message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SetAccessControlRecursiveResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SetAccessControlRecursiveResponse",
    modelProperties: {
      directoriesSuccessful: {
        serializedName: "directoriesSuccessful",
        type: {
          name: "Number",
        },
      },
      filesSuccessful: {
        serializedName: "filesSuccessful",
        type: {
          name: "Number",
        },
      },
      failureCount: {
        serializedName: "failureCount",
        type: {
          name: "Number",
        },
      },
      failedEntries: {
        serializedName: "failedEntries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AclFailedEntry",
            },
          },
        },
      },
    },
  },
};

export const AclFailedEntry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AclFailedEntry",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Path: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Path",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      isDirectory: {
        defaultValue: false,
        serializedName: "isDirectory",
        type: {
          name: "Boolean",
        },
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "String",
        },
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String",
        },
      },
      contentLength: {
        serializedName: "contentLength",
        type: {
          name: "Number",
        },
      },
      owner: {
        serializedName: "owner",
        type: {
          name: "String",
        },
      },
      group: {
        serializedName: "group",
        type: {
          name: "String",
        },
      },
      permissions: {
        serializedName: "permissions",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathList",
    modelProperties: {
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Path",
            },
          },
        },
      },
    },
  },
};

export const FileSystem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "String",
        },
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ListBlobsHierarchySegmentResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListBlobsHierarchySegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        type: {
          name: "String",
        },
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        type: {
          name: "String",
        },
      },
      prefix: {
        serializedName: "Prefix",
        type: {
          name: "String",
        },
      },
      marker: {
        serializedName: "Marker",
        type: {
          name: "String",
        },
      },
      maxResults: {
        serializedName: "MaxResults",
        type: {
          name: "Number",
        },
      },
      delimiter: {
        serializedName: "Delimiter",
        type: {
          name: "String",
        },
      },
      segment: {
        serializedName: "Segment",
        type: {
          name: "Composite",
          className: "BlobHierarchyListSegment",
        },
      },
      nextMarker: {
        serializedName: "NextMarker",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BlobHierarchyListSegment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobHierarchyListSegment",
    modelProperties: {
      blobPrefixes: {
        serializedName: "BlobPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobPrefix",
            },
          },
        },
      },
      blobItems: {
        serializedName: "BlobItems",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal",
            },
          },
        },
      },
    },
  },
};

export const BlobPrefix: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobPrefix",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BlobItemInternal: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobItemInternal",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        type: {
          name: "String",
        },
      },
      deleted: {
        serializedName: "Deleted",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      snapshot: {
        serializedName: "Snapshot",
        required: true,
        type: {
          name: "String",
        },
      },
      versionId: {
        serializedName: "VersionId",
        type: {
          name: "String",
        },
      },
      isCurrentVersion: {
        serializedName: "IsCurrentVersion",
        type: {
          name: "Boolean",
        },
      },
      properties: {
        serializedName: "Properties",
        type: {
          name: "Composite",
          className: "BlobPropertiesInternal",
        },
      },
      deletionId: {
        serializedName: "DeletionId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BlobPropertiesInternal: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobPropertiesInternal",
    modelProperties: {
      creationTime: {
        serializedName: "Creation-Time",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      lastModified: {
        serializedName: "Last-Modified",
        required: true,
        type: {
          name: "DateTimeRfc1123",
        },
      },
      etag: {
        serializedName: "Etag",
        required: true,
        type: {
          name: "String",
        },
      },
      contentLength: {
        serializedName: "Content-Length",
        type: {
          name: "Number",
        },
      },
      contentType: {
        serializedName: "Content-Type",
        type: {
          name: "String",
        },
      },
      contentEncoding: {
        serializedName: "Content-Encoding",
        type: {
          name: "String",
        },
      },
      contentLanguage: {
        serializedName: "Content-Language",
        type: {
          name: "String",
        },
      },
      contentMD5: {
        serializedName: "Content-MD5",
        type: {
          name: "ByteArray",
        },
      },
      contentDisposition: {
        serializedName: "Content-Disposition",
        type: {
          name: "String",
        },
      },
      cacheControl: {
        serializedName: "Cache-Control",
        type: {
          name: "String",
        },
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number",
        },
      },
      copyId: {
        serializedName: "CopyId",
        type: {
          name: "String",
        },
      },
      copySource: {
        serializedName: "CopySource",
        type: {
          name: "String",
        },
      },
      copyProgress: {
        serializedName: "CopyProgress",
        type: {
          name: "String",
        },
      },
      copyCompletionTime: {
        serializedName: "CopyCompletionTime",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      copyStatusDescription: {
        serializedName: "CopyStatusDescription",
        type: {
          name: "String",
        },
      },
      serverEncrypted: {
        serializedName: "ServerEncrypted",
        type: {
          name: "Boolean",
        },
      },
      incrementalCopy: {
        serializedName: "IncrementalCopy",
        type: {
          name: "Boolean",
        },
      },
      destinationSnapshot: {
        serializedName: "DestinationSnapshot",
        type: {
          name: "String",
        },
      },
      deletedTime: {
        serializedName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      remainingRetentionDays: {
        serializedName: "RemainingRetentionDays",
        type: {
          name: "Number",
        },
      },
      accessTierInferred: {
        serializedName: "AccessTierInferred",
        type: {
          name: "Boolean",
        },
      },
      customerProvidedKeySha256: {
        serializedName: "CustomerProvidedKeySha256",
        type: {
          name: "String",
        },
      },
      encryptionScope: {
        serializedName: "EncryptionScope",
        type: {
          name: "String",
        },
      },
      accessTierChangeTime: {
        serializedName: "AccessTierChangeTime",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      tagCount: {
        serializedName: "TagCount",
        type: {
          name: "Number",
        },
      },
      expiresOn: {
        serializedName: "Expiry-Time",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      isSealed: {
        serializedName: "Sealed",
        type: {
          name: "Boolean",
        },
      },
      lastAccessedOn: {
        serializedName: "LastAccessTime",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      deleteTime: {
        serializedName: "DeleteTime",
        type: {
          name: "DateTimeRfc1123",
        },
      },
    },
  },
};

export const FileSystemList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemList",
    modelProperties: {
      filesystems: {
        serializedName: "filesystems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FileSystem",
            },
          },
        },
      },
    },
  },
};

export const PathCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathCreateHeaders",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      requestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$",
          ),
        },
        serializedName: "x-ms-request-id",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String",
        },
      },
      continuation: {
        serializedName: "x-ms-continuation",
        type: {
          name: "String",
        },
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const PathCreateExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathUpdateHeaders",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        type: {
          name: "String",
        },
      },
      cacheControl: {
        serializedName: "cache-control",
        type: {
          name: "String",
        },
      },
      contentDisposition: {
        serializedName: "content-disposition",
        type: {
          name: "String",
        },
      },
      contentEncoding: {
        serializedName: "content-encoding",
        type: {
          name: "String",
        },
      },
      contentLanguage: {
        serializedName: "content-language",
        type: {
          name: "String",
        },
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number",
        },
      },
      contentRange: {
        serializedName: "content-range",
        type: {
          name: "String",
        },
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String",
        },
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "x-ms-properties",
        type: {
          name: "String",
        },
      },
      xMsContinuation: {
        serializedName: "x-ms-continuation",
        type: {
          name: "String",
        },
      },
      requestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$",
          ),
        },
        serializedName: "x-ms-request-id",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathUpdateExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathUpdateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathLeaseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathLeaseHeaders",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      requestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$",
          ),
        },
        serializedName: "x-ms-request-id",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String",
        },
      },
      leaseId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$",
          ),
        },
        serializedName: "x-ms-lease-id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathLeaseExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathReadHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathReadHeaders",
    modelProperties: {
      acceptRanges: {
        serializedName: "accept-ranges",
        type: {
          name: "String",
        },
      },
      cacheControl: {
        serializedName: "cache-control",
        type: {
          name: "String",
        },
      },
      contentDisposition: {
        serializedName: "content-disposition",
        type: {
          name: "String",
        },
      },
      contentEncoding: {
        serializedName: "content-encoding",
        type: {
          name: "String",
        },
      },
      contentLanguage: {
        serializedName: "content-language",
        type: {
          name: "String",
        },
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number",
        },
      },
      contentRange: {
        serializedName: "content-range",
        type: {
          name: "String",
        },
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String",
        },
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "String",
        },
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      requestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$",
          ),
        },
        serializedName: "x-ms-request-id",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String",
        },
      },
      resourceType: {
        serializedName: "x-ms-resource-type",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "x-ms-properties",
        type: {
          name: "String",
        },
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        type: {
          name: "String",
        },
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        type: {
          name: "String",
        },
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathReadExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathReadExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathGetPropertiesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathGetPropertiesHeaders",
    modelProperties: {
      acceptRanges: {
        serializedName: "accept-ranges",
        type: {
          name: "String",
        },
      },
      cacheControl: {
        serializedName: "cache-control",
        type: {
          name: "String",
        },
      },
      contentDisposition: {
        serializedName: "content-disposition",
        type: {
          name: "String",
        },
      },
      contentEncoding: {
        serializedName: "content-encoding",
        type: {
          name: "String",
        },
      },
      contentLanguage: {
        serializedName: "content-language",
        type: {
          name: "String",
        },
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number",
        },
      },
      contentRange: {
        serializedName: "content-range",
        type: {
          name: "String",
        },
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String",
        },
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "String",
        },
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      requestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$",
          ),
        },
        serializedName: "x-ms-request-id",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String",
        },
      },
      resourceType: {
        serializedName: "x-ms-resource-type",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "x-ms-properties",
        type: {
          name: "String",
        },
      },
      owner: {
        serializedName: "x-ms-owner",
        type: {
          name: "String",
        },
      },
      group: {
        serializedName: "x-ms-group",
        type: {
          name: "String",
        },
      },
      permissions: {
        serializedName: "x-ms-permissions",
        type: {
          name: "String",
        },
      },
      acl: {
        serializedName: "x-ms-acl",
        type: {
          name: "String",
        },
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        type: {
          name: "String",
        },
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        type: {
          name: "String",
        },
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathGetPropertiesExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathDeleteHeaders",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123",
        },
      },
      requestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$",
          ),
        },
        serializedName: "x-ms-request-id",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String",
        },
      },
      continuation: {
        serializedName: "x-ms-continuation",
        type: {
          name: "String",
        },
      },
      deletionId: {
        serializedName: "x-ms-deletion-id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PathDeleteExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PathDeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String",
        },
      },
    },
  },
};
