/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";

export interface ErrorModel {
  status?: number;
  message?: string;
}

export interface Paths1MqqetpFormdataStreamUploadfilePostRequestbodyContentMultipartFormDataSchema {
  /** File to upload. */
  fileContent: coreRestPipeline.RequestBodyType;
  /** File name to upload. Name has to be spelled exactly as written here. */
  fileName: string;
}

export interface Paths1P3Stk3FormdataStreamUploadfilesPostRequestbodyContentMultipartFormDataSchema {
  /** Files to upload. */
  fileContent: coreRestPipeline.RequestBodyType[];
}

/** Optional parameters. */
export interface FormdataUploadFileOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the uploadFile operation. */
export type FormdataUploadFileResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Optional parameters. */
export interface FormdataUploadFileViaBodyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the uploadFileViaBody operation. */
export type FormdataUploadFileViaBodyResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Optional parameters. */
export interface FormdataUploadFilesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the uploadFiles operation. */
export type FormdataUploadFilesResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Optional parameters. */
export interface BodyFormDataClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
