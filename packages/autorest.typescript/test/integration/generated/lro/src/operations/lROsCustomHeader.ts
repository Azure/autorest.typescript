/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { LROsCustomHeader } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LROClient } from "../lROClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  LROsCustomHeaderPutAsyncRetrySucceededOptionalParams,
  LROsCustomHeaderPutAsyncRetrySucceededResponse,
  LROsCustomHeaderPut201CreatingSucceeded200OptionalParams,
  LROsCustomHeaderPut201CreatingSucceeded200Response,
  LROsCustomHeaderPost202Retry200OptionalParams,
  LROsCustomHeaderPost202Retry200Response,
  LROsCustomHeaderPostAsyncRetrySucceededOptionalParams,
  LROsCustomHeaderPostAsyncRetrySucceededResponse,
} from "../models";

/** Class containing LROsCustomHeader operations. */
export class LROsCustomHeaderImpl implements LROsCustomHeader {
  private readonly client: LROClient;

  /**
   * Initialize a new instance of the class LROsCustomHeader class.
   * @param client Reference to the service client
   */
  constructor(client: LROClient) {
    this.client = client;
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running put request, service returns a 200 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async beginPutAsyncRetrySucceeded(
    options?: LROsCustomHeaderPutAsyncRetrySucceededOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LROsCustomHeaderPutAsyncRetrySucceededResponse>,
      LROsCustomHeaderPutAsyncRetrySucceededResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LROsCustomHeaderPutAsyncRetrySucceededResponse> => {
      return tracingClient.withSpan(
        "LROClient.beginPutAsyncRetrySucceeded",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<LROsCustomHeaderPutAsyncRetrySucceededResponse>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { options },
      spec: putAsyncRetrySucceededOperationSpec,
    });
    const poller = await createHttpPoller<
      LROsCustomHeaderPutAsyncRetrySucceededResponse,
      OperationState<LROsCustomHeaderPutAsyncRetrySucceededResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running put request, service returns a 200 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async beginPutAsyncRetrySucceededAndWait(
    options?: LROsCustomHeaderPutAsyncRetrySucceededOptionalParams,
  ): Promise<LROsCustomHeaderPutAsyncRetrySucceededResponse> {
    const poller = await this.beginPutAsyncRetrySucceeded(options);
    return poller.pollUntilDone();
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running put request, service returns a 201 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async beginPut201CreatingSucceeded200(
    options?: LROsCustomHeaderPut201CreatingSucceeded200OptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LROsCustomHeaderPut201CreatingSucceeded200Response>,
      LROsCustomHeaderPut201CreatingSucceeded200Response
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LROsCustomHeaderPut201CreatingSucceeded200Response> => {
      return tracingClient.withSpan(
        "LROClient.beginPut201CreatingSucceeded200",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<LROsCustomHeaderPut201CreatingSucceeded200Response>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { options },
      spec: put201CreatingSucceeded200OperationSpec,
    });
    const poller = await createHttpPoller<
      LROsCustomHeaderPut201CreatingSucceeded200Response,
      OperationState<LROsCustomHeaderPut201CreatingSucceeded200Response>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running put request, service returns a 201 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a
   * ‘200’ with ProvisioningState=’Succeeded’
   * @param options The options parameters.
   */
  async beginPut201CreatingSucceeded200AndWait(
    options?: LROsCustomHeaderPut201CreatingSucceeded200OptionalParams,
  ): Promise<LROsCustomHeaderPut201CreatingSucceeded200Response> {
    const poller = await this.beginPut201CreatingSucceeded200(options);
    return poller.pollUntilDone();
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running post request, service returns a 202 to the initial request, with 'Location'
   * and 'Retry-After' headers, Polls return a 200 with a response body after success
   * @param options The options parameters.
   */
  async beginPost202Retry200(
    options?: LROsCustomHeaderPost202Retry200OptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LROsCustomHeaderPost202Retry200Response>,
      LROsCustomHeaderPost202Retry200Response
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LROsCustomHeaderPost202Retry200Response> => {
      return tracingClient.withSpan(
        "LROClient.beginPost202Retry200",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<LROsCustomHeaderPost202Retry200Response>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { options },
      spec: post202Retry200OperationSpec,
    });
    const poller = await createHttpPoller<
      LROsCustomHeaderPost202Retry200Response,
      OperationState<LROsCustomHeaderPost202Retry200Response>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running post request, service returns a 202 to the initial request, with 'Location'
   * and 'Retry-After' headers, Polls return a 200 with a response body after success
   * @param options The options parameters.
   */
  async beginPost202Retry200AndWait(
    options?: LROsCustomHeaderPost202Retry200OptionalParams,
  ): Promise<LROsCustomHeaderPost202Retry200Response> {
    const poller = await this.beginPost202Retry200(options);
    return poller.pollUntilDone();
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running post request, service returns a 202 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async beginPostAsyncRetrySucceeded(
    options?: LROsCustomHeaderPostAsyncRetrySucceededOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LROsCustomHeaderPostAsyncRetrySucceededResponse>,
      LROsCustomHeaderPostAsyncRetrySucceededResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LROsCustomHeaderPostAsyncRetrySucceededResponse> => {
      return tracingClient.withSpan(
        "LROClient.beginPostAsyncRetrySucceeded",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<LROsCustomHeaderPostAsyncRetrySucceededResponse>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { options },
      spec: postAsyncRetrySucceededOperationSpec,
    });
    const poller = await createHttpPoller<
      LROsCustomHeaderPostAsyncRetrySucceededResponse,
      OperationState<LROsCustomHeaderPostAsyncRetrySucceededResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required message header for all
   * requests. Long running post request, service returns a 202 to the initial request, with an entity
   * that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
   * header for operation status
   * @param options The options parameters.
   */
  async beginPostAsyncRetrySucceededAndWait(
    options?: LROsCustomHeaderPostAsyncRetrySucceededOptionalParams,
  ): Promise<LROsCustomHeaderPostAsyncRetrySucceededResponse> {
    const poller = await this.beginPostAsyncRetrySucceeded(options);
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const putAsyncRetrySucceededOperationSpec: coreClient.OperationSpec = {
  path: "/lro/customheader/putasync/retry/succeeded",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsCustomHeaderPutAsyncRetrySucceededHeaders,
    },
    201: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsCustomHeaderPutAsyncRetrySucceededHeaders,
    },
    202: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsCustomHeaderPutAsyncRetrySucceededHeaders,
    },
    204: {
      bodyMapper: Mappers.Product,
      headersMapper: Mappers.LROsCustomHeaderPutAsyncRetrySucceededHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const put201CreatingSucceeded200OperationSpec: coreClient.OperationSpec = {
  path: "/lro/customheader/put/201/creating/succeeded/200",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Product,
    },
    201: {
      bodyMapper: Mappers.Product,
    },
    202: {
      bodyMapper: Mappers.Product,
    },
    204: {
      bodyMapper: Mappers.Product,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const post202Retry200OperationSpec: coreClient.OperationSpec = {
  path: "/lro/customheader/post/202/retry/200",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LROsCustomHeaderPost202Retry200Headers,
    },
    201: {
      headersMapper: Mappers.LROsCustomHeaderPost202Retry200Headers,
    },
    202: {
      headersMapper: Mappers.LROsCustomHeaderPost202Retry200Headers,
    },
    204: {
      headersMapper: Mappers.LROsCustomHeaderPost202Retry200Headers,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const postAsyncRetrySucceededOperationSpec: coreClient.OperationSpec = {
  path: "/lro/customheader/postasync/retry/succeeded",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.LROsCustomHeaderPostAsyncRetrySucceededHeaders,
    },
    201: {
      headersMapper: Mappers.LROsCustomHeaderPostAsyncRetrySucceededHeaders,
    },
    202: {
      headersMapper: Mappers.LROsCustomHeaderPostAsyncRetrySucceededHeaders,
    },
    204: {
      headersMapper: Mappers.LROsCustomHeaderPostAsyncRetrySucceededHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.product,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
