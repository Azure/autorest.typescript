/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Header } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureSpecialPropertiesClient } from "../azureSpecialPropertiesClient";
import {
  HeaderCustomNamedRequestIdOptionalParams,
  HeaderCustomNamedRequestIdResponse,
  HeaderCustomNamedRequestIdParamGroupingParameters,
  HeaderCustomNamedRequestIdParamGroupingOptionalParams,
  HeaderCustomNamedRequestIdParamGroupingResponse,
  HeaderCustomNamedRequestIdHeadOptionalParams,
  HeaderCustomNamedRequestIdHeadResponse,
} from "../models";

/** Class containing Header operations. */
export class HeaderImpl implements Header {
  private readonly client: AzureSpecialPropertiesClient;

  /**
   * Initialize a new instance of the class Header class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSpecialPropertiesClient) {
    this.client = client;
  }

  /**
   * Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
   * @param fooClientRequestId The fooRequestId
   * @param options The options parameters.
   */
  customNamedRequestId(
    fooClientRequestId: string,
    options?: HeaderCustomNamedRequestIdOptionalParams,
  ): Promise<HeaderCustomNamedRequestIdResponse> {
    return this.client.sendOperationRequest(
      { fooClientRequestId, options },
      customNamedRequestIdOperationSpec,
    );
  }

  /**
   * Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request, via
   * a parameter group
   * @param headerCustomNamedRequestIdParamGroupingParameters Parameter group
   * @param options The options parameters.
   */
  customNamedRequestIdParamGrouping(
    headerCustomNamedRequestIdParamGroupingParameters: HeaderCustomNamedRequestIdParamGroupingParameters,
    options?: HeaderCustomNamedRequestIdParamGroupingOptionalParams,
  ): Promise<HeaderCustomNamedRequestIdParamGroupingResponse> {
    return this.client.sendOperationRequest(
      { headerCustomNamedRequestIdParamGroupingParameters, options },
      customNamedRequestIdParamGroupingOperationSpec,
    );
  }

  /**
   * Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
   * @param fooClientRequestId The fooRequestId
   * @param options The options parameters.
   */
  customNamedRequestIdHead(
    fooClientRequestId: string,
    options?: HeaderCustomNamedRequestIdHeadOptionalParams,
  ): Promise<HeaderCustomNamedRequestIdHeadResponse> {
    return this.client.sendOperationRequest(
      { fooClientRequestId, options },
      customNamedRequestIdHeadOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const customNamedRequestIdOperationSpec: coreClient.OperationSpec = {
  path: "/azurespecials/customNamedRequestId",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.HeaderCustomNamedRequestIdHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.fooClientRequestId],
  serializer,
};
const customNamedRequestIdParamGroupingOperationSpec: coreClient.OperationSpec =
  {
    path: "/azurespecials/customNamedRequestIdParamGrouping",
    httpMethod: "POST",
    responses: {
      200: {
        headersMapper: Mappers.HeaderCustomNamedRequestIdParamGroupingHeaders,
      },
      default: {
        bodyMapper: Mappers.ErrorModel,
      },
    },
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept, Parameters.fooClientRequestId1],
    serializer,
  };
const customNamedRequestIdHeadOperationSpec: coreClient.OperationSpec = {
  path: "/azurespecials/customNamedRequestIdHead",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.HeaderCustomNamedRequestIdHeadHeaders,
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.fooClientRequestId],
  serializer,
};
