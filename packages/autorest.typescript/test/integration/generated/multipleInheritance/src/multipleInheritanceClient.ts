/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  MultipleInheritanceClientOptionalParams,
  GetHorseOptionalParams,
  GetHorseResponse,
  Horse,
  PutHorseOptionalParams,
  PutHorseResponse,
  GetPetOptionalParams,
  GetPetResponse,
  Pet,
  PutPetOptionalParams,
  PutPetResponse,
  GetFelineOptionalParams,
  GetFelineResponse,
  Feline,
  PutFelineOptionalParams,
  PutFelineResponse,
  GetCatOptionalParams,
  GetCatResponse,
  Cat,
  PutCatOptionalParams,
  PutCatResponse,
  GetKittenOptionalParams,
  GetKittenResponse,
  Kitten,
  PutKittenOptionalParams,
  PutKittenResponse,
} from "./models";

export class MultipleInheritanceClient extends coreClient.ServiceClient {
  $host: string;

  /**
   * Initializes a new instance of the MultipleInheritanceClient class.
   * @param options The parameter options
   */
  constructor(options?: MultipleInheritanceClientOptionalParams) {
    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: MultipleInheritanceClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
    };

    const packageDetails = `azsdk-js-multiple-inheritance/1.0.0-preview1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint: options.endpoint ?? options.baseUri ?? "http://localhost:3000",
    };
    super(optionsWithDefaults);

    // Assigning values to Constant parameters
    this.$host = options.$host || "http://localhost:3000";
  }

  /**
   * Get a horse with name 'Fred' and isAShowHorse true
   * @param options The options parameters.
   */
  getHorse(options?: GetHorseOptionalParams): Promise<GetHorseResponse> {
    return this.sendOperationRequest({ options }, getHorseOperationSpec);
  }

  /**
   * Put a horse with name 'General' and isAShowHorse false
   * @param horse Put a horse with name 'General' and isAShowHorse false
   * @param options The options parameters.
   */
  putHorse(
    horse: Horse,
    options?: PutHorseOptionalParams,
  ): Promise<PutHorseResponse> {
    return this.sendOperationRequest({ horse, options }, putHorseOperationSpec);
  }

  /**
   * Get a pet with name 'Peanut'
   * @param options The options parameters.
   */
  getPet(options?: GetPetOptionalParams): Promise<GetPetResponse> {
    return this.sendOperationRequest({ options }, getPetOperationSpec);
  }

  /**
   * Put a pet with name 'Butter'
   * @param pet Put a pet with name 'Butter'
   * @param options The options parameters.
   */
  putPet(pet: Pet, options?: PutPetOptionalParams): Promise<PutPetResponse> {
    return this.sendOperationRequest({ pet, options }, putPetOperationSpec);
  }

  /**
   * Get a feline where meows and hisses are true
   * @param options The options parameters.
   */
  getFeline(options?: GetFelineOptionalParams): Promise<GetFelineResponse> {
    return this.sendOperationRequest({ options }, getFelineOperationSpec);
  }

  /**
   * Put a feline who hisses and doesn't meow
   * @param feline Put a feline who hisses and doesn't meow
   * @param options The options parameters.
   */
  putFeline(
    feline: Feline,
    options?: PutFelineOptionalParams,
  ): Promise<PutFelineResponse> {
    return this.sendOperationRequest(
      { feline, options },
      putFelineOperationSpec,
    );
  }

  /**
   * Get a cat with name 'Whiskers' where likesMilk, meows, and hisses is true
   * @param options The options parameters.
   */
  getCat(options?: GetCatOptionalParams): Promise<GetCatResponse> {
    return this.sendOperationRequest({ options }, getCatOperationSpec);
  }

  /**
   * Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true
   * @param cat Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true
   * @param options The options parameters.
   */
  putCat(cat: Cat, options?: PutCatOptionalParams): Promise<PutCatResponse> {
    return this.sendOperationRequest({ cat, options }, putCatOperationSpec);
  }

  /**
   * Get a kitten with name 'Gatito' where likesMilk and meows is true, and hisses and eatsMiceYet is
   * false
   * @param options The options parameters.
   */
  getKitten(options?: GetKittenOptionalParams): Promise<GetKittenResponse> {
    return this.sendOperationRequest({ options }, getKittenOperationSpec);
  }

  /**
   * Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and eatsMiceYet is true
   * @param kitten Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and
   *               eatsMiceYet is true
   * @param options The options parameters.
   */
  putKitten(
    kitten: Kitten,
    options?: PutKittenOptionalParams,
  ): Promise<PutKittenResponse> {
    return this.sendOperationRequest(
      { kitten, options },
      putKittenOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getHorseOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/horse",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Horse,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putHorseOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/horse",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.horse,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getPetOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/pet",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Pet,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putPetOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/pet",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.pet,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getFelineOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/feline",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Feline,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putFelineOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/feline",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.feline,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getCatOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/cat",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Cat,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putCatOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/cat",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.cat,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getKittenOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/kitten",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Kitten,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putKittenOperationSpec: coreClient.OperationSpec = {
  path: "/multipleInheritance/kitten",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.kitten,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
