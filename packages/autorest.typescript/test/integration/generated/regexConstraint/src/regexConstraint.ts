/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters";
import {
  RegexConstraintOptionalParams,
  ApiV1ValueGetOptionalParams,
  ApiV1ValueGetResponse,
} from "./models";

export class RegexConstraint extends coreClient.ServiceClient {
  $host: string;

  /**
   * Initializes a new instance of the RegexConstraint class.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor($host: string, options?: RegexConstraintOptionalParams) {
    if ($host === undefined) {
      throw new Error("'$host' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: RegexConstraintOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
    };

    const packageDetails = `azsdk-js-regex-constraint/1.0.0-preview1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint: options.endpoint ?? options.baseUri ?? "{$host}",
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.$host = $host;
  }

  /**
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param options The options parameters.
   */
  apiV1ValueGet(
    serverName: string,
    options?: ApiV1ValueGetOptionalParams,
  ): Promise<ApiV1ValueGetResponse> {
    return this.sendOperationRequest(
      { serverName, options },
      apiV1ValueGetOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer({}, /* isXml */ false);

const apiV1ValueGetOperationSpec: coreClient.OperationSpec = {
  path: "/api/v1/value",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  urlParameters: [Parameters.$host, Parameters.serverName],
  headerParameters: [Parameters.accept],
  serializer,
};
