/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  ModelFlatteningClientOptionalParams,
  PutArrayOptionalParams,
  GetArrayOptionalParams,
  GetArrayResponse,
  PutWrappedArrayOptionalParams,
  GetWrappedArrayOptionalParams,
  GetWrappedArrayResponse,
  PutDictionaryOptionalParams,
  GetDictionaryOptionalParams,
  GetDictionaryResponse,
  PutResourceCollectionOptionalParams,
  GetResourceCollectionOptionalParams,
  GetResourceCollectionResponse,
  PutSimpleProductOptionalParams,
  PutSimpleProductResponse,
  PostFlattenedSimpleProductOptionalParams,
  PostFlattenedSimpleProductResponse,
  FlattenParameterGroup,
  PutSimpleProductWithGroupingOptionalParams,
  PutSimpleProductWithGroupingResponse,
} from "./models";

export class ModelFlatteningClient extends coreClient.ServiceClient {
  $host: string;

  /**
   * Initializes a new instance of the ModelFlatteningClient class.
   * @param options The parameter options
   */
  constructor(options?: ModelFlatteningClientOptionalParams) {
    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: ModelFlatteningClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
    };

    const packageDetails = `azsdk-js-model-flattening/1.0.0-preview1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint: options.endpoint ?? options.baseUri ?? "http://localhost:3000",
    };
    super(optionsWithDefaults);

    // Assigning values to Constant parameters
    this.$host = options.$host || "http://localhost:3000";
  }

  /**
   * Put External Resource as an Array
   * @param options The options parameters.
   */
  putArray(options?: PutArrayOptionalParams): Promise<void> {
    return this.sendOperationRequest({ options }, putArrayOperationSpec);
  }

  /**
   * Get External Resource as an Array
   * @param options The options parameters.
   */
  getArray(options?: GetArrayOptionalParams): Promise<GetArrayResponse> {
    return this.sendOperationRequest({ options }, getArrayOperationSpec);
  }

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened is
   * not removed if it's referenced in an array
   * @param options The options parameters.
   */
  putWrappedArray(options?: PutWrappedArrayOptionalParams): Promise<void> {
    return this.sendOperationRequest({ options }, putWrappedArrayOperationSpec);
  }

  /**
   * No need to have a route in Express server for this operation. Used to verify the type flattened is
   * not removed if it's referenced in an array
   * @param options The options parameters.
   */
  getWrappedArray(
    options?: GetWrappedArrayOptionalParams,
  ): Promise<GetWrappedArrayResponse> {
    return this.sendOperationRequest({ options }, getWrappedArrayOperationSpec);
  }

  /**
   * Put External Resource as a Dictionary
   * @param options The options parameters.
   */
  putDictionary(options?: PutDictionaryOptionalParams): Promise<void> {
    return this.sendOperationRequest({ options }, putDictionaryOperationSpec);
  }

  /**
   * Get External Resource as a Dictionary
   * @param options The options parameters.
   */
  getDictionary(
    options?: GetDictionaryOptionalParams,
  ): Promise<GetDictionaryResponse> {
    return this.sendOperationRequest({ options }, getDictionaryOperationSpec);
  }

  /**
   * Put External Resource as a ResourceCollection
   * @param options The options parameters.
   */
  putResourceCollection(
    options?: PutResourceCollectionOptionalParams,
  ): Promise<void> {
    return this.sendOperationRequest(
      { options },
      putResourceCollectionOperationSpec,
    );
  }

  /**
   * Get External Resource as a ResourceCollection
   * @param options The options parameters.
   */
  getResourceCollection(
    options?: GetResourceCollectionOptionalParams,
  ): Promise<GetResourceCollectionResponse> {
    return this.sendOperationRequest(
      { options },
      getResourceCollectionOperationSpec,
    );
  }

  /**
   * Put Simple Product with client flattening true on the model
   * @param options The options parameters.
   */
  putSimpleProduct(
    options?: PutSimpleProductOptionalParams,
  ): Promise<PutSimpleProductResponse> {
    return this.sendOperationRequest(
      { options },
      putSimpleProductOperationSpec,
    );
  }

  /**
   * Put Flattened Simple Product with client flattening true on the parameter
   * @param productId Unique identifier representing a specific product for a given latitude & longitude.
   *                  For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
   * @param options The options parameters.
   */
  postFlattenedSimpleProduct(
    productId: string,
    options?: PostFlattenedSimpleProductOptionalParams,
  ): Promise<PostFlattenedSimpleProductResponse> {
    return this.sendOperationRequest(
      { productId, options },
      postFlattenedSimpleProductOperationSpec,
    );
  }

  /**
   * Put Simple Product with client flattening true on the model
   * @param flattenParameterGroup Parameter group
   * @param options The options parameters.
   */
  putSimpleProductWithGrouping(
    flattenParameterGroup: FlattenParameterGroup,
    options?: PutSimpleProductWithGroupingOptionalParams,
  ): Promise<PutSimpleProductWithGroupingResponse> {
    return this.sendOperationRequest(
      { flattenParameterGroup, options },
      putSimpleProductWithGroupingOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const putArrayOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/array",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.resourceArray,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getArrayOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/array",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "FlattenedProduct" },
          },
        },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putWrappedArrayOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/wrappedarray",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.resourceArray1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getWrappedArrayOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/wrappedarray",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ProductWrapper" } },
        },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putDictionaryOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/dictionary",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.resourceDictionary,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getDictionaryOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/dictionary",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "FlattenedProduct" } },
        },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putResourceCollectionOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/resourcecollection",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.resourceComplexObject,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getResourceCollectionOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/resourcecollection",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const putSimpleProductOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/customFlattening",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.simpleBodyProduct,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const postFlattenedSimpleProductOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/customFlattening",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: {
    parameterPath: {
      productId: ["productId"],
      description: ["options", "description"],
      maxProductDisplayName: ["options", "maxProductDisplayName"],
      capacity: ["options", "capacity"],
      genericValue: ["options", "genericValue"],
      odataValue: ["options", "odataValue"],
    },
    mapper: { ...Mappers.SimpleProduct, required: true },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const putSimpleProductWithGroupingOperationSpec: coreClient.OperationSpec = {
  path: "/model-flatten/customFlattening/parametergrouping/{name}/",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SimpleProduct,
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: {
    parameterPath: {
      productId: ["flattenParameterGroup", "productId"],
      description: ["flattenParameterGroup", "description"],
      maxProductDisplayName: ["flattenParameterGroup", "maxProductDisplayName"],
      capacity: ["flattenParameterGroup", "capacity"],
      genericValue: ["flattenParameterGroup", "genericValue"],
      odataValue: ["flattenParameterGroup", "odataValue"],
    },
    mapper: { ...Mappers.SimpleProduct, required: true },
  },
  urlParameters: [Parameters.$host, Parameters.name],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
