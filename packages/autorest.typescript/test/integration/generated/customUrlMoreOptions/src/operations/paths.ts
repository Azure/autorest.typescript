/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Paths } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomUrlMoreOptionsClient } from "../customUrlMoreOptionsClient";
import { PathsGetEmptyOptionalParams } from "../models";

/** Class containing Paths operations. */
export class PathsImpl implements Paths {
  private readonly client: CustomUrlMoreOptionsClient;

  /**
   * Initialize a new instance of the class Paths class.
   * @param client Reference to the service client
   */
  constructor(client: CustomUrlMoreOptionsClient) {
    this.client = client;
  }

  /**
   * Get a 200 to test a valid base uri
   * @param vault The vault name, e.g. https://myvault
   * @param secret Secret value.
   * @param keyName The key name with value 'key1'.
   * @param options The options parameters.
   */
  getEmpty(
    vault: string,
    secret: string,
    keyName: string,
    options?: PathsGetEmptyOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { vault, secret, keyName, options },
      getEmptyOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/customuri/{subscriptionId}/{keyName}",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  queryParameters: [Parameters.keyVersion],
  urlParameters: [
    Parameters.vault,
    Parameters.secret,
    Parameters.dnsSuffix,
    Parameters.keyName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
