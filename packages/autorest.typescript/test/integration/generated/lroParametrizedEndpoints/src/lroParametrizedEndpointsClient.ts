/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "./lroImpl";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  LroParametrizedEndpointsClientOptionalParams,
  PollWithParameterizedEndpointsOptionalParams,
  PollWithParameterizedEndpointsResponse,
  PollWithConstantParameterizedEndpointsOptionalParams,
  PollWithConstantParameterizedEndpointsResponse,
} from "./models";

export class LroParametrizedEndpointsClient extends coreClient.ServiceClient {
  host: string;

  /**
   * Initializes a new instance of the LroParametrizedEndpointsClient class.
   * @param options The parameter options
   */
  constructor(options?: LroParametrizedEndpointsClientOptionalParams) {
    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: LroParametrizedEndpointsClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
    };

    const packageDetails = `azsdk-js-lro-parameterized-endpoints/1.0.0-preview1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "http://{accountName}{host}",
    };
    super(optionsWithDefaults);

    // Assigning values to Constant parameters
    this.host = options.host || "host";
  }

  /**
   * Poll with method and client level parameters in endpoint
   * @param accountName Account Name. Pass in 'local' to pass test.
   * @param options The options parameters.
   */
  async beginPollWithParameterizedEndpoints(
    accountName: string,
    options?: PollWithParameterizedEndpointsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PollWithParameterizedEndpointsResponse>,
      PollWithParameterizedEndpointsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PollWithParameterizedEndpointsResponse> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { accountName, options },
      spec: pollWithParameterizedEndpointsOperationSpec,
    });
    const poller = await createHttpPoller<
      PollWithParameterizedEndpointsResponse,
      OperationState<PollWithParameterizedEndpointsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Poll with method and client level parameters in endpoint
   * @param accountName Account Name. Pass in 'local' to pass test.
   * @param options The options parameters.
   */
  async beginPollWithParameterizedEndpointsAndWait(
    accountName: string,
    options?: PollWithParameterizedEndpointsOptionalParams,
  ): Promise<PollWithParameterizedEndpointsResponse> {
    const poller = await this.beginPollWithParameterizedEndpoints(
      accountName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Poll with method and client level parameters in endpoint, with a constant value
   * @param accountName Account Name. Pass in 'local' to pass test.
   * @param options The options parameters.
   */
  async beginPollWithConstantParameterizedEndpoints(
    accountName: string,
    options?: PollWithConstantParameterizedEndpointsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PollWithConstantParameterizedEndpointsResponse>,
      PollWithConstantParameterizedEndpointsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PollWithConstantParameterizedEndpointsResponse> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { accountName, options },
      spec: pollWithConstantParameterizedEndpointsOperationSpec,
    });
    const poller = await createHttpPoller<
      PollWithConstantParameterizedEndpointsResponse,
      OperationState<PollWithConstantParameterizedEndpointsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Poll with method and client level parameters in endpoint, with a constant value
   * @param accountName Account Name. Pass in 'local' to pass test.
   * @param options The options parameters.
   */
  async beginPollWithConstantParameterizedEndpointsAndWait(
    accountName: string,
    options?: PollWithConstantParameterizedEndpointsOptionalParams,
  ): Promise<PollWithConstantParameterizedEndpointsResponse> {
    const poller = await this.beginPollWithConstantParameterizedEndpoints(
      accountName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const pollWithParameterizedEndpointsOperationSpec: coreClient.OperationSpec = {
  path: "/lroParameterizedEndpoints",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
    201: {
      bodyMapper: { type: { name: "String" } },
    },
    202: {
      bodyMapper: { type: { name: "String" } },
    },
    204: {
      bodyMapper: { type: { name: "String" } },
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.accountName, Parameters.host],
  headerParameters: [Parameters.accept],
  serializer,
};
const pollWithConstantParameterizedEndpointsOperationSpec: coreClient.OperationSpec =
  {
    path: "/lroConstantParameterizedEndpoints/{constantParameter}",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: { type: { name: "String" } },
      },
      201: {
        bodyMapper: { type: { name: "String" } },
      },
      202: {
        bodyMapper: { type: { name: "String" } },
      },
      204: {
        bodyMapper: { type: { name: "String" } },
      },
      default: {
        bodyMapper: Mappers.ErrorModel,
      },
    },
    urlParameters: [
      Parameters.accountName,
      Parameters.host,
      Parameters.constantParameter,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
