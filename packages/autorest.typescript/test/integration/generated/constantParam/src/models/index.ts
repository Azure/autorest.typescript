/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export interface LanguageBatchInput {
  documents: LanguageInput[];
}

export interface LanguageInput {
  /** Unique, non-empty document identifier. */
  id: string;
  text: string;
  countryHint?: string;
}

export interface LanguageResult {
  /** Response by document */
  documents: DocumentLanguage[];
  /** Errors by document id. */
  errors: DocumentError[];
  /** if showStats=true was specified in the request this field will contain information about the request payload. */
  statistics?: RequestStatistics;
  /** This field indicates which model is used for scoring. */
  modelVersion: string;
}

export interface DocumentLanguage {
  /** Unique, non-empty document identifier. */
  id: string;
  /** Detected Language. */
  detectedLanguage: DetectedLanguage;
  /** Warnings encountered while processing document. */
  warnings: TextAnalyticsWarning[];
  /** if showStats=true was specified in the request this field will contain information about the document payload. */
  statistics?: DocumentStatistics;
}

export interface DetectedLanguage {
  /** Long name of a detected language (e.g. English, French). */
  name: string;
  /** A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr). */
  iso6391Name: string;
  /** A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. */
  confidenceScore: number;
}

export interface TextAnalyticsWarning {
  /** Error code. */
  code: WarningCodeValue;
  /** Warning message. */
  message: string;
  /** A JSON pointer reference indicating the target object. */
  targetRef?: string;
}

/** if showStats=true was specified in the request this field will contain information about the document payload. */
export interface DocumentStatistics {
  /** Number of text elements recognized in the document. */
  charactersCount: number;
  /** Number of transactions for the document. */
  transactionsCount: number;
}

export interface DocumentError {
  /** Document Id. */
  id: string;
  /** Document Error. */
  error: TextAnalyticsError;
}

export interface TextAnalyticsError {
  /** Error code. */
  code: ErrorCodeValue;
  /** Error message. */
  message: string;
  /** Error target. */
  target?: string;
  /** Inner error contains more specific information. */
  innererror?: InnerError;
  /** Details about specific errors that led to this reported error. */
  details?: TextAnalyticsError[];
}

export interface InnerError {
  /** Error code. */
  code: InnerErrorCodeValue;
  /** Error message. */
  message: string;
  /** Error details. */
  details?: { [propertyName: string]: string };
  /** Error target. */
  target?: string;
  /** Inner error contains more specific information. */
  innererror?: InnerError;
}

/** if showStats=true was specified in the request this field will contain information about the request payload. */
export interface RequestStatistics {
  /** Number of documents submitted in the request. */
  documentsCount: number;
  /** Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. */
  validDocumentsCount: number;
  /** Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. */
  erroneousDocumentsCount: number;
  /** Number of transactions for the request. */
  transactionsCount: number;
}

export interface ErrorResponse {
  /** Document Error. */
  error: TextAnalyticsError;
}

/** Contains a set of input documents to be analyzed by the service. */
export interface MultiLanguageBatchInput {
  /** The set of documents to process as part of this batch. */
  documents: MultiLanguageInput[];
}

/** Contains an input document to be analyzed by the service. */
export interface MultiLanguageInput {
  /** A unique, non-empty document identifier. */
  id: string;
  /** The input text to process. */
  text: string;
  /** (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default. */
  language?: string;
}

/** Known values of {@link WarningCodeValue} that the service accepts. */
export enum KnownWarningCodeValue {
  /** LongWordsInDocument */
  LongWordsInDocument = "LongWordsInDocument",
  /** DocumentTruncated */
  DocumentTruncated = "DocumentTruncated",
}

/**
 * Defines values for WarningCodeValue. \
 * {@link KnownWarningCodeValue} can be used interchangeably with WarningCodeValue,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LongWordsInDocument** \
 * **DocumentTruncated**
 */
export type WarningCodeValue = string;

/** Known values of {@link InnerErrorCodeValue} that the service accepts. */
export enum KnownInnerErrorCodeValue {
  /** InvalidParameterValue */
  InvalidParameterValue = "InvalidParameterValue",
  /** InvalidRequestBodyFormat */
  InvalidRequestBodyFormat = "InvalidRequestBodyFormat",
  /** EmptyRequest */
  EmptyRequest = "EmptyRequest",
  /** MissingInputRecords */
  MissingInputRecords = "MissingInputRecords",
  /** InvalidDocument */
  InvalidDocument = "InvalidDocument",
  /** ModelVersionIncorrect */
  ModelVersionIncorrect = "ModelVersionIncorrect",
  /** InvalidDocumentBatch */
  InvalidDocumentBatch = "InvalidDocumentBatch",
  /** UnsupportedLanguageCode */
  UnsupportedLanguageCode = "UnsupportedLanguageCode",
  /** InvalidCountryHint */
  InvalidCountryHint = "InvalidCountryHint",
}

/**
 * Defines values for InnerErrorCodeValue. \
 * {@link KnownInnerErrorCodeValue} can be used interchangeably with InnerErrorCodeValue,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvalidParameterValue** \
 * **InvalidRequestBodyFormat** \
 * **EmptyRequest** \
 * **MissingInputRecords** \
 * **InvalidDocument** \
 * **ModelVersionIncorrect** \
 * **InvalidDocumentBatch** \
 * **UnsupportedLanguageCode** \
 * **InvalidCountryHint**
 */
export type InnerErrorCodeValue = string;
/** Defines values for ErrorCodeValue. */
export type ErrorCodeValue =
  | "InvalidRequest"
  | "InvalidArgument"
  | "InternalServerError"
  | "ServiceUnavailable"
  | "NotFound";

/** Optional parameters. */
export interface LanguagesOptionalParams extends coreClient.OperationOptions {
  /** (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. */
  modelVersion?: string;
  /** (Optional) if set to true, response will contain request and document level statistics. */
  showStats?: boolean;
  /** (Optional) If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics logs your input text for 48 hours, solely to allow for troubleshooting issues in providing you with the Text Analytics natural language processing functions. Setting this parameter to true, disables input logging and may limit our ability to remediate issues that occur.  Please see Cognitive Services Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details, and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai. */
  loggingOptOut?: boolean;
}

/** Contains response data for the languages operation. */
export type LanguagesResponse = LanguageResult;

/** Optional parameters. */
export interface GeneratedClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Text Analytics API version (for example, v3.0). */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
