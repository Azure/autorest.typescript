/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { tracingClient } from "./tracing";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  MediaTypesWithTracingClientOptionalParams,
  ContentType,
  AnalyzeBody$binaryOptionalParams,
  AnalyzeBody$jsonOptionalParams,
  AnalyzeBodyResponse,
  AnalyzeBodyNoAcceptHeader$binaryOptionalParams,
  AnalyzeBodyNoAcceptHeader$jsonOptionalParams,
  ContentTypeWithEncodingOptionalParams,
  ContentTypeWithEncodingResponse,
  BinaryBodyWithTwoContentTypesOptionalParams,
  BinaryBodyWithTwoContentTypesResponse,
  ContentType1,
  BinaryBodyWithThreeContentTypes$binaryOptionalParams,
  BinaryBodyWithThreeContentTypes$textOptionalParams,
  BinaryBodyWithThreeContentTypesResponse,
  BodyThreeTypes$binaryOptionalParams,
  BodyThreeTypes$textOptionalParams,
  BodyThreeTypes$jsonOptionalParams,
  BodyThreeTypesResponse,
  PutTextAndJsonBody$textOptionalParams,
  PutTextAndJsonBody$jsonOptionalParams,
  PutTextAndJsonBodyResponse,
} from "./models";

export class MediaTypesWithTracingClient extends coreClient.ServiceClient {
  $host: string;

  /**
   * Initializes a new instance of the MediaTypesWithTracingClient class.
   * @param options The parameter options
   */
  constructor(options?: MediaTypesWithTracingClientOptionalParams) {
    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: MediaTypesWithTracingClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
    };

    const packageDetails = `azsdk-js-media-types-service-tracing/1.0.0-preview1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint: options.endpoint ?? options.baseUri ?? "http://localhost:3000",
    };
    super(optionsWithDefaults);

    // Assigning values to Constant parameters
    this.$host = options.$host || "http://localhost:3000";
  }

  /**
   * Analyze body, that could be different media types.
   * @param contentType Upload file type
   * @param options The options parameters.
   */
  analyzeBody(
    contentType: ContentType,
    options?: AnalyzeBody$binaryOptionalParams,
  ): Promise<AnalyzeBodyResponse>;
  /**
   * Analyze body, that could be different media types.
   * @param contentType Body Parameter content-type
   * @param options The options parameters.
   */
  analyzeBody(
    contentType: "application/json",
    options?: AnalyzeBody$jsonOptionalParams,
  ): Promise<AnalyzeBodyResponse>;
  /**
   * Analyze body, that could be different media types.
   * @param args Includes all the parameters for this operation.
   */
  async analyzeBody(
    ...args:
      | [ContentType, AnalyzeBody$binaryOptionalParams?]
      | ["application/json", AnalyzeBody$jsonOptionalParams?]
  ): Promise<AnalyzeBodyResponse> {
    let operationSpec: coreClient.OperationSpec;
    let operationArguments: coreClient.OperationArguments;
    let options;
    if (
      args[0] === "application/pdf" ||
      args[0] === "image/jpeg" ||
      args[0] === "image/png" ||
      args[0] === "image/tiff"
    ) {
      operationSpec = analyzeBody$binaryOperationSpec;
      operationArguments = { contentType: args[0], options: args[1] };
      options = args[1];
    } else if (args[0] === "application/json") {
      operationSpec = analyzeBody$jsonOperationSpec;
      operationArguments = { contentType: args[0], options: args[1] };
      options = args[1];
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[0]}".`,
      );
    }
    operationArguments.options = options || {};

    return tracingClient.withSpan(
      "MediaTypesWithTracingClient.analyzeBody",
      options ?? {},
      async () => {
        return this.sendOperationRequest(
          operationArguments,
          operationSpec,
        ) as Promise<AnalyzeBodyResponse>;
      },
    );
  }

  /**
   * Analyze body, that could be different media types. Adds to AnalyzeBody by not having an accept type.
   * @param contentType Upload file type
   * @param options The options parameters.
   */
  analyzeBodyNoAcceptHeader(
    contentType: ContentType,
    options?: AnalyzeBodyNoAcceptHeader$binaryOptionalParams,
  ): Promise<void>;
  /**
   * Analyze body, that could be different media types. Adds to AnalyzeBody by not having an accept type.
   * @param contentType Body Parameter content-type
   * @param options The options parameters.
   */
  analyzeBodyNoAcceptHeader(
    contentType: "application/json",
    options?: AnalyzeBodyNoAcceptHeader$jsonOptionalParams,
  ): Promise<void>;
  /**
   * Analyze body, that could be different media types. Adds to AnalyzeBody by not having an accept type.
   * @param args Includes all the parameters for this operation.
   */
  async analyzeBodyNoAcceptHeader(
    ...args:
      | [ContentType, AnalyzeBodyNoAcceptHeader$binaryOptionalParams?]
      | ["application/json", AnalyzeBodyNoAcceptHeader$jsonOptionalParams?]
  ): Promise<void> {
    let operationSpec: coreClient.OperationSpec;
    let operationArguments: coreClient.OperationArguments;
    let options;
    if (
      args[0] === "application/pdf" ||
      args[0] === "image/jpeg" ||
      args[0] === "image/png" ||
      args[0] === "image/tiff"
    ) {
      operationSpec = analyzeBodyNoAcceptHeader$binaryOperationSpec;
      operationArguments = { contentType: args[0], options: args[1] };
      options = args[1];
    } else if (args[0] === "application/json") {
      operationSpec = analyzeBodyNoAcceptHeader$jsonOperationSpec;
      operationArguments = { contentType: args[0], options: args[1] };
      options = args[1];
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[0]}".`,
      );
    }
    operationArguments.options = options || {};

    return tracingClient.withSpan(
      "MediaTypesWithTracingClient.analyzeBodyNoAcceptHeader",
      options ?? {},
      async () => {
        return this.sendOperationRequest(
          operationArguments,
          operationSpec,
        ) as Promise<void>;
      },
    );
  }

  /**
   * Pass in contentType 'text/plain; charset=UTF-8' to pass test. Value for input does not matter
   * @param options The options parameters.
   */
  async contentTypeWithEncoding(
    options?: ContentTypeWithEncodingOptionalParams,
  ): Promise<ContentTypeWithEncodingResponse> {
    return tracingClient.withSpan(
      "MediaTypesWithTracingClient.contentTypeWithEncoding",
      options ?? {},
      async (options) => {
        return this.sendOperationRequest(
          { options },
          contentTypeWithEncodingOperationSpec,
        ) as Promise<ContentTypeWithEncodingResponse>;
      },
    );
  }

  /**
   * Binary body with two content types. Pass in of {'hello': 'world'} for the application/json content
   * type, and a byte stream of 'hello, world!' for application/octet-stream.
   * @param message The payload body.
   * @param options The options parameters.
   */
  async binaryBodyWithTwoContentTypes(
    message: coreRestPipeline.RequestBodyType,
    options?: BinaryBodyWithTwoContentTypesOptionalParams,
  ): Promise<BinaryBodyWithTwoContentTypesResponse> {
    return tracingClient.withSpan(
      "MediaTypesWithTracingClient.binaryBodyWithTwoContentTypes",
      options ?? {},
      async (options) => {
        return this.sendOperationRequest(
          { message, options },
          binaryBodyWithTwoContentTypesOperationSpec,
        ) as Promise<BinaryBodyWithTwoContentTypesResponse>;
      },
    );
  }

  /**
   * Binary body with three content types. Pass in string 'hello, world' with content type 'text/plain',
   * {'hello': world'} with content type 'application/json' and a byte string for
   * 'application/octet-stream'.
   * @param contentType Upload file type
   * @param message The payload body.
   * @param options The options parameters.
   */
  binaryBodyWithThreeContentTypes(
    contentType: ContentType1,
    message: coreRestPipeline.RequestBodyType,
    options?: BinaryBodyWithThreeContentTypes$binaryOptionalParams,
  ): Promise<BinaryBodyWithThreeContentTypesResponse>;
  /**
   * Binary body with three content types. Pass in string 'hello, world' with content type 'text/plain',
   * {'hello': world'} with content type 'application/json' and a byte string for
   * 'application/octet-stream'.
   * @param contentType Upload file type
   * @param message The payload body.
   * @param options The options parameters.
   */
  binaryBodyWithThreeContentTypes(
    contentType: "text/plain",
    message: string,
    options?: BinaryBodyWithThreeContentTypes$textOptionalParams,
  ): Promise<BinaryBodyWithThreeContentTypesResponse>;
  /**
   * Binary body with three content types. Pass in string 'hello, world' with content type 'text/plain',
   * {'hello': world'} with content type 'application/json' and a byte string for
   * 'application/octet-stream'.
   * @param args Includes all the parameters for this operation.
   */
  async binaryBodyWithThreeContentTypes(
    ...args:
      | [
          ContentType1,
          coreRestPipeline.RequestBodyType,
          BinaryBodyWithThreeContentTypes$binaryOptionalParams?,
        ]
      | [
          "text/plain",
          string,
          BinaryBodyWithThreeContentTypes$textOptionalParams?,
        ]
  ): Promise<BinaryBodyWithThreeContentTypesResponse> {
    let operationSpec: coreClient.OperationSpec;
    let operationArguments: coreClient.OperationArguments;
    let options;
    if (
      args[0] === "application/json" ||
      args[0] === "application/octet-stream"
    ) {
      operationSpec = binaryBodyWithThreeContentTypes$binaryOperationSpec;
      operationArguments = {
        contentType: args[0],
        message: args[1],
        options: args[2],
      };
      options = args[2];
    } else if (args[0] === "text/plain") {
      operationSpec = binaryBodyWithThreeContentTypes$textOperationSpec;
      operationArguments = {
        contentType: args[0],
        message: args[1],
        options: args[2],
      };
      options = args[2];
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[0]}".`,
      );
    }
    operationArguments.options = options || {};

    return tracingClient.withSpan(
      "MediaTypesWithTracingClient.binaryBodyWithThreeContentTypes",
      options ?? {},
      async () => {
        return this.sendOperationRequest(
          operationArguments,
          operationSpec,
        ) as Promise<BinaryBodyWithThreeContentTypesResponse>;
      },
    );
  }

  /**
   * Body with three types. Can be stream, string, or JSON. Pass in string 'hello, world' with content
   * type 'text/plain', {'hello': world'} with content type 'application/json' and a byte string for
   * 'application/octet-stream'.
   * @param contentType Upload file type
   * @param message The payload body.
   * @param options The options parameters.
   */
  bodyThreeTypes(
    contentType: "application/octet-stream",
    message: coreRestPipeline.RequestBodyType,
    options?: BodyThreeTypes$binaryOptionalParams,
  ): Promise<BodyThreeTypesResponse>;
  /**
   * Body with three types. Can be stream, string, or JSON. Pass in string 'hello, world' with content
   * type 'text/plain', {'hello': world'} with content type 'application/json' and a byte string for
   * 'application/octet-stream'.
   * @param contentType Upload file type
   * @param message The payload body.
   * @param options The options parameters.
   */
  bodyThreeTypes(
    contentType: "text/plain",
    message: string,
    options?: BodyThreeTypes$textOptionalParams,
  ): Promise<BodyThreeTypesResponse>;
  /**
   * Body with three types. Can be stream, string, or JSON. Pass in string 'hello, world' with content
   * type 'text/plain', {'hello': world'} with content type 'application/json' and a byte string for
   * 'application/octet-stream'.
   * @param contentType Body Parameter content-type
   * @param message The payload body.
   * @param options The options parameters.
   */
  bodyThreeTypes(
    contentType: "application/json",
    message: any,
    options?: BodyThreeTypes$jsonOptionalParams,
  ): Promise<BodyThreeTypesResponse>;
  /**
   * Body with three types. Can be stream, string, or JSON. Pass in string 'hello, world' with content
   * type 'text/plain', {'hello': world'} with content type 'application/json' and a byte string for
   * 'application/octet-stream'.
   * @param args Includes all the parameters for this operation.
   */
  async bodyThreeTypes(
    ...args:
      | [
          "application/octet-stream",
          coreRestPipeline.RequestBodyType,
          BodyThreeTypes$binaryOptionalParams?,
        ]
      | ["text/plain", string, BodyThreeTypes$textOptionalParams?]
      | ["application/json", any, BodyThreeTypes$jsonOptionalParams?]
  ): Promise<BodyThreeTypesResponse> {
    let operationSpec: coreClient.OperationSpec;
    let operationArguments: coreClient.OperationArguments;
    let options;
    if (args[0] === "application/octet-stream") {
      operationSpec = bodyThreeTypes$binaryOperationSpec;
      operationArguments = {
        contentType: args[0],
        message: args[1],
        options: args[2],
      };
      options = args[2];
    } else if (args[0] === "text/plain") {
      operationSpec = bodyThreeTypes$textOperationSpec;
      operationArguments = {
        contentType: args[0],
        message: args[1],
        options: args[2],
      };
      options = args[2];
    } else if (args[0] === "application/json") {
      operationSpec = bodyThreeTypes$jsonOperationSpec;
      operationArguments = {
        contentType: args[0],
        message: args[1],
        options: args[2],
      };
      options = args[2];
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[0]}".`,
      );
    }
    operationArguments.options = options || {};

    return tracingClient.withSpan(
      "MediaTypesWithTracingClient.bodyThreeTypes",
      options ?? {},
      async () => {
        return this.sendOperationRequest(
          operationArguments,
          operationSpec,
        ) as Promise<BodyThreeTypesResponse>;
      },
    );
  }

  /**
   * Body that's either text/plain or application/json
   * @param contentType Upload file type
   * @param message The payload body.
   * @param options The options parameters.
   */
  putTextAndJsonBody(
    contentType: "text/plain",
    message: string,
    options?: PutTextAndJsonBody$textOptionalParams,
  ): Promise<PutTextAndJsonBodyResponse>;
  /**
   * Body that's either text/plain or application/json
   * @param contentType Body Parameter content-type
   * @param message The payload body.
   * @param options The options parameters.
   */
  putTextAndJsonBody(
    contentType: "application/json",
    message: string,
    options?: PutTextAndJsonBody$jsonOptionalParams,
  ): Promise<PutTextAndJsonBodyResponse>;
  /**
   * Body that's either text/plain or application/json
   * @param args Includes all the parameters for this operation.
   */
  async putTextAndJsonBody(
    ...args:
      | ["text/plain", string, PutTextAndJsonBody$textOptionalParams?]
      | ["application/json", string, PutTextAndJsonBody$jsonOptionalParams?]
  ): Promise<PutTextAndJsonBodyResponse> {
    let operationSpec: coreClient.OperationSpec;
    let operationArguments: coreClient.OperationArguments;
    let options;
    if (args[0] === "text/plain") {
      operationSpec = putTextAndJsonBody$textOperationSpec;
      operationArguments = {
        contentType: args[0],
        message: args[1],
        options: args[2],
      };
      options = args[2];
    } else if (args[0] === "application/json") {
      operationSpec = putTextAndJsonBody$jsonOperationSpec;
      operationArguments = {
        contentType: args[0],
        message: args[1],
        options: args[2],
      };
      options = args[2];
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[0]}".`,
      );
    }
    operationArguments.options = options || {};

    return tracingClient.withSpan(
      "MediaTypesWithTracingClient.putTextAndJsonBody",
      options ?? {},
      async () => {
        return this.sendOperationRequest(
          operationArguments,
          operationSpec,
        ) as Promise<PutTextAndJsonBodyResponse>;
      },
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const analyzeBody$binaryOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/analyze",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.input,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "binary",
  serializer,
};
const analyzeBody$jsonOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/analyze",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.input1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "json",
  serializer,
};
const analyzeBodyNoAcceptHeader$binaryOperationSpec: coreClient.OperationSpec =
  {
    path: "/mediatypes/analyzeNoAccept",
    httpMethod: "POST",
    responses: { 202: {}, default: {} },
    requestBody: Parameters.input,
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.contentType],
    mediaType: "binary",
    serializer,
  };
const analyzeBodyNoAcceptHeader$jsonOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/analyzeNoAccept",
  httpMethod: "POST",
  responses: { 202: {}, default: {} },
  requestBody: Parameters.input1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType1],
  mediaType: "json",
  serializer,
};
const contentTypeWithEncodingOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/contentTypeWithEncoding",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.input2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType2, Parameters.accept2],
  mediaType: "text",
  serializer,
};
const binaryBodyWithTwoContentTypesOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/binaryBodyTwoContentTypes",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.message,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType3, Parameters.accept3],
  mediaType: "binary",
  serializer,
};
const binaryBodyWithThreeContentTypes$binaryOperationSpec: coreClient.OperationSpec =
  {
    path: "/mediatypes/binaryBodyThreeContentTypes",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: { type: { name: "String" } },
      },
    },
    requestBody: Parameters.message,
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept3, Parameters.contentType4],
    mediaType: "binary",
    serializer,
  };
const binaryBodyWithThreeContentTypes$textOperationSpec: coreClient.OperationSpec =
  {
    path: "/mediatypes/binaryBodyThreeContentTypes",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: { type: { name: "String" } },
      },
    },
    requestBody: Parameters.message1,
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.contentType5, Parameters.accept4],
    mediaType: "text",
    serializer,
  };
const bodyThreeTypes$binaryOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/bodyThreeTypes",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.message,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept3, Parameters.contentType6],
  mediaType: "binary",
  serializer,
};
const bodyThreeTypes$textOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/bodyThreeTypes",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.message1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType5, Parameters.accept4],
  mediaType: "text",
  serializer,
};
const bodyThreeTypes$jsonOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/bodyThreeTypes",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.message2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType1, Parameters.accept5],
  mediaType: "json",
  serializer,
};
const putTextAndJsonBody$textOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/textAndJson",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.message1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType5, Parameters.accept4],
  mediaType: "text",
  serializer,
};
const putTextAndJsonBody$jsonOperationSpec: coreClient.OperationSpec = {
  path: "/mediatypes/textAndJson",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
  },
  requestBody: Parameters.message3,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType1, Parameters.accept5],
  mediaType: "json",
  serializer,
};
