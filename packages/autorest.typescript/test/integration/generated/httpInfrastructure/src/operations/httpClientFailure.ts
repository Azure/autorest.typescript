/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { HttpClientFailure } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HttpInfrastructureClient } from "../httpInfrastructureClient";
import {
  HttpClientFailureHead400OptionalParams,
  HttpClientFailureGet400OptionalParams,
  HttpClientFailureOptions400OptionalParams,
  HttpClientFailurePut400OptionalParams,
  HttpClientFailurePatch400OptionalParams,
  HttpClientFailurePost400OptionalParams,
  HttpClientFailureDelete400OptionalParams,
  HttpClientFailureHead401OptionalParams,
  HttpClientFailureGet402OptionalParams,
  HttpClientFailureOptions403OptionalParams,
  HttpClientFailureGet403OptionalParams,
  HttpClientFailurePut404OptionalParams,
  HttpClientFailurePatch405OptionalParams,
  HttpClientFailurePost406OptionalParams,
  HttpClientFailureDelete407OptionalParams,
  HttpClientFailurePut409OptionalParams,
  HttpClientFailureHead410OptionalParams,
  HttpClientFailureGet411OptionalParams,
  HttpClientFailureOptions412OptionalParams,
  HttpClientFailureGet412OptionalParams,
  HttpClientFailurePut413OptionalParams,
  HttpClientFailurePatch414OptionalParams,
  HttpClientFailurePost415OptionalParams,
  HttpClientFailureGet416OptionalParams,
  HttpClientFailureDelete417OptionalParams,
  HttpClientFailureHead429OptionalParams,
} from "../models";

/** Class containing HttpClientFailure operations. */
export class HttpClientFailureImpl implements HttpClientFailure {
  private readonly client: HttpInfrastructureClient;

  /**
   * Initialize a new instance of the class HttpClientFailure class.
   * @param client Reference to the service client
   */
  constructor(client: HttpInfrastructureClient) {
    this.client = client;
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head400(options?: HttpClientFailureHead400OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, head400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get400(options?: HttpClientFailureGet400OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, get400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options400(
    options?: HttpClientFailureOptions400OptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { options },
      options400OperationSpec,
    );
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put400(options?: HttpClientFailurePut400OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, put400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch400(options?: HttpClientFailurePatch400OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, patch400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post400(options?: HttpClientFailurePost400OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, post400OperationSpec);
  }

  /**
   * Return 400 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete400(options?: HttpClientFailureDelete400OptionalParams): Promise<void> {
    return this.client.sendOperationRequest(
      { options },
      delete400OperationSpec,
    );
  }

  /**
   * Return 401 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head401(options?: HttpClientFailureHead401OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, head401OperationSpec);
  }

  /**
   * Return 402 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get402(options?: HttpClientFailureGet402OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, get402OperationSpec);
  }

  /**
   * Return 403 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options403(
    options?: HttpClientFailureOptions403OptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { options },
      options403OperationSpec,
    );
  }

  /**
   * Return 403 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get403(options?: HttpClientFailureGet403OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, get403OperationSpec);
  }

  /**
   * Return 404 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put404(options?: HttpClientFailurePut404OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, put404OperationSpec);
  }

  /**
   * Return 405 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch405(options?: HttpClientFailurePatch405OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, patch405OperationSpec);
  }

  /**
   * Return 406 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post406(options?: HttpClientFailurePost406OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, post406OperationSpec);
  }

  /**
   * Return 407 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete407(options?: HttpClientFailureDelete407OptionalParams): Promise<void> {
    return this.client.sendOperationRequest(
      { options },
      delete407OperationSpec,
    );
  }

  /**
   * Return 409 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put409(options?: HttpClientFailurePut409OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, put409OperationSpec);
  }

  /**
   * Return 410 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head410(options?: HttpClientFailureHead410OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, head410OperationSpec);
  }

  /**
   * Return 411 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get411(options?: HttpClientFailureGet411OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, get411OperationSpec);
  }

  /**
   * Return 412 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  options412(
    options?: HttpClientFailureOptions412OptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { options },
      options412OperationSpec,
    );
  }

  /**
   * Return 412 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get412(options?: HttpClientFailureGet412OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, get412OperationSpec);
  }

  /**
   * Return 413 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  put413(options?: HttpClientFailurePut413OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, put413OperationSpec);
  }

  /**
   * Return 414 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  patch414(options?: HttpClientFailurePatch414OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, patch414OperationSpec);
  }

  /**
   * Return 415 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  post415(options?: HttpClientFailurePost415OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, post415OperationSpec);
  }

  /**
   * Return 416 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  get416(options?: HttpClientFailureGet416OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, get416OperationSpec);
  }

  /**
   * Return 417 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  delete417(options?: HttpClientFailureDelete417OptionalParams): Promise<void> {
    return this.client.sendOperationRequest(
      { options },
      delete417OperationSpec,
    );
  }

  /**
   * Return 429 status code - should be represented in the client as an error
   * @param options The options parameters.
   */
  head429(options?: HttpClientFailureHead429OptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, head429OperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const head400OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "HEAD",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const get400OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const options400OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "OPTIONS",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const put400OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const patch400OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "PATCH",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const post400OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "POST",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const delete400OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/400",
  httpMethod: "DELETE",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const head401OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/401",
  httpMethod: "HEAD",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const get402OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/402",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const options403OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/403",
  httpMethod: "OPTIONS",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const get403OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/403",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const put404OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/404",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const patch405OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/405",
  httpMethod: "PATCH",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const post406OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/406",
  httpMethod: "POST",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const delete407OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/407",
  httpMethod: "DELETE",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const put409OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/409",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const head410OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/410",
  httpMethod: "HEAD",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const get411OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/411",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const options412OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/412",
  httpMethod: "OPTIONS",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const get412OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/412",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const put413OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/413",
  httpMethod: "PUT",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const patch414OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/414",
  httpMethod: "PATCH",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const post415OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/415",
  httpMethod: "POST",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const get416OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/416",
  httpMethod: "GET",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const delete417OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/417",
  httpMethod: "DELETE",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  requestBody: Parameters.booleanValue,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const head429OperationSpec: coreClient.OperationSpec = {
  path: "/http/failure/client/429",
  httpMethod: "HEAD",
  responses: {
    default: {
      bodyMapper: Mappers.ErrorModel,
    },
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
