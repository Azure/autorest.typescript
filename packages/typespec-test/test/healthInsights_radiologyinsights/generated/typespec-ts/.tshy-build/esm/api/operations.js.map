{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../src/api/operations.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AAE3D,OAAO,EACL,uBAAuB,EACvB,6CAA6C,GAG9C,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,0CAA0C,EAAE,MAAM,6BAA6B,CAAC;AACzF,OAAO,EACL,YAAY,GAKb,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAEL,mCAAmC,EACnC,eAAe,GAChB,MAAM,yBAAyB,CAAC;AAGjC,MAAM,UAAU,2BAA2B,CACzC,OAAe,EACf,IAA2B,EAC3B,UAAgD,EAAE,cAAc,EAAE,EAAE,EAAE;IAItE,OAAO,OAAO;SACX,IAAI,CAAC,0BAA0B,CAAC;SAChC,IAAI,CAAC;QACJ,GAAG,mCAAmC,CAAC,OAAO,CAAC;QAC/C,OAAO,EAAE;YACP,GAAG,CAAC,OAAO,EAAE,sBAAsB,KAAK,SAAS;gBAC/C,CAAC,CAAC,EAAE,0BAA0B,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACjE,CAAC,CAAC,EAAE,CAAC;YACP,GAAG,CAAC,OAAO,EAAE,sBAAsB,KAAK,SAAS;gBAC/C,CAAC,CAAC;oBACE,0BAA0B,EACxB,OAAO,EAAE,sBAAsB,EAAE,WAAW,EAAE;iBACjD;gBACH,CAAC,CAAC,EAAE,CAAC;SACR;QACD,IAAI,EAAE;YACJ,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,uBAAuB,CAAC;YACvD,aAAa,EAAE,CAAC,IAAI,CAAC,aAAa;gBAChC,CAAC,CAAC,IAAI,CAAC,aAAa;gBACpB,CAAC,CAAC,6CAA6C,CAAC,IAAI,CAAC,aAAa,CAAC;SACtE;KACF,CAAC,CAAC;AACP,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kCAAkC,CACtD,MAG4B;IAE5B,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,MAAM,GAAG,MAAkC,CAAC;IAC5C,IAAI,MAAM,EAAE,IAAI,EAAE,MAAM,KAAK,SAAS,EAAE,CAAC;QACvC,MAAM,eAAe,CACnB,oEAAoE,EACpE,MAAM,CACP,CAAC;IACJ,CAAC;IAED,OAAO;QACL,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/D,SAAS,EAAE,CAAC,CAAC,WAAW,CAAC;YACzB,UAAU,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACpC,0CAA0C,CAAC,CAAC,CAAC,CAC9C;SACF,CAAC,CAAC;QACH,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;KACjD,CAAC;AACJ,CAAC;AAED,oEAAoE;AACpE,MAAM,UAAU,sBAAsB,CACpC,OAAe,EACf,IAA2B,EAC3B,UAAgD,EAAE,cAAc,EAAE,EAAE,EAAE;IAKtE,OAAO,oBAAoB,CAAC,OAAO,EAAE,kCAAkC,EAAE;QACvE,kBAAkB,EAAE,OAAO,EAAE,kBAAkB;QAC/C,WAAW,EAAE,OAAO,EAAE,WAAW;QACjC,kBAAkB,EAAE,GAAG,EAAE,CACvB,2BAA2B,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC;KACtD,CAGA,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getLongRunningPoller } from \"./pollingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  patientRecordSerializer,\n  radiologyInsightsModelConfigurationSerializer,\n  RadiologyInsightsData,\n  RadiologyInsightsInferenceResult,\n} from \"../models/models.js\";\nimport { deserializeRadiologyInsightsInferenceUnion } from \"../utils/deserializeUtil.js\";\nimport {\n  isUnexpected,\n  AzureHealthInsightsContext as Client,\n  CreateJob202Response,\n  CreateJobDefaultResponse,\n  CreateJobLogicalResponse,\n} from \"../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport { InferRadiologyInsightsOptionalParams } from \"../models/options.js\";\n\nexport function _inferRadiologyInsightsSend(\n  context: Client,\n  body: RadiologyInsightsData,\n  options: InferRadiologyInsightsOptionalParams = { requestOptions: {} },\n): StreamableMethod<\n  CreateJob202Response | CreateJobDefaultResponse | CreateJobLogicalResponse\n> {\n  return context\n    .path(\"/radiology-insights/jobs\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        ...(options?.repeatabilityRequestId !== undefined\n          ? { \"Repeatability-Request-ID\": options?.repeatabilityRequestId }\n          : {}),\n        ...(options?.repeatabilityFirstSent !== undefined\n          ? {\n              \"Repeatability-First-Sent\":\n                options?.repeatabilityFirstSent?.toUTCString(),\n            }\n          : {}),\n      },\n      body: {\n        patients: body[\"patients\"].map(patientRecordSerializer),\n        configuration: !body.configuration\n          ? body.configuration\n          : radiologyInsightsModelConfigurationSerializer(body.configuration),\n      },\n    });\n}\n\nexport async function _inferRadiologyInsightsDeserialize(\n  result:\n    | CreateJob202Response\n    | CreateJobDefaultResponse\n    | CreateJobLogicalResponse,\n): Promise<RadiologyInsightsInferenceResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  result = result as CreateJobLogicalResponse;\n  if (result?.body?.result === undefined) {\n    throw createRestError(\n      `Expected a result in the response at position \"result.body.result\"`,\n      result,\n    );\n  }\n\n  return {\n    patientResults: result.body.result[\"patientResults\"].map((p) => ({\n      patientId: p[\"patientId\"],\n      inferences: p[\"inferences\"].map((p) =>\n        deserializeRadiologyInsightsInferenceUnion(p),\n      ),\n    })),\n    modelVersion: result.body.result[\"modelVersion\"],\n  };\n}\n\n/** Creates a Radiology Insights job with the given request body. */\nexport function inferRadiologyInsights(\n  context: Client,\n  body: RadiologyInsightsData,\n  options: InferRadiologyInsightsOptionalParams = { requestOptions: {} },\n): PollerLike<\n  OperationState<RadiologyInsightsInferenceResult>,\n  RadiologyInsightsInferenceResult\n> {\n  return getLongRunningPoller(context, _inferRadiologyInsightsDeserialize, {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _inferRadiologyInsightsSend(context, body, options),\n  }) as PollerLike<\n    OperationState<RadiologyInsightsInferenceResult>,\n    RadiologyInsightsInferenceResult\n  >;\n}\n"]}