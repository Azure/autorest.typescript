{"version":3,"file":"restorePollerHelpers.js","sourceRoot":"","sources":["../../src/restorePollerHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PollerLike,\n  OperationState,\n  deserializeState,\n  ResourceLocationConfig,\n} from \"@azure/core-lro\";\nimport { AzureHealthInsightsContext } from \"./api/radiologyInsightsContext.js\";\nimport { RadiologyInsightsClient } from \"./radiologyInsightsClient.js\";\nimport { getLongRunningPoller } from \"./api/pollingHelpers.js\";\nimport { _inferRadiologyInsightsDeserialize } from \"./api/operations.js\";\nimport {\n  PathUncheckedResponse,\n  OperationOptions,\n} from \"@azure-rest/core-client\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\nexport interface RestorePollerOptions<\n  TResult,\n  TResponse extends PathUncheckedResponse = PathUncheckedResponse,\n> extends OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /** Deserialization function for raw response body */\n  processResponseBody?: (result: TResponse) => PromiseLike<TResult>;\n}\n\n/**\n * Creates a poller from the serialized state of another poller. This can be\n * useful when you want to create pollers on a different host or a poller\n * needs to be constructed after the original one is not in scope.\n */\nexport function restorePoller<TResponse extends PathUncheckedResponse, TResult>(\n  client: AzureHealthInsightsContext | RadiologyInsightsClient,\n  serializedState: string,\n  sourceOperation: (\n    ...args: any[]\n  ) => PollerLike<OperationState<TResult>, TResult>,\n  options?: RestorePollerOptions<TResult>,\n): PollerLike<OperationState<TResult>, TResult> {\n  const pollerConfig = deserializeState(serializedState).config;\n  const { initialUrl, requestMethod, metadata } = pollerConfig;\n  if (!initialUrl || !requestMethod) {\n    throw new Error(\n      `Invalid serialized state: ${serializedState} for sourceOperation ${sourceOperation?.name}`,\n    );\n  }\n  const resourceLocationConfig = metadata?.[\"resourceLocationConfig\"] as\n    | ResourceLocationConfig\n    | undefined;\n  const deserializeHelper =\n    options?.processResponseBody ??\n    getDeserializationHelper(initialUrl, requestMethod);\n  if (!deserializeHelper) {\n    throw new Error(\n      `Please ensure the operation is in this client! We can't find its deserializeHelper for ${sourceOperation?.name}.`,\n    );\n  }\n  return getLongRunningPoller(\n    (client as any)[\"_client\"] ?? client,\n    deserializeHelper as (result: TResponse) => PromiseLike<TResult>,\n    {\n      updateIntervalInMs: options?.updateIntervalInMs,\n      abortSignal: options?.abortSignal,\n      resourceLocationConfig,\n      restoreFrom: serializedState,\n      initialUrl,\n    },\n  );\n}\n\nconst deserializeMap: Record<string, Function> = {\n  \"POST /radiology-insights/jobs\": _inferRadiologyInsightsDeserialize,\n};\n\nfunction getDeserializationHelper(\n  urlStr: string,\n  method: string,\n): ((result: unknown) => PromiseLike<unknown>) | undefined {\n  const path = new URL(urlStr).pathname;\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: ((result: unknown) => PromiseLike<unknown>) | undefined;\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(deserializeMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (\n      let i = candidateParts.length - 1, j = pathParts.length - 1;\n      i >= 1 && j >= 1;\n      i--, j--\n    ) {\n      if (\n        candidateParts[i]?.startsWith(\"{\") &&\n        candidateParts[i]?.indexOf(\"}\") !== -1\n      ) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(\n          `${candidateParts[i]?.slice(start, end)}`,\n        ).test(pathParts[j] || \"\");\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value as (result: unknown) => PromiseLike<unknown>;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n"]}