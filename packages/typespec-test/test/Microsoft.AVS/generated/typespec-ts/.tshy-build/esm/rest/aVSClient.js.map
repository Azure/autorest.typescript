{"version":3,"file":"aVSClient.js","sourceRoot":"","sources":["../../../src/rest/aVSClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,SAAS,EAAiB,MAAM,yBAAyB,CAAC;AACnE,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAItC;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,YAAY,CAClC,WAA4B,EAC5B,UAAyB,EAAE;IAE3B,MAAM,WAAW,GACf,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,OAAO,IAAI,8BAA8B,CAAC;IACxE,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,YAAY,CAAC;IACxD,MAAM,aAAa,GAAG,oCAAoC,CAAC;IAC3D,MAAM,eAAe,GACnB,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,CAAC,eAAe;QAClE,CAAC,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,IAAI,aAAa,EAAE;QAChE,CAAC,CAAC,GAAG,aAAa,EAAE,CAAC;IACzB,OAAO,GAAG;QACR,GAAG,OAAO;QACV,gBAAgB,EAAE;YAChB,eAAe;SAChB;QACD,cAAc,EAAE;YACd,MAAM,EAAE,OAAO,CAAC,cAAc,EAAE,MAAM,IAAI,MAAM,CAAC,IAAI;SACtD;QACD,WAAW,EAAE;YACX,MAAM,EAAE,OAAO,CAAC,WAAW,EAAE,MAAM,IAAI,CAAC,GAAG,WAAW,WAAW,CAAC;SACnE;KACF,CAAC;IAEF,MAAM,MAAM,GAAG,SAAS,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,CAAe,CAAC;IAE1E,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"../logger.js\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { AVSContext } from \"./clientDefinitions.js\";\n\n/**\n * Initialize a new instance of `AVSContext`\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  credentials: TokenCredential,\n  options: ClientOptions = {},\n): AVSContext {\n  const endpointUrl =\n    options.endpoint ?? options.baseUrl ?? `https://management.azure.com`;\n  options.apiVersion = options.apiVersion ?? \"2023-09-01\";\n  const userAgentInfo = `azsdk-js-arm-avs-rest/1.0.0-beta.1`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n    credentials: {\n      scopes: options.credentials?.scopes ?? [`${endpointUrl}/.default`],\n    },\n  };\n\n  const client = getClient(endpointUrl, credentials, options) as AVSContext;\n\n  return client;\n}\n"]}