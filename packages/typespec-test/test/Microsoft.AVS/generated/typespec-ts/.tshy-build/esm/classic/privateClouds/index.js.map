{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/privateClouds/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAQlC,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,GAAG,EACH,cAAc,EACd,MAAM,EACN,OAAO,EACP,qBAAqB,EACrB,kBAAkB,EAClB,oBAAoB,GACrB,MAAM,kCAAkC,CAAC;AAuE1C,MAAM,UAAU,gBAAgB,CAAC,OAAmB;IAClD,OAAO;QACL,mBAAmB,EAAE,CACnB,cAAsB,EACtB,iBAAyB,EACzB,OAAwD,EACxD,EAAE,CACF,mBAAmB,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,OAAO,CAAC;QAC1E,kBAAkB,EAAE,CAClB,cAAsB,EACtB,OAAuD,EACvD,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC;QACzD,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,OAAwC,EACxC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,YAA0B,EAC1B,OAAmD,EACnD,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,YAAY,EACZ,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,kBAAsC,EACtC,OAA2C,EAC3C,EAAE,CACF,MAAM,CACJ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,kBAAkB,EAClB,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,OAA2C,EAC3C,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,CACR;QACH,qBAAqB,EAAE,CACrB,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,OAA0D,EAC1D,EAAE,CACF,qBAAqB,CACnB,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,CACR;QACH,kBAAkB,EAAE,CAClB,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,OAAuD,EACvD,EAAE,CACF,kBAAkB,CAChB,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,CACR;QACH,oBAAoB,EAAE,CACpB,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,OAAyD,EACzD,EAAE,CACF,oBAAoB,CAClB,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,0BAA0B,CACxC,OAAmB;IAEnB,OAAO;QACL,GAAG,gBAAgB,CAAC,OAAO,CAAC;KAC7B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AVSContext } from \"../../api/aVSContext.js\";\nimport {\n  PrivateCloud,\n  PrivateCloudUpdate,\n  AdminCredentials,\n} from \"../../models/models.js\";\nimport {\n  listByResourceGroup,\n  listInSubscription,\n  get,\n  createOrUpdate,\n  update,\n  $delete,\n  rotateVcenterPassword,\n  rotateNsxtPassword,\n  listAdminCredentials,\n} from \"../../api/privateClouds/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  PrivateCloudsListByResourceGroupOptionalParams,\n  PrivateCloudsListInSubscriptionOptionalParams,\n  PrivateCloudsGetOptionalParams,\n  PrivateCloudsCreateOrUpdateOptionalParams,\n  PrivateCloudsUpdateOptionalParams,\n  PrivateCloudsDeleteOptionalParams,\n  PrivateCloudsRotateVcenterPasswordOptionalParams,\n  PrivateCloudsRotateNsxtPasswordOptionalParams,\n  PrivateCloudsListAdminCredentialsOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface PrivateCloudsOperations {\n  listByResourceGroup: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    options?: PrivateCloudsListByResourceGroupOptionalParams,\n  ) => PagedAsyncIterableIterator<PrivateCloud>;\n  listInSubscription: (\n    subscriptionId: string,\n    options?: PrivateCloudsListInSubscriptionOptionalParams,\n  ) => PagedAsyncIterableIterator<PrivateCloud>;\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    options?: PrivateCloudsGetOptionalParams,\n  ) => Promise<PrivateCloud>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    privateCloud: PrivateCloud,\n    options?: PrivateCloudsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<PrivateCloud>, PrivateCloud>;\n  update: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    privateCloudUpdate: PrivateCloudUpdate,\n    options?: PrivateCloudsUpdateOptionalParams,\n  ) => Promise<PrivateCloud>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    options?: PrivateCloudsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  rotateVcenterPassword: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    options?: PrivateCloudsRotateVcenterPasswordOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  rotateNsxtPassword: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    options?: PrivateCloudsRotateNsxtPasswordOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  listAdminCredentials: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    options?: PrivateCloudsListAdminCredentialsOptionalParams,\n  ) => Promise<AdminCredentials>;\n}\n\nexport function getPrivateClouds(context: AVSContext) {\n  return {\n    listByResourceGroup: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      options?: PrivateCloudsListByResourceGroupOptionalParams,\n    ) =>\n      listByResourceGroup(context, subscriptionId, resourceGroupName, options),\n    listInSubscription: (\n      subscriptionId: string,\n      options?: PrivateCloudsListInSubscriptionOptionalParams,\n    ) => listInSubscription(context, subscriptionId, options),\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      options?: PrivateCloudsGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      privateCloud: PrivateCloud,\n      options?: PrivateCloudsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        privateCloud,\n        options,\n      ),\n    update: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      privateCloudUpdate: PrivateCloudUpdate,\n      options?: PrivateCloudsUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        privateCloudUpdate,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      options?: PrivateCloudsDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        options,\n      ),\n    rotateVcenterPassword: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      options?: PrivateCloudsRotateVcenterPasswordOptionalParams,\n    ) =>\n      rotateVcenterPassword(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        options,\n      ),\n    rotateNsxtPassword: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      options?: PrivateCloudsRotateNsxtPasswordOptionalParams,\n    ) =>\n      rotateNsxtPassword(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        options,\n      ),\n    listAdminCredentials: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      options?: PrivateCloudsListAdminCredentialsOptionalParams,\n    ) =>\n      listAdminCredentials(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        options,\n      ),\n  };\n}\n\nexport function getPrivateCloudsOperations(\n  context: AVSContext,\n): PrivateCloudsOperations {\n  return {\n    ...getPrivateClouds(context),\n  };\n}\n"]}