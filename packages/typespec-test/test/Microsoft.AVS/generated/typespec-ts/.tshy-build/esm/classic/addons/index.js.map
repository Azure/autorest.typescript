{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/addons/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EACL,kBAAkB,EAClB,GAAG,EACH,cAAc,EACd,OAAO,GACR,MAAM,2BAA2B,CAAC;AAyCnC,MAAM,UAAU,SAAS,CAAC,OAAmB;IAC3C,OAAO;QACL,kBAAkB,EAAE,CAClB,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,OAAgD,EAChD,EAAE,CACF,kBAAkB,CAChB,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,CACR;QACH,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,SAAiB,EACjB,OAAiC,EACjC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,SAAS,EACT,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,SAAiB,EACjB,KAAY,EACZ,OAA4C,EAC5C,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,SAAS,EACT,KAAK,EACL,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,SAAiB,EACjB,OAAoC,EACpC,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,SAAS,EACT,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,OAAmB;IACrD,OAAO;QACL,GAAG,SAAS,CAAC,OAAO,CAAC;KACtB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AVSContext } from \"../../api/aVSContext.js\";\nimport { Addon } from \"../../models/models.js\";\nimport {\n  listByPrivateCloud,\n  get,\n  createOrUpdate,\n  $delete,\n} from \"../../api/addons/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  AddonsListByPrivateCloudOptionalParams,\n  AddonsGetOptionalParams,\n  AddonsCreateOrUpdateOptionalParams,\n  AddonsDeleteOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface AddonsOperations {\n  listByPrivateCloud: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    options?: AddonsListByPrivateCloudOptionalParams,\n  ) => PagedAsyncIterableIterator<Addon>;\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    addonName: string,\n    options?: AddonsGetOptionalParams,\n  ) => Promise<Addon>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    addonName: string,\n    addon: Addon,\n    options?: AddonsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Addon>, Addon>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    addonName: string,\n    options?: AddonsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n}\n\nexport function getAddons(context: AVSContext) {\n  return {\n    listByPrivateCloud: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      options?: AddonsListByPrivateCloudOptionalParams,\n    ) =>\n      listByPrivateCloud(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        options,\n      ),\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      addonName: string,\n      options?: AddonsGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        addonName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      addonName: string,\n      addon: Addon,\n      options?: AddonsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        addonName,\n        addon,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      addonName: string,\n      options?: AddonsDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        addonName,\n        options,\n      ),\n  };\n}\n\nexport function getAddonsOperations(context: AVSContext): AddonsOperations {\n  return {\n    ...getAddons(context),\n  };\n}\n"]}