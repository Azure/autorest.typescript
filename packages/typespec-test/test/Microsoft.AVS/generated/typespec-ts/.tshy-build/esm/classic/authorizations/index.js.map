{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/authorizations/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EACL,kBAAkB,EAClB,GAAG,EACH,cAAc,EACd,OAAO,GACR,MAAM,mCAAmC,CAAC;AA4C3C,MAAM,UAAU,iBAAiB,CAAC,OAAmB;IACnD,OAAO;QACL,kBAAkB,EAAE,CAClB,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,OAAwD,EACxD,EAAE,CACF,kBAAkB,CAChB,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,CACR;QACH,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,iBAAyB,EACzB,OAAyC,EACzC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,iBAAiB,EACjB,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,iBAAyB,EACzB,aAAwC,EACxC,OAAoD,EACpD,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,iBAAiB,EACjB,aAAa,EACb,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,iBAAyB,EACzB,OAA4C,EAC5C,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,iBAAiB,EACjB,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,2BAA2B,CACzC,OAAmB;IAEnB,OAAO;QACL,GAAG,iBAAiB,CAAC,OAAO,CAAC;KAC9B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AVSContext } from \"../../api/aVSContext.js\";\nimport { ExpressRouteAuthorization } from \"../../models/models.js\";\nimport {\n  listByPrivateCloud,\n  get,\n  createOrUpdate,\n  $delete,\n} from \"../../api/authorizations/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  AuthorizationsListByPrivateCloudOptionalParams,\n  AuthorizationsGetOptionalParams,\n  AuthorizationsCreateOrUpdateOptionalParams,\n  AuthorizationsDeleteOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface AuthorizationsOperations {\n  listByPrivateCloud: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    options?: AuthorizationsListByPrivateCloudOptionalParams,\n  ) => PagedAsyncIterableIterator<ExpressRouteAuthorization>;\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    authorizationName: string,\n    options?: AuthorizationsGetOptionalParams,\n  ) => Promise<ExpressRouteAuthorization>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    authorizationName: string,\n    authorization: ExpressRouteAuthorization,\n    options?: AuthorizationsCreateOrUpdateOptionalParams,\n  ) => PollerLike<\n    OperationState<ExpressRouteAuthorization>,\n    ExpressRouteAuthorization\n  >;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    authorizationName: string,\n    options?: AuthorizationsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n}\n\nexport function getAuthorizations(context: AVSContext) {\n  return {\n    listByPrivateCloud: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      options?: AuthorizationsListByPrivateCloudOptionalParams,\n    ) =>\n      listByPrivateCloud(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        options,\n      ),\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      authorizationName: string,\n      options?: AuthorizationsGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        authorizationName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      authorizationName: string,\n      authorization: ExpressRouteAuthorization,\n      options?: AuthorizationsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        authorizationName,\n        authorization,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      authorizationName: string,\n      options?: AuthorizationsDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        authorizationName,\n        options,\n      ),\n  };\n}\n\nexport function getAuthorizationsOperations(\n  context: AVSContext,\n): AuthorizationsOperations {\n  return {\n    ...getAuthorizations(context),\n  };\n}\n"]}