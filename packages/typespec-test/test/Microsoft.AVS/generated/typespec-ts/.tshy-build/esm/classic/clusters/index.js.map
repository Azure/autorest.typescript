{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/clusters/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAQlC,OAAO,EACL,kBAAkB,EAClB,GAAG,EACH,cAAc,EACd,MAAM,EACN,OAAO,EACP,SAAS,GACV,MAAM,6BAA6B,CAAC;AA0DrC,MAAM,UAAU,WAAW,CAAC,OAAmB;IAC7C,OAAO;QACL,kBAAkB,EAAE,CAClB,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,OAAkD,EAClD,EAAE,CACF,kBAAkB,CAChB,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,CACR;QACH,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,OAAmC,EACnC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,OAAgB,EAChB,OAA8C,EAC9C,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,OAAO,EACP,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,aAA4B,EAC5B,OAAsC,EACtC,EAAE,CACF,MAAM,CACJ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,aAAa,EACb,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,OAAsC,EACtC,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,OAAO,CACR;QACH,SAAS,EAAE,CACT,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,OAAyC,EACzC,EAAE,CACF,SAAS,CACP,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,OAAmB;IACvD,OAAO;QACL,GAAG,WAAW,CAAC,OAAO,CAAC;KACxB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AVSContext } from \"../../api/aVSContext.js\";\nimport {\n  Cluster,\n  ClusterUpdate,\n  ClusterZoneList,\n} from \"../../models/models.js\";\nimport {\n  listByPrivateCloud,\n  get,\n  createOrUpdate,\n  update,\n  $delete,\n  listZones,\n} from \"../../api/clusters/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ClustersListByPrivateCloudOptionalParams,\n  ClustersGetOptionalParams,\n  ClustersCreateOrUpdateOptionalParams,\n  ClustersUpdateOptionalParams,\n  ClustersDeleteOptionalParams,\n  ClustersListZonesOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface ClustersOperations {\n  listByPrivateCloud: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    options?: ClustersListByPrivateCloudOptionalParams,\n  ) => PagedAsyncIterableIterator<Cluster>;\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    options?: ClustersGetOptionalParams,\n  ) => Promise<Cluster>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    cluster: Cluster,\n    options?: ClustersCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Cluster>, Cluster>;\n  update: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    clusterUpdate: ClusterUpdate,\n    options?: ClustersUpdateOptionalParams,\n  ) => Promise<Cluster>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    options?: ClustersDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  listZones: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    options?: ClustersListZonesOptionalParams,\n  ) => Promise<ClusterZoneList>;\n}\n\nexport function getClusters(context: AVSContext) {\n  return {\n    listByPrivateCloud: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      options?: ClustersListByPrivateCloudOptionalParams,\n    ) =>\n      listByPrivateCloud(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        options,\n      ),\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      options?: ClustersGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      cluster: Cluster,\n      options?: ClustersCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        cluster,\n        options,\n      ),\n    update: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      clusterUpdate: ClusterUpdate,\n      options?: ClustersUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        clusterUpdate,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      options?: ClustersDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        options,\n      ),\n    listZones: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      options?: ClustersListZonesOptionalParams,\n    ) =>\n      listZones(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        options,\n      ),\n  };\n}\n\nexport function getClustersOperations(context: AVSContext): ClustersOperations {\n  return {\n    ...getClusters(context),\n  };\n}\n"]}