{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/scriptCmdlets/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ScriptCmdletListResult, ScriptCmdlet } from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { buildPagedAsyncIterator } from \"../pagingHelpers.js\";\nimport {\n  isUnexpected,\n  AVSContext as Client,\n  ScriptCmdletsGet200Response,\n  ScriptCmdletsGetDefaultResponse,\n  ScriptCmdletsListByScriptPackage200Response,\n  ScriptCmdletsListByScriptPackageDefaultResponse,\n} from \"../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport {\n  ScriptCmdletsListByScriptPackageOptionalParams,\n  ScriptCmdletsGetOptionalParams,\n} from \"../../models/options.js\";\n\nexport function _listByScriptPackageSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  privateCloudName: string,\n  scriptPackageName: string,\n  options: ScriptCmdletsListByScriptPackageOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | ScriptCmdletsListByScriptPackage200Response\n  | ScriptCmdletsListByScriptPackageDefaultResponse\n> {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/scriptPackages/{scriptPackageName}/scriptCmdlets\",\n      subscriptionId,\n      resourceGroupName,\n      privateCloudName,\n      scriptPackageName,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _listByScriptPackageDeserialize(\n  result:\n    | ScriptCmdletsListByScriptPackage200Response\n    | ScriptCmdletsListByScriptPackageDefaultResponse,\n): Promise<ScriptCmdletListResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    value: result.body[\"value\"].map((p) => ({\n      id: p[\"id\"],\n      name: p[\"name\"],\n      type: p[\"type\"],\n      systemData: !p.systemData\n        ? undefined\n        : {\n            createdBy: p.systemData?.[\"createdBy\"],\n            createdByType: p.systemData?.[\"createdByType\"],\n            createdAt:\n              p.systemData?.[\"createdAt\"] !== undefined\n                ? new Date(p.systemData?.[\"createdAt\"])\n                : undefined,\n            lastModifiedBy: p.systemData?.[\"lastModifiedBy\"],\n            lastModifiedByType: p.systemData?.[\"lastModifiedByType\"],\n            lastModifiedAt:\n              p.systemData?.[\"lastModifiedAt\"] !== undefined\n                ? new Date(p.systemData?.[\"lastModifiedAt\"])\n                : undefined,\n          },\n      properties: !p.properties\n        ? undefined\n        : {\n            provisioningState: p.properties?.[\"provisioningState\"],\n            description: p.properties?.[\"description\"],\n            timeout: p.properties?.[\"timeout\"],\n            audience: p.properties?.[\"audience\"],\n            parameters:\n              p.properties?.[\"parameters\"] === undefined\n                ? p.properties?.[\"parameters\"]\n                : p.properties?.[\"parameters\"].map((p) => ({\n                    type: p[\"type\"],\n                    name: p[\"name\"],\n                    description: p[\"description\"],\n                    visibility: p[\"visibility\"],\n                    optional: p[\"optional\"],\n                  })),\n          },\n    })),\n    nextLink: result.body[\"nextLink\"],\n  };\n}\n\n/** List ScriptCmdlet resources by ScriptPackage */\nexport function listByScriptPackage(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  privateCloudName: string,\n  scriptPackageName: string,\n  options: ScriptCmdletsListByScriptPackageOptionalParams = {\n    requestOptions: {},\n  },\n): PagedAsyncIterableIterator<ScriptCmdlet> {\n  return buildPagedAsyncIterator(\n    context,\n    () =>\n      _listByScriptPackageSend(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        scriptPackageName,\n        options,\n      ),\n    _listByScriptPackageDeserialize,\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _getSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  privateCloudName: string,\n  scriptPackageName: string,\n  scriptCmdletName: string,\n  options: ScriptCmdletsGetOptionalParams = { requestOptions: {} },\n): StreamableMethod<\n  ScriptCmdletsGet200Response | ScriptCmdletsGetDefaultResponse\n> {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/scriptPackages/{scriptPackageName}/scriptCmdlets/{scriptCmdletName}\",\n      subscriptionId,\n      resourceGroupName,\n      privateCloudName,\n      scriptPackageName,\n      scriptCmdletName,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _getDeserialize(\n  result: ScriptCmdletsGet200Response | ScriptCmdletsGetDefaultResponse,\n): Promise<ScriptCmdlet> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    id: result.body[\"id\"],\n    name: result.body[\"name\"],\n    type: result.body[\"type\"],\n    systemData: !result.body.systemData\n      ? undefined\n      : {\n          createdBy: result.body.systemData?.[\"createdBy\"],\n          createdByType: result.body.systemData?.[\"createdByType\"],\n          createdAt:\n            result.body.systemData?.[\"createdAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"createdAt\"])\n              : undefined,\n          lastModifiedBy: result.body.systemData?.[\"lastModifiedBy\"],\n          lastModifiedByType: result.body.systemData?.[\"lastModifiedByType\"],\n          lastModifiedAt:\n            result.body.systemData?.[\"lastModifiedAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"lastModifiedAt\"])\n              : undefined,\n        },\n    properties: !result.body.properties\n      ? undefined\n      : {\n          provisioningState: result.body.properties?.[\"provisioningState\"],\n          description: result.body.properties?.[\"description\"],\n          timeout: result.body.properties?.[\"timeout\"],\n          audience: result.body.properties?.[\"audience\"],\n          parameters:\n            result.body.properties?.[\"parameters\"] === undefined\n              ? result.body.properties?.[\"parameters\"]\n              : result.body.properties?.[\"parameters\"].map((p) => ({\n                  type: p[\"type\"],\n                  name: p[\"name\"],\n                  description: p[\"description\"],\n                  visibility: p[\"visibility\"],\n                  optional: p[\"optional\"],\n                })),\n        },\n  };\n}\n\n/** Get a ScriptCmdlet */\nexport async function get(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  privateCloudName: string,\n  scriptPackageName: string,\n  scriptCmdletName: string,\n  options: ScriptCmdletsGetOptionalParams = { requestOptions: {} },\n): Promise<ScriptCmdlet> {\n  const result = await _getSend(\n    context,\n    subscriptionId,\n    resourceGroupName,\n    privateCloudName,\n    scriptPackageName,\n    scriptCmdletName,\n    options,\n  );\n  return _getDeserialize(result);\n}\n"]}