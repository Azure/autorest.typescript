{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/datastores/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EACL,aAAa,EACb,GAAG,EACH,cAAc,EACd,OAAO,GACR,MAAM,+BAA+B,CAAC;AA6CvC,MAAM,UAAU,aAAa,CAAC,OAAmB;IAC/C,OAAO;QACL,aAAa,EAAE,CACb,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,OAA+C,EAC/C,EAAE,CACF,aAAa,CACX,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,OAAO,CACR;QACH,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,aAAqB,EACrB,OAAqC,EACrC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,aAAa,EACb,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,aAAqB,EACrB,SAAoB,EACpB,OAAgD,EAChD,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,aAAa,EACb,SAAS,EACT,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,gBAAwB,EACxB,WAAmB,EACnB,aAAqB,EACrB,OAAwC,EACxC,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,gBAAgB,EAChB,WAAW,EACX,aAAa,EACb,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,uBAAuB,CACrC,OAAmB;IAEnB,OAAO;QACL,GAAG,aAAa,CAAC,OAAO,CAAC;KAC1B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AVSContext } from \"../../api/aVSContext.js\";\nimport { Datastore } from \"../../models/models.js\";\nimport {\n  listByCluster,\n  get,\n  createOrUpdate,\n  $delete,\n} from \"../../api/datastores/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  DatastoresListByClusterOptionalParams,\n  DatastoresGetOptionalParams,\n  DatastoresCreateOrUpdateOptionalParams,\n  DatastoresDeleteOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface DatastoresOperations {\n  listByCluster: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    options?: DatastoresListByClusterOptionalParams,\n  ) => PagedAsyncIterableIterator<Datastore>;\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    datastoreName: string,\n    options?: DatastoresGetOptionalParams,\n  ) => Promise<Datastore>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    datastoreName: string,\n    datastore: Datastore,\n    options?: DatastoresCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Datastore>, Datastore>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    privateCloudName: string,\n    clusterName: string,\n    datastoreName: string,\n    options?: DatastoresDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n}\n\nexport function getDatastores(context: AVSContext) {\n  return {\n    listByCluster: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      options?: DatastoresListByClusterOptionalParams,\n    ) =>\n      listByCluster(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        options,\n      ),\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      datastoreName: string,\n      options?: DatastoresGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        datastoreName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      datastoreName: string,\n      datastore: Datastore,\n      options?: DatastoresCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        datastoreName,\n        datastore,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      privateCloudName: string,\n      clusterName: string,\n      datastoreName: string,\n      options?: DatastoresDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        privateCloudName,\n        clusterName,\n        datastoreName,\n        options,\n      ),\n  };\n}\n\nexport function getDatastoresOperations(\n  context: AVSContext,\n): DatastoresOperations {\n  return {\n    ...getDatastores(context),\n  };\n}\n"]}