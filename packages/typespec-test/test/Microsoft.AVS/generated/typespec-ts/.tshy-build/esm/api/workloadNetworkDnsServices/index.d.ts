import { PollerLike, OperationState } from "@azure/core-lro";
import { WorkloadNetworkDnsService, _WorkloadNetworkDnsServicesList } from "../../models/models.js";
import { PagedAsyncIterableIterator } from "../../models/pagingTypes.js";
import { AVSContext as Client, WorkloadNetworkDnsServicesCreate200Response, WorkloadNetworkDnsServicesCreate201Response, WorkloadNetworkDnsServicesCreateDefaultResponse, WorkloadNetworkDnsServicesCreateLogicalResponse, WorkloadNetworkDnsServicesDelete200Response, WorkloadNetworkDnsServicesDelete202Response, WorkloadNetworkDnsServicesDelete204Response, WorkloadNetworkDnsServicesDeleteDefaultResponse, WorkloadNetworkDnsServicesDeleteLogicalResponse, WorkloadNetworkDnsServicesGet200Response, WorkloadNetworkDnsServicesGetDefaultResponse, WorkloadNetworkDnsServicesListByWorkloadNetwork200Response, WorkloadNetworkDnsServicesListByWorkloadNetworkDefaultResponse, WorkloadNetworkDnsServicesUpdate200Response, WorkloadNetworkDnsServicesUpdate202Response, WorkloadNetworkDnsServicesUpdateDefaultResponse, WorkloadNetworkDnsServicesUpdateLogicalResponse } from "../../rest/index.js";
import { StreamableMethod } from "@azure-rest/core-client";
import { WorkloadNetworkDnsServicesListByWorkloadNetworkOptionalParams, WorkloadNetworkDnsServicesGetOptionalParams, WorkloadNetworkDnsServicesCreateOptionalParams, WorkloadNetworkDnsServicesUpdateOptionalParams, WorkloadNetworkDnsServicesDeleteOptionalParams } from "../../models/options.js";
export declare function _listByWorkloadNetworkSend(context: Client, subscriptionId: string, resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworkDnsServicesListByWorkloadNetworkOptionalParams): StreamableMethod<WorkloadNetworkDnsServicesListByWorkloadNetwork200Response | WorkloadNetworkDnsServicesListByWorkloadNetworkDefaultResponse>;
export declare function _listByWorkloadNetworkDeserialize(result: WorkloadNetworkDnsServicesListByWorkloadNetwork200Response | WorkloadNetworkDnsServicesListByWorkloadNetworkDefaultResponse): Promise<_WorkloadNetworkDnsServicesList>;
/** List WorkloadNetworkDnsService resources by WorkloadNetwork */
export declare function listByWorkloadNetwork(context: Client, subscriptionId: string, resourceGroupName: string, privateCloudName: string, options?: WorkloadNetworkDnsServicesListByWorkloadNetworkOptionalParams): PagedAsyncIterableIterator<WorkloadNetworkDnsService>;
export declare function _getSend(context: Client, subscriptionId: string, resourceGroupName: string, privateCloudName: string, dnsServiceId: string, options?: WorkloadNetworkDnsServicesGetOptionalParams): StreamableMethod<WorkloadNetworkDnsServicesGet200Response | WorkloadNetworkDnsServicesGetDefaultResponse>;
export declare function _getDeserialize(result: WorkloadNetworkDnsServicesGet200Response | WorkloadNetworkDnsServicesGetDefaultResponse): Promise<WorkloadNetworkDnsService>;
/** Get a WorkloadNetworkDnsService */
export declare function get(context: Client, subscriptionId: string, resourceGroupName: string, privateCloudName: string, dnsServiceId: string, options?: WorkloadNetworkDnsServicesGetOptionalParams): Promise<WorkloadNetworkDnsService>;
export declare function _createSend(context: Client, subscriptionId: string, resourceGroupName: string, privateCloudName: string, dnsServiceId: string, workloadNetworkDnsService: WorkloadNetworkDnsService, options?: WorkloadNetworkDnsServicesCreateOptionalParams): StreamableMethod<WorkloadNetworkDnsServicesCreate200Response | WorkloadNetworkDnsServicesCreate201Response | WorkloadNetworkDnsServicesCreateDefaultResponse | WorkloadNetworkDnsServicesCreateLogicalResponse>;
export declare function _createDeserialize(result: WorkloadNetworkDnsServicesCreate200Response | WorkloadNetworkDnsServicesCreate201Response | WorkloadNetworkDnsServicesCreateDefaultResponse | WorkloadNetworkDnsServicesCreateLogicalResponse): Promise<WorkloadNetworkDnsService>;
/** Create a WorkloadNetworkDnsService */
export declare function create(context: Client, subscriptionId: string, resourceGroupName: string, privateCloudName: string, dnsServiceId: string, workloadNetworkDnsService: WorkloadNetworkDnsService, options?: WorkloadNetworkDnsServicesCreateOptionalParams): PollerLike<OperationState<WorkloadNetworkDnsService>, WorkloadNetworkDnsService>;
export declare function _updateSend(context: Client, subscriptionId: string, resourceGroupName: string, privateCloudName: string, dnsServiceId: string, workloadNetworkDnsService: WorkloadNetworkDnsService, options?: WorkloadNetworkDnsServicesUpdateOptionalParams): StreamableMethod<WorkloadNetworkDnsServicesUpdate200Response | WorkloadNetworkDnsServicesUpdate202Response | WorkloadNetworkDnsServicesUpdateDefaultResponse | WorkloadNetworkDnsServicesUpdateLogicalResponse>;
export declare function _updateDeserialize(result: WorkloadNetworkDnsServicesUpdate200Response | WorkloadNetworkDnsServicesUpdate202Response | WorkloadNetworkDnsServicesUpdateDefaultResponse | WorkloadNetworkDnsServicesUpdateLogicalResponse): Promise<WorkloadNetworkDnsService>;
/** Update a WorkloadNetworkDnsService */
export declare function update(context: Client, subscriptionId: string, resourceGroupName: string, privateCloudName: string, dnsServiceId: string, workloadNetworkDnsService: WorkloadNetworkDnsService, options?: WorkloadNetworkDnsServicesUpdateOptionalParams): PollerLike<OperationState<WorkloadNetworkDnsService>, WorkloadNetworkDnsService>;
export declare function _$deleteSend(context: Client, subscriptionId: string, resourceGroupName: string, dnsServiceId: string, privateCloudName: string, options?: WorkloadNetworkDnsServicesDeleteOptionalParams): StreamableMethod<WorkloadNetworkDnsServicesDelete200Response | WorkloadNetworkDnsServicesDelete202Response | WorkloadNetworkDnsServicesDelete204Response | WorkloadNetworkDnsServicesDeleteDefaultResponse | WorkloadNetworkDnsServicesDeleteLogicalResponse>;
export declare function _$deleteDeserialize(result: WorkloadNetworkDnsServicesDelete200Response | WorkloadNetworkDnsServicesDelete202Response | WorkloadNetworkDnsServicesDelete204Response | WorkloadNetworkDnsServicesDeleteDefaultResponse | WorkloadNetworkDnsServicesDeleteLogicalResponse): Promise<void>;
/** Delete a WorkloadNetworkDnsService */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export declare function $delete(context: Client, subscriptionId: string, resourceGroupName: string, dnsServiceId: string, privateCloudName: string, options?: WorkloadNetworkDnsServicesDeleteOptionalParams): PollerLike<OperationState<void>, void>;
//# sourceMappingURL=index.d.ts.map