{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/locations/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AASlC,OAAO,EACL,YAAY,GAMb,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAEL,mCAAmC,EACnC,eAAe,GAChB,MAAM,yBAAyB,CAAC;AAMjC,MAAM,UAAU,2BAA2B,CACzC,OAAe,EACf,cAAsB,EACtB,QAAgB,EAChB,GAAS,EACT,UAAyD;IACvD,cAAc,EAAE,EAAE;CACnB;IAKD,OAAO,OAAO;SACX,IAAI,CACH,qGAAqG,EACrG,cAAc,EACd,QAAQ,CACT;SACA,IAAI,CAAC;QACJ,GAAG,mCAAmC,CAAC,OAAO,CAAC;QAC/C,IAAI,EACF,GAAG,KAAK,SAAS;YACf,CAAC,CAAC,GAAG;YACL,CAAC,CAAC;gBACE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC;gBACjB,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC;gBACjB,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC;gBACjB,MAAM,EAAE,GAAG,CAAC,QAAQ,CAAC;gBACrB,QAAQ,EAAE,GAAG,CAAC,UAAU,CAAC;aAC1B;KACR,CAAC,CAAC;AACP,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kCAAkC,CACtD,MAEkD;IAElD,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO;QACL,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAgB;QAC5C,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;KAC9C,CAAC;AACJ,CAAC;AAED,qDAAqD;AACrD,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAC1C,OAAe,EACf,cAAsB,EACtB,QAAgB,EAChB,GAAS,EACT,UAAyD;IACvD,cAAc,EAAE,EAAE;CACnB;IAED,MAAM,MAAM,GAAG,MAAM,2BAA2B,CAC9C,OAAO,EACP,cAAc,EACd,QAAQ,EACR,GAAG,EACH,OAAO,CACR,CAAC;IACF,OAAO,kCAAkC,CAAC,MAAM,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,2BAA2B,CACzC,OAAe,EACf,cAAsB,EACtB,QAAgB,EAChB,UAAyD;IACvD,cAAc,EAAE,EAAE;CACnB;IAKD,OAAO,OAAO;SACX,IAAI,CACH,qGAAqG,EACrG,cAAc,EACd,QAAQ,CACT;SACA,IAAI,CAAC,EAAE,GAAG,mCAAmC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kCAAkC,CACtD,MAEkD;IAElD,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO;QACL,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAC7C,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAiB;KAC1D,CAAC;AACJ,CAAC;AAED,8CAA8C;AAC9C,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAC1C,OAAe,EACf,cAAsB,EACtB,QAAgB,EAChB,UAAyD;IACvD,cAAc,EAAE,EAAE;CACnB;IAED,MAAM,MAAM,GAAG,MAAM,2BAA2B,CAC9C,OAAO,EACP,cAAc,EACd,QAAQ,EACR,OAAO,CACR,CAAC;IACF,OAAO,kCAAkC,CAAC,MAAM,CAAC,CAAC;AACpD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  Sku,\n  Trial,\n  TrialStatus,\n  Quota,\n  QuotaEnabled,\n} from \"../../models/models.js\";\nimport {\n  isUnexpected,\n  AVSContext as Client,\n  LocationsCheckQuotaAvailability200Response,\n  LocationsCheckQuotaAvailabilityDefaultResponse,\n  LocationsCheckTrialAvailability200Response,\n  LocationsCheckTrialAvailabilityDefaultResponse,\n} from \"../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport {\n  LocationsCheckTrialAvailabilityOptionalParams,\n  LocationsCheckQuotaAvailabilityOptionalParams,\n} from \"../../models/options.js\";\n\nexport function _checkTrialAvailabilitySend(\n  context: Client,\n  subscriptionId: string,\n  location: string,\n  sku?: Sku,\n  options: LocationsCheckTrialAvailabilityOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | LocationsCheckTrialAvailability200Response\n  | LocationsCheckTrialAvailabilityDefaultResponse\n> {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkTrialAvailability\",\n      subscriptionId,\n      location,\n    )\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body:\n        sku === undefined\n          ? sku\n          : {\n              name: sku[\"name\"],\n              tier: sku[\"tier\"],\n              size: sku[\"size\"],\n              family: sku[\"family\"],\n              capacity: sku[\"capacity\"],\n            },\n    });\n}\n\nexport async function _checkTrialAvailabilityDeserialize(\n  result:\n    | LocationsCheckTrialAvailability200Response\n    | LocationsCheckTrialAvailabilityDefaultResponse,\n): Promise<Trial> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    status: result.body[\"status\"] as TrialStatus,\n    availableHosts: result.body[\"availableHosts\"],\n  };\n}\n\n/** Return trial status for subscription by region */\nexport async function checkTrialAvailability(\n  context: Client,\n  subscriptionId: string,\n  location: string,\n  sku?: Sku,\n  options: LocationsCheckTrialAvailabilityOptionalParams = {\n    requestOptions: {},\n  },\n): Promise<Trial> {\n  const result = await _checkTrialAvailabilitySend(\n    context,\n    subscriptionId,\n    location,\n    sku,\n    options,\n  );\n  return _checkTrialAvailabilityDeserialize(result);\n}\n\nexport function _checkQuotaAvailabilitySend(\n  context: Client,\n  subscriptionId: string,\n  location: string,\n  options: LocationsCheckQuotaAvailabilityOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | LocationsCheckQuotaAvailability200Response\n  | LocationsCheckQuotaAvailabilityDefaultResponse\n> {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkQuotaAvailability\",\n      subscriptionId,\n      location,\n    )\n    .post({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _checkQuotaAvailabilityDeserialize(\n  result:\n    | LocationsCheckQuotaAvailability200Response\n    | LocationsCheckQuotaAvailabilityDefaultResponse,\n): Promise<Quota> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    hostsRemaining: result.body[\"hostsRemaining\"],\n    quotaEnabled: result.body[\"quotaEnabled\"] as QuotaEnabled,\n  };\n}\n\n/** Return quota for subscription by region */\nexport async function checkQuotaAvailability(\n  context: Client,\n  subscriptionId: string,\n  location: string,\n  options: LocationsCheckQuotaAvailabilityOptionalParams = {\n    requestOptions: {},\n  },\n): Promise<Quota> {\n  const result = await _checkQuotaAvailabilitySend(\n    context,\n    subscriptionId,\n    location,\n    options,\n  );\n  return _checkQuotaAvailabilityDeserialize(result);\n}\n"]}