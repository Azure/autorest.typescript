{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/images/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed under the MIT license.\n\nimport {\n  CreateImageRequest,\n  ImagesResponse,\n  CreateImageEditRequest,\n  CreateImageVariationRequest,\n} from \"../../models/models.js\";\nimport {\n  ImagesCreate200Response,\n  ImagesCreateDefaultResponse,\n  ImagesCreateEdit200Response,\n  ImagesCreateEditDefaultResponse,\n  ImagesCreateVariation200Response,\n  ImagesCreateVariationDefaultResponse,\n  isUnexpected,\n  OpenAIContext as Client,\n} from \"../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  stringToUint8Array,\n  uint8ArrayToString,\n  createRestError,\n} from \"@typespec/ts-http-runtime\";\nimport {\n  ImagesCreateOptions,\n  ImagesCreateEditOptions,\n  ImagesCreateVariationOptions,\n} from \"../../models/options.js\";\n\nexport function _createSend(\n  context: Client,\n  image: CreateImageRequest,\n  options: ImagesCreateOptions = { requestOptions: {} },\n): StreamableMethod<ImagesCreate200Response | ImagesCreateDefaultResponse> {\n  return context\n    .path(\"/images/generations\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        prompt: image[\"prompt\"],\n        n: image[\"n\"],\n        size: image[\"size\"],\n        response_format: image[\"responseFormat\"],\n        user: image[\"user\"],\n      },\n    });\n}\n\nexport async function _createDeserialize(\n  result: ImagesCreate200Response | ImagesCreateDefaultResponse,\n): Promise<ImagesResponse> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    created: new Date(result.body[\"created\"]),\n    data: result.body[\"data\"].map((p) => ({\n      url: p[\"url\"],\n      b64Json:\n        typeof p[\"b64_json\"] === \"string\"\n          ? stringToUint8Array(p[\"b64_json\"], \"base64\")\n          : p[\"b64_json\"],\n    })),\n  };\n}\n\nexport async function create(\n  context: Client,\n  image: CreateImageRequest,\n  options: ImagesCreateOptions = { requestOptions: {} },\n): Promise<ImagesResponse> {\n  const result = await _createSend(context, image, options);\n  return _createDeserialize(result);\n}\n\nexport function _createEditSend(\n  context: Client,\n  image: CreateImageEditRequest,\n  options: ImagesCreateEditOptions = { requestOptions: {} },\n): StreamableMethod<\n  ImagesCreateEdit200Response | ImagesCreateEditDefaultResponse\n> {\n  return context\n    .path(\"/images/edits\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: (options.contentType as any) ?? \"multipart/form-data\",\n      body: {\n        prompt: image[\"prompt\"],\n        image: uint8ArrayToString(image[\"image\"], \"base64\"),\n        mask:\n          image[\"mask\"] !== undefined\n            ? uint8ArrayToString(image[\"mask\"], \"base64\")\n            : undefined,\n        n: image[\"n\"],\n        size: image[\"size\"],\n        response_format: image[\"responseFormat\"],\n        user: image[\"user\"],\n      },\n    });\n}\n\nexport async function _createEditDeserialize(\n  result: ImagesCreateEdit200Response | ImagesCreateEditDefaultResponse,\n): Promise<ImagesResponse> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    created: new Date(result.body[\"created\"]),\n    data: result.body[\"data\"].map((p) => ({\n      url: p[\"url\"],\n      b64Json:\n        typeof p[\"b64_json\"] === \"string\"\n          ? stringToUint8Array(p[\"b64_json\"], \"base64\")\n          : p[\"b64_json\"],\n    })),\n  };\n}\n\nexport async function createEdit(\n  context: Client,\n  image: CreateImageEditRequest,\n  options: ImagesCreateEditOptions = { requestOptions: {} },\n): Promise<ImagesResponse> {\n  const result = await _createEditSend(context, image, options);\n  return _createEditDeserialize(result);\n}\n\nexport function _createVariationSend(\n  context: Client,\n  image: CreateImageVariationRequest,\n  options: ImagesCreateVariationOptions = { requestOptions: {} },\n): StreamableMethod<\n  ImagesCreateVariation200Response | ImagesCreateVariationDefaultResponse\n> {\n  return context\n    .path(\"/images/variations\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: (options.contentType as any) ?? \"multipart/form-data\",\n      body: {\n        image: uint8ArrayToString(image[\"image\"], \"base64\"),\n        n: image[\"n\"],\n        size: image[\"size\"],\n        response_format: image[\"responseFormat\"],\n        user: image[\"user\"],\n      },\n    });\n}\n\nexport async function _createVariationDeserialize(\n  result:\n    | ImagesCreateVariation200Response\n    | ImagesCreateVariationDefaultResponse,\n): Promise<ImagesResponse> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    created: new Date(result.body[\"created\"]),\n    data: result.body[\"data\"].map((p) => ({\n      url: p[\"url\"],\n      b64Json:\n        typeof p[\"b64_json\"] === \"string\"\n          ? stringToUint8Array(p[\"b64_json\"], \"base64\")\n          : p[\"b64_json\"],\n    })),\n  };\n}\n\nexport async function createVariation(\n  context: Client,\n  image: CreateImageVariationRequest,\n  options: ImagesCreateVariationOptions = { requestOptions: {} },\n): Promise<ImagesResponse> {\n  const result = await _createVariationSend(context, image, options);\n  return _createVariationDeserialize(result);\n}\n"]}