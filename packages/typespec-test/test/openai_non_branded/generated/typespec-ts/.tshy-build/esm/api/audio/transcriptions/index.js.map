{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/api/audio/transcriptions/index.ts"],"names":[],"mappings":"AAAA,kCAAkC;AAMlC,OAAO,EAGL,YAAY,GAEb,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAEL,mCAAmC,EACnC,kBAAkB,EAClB,eAAe,GAChB,MAAM,2BAA2B,CAAC;AAGnC,MAAM,UAAU,WAAW,CACzB,OAAe,EACf,KAAiC,EACjC,UAA4C,EAAE,cAAc,EAAE,EAAE,EAAE;IAKlE,OAAO,OAAO;SACX,IAAI,CAAC,uBAAuB,CAAC;SAC7B,IAAI,CAAC;QACJ,GAAG,mCAAmC,CAAC,OAAO,CAAC;QAC/C,WAAW,EAAG,OAAO,CAAC,WAAmB,IAAI,qBAAqB;QAClE,IAAI,EAAE;YACJ,IAAI,EAAE,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;YACjD,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;YACrB,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC;YACvB,eAAe,EAAE,KAAK,CAAC,gBAAgB,CAAC;YACxC,WAAW,EAAE,KAAK,CAAC,aAAa,CAAC;YACjC,QAAQ,EAAE,KAAK,CAAC,UAAU,CAAC;SAC5B;KACF,CAAC,CAAC;AACP,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,MAE4C;IAE5C,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;KAC1B,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,MAAM,CAC1B,OAAe,EACf,KAAiC,EACjC,UAA4C,EAAE,cAAc,EAAE,EAAE,EAAE;IAElE,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1D,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC","sourcesContent":["// Licensed under the MIT license.\n\nimport {\n  CreateTranscriptionRequest,\n  CreateTranscriptionResponse,\n} from \"../../../models/models.js\";\nimport {\n  AudioTranscriptionsCreate200Response,\n  AudioTranscriptionsCreateDefaultResponse,\n  isUnexpected,\n  OpenAIContext as Client,\n} from \"../../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  uint8ArrayToString,\n  createRestError,\n} from \"@typespec/ts-http-runtime\";\nimport { AudioTranscriptionsCreateOptions } from \"../../../models/options.js\";\n\nexport function _createSend(\n  context: Client,\n  audio: CreateTranscriptionRequest,\n  options: AudioTranscriptionsCreateOptions = { requestOptions: {} },\n): StreamableMethod<\n  | AudioTranscriptionsCreate200Response\n  | AudioTranscriptionsCreateDefaultResponse\n> {\n  return context\n    .path(\"/audio/transcriptions\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: (options.contentType as any) ?? \"multipart/form-data\",\n      body: {\n        file: uint8ArrayToString(audio[\"file\"], \"base64\"),\n        model: audio[\"model\"],\n        prompt: audio[\"prompt\"],\n        response_format: audio[\"responseFormat\"],\n        temperature: audio[\"temperature\"],\n        language: audio[\"language\"],\n      },\n    });\n}\n\nexport async function _createDeserialize(\n  result:\n    | AudioTranscriptionsCreate200Response\n    | AudioTranscriptionsCreateDefaultResponse,\n): Promise<CreateTranscriptionResponse> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    text: result.body[\"text\"],\n  };\n}\n\nexport async function create(\n  context: Client,\n  audio: CreateTranscriptionRequest,\n  options: AudioTranscriptionsCreateOptions = { requestOptions: {} },\n): Promise<CreateTranscriptionResponse> {\n  const result = await _createSend(context, audio, options);\n  return _createDeserialize(result);\n}\n"]}