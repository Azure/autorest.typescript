{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/files/index.ts"],"names":[],"mappings":"AAAA,kCAAkC;AASlC,OAAO,EACL,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,eAAe,EACf,QAAQ,GACT,MAAM,0BAA0B,CAAC;AA0BlC,MAAM,UAAU,QAAQ,CAAC,OAAsB;IAC7C,OAAO;QACL,IAAI,EAAE,CAAC,OAA0B,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC;QAC5D,MAAM,EAAE,CAAC,IAAuB,EAAE,OAA4B,EAAE,EAAE,CAChE,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC;QAChC,QAAQ,EAAE,CAAC,MAAc,EAAE,OAA8B,EAAE,EAAE,CAC3D,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;QACpC,eAAe,EAAE,CAAC,MAAc,EAAE,OAAqC,EAAE,EAAE,CACzE,eAAe,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;QAC3C,QAAQ,EAAE,CAAC,MAAc,EAAE,OAA8B,EAAE,EAAE,CAC3D,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;KACrC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,OAAsB;IACvD,OAAO;QACL,GAAG,QAAQ,CAAC,OAAO,CAAC;KACrB,CAAC;AACJ,CAAC","sourcesContent":["// Licensed under the MIT license.\n\nimport { OpenAIContext } from \"../../api/OpenAIContext.js\";\nimport {\n  OpenAIFile,\n  ListFilesResponse,\n  CreateFileRequest,\n  DeleteFileResponse,\n} from \"../../models/models.js\";\nimport {\n  list,\n  create,\n  retrieve,\n  deleteOperation,\n  download,\n} from \"../../api/files/index.js\";\nimport {\n  FilesListOptions,\n  FilesCreateOptions,\n  FilesRetrieveOptions,\n  FilesDeleteOperationOptions,\n  FilesDownloadOptions,\n} from \"../../models/options.js\";\n\nexport interface FilesOperations {\n  list: (options?: FilesListOptions) => Promise<ListFilesResponse>;\n  create: (\n    file: CreateFileRequest,\n    options?: FilesCreateOptions,\n  ) => Promise<OpenAIFile>;\n  retrieve: (\n    fileId: string,\n    options?: FilesRetrieveOptions,\n  ) => Promise<OpenAIFile>;\n  deleteOperation: (\n    fileId: string,\n    options?: FilesDeleteOperationOptions,\n  ) => Promise<DeleteFileResponse>;\n  download: (fileId: string, options?: FilesDownloadOptions) => Promise<string>;\n}\n\nexport function getFiles(context: OpenAIContext) {\n  return {\n    list: (options?: FilesListOptions) => list(context, options),\n    create: (file: CreateFileRequest, options?: FilesCreateOptions) =>\n      create(context, file, options),\n    retrieve: (fileId: string, options?: FilesRetrieveOptions) =>\n      retrieve(context, fileId, options),\n    deleteOperation: (fileId: string, options?: FilesDeleteOperationOptions) =>\n      deleteOperation(context, fileId, options),\n    download: (fileId: string, options?: FilesDownloadOptions) =>\n      download(context, fileId, options),\n  };\n}\n\nexport function getFilesOperations(context: OpenAIContext): FilesOperations {\n  return {\n    ...getFiles(context),\n  };\n}\n"]}