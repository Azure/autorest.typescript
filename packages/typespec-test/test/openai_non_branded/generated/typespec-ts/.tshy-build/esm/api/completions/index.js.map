{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/completions/index.ts"],"names":[],"mappings":"AAAA,kCAAkC;AAMlC,OAAO,EAGL,YAAY,GAEb,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAEL,mCAAmC,EACnC,eAAe,GAChB,MAAM,2BAA2B,CAAC;AAGnC,MAAM,UAAU,WAAW,CACzB,OAAe,EACf,IAA6B,EAC7B,UAAoC,EAAE,cAAc,EAAE,EAAE,EAAE;IAI1D,OAAO,OAAO;SACX,IAAI,CAAC,cAAc,CAAC;SACpB,IAAI,CAAC;QACJ,GAAG,mCAAmC,CAAC,OAAO,CAAC;QAC/C,IAAI,EAAE;YACJ,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;YACpB,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC;YAChC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC;YACnB,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC;YACZ,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC;YAC7B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;YAClB,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC;YACzC,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC;YAC3C,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC;YAC7B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;YAClB,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;YAClB,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC;SACxB;KACF,CAAC,CAAC;AACP,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,MAAuE;IAEvE,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO;QACL,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC7B,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QAC3B,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1C,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC;YACjB,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;YACf,QAAQ,EACN,CAAC,CAAC,QAAQ,KAAK,IAAI;gBACjB,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC;oBACE,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;oBAC5B,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC;oBAC3C,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC;oBACvC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC;iBACtC;YACP,YAAY,EAAE,CAAC,CAAC,eAAe,CAAC;SACjC,CAAC,CAAC;QACH,KAAK,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK;YACvB,CAAC,CAAC,SAAS;YACX,CAAC,CAAC;gBACE,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,eAAe,CAAC;gBAClD,gBAAgB,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,mBAAmB,CAAC;gBAC1D,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,cAAc,CAAC;aACjD;KACN,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,MAAM,CAC1B,OAAe,EACf,IAA6B,EAC7B,UAAoC,EAAE,cAAc,EAAE,EAAE,EAAE;IAE1D,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACzD,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC","sourcesContent":["// Licensed under the MIT license.\n\nimport {\n  CreateCompletionRequest,\n  CreateCompletionResponse,\n} from \"../../models/models.js\";\nimport {\n  CompletionsCreate200Response,\n  CompletionsCreateDefaultResponse,\n  isUnexpected,\n  OpenAIContext as Client,\n} from \"../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@typespec/ts-http-runtime\";\nimport { CompletionsCreateOptions } from \"../../models/options.js\";\n\nexport function _createSend(\n  context: Client,\n  body: CreateCompletionRequest,\n  options: CompletionsCreateOptions = { requestOptions: {} },\n): StreamableMethod<\n  CompletionsCreate200Response | CompletionsCreateDefaultResponse\n> {\n  return context\n    .path(\"/completions\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        model: body[\"model\"],\n        prompt: body[\"prompt\"],\n        suffix: body[\"suffix\"],\n        temperature: body[\"temperature\"],\n        top_p: body[\"topP\"],\n        n: body[\"n\"],\n        max_tokens: body[\"maxTokens\"],\n        stop: body[\"stop\"],\n        presence_penalty: body[\"presencePenalty\"],\n        frequency_penalty: body[\"frequencyPenalty\"],\n        logit_bias: body[\"logitBias\"],\n        user: body[\"user\"],\n        stream: body[\"stream\"],\n        logprobs: body[\"logprobs\"],\n        echo: body[\"echo\"],\n        best_of: body[\"bestOf\"],\n      },\n    });\n}\n\nexport async function _createDeserialize(\n  result: CompletionsCreate200Response | CompletionsCreateDefaultResponse,\n): Promise<CreateCompletionResponse> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    id: result.body[\"id\"],\n    object: result.body[\"object\"],\n    created: new Date(result.body[\"created\"]),\n    model: result.body[\"model\"],\n    choices: result.body[\"choices\"].map((p) => ({\n      index: p[\"index\"],\n      text: p[\"text\"],\n      logprobs:\n        p.logprobs === null\n          ? null\n          : {\n              tokens: p.logprobs[\"tokens\"],\n              tokenLogprobs: p.logprobs[\"token_logprobs\"],\n              topLogprobs: p.logprobs[\"top_logprobs\"],\n              textOffset: p.logprobs[\"text_offset\"],\n            },\n      finishReason: p[\"finish_reason\"],\n    })),\n    usage: !result.body.usage\n      ? undefined\n      : {\n          promptTokens: result.body.usage?.[\"prompt_tokens\"],\n          completionTokens: result.body.usage?.[\"completion_tokens\"],\n          totalTokens: result.body.usage?.[\"total_tokens\"],\n        },\n  };\n}\n\nexport async function create(\n  context: Client,\n  body: CreateCompletionRequest,\n  options: CompletionsCreateOptions = { requestOptions: {} },\n): Promise<CreateCompletionResponse> {\n  const result = await _createSend(context, body, options);\n  return _createDeserialize(result);\n}\n"]}