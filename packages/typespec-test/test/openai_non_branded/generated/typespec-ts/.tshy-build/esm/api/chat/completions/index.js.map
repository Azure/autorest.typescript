{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/api/chat/completions/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed under the MIT license.\n\nimport {\n  CreateChatCompletionRequest,\n  CreateChatCompletionResponse,\n} from \"../../../models/models.js\";\nimport {\n  ChatCompletionsCreate200Response,\n  ChatCompletionsCreateDefaultResponse,\n  isUnexpected,\n  OpenAIContext as Client,\n} from \"../../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@typespec/ts-http-runtime\";\nimport { ChatCompletionsCreateOptions } from \"../../../models/options.js\";\n\nexport function _createSend(\n  context: Client,\n  body: CreateChatCompletionRequest,\n  options: ChatCompletionsCreateOptions = { requestOptions: {} },\n): StreamableMethod<\n  ChatCompletionsCreate200Response | ChatCompletionsCreateDefaultResponse\n> {\n  return context\n    .path(\"/chat/completions\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        model: body[\"model\"],\n        messages: body[\"messages\"].map((p) => ({\n          role: p[\"role\"],\n          content: p[\"content\"],\n          name: p[\"name\"],\n          function_call: !p.functionCall\n            ? undefined\n            : {\n                name: p.functionCall?.[\"name\"],\n                arguments: p.functionCall?.[\"arguments\"],\n              },\n        })),\n        functions:\n          body[\"functions\"] === undefined\n            ? body[\"functions\"]\n            : body[\"functions\"].map((p) => ({\n                name: p[\"name\"],\n                description: p[\"description\"],\n                parameters: p[\"parameters\"],\n              })),\n        function_call: body[\"functionCall\"],\n        temperature: body[\"temperature\"],\n        top_p: body[\"topP\"],\n        n: body[\"n\"],\n        max_tokens: body[\"maxTokens\"],\n        stop: body[\"stop\"],\n        presence_penalty: body[\"presencePenalty\"],\n        frequency_penalty: body[\"frequencyPenalty\"],\n        logit_bias: body[\"logitBias\"],\n        user: body[\"user\"],\n        stream: body[\"stream\"],\n      },\n    });\n}\n\nexport async function _createDeserialize(\n  result:\n    | ChatCompletionsCreate200Response\n    | ChatCompletionsCreateDefaultResponse,\n): Promise<CreateChatCompletionResponse> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    id: result.body[\"id\"],\n    object: result.body[\"object\"],\n    created: new Date(result.body[\"created\"]),\n    model: result.body[\"model\"],\n    choices: result.body[\"choices\"].map((p) => ({\n      index: p[\"index\"],\n      message: {\n        role: p.message[\"role\"],\n        content: p.message[\"content\"],\n        functionCall: !p.message.function_call\n          ? undefined\n          : {\n              name: p.message.function_call?.[\"name\"],\n              arguments: p.message.function_call?.[\"arguments\"],\n            },\n      },\n      finishReason: p[\"finish_reason\"],\n    })),\n    usage: !result.body.usage\n      ? undefined\n      : {\n          promptTokens: result.body.usage?.[\"prompt_tokens\"],\n          completionTokens: result.body.usage?.[\"completion_tokens\"],\n          totalTokens: result.body.usage?.[\"total_tokens\"],\n        },\n  };\n}\n\nexport async function create(\n  context: Client,\n  body: CreateChatCompletionRequest,\n  options: ChatCompletionsCreateOptions = { requestOptions: {} },\n): Promise<CreateChatCompletionResponse> {\n  const result = await _createSend(context, body, options);\n  return _createDeserialize(result);\n}\n"]}