{"version":3,"file":"openAIClient.js","sourceRoot":"","sources":["../../../src/rest/openAIClient.ts"],"names":[],"mappings":"AAAA,kCAAkC;AAElC,OAAO,EAAE,SAAS,EAAiB,MAAM,2BAA2B,CAAC;AAIrE;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,YAAY,CAClC,WAA0B,EAC1B,UAAyB,EAAE;IAE3B,MAAM,WAAW,GACf,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,OAAO,IAAI,2BAA2B,CAAC;IACrE,MAAM,aAAa,GAAG,+CAA+C,CAAC;IACtE,MAAM,eAAe,GACnB,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,CAAC,eAAe;QAClE,CAAC,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,IAAI,aAAa,EAAE;QAChE,CAAC,CAAC,GAAG,aAAa,EAAE,CAAC;IACzB,OAAO,GAAG;QACR,GAAG,OAAO;QACV,gBAAgB,EAAE;YAChB,eAAe;SAChB;KACF,CAAC;IAEF,MAAM,MAAM,GAAG,SAAS,CAAC,WAAW,EAAE,OAAO,CAAkB,CAAC;IAEhE,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAE3D,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;QACxB,IAAI,EAAE,2BAA2B;QACjC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI;YAC7B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;YAClE,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC;KACF,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Licensed under the MIT license.\n\nimport { getClient, ClientOptions } from \"@typespec/ts-http-runtime\";\nimport { KeyCredential } from \"@typespec/ts-http-runtime\";\nimport { OpenAIContext } from \"./clientDefinitions.js\";\n\n/**\n * Initialize a new instance of `OpenAIContext`\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  credentials: KeyCredential,\n  options: ClientOptions = {},\n): OpenAIContext {\n  const endpointUrl =\n    options.endpoint ?? options.baseUrl ?? `https://api.openai.com/v1`;\n  const userAgentInfo = `azsdk-js-openai-non-branded-rest/1.0.0-beta.1`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n  };\n\n  const client = getClient(endpointUrl, options) as OpenAIContext;\n\n  client.pipeline.removePolicy({ name: \"ApiVersionPolicy\" });\n\n  client.pipeline.addPolicy({\n    name: \"customKeyCredentialPolicy\",\n    async sendRequest(request, next) {\n      request.headers.set(\"Authorization\", \"bearer \" + credentials.key);\n      return next(request);\n    },\n  });\n  return client;\n}\n"]}