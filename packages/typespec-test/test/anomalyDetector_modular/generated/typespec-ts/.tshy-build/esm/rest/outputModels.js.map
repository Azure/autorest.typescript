{"version":3,"file":"outputModels.js","sourceRoot":"","sources":["../../../src/rest/outputModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/** The response of entire anomaly detection. */\nexport interface UnivariateUnivariateEntireDetectionResultOutput {\n  /**\n   * Frequency extracted from the series, zero means no recurrent pattern has been\n   * found.\n   */\n  period: number;\n  /**\n   * ExpectedValues contain expected value for each input point. The index of the\n   * array is consistent with the input series.\n   */\n  expectedValues: number[];\n  /**\n   * UpperMargins contain upper margin of each input point. UpperMargin is used to\n   * calculate upperBoundary, which equals to expectedValue + (100 -\n   * marginScale)*upperMargin. Anomalies in response can be filtered by\n   * upperBoundary and lowerBoundary. By adjusting marginScale value, less\n   * significant anomalies can be filtered in client side. The index of the array is\n   * consistent with the input series.\n   */\n  upperMargins: number[];\n  /**\n   * LowerMargins contain lower margin of each input point. LowerMargin is used to\n   * calculate lowerBoundary, which equals to expectedValue - (100 -\n   * marginScale)*lowerMargin. Points between the boundary can be marked as normal\n   * ones in client side. The index of the array is consistent with the input\n   * series.\n   */\n  lowerMargins: number[];\n  /**\n   * IsAnomaly contains anomaly properties for each input point. True means an\n   * anomaly either negative or positive has been detected. The index of the array\n   * is consistent with the input series.\n   */\n  isAnomaly: boolean[];\n  /**\n   * IsNegativeAnomaly contains anomaly status in negative direction for each input\n   * point. True means a negative anomaly has been detected. A negative anomaly\n   * means the point is detected as an anomaly and its real value is smaller than\n   * the expected one. The index of the array is consistent with the input series.\n   */\n  isNegativeAnomaly: boolean[];\n  /**\n   * IsPositiveAnomaly contain anomaly status in positive direction for each input\n   * point. True means a positive anomaly has been detected. A positive anomaly\n   * means the point is detected as an anomaly and its real value is larger than the\n   * expected one. The index of the array is consistent with the input series.\n   */\n  isPositiveAnomaly: boolean[];\n  /**\n   * The severity score for each input point. The larger the value is, the more\n   * sever the anomaly is. For normal points, the \"severity\" is always 0.\n   */\n  severity?: number[];\n}\n\n/** Error information returned by the API. */\nexport interface UnivariateAnomalyDetectorErrorOutput {\n  /**\n   * The error code.\n   *\n   * Possible values: \"InvalidCustomInterval\", \"BadArgument\", \"InvalidGranularity\", \"InvalidPeriod\", \"InvalidModelArgument\", \"InvalidSeries\", \"InvalidJsonFormat\", \"RequiredGranularity\", \"RequiredSeries\", \"InvalidImputeMode\", \"InvalidImputeFixedValue\"\n   */\n  code?: string;\n  /** A message explaining the error reported by the service. */\n  message?: string;\n}\n\n/** The response of last anomaly detection. */\nexport interface UnivariateUnivariateLastDetectionResultOutput {\n  /**\n   * Frequency extracted from the series, zero means no recurrent pattern has been\n   * found.\n   */\n  period: number;\n  /** Suggested input series points needed for detecting the latest point. */\n  suggestedWindow: number;\n  /** Expected value of the latest point. */\n  expectedValue: number;\n  /**\n   * Upper margin of the latest point. UpperMargin is used to calculate\n   * upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin.\n   * If the value of latest point is between upperBoundary and lowerBoundary, it\n   * should be treated as normal value. By adjusting marginScale value, anomaly\n   * status of latest point can be changed.\n   */\n  upperMargin: number;\n  /**\n   * Lower margin of the latest point. LowerMargin is used to calculate\n   * lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin.\n   *\n   */\n  lowerMargin: number;\n  /**\n   * Anomaly status of the latest point, true means the latest point is an anomaly\n   * either in negative direction or positive direction.\n   */\n  isAnomaly: boolean;\n  /**\n   * Anomaly status in negative direction of the latest point. True means the latest\n   * point is an anomaly and its real value is smaller than the expected one.\n   */\n  isNegativeAnomaly: boolean;\n  /**\n   * Anomaly status in positive direction of the latest point. True means the latest\n   * point is an anomaly and its real value is larger than the expected one.\n   */\n  isPositiveAnomaly: boolean;\n  /**\n   * The severity score for the last input point. The larger the value is, the more\n   * sever the anomaly is. For normal points, the \"severity\" is always 0.\n   */\n  severity?: number;\n}\n\n/** The response of change point detection. */\nexport interface UnivariateUnivariateChangePointDetectionResultOutput {\n  /**\n   * Frequency extracted from the series, zero means no recurrent pattern has been\n   * found.\n   */\n  readonly period?: number;\n  /**\n   * isChangePoint contains change point properties for each input point. True means\n   * an anomaly either negative or positive has been detected. The index of the\n   * array is consistent with the input series.\n   */\n  isChangePoint?: boolean[];\n  /** the change point confidence of each point */\n  confidenceScores?: number[];\n}\n\n/** Detection results for the given resultId. */\nexport interface MultivariateMultivariateDetectionResultOutput {\n  /** Result identifier, which is used to fetch the results of an inference call. */\n  readonly resultId: string;\n  /** Multivariate anomaly detection status. */\n  summary: MultivariateMultivariateBatchDetectionResultSummaryOutput;\n  /** Detection result for each timestamp. */\n  results: Array<MultivariateAnomalyStateOutput>;\n}\n\n/** Multivariate anomaly detection status. */\nexport interface MultivariateMultivariateBatchDetectionResultSummaryOutput {\n  /** Status of detection results. One of CREATED, RUNNING, READY, and FAILED. */\n  status: \"CREATED\" | \"RUNNING\" | \"READY\" | \"FAILED\";\n  /** Error message when detection is failed. */\n  errors?: Array<MultivariateErrorResponseOutput>;\n  /** Variable Status. */\n  variableStates?: Array<MultivariateVariableStateOutput>;\n  /**\n   * Detection request for batch inference. This is an asynchronous inference which\n   * will need another API to get detection results.\n   */\n  setupInfo: MultivariateMultivariateBatchDetectionOptionsOutput;\n}\n\n/** ErrorResponse contains code and message that shows the error information. */\nexport interface MultivariateErrorResponseOutput {\n  /** The error code. */\n  code: string;\n  /** The message explaining the error reported by the service. */\n  message: string;\n}\n\n/** Variable Status. */\nexport interface MultivariateVariableStateOutput {\n  /** Variable name in variable states. */\n  variable?: string;\n  /** Proportion of missing values that need to be filled by fillNAMethod. */\n  filledNARatio?: number;\n  /** Number of effective data points before applying fillNAMethod. */\n  effectiveCount?: number;\n  /** First valid timestamp with value of input data. */\n  firstTimestamp?: string;\n  /** Last valid timestamp with value of input data. */\n  lastTimestamp?: string;\n}\n\n/**\n * Detection request for batch inference. This is an asynchronous inference which\n * will need another API to get detection results.\n */\nexport interface MultivariateMultivariateBatchDetectionOptionsOutput {\n  /**\n   * Source link to the input data to indicate an accessible Azure storage Uri,\n   * either pointed to an Azure blob storage folder, or pointed to a CSV file in\n   * Azure blob storage based on you data schema selection. The data schema should\n   * be exactly the same with those used in the training phase.\n   */\n  dataSource: string;\n  /**\n   * An optional field, which is used to specify the number of top contributed\n   * variables for one anomalous timestamp in the response. The default number is\n   * 10.\n   */\n  topContributorCount: number;\n  /**\n   * A required field, indicating the start time of data for detection, which should\n   * be date-time of ISO 8601 format.\n   */\n  startTime: string;\n  /**\n   * A required field, indicating the end time of data for detection, which should\n   * be date-time of ISO 8601 format.\n   */\n  endTime: string;\n}\n\n/** Anomaly status and information. */\nexport interface MultivariateAnomalyStateOutput {\n  /** The timestamp for this anomaly. */\n  timestamp: string;\n  /** The detailed value of this anomalous timestamp. */\n  value?: MultivariateAnomalyValueOutput;\n  /** Error message for the current timestamp. */\n  errors?: Array<MultivariateErrorResponseOutput>;\n}\n\n/** Detailed information of the anomalous timestamp. */\nexport interface MultivariateAnomalyValueOutput {\n  /** True if an anomaly is detected at the current timestamp. */\n  isAnomaly: boolean;\n  /**\n   * Indicates the significance of the anomaly. The higher the severity, the more\n   * significant the anomaly is.\n   */\n  severity: number;\n  /**\n   * Raw anomaly score of severity, will help indicate the degree of abnormality as\n   * well.\n   */\n  score: number;\n  /** Interpretation of this anomalous timestamp. */\n  interpretation?: Array<MultivariateAnomalyInterpretationOutput>;\n}\n\n/** Interpretation of the anomalous timestamp. */\nexport interface MultivariateAnomalyInterpretationOutput {\n  /** Variable. */\n  variable?: string;\n  /**\n   * This score shows the percentage contributing to the anomalous timestamp. A\n   * number between 0 and 1.\n   */\n  contributionScore?: number;\n  /** Correlation changes among the anomalous variables */\n  correlationChanges?: MultivariateCorrelationChangesOutput;\n}\n\n/** Correlation changes among the anomalous variables */\nexport interface MultivariateCorrelationChangesOutput {\n  /** The correlated variables that have correlation changes under an anomaly. */\n  changedVariables?: string[];\n}\n\n/** Error response */\nexport interface MultivariateResponseErrorOutput {\n  /** The error code. */\n  code: string;\n  /** The message explaining the error reported by the service. */\n  message: string;\n}\n\n/**\n * Training result of a model including its status, errors and diagnostics\n * information.\n */\nexport interface MultivariateModelInfoOutput {\n  /**\n   * Source link to the input data to indicate an accessible Azure storage Uri,\n   * either pointed to an Azure blob storage folder, or pointed to a CSV file in\n   * Azure blob storage based on you data schema selection.\n   */\n  dataSource: string;\n  /**\n   * Data schema of input data source: OneTable or MultiTable. The default\n   * DataSchema is OneTable.\n   *\n   * Possible values: \"OneTable\", \"MultiTable\"\n   */\n  dataSchema?: string;\n  /**\n   * A required field, indicating the start time of training data, which should be\n   * date-time of ISO 8601 format.\n   */\n  startTime: string;\n  /**\n   * A required field, indicating the end time of training data, which should be\n   * date-time of ISO 8601 format.\n   */\n  endTime: string;\n  /**\n   * An optional field. The display name of the model whose maximum length is 24\n   * characters.\n   */\n  displayName?: string;\n  /**\n   * An optional field, indicating how many previous timestamps will be used to\n   * detect whether the timestamp is anomaly or not.\n   */\n  slidingWindow?: number;\n  /** An optional field, indicating the manner to align multiple variables. */\n  alignPolicy?: MultivariateAlignPolicyOutput;\n  /** Model status. One of CREATED, RUNNING, READY, and FAILED. */\n  status?: \"CREATED\" | \"RUNNING\" | \"READY\" | \"FAILED\";\n  /** Error messages when failed to create a model. */\n  readonly errors?: Array<MultivariateErrorResponseOutput>;\n  /** Diagnostics information to help inspect the states of model or variable. */\n  diagnosticsInfo?: MultivariateDiagnosticsInfoOutput;\n}\n\n/** An optional field, indicating the manner to align multiple variables. */\nexport interface MultivariateAlignPolicyOutput {\n  /**\n   * An optional field, indicating how to align different variables to the same\n   * time-range. Either Inner or Outer.\n   */\n  alignMode?: \"Inner\" | \"Outer\";\n  /**\n   * An optional field, indicating how missing values will be filled. One of\n   * Previous, Subsequent, Linear, Zero, Fixed.\n   *\n   * Possible values: \"Previous\", \"Subsequent\", \"Linear\", \"Zero\", \"Fixed\"\n   */\n  fillNAMethod?: string;\n  /** An optional field. Required when fillNAMethod is Fixed. */\n  paddingValue?: number;\n}\n\n/** Diagnostics information to help inspect the states of model or variable. */\nexport interface MultivariateDiagnosticsInfoOutput {\n  /** Model status. */\n  modelState?: MultivariateModelStateOutput;\n  /** Variable Status. */\n  variableStates?: Array<MultivariateVariableStateOutput>;\n}\n\n/** Model status. */\nexport interface MultivariateModelStateOutput {\n  /**\n   * This indicates the number of passes of the entire training dataset the\n   * algorithm has completed.\n   */\n  epochIds?: number[];\n  /**\n   * List of metrics used to assess how the model fits the training data for each\n   * epoch.\n   */\n  trainLosses?: number[];\n  /**\n   * List of metrics used to assess how the model fits the validation set for each\n   * epoch.\n   */\n  validationLosses?: number[];\n  /** Latency for each epoch. */\n  latenciesInSeconds?: number[];\n}\n\n/** Response of getting a model. */\nexport interface MultivariateAnomalyDetectionModelOutput {\n  /** Model identifier. */\n  readonly modelId: string;\n  /** Date and time (UTC) when the model was created. */\n  createdTime: string;\n  /** Date and time (UTC) when the model was last updated. */\n  lastUpdatedTime: string;\n  /**\n   * Training result of a model including its status, errors and diagnostics\n   * information.\n   */\n  modelInfo?: MultivariateModelInfoOutput;\n}\n\n/** Response of listing models. */\nexport interface MultivariateModelListOutput {\n  /** List of models. */\n  models: Array<MultivariateAnomalyDetectionModelOutput>;\n  /** Number of trained multivariate models. */\n  currentCount: number;\n  /** Maximum number of models that can be trained for this Anomaly Detector resource. */\n  maxCount: number;\n  /** The link to fetch more models. */\n  nextLink?: string;\n}\n\n/** Results of last detection. */\nexport interface MultivariateMultivariateLastDetectionResultOutput {\n  /** Variable Status. */\n  variableStates?: Array<MultivariateVariableStateOutput>;\n  /** Anomaly status and information. */\n  results?: Array<MultivariateAnomalyStateOutput>;\n}\n"]}