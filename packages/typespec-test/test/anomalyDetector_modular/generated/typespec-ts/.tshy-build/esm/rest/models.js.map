{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/rest/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/** The request of entire or last anomaly detection. */\nexport interface UnivariateUnivariateDetectionOptions {\n  /**\n   * Time series data points. Points should be sorted by timestamp in ascending\n   * order to match the anomaly detection result. If the data is not sorted\n   * correctly or there is duplicated timestamp, the API will not work. In such\n   * case, an error message will be returned.\n   */\n  series: Array<UnivariateTimeSeriesPoint>;\n  /**\n   * Optional argument, can be one of yearly, monthly, weekly, daily, hourly,\n   * minutely, secondly, microsecond or none. If granularity is not present, it will\n   * be none by default. If granularity is none, the timestamp property in time\n   * series point can be absent.\n   */\n  granularity?:\n    | \"yearly\"\n    | \"monthly\"\n    | \"weekly\"\n    | \"daily\"\n    | \"hourly\"\n    | \"minutely\"\n    | \"secondly\"\n    | \"microsecond\"\n    | \"none\";\n  /**\n   * Custom Interval is used to set non-standard time interval, for example, if the\n   * series is 5 minutes, request can be set as {\"granularity\":\"minutely\",\n   * \"customInterval\":5}.\n   */\n  customInterval?: number;\n  /**\n   * Optional argument, periodic value of a time series. If the value is null or\n   * does not present, the API will determine the period automatically.\n   */\n  period?: number;\n  /** Optional argument, advanced model parameter, max anomaly ratio in a time series. */\n  maxAnomalyRatio?: number;\n  /**\n   * Optional argument, advanced model parameter, between 0-99, the lower the value\n   * is, the larger the margin value will be which means less anomalies will be\n   * accepted.\n   */\n  sensitivity?: number;\n  /**\n   * Used to specify how to deal with missing values in the input series, it's used\n   * when granularity is not \"none\".\n   *\n   * Possible values: \"auto\", \"previous\", \"linear\", \"fixed\", \"zero\", \"notFill\"\n   */\n  imputeMode?: string;\n  /**\n   * Used to specify the value to fill, it's used when granularity is not \"none\"\n   * and imputeMode is \"fixed\".\n   */\n  imputeFixedValue?: number;\n}\n\n/** The definition of input timeseries points. */\nexport interface UnivariateTimeSeriesPoint {\n  /** Optional argument, timestamp of a data point (ISO8601 format). */\n  timestamp?: Date | string;\n  /** The measurement of that point, should be float. */\n  value: number;\n}\n\n/** The request of change point detection. */\nexport interface UnivariateUnivariateChangePointDetectionOptions {\n  /**\n   * Time series data points. Points should be sorted by timestamp in ascending\n   * order to match the change point detection result.\n   */\n  series: Array<UnivariateTimeSeriesPoint>;\n  /**\n   * Can only be one of yearly, monthly, weekly, daily, hourly, minutely or\n   * secondly. Granularity is used for verify whether input series is valid.\n   */\n  granularity:\n    | \"yearly\"\n    | \"monthly\"\n    | \"weekly\"\n    | \"daily\"\n    | \"hourly\"\n    | \"minutely\"\n    | \"secondly\"\n    | \"microsecond\"\n    | \"none\";\n  /**\n   * Custom Interval is used to set non-standard time interval, for example, if the\n   * series is 5 minutes, request can be set as {\"granularity\":\"minutely\",\n   * \"customInterval\":5}.\n   */\n  customInterval?: number;\n  /**\n   * Optional argument, periodic value of a time series. If the value is null or\n   * does not present, the API will determine the period automatically.\n   */\n  period?: number;\n  /**\n   * Optional argument, advanced model parameter, a default stableTrendWindow will\n   * be used in detection.\n   */\n  stableTrendWindow?: number;\n  /**\n   * Optional argument, advanced model parameter, between 0.0-1.0, the lower the\n   * value is, the larger the trend error will be which means less change point will\n   * be accepted.\n   */\n  threshold?: number;\n}\n\n/** ErrorResponse contains code and message that shows the error information. */\nexport interface MultivariateErrorResponse {\n  /** The error code. */\n  code: string;\n  /** The message explaining the error reported by the service. */\n  message: string;\n}\n\n/** Variable Status. */\nexport interface MultivariateVariableState {\n  /** Variable name in variable states. */\n  variable?: string;\n  /** Proportion of missing values that need to be filled by fillNAMethod. */\n  filledNARatio?: number;\n  /** Number of effective data points before applying fillNAMethod. */\n  effectiveCount?: number;\n  /** First valid timestamp with value of input data. */\n  firstTimestamp?: Date | string;\n  /** Last valid timestamp with value of input data. */\n  lastTimestamp?: Date | string;\n}\n\n/**\n * Detection request for batch inference. This is an asynchronous inference which\n * will need another API to get detection results.\n */\nexport interface MultivariateMultivariateBatchDetectionOptions {\n  /**\n   * Source link to the input data to indicate an accessible Azure storage Uri,\n   * either pointed to an Azure blob storage folder, or pointed to a CSV file in\n   * Azure blob storage based on you data schema selection. The data schema should\n   * be exactly the same with those used in the training phase.\n   */\n  dataSource: string;\n  /**\n   * An optional field, which is used to specify the number of top contributed\n   * variables for one anomalous timestamp in the response. The default number is\n   * 10.\n   */\n  topContributorCount: number;\n  /**\n   * A required field, indicating the start time of data for detection, which should\n   * be date-time of ISO 8601 format.\n   */\n  startTime: Date | string;\n  /**\n   * A required field, indicating the end time of data for detection, which should\n   * be date-time of ISO 8601 format.\n   */\n  endTime: Date | string;\n}\n\n/**\n * Training result of a model including its status, errors and diagnostics\n * information.\n */\nexport interface MultivariateModelInfo {\n  /**\n   * Source link to the input data to indicate an accessible Azure storage Uri,\n   * either pointed to an Azure blob storage folder, or pointed to a CSV file in\n   * Azure blob storage based on you data schema selection.\n   */\n  dataSource: string;\n  /**\n   * Data schema of input data source: OneTable or MultiTable. The default\n   * DataSchema is OneTable.\n   *\n   * Possible values: \"OneTable\", \"MultiTable\"\n   */\n  dataSchema?: string;\n  /**\n   * A required field, indicating the start time of training data, which should be\n   * date-time of ISO 8601 format.\n   */\n  startTime: Date | string;\n  /**\n   * A required field, indicating the end time of training data, which should be\n   * date-time of ISO 8601 format.\n   */\n  endTime: Date | string;\n  /**\n   * An optional field. The display name of the model whose maximum length is 24\n   * characters.\n   */\n  displayName?: string;\n  /**\n   * An optional field, indicating how many previous timestamps will be used to\n   * detect whether the timestamp is anomaly or not.\n   */\n  slidingWindow?: number;\n  /** An optional field, indicating the manner to align multiple variables. */\n  alignPolicy?: MultivariateAlignPolicy;\n  /** Model status. One of CREATED, RUNNING, READY, and FAILED. */\n  status?: \"CREATED\" | \"RUNNING\" | \"READY\" | \"FAILED\";\n  /** Diagnostics information to help inspect the states of model or variable. */\n  diagnosticsInfo?: MultivariateDiagnosticsInfo;\n}\n\n/** An optional field, indicating the manner to align multiple variables. */\nexport interface MultivariateAlignPolicy {\n  /**\n   * An optional field, indicating how to align different variables to the same\n   * time-range. Either Inner or Outer.\n   */\n  alignMode?: \"Inner\" | \"Outer\";\n  /**\n   * An optional field, indicating how missing values will be filled. One of\n   * Previous, Subsequent, Linear, Zero, Fixed.\n   *\n   * Possible values: \"Previous\", \"Subsequent\", \"Linear\", \"Zero\", \"Fixed\"\n   */\n  fillNAMethod?: string;\n  /** An optional field. Required when fillNAMethod is Fixed. */\n  paddingValue?: number;\n}\n\n/** Diagnostics information to help inspect the states of model or variable. */\nexport interface MultivariateDiagnosticsInfo {\n  /** Model status. */\n  modelState?: MultivariateModelState;\n  /** Variable Status. */\n  variableStates?: Array<MultivariateVariableState>;\n}\n\n/** Model status. */\nexport interface MultivariateModelState {\n  /**\n   * This indicates the number of passes of the entire training dataset the\n   * algorithm has completed.\n   */\n  epochIds?: number[];\n  /**\n   * List of metrics used to assess how the model fits the training data for each\n   * epoch.\n   */\n  trainLosses?: number[];\n  /**\n   * List of metrics used to assess how the model fits the validation set for each\n   * epoch.\n   */\n  validationLosses?: number[];\n  /** Latency for each epoch. */\n  latenciesInSeconds?: number[];\n}\n\n/** Request of last detection. */\nexport interface MultivariateMultivariateLastDetectionOptions {\n  /**\n   * This contains the inference data, including the name, timestamps(ISO 8601) and\n   * values of variables.\n   */\n  variables: Array<MultivariateVariableValues>;\n  /**\n   * An optional field, which is used to specify the number of top contributed\n   * variables for one anomalous timestamp in the response. The default number is\n   * 10.\n   */\n  topContributorCount: number;\n}\n\n/** Variable values. */\nexport interface MultivariateVariableValues {\n  /** Variable name of last detection request. */\n  variable: string;\n  /** Timestamps of last detection request */\n  timestamps: string[];\n  /** Values of variables. */\n  values: number[];\n}\n"]}