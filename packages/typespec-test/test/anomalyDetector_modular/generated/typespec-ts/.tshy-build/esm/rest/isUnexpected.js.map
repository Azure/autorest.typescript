{"version":3,"file":"isUnexpected.js","sourceRoot":"","sources":["../../../src/rest/isUnexpected.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  DetectUnivariateEntireSeries200Response,\n  DetectUnivariateEntireSeriesDefaultResponse,\n  DetectUnivariateLastPoint200Response,\n  DetectUnivariateLastPointDefaultResponse,\n  DetectUnivariateChangePoint200Response,\n  DetectUnivariateChangePointDefaultResponse,\n  GetMultivariateBatchDetectionResult200Response,\n  GetMultivariateBatchDetectionResultDefaultResponse,\n  TrainMultivariateModel201Response,\n  TrainMultivariateModelDefaultResponse,\n  ListMultivariateModels200Response,\n  ListMultivariateModelsDefaultResponse,\n  DeleteMultivariateModel204Response,\n  DeleteMultivariateModelDefaultResponse,\n  GetMultivariateModel200Response,\n  GetMultivariateModelDefaultResponse,\n  DetectMultivariateBatchAnomaly202Response,\n  DetectMultivariateBatchAnomalyDefaultResponse,\n  DetectMultivariateLastAnomaly200Response,\n  DetectMultivariateLastAnomalyDefaultResponse,\n} from \"./responses.js\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /timeseries/entire/detect\": [\"200\"],\n  \"POST /timeseries/last/detect\": [\"200\"],\n  \"POST /timeseries/changepoint/detect\": [\"200\"],\n  \"GET /multivariate/detect-batch/{resultId}\": [\"200\"],\n  \"POST /multivariate/models\": [\"201\"],\n  \"GET /multivariate/models\": [\"200\"],\n  \"DELETE /multivariate/models/{modelId}\": [\"204\"],\n  \"GET /multivariate/models/{modelId}\": [\"200\"],\n  \"POST /multivariate/models/{modelId}:detect-batch\": [\"202\"],\n  \"POST /multivariate/models/{modelId}:detect-last\": [\"200\"],\n};\n\nexport function isUnexpected(\n  response:\n    | DetectUnivariateEntireSeries200Response\n    | DetectUnivariateEntireSeriesDefaultResponse,\n): response is DetectUnivariateEntireSeriesDefaultResponse;\nexport function isUnexpected(\n  response:\n    | DetectUnivariateLastPoint200Response\n    | DetectUnivariateLastPointDefaultResponse,\n): response is DetectUnivariateLastPointDefaultResponse;\nexport function isUnexpected(\n  response:\n    | DetectUnivariateChangePoint200Response\n    | DetectUnivariateChangePointDefaultResponse,\n): response is DetectUnivariateChangePointDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetMultivariateBatchDetectionResult200Response\n    | GetMultivariateBatchDetectionResultDefaultResponse,\n): response is GetMultivariateBatchDetectionResultDefaultResponse;\nexport function isUnexpected(\n  response:\n    | TrainMultivariateModel201Response\n    | TrainMultivariateModelDefaultResponse,\n): response is TrainMultivariateModelDefaultResponse;\nexport function isUnexpected(\n  response:\n    | ListMultivariateModels200Response\n    | ListMultivariateModelsDefaultResponse,\n): response is ListMultivariateModelsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | DeleteMultivariateModel204Response\n    | DeleteMultivariateModelDefaultResponse,\n): response is DeleteMultivariateModelDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetMultivariateModel200Response\n    | GetMultivariateModelDefaultResponse,\n): response is GetMultivariateModelDefaultResponse;\nexport function isUnexpected(\n  response:\n    | DetectMultivariateBatchAnomaly202Response\n    | DetectMultivariateBatchAnomalyDefaultResponse,\n): response is DetectMultivariateBatchAnomalyDefaultResponse;\nexport function isUnexpected(\n  response:\n    | DetectMultivariateLastAnomaly200Response\n    | DetectMultivariateLastAnomalyDefaultResponse,\n): response is DetectMultivariateLastAnomalyDefaultResponse;\nexport function isUnexpected(\n  response:\n    | DetectUnivariateEntireSeries200Response\n    | DetectUnivariateEntireSeriesDefaultResponse\n    | DetectUnivariateLastPoint200Response\n    | DetectUnivariateLastPointDefaultResponse\n    | DetectUnivariateChangePoint200Response\n    | DetectUnivariateChangePointDefaultResponse\n    | GetMultivariateBatchDetectionResult200Response\n    | GetMultivariateBatchDetectionResultDefaultResponse\n    | TrainMultivariateModel201Response\n    | TrainMultivariateModelDefaultResponse\n    | ListMultivariateModels200Response\n    | ListMultivariateModelsDefaultResponse\n    | DeleteMultivariateModel204Response\n    | DeleteMultivariateModelDefaultResponse\n    | GetMultivariateModel200Response\n    | GetMultivariateModelDefaultResponse\n    | DetectMultivariateBatchAnomaly202Response\n    | DetectMultivariateBatchAnomalyDefaultResponse\n    | DetectMultivariateLastAnomaly200Response\n    | DetectMultivariateLastAnomalyDefaultResponse,\n): response is\n  | DetectUnivariateEntireSeriesDefaultResponse\n  | DetectUnivariateLastPointDefaultResponse\n  | DetectUnivariateChangePointDefaultResponse\n  | GetMultivariateBatchDetectionResultDefaultResponse\n  | TrainMultivariateModelDefaultResponse\n  | ListMultivariateModelsDefaultResponse\n  | DeleteMultivariateModelDefaultResponse\n  | GetMultivariateModelDefaultResponse\n  | DetectMultivariateBatchAnomalyDefaultResponse\n  | DetectMultivariateLastAnomalyDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (\n      let i = candidateParts.length - 1, j = pathParts.length - 1;\n      i >= 1 && j >= 1;\n      i--, j--\n    ) {\n      if (\n        candidateParts[i]?.startsWith(\"{\") &&\n        candidateParts[i]?.indexOf(\"}\") !== -1\n      ) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(\n          `${candidateParts[i]?.slice(start, end)}`,\n        ).test(pathParts[j] || \"\");\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n"]}