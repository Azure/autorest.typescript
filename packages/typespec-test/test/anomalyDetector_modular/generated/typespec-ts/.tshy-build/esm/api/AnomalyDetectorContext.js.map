{"version":3,"file":"AnomalyDetectorContext.js","sourceRoot":"","sources":["../../../src/api/AnomalyDetectorContext.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAKlC,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAMzC;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,qBAAqB,CACnC,QAAgB,EAChB,UAAyB,EACzB,UAAwC,EAAE;IAE1C,MAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IAC/D,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { ClientOptions } from \"@azure-rest/core-client\";\nimport { AnomalyDetectorContext } from \"../rest/index.js\";\nimport getClient from \"../rest/index.js\";\n\nexport interface AnomalyDetectorClientOptions extends ClientOptions {}\n\nexport { AnomalyDetectorContext } from \"../rest/index.js\";\n\n/**\n * The Anomaly Detector API detects anomalies automatically in time series data.\n * It supports two kinds of mode, one is for stateless using, another is for\n * stateful using. In stateless mode, there are three functionalities. Entire\n * Detect is for detecting the whole series with model trained by the time series,\n * Last Detect is detecting last point with model trained by points before.\n * ChangePoint Detect is for detecting trend changes in time series. In stateful\n * mode, user can store time series, the stored time series will be used for\n * detection anomalies. Under this mode, user can still use the above three\n * functionalities by only giving a time range without preparing time series in\n * client side. Besides the above three functionalities, stateful model also\n * provide group based detection and labeling service. By leveraging labeling\n * service user can provide labels for each detection result, these labels will be\n * used for retuning or regenerating detection models. Inconsistency detection is\n * a kind of group based detection, this detection will find inconsistency ones in\n * a set of time series. By using anomaly detector service, business customers can\n * discover incidents and establish a logic flow for root cause analysis.\n */\nexport function createAnomalyDetector(\n  endpoint: string,\n  credential: KeyCredential,\n  options: AnomalyDetectorClientOptions = {},\n): AnomalyDetectorContext {\n  const clientContext = getClient(endpoint, credential, options);\n  return clientContext;\n}\n"]}