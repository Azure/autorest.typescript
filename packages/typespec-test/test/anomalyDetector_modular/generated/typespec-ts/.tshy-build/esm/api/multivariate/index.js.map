{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/multivariate/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  MultivariateMultivariateDetectionResult,\n  MultivariateMultivariateBatchDetectionOptions,\n  MultivariateModelInfo,\n  MultivariateAnomalyDetectionModel,\n  MultivariateModelList,\n  MultivariateMultivariateLastDetectionOptions,\n  MultivariateMultivariateLastDetectionResult,\n} from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { buildPagedAsyncIterator } from \"../pagingHelpers.js\";\nimport {\n  isUnexpected,\n  AnomalyDetectorContext as Client,\n  DeleteMultivariateModel204Response,\n  DeleteMultivariateModelDefaultResponse,\n  DetectMultivariateBatchAnomaly202Response,\n  DetectMultivariateBatchAnomalyDefaultResponse,\n  DetectMultivariateLastAnomaly200Response,\n  DetectMultivariateLastAnomalyDefaultResponse,\n  GetMultivariateBatchDetectionResult200Response,\n  GetMultivariateBatchDetectionResultDefaultResponse,\n  GetMultivariateModel200Response,\n  GetMultivariateModelDefaultResponse,\n  ListMultivariateModels200Response,\n  ListMultivariateModelsDefaultResponse,\n  TrainMultivariateModel201Response,\n  TrainMultivariateModelDefaultResponse,\n} from \"../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport {\n  MultivariateGetMultivariateBatchDetectionResultOptions,\n  MultivariateTrainMultivariateModelOptions,\n  MultivariateListMultivariateModelsOptions,\n  MultivariateDeleteMultivariateModelOptions,\n  MultivariateGetMultivariateModelOptions,\n  MultivariateDetectMultivariateBatchAnomalyOptions,\n  MultivariateDetectMultivariateLastAnomalyOptions,\n} from \"../../models/options.js\";\n\nexport function _getMultivariateBatchDetectionResultSend(\n  context: Client,\n  resultId: string,\n  options: MultivariateGetMultivariateBatchDetectionResultOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | GetMultivariateBatchDetectionResult200Response\n  | GetMultivariateBatchDetectionResultDefaultResponse\n> {\n  return context\n    .path(\"/multivariate/detect-batch/{resultId}\", resultId)\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _getMultivariateBatchDetectionResultDeserialize(\n  result:\n    | GetMultivariateBatchDetectionResult200Response\n    | GetMultivariateBatchDetectionResultDefaultResponse,\n): Promise<MultivariateMultivariateDetectionResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    resultId: result.body[\"resultId\"],\n    summary: {\n      status: result.body.summary[\"status\"],\n      errors:\n        result.body.summary[\"errors\"] === undefined\n          ? result.body.summary[\"errors\"]\n          : result.body.summary[\"errors\"].map((p) => ({\n              code: p[\"code\"],\n              message: p[\"message\"],\n            })),\n      variableStates:\n        result.body.summary[\"variableStates\"] === undefined\n          ? result.body.summary[\"variableStates\"]\n          : result.body.summary[\"variableStates\"].map((p) => ({\n              variable: p[\"variable\"],\n              filledNARatio: p[\"filledNARatio\"],\n              effectiveCount: p[\"effectiveCount\"],\n              firstTimestamp:\n                p[\"firstTimestamp\"] !== undefined\n                  ? new Date(p[\"firstTimestamp\"])\n                  : undefined,\n              lastTimestamp:\n                p[\"lastTimestamp\"] !== undefined\n                  ? new Date(p[\"lastTimestamp\"])\n                  : undefined,\n            })),\n      setupInfo: {\n        dataSource: result.body.summary.setupInfo[\"dataSource\"],\n        topContributorCount:\n          result.body.summary.setupInfo[\"topContributorCount\"],\n        startTime: new Date(result.body.summary.setupInfo[\"startTime\"]),\n        endTime: new Date(result.body.summary.setupInfo[\"endTime\"]),\n      },\n    },\n    results: result.body[\"results\"].map((p) => ({\n      timestamp: new Date(p[\"timestamp\"]),\n      value: !p.value\n        ? undefined\n        : {\n            isAnomaly: p.value?.[\"isAnomaly\"],\n            severity: p.value?.[\"severity\"],\n            score: p.value?.[\"score\"],\n            interpretation:\n              p.value?.[\"interpretation\"] === undefined\n                ? p.value?.[\"interpretation\"]\n                : p.value?.[\"interpretation\"].map((p) => ({\n                    variable: p[\"variable\"],\n                    contributionScore: p[\"contributionScore\"],\n                    correlationChanges: !p.correlationChanges\n                      ? undefined\n                      : {\n                          changedVariables:\n                            p.correlationChanges?.[\"changedVariables\"],\n                        },\n                  })),\n          },\n      errors:\n        p[\"errors\"] === undefined\n          ? p[\"errors\"]\n          : p[\"errors\"].map((p) => ({\n              code: p[\"code\"],\n              message: p[\"message\"],\n            })),\n    })),\n  };\n}\n\n/**\n * For asynchronous inference, get multivariate anomaly detection result based on\n * resultId returned by the BatchDetectAnomaly api.\n */\nexport async function getMultivariateBatchDetectionResult(\n  context: Client,\n  resultId: string,\n  options: MultivariateGetMultivariateBatchDetectionResultOptions = {\n    requestOptions: {},\n  },\n): Promise<MultivariateMultivariateDetectionResult> {\n  const result = await _getMultivariateBatchDetectionResultSend(\n    context,\n    resultId,\n    options,\n  );\n  return _getMultivariateBatchDetectionResultDeserialize(result);\n}\n\nexport function _trainMultivariateModelSend(\n  context: Client,\n  modelInfo: MultivariateModelInfo,\n  options: MultivariateTrainMultivariateModelOptions = { requestOptions: {} },\n): StreamableMethod<\n  TrainMultivariateModel201Response | TrainMultivariateModelDefaultResponse\n> {\n  return context\n    .path(\"/multivariate/models\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        dataSource: modelInfo[\"dataSource\"],\n        dataSchema: modelInfo[\"dataSchema\"],\n        startTime: modelInfo[\"startTime\"].toISOString(),\n        endTime: modelInfo[\"endTime\"].toISOString(),\n        displayName: modelInfo[\"displayName\"],\n        slidingWindow: modelInfo[\"slidingWindow\"],\n        alignPolicy: !modelInfo.alignPolicy\n          ? undefined\n          : {\n              alignMode: modelInfo.alignPolicy?.[\"alignMode\"],\n              fillNAMethod: modelInfo.alignPolicy?.[\"fillNAMethod\"],\n              paddingValue: modelInfo.alignPolicy?.[\"paddingValue\"],\n            },\n        status: modelInfo[\"status\"],\n        diagnosticsInfo: !modelInfo.diagnosticsInfo\n          ? undefined\n          : {\n              modelState: !modelInfo.diagnosticsInfo?.modelState\n                ? undefined\n                : {\n                    epochIds:\n                      modelInfo.diagnosticsInfo?.modelState?.[\"epochIds\"],\n                    trainLosses:\n                      modelInfo.diagnosticsInfo?.modelState?.[\"trainLosses\"],\n                    validationLosses:\n                      modelInfo.diagnosticsInfo?.modelState?.[\n                        \"validationLosses\"\n                      ],\n                    latenciesInSeconds:\n                      modelInfo.diagnosticsInfo?.modelState?.[\n                        \"latenciesInSeconds\"\n                      ],\n                  },\n              variableStates:\n                modelInfo.diagnosticsInfo?.[\"variableStates\"] === undefined\n                  ? modelInfo.diagnosticsInfo?.[\"variableStates\"]\n                  : modelInfo.diagnosticsInfo?.[\"variableStates\"].map((p) => ({\n                      variable: p[\"variable\"],\n                      filledNARatio: p[\"filledNARatio\"],\n                      effectiveCount: p[\"effectiveCount\"],\n                      firstTimestamp: p[\"firstTimestamp\"]?.toISOString(),\n                      lastTimestamp: p[\"lastTimestamp\"]?.toISOString(),\n                    })),\n            },\n      },\n    });\n}\n\nexport async function _trainMultivariateModelDeserialize(\n  result:\n    | TrainMultivariateModel201Response\n    | TrainMultivariateModelDefaultResponse,\n): Promise<MultivariateAnomalyDetectionModel> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    modelId: result.body[\"modelId\"],\n    createdTime: new Date(result.body[\"createdTime\"]),\n    lastUpdatedTime: new Date(result.body[\"lastUpdatedTime\"]),\n    modelInfo: !result.body.modelInfo\n      ? undefined\n      : {\n          dataSource: result.body.modelInfo?.[\"dataSource\"],\n          dataSchema: result.body.modelInfo?.[\"dataSchema\"],\n          startTime: new Date(result.body.modelInfo?.[\"startTime\"]),\n          endTime: new Date(result.body.modelInfo?.[\"endTime\"]),\n          displayName: result.body.modelInfo?.[\"displayName\"],\n          slidingWindow: result.body.modelInfo?.[\"slidingWindow\"],\n          alignPolicy: !result.body.modelInfo?.alignPolicy\n            ? undefined\n            : {\n                alignMode: result.body.modelInfo?.alignPolicy?.[\"alignMode\"],\n                fillNAMethod:\n                  result.body.modelInfo?.alignPolicy?.[\"fillNAMethod\"],\n                paddingValue:\n                  result.body.modelInfo?.alignPolicy?.[\"paddingValue\"],\n              },\n          status: result.body.modelInfo?.[\"status\"],\n          errors:\n            result.body.modelInfo?.[\"errors\"] === undefined\n              ? result.body.modelInfo?.[\"errors\"]\n              : result.body.modelInfo?.[\"errors\"].map((p) => ({\n                  code: p[\"code\"],\n                  message: p[\"message\"],\n                })),\n          diagnosticsInfo: !result.body.modelInfo?.diagnosticsInfo\n            ? undefined\n            : {\n                modelState: !result.body.modelInfo?.diagnosticsInfo?.modelState\n                  ? undefined\n                  : {\n                      epochIds:\n                        result.body.modelInfo?.diagnosticsInfo?.modelState?.[\n                          \"epochIds\"\n                        ],\n                      trainLosses:\n                        result.body.modelInfo?.diagnosticsInfo?.modelState?.[\n                          \"trainLosses\"\n                        ],\n                      validationLosses:\n                        result.body.modelInfo?.diagnosticsInfo?.modelState?.[\n                          \"validationLosses\"\n                        ],\n                      latenciesInSeconds:\n                        result.body.modelInfo?.diagnosticsInfo?.modelState?.[\n                          \"latenciesInSeconds\"\n                        ],\n                    },\n                variableStates:\n                  result.body.modelInfo?.diagnosticsInfo?.[\"variableStates\"] ===\n                  undefined\n                    ? result.body.modelInfo?.diagnosticsInfo?.[\"variableStates\"]\n                    : result.body.modelInfo?.diagnosticsInfo?.[\n                        \"variableStates\"\n                      ].map((p) => ({\n                        variable: p[\"variable\"],\n                        filledNARatio: p[\"filledNARatio\"],\n                        effectiveCount: p[\"effectiveCount\"],\n                        firstTimestamp:\n                          p[\"firstTimestamp\"] !== undefined\n                            ? new Date(p[\"firstTimestamp\"])\n                            : undefined,\n                        lastTimestamp:\n                          p[\"lastTimestamp\"] !== undefined\n                            ? new Date(p[\"lastTimestamp\"])\n                            : undefined,\n                      })),\n              },\n        },\n  };\n}\n\n/**\n * Create and train a multivariate anomaly detection model. The request must\n * include a source parameter to indicate an externally accessible Azure blob\n * storage URI.There are two types of data input: An URI pointed to an Azure blob\n * storage folder which contains multiple CSV files, and each CSV file contains\n * two columns, timestamp and variable. Another type of input is an URI pointed to\n * a CSV file in Azure blob storage, which contains all the variables and a\n * timestamp column.\n */\nexport async function trainMultivariateModel(\n  context: Client,\n  modelInfo: MultivariateModelInfo,\n  options: MultivariateTrainMultivariateModelOptions = { requestOptions: {} },\n): Promise<MultivariateAnomalyDetectionModel> {\n  const result = await _trainMultivariateModelSend(context, modelInfo, options);\n  return _trainMultivariateModelDeserialize(result);\n}\n\nexport function _listMultivariateModelsSend(\n  context: Client,\n  options: MultivariateListMultivariateModelsOptions = { requestOptions: {} },\n): StreamableMethod<\n  ListMultivariateModels200Response | ListMultivariateModelsDefaultResponse\n> {\n  return context\n    .path(\"/multivariate/models\")\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      queryParameters: { skip: options?.skip, top: options?.top },\n    });\n}\n\nexport async function _listMultivariateModelsDeserialize(\n  result:\n    | ListMultivariateModels200Response\n    | ListMultivariateModelsDefaultResponse,\n): Promise<MultivariateModelList> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    models: result.body[\"models\"].map((p) => ({\n      modelId: p[\"modelId\"],\n      createdTime: new Date(p[\"createdTime\"]),\n      lastUpdatedTime: new Date(p[\"lastUpdatedTime\"]),\n      modelInfo: !p.modelInfo\n        ? undefined\n        : {\n            dataSource: p.modelInfo?.[\"dataSource\"],\n            dataSchema: p.modelInfo?.[\"dataSchema\"],\n            startTime: new Date(p.modelInfo?.[\"startTime\"]),\n            endTime: new Date(p.modelInfo?.[\"endTime\"]),\n            displayName: p.modelInfo?.[\"displayName\"],\n            slidingWindow: p.modelInfo?.[\"slidingWindow\"],\n            alignPolicy: !p.modelInfo?.alignPolicy\n              ? undefined\n              : {\n                  alignMode: p.modelInfo?.alignPolicy?.[\"alignMode\"],\n                  fillNAMethod: p.modelInfo?.alignPolicy?.[\"fillNAMethod\"],\n                  paddingValue: p.modelInfo?.alignPolicy?.[\"paddingValue\"],\n                },\n            status: p.modelInfo?.[\"status\"],\n            errors:\n              p.modelInfo?.[\"errors\"] === undefined\n                ? p.modelInfo?.[\"errors\"]\n                : p.modelInfo?.[\"errors\"].map((p) => ({\n                    code: p[\"code\"],\n                    message: p[\"message\"],\n                  })),\n            diagnosticsInfo: !p.modelInfo?.diagnosticsInfo\n              ? undefined\n              : {\n                  modelState: !p.modelInfo?.diagnosticsInfo?.modelState\n                    ? undefined\n                    : {\n                        epochIds:\n                          p.modelInfo?.diagnosticsInfo?.modelState?.[\n                            \"epochIds\"\n                          ],\n                        trainLosses:\n                          p.modelInfo?.diagnosticsInfo?.modelState?.[\n                            \"trainLosses\"\n                          ],\n                        validationLosses:\n                          p.modelInfo?.diagnosticsInfo?.modelState?.[\n                            \"validationLosses\"\n                          ],\n                        latenciesInSeconds:\n                          p.modelInfo?.diagnosticsInfo?.modelState?.[\n                            \"latenciesInSeconds\"\n                          ],\n                      },\n                  variableStates:\n                    p.modelInfo?.diagnosticsInfo?.[\"variableStates\"] ===\n                    undefined\n                      ? p.modelInfo?.diagnosticsInfo?.[\"variableStates\"]\n                      : p.modelInfo?.diagnosticsInfo?.[\"variableStates\"].map(\n                          (p) => ({\n                            variable: p[\"variable\"],\n                            filledNARatio: p[\"filledNARatio\"],\n                            effectiveCount: p[\"effectiveCount\"],\n                            firstTimestamp:\n                              p[\"firstTimestamp\"] !== undefined\n                                ? new Date(p[\"firstTimestamp\"])\n                                : undefined,\n                            lastTimestamp:\n                              p[\"lastTimestamp\"] !== undefined\n                                ? new Date(p[\"lastTimestamp\"])\n                                : undefined,\n                          }),\n                        ),\n                },\n          },\n    })),\n    currentCount: result.body[\"currentCount\"],\n    maxCount: result.body[\"maxCount\"],\n    nextLink: result.body[\"nextLink\"],\n  };\n}\n\n/** List models of a resource. */\nexport function listMultivariateModels(\n  context: Client,\n  options: MultivariateListMultivariateModelsOptions = { requestOptions: {} },\n): PagedAsyncIterableIterator<MultivariateAnomalyDetectionModel> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listMultivariateModelsSend(context, options),\n    _listMultivariateModelsDeserialize,\n    { itemName: \"models\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _deleteMultivariateModelSend(\n  context: Client,\n  modelId: string,\n  options: MultivariateDeleteMultivariateModelOptions = { requestOptions: {} },\n): StreamableMethod<\n  DeleteMultivariateModel204Response | DeleteMultivariateModelDefaultResponse\n> {\n  return context\n    .path(\"/multivariate/models/{modelId}\", modelId)\n    .delete({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _deleteMultivariateModelDeserialize(\n  result:\n    | DeleteMultivariateModel204Response\n    | DeleteMultivariateModelDefaultResponse,\n): Promise<void> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return;\n}\n\n/** Delete an existing multivariate model according to the modelId */\nexport async function deleteMultivariateModel(\n  context: Client,\n  modelId: string,\n  options: MultivariateDeleteMultivariateModelOptions = { requestOptions: {} },\n): Promise<void> {\n  const result = await _deleteMultivariateModelSend(context, modelId, options);\n  return _deleteMultivariateModelDeserialize(result);\n}\n\nexport function _getMultivariateModelSend(\n  context: Client,\n  modelId: string,\n  options: MultivariateGetMultivariateModelOptions = { requestOptions: {} },\n): StreamableMethod<\n  GetMultivariateModel200Response | GetMultivariateModelDefaultResponse\n> {\n  return context\n    .path(\"/multivariate/models/{modelId}\", modelId)\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _getMultivariateModelDeserialize(\n  result: GetMultivariateModel200Response | GetMultivariateModelDefaultResponse,\n): Promise<MultivariateAnomalyDetectionModel> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    modelId: result.body[\"modelId\"],\n    createdTime: new Date(result.body[\"createdTime\"]),\n    lastUpdatedTime: new Date(result.body[\"lastUpdatedTime\"]),\n    modelInfo: !result.body.modelInfo\n      ? undefined\n      : {\n          dataSource: result.body.modelInfo?.[\"dataSource\"],\n          dataSchema: result.body.modelInfo?.[\"dataSchema\"],\n          startTime: new Date(result.body.modelInfo?.[\"startTime\"]),\n          endTime: new Date(result.body.modelInfo?.[\"endTime\"]),\n          displayName: result.body.modelInfo?.[\"displayName\"],\n          slidingWindow: result.body.modelInfo?.[\"slidingWindow\"],\n          alignPolicy: !result.body.modelInfo?.alignPolicy\n            ? undefined\n            : {\n                alignMode: result.body.modelInfo?.alignPolicy?.[\"alignMode\"],\n                fillNAMethod:\n                  result.body.modelInfo?.alignPolicy?.[\"fillNAMethod\"],\n                paddingValue:\n                  result.body.modelInfo?.alignPolicy?.[\"paddingValue\"],\n              },\n          status: result.body.modelInfo?.[\"status\"],\n          errors:\n            result.body.modelInfo?.[\"errors\"] === undefined\n              ? result.body.modelInfo?.[\"errors\"]\n              : result.body.modelInfo?.[\"errors\"].map((p) => ({\n                  code: p[\"code\"],\n                  message: p[\"message\"],\n                })),\n          diagnosticsInfo: !result.body.modelInfo?.diagnosticsInfo\n            ? undefined\n            : {\n                modelState: !result.body.modelInfo?.diagnosticsInfo?.modelState\n                  ? undefined\n                  : {\n                      epochIds:\n                        result.body.modelInfo?.diagnosticsInfo?.modelState?.[\n                          \"epochIds\"\n                        ],\n                      trainLosses:\n                        result.body.modelInfo?.diagnosticsInfo?.modelState?.[\n                          \"trainLosses\"\n                        ],\n                      validationLosses:\n                        result.body.modelInfo?.diagnosticsInfo?.modelState?.[\n                          \"validationLosses\"\n                        ],\n                      latenciesInSeconds:\n                        result.body.modelInfo?.diagnosticsInfo?.modelState?.[\n                          \"latenciesInSeconds\"\n                        ],\n                    },\n                variableStates:\n                  result.body.modelInfo?.diagnosticsInfo?.[\"variableStates\"] ===\n                  undefined\n                    ? result.body.modelInfo?.diagnosticsInfo?.[\"variableStates\"]\n                    : result.body.modelInfo?.diagnosticsInfo?.[\n                        \"variableStates\"\n                      ].map((p) => ({\n                        variable: p[\"variable\"],\n                        filledNARatio: p[\"filledNARatio\"],\n                        effectiveCount: p[\"effectiveCount\"],\n                        firstTimestamp:\n                          p[\"firstTimestamp\"] !== undefined\n                            ? new Date(p[\"firstTimestamp\"])\n                            : undefined,\n                        lastTimestamp:\n                          p[\"lastTimestamp\"] !== undefined\n                            ? new Date(p[\"lastTimestamp\"])\n                            : undefined,\n                      })),\n              },\n        },\n  };\n}\n\n/**\n * Get detailed information of multivariate model, including the training status\n * and variables used in the model.\n */\nexport async function getMultivariateModel(\n  context: Client,\n  modelId: string,\n  options: MultivariateGetMultivariateModelOptions = { requestOptions: {} },\n): Promise<MultivariateAnomalyDetectionModel> {\n  const result = await _getMultivariateModelSend(context, modelId, options);\n  return _getMultivariateModelDeserialize(result);\n}\n\nexport function _detectMultivariateBatchAnomalySend(\n  context: Client,\n  modelId: string,\n  options: MultivariateMultivariateBatchDetectionOptions,\n  options: MultivariateDetectMultivariateBatchAnomalyOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | DetectMultivariateBatchAnomaly202Response\n  | DetectMultivariateBatchAnomalyDefaultResponse\n> {\n  return context\n    .path(\"/multivariate/models/{modelId}:detect-batch\", modelId)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        dataSource: options[\"dataSource\"],\n        topContributorCount: options[\"topContributorCount\"],\n        startTime: options[\"startTime\"].toISOString(),\n        endTime: options[\"endTime\"].toISOString(),\n      },\n    });\n}\n\nexport async function _detectMultivariateBatchAnomalyDeserialize(\n  result:\n    | DetectMultivariateBatchAnomaly202Response\n    | DetectMultivariateBatchAnomalyDefaultResponse,\n): Promise<MultivariateMultivariateDetectionResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    resultId: result.body[\"resultId\"],\n    summary: {\n      status: result.body.summary[\"status\"],\n      errors:\n        result.body.summary[\"errors\"] === undefined\n          ? result.body.summary[\"errors\"]\n          : result.body.summary[\"errors\"].map((p) => ({\n              code: p[\"code\"],\n              message: p[\"message\"],\n            })),\n      variableStates:\n        result.body.summary[\"variableStates\"] === undefined\n          ? result.body.summary[\"variableStates\"]\n          : result.body.summary[\"variableStates\"].map((p) => ({\n              variable: p[\"variable\"],\n              filledNARatio: p[\"filledNARatio\"],\n              effectiveCount: p[\"effectiveCount\"],\n              firstTimestamp:\n                p[\"firstTimestamp\"] !== undefined\n                  ? new Date(p[\"firstTimestamp\"])\n                  : undefined,\n              lastTimestamp:\n                p[\"lastTimestamp\"] !== undefined\n                  ? new Date(p[\"lastTimestamp\"])\n                  : undefined,\n            })),\n      setupInfo: {\n        dataSource: result.body.summary.setupInfo[\"dataSource\"],\n        topContributorCount:\n          result.body.summary.setupInfo[\"topContributorCount\"],\n        startTime: new Date(result.body.summary.setupInfo[\"startTime\"]),\n        endTime: new Date(result.body.summary.setupInfo[\"endTime\"]),\n      },\n    },\n    results: result.body[\"results\"].map((p) => ({\n      timestamp: new Date(p[\"timestamp\"]),\n      value: !p.value\n        ? undefined\n        : {\n            isAnomaly: p.value?.[\"isAnomaly\"],\n            severity: p.value?.[\"severity\"],\n            score: p.value?.[\"score\"],\n            interpretation:\n              p.value?.[\"interpretation\"] === undefined\n                ? p.value?.[\"interpretation\"]\n                : p.value?.[\"interpretation\"].map((p) => ({\n                    variable: p[\"variable\"],\n                    contributionScore: p[\"contributionScore\"],\n                    correlationChanges: !p.correlationChanges\n                      ? undefined\n                      : {\n                          changedVariables:\n                            p.correlationChanges?.[\"changedVariables\"],\n                        },\n                  })),\n          },\n      errors:\n        p[\"errors\"] === undefined\n          ? p[\"errors\"]\n          : p[\"errors\"].map((p) => ({\n              code: p[\"code\"],\n              message: p[\"message\"],\n            })),\n    })),\n  };\n}\n\n/**\n * Submit multivariate anomaly detection task with the modelId of trained model\n * and inference data, the input schema should be the same with the training\n * request. The request will complete asynchronously and return a resultId to\n * query the detection result.The request should be a source link to indicate an\n * externally accessible Azure storage Uri, either pointed to an Azure blob\n * storage folder, or pointed to a CSV file in Azure blob storage.\n */\nexport async function detectMultivariateBatchAnomaly(\n  context: Client,\n  modelId: string,\n  options: MultivariateMultivariateBatchDetectionOptions,\n  options: MultivariateDetectMultivariateBatchAnomalyOptions = {\n    requestOptions: {},\n  },\n): Promise<MultivariateMultivariateDetectionResult> {\n  const result = await _detectMultivariateBatchAnomalySend(\n    context,\n    modelId,\n    options,\n    options,\n  );\n  return _detectMultivariateBatchAnomalyDeserialize(result);\n}\n\nexport function _detectMultivariateLastAnomalySend(\n  context: Client,\n  modelId: string,\n  options: MultivariateMultivariateLastDetectionOptions,\n  options: MultivariateDetectMultivariateLastAnomalyOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | DetectMultivariateLastAnomaly200Response\n  | DetectMultivariateLastAnomalyDefaultResponse\n> {\n  return context\n    .path(\"/multivariate/models/{modelId}:detect-last\", modelId)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        variables: options[\"variables\"].map((p) => ({\n          variable: p[\"variable\"],\n          timestamps: p[\"timestamps\"],\n          values: p[\"values\"],\n        })),\n        topContributorCount: options[\"topContributorCount\"],\n      },\n    });\n}\n\nexport async function _detectMultivariateLastAnomalyDeserialize(\n  result:\n    | DetectMultivariateLastAnomaly200Response\n    | DetectMultivariateLastAnomalyDefaultResponse,\n): Promise<MultivariateMultivariateLastDetectionResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    variableStates:\n      result.body[\"variableStates\"] === undefined\n        ? result.body[\"variableStates\"]\n        : result.body[\"variableStates\"].map((p) => ({\n            variable: p[\"variable\"],\n            filledNARatio: p[\"filledNARatio\"],\n            effectiveCount: p[\"effectiveCount\"],\n            firstTimestamp:\n              p[\"firstTimestamp\"] !== undefined\n                ? new Date(p[\"firstTimestamp\"])\n                : undefined,\n            lastTimestamp:\n              p[\"lastTimestamp\"] !== undefined\n                ? new Date(p[\"lastTimestamp\"])\n                : undefined,\n          })),\n    results:\n      result.body[\"results\"] === undefined\n        ? result.body[\"results\"]\n        : result.body[\"results\"].map((p) => ({\n            timestamp: new Date(p[\"timestamp\"]),\n            value: !p.value\n              ? undefined\n              : {\n                  isAnomaly: p.value?.[\"isAnomaly\"],\n                  severity: p.value?.[\"severity\"],\n                  score: p.value?.[\"score\"],\n                  interpretation:\n                    p.value?.[\"interpretation\"] === undefined\n                      ? p.value?.[\"interpretation\"]\n                      : p.value?.[\"interpretation\"].map((p) => ({\n                          variable: p[\"variable\"],\n                          contributionScore: p[\"contributionScore\"],\n                          correlationChanges: !p.correlationChanges\n                            ? undefined\n                            : {\n                                changedVariables:\n                                  p.correlationChanges?.[\"changedVariables\"],\n                              },\n                        })),\n                },\n            errors:\n              p[\"errors\"] === undefined\n                ? p[\"errors\"]\n                : p[\"errors\"].map((p) => ({\n                    code: p[\"code\"],\n                    message: p[\"message\"],\n                  })),\n          })),\n  };\n}\n\n/**\n * Submit multivariate anomaly detection task with the modelId of trained model\n * and inference data, and the inference data should be put into request body in a\n * JSON format. The request will complete synchronously and return the detection\n * immediately in the response body.\n */\nexport async function detectMultivariateLastAnomaly(\n  context: Client,\n  modelId: string,\n  options: MultivariateMultivariateLastDetectionOptions,\n  options: MultivariateDetectMultivariateLastAnomalyOptions = {\n    requestOptions: {},\n  },\n): Promise<MultivariateMultivariateLastDetectionResult> {\n  const result = await _detectMultivariateLastAnomalySend(\n    context,\n    modelId,\n    options,\n    options,\n  );\n  return _detectMultivariateLastAnomalyDeserialize(result);\n}\n"]}