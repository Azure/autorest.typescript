{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/univariate/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  UnivariateUnivariateDetectionOptions,\n  UnivariateUnivariateEntireDetectionResult,\n  UnivariateUnivariateLastDetectionResult,\n  UnivariateUnivariateChangePointDetectionOptions,\n  UnivariateUnivariateChangePointDetectionResult,\n} from \"../../models/models.js\";\nimport {\n  isUnexpected,\n  AnomalyDetectorContext as Client,\n  DetectUnivariateChangePoint200Response,\n  DetectUnivariateChangePointDefaultResponse,\n  DetectUnivariateEntireSeries200Response,\n  DetectUnivariateEntireSeriesDefaultResponse,\n  DetectUnivariateLastPoint200Response,\n  DetectUnivariateLastPointDefaultResponse,\n} from \"../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport {\n  UnivariateDetectUnivariateEntireSeriesOptions,\n  UnivariateDetectUnivariateLastPointOptions,\n  UnivariateDetectUnivariateChangePointOptions,\n} from \"../../models/options.js\";\n\nexport function _detectUnivariateEntireSeriesSend(\n  context: Client,\n  options: UnivariateUnivariateDetectionOptions,\n  options: UnivariateDetectUnivariateEntireSeriesOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | DetectUnivariateEntireSeries200Response\n  | DetectUnivariateEntireSeriesDefaultResponse\n> {\n  return context\n    .path(\"/timeseries/entire/detect\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        series: options[\"series\"].map((p) => ({\n          timestamp: p[\"timestamp\"]?.toISOString(),\n          value: p[\"value\"],\n        })),\n        granularity: options[\"granularity\"],\n        customInterval: options[\"customInterval\"],\n        period: options[\"period\"],\n        maxAnomalyRatio: options[\"maxAnomalyRatio\"],\n        sensitivity: options[\"sensitivity\"],\n        imputeMode: options[\"imputeMode\"],\n        imputeFixedValue: options[\"imputeFixedValue\"],\n      },\n    });\n}\n\nexport async function _detectUnivariateEntireSeriesDeserialize(\n  result:\n    | DetectUnivariateEntireSeries200Response\n    | DetectUnivariateEntireSeriesDefaultResponse,\n): Promise<UnivariateUnivariateEntireDetectionResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    period: result.body[\"period\"],\n    expectedValues: result.body[\"expectedValues\"],\n    upperMargins: result.body[\"upperMargins\"],\n    lowerMargins: result.body[\"lowerMargins\"],\n    isAnomaly: result.body[\"isAnomaly\"],\n    isNegativeAnomaly: result.body[\"isNegativeAnomaly\"],\n    isPositiveAnomaly: result.body[\"isPositiveAnomaly\"],\n    severity: result.body[\"severity\"],\n  };\n}\n\n/**\n * This operation generates a model with an entire series, each point is detected\n * with the same model. With this method, points before and after a certain point\n * are used to determine whether it is an anomaly. The entire detection can give\n * user an overall status of the time series.\n */\nexport async function detectUnivariateEntireSeries(\n  context: Client,\n  options: UnivariateUnivariateDetectionOptions,\n  options: UnivariateDetectUnivariateEntireSeriesOptions = {\n    requestOptions: {},\n  },\n): Promise<UnivariateUnivariateEntireDetectionResult> {\n  const result = await _detectUnivariateEntireSeriesSend(\n    context,\n    options,\n    options,\n  );\n  return _detectUnivariateEntireSeriesDeserialize(result);\n}\n\nexport function _detectUnivariateLastPointSend(\n  context: Client,\n  options: UnivariateUnivariateDetectionOptions,\n  options: UnivariateDetectUnivariateLastPointOptions = { requestOptions: {} },\n): StreamableMethod<\n  | DetectUnivariateLastPoint200Response\n  | DetectUnivariateLastPointDefaultResponse\n> {\n  return context\n    .path(\"/timeseries/last/detect\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        series: options[\"series\"].map((p) => ({\n          timestamp: p[\"timestamp\"]?.toISOString(),\n          value: p[\"value\"],\n        })),\n        granularity: options[\"granularity\"],\n        customInterval: options[\"customInterval\"],\n        period: options[\"period\"],\n        maxAnomalyRatio: options[\"maxAnomalyRatio\"],\n        sensitivity: options[\"sensitivity\"],\n        imputeMode: options[\"imputeMode\"],\n        imputeFixedValue: options[\"imputeFixedValue\"],\n      },\n    });\n}\n\nexport async function _detectUnivariateLastPointDeserialize(\n  result:\n    | DetectUnivariateLastPoint200Response\n    | DetectUnivariateLastPointDefaultResponse,\n): Promise<UnivariateUnivariateLastDetectionResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    period: result.body[\"period\"],\n    suggestedWindow: result.body[\"suggestedWindow\"],\n    expectedValue: result.body[\"expectedValue\"],\n    upperMargin: result.body[\"upperMargin\"],\n    lowerMargin: result.body[\"lowerMargin\"],\n    isAnomaly: result.body[\"isAnomaly\"],\n    isNegativeAnomaly: result.body[\"isNegativeAnomaly\"],\n    isPositiveAnomaly: result.body[\"isPositiveAnomaly\"],\n    severity: result.body[\"severity\"],\n  };\n}\n\n/**\n * This operation generates a model using the points that you sent into the API,\n * and based on all data to determine whether the last point is anomalous.\n */\nexport async function detectUnivariateLastPoint(\n  context: Client,\n  options: UnivariateUnivariateDetectionOptions,\n  options: UnivariateDetectUnivariateLastPointOptions = { requestOptions: {} },\n): Promise<UnivariateUnivariateLastDetectionResult> {\n  const result = await _detectUnivariateLastPointSend(\n    context,\n    options,\n    options,\n  );\n  return _detectUnivariateLastPointDeserialize(result);\n}\n\nexport function _detectUnivariateChangePointSend(\n  context: Client,\n  options: UnivariateUnivariateChangePointDetectionOptions,\n  options: UnivariateDetectUnivariateChangePointOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | DetectUnivariateChangePoint200Response\n  | DetectUnivariateChangePointDefaultResponse\n> {\n  return context\n    .path(\"/timeseries/changepoint/detect\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        series: options[\"series\"].map((p) => ({\n          timestamp: p[\"timestamp\"]?.toISOString(),\n          value: p[\"value\"],\n        })),\n        granularity: options[\"granularity\"],\n        customInterval: options[\"customInterval\"],\n        period: options[\"period\"],\n        stableTrendWindow: options[\"stableTrendWindow\"],\n        threshold: options[\"threshold\"],\n      },\n    });\n}\n\nexport async function _detectUnivariateChangePointDeserialize(\n  result:\n    | DetectUnivariateChangePoint200Response\n    | DetectUnivariateChangePointDefaultResponse,\n): Promise<UnivariateUnivariateChangePointDetectionResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    period: result.body[\"period\"],\n    isChangePoint: result.body[\"isChangePoint\"],\n    confidenceScores: result.body[\"confidenceScores\"],\n  };\n}\n\n/** Evaluate change point score of every series point */\nexport async function detectUnivariateChangePoint(\n  context: Client,\n  options: UnivariateUnivariateChangePointDetectionOptions,\n  options: UnivariateDetectUnivariateChangePointOptions = {\n    requestOptions: {},\n  },\n): Promise<UnivariateUnivariateChangePointDetectionResult> {\n  const result = await _detectUnivariateChangePointSend(\n    context,\n    options,\n    options,\n  );\n  return _detectUnivariateChangePointDeserialize(result);\n}\n"]}