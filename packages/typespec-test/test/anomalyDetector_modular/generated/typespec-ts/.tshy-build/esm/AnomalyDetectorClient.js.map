{"version":3,"file":"AnomalyDetectorClient.js","sourceRoot":"","sources":["../../src/AnomalyDetectorClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EACL,uBAAuB,GAExB,MAAM,+BAA+B,CAAC;AACvC,OAAO,EACL,yBAAyB,GAE1B,MAAM,iCAAiC,CAAC;AACzC,OAAO,EACL,qBAAqB,GAGtB,MAAM,gBAAgB,CAAC;AAIxB,MAAM,OAAO,qBAAqB;IACxB,OAAO,CAAyB;IACxC,wDAAwD;IACxC,QAAQ,CAAW;IAEnC;;;;;;;;;;;;;;;;;OAiBG;IACH,YACE,QAAgB,EAChB,UAAyB,EACzB,UAAwC,EAAE;QAE1C,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QACpE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,GAAG,yBAAyB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9D,CAAC;IAED,0CAA0C;IAC1B,UAAU,CAAuB;IACjD,4CAA4C;IAC5B,YAAY,CAAyB;CACtD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { Pipeline } from \"@azure/core-rest-pipeline\";\nimport {\n  getUnivariateOperations,\n  UnivariateOperations,\n} from \"./classic/univariate/index.js\";\nimport {\n  getMultivariateOperations,\n  MultivariateOperations,\n} from \"./classic/multivariate/index.js\";\nimport {\n  createAnomalyDetector,\n  AnomalyDetectorClientOptions,\n  AnomalyDetectorContext,\n} from \"./api/index.js\";\n\nexport { AnomalyDetectorClientOptions } from \"./api/AnomalyDetectorContext.js\";\n\nexport class AnomalyDetectorClient {\n  private _client: AnomalyDetectorContext;\n  /** The pipeline used by this client to make requests */\n  public readonly pipeline: Pipeline;\n\n  /**\n   * The Anomaly Detector API detects anomalies automatically in time series data.\n   * It supports two kinds of mode, one is for stateless using, another is for\n   * stateful using. In stateless mode, there are three functionalities. Entire\n   * Detect is for detecting the whole series with model trained by the time series,\n   * Last Detect is detecting last point with model trained by points before.\n   * ChangePoint Detect is for detecting trend changes in time series. In stateful\n   * mode, user can store time series, the stored time series will be used for\n   * detection anomalies. Under this mode, user can still use the above three\n   * functionalities by only giving a time range without preparing time series in\n   * client side. Besides the above three functionalities, stateful model also\n   * provide group based detection and labeling service. By leveraging labeling\n   * service user can provide labels for each detection result, these labels will be\n   * used for retuning or regenerating detection models. Inconsistency detection is\n   * a kind of group based detection, this detection will find inconsistency ones in\n   * a set of time series. By using anomaly detector service, business customers can\n   * discover incidents and establish a logic flow for root cause analysis.\n   */\n  constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options: AnomalyDetectorClientOptions = {},\n  ) {\n    this._client = createAnomalyDetector(endpoint, credential, options);\n    this.pipeline = this._client.pipeline;\n    this.univariate = getUnivariateOperations(this._client);\n    this.multivariate = getMultivariateOperations(this._client);\n  }\n\n  /** The operation groups for Univariate */\n  public readonly univariate: UnivariateOperations;\n  /** The operation groups for Multivariate */\n  public readonly multivariate: MultivariateOperations;\n}\n"]}