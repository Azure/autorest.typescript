{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/sessionClient/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  LivenessSessionCreationContent,\n  LivenessSessionCreationResult,\n  LivenessSession,\n  LivenessSessionAuditEntry,\n  LivenessSessionItem,\n  LivenessWithVerifySessionCreationContent,\n  LivenessWithVerifySession,\n  LivenessWithVerifySessionAuditEntry,\n} from \"../../models/models.js\";\nimport {\n  isUnexpected,\n  FaceContext as Client,\n  CreateLivenessWithVerifySessionByFormData200Response,\n  CreateLivenessWithVerifySessionByFormDataDefaultResponse,\n} from \"../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport { uint8ArrayToString } from \"@azure/core-util\";\nimport {\n  SessionClientCreateLivenessSessionOptions,\n  SessionClientGetLivenessSessionOptions,\n  SessionClientDeleteLivenessSessionOptions,\n  SessionClientListLivenessSessionsOptions,\n  SessionClientListLivenessSessionAuditEntriesOptions,\n  SessionClientCreateLivenessWithVerifySessionByJsonOptions,\n  SessionClientCreateLivenessWithVerifySessionByFormDataOptions,\n  SessionClientGetLivenessWithVerifySessionOptions,\n  SessionClientDeleteLivenessWithVerifySessionOptions,\n  SessionClientListLivenessWithVerifySessionsOptions,\n  SessionClientListLivenessWithVerifySessionAuditEntriesOptions,\n} from \"../../models/options.js\";\n\nexport function _createLivenessSessionSend(\n  context: Client,\n  body: LivenessSessionCreationContent,\n  options: SessionClientCreateLivenessSessionOptions = { requestOptions: {} },\n): StreamableMethod<undefined> {\n  return context\n    .path(\"/face/{apiVersion}/detectLiveness/singleModal/sessions\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        deviceCorrelationId: body[\"deviceCorrelationId\"],\n        authTokenTimeToLiveInSeconds: body[\"authTokenTimeToLiveInSeconds\"],\n        livenessOperationMode: body[\"livenessOperationMode\"],\n      },\n    });\n}\n\nexport async function _createLivenessSessionDeserialize(\n  result,\n): Promise<LivenessSessionCreationResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    sessionId: result.body[\"sessionId\"],\n    authToken: result.body[\"authToken\"],\n  };\n}\n\n/** Operation that applies to a collection of resources. */\nexport async function createLivenessSession(\n  context: Client,\n  body: LivenessSessionCreationContent,\n  options: SessionClientCreateLivenessSessionOptions = { requestOptions: {} },\n): Promise<LivenessSessionCreationResult> {\n  const result = await _createLivenessSessionSend(context, body, options);\n  return _createLivenessSessionDeserialize(result);\n}\n\nexport function _getLivenessSessionSend(\n  context: Client,\n  sessionId: string,\n  options: SessionClientGetLivenessSessionOptions = { requestOptions: {} },\n): StreamableMethod<undefined> {\n  return context\n    .path(\n      \"/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}\",\n      sessionId,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _getLivenessSessionDeserialize(\n  result,\n): Promise<LivenessSession> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    deviceCorrelationId: result.body[\"deviceCorrelationId\"],\n    authTokenTimeToLiveInSeconds: result.body[\"authTokenTimeToLiveInSeconds\"],\n    livenessOperationMode: result.body[\"livenessOperationMode\"],\n    id: result.body[\"id\"],\n    createdDateTime: new Date(result.body[\"createdDateTime\"]),\n    sessionStartDateTime:\n      result.body[\"sessionStartDateTime\"] !== undefined\n        ? new Date(result.body[\"sessionStartDateTime\"])\n        : undefined,\n    sessionExpired: result.body[\"sessionExpired\"],\n    status: result.body[\"status\"],\n    result: !result.body.result\n      ? undefined\n      : {\n          id: result.body.result?.[\"id\"],\n          sessionId: result.body.result?.[\"sessionId\"],\n          requestId: result.body.result?.[\"requestId\"],\n          clientRequestId: result.body.result?.[\"clientRequestId\"],\n          receivedDateTime: new Date(result.body.result?.[\"receivedDateTime\"]),\n          request: {\n            url: result.body.result?.request[\"url\"],\n            method: result.body.result?.request[\"method\"],\n            contentLength: result.body.result?.request[\"contentLength\"],\n            contentType: result.body.result?.request[\"contentType\"],\n            userAgent: result.body.result?.request[\"userAgent\"],\n          },\n          response: {\n            body: result.body.result?.response[\"body\"],\n            statusCode: result.body.result?.response[\"statusCode\"],\n            latencyInMilliseconds:\n              result.body.result?.response[\"latencyInMilliseconds\"],\n          },\n          digest: result.body.result?.[\"digest\"],\n        },\n  };\n}\n\n/** Resource read operation template. */\nexport async function getLivenessSession(\n  context: Client,\n  sessionId: string,\n  options: SessionClientGetLivenessSessionOptions = { requestOptions: {} },\n): Promise<LivenessSession> {\n  const result = await _getLivenessSessionSend(context, sessionId, options);\n  return _getLivenessSessionDeserialize(result);\n}\n\nexport function _deleteLivenessSessionSend(\n  context: Client,\n  sessionId: string,\n  options: SessionClientDeleteLivenessSessionOptions = { requestOptions: {} },\n): StreamableMethod<undefined> {\n  return context\n    .path(\n      \"/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}\",\n      sessionId,\n    )\n    .delete({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _deleteLivenessSessionDeserialize(result): Promise<void> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return;\n}\n\n/** The most basic operation that applies to a resource. */\nexport async function deleteLivenessSession(\n  context: Client,\n  sessionId: string,\n  options: SessionClientDeleteLivenessSessionOptions = { requestOptions: {} },\n): Promise<void> {\n  const result = await _deleteLivenessSessionSend(context, sessionId, options);\n  return _deleteLivenessSessionDeserialize(result);\n}\n\nexport function _listLivenessSessionsSend(\n  context: Client,\n  options: SessionClientListLivenessSessionsOptions = { requestOptions: {} },\n): StreamableMethod<undefined> {\n  return context\n    .path(\"/face/{apiVersion}/detectLiveness/singleModal/sessions\")\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      queryParameters: { start: options?.start, top: options?.top },\n    });\n}\n\nexport async function _listLivenessSessionsDeserialize(\n  result,\n): Promise<LivenessSessionItem[]> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return result.body === undefined\n    ? result.body\n    : result.body.map((p) => ({\n        deviceCorrelationId: p[\"deviceCorrelationId\"],\n        authTokenTimeToLiveInSeconds: p[\"authTokenTimeToLiveInSeconds\"],\n        livenessOperationMode: p[\"livenessOperationMode\"],\n        id: p[\"id\"],\n        createdDateTime: new Date(p[\"createdDateTime\"]),\n        sessionStartDateTime:\n          p[\"sessionStartDateTime\"] !== undefined\n            ? new Date(p[\"sessionStartDateTime\"])\n            : undefined,\n        sessionExpired: p[\"sessionExpired\"],\n      }));\n}\n\n/** Operation that lists resources in a paginated way. */\nexport async function listLivenessSessions(\n  context: Client,\n  options: SessionClientListLivenessSessionsOptions = { requestOptions: {} },\n): Promise<LivenessSessionItem[]> {\n  const result = await _listLivenessSessionsSend(context, options);\n  return _listLivenessSessionsDeserialize(result);\n}\n\nexport function _listLivenessSessionAuditEntriesSend(\n  context: Client,\n  sessionId: string,\n  options: SessionClientListLivenessSessionAuditEntriesOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<undefined> {\n  return context\n    .path(\n      \"/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}/audit\",\n      sessionId,\n    )\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      queryParameters: { start: options?.start, top: options?.top },\n    });\n}\n\nexport async function _listLivenessSessionAuditEntriesDeserialize(\n  result,\n): Promise<LivenessSessionAuditEntry[]> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return result.body === undefined\n    ? result.body\n    : result.body.map((p) => ({\n        id: p[\"id\"],\n        sessionId: p[\"sessionId\"],\n        requestId: p[\"requestId\"],\n        clientRequestId: p[\"clientRequestId\"],\n        receivedDateTime: new Date(p[\"receivedDateTime\"]),\n        request: {\n          url: p.request[\"url\"],\n          method: p.request[\"method\"],\n          contentLength: p.request[\"contentLength\"],\n          contentType: p.request[\"contentType\"],\n          userAgent: p.request[\"userAgent\"],\n        },\n        response: {\n          body: p.response[\"body\"],\n          statusCode: p.response[\"statusCode\"],\n          latencyInMilliseconds: p.response[\"latencyInMilliseconds\"],\n        },\n        digest: p[\"digest\"],\n      }));\n}\n\n/** Operation that lists resources in a non-paginated way. */\nexport async function listLivenessSessionAuditEntries(\n  context: Client,\n  sessionId: string,\n  options: SessionClientListLivenessSessionAuditEntriesOptions = {\n    requestOptions: {},\n  },\n): Promise<LivenessSessionAuditEntry[]> {\n  const result = await _listLivenessSessionAuditEntriesSend(\n    context,\n    sessionId,\n    options,\n  );\n  return _listLivenessSessionAuditEntriesDeserialize(result);\n}\n\nexport function _createLivenessWithVerifySessionByJsonSend(\n  context: Client,\n  body: LivenessSessionCreationContent,\n  options: SessionClientCreateLivenessWithVerifySessionByJsonOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<undefined> {\n  return context\n    .path(\"/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        deviceCorrelationId: body[\"deviceCorrelationId\"],\n        authTokenTimeToLiveInSeconds: body[\"authTokenTimeToLiveInSeconds\"],\n        livenessOperationMode: body[\"livenessOperationMode\"],\n      },\n    }) as StreamableMethod<undefined>;\n}\n\nexport async function _createLivenessWithVerifySessionByJsonDeserialize(\n  result,\n): Promise<LivenessSessionCreationResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    sessionId: result.body[\"sessionId\"],\n    authToken: result.body[\"authToken\"],\n  };\n}\n\n/** Operation that applies to a collection of resources. */\nexport async function createLivenessWithVerifySessionByJson(\n  context: Client,\n  body: LivenessSessionCreationContent,\n  options: SessionClientCreateLivenessWithVerifySessionByJsonOptions = {\n    requestOptions: {},\n  },\n): Promise<LivenessSessionCreationResult> {\n  const result = await _createLivenessWithVerifySessionByJsonSend(\n    context,\n    body,\n    options,\n  );\n  return _createLivenessWithVerifySessionByJsonDeserialize(result);\n}\n\nexport function _createLivenessWithVerifySessionByFormDataSend(\n  context: Client,\n  body: LivenessWithVerifySessionCreationContent,\n  options: SessionClientCreateLivenessWithVerifySessionByFormDataOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | CreateLivenessWithVerifySessionByFormData200Response\n  | CreateLivenessWithVerifySessionByFormDataDefaultResponse\n> {\n  return context\n    .path(\"/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: (options.contentType as any) ?? \"multipart/form-data\",\n      body: {\n        Parameters: {\n          deviceCorrelationId: body.parameters[\"deviceCorrelationId\"],\n          authTokenTimeToLiveInSeconds:\n            body.parameters[\"authTokenTimeToLiveInSeconds\"],\n          livenessOperationMode: body.parameters[\"livenessOperationMode\"],\n        },\n        VerifyImage: uint8ArrayToString(body[\"verifyImage\"], \"base64\"),\n      },\n    }) as StreamableMethod<\n    | CreateLivenessWithVerifySessionByFormData200Response\n    | CreateLivenessWithVerifySessionByFormDataDefaultResponse\n  >;\n}\n\nexport async function _createLivenessWithVerifySessionByFormDataDeserialize(\n  result:\n    | CreateLivenessWithVerifySessionByFormData200Response\n    | CreateLivenessWithVerifySessionByFormDataDefaultResponse,\n): Promise<LivenessSessionCreationResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    sessionId: result.body[\"sessionId\"],\n    authToken: result.body[\"authToken\"],\n  };\n}\n\n/** Operation that applies to a collection of resources. */\nexport async function createLivenessWithVerifySessionByFormData(\n  context: Client,\n  body: LivenessWithVerifySessionCreationContent,\n  options: SessionClientCreateLivenessWithVerifySessionByFormDataOptions = {\n    requestOptions: {},\n  },\n): Promise<LivenessSessionCreationResult> {\n  const result = await _createLivenessWithVerifySessionByFormDataSend(\n    context,\n    body,\n    options,\n  );\n  return _createLivenessWithVerifySessionByFormDataDeserialize(result);\n}\n\nexport function _getLivenessWithVerifySessionSend(\n  context: Client,\n  sessionId: string,\n  options: SessionClientGetLivenessWithVerifySessionOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<undefined> {\n  return context\n    .path(\n      \"/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions/{sessionId}\",\n      sessionId,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _getLivenessWithVerifySessionDeserialize(\n  result,\n): Promise<LivenessWithVerifySession> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    deviceCorrelationId: result.body[\"deviceCorrelationId\"],\n    authTokenTimeToLiveInSeconds: result.body[\"authTokenTimeToLiveInSeconds\"],\n    livenessOperationMode: result.body[\"livenessOperationMode\"],\n    id: result.body[\"id\"],\n    createdDateTime: new Date(result.body[\"createdDateTime\"]),\n    sessionStartDateTime:\n      result.body[\"sessionStartDateTime\"] !== undefined\n        ? new Date(result.body[\"sessionStartDateTime\"])\n        : undefined,\n    sessionExpired: result.body[\"sessionExpired\"],\n    status: result.body[\"status\"],\n    result: !result.body.result\n      ? undefined\n      : {\n          id: result.body.result?.[\"id\"],\n          sessionId: result.body.result?.[\"sessionId\"],\n          requestId: result.body.result?.[\"requestId\"],\n          clientRequestId: result.body.result?.[\"clientRequestId\"],\n          receivedDateTime: new Date(result.body.result?.[\"receivedDateTime\"]),\n          request: {\n            url: result.body.result?.request[\"url\"],\n            method: result.body.result?.request[\"method\"],\n            contentLength: result.body.result?.request[\"contentLength\"],\n            contentType: result.body.result?.request[\"contentType\"],\n            userAgent: result.body.result?.request[\"userAgent\"],\n          },\n          response: {\n            body: result.body.result?.response[\"body\"],\n            statusCode: result.body.result?.response[\"statusCode\"],\n            latencyInMilliseconds:\n              result.body.result?.response[\"latencyInMilliseconds\"],\n          },\n          digest: result.body.result?.[\"digest\"],\n        },\n  };\n}\n\n/** Resource read operation template. */\nexport async function getLivenessWithVerifySession(\n  context: Client,\n  sessionId: string,\n  options: SessionClientGetLivenessWithVerifySessionOptions = {\n    requestOptions: {},\n  },\n): Promise<LivenessWithVerifySession> {\n  const result = await _getLivenessWithVerifySessionSend(\n    context,\n    sessionId,\n    options,\n  );\n  return _getLivenessWithVerifySessionDeserialize(result);\n}\n\nexport function _deleteLivenessWithVerifySessionSend(\n  context: Client,\n  sessionId: string,\n  options: SessionClientDeleteLivenessWithVerifySessionOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<undefined> {\n  return context\n    .path(\n      \"/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions/{sessionId}\",\n      sessionId,\n    )\n    .delete({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _deleteLivenessWithVerifySessionDeserialize(\n  result,\n): Promise<void> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return;\n}\n\n/** The most basic operation that applies to a resource. */\nexport async function deleteLivenessWithVerifySession(\n  context: Client,\n  sessionId: string,\n  options: SessionClientDeleteLivenessWithVerifySessionOptions = {\n    requestOptions: {},\n  },\n): Promise<void> {\n  const result = await _deleteLivenessWithVerifySessionSend(\n    context,\n    sessionId,\n    options,\n  );\n  return _deleteLivenessWithVerifySessionDeserialize(result);\n}\n\nexport function _listLivenessWithVerifySessionsSend(\n  context: Client,\n  options: SessionClientListLivenessWithVerifySessionsOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<undefined> {\n  return context\n    .path(\"/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions\")\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      queryParameters: { start: options?.start, top: options?.top },\n    }) as StreamableMethod<undefined>;\n}\n\nexport async function _listLivenessWithVerifySessionsDeserialize(\n  result,\n): Promise<LivenessSessionItem[]> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return result.body === undefined\n    ? result.body\n    : result.body.map((p) => ({\n        deviceCorrelationId: p[\"deviceCorrelationId\"],\n        authTokenTimeToLiveInSeconds: p[\"authTokenTimeToLiveInSeconds\"],\n        livenessOperationMode: p[\"livenessOperationMode\"],\n        id: p[\"id\"],\n        createdDateTime: new Date(p[\"createdDateTime\"]),\n        sessionStartDateTime:\n          p[\"sessionStartDateTime\"] !== undefined\n            ? new Date(p[\"sessionStartDateTime\"])\n            : undefined,\n        sessionExpired: p[\"sessionExpired\"],\n      }));\n}\n\n/** Operation that lists resources in a paginated way. */\nexport async function listLivenessWithVerifySessions(\n  context: Client,\n  options: SessionClientListLivenessWithVerifySessionsOptions = {\n    requestOptions: {},\n  },\n): Promise<LivenessSessionItem[]> {\n  const result = await _listLivenessWithVerifySessionsSend(context, options);\n  return _listLivenessWithVerifySessionsDeserialize(result);\n}\n\nexport function _listLivenessWithVerifySessionAuditEntriesSend(\n  context: Client,\n  sessionId: string,\n  options: SessionClientListLivenessWithVerifySessionAuditEntriesOptions = {\n    requestOptions: {},\n  },\n): StreamableMethod<undefined> {\n  return context\n    .path(\n      \"/face/{apiVersion}/detectLivenessWithVerify/singleModal/sessions/{sessionId}/audit\",\n      sessionId,\n    )\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      queryParameters: { start: options?.start, top: options?.top },\n    });\n}\n\nexport async function _listLivenessWithVerifySessionAuditEntriesDeserialize(\n  result,\n): Promise<LivenessWithVerifySessionAuditEntry[]> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return result.body === undefined\n    ? result.body\n    : result.body.map((p) => ({\n        id: p[\"id\"],\n        sessionId: p[\"sessionId\"],\n        requestId: p[\"requestId\"],\n        clientRequestId: p[\"clientRequestId\"],\n        receivedDateTime: new Date(p[\"receivedDateTime\"]),\n        request: {\n          url: p.request[\"url\"],\n          method: p.request[\"method\"],\n          contentLength: p.request[\"contentLength\"],\n          contentType: p.request[\"contentType\"],\n          userAgent: p.request[\"userAgent\"],\n        },\n        response: {\n          body: p.response[\"body\"],\n          statusCode: p.response[\"statusCode\"],\n          latencyInMilliseconds: p.response[\"latencyInMilliseconds\"],\n        },\n        digest: p[\"digest\"],\n      }));\n}\n\n/** Operation that lists resources in a non-paginated way. */\nexport async function listLivenessWithVerifySessionAuditEntries(\n  context: Client,\n  sessionId: string,\n  options: SessionClientListLivenessWithVerifySessionAuditEntriesOptions = {\n    requestOptions: {},\n  },\n): Promise<LivenessWithVerifySessionAuditEntry[]> {\n  const result = await _listLivenessWithVerifySessionAuditEntriesSend(\n    context,\n    sessionId,\n    options,\n  );\n  return _listLivenessWithVerifySessionAuditEntriesDeserialize(result);\n}\n"]}