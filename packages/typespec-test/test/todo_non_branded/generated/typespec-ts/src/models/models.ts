// Licensed under the MIT license.

import {
  TodoItem as TodoItemRest,
  TodoLabelRecord as TodoLabelRecordRest,
  TodoUrlAttachment as TodoUrlAttachmentRest,
  TodoItemPatch as TodoItemPatchRest,
  User as UserRest,
} from "../rest/index.js";

export interface TodoPage {
  /** The items in the page */
  items: TodoItem[];
  pagination: {
    pageSize: number;
    totalSize: number;
    prevLink?: string;
    nextLink?: string;
  };
}

export interface TodoItem {
  /** The item's unique id */
  id: number;
  /** The item's title */
  title: string;
  /** User that created the todo */
  readonly createdBy: number;
  /** User that the todo is assigned to */
  ownedBy: number;
  /** A longer description of the todo item in markdown format */
  description: string;
  /** The status of the todo item */
  status: "NotStarted" | "InProgress" | "Completed";
  /** When the todo item was created. */
  readonly createdAt: Date;
  /** When the todo item was last updated */
  readonly updatedAt: Date;
  /** When the todo item was makred as completed */
  readonly completedAt: Date;
  labels: TodoLabel[];
}

export function todoItemSerializer(item: TodoItem): TodoItemRest {
  return {
    id: item["id"],
    title: item["title"],
    ownedBy: item["ownedBy"],
    description: item["description"],
    status: item["status"],
    labels: item["labels"],
  };
}

export interface TodoLabelRecord {
  name: string;
  color?: string;
}

export function todoLabelRecordSerializer(
  item: TodoLabelRecord,
): TodoLabelRecordRest {
  return {
    name: item["name"],
    color: item["color"],
  };
}

export interface TodoUrlAttachment {
  /** A description of the URL */
  description: string;
  /** The url */
  url: string;
}

export function todoUrlAttachmentSerializer(
  item: TodoUrlAttachment,
): TodoUrlAttachmentRest {
  return {
    description: item["description"],
    url: item["url"],
  };
}

export interface ErrorModel {
  /** A machine readable error code */
  code: string;
  /** A human readable message */
  message: string;
}

export interface InvalidTodoItem extends ErrorModel {}

export interface TodoItemPatch {
  /** The item's title */
  title?: string;
  /** User that the todo is assigned to */
  ownedBy?: number;
  /** A longer description of the todo item in markdown format */
  description?: string;
  /** The status of the todo item */
  status?: "NotStarted" | "InProgress" | "Completed";
}

export function todoItemPatchSerializer(
  item: TodoItemPatch,
): TodoItemPatchRest {
  return {
    title: item["title"],
    ownedBy: item["ownedBy"],
    description: item["description"],
    status: item["status"],
  };
}

export interface TodoFileAttachment {
  /** The todo item this is attached to */
  todoItemId: number;
  /** The file name of the attachment */
  filename: string;
  /** The media type of the attachment */
  mediaType: string;
  /** The url where the attachment can be downloaded from */
  url: string;
}

export interface User {
  /** An autogenerated unique id for the user */
  readonly id: number;
  /** The user's username */
  username: string;
  /** The user's email address */
  email: string;
  /**
   * The user's password, provided when creating a user
   * but is otherwise not visible (and hashed by the backend)
   */
  password: string;
}

export function userSerializer(item: User): UserRest {
  return {
    username: item["username"],
    email: item["email"],
    password: item["password"],
  };
}

export interface UserCreatedResponse {
  /** An autogenerated unique id for the user */
  readonly id: number;
  /** The user's username */
  username: string;
  /** The user's email address */
  email: string;
  /**
   * The user's password, provided when creating a user
   * but is otherwise not visible (and hashed by the backend)
   */
  password: string;
  /** The token to use to construct the validate email address url */
  token: string;
}

/** The user already exists */
export interface UserExistsResponse extends ErrorModel {}

/** The user is invalid (e.g. forgot to enter email address) */
export interface InvalidUserResponse extends ErrorModel {}

/** Alias for TodoLabel */
export type TodoLabel = string | string[] | TodoLabelRecord | TodoLabelRecord[];
/** Alias for TodoAttachment */
export type TodoAttachment = TodoFileAttachment | TodoUrlAttachment;
