{
  "swagger": "2.0",
  "info": {
    "title": "Todo App",
    "version": "0000-00-00",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [],
  "paths": {
    "/forgot-password": {
      "post": {
        "operationId": "Users_ForgotPassword",
        "description": "Sends a reset token to the user's email address",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The user's email address"
                }
              },
              "required": [
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "404": {
            "description": "The server cannot find the requested resource."
          }
        }
      }
    },
    "/items": {
      "get": {
        "operationId": "TodoItems_List",
        "parameters": [
          {
            "$ref": "#/parameters/TodoItems.PaginationControls.limit"
          },
          {
            "$ref": "#/parameters/TodoItems.PaginationControls.offset"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TodoItems.TodoPage"
            }
          }
        }
      },
      "post": {
        "operationId": "TodoItems_CreateJson",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "item": {
                  "$ref": "#/definitions/TodoItem"
                },
                "attachments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TodoUrlAttachment"
                  },
                  "x-ms-identifiers": []
                }
              },
              "required": [
                "item",
                "attachments"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TodoItem"
            }
          },
          "422": {
            "description": "Client error",
            "schema": {
              "$ref": "#/definitions/TodoItems.InvalidTodoItem"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/items/{id}": {
      "get": {
        "operationId": "TodoItems_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TodoItem"
            }
          },
          "404": {
            "description": "The server cannot find the requested resource."
          }
        }
      },
      "patch": {
        "operationId": "TodoItems_Update",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "patch": {
                  "$ref": "#/definitions/TodoItems.TodoItemPatch"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TodoItem"
            }
          }
        }
      },
      "delete": {
        "operationId": "TodoItems_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "404": {
            "description": "The server cannot find the requested resource."
          }
        }
      }
    },
    "/items/{itemId}/attachments": {
      "get": {
        "operationId": "Attachments_List",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TodoAttachment"
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource."
          }
        }
      },
      "post": {
        "operationId": "Attachments_CreateUrlAttachment",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "$ref": "#/definitions/TodoUrlAttachment"
                }
              },
              "required": [
                "contents"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "404": {
            "description": "The server cannot find the requested resource."
          }
        }
      }
    },
    "/login": {
      "post": {
        "operationId": "Users_Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "The user's username",
                  "maxLength": 50
                },
                "password": {
                  "type": "string",
                  "description": "The user's password, provided when creating a user\nbut is otherwise not visible (and hashed by the backend)"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "401": {
            "description": "Access is unauthorized."
          }
        }
      }
    },
    "/logout": {
      "get": {
        "operationId": "Users_Logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          }
        }
      }
    },
    "/reset-password": {
      "get": {
        "operationId": "Users_ResetPassword",
        "parameters": [
          {
            "name": "resetToken",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "404": {
            "description": "The server cannot find the requested resource."
          }
        }
      }
    },
    "/users": {
      "post": {
        "operationId": "Users_Create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/User"
                }
              },
              "required": [
                "user"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Users.UserCreatedResponse"
            }
          },
          "409": {
            "description": "The request conflicts with the current state of the server.",
            "schema": {
              "$ref": "#/definitions/Users.UserExistsResponse"
            },
            "x-ms-error-response": true
          },
          "422": {
            "description": "Client error",
            "schema": {
              "$ref": "#/definitions/Users.InvalidUserResponse"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/validate": {
      "get": {
        "operationId": "Users_Validate",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "422": {
            "description": "Client error",
            "schema": {
              "$ref": "#/definitions/Users.InvalidUserResponse"
            },
            "x-ms-error-response": true
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/items/{itemId}/attachments?_overload=createFileAttachment": {
      "post": {
        "operationId": "Attachments_CreateFileAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "404": {
            "description": "The server cannot find the requested resource."
          }
        }
      }
    },
    "/items?_overload=createForm": {
      "post": {
        "operationId": "TodoItems_CreateForm",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "item",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachments",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {}
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TodoItem"
            }
          },
          "422": {
            "description": "Client error",
            "schema": {
              "$ref": "#/definitions/TodoItems.InvalidTodoItem"
            },
            "x-ms-error-response": true
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "A machine readable error code"
        },
        "message": {
          "type": "string",
          "description": "A human readable message"
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "TodoAttachment": {},
    "TodoFileAttachment": {
      "type": "object",
      "properties": {
        "todoItemId": {
          "type": "integer",
          "format": "int64",
          "description": "The todo item this is attached to"
        },
        "filename": {
          "type": "string",
          "description": "The file name of the attachment",
          "maxLength": 255
        },
        "mediaType": {
          "type": "string",
          "description": "The media type of the attachment"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The url where the attachment can be downloaded from"
        }
      },
      "required": [
        "todoItemId",
        "filename",
        "mediaType",
        "url"
      ]
    },
    "TodoItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The item's unique id"
        },
        "title": {
          "type": "string",
          "description": "The item's title",
          "maxLength": 255
        },
        "createdBy": {
          "type": "integer",
          "format": "int64",
          "description": "User that created the todo",
          "readOnly": true
        },
        "ownedBy": {
          "type": "integer",
          "format": "int64",
          "description": "User that the todo is assigned to"
        },
        "description": {
          "type": "string",
          "description": "A longer description of the todo item in markdown format"
        },
        "status": {
          "type": "string",
          "description": "The status of the todo item",
          "enum": [
            "NotStarted",
            "InProgress",
            "Completed"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the todo item was created.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the todo item was last updated",
          "readOnly": true
        },
        "completedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the todo item was makred as completed",
          "readOnly": true
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TodoLabel"
          }
        }
      },
      "required": [
        "id",
        "title",
        "createdBy",
        "ownedBy",
        "description",
        "status",
        "createdAt",
        "updatedAt",
        "completedAt",
        "labels"
      ]
    },
    "TodoItems.InvalidTodoItem": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        }
      ]
    },
    "TodoItems.TodoItemPatch": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The item's title",
          "maxLength": 255
        },
        "ownedBy": {
          "type": "integer",
          "format": "int64",
          "description": "User that the todo is assigned to"
        },
        "description": {
          "type": "string",
          "description": "A longer description of the todo item in markdown format"
        },
        "status": {
          "type": "string",
          "description": "The status of the todo item",
          "enum": [
            "NotStarted",
            "InProgress",
            "Completed"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      }
    },
    "TodoItems.TodoPage": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "The items in the page",
          "items": {
            "$ref": "#/definitions/TodoItem"
          }
        },
        "pagination": {
          "type": "object",
          "properties": {
            "pageSize": {
              "type": "integer",
              "format": "int32",
              "description": "The number of items returned in this page"
            },
            "totalSize": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of items"
            },
            "limit": {
              "type": "integer",
              "format": "int32",
              "description": "The limit to the number of items",
              "default": 50
            },
            "offset": {
              "type": "integer",
              "format": "int32",
              "description": "The offset to start paginating at",
              "default": 0
            },
            "prevLink": {
              "type": "string",
              "format": "uri",
              "description": "A link to the previous page, if it exists"
            },
            "nextLink": {
              "type": "string",
              "format": "uri",
              "description": "A link to the next page, if it exists"
            }
          },
          "required": [
            "pageSize",
            "totalSize",
            "limit",
            "offset"
          ]
        }
      },
      "required": [
        "items",
        "pagination"
      ]
    },
    "TodoLabel": {},
    "TodoLabelRecord": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "TodoUrlAttachment": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the URL"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The url"
        }
      },
      "required": [
        "description",
        "url"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "An autogenerated unique id for the user",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "description": "The user's username",
          "maxLength": 50
        },
        "email": {
          "type": "string",
          "description": "The user's email address"
        },
        "password": {
          "type": "string",
          "description": "The user's password, provided when creating a user\nbut is otherwise not visible (and hashed by the backend)",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "password"
      ]
    },
    "Users.InvalidUserResponse": {
      "type": "object",
      "description": "The user is invalid (e.g. forgot to enter email address)",
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        }
      ]
    },
    "Users.UserCreatedResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "An autogenerated unique id for the user",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "description": "The user's username",
          "maxLength": 50
        },
        "email": {
          "type": "string",
          "description": "The user's email address"
        },
        "password": {
          "type": "string",
          "description": "The user's password, provided when creating a user\nbut is otherwise not visible (and hashed by the backend)",
          "x-ms-mutability": [
            "create"
          ]
        },
        "token": {
          "type": "string",
          "description": "The token to use to construct the validate email address url"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "password",
        "token"
      ]
    },
    "Users.UserExistsResponse": {
      "type": "object",
      "description": "The user already exists",
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        }
      ]
    }
  },
  "parameters": {
    "TodoItems.PaginationControls.limit": {
      "name": "limit",
      "in": "query",
      "description": "The limit to the number of items",
      "required": true,
      "type": "integer",
      "format": "int32",
      "default": 50,
      "x-ms-parameter-location": "method"
    },
    "TodoItems.PaginationControls.offset": {
      "name": "offset",
      "in": "query",
      "description": "The offset to start paginating at",
      "required": true,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    }
  }
}
