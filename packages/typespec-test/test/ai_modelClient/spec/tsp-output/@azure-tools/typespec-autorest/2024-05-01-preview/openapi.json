{
  "swagger": "2.0",
  "info": {
    "title": "AI Model Inference",
    "version": "2024-05-01-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://ml.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://ml.azure.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/chat/completions": {
      "post": {
        "operationId": "GetChatCompletions",
        "description": "Gets chat completions for the provided chat messages.\nCompletions support a wide variety of tasks and generate text that continues from or \"completes\"\nprovided prompt data.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "unknown-parameters",
            "in": "header",
            "description": "Controls what happens if unknown parameters are passed in the JSON request payload.\nThis sets the HTTP request header `unknown-parameters`.",
            "required": false,
            "type": "string",
            "enum": [
              "error",
              "drop",
              "pass_through"
            ],
            "x-ms-enum": {
              "name": "UnknownParams",
              "modelAsString": true,
              "values": [
                {
                  "name": "error",
                  "value": "error",
                  "description": "The service will error if it detected unknown parameters in the request payload. This is the service default."
                },
                {
                  "name": "drop",
                  "value": "drop",
                  "description": "The service will ignore (drop) unknown parameters in the request payload. It will only pass the known parameters to the back-end AI model."
                },
                {
                  "name": "pass_through",
                  "value": "pass_through",
                  "description": "The service will pass unknown parameters to the back-end AI model."
                }
              ]
            },
            "x-ms-client-name": "unknown_params"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "description": "The collection of context messages associated with this chat completions request.\nTypical usage begins with a chat message for the System role that provides instructions for\nthe behavior of the assistant, followed by alternating messages between the User and\nAssistant roles.",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/definitions/ChatRequestMessage"
                  },
                  "x-ms-identifiers": []
                },
                "frequency_penalty": {
                  "type": "number",
                  "format": "float",
                  "description": "A value that influences the probability of generated tokens appearing based on their cumulative\nfrequency in generated text.\nPositive values will make tokens less likely to appear as their frequency increases and\ndecrease the likelihood of the model repeating the same statements verbatim.",
                  "default": 0,
                  "minimum": -2,
                  "maximum": 2
                },
                "stream": {
                  "type": "boolean",
                  "description": "A value indicating whether chat completions should be streamed for this request."
                },
                "presence_penalty": {
                  "type": "number",
                  "format": "float",
                  "description": "A value that influences the probability of generated tokens appearing based on their existing\npresence in generated text.\nPositive values will make tokens less likely to appear when they already exist and increase the\nmodel's likelihood to output new topics.",
                  "default": 0,
                  "minimum": -2,
                  "maximum": 2
                },
                "temperature": {
                  "type": "number",
                  "format": "float",
                  "description": "The sampling temperature to use that controls the apparent creativity of generated completions.\nHigher values will make output more random while lower values will make results more focused\nand deterministic.\nIt is not recommended to modify temperature and top_p for the same completions request as the\ninteraction of these two settings is difficult to predict.",
                  "default": 0.7,
                  "minimum": 0,
                  "maximum": 1
                },
                "top_p": {
                  "type": "number",
                  "format": "float",
                  "description": "An alternative to sampling with temperature called nucleus sampling. This value causes the\nmodel to consider the results of tokens with the provided probability mass. As an example, a\nvalue of 0.15 will cause only the tokens comprising the top 15% of probability mass to be\nconsidered.\nIt is not recommended to modify temperature and top_p for the same completions request as the\ninteraction of these two settings is difficult to predict.",
                  "default": 1,
                  "minimum": 0,
                  "maximum": 1
                },
                "max_tokens": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of tokens to generate.",
                  "minimum": 0
                },
                "response_format": {
                  "$ref": "#/definitions/ChatCompletionsResponseFormat",
                  "description": "An object specifying the format that the model must output. Used to enable JSON mode."
                },
                "stop": {
                  "type": "array",
                  "description": "A collection of textual sequences that will end completions generation.",
                  "minItems": 1,
                  "items": {
                    "type": "string"
                  }
                },
                "tools": {
                  "type": "array",
                  "description": "The available tool definitions that the chat completions request can use, including caller-defined functions.",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/definitions/ChatCompletionsToolDefinition"
                  },
                  "x-ms-identifiers": []
                },
                "tool_choice": {
                  "description": "If specified, the model will configure which of the provided tools it can use for the chat completions response.",
                  "x-ms-client-name": "toolChoice"
                },
                "seed": {
                  "type": "integer",
                  "format": "int64",
                  "description": "If specified, the system will make a best effort to sample deterministically such that repeated requests with the\nsame seed and parameters should return the same result. Determinism is not guaranteed.\""
                }
              },
              "required": [
                "messages"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ChatCompletions"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/embeddings": {
      "post": {
        "operationId": "GetEmbeddings",
        "description": "Return the embeddings for a given text prompt.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "unknown-parameters",
            "in": "header",
            "description": "Controls what happens if unknown parameters are passed in the JSON request payload.\nThis sets the HTTP request header `unknown-parameters`.",
            "required": false,
            "type": "string",
            "enum": [
              "error",
              "drop",
              "pass_through"
            ],
            "x-ms-enum": {
              "name": "UnknownParams",
              "modelAsString": true,
              "values": [
                {
                  "name": "error",
                  "value": "error",
                  "description": "The service will error if it detected unknown parameters in the request payload. This is the service default."
                },
                {
                  "name": "drop",
                  "value": "drop",
                  "description": "The service will ignore (drop) unknown parameters in the request payload. It will only pass the known parameters to the back-end AI model."
                },
                {
                  "name": "pass_through",
                  "value": "pass_through",
                  "description": "The service will pass unknown parameters to the back-end AI model."
                }
              ]
            },
            "x-ms-client-name": "unknown_params"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "input": {
                  "type": "array",
                  "description": "Input text to embed, encoded as a string or array of tokens.\nTo embed multiple inputs in a single request, pass an array\nof strings or array of token arrays.",
                  "items": {
                    "type": "string"
                  }
                },
                "dimensions": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. The number of dimensions the resulting output embeddings should have.\nPassing null causes the model to use its default value.\nReturns a 422 error if the model doesn't support the value or parameter."
                },
                "encoding_format": {
                  "$ref": "#/definitions/EmbeddingEncodingFormat",
                  "description": "Optional. The number of dimensions the resulting output embeddings should have.\nPassing null causes the model to use its default value.\nReturns a 422 error if the model doesn't support the value or parameter."
                },
                "input_type": {
                  "$ref": "#/definitions/EmbeddingInputType",
                  "description": "Optional. The type of the input.\nReturns a 422 error if the model doesn't support the value or parameter."
                }
              },
              "required": [
                "input"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EmbeddingsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/images/embeddings": {
      "post": {
        "operationId": "GetImageEmbeddings",
        "description": "Return the embeddings for given images.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "unknown-parameters",
            "in": "header",
            "description": "Controls what happens if unknown parameters are passed in the JSON request payload.\nThis sets the HTTP request header `unknown-parameters`.",
            "required": false,
            "type": "string",
            "enum": [
              "error",
              "drop",
              "pass_through"
            ],
            "x-ms-enum": {
              "name": "UnknownParams",
              "modelAsString": true,
              "values": [
                {
                  "name": "error",
                  "value": "error",
                  "description": "The service will error if it detected unknown parameters in the request payload. This is the service default."
                },
                {
                  "name": "drop",
                  "value": "drop",
                  "description": "The service will ignore (drop) unknown parameters in the request payload. It will only pass the known parameters to the back-end AI model."
                },
                {
                  "name": "pass_through",
                  "value": "pass_through",
                  "description": "The service will pass unknown parameters to the back-end AI model."
                }
              ]
            },
            "x-ms-client-name": "unknown_params"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "input": {
                  "type": "array",
                  "description": "Input image to embed. To embed multiple inputs in a single request, pass an array.\nThe input must not exceed the max input tokens for the model.",
                  "items": {
                    "$ref": "#/definitions/EmbeddingInput"
                  },
                  "x-ms-identifiers": []
                },
                "dimensions": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. The number of dimensions the resulting output embeddings should have.\nPassing null causes the model to use its default value.\nReturns a 422 error if the model doesn't support the value or parameter."
                },
                "encoding_format": {
                  "$ref": "#/definitions/EmbeddingEncodingFormat",
                  "description": "Optional. The number of dimensions the resulting output embeddings should have.\nPassing null causes the model to use its default value.\nReturns a 422 error if the model doesn't support the value or parameter."
                },
                "input_type": {
                  "$ref": "#/definitions/EmbeddingInputType",
                  "description": "Optional. The type of the input.\nReturns a 422 error if the model doesn't support the value or parameter."
                }
              },
              "required": [
                "input"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EmbeddingsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/info": {
      "get": {
        "operationId": "GetModelInfo",
        "description": "Returns information about the AI model.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ModelInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "CapacityType": {
      "type": "string",
      "description": "Whether your capacity has been affected by the usage amount (token count) reported here.",
      "enum": [
        "usage",
        "fixed"
      ],
      "x-ms-enum": {
        "name": "CapacityType",
        "modelAsString": true,
        "values": [
          {
            "name": "usage",
            "value": "usage",
            "description": "Your capacity has been affected by the usage amount (token count) reported here."
          },
          {
            "name": "fixed",
            "value": "fixed",
            "description": "Your capacity has not been affected by the usage amount (token count) reported here."
          }
        ]
      }
    },
    "ChatChoice": {
      "type": "object",
      "description": "The representation of a single prompt completion as part of an overall chat completions request.\nGenerally, `n` choices are generated per provided prompt with a default value of 1.\nToken limits and other settings may limit the number of choices generated.",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The ordered index associated with this chat completions choice."
        },
        "finish_reason": {
          "$ref": "#/definitions/CompletionsFinishReason",
          "description": "The reason that this chat completions choice completed its generated.",
          "x-nullable": true
        },
        "message": {
          "$ref": "#/definitions/ChatResponseMessage",
          "description": "The chat message for a given chat completions prompt."
        }
      },
      "required": [
        "index",
        "finish_reason",
        "message"
      ]
    },
    "ChatCompletions": {
      "type": "object",
      "description": "Representation of the response data from a chat completions request.\nCompletions support a wide variety of tasks and generate text that continues from or \"completes\"\nprovided prompt data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier associated with this chat completions response."
        },
        "created": {
          "type": "integer",
          "format": "unixtime",
          "description": "The first timestamp associated with generation activity for this completions response,\nrepresented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970."
        },
        "model": {
          "type": "string",
          "description": "The model used for the chat completion."
        },
        "usage": {
          "$ref": "#/definitions/CompletionsUsage",
          "description": "Usage information for tokens processed and generated as part of this completions operation."
        },
        "choices": {
          "type": "array",
          "description": "The collection of completions choices associated with this completions response.\nGenerally, `n` choices are generated per provided prompt with a default value of 1.\nToken limits and other settings may limit the number of choices generated.",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ChatChoice"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "id",
        "created",
        "model",
        "usage",
        "choices"
      ]
    },
    "ChatCompletionsFunctionToolCall": {
      "type": "object",
      "description": "A tool call to a function tool, issued by the model in evaluation of a configured function tool, that represents\na function invocation needed for a subsequent chat completions request to resolve.",
      "properties": {
        "function": {
          "$ref": "#/definitions/FunctionCall",
          "description": "The details of the function invocation requested by the tool call."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatCompletionsToolCall"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "ChatCompletionsFunctionToolDefinition": {
      "type": "object",
      "description": "The definition information for a chat completions function tool that can call a function in response to a tool call.",
      "properties": {
        "function": {
          "$ref": "#/definitions/FunctionDefinition",
          "description": "The function definition details for the function tool."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatCompletionsToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "ChatCompletionsFunctionToolSelection": {
      "type": "object",
      "description": "A tool selection of a specific, named function tool that will limit chat completions to using the named function.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function that should be called."
        }
      },
      "required": [
        "name"
      ]
    },
    "ChatCompletionsNamedFunctionToolSelection": {
      "type": "object",
      "description": "A tool selection of a specific, named function tool that will limit chat completions to using the named function.",
      "properties": {
        "function": {
          "$ref": "#/definitions/ChatCompletionsFunctionToolSelection",
          "description": "The function that should be called."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatCompletionsNamedToolSelection"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "ChatCompletionsNamedToolSelection": {
      "type": "object",
      "description": "An abstract representation of an explicit, named tool selection to use for a chat completions request.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "ChatCompletionsResponseFormat": {
      "type": "string",
      "description": "An representation of a response format configuration usable by Chat Completions. Can be used to enable JSON\nmode.",
      "enum": [
        "text",
        "json_object"
      ],
      "x-ms-enum": {
        "name": "ChatCompletionsResponseFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text",
            "description": "The standard Chat Completions response format that can freely generate text and is not guaranteed to produce response\ncontent that adheres to a specific schema."
          },
          {
            "name": "json_object",
            "value": "json_object",
            "description": "A response format for Chat Completions that restricts responses to emitting valid JSON objects."
          }
        ]
      }
    },
    "ChatCompletionsToolCall": {
      "type": "object",
      "description": "An abstract representation of a tool call that must be resolved in a subsequent request to perform the requested\nchat completion.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "id"
      ]
    },
    "ChatCompletionsToolDefinition": {
      "type": "object",
      "description": "An abstract representation of a tool that can be used by the model to improve a chat completions response.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "ChatCompletionsToolSelectionPreset": {
      "type": "string",
      "description": "Represents a generic policy for how a chat completions tool may be selected.",
      "enum": [
        "auto",
        "none",
        "required"
      ],
      "x-ms-enum": {
        "name": "ChatCompletionsToolSelectionPreset",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto",
            "description": "Specifies that the model may either use any of the tools provided in this chat completions request or\ninstead return a standard chat completions response as if no tools were provided."
          },
          {
            "name": "none",
            "value": "none",
            "description": "Specifies that the model should not respond with a tool call and should instead provide a standard chat\ncompletions response. Response content may still be influenced by the provided tool definitions."
          },
          {
            "name": "required",
            "value": "required",
            "description": "Specifies that the model should respond with a call to one or more tools."
          }
        ]
      }
    },
    "ChatRequestAssistantMessage": {
      "type": "object",
      "description": "A request chat message representing response or action from the assistant.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The content of the message.",
          "x-nullable": true
        },
        "tool_calls": {
          "type": "array",
          "description": "The tool calls that must be resolved and have their outputs appended to subsequent input messages for the chat\ncompletions request to resolve as configured.",
          "items": {
            "$ref": "#/definitions/ChatCompletionsToolCall"
          },
          "x-ms-client-name": "toolCalls"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ChatRequestMessage"
        }
      ],
      "x-ms-discriminator-value": "assistant"
    },
    "ChatRequestMessage": {
      "type": "object",
      "description": "An abstract representation of a chat message as provided in a request.",
      "properties": {
        "role": {
          "$ref": "#/definitions/ChatRole",
          "description": "The chat role associated with this message."
        }
      },
      "discriminator": "role",
      "required": [
        "role"
      ]
    },
    "ChatRequestSystemMessage": {
      "type": "object",
      "description": "A request chat message containing system instructions that influence how the model will generate a chat completions\nresponse.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The contents of the system message."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatRequestMessage"
        }
      ],
      "x-ms-discriminator-value": "system"
    },
    "ChatRequestToolMessage": {
      "type": "object",
      "description": "A request chat message representing requested output from a configured tool.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The content of the message.",
          "x-nullable": true
        },
        "tool_call_id": {
          "type": "string",
          "description": "The ID of the tool call resolved by the provided content.",
          "x-ms-client-name": "toolCallId"
        }
      },
      "required": [
        "content",
        "tool_call_id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatRequestMessage"
        }
      ],
      "x-ms-discriminator-value": "tool"
    },
    "ChatRequestUserMessage": {
      "type": "object",
      "description": "A request chat message representing user input to the assistant.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The contents of the user message, with available input types varying by selected model."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatRequestMessage"
        }
      ],
      "x-ms-discriminator-value": "user"
    },
    "ChatResponseMessage": {
      "type": "object",
      "description": "A representation of a chat message as received in a response.",
      "properties": {
        "role": {
          "$ref": "#/definitions/ChatRole",
          "description": "The chat role associated with the message."
        },
        "content": {
          "type": "string",
          "description": "The content of the message.",
          "x-nullable": true
        },
        "tool_calls": {
          "type": "array",
          "description": "The tool calls that must be resolved and have their outputs appended to subsequent input messages for the chat\ncompletions request to resolve as configured.",
          "items": {
            "$ref": "#/definitions/ChatCompletionsToolCall"
          },
          "x-ms-client-name": "toolCalls"
        }
      },
      "required": [
        "role",
        "content"
      ]
    },
    "ChatRole": {
      "type": "string",
      "description": "A description of the intended purpose of a message within a chat completions interaction.",
      "enum": [
        "system",
        "user",
        "assistant",
        "tool"
      ],
      "x-ms-enum": {
        "name": "ChatRole",
        "modelAsString": true,
        "values": [
          {
            "name": "system",
            "value": "system",
            "description": "The role that instructs or sets the behavior of the assistant."
          },
          {
            "name": "user",
            "value": "user",
            "description": "The role that provides input for chat completions."
          },
          {
            "name": "assistant",
            "value": "assistant",
            "description": "The role that provides responses to system-instructed, user-prompted input."
          },
          {
            "name": "tool",
            "value": "tool",
            "description": "The role that represents extension tool activity within a chat completions operation."
          }
        ]
      }
    },
    "CompletionsFinishReason": {
      "type": "string",
      "description": "Representation of the manner in which a completions response concluded.",
      "enum": [
        "stop",
        "length",
        "content_filter",
        "tool_calls"
      ],
      "x-ms-enum": {
        "name": "CompletionsFinishReason",
        "modelAsString": true,
        "values": [
          {
            "name": "stopped",
            "value": "stop",
            "description": "Completions ended normally and reached its end of token generation."
          },
          {
            "name": "tokenLimitReached",
            "value": "length",
            "description": "Completions exhausted available token limits before generation could complete."
          },
          {
            "name": "contentFiltered",
            "value": "content_filter",
            "description": "Completions generated a response that was identified as potentially sensitive per content\nmoderation policies."
          },
          {
            "name": "toolCalls",
            "value": "tool_calls",
            "description": "Completion ended with the model calling a provided tool for output."
          }
        ]
      }
    },
    "CompletionsUsage": {
      "type": "object",
      "description": "Representation of the token counts processed for a completions request.\nCounts consider all tokens across prompts, choices, choice alternates, best_of generations, and\nother consumers.",
      "properties": {
        "capacity_type": {
          "$ref": "#/definitions/CapacityType",
          "description": "Indicates whether your capacity has been affected by the usage amount (token count) reported here."
        },
        "completion_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of tokens generated across all completions emissions."
        },
        "prompt_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of tokens in the provided prompts for the completions request."
        },
        "total_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of tokens processed for the completions request and response."
        }
      },
      "required": [
        "capacity_type",
        "completion_tokens",
        "prompt_tokens",
        "total_tokens"
      ]
    },
    "EmbeddingEncodingFormat": {
      "type": "string",
      "description": "The format of the embeddings result.\nReturns a 422 error if the model doesn't support the value or parameter.",
      "enum": [
        "base64",
        "binary",
        "float",
        "int8",
        "ubinary",
        "uint8"
      ],
      "x-ms-enum": {
        "name": "EmbeddingEncodingFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "base64",
            "value": "base64",
            "description": "Base64"
          },
          {
            "name": "binary",
            "value": "binary",
            "description": "Binary"
          },
          {
            "name": "float",
            "value": "float",
            "description": "Floating point"
          },
          {
            "name": "int8",
            "value": "int8",
            "description": "Signed 8-bit integer"
          },
          {
            "name": "ubinary",
            "value": "ubinary",
            "description": "ubinary"
          },
          {
            "name": "uint8",
            "value": "uint8",
            "description": "Unsigned 8-bit integer"
          }
        ]
      }
    },
    "EmbeddingInput": {
      "type": "object",
      "description": "Represents an image with optional text.",
      "properties": {
        "image": {
          "type": "string",
          "description": "The input image, in PNG format."
        },
        "text": {
          "type": "string",
          "description": "Optional. The text input to feed into the model (like DINO, CLIP).\nReturns a 422 error if the model doesn't support the value or parameter."
        }
      },
      "required": [
        "image"
      ]
    },
    "EmbeddingInputType": {
      "type": "string",
      "description": "Represents the input types used for embedding search.",
      "enum": [
        "text",
        "query",
        "document"
      ],
      "x-ms-enum": {
        "name": "EmbeddingInputType",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text",
            "description": "to do"
          },
          {
            "name": "query",
            "value": "query",
            "description": "to do"
          },
          {
            "name": "document",
            "value": "document",
            "description": "to do"
          }
        ]
      }
    },
    "EmbeddingItem": {
      "type": "object",
      "description": "Representation of a single embeddings relatedness comparison.",
      "properties": {
        "embedding": {
          "type": "array",
          "description": "List of embeddings value for the input prompt. These represent a measurement of the\nvector-based relatedness of the provided input.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the prompt to which the EmbeddingItem corresponds."
        }
      },
      "required": [
        "embedding",
        "index"
      ]
    },
    "EmbeddingsResult": {
      "type": "object",
      "description": "Representation of the response data from an embeddings request.\nEmbeddings measure the relatedness of text strings and are commonly used for search, clustering,\nrecommendations, and other similar scenarios.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the embeddings result."
        },
        "data": {
          "type": "array",
          "description": "Embedding values for the prompts submitted in the request.",
          "items": {
            "$ref": "#/definitions/EmbeddingItem"
          },
          "x-ms-identifiers": []
        },
        "usage": {
          "$ref": "#/definitions/EmbeddingsUsage",
          "description": "Usage counts for tokens input using the embeddings API."
        },
        "model": {
          "type": "string",
          "description": "The model ID used to generate this result."
        }
      },
      "required": [
        "id",
        "data",
        "usage",
        "model"
      ]
    },
    "EmbeddingsUsage": {
      "type": "object",
      "description": "Measurement of the amount of tokens used in this request and response.",
      "properties": {
        "capacity_type": {
          "$ref": "#/definitions/CapacityType",
          "description": "Indicates whether your capacity has been affected by the usage amount (token count) reported here."
        },
        "input_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tokens in the request prompt."
        },
        "prompt_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tokens used for the prompt sent to the AI model. Typically identical to `input_tokens`.\nHowever, certain AI models may add extra tokens to the input hence the number can be higher.\n(for example when input_type=\"query\")."
        },
        "total_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of tokens transacted in this request/response."
        }
      },
      "required": [
        "capacity_type",
        "input_tokens",
        "prompt_tokens",
        "total_tokens"
      ]
    },
    "FunctionCall": {
      "type": "object",
      "description": "The name and arguments of a function that should be called, as generated by the model.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function to call."
        },
        "arguments": {
          "type": "string",
          "description": "The arguments to call the function with, as generated by the model in JSON format.\nNote that the model does not always generate valid JSON, and may hallucinate parameters\nnot defined by your function schema. Validate the arguments in your code before calling\nyour function."
        }
      },
      "required": [
        "name",
        "arguments"
      ]
    },
    "FunctionDefinition": {
      "type": "object",
      "description": "The definition of a caller-specified function that chat completions may invoke in response to matching user input.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function to be called."
        },
        "description": {
          "type": "string",
          "description": "A description of what the function does. The model will use this description when selecting the function and\ninterpreting its parameters."
        },
        "parameters": {
          "description": "The parameters the function accepts, described as a JSON Schema object."
        }
      },
      "required": [
        "name"
      ]
    },
    "ModelInfo": {
      "type": "object",
      "description": "Represents some basic information about the AI model.",
      "properties": {
        "model_name": {
          "type": "string",
          "description": "The name of the AI model. For example: `Phi21`"
        },
        "model_type": {
          "$ref": "#/definitions/ModelType",
          "description": "The type of the AI model. A Unique identifier for the profile."
        },
        "model_provider_name": {
          "type": "string",
          "description": "The model provider name. For example: `Microsoft Research`"
        }
      },
      "required": [
        "model_name",
        "model_type",
        "model_provider_name"
      ]
    },
    "ModelType": {
      "type": "string",
      "description": "The type of AI model",
      "enum": [
        "embeddings",
        "image_generation",
        "text_generation",
        "image_embeddings",
        "audio_generation",
        "chat"
      ],
      "x-ms-enum": {
        "name": "ModelType",
        "modelAsString": true,
        "values": [
          {
            "name": "embeddings",
            "value": "embeddings",
            "description": "Embeddings."
          },
          {
            "name": "image_generation",
            "value": "image_generation",
            "description": "Image generation"
          },
          {
            "name": "text_generation",
            "value": "text_generation",
            "description": "Text generation"
          },
          {
            "name": "image_embeddings",
            "value": "image_embeddings",
            "description": "Image embeddings"
          },
          {
            "name": "audio_generation",
            "value": "audio_generation",
            "description": "Audio generation"
          },
          {
            "name": "chat",
            "value": "chat",
            "description": "Chat completions"
          }
        ]
      }
    },
    "StreamingChatChoiceUpdate": {
      "type": "object",
      "description": "Represents an update to a single prompt completion when the service is streaming updates \nusing Server Sent Events (SSE).\nGenerally, `n` choices are generated per provided prompt with a default value of 1.\nToken limits and other settings may limit the number of choices generated.",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The ordered index associated with this chat completions choice."
        },
        "finish_reason": {
          "$ref": "#/definitions/CompletionsFinishReason",
          "description": "The reason that this chat completions choice completed its generated.",
          "x-nullable": true
        },
        "delta": {
          "$ref": "#/definitions/ChatResponseMessage",
          "description": "An update to the chat message for a given chat completions prompt."
        }
      },
      "required": [
        "index",
        "finish_reason",
        "delta"
      ]
    },
    "StreamingChatCompletionsUpdate": {
      "type": "object",
      "description": "Represents a response update to a chat completions request, when the service is streaming updates \nusing Server Sent Events (SSE).\nCompletions support a wide variety of tasks and generate text that continues from or \"completes\"\nprovided prompt data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier associated with this chat completions response."
        },
        "created": {
          "type": "integer",
          "format": "unixtime",
          "description": "The first timestamp associated with generation activity for this completions response,\nrepresented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970."
        },
        "model": {
          "type": "string",
          "description": "The model used for the chat completion."
        },
        "usage": {
          "$ref": "#/definitions/CompletionsUsage",
          "description": "Usage information for tokens processed and generated as part of this completions operation."
        },
        "choices": {
          "type": "array",
          "description": "An update to the collection of completion choices associated with this completions response.\nGenerally, `n` choices are generated per provided prompt with a default value of 1.\nToken limits and other settings may limit the number of choices generated.",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/StreamingChatChoiceUpdate"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "id",
        "created",
        "model",
        "usage",
        "choices"
      ]
    },
    "UnknownParams": {
      "type": "string",
      "description": "Controls what happens if unknown parameters are passed in the JSON request payload.",
      "enum": [
        "error",
        "drop",
        "pass_through"
      ],
      "x-ms-enum": {
        "name": "UnknownParams",
        "modelAsString": true,
        "values": [
          {
            "name": "error",
            "value": "error",
            "description": "The service will error if it detected unknown parameters in the request payload. This is the service default."
          },
          {
            "name": "drop",
            "value": "drop",
            "description": "The service will ignore (drop) unknown parameters in the request payload. It will only pass the known parameters to the back-end AI model."
          },
          {
            "name": "pass_through",
            "value": "pass_through",
            "description": "The service will pass unknown parameters to the back-end AI model."
          }
        ]
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
