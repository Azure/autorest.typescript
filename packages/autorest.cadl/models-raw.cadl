import "@cadl-lang/rest";
using Cadl.Rest;
using Cadl.Http;
@serviceTitle("Azure Web PubSub Service REST API")
@server("{Endpoint}", ""
, {
@doc("HTTP or HTTPS endpoint for the Web PubSub service instance.")
Endpoint: string 
})
// TODO: Add documentation 
namespace AzureWebPubSubServiceRESTAPI;

    enum WebPubSubPermissionKnownValues {
        "sendToGroup", "joinLeaveGroup"
    }


    @knownValues(WebPubSubPermissionKnownValues)
    model WebPubSubPermission is string {}


    enum ContentType {
        "application/json", "application/octet-stream", "text/plain"
    }
@doc("The response object containing the token for the client")
model ClientTokenResponse {
@doc("The token value for the WebSocket client to connect to the service")
  token: string;
}

@doc("The error object.")
model ErrorDetail {
@doc("One of a server-defined set of error codes.")
  code: string;
@doc("A human-readable representation of the error.")
  message: string;
@doc("The target of the error.")
  target: string;
@doc("An array of details about specific errors that led to this reported error.")
  details: ErrorDetail[];
// TODO: Add documentation 
  inner: InnerError;
}

// TODO: Add documentation 
model InnerError {
@doc("A more specific error code than was provided by the containing error.")
  code: string;
// TODO: Add documentation 
  inner: InnerError;
}
// TODO: Add documentation 
interface HealthApi {
@summary("Get service health status.")
@doc("Get service health status.")
@route("/api/health")
@head op GetServiceStatus(): void;
}

// TODO: Add documentation 
interface WebPubSub {
@summary("Generate token for the client to connect Azure Web PubSub service.")
@doc("Generate token for the client to connect Azure Web PubSub service.")
@route("/api/hubs/{hub}/:generateToken")
@post op GenerateClientToken(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,): ClientTokenResponse;
@summary("Close the connections in the hub.")
@doc("Close the connections in the hub.")
@route("/api/hubs/{hub}/:closeConnections")
@post op CloseAllConnections(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,): void;
@summary("Broadcast content inside request body to all the connected client connections.")
@doc("Broadcast content inside request body to all the connected client connections.")
@route("/api/hubs/{hub}/:send")
@post op SendToAll(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,): void;
@summary("Check if the connection with the given connectionId exists.")
@doc("Check if the connection with the given connectionId exists.")
@route("/api/hubs/{hub}/connections/{connectionId}")
@head op ConnectionExists(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("The connection Id.")
@path connectionId: string,): void;
@summary("Close the client connection.")
@doc("Close the client connection.")
@route("/api/hubs/{hub}/connections/{connectionId}")
@delete op CloseConnection(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target connection Id.")
@path connectionId: string,): void;
@summary("Send content inside request body to the specific connection.")
@doc("Send content inside request body to the specific connection.")
@route("/api/hubs/{hub}/connections/{connectionId}/:send")
@post op SendToConnection(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("The connection Id.")
@path connectionId: string,): void;
@summary("Check if there are any client connections inside the given group")
@doc("Check if there are any client connections inside the given group")
@route("/api/hubs/{hub}/groups/{group}")
@head op GroupExists(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target group name, which length should be greater than 0 and less than 1025.")
@path group: string,): void;
@summary("Close connections in the specific group.")
@doc("Close connections in the specific group.")
@route("/api/hubs/{hub}/groups/{group}/:closeConnections")
@post op CloseGroupConnections(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target group name, which length should be greater than 0 and less than 1025.")
@path group: string,): void;
@summary("Send content inside request body to a group of connections.")
@doc("Send content inside request body to a group of connections.")
@route("/api/hubs/{hub}/groups/{group}/:send")
@post op SendToGroup(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target group name, which length should be greater than 0 and less than 1025.")
@path group: string,): void;
@summary("Add a connection to the target group.")
@doc("Add a connection to the target group.")
@route("/api/hubs/{hub}/groups/{group}/connections/{connectionId}")
@put op AddConnectionToGroup(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target group name, which length should be greater than 0 and less than 1025.")
@path group: string,
@doc("Target connection Id")
@path connectionId: string,): void;
@summary("Remove a connection from the target group.")
@doc("Remove a connection from the target group.")
@route("/api/hubs/{hub}/groups/{group}/connections/{connectionId}")
@delete op RemoveConnectionFromGroup(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target group name, which length should be greater than 0 and less than 1025.")
@path group: string,
@doc("Target connection Id.")
@path connectionId: string,): void;
@summary("Check if there are any client connections connected for the given user.")
@doc("Check if there are any client connections connected for the given user.")
@route("/api/hubs/{hub}/users/{userId}")
@head op UserExists(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target user Id.")
@path userId: string,): void;
@summary("Close connections for the specific user.")
@doc("Close connections for the specific user.")
@route("/api/hubs/{hub}/users/{userId}/:closeConnections")
@post op CloseUserConnections(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("The user Id.")
@path userId: string,): void;
@summary("Send content inside request body to the specific user.")
@doc("Send content inside request body to the specific user.")
@route("/api/hubs/{hub}/users/{userId}/:send")
@post op SendToUser(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("The user Id.")
@path userId: string,): void;
@summary("Add a user to the target group.")
@doc("Add a user to the target group.")
@route("/api/hubs/{hub}/users/{userId}/groups/{group}")
@put op AddUserToGroup(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target group name, which length should be greater than 0 and less than 1025.")
@path group: string,
@doc("Target user Id.")
@path userId: string,): void;
@summary("Remove a user from the target group.")
@doc("Remove a user from the target group.")
@route("/api/hubs/{hub}/users/{userId}/groups/{group}")
@delete op RemoveUserFromGroup(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target group name, which length should be greater than 0 and less than 1025.")
@path group: string,
@doc("Target user Id.")
@path userId: string,): void;
@summary("Remove a user from all groups.")
@doc("Remove a user from all groups.")
@route("/api/hubs/{hub}/users/{userId}/groups")
@delete op RemoveUserFromAllGroups(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("Target user Id.")
@path userId: string,): void;
@summary("Grant permission to the connection.")
@doc("Grant permission to the connection.")
@route("/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}")
@put op GrantPermission(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("The permission: current supported actions are joinLeaveGroup and sendToGroup.")
@path permission: WebPubSubPermission,
@doc("Target connection Id.")
@path connectionId: string,): void;
@summary("Revoke permission for the connection.")
@doc("Revoke permission for the connection.")
@route("/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}")
@delete op RevokePermission(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("The permission: current supported actions are joinLeaveGroup and sendToGroup.")
@path permission: WebPubSubPermission,
@doc("Target connection Id.")
@path connectionId: string,): void;
@summary("Check if a connection has permission to the specified action.")
@doc("Check if a connection has permission to the specified action.")
@route("/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}")
@head op CheckPermission(@doc("Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.")
@path hub: string,
@doc("The permission: current supported actions are joinLeaveGroup and sendToGroup.")
@path permission: WebPubSubPermission,
@doc("Target connection Id.")
@path connectionId: string,): void;
}