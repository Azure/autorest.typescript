import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";

using Cadl.Rest;
using Azure.Core;

namespace Azure.Language.Authoring;

enum ProjectKindKnownValues {
  "CustomSingleLabelClassification",
  "CustomMultiLabelClassification",
  "CustomEntityRecognition",
}

@knownValues(ProjectKindKnownValues)
model ProjectKind is string;

enum ErrorCodeKnownValues {
  "InvalidRequest",
  "InvalidArgument",
  "Unauthorized",
  "Forbidden",
  "NotFound",
  "ProjectNotFound",
  "OperationNotFound",
  "AzureCognitiveSearchNotFound",
  "AzureCognitiveSearchIndexNotFound",
  "TooManyRequests",
  "AzureCognitiveSearchThrottling",
  "AzureCognitiveSearchIndexLimitReached",
  "InternalServerError",
  "ServiceUnavailable",
  "Timeout",
  "QuotaExceeded",
  "Conflict",
  "Warning",
}

@knownValues(ErrorCodeKnownValues)
model ErrorCode is string;

enum InnerErrorCodeKnownValues {
  "InvalidRequest",
  "InvalidParameterValue",
  "KnowledgeBaseNotFound",
  "AzureCognitiveSearchNotFound",
  "AzureCognitiveSearchThrottling",
  "ExtractionFailure",
  "InvalidRequestBodyFormat",
  "EmptyRequest",
  "MissingInputDocuments",
  "InvalidDocument",
  "ModelVersionIncorrect",
  "InvalidDocumentBatch",
  "UnsupportedLanguageCode",
  "InvalidCountryHint",
}

@knownValues(InnerErrorCodeKnownValues)
model InnerErrorCode is string;

enum StringIndexTypeKnownValues {
  "Utf16CodeUnit",
}

@knownValues(StringIndexTypeKnownValues)
model StringIndexType is string;

enum StringIndexTypeAutoGeneratedKnownValues {
  "Utf16CodeUnit",
}

@knownValues(StringIndexTypeAutoGeneratedKnownValues)
model StringIndexTypeAutoGenerated is string;

enum EvaluationKindKnownValues {
  Percentage: "percentage",
  Manual: "manual",
}

@knownValues(EvaluationKindKnownValues)
model EvaluationKind is string;

enum JobStatusKnownValues {
  NotStarted: "notStarted",
  Running: "running",
  Succeeded: "succeeded",
  Failed: "failed",
  Cancelled: "cancelled",
  Cancelling: "cancelling",
  PartiallyCompleted: "partiallyCompleted",
}

@knownValues(JobStatusKnownValues)
model JobStatus is string;

@doc("Represents a list of retrieved projects' metadata.")
model ProjectsMetadata is Azure.Core.Page<ProjectMetadata>;

@doc("Represents the metadata of a project.")
@resource("authoring/analyze-text/projects")
model ProjectMetadata {
  @doc("Represents the project creation datetime.")
  createdDateTime: zonedDateTime;

  @doc("Represents the project last modification datetime.")
  lastModifiedDateTime: zonedDateTime;

  @doc("Represents the project last training datetime.")
  lastTrainedDateTime?: zonedDateTime;

  @doc("Represents the project last deployment datetime.")
  lastDeployedDateTime?: zonedDateTime;

  @doc("The project kind.")
  projectKind: ProjectKind;

  @doc("The storage container name.")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  storageInputContainerName: string;

  @doc("The project settings.")
  settings?: object;

  @doc("The new project name.")
  projectName: string;

  @doc("Whether the project would be used for multiple languages or not.")
  multilingual?: boolean;

  @doc("The project description.")
  description?: string;

  @doc("""
The project language. This is BCP-47 representation of a language. For example,
use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.
""")
  language: string;
}

@doc("Error response.")
@error
model ErrorResponse {
  @doc("The error object.")
  error: Error;
}

@doc("The error object.")
model Error {
  @doc("One of a server-defined set of error codes.")
  code: ErrorCode;

  @doc("A human-readable representation of the error.")
  message: string;

  @doc("The target of the error.")
  target?: string;

  @doc("An array of details about specific errors that led to this reported error.")
  details?: Error[];

  @doc("""
An object containing more specific information than the current object about
the error.
""")
  innererror?: InnerErrorModel;
}

@doc("""
An object containing more specific information about the error. As per
Microsoft One API guidelines -
https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
""")
model InnerErrorModel {
  @doc("One of a server-defined set of error codes.")
  code: InnerErrorCode;

  @doc("Error message.")
  message: string;

  @doc("Error details.")
  details?: Record<string>;

  @doc("Error target.")
  target?: string;

  @doc("""
An object containing more specific information than the current object about
the error.
""")
  innererror?: InnerErrorModel;
}

@doc("Represents the options used to create or update a project.")
model CreateProjectOptions {
  @doc("The project kind.")
  projectKind: ProjectKind;

  @doc("The storage container name.")
  storageInputContainerName: string;

  @doc("The project settings.")
  settings?: object;

  @doc("The new project name.")
  projectName: string;

  @doc("Whether the project would be used for multiple languages or not.")
  multilingual?: boolean;

  @doc("The project description.")
  description?: string;

  @doc("""
The project language. This is BCP-47 representation of a language. For example,
use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.
""")
  language: string;
}

@doc("Represents an exported project.")
model ExportedProject {
  @doc("The version of the exported file.")
  projectFileVersion: string;

  @doc("""
Specifies the method used to interpret string offsets. For additional
information see https://aka.ms/text-analytics-offsets.
""")
  stringIndexType: StringIndexTypeAutoGenerated;

  @doc("Represents the project metadata.")
  metadata: CreateProjectOptions;

  @doc("Represents the project assets.")
  assets?: ExportedProjectAssets;
}

@doc("Represents the assets of an exported project.")
@discriminator("projectKind")
model ExportedProjectAssets {}

@doc("Represents the options for starting a new training job.")
model TrainingJobOptions {
  @doc("Represents the output model label.")
  modelLabel: string;

  @doc("Represents training config version.")
  trainingConfigVersion: string;

  @doc("""
Represents the evaluation options. By default, the evaluation kind is
percentage, with training split percentage as 80, and testing split percentage
as 20.
""")
  evaluationOptions?: EvaluationOptions;
}

@doc("Represents the options used running the evaluation.")
model EvaluationOptions {
  @doc("""
Represents the evaluation kind. By default, the evaluation kind is set to
percentage.
""")
  kind?: EvaluationKind;

  @doc("""
Represents the training dataset split percentage. Only needed in case the
evaluation kind is percentage.
""")
  trainingSplitPercentage?: int32;

  @doc("""
Represents the testing dataset split percentage. Only needed in case the
evaluation kind is percentage.
""")
  testingSplitPercentage?: int32;
}

@doc("Represents a list of retrieved deployments.")
model ProjectDeployments is Azure.Core.Page<ProjectDeployment>;

@doc("Represents a project deployment.")
@resource("authoring/analyze-text/projects/{projectName}/deployments")
model ProjectDeployment {
  @doc("Represents deployment name.")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  deploymentName: string;

  @doc("Represents deployment modelId.")
  modelId: string;

  @doc("Represents deployment last trained time.")
  lastTrainedDateTime: zonedDateTime;

  @doc("Represents deployment last deployed time.")
  lastDeployedDateTime: zonedDateTime;

  @doc("Represents deployment expiration date in the runtime.")
  deploymentExpirationDate: plainDate;

  @doc("Represents model training config version.")
  modelTrainingConfigVersion: string;
}

@doc("Represents the options for swapping two deployments together.")
model SwapDeploymentsOptions {
  @doc("Represents the first deployment name.")
  firstDeploymentName: string;

  @doc("Represents the second deployment name.")
  secondDeploymentName: string;
}

@doc("Represents the options for creating or updating a project deployment.")
model CreateDeploymentOptions {
  @doc("Represents the trained model label.")
  trainedModelLabel: string;
}

@doc("Represents the state of a deployment job.")
model DeploymentJobState {
  ...JobState;
}

@doc("Represents a job's state.")
model JobState {
  @doc("The job ID.")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  jobId: string;

  @doc("The creation date time of the job.")
  createdDateTime: zonedDateTime;

  @doc("The last date time the job was updated.")
  lastUpdatedDateTime: zonedDateTime;

  @doc("The expiration date time of the job.")
  expirationDateTime?: zonedDateTime;

  @doc("The job status.")
  status: JobStatus;

  @doc("The warnings that were encountered while executing the job.")
  warnings?: Warning[];

  @doc("The errors encountered while executing the job.")
  errors?: Error[];
}

@doc("Represents a warning that was encountered while executing the request.")
model Warning {
  @doc("The warning code.")
  code: string;

  @doc("The warning message.")
  message: string;
}

@doc("Represents the state of an export job.")
model ExportProjectJobState {
  ...JobState;

  @doc("The URL to use in order to download the exported project.")
  resultUrl?: string;
}

@doc("Represents the state of an import job.")
model ImportProjectJobState {
  ...JobState;
}

@doc("Represents a list of retrieved trained models.")
model ProjectTrainedModels is Azure.Core.Page<ProjectTrainedModel>;

@doc("Represents a trained model.")
@resource("authoring/analyze-text/projects/{projectName}/models")
model ProjectTrainedModel {
  @doc("The trained model label.")
  label: string;

  @doc("The model ID.")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  modelId: string;

  @doc("The last trained date time of the model.")
  lastTrainedDateTime: zonedDateTime;

  @doc("The duration of the model's last training request in seconds.")
  lastTrainingDurationInSeconds: int32;

  @doc("The model expiration date.")
  modelExpirationDate: plainDate;

  @doc("The model training config version.")
  modelTrainingConfigVersion: string;
}

@doc("Represents a list of results for an evaluation operation.")
model EvaluationResults is Azure.Core.Page<DocumentEvaluationResult>;

@doc("Represents the evaluation result of a document.")
@discriminator("projectKind")
model DocumentEvaluationResult {
  @doc("Represents the document path.")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  location: string;

  @doc("""
Represents the document language. This is BCP-47 representation of a language.
For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for
Spanish etc.
""")
  language: string;
}

@doc("Represents the summary for an evaluation operation.")
@discriminator("projectKind")
model EvaluationSummary {
  @doc("Represents the options used running the evaluation.")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  evaluationOptions: EvaluationOptions;
}

@doc("Represents a list of retrieved training jobs.")
model TrainingJobs is Azure.Core.Page<TrainingJobState>;

@doc("Represents the state of a training job.")
model TrainingJobState {
  ...JobState;

  @doc("Represents training tasks detailed result.")
  result: TrainingJobResult;
}

@doc("Represents the output of a training job.")
model TrainingJobResult {
  @doc("Represents trained model label.")
  modelLabel: string;

  @doc("Represents training config version.")
  trainingConfigVersion: string;

  @doc("Represents model train status.")
  trainingStatus: SubTrainingJobState;

  @doc("Represents model evaluation status.")
  evaluationStatus?: SubTrainingJobState;

  @doc("Represents the estimate end date time for training and evaluation.")
  estimatedEndDateTime?: zonedDateTime;
}

@doc("Represents the detailed state of a training sub-operation.")
model SubTrainingJobState {
  @doc("Represents progress percentage.")
  percentComplete: int32;

  @doc("Represents the start date time.")
  startDateTime?: zonedDateTime;

  @doc("Represents the end date time.")
  endDateTime?: zonedDateTime;

  @doc("Represents the status of the sub-operation.")
  status: JobStatus;
}

@doc("Represents the state of a project deletion job.")
model ProjectDeletionJobState {
  ...JobState;
}

@doc("Represents a list of retrieved languages.")
model SupportedLanguages is Azure.Core.Page<SupportedLanguage>;

@doc("Represents a supported language.")
@resource("authoring/analyze-text/projects/global/languages")
model SupportedLanguage {
  @doc("The language name.")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  languageName: string;

  @doc("""
The language code. This is BCP-47 representation of a language. For example,
\"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.
""")
  languageCode: string;
}

@doc("Represents a list of training config versions.")
model TrainingConfigVersions is Azure.Core.Page<TrainingConfigVersion>;

@doc("Represents a training config version.")
model TrainingConfigVersion {
  @doc("Represents the version of the config.")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  trainingConfigVersion: string;

  @doc("Represents the training config version expiration date.")
  modelExpirationDate: plainDate;
}

@doc("Represents a cell in a confusion matrix.")
model ConfusionMatrixCell {
  @doc("Represents normalized value in percentages.")
  normalizedValue: float32;

  @doc("Represents raw value.")
  rawValue: float32;
}

@doc("""
Represents the document evaluation result for a custom entity recognition
project.
""")
model CustomEntityRecognitionDocumentEvaluationResult
  extends DocumentEvaluationResult {
  @doc("Represents the evaluation prediction for entity recognition.")
  customEntityRecognitionResult: DocumentEntityRecognitionEvaluationResult;

  @doc("Represents the project kind.")
  projectKind: "CustomEntityRecognition";
}

@doc("Represents the entity recognition evaluation result for a document.")
model DocumentEntityRecognitionEvaluationResult {
  @doc("Represents the document labelled entities.")
  entities: DocumentEntityRegionEvaluationResult[];
}

@doc("""
Represents the evaluation comparison between the expected and predicted
entities of a document region.
""")
model DocumentEntityRegionEvaluationResult {
  @doc("Represents the region's expected entity labels.")
  expectedEntities: DocumentEntityLabelEvaluationResult[];

  @doc("Represents the region's predicted entity labels.")
  predictedEntities: DocumentEntityLabelEvaluationResult[];

  @doc("Represents the region offset.")
  regionOffset: int32;

  @doc("Represents the region length.")
  regionLength: int32;
}

@doc("Represents an evaluation result entity label.")
model DocumentEntityLabelEvaluationResult {
  @doc("Represents the entity category.")
  category: string;

  @doc("Represents the entity offset index relative to the original text.")
  offset: int32;

  @doc("Represents the entity length.")
  length: int32;
}

@doc("Represents the evaluation summary for a custom entity recognition project.")
model CustomEntityRecognitionEvaluationSummary extends EvaluationSummary {
  @doc("Contains the data related to extraction evaluation.")
  customEntityRecognitionEvaluation: EntityRecognitionEvaluationSummary;

  @doc("Represents the project type that the evaluation ran on.")
  projectKind: "CustomEntityRecognition";
}

@doc("Represents the evaluation summary for a custom entity recognition project.")
model EntityRecognitionEvaluationSummary {
  @doc("""
Represents the confusion matrix between two entities (the two entities can be
the same). The matrix is between the entity that was labelled and the entity
that was predicted.
""")
  confusionMatrix: Record<Record<ConfusionMatrixCell>>;

  @doc("Represents the entities evaluation")
  entities: Record<EntityEvaluationSummary>;

  @doc("Represents the micro F1")
  microF1: float32;

  @doc("Represents the micro precision")
  microPrecision: float32;

  @doc("Represents the micro recall")
  microRecall: float32;

  @doc("Represents the macro F1")
  macroF1: float32;

  @doc("Represents the macro precision")
  macroPrecision: float32;

  @doc("Represents the macro recall")
  macroRecall: float32;
}

@doc("Represents the evaluation summary for an entity.")
model EntityEvaluationSummary {
  @doc("Represents the model precision")
  f1: float32;

  @doc("Represents the model recall")
  precision: float32;

  @doc("Represents the model F1 score")
  recall: float32;

  @doc("Represents the count of true positive")
  truePositiveCount: int32;

  @doc("Represents the count of true negative")
  trueNegativeCount: int32;

  @doc("Represents the count of false positive")
  falsePositiveCount: int32;

  @doc("Represents the count of false negative")
  falseNegativeCount: int32;
}

@doc("""
Represents the document evaluation result for a custom multi-label
classification project.
""")
model CustomMultiLabelClassificationDocumentEvaluationResult
  extends DocumentEvaluationResult {
  @doc("Represents the evaluation prediction for multi label classification.")
  customMultiLabelClassificationResult: DocumentMultiLabelClassificationEvaluationResult;

  @doc("Represents the project kind.")
  projectKind: "CustomMultiLabelClassification";
}

@doc("""
Represents the comparison between the expected and predicted classes that are
result from the evaluation operation.
""")
model DocumentMultiLabelClassificationEvaluationResult {
  @doc("Represents the document's expected classes.")
  expectedClasses: string[];

  @doc("Represents the document's predicted classes.")
  predictedClasses: string[];
}

@doc("""
Represents the evaluation summary for a custom multi-label classification
project.
""")
model CustomMultiLabelClassificationEvaluationSummary
  extends EvaluationSummary {
  @doc("Contains the data related to multi label classification evaluation.")
  customMultiLabelClassificationEvaluation: MultiLabelClassificationEvaluationSummary;

  @doc("Represents the project type that the evaluation ran on.")
  projectKind: "CustomMultiLabelClassification";
}

@doc("Represents the evaluation summary for a multi-label classification project.")
model MultiLabelClassificationEvaluationSummary {
  @doc("Represents the classes evaluation")
  classes: Record<MultiLabelClassEvaluationSummary>;

  @doc("Represents the micro F1")
  microF1: float32;

  @doc("Represents the micro precision")
  microPrecision: float32;

  @doc("Represents the micro recall")
  microRecall: float32;

  @doc("Represents the macro F1")
  macroF1: float32;

  @doc("Represents the macro precision")
  macroPrecision: float32;

  @doc("Represents the macro recall")
  macroRecall: float32;
}

@doc("""
Represents the evaluation summary of a class in a multi-label classification
project.
""")
model MultiLabelClassEvaluationSummary {
  @doc("Represents the model precision")
  f1: float32;

  @doc("Represents the model recall")
  precision: float32;

  @doc("Represents the model F1 score")
  recall: float32;

  @doc("Represents the count of true positive")
  truePositiveCount: int32;

  @doc("Represents the count of true negative")
  trueNegativeCount: int32;

  @doc("Represents the count of false positive")
  falsePositiveCount: int32;

  @doc("Represents the count of false negative")
  falseNegativeCount: int32;
}

@doc("""
Represents the document evaluation result for a custom single-label
classification project.
""")
model CustomSingleLabelClassificationDocumentEvaluationResult
  extends DocumentEvaluationResult {
  @doc("Represents the evaluation prediction for single label classification.")
  customSingleLabelClassificationResult: DocumentSingleLabelClassificationEvaluationResult;

  @doc("Represents the project kind.")
  projectKind: "CustomSingleLabelClassification";
}

@doc("""
Represents the comparison between the expected and predicted class that result
from an evaluation operation.
""")
model DocumentSingleLabelClassificationEvaluationResult {
  @doc("Represents the document's expected class.")
  expectedClass: string;

  @doc("Represents the document's predicted class.")
  predictedClass: string;
}

@doc("""
Represents the evaluation summary for a custom single-label classification
project.
""")
model CustomSingleLabelClassificationEvaluationSummary
  extends EvaluationSummary {
  @doc("Contains the data related to single label classification evaluation.")
  customSingleLabelClassificationEvaluation: SingleLabelClassificationEvaluationSummary;

  @doc("Represents the project type that the evaluation ran on.")
  projectKind: "CustomSingleLabelClassification";
}

@doc("""
Represents the evaluation summary for a custom single-label classification
project.
""")
model SingleLabelClassificationEvaluationSummary {
  @doc("""
Represents the confusion matrix between two classes (the two classes can be the
same). The matrix is between the class that was labelled and the class that was
predicted.
""")
  confusionMatrix: Record<Record<ConfusionMatrixCell>>;

  @doc("Represents the classes evaluation")
  classes: Record<SingleLabelClassEvaluationSummary>;

  @doc("Represents the micro F1")
  microF1: float32;

  @doc("Represents the micro precision")
  microPrecision: float32;

  @doc("Represents the micro recall")
  microRecall: float32;

  @doc("Represents the macro F1")
  macroF1: float32;

  @doc("Represents the macro precision")
  macroPrecision: float32;

  @doc("Represents the macro recall")
  macroRecall: float32;
}

@doc("""
Represents the evaluation summary for a class in a single-label classification
project.
""")
model SingleLabelClassEvaluationSummary {
  @doc("Represents the model precision")
  f1: float32;

  @doc("Represents the model recall")
  precision: float32;

  @doc("Represents the model F1 score")
  recall: float32;

  @doc("Represents the count of true positive")
  truePositiveCount: int32;

  @doc("Represents the count of true negative")
  trueNegativeCount: int32;

  @doc("Represents the count of false positive")
  falsePositiveCount: int32;

  @doc("Represents the count of false negative")
  falseNegativeCount: int32;
}

@doc("Represents a class of an exported project.")
model ExportedClass {
  @doc("The class category.")
  category?: string;
}

@doc("Represents an exported document for a custom entity recognition project.")
model ExportedCustomEntityRecognitionDocument {
  @doc("The list of entity labels belonging to the document.")
  entities?: ExportedDocumentRegion[];

  @doc("The location of the document in the storage.")
  location?: string;

  @doc("""
Represents the document language. This is BCP-47 representation of a language.
For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for
Spanish etc.
""")
  language?: string;

  @doc("The dataset for this document. Allowed values are 'Train' and 'Test'.")
  dataset?: string;
}

@doc("Represents a region in a document for entity labeling.")
model ExportedDocumentRegion {
  @doc("Start position for the region.")
  regionOffset?: int32;

  @doc("Length for the region text.")
  regionLength?: int32;

  @doc("The list of entity labels belonging to this region.")
  labels?: ExportedDocumentEntityLabel[];
}

@doc("Represents an entity label for a document.")
model ExportedDocumentEntityLabel {
  @doc("The entity category.")
  category?: string;

  @doc("Start position for the entity text.")
  offset?: int32;

  @doc("Length for the entity text.")
  length?: int32;
}

@doc("Represents the exported assets for a entity recognition project.")
model ExportedCustomEntityRecognitionProjectAssets
  extends ExportedProjectAssets {
  @doc("The list of entities belonging to the project.")
  entities?: ExportedEntity[];

  @doc("The list of documents belonging to the project.")
  documents?: ExportedCustomEntityRecognitionDocument[];

  @doc("The type of the project the assets belong to.")
  projectKind: "CustomEntityRecognition";
}

@doc("Represents an entity in an exported project.")
model ExportedEntity {
  @doc("The entity category.")
  category?: string;
}

@doc("Represents an exported document of a custom multi-label classification project.")
model ExportedCustomMultiLabelClassificationDocument {
  @doc("The document classes.")
  classes?: ExportedDocumentClass[];

  @doc("The location of the document in the storage.")
  location?: string;

  @doc("""
Represents the document language. This is BCP-47 representation of a language.
For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for
Spanish etc.
""")
  language?: string;

  @doc("The dataset for this document. Allowed values are 'Train' and 'Test'.")
  dataset?: string;
}

@doc("Represents a classification label for a document.")
model ExportedDocumentClass {
  category?: string;
}

@doc("Represents the exported assets for a custom multi-label classification project.")
model ExportedCustomMultiLabelClassificationProjectAssets
  extends ExportedProjectAssets {
  @doc("The list of classes in the project.")
  classes?: ExportedClass[];

  @doc("The list of documents in the project.")
  documents?: ExportedCustomMultiLabelClassificationDocument[];

  @doc("The type of the project the assets belong to.")
  projectKind: "CustomMultiLabelClassification";
}

@doc("""
Represents an exported document for a custom single-label classification
project.
""")
model ExportedCustomSingleLabelClassificationDocument {
  @doc("The class of the documents.")
  class?: ExportedDocumentClass;

  @doc("The location of the document in the storage.")
  location?: string;

  @doc("""
Represents the document language. This is BCP-47 representation of a language.
For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for
Spanish etc.
""")
  language?: string;

  @doc("The dataset for this document. Allowed values are 'Train' and 'Test'.")
  dataset?: string;
}

@doc("Represents the exported assets for a single-label classification project.")
model ExportedCustomSingleLabelClassificationProjectAssets
  extends ExportedProjectAssets {
  @doc("The list of classes belonging to this project.")
  classes?: ExportedClass[];

  @doc("The list of documents belonging to this project.")
  documents?: ExportedCustomSingleLabelClassificationDocument[];

  @doc("The type of the project the assets belong to.")
  projectKind: "CustomSingleLabelClassification";
}
