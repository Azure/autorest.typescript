import "@cadl-lang/rest";

import "./models.cadl";

using Cadl.Rest;

using Cadl.Http;

namespace Adel;

// FIXME: (missing-docs) Add documentation
interface AlertConfigsOperations {
  // FIXME: (missing-docs) Add documentation
  @route("/alertConfigs")
  @get
  List(
    @doc("""
The number of records to skip from the list of records based on the sorting
field and ordering method specified. By default, records are ranked by
descending created time (UTC).
""")
    @query
    skip: int32,

    @doc("""
The maximum number of records to be returned per page. If more records are
requested via the API, @nextLink will contain the link to the next page.
""")
    @query
    maxpagesize: int32,

    @doc("""
The name of the field on which you want to sort records. By default, records
are sorted by created time (UTC).
""")
    @query
    sortBy: string,
    // FIXME: (missing-docs) Add documentation
    @query orderBy: OrderBy,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Page_AlertConfig;
  // FIXME: (missing-docs) Add documentation
  @route("/alertConfigs/{alertConfigName}")
  @put
  Create(
    @doc("Unique identifier of an alert configuration. This parameter is case-sensitive.")
    @path
    alertConfigName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: AlertConfig,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | AlertConfig;
  // FIXME: (missing-docs) Add documentation
  @route("/alertConfigs/{alertConfigName}")
  @get
  Read(
    @doc("Unique identifier of an alert configuration. This parameter is case-sensitive.")
    @path
    alertConfigName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | AlertConfig;
  // FIXME: (missing-docs) Add documentation
  @route("/alertConfigs/{alertConfigName}")
  @delete
  Delete(
    @doc("Unique identifier of an alert configuration. This parameter is case-sensitive.")
    @path
    alertConfigName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | void;
  // FIXME: (missing-docs) Add documentation
  @route("/alertConfigs/{alertConfigName}")
  @patch
  Update(
    @doc("Unique identifier of an alert configuration. This parameter is case-sensitive.")
    @path
    alertConfigName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: AlertConfig,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | AlertConfig;
}

// FIXME: (missing-docs) Add documentation
interface DatasetsOperations {
  // FIXME: (missing-docs) Add documentation
  @route("/datasets")
  @get
  List(
    @doc("""
The number of records to skip from the list of records based on the sorting
field and ordering method specified. By default, records are ranked by
descending created time (UTC).
""")
    @query
    skip: int32,

    @doc("""
The maximum number of records to be returned per page. If more records are
requested via the API, @nextLink will contain the link to the next page.
""")
    @query
    maxpagesize: int32,

    @doc("""
The name of the field on which you want to sort records. By default, records
are sorted by created time (UTC).
""")
    @query
    sortBy: string,
    // FIXME: (missing-docs) Add documentation
    @query orderBy: OrderBy,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Page_Dataset;
  // FIXME: (missing-docs) Add documentation
  @route("/datasets/{datasetName}")
  @put
  Create(
    @doc("Unique identifier of a dataset. This parameter is case-sensitive.")
    @path
    datasetName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: Request_Dataset,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Dataset;
  // FIXME: (missing-docs) Add documentation
  @route("/datasets/{datasetName}")
  @get
  Read(
    @doc("Unique identifier of a dataset. This parameter is case-sensitive.")
    @path
    datasetName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Dataset;
  // FIXME: (missing-docs) Add documentation
  @route("/datasets/{datasetName}")
  @delete
  Delete(
    @doc("Unique identifier of a dataset. This parameter is case-sensitive.")
    @path
    datasetName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | void;
  @summary("Query data from data source to preview")
  @doc("""
Verify data schema and preview data before/after a dataset is created. View raw
data to better diagnose and explain a detected anomaly.
""")
  @route("/datasets/previewData")
  @post
  PreviewData(
    // FIXME: (missing-docs) Add documentation
    @body body: DatasetPreviewRequest,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | DatasetPreviewResponse;
}

// FIXME: (missing-docs) Add documentation
interface HooksOperations {
  // FIXME: (missing-docs) Add documentation
  @route("/hooks")
  @get
  List(
    @doc("""
The number of records to skip from the list of records based on the sorting
field and ordering method specified. By default, records are ranked by
descending created time (UTC).
""")
    @query
    skip: int32,

    @doc("""
The maximum number of records to be returned per page. If more records are
requested via the API, @nextLink will contain the link to the next page.
""")
    @query
    maxpagesize: int32,

    @doc("""
The name of the field on which you want to sort records. By default, records
are sorted by created time (UTC).
""")
    @query
    sortBy: string,
    // FIXME: (missing-docs) Add documentation
    @query orderBy: OrderBy,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Page_Hook;
  // FIXME: (missing-docs) Add documentation
  @route("/hooks/{hookName}")
  @put
  Create(
    @doc("Unique identifier of a hook. This parameter is case-sensitive.")
    @path
    hookName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: Hook,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Hook;
  // FIXME: (missing-docs) Add documentation
  @route("/hooks/{hookName}")
  @get
  Read(
    @doc("Unique identifier of a hook. This parameter is case-sensitive.")
    @path
    hookName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Hook;
  // FIXME: (missing-docs) Add documentation
  @route("/hooks/{hookName}")
  @delete
  Delete(
    @doc("Unique identifier of a hook. This parameter is case-sensitive.")
    @path
    hookName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | void;
  // FIXME: (missing-docs) Add documentation
  @route("/hooks/{hookName}")
  @patch
  Update(
    @doc("Unique identifier of a hook. This parameter is case-sensitive.")
    @path
    hookName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: Hook,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Hook;
}

// FIXME: (missing-docs) Add documentation
interface ReplaysOperations {
  // FIXME: (missing-docs) Add documentation
  @route("/inference/replays")
  @get
  List(
    @doc("""
The number of records to skip from the list of records based on the sorting
field and ordering method specified. By default, records are ranked by
descending created time (UTC).
""")
    @query
    skip: int32,

    @doc("""
The maximum number of records to be returned per page. If more records are
requested via the API, @nextLink will contain the link to the next page.
""")
    @query
    maxpagesize: int32,

    @doc("""
The name of the field on which you want to sort records. By default, records
are sorted by created time (UTC).
""")
    @query
    sortBy: string,
    // FIXME: (missing-docs) Add documentation
    @query orderBy: OrderBy,
    // FIXME: (missing-docs) Add documentation
    @query status: ReplayStatus,

    @doc("""
Filter replay records by a list of inference schedule name(s). Format the list
as a comma-separated string, no space allowed. By default, the list of replay
records are ranked by descending replay created time (UTC) for each inference
schedule.
""")
    @query
    scheduleName: string,

    @doc("""
The total number of replay records to be returned per inference schedule,
ordered by created time descending. By default, the full list of replay records
will be returned for the inference schedule name(s) in your filter.
""")
    @query
    topPerSchedule: int32,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Page_ScheduleReplay;
  // FIXME: (missing-docs) Add documentation
  @route("/inference/replays/{replayName}")
  @put
  Create(
    @doc("""
Unique identifier of a replay on an inference schedule. This parameter is
case-sensitive.
""")
    @path
    replayName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: Request_ScheduleReplay,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | ScheduleReplay;
  // FIXME: (missing-docs) Add documentation
  @route("/inference/replays/{replayName}")
  @get
  Read(
    @doc("""
Unique identifier of a replay on an inference schedule. This parameter is
case-sensitive.
""")
    @path
    replayName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | ScheduleReplay;
  // FIXME: (missing-docs) Add documentation
  @route("/inference/replays/{replayName}")
  @delete
  Delete(
    @doc("""
Unique identifier of a replay on an inference schedule. This parameter is
case-sensitive.
""")
    @path
    replayName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | void;
}

// FIXME: (missing-docs) Add documentation
interface SchedulesOperations {
  // FIXME: (missing-docs) Add documentation
  @route("/inference/schedules")
  @get
  List(
    @doc("""
The number of records to skip from the list of records based on the sorting
field and ordering method specified. By default, records are ranked by
descending created time (UTC).
""")
    @query
    skip: int32,

    @doc("""
The maximum number of records to be returned per page. If more records are
requested via the API, @nextLink will contain the link to the next page.
""")
    @query
    maxpagesize: int32,

    @doc("""
The name of the field on which you want to sort records. By default, records
are sorted by created time (UTC).
""")
    @query
    sortBy: string,
    // FIXME: (missing-docs) Add documentation
    @query orderBy: OrderBy,
    // FIXME: (missing-docs) Add documentation
    @query status: ScheduleStatus,

    @doc("""
Filter inference schedules by a list of model name(s). Format the list as a
comma-separated string, no space allowed. For each model, by default the list
of inference schedules are ranked by descending inference schedule created time
(UTC).
""")
    @query
    modelNames: string,

    @doc("""
The total number of inference schedules to be returned per model, ordered by
created time descending. By default, the full list of inference schedules will
be returned for the model name(s) in your filter.
""")
    @query
    topPerModel: int32,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Page_Schedule;
  // FIXME: (missing-docs) Add documentation
  @route("/inference/schedules/{scheduleName}")
  @put
  Create(
    @doc("""
Unique identifier of a live streaming inference schedule. This parameter is
case-sensitive.
""")
    @path
    scheduleName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: Request_Schedule,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Schedule;
  // FIXME: (missing-docs) Add documentation
  @route("/inference/schedules/{scheduleName}")
  @get
  Read(
    @doc("""
Unique identifier of a live streaming inference schedule. This parameter is
case-sensitive.
""")
    @path
    scheduleName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Schedule;
  // FIXME: (missing-docs) Add documentation
  @route("/inference/schedules/{scheduleName}")
  @delete
  Delete(
    @doc("""
Unique identifier of a live streaming inference schedule. This parameter is
case-sensitive.
""")
    @path
    scheduleName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | void;
  @summary("Update an inference schedule")
  @doc("Pause/resume or update selected properties of an inference schedule.")
  @route("/inference/schedules/{scheduleName}")
  @patch
  Update(
    @doc("""
Unique identifier of a live streaming inference schedule. This parameter is
case-sensitive.
""")
    @path
    scheduleName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: ScheduleUpdate,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Schedule;
  @summary("Get historical detection results from the inference schedule")
  @doc("""
Use this API to retrieve detected anomalies over a historical time period
specified in the request body. Please refer to the official documentation for
the detailed quota and limits.
""")
  @route("/inference/schedules/{scheduleName}/getHistory")
  @get
  GetHistory(
    // FIXME: (missing-docs) Add documentation
    @path scheduleName: string,
    // FIXME: (missing-docs) Add documentation
    @query startTime: string,
    // FIXME: (missing-docs) Add documentation
    @query endTime: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | ScheduleHistoryResult;
}

// FIXME: (missing-docs) Add documentation
interface EvaluationsOperations {
  // FIXME: (missing-docs) Add documentation
  @route("/multivariate/evaluations")
  @get
  List(
    @doc("""
The number of records to skip from the list of records based on the sorting
field and ordering method specified. By default, records are ranked by
descending created time (UTC).
""")
    @query
    skip: int32,

    @doc("""
The maximum number of records to be returned per page. If more records are
requested via the API, @nextLink will contain the link to the next page.
""")
    @query
    maxpagesize: int32,

    @doc("""
The name of the field on which you want to sort records. By default, records
are sorted by created time (UTC).
""")
    @query
    sortBy: string,
    // FIXME: (missing-docs) Add documentation
    @query orderBy: OrderBy,
    // FIXME: (missing-docs) Add documentation
    @query status: EvaluationStatus,

    @doc("""
Filter evaluations by a list of model name(s). Format the list as a
comma-separated string, no space allowed. For each model, by default the list
of evaluations are ranked by descending evaluation created time (UTC).
""")
    @query
    modelNames: string,

    @doc("""
The total number of evaluations to be returned per model, ordered by created
time descending. By default, the full list of evaluations will be returned for
the model name(s) in your filter.
""")
    @query
    topPerModel: int32,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Page_Evaluation;
  // FIXME: (missing-docs) Add documentation
  @route("/multivariate/evaluations/{evaluationName}")
  @put
  Create(
    @doc("Unique identifier of a model evaluation. This parameter is case-sensitive.")
    @path
    evaluationName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: Request_Evaluation,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Evaluation;
  // FIXME: (missing-docs) Add documentation
  @route("/multivariate/evaluations/{evaluationName}")
  @get
  Read(
    @doc("Unique identifier of a model evaluation. This parameter is case-sensitive.")
    @path
    evaluationName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Evaluation;
  // FIXME: (missing-docs) Add documentation
  @route("/multivariate/evaluations/{evaluationName}")
  @delete
  Delete(
    @doc("Unique identifier of a model evaluation. This parameter is case-sensitive.")
    @path
    evaluationName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | void;
}

// FIXME: (missing-docs) Add documentation
interface ModelsOperations {
  // FIXME: (missing-docs) Add documentation
  @route("/multivariate/models")
  @get
  List(
    @doc("""
The number of records to skip from the list of records based on the sorting
field and ordering method specified. By default, records are ranked by
descending created time (UTC).
""")
    @query
    skip: int32,

    @doc("""
The maximum number of records to be returned per page. If more records are
requested via the API, @nextLink will contain the link to the next page.
""")
    @query
    maxpagesize: int32,

    @doc("""
The name of the field on which you want to sort records. By default, records
are sorted by created time (UTC).
""")
    @query
    sortBy: string,
    // FIXME: (missing-docs) Add documentation
    @query orderBy: OrderBy,
    // FIXME: (missing-docs) Add documentation
    @query status: ModelStatus,

    @doc("""
Filter models by a list of training dataset name(s). Format the list as a
comma-separated string, no space allowed. For each dataset, by default the list
of models are ranked by descending model created time (UTC).
""")
    @query
    datasetNames: string,

    @doc("""
The total number of models to be returned per dataset, ordered by created time
descending. By default, the full list of models will be returned for the
dataset name(s) in your filter.
""")
    @query
    topPerDataset: int32,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Page_Model;
  // FIXME: (missing-docs) Add documentation
  @route("/multivariate/models/{modelName}")
  @put
  Create(
    @doc("Unique identifier of a model. This parameter is case-sensitive.")
    @path
    modelName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: Request_Model,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Model;
  // FIXME: (missing-docs) Add documentation
  @route("/multivariate/models/{modelName}")
  @get
  Read(
    @doc("Unique identifier of a model. This parameter is case-sensitive.")
    @path
    modelName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | Model;
  // FIXME: (missing-docs) Add documentation
  @route("/multivariate/models/{modelName}")
  @delete
  Delete(
    @doc("Unique identifier of a model. This parameter is case-sensitive.")
    @path
    modelName: string,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | void;
  @summary("Detect Multivariate Anomaly - Sync")
  @doc("""
Detect anomalies with a trained model and multivariate time-series data points
specified in the request body. This API is recommended to be embedded in an
inference schedule set up for continuous real-time inference. Please refer to
the official documentation for the detailed quota and limits.
""")
  @route("/multivariate/models/{modelName}/detect")
  @post
  Detect(
    // FIXME: (missing-docs) Add documentation
    @path modelName: string,
    // FIXME: (missing-docs) Add documentation
    @body body: DetectionRequest,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Error | DetectionResult;
}
