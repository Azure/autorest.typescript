import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";

using Cadl.Rest;
using Azure.Core;

// FIXME: (missing-docs) Add documentation
enum RankerKindKnownValues {
  "QuestionOnly",
  "Default",
}

@knownValues(RankerKindKnownValues)
model RankerKind is string {}

// FIXME: (missing-docs) Add documentation
enum LogicalOperationKindKnownValues {
  "AND",
  "OR",
}

@knownValues(LogicalOperationKindKnownValues)
model LogicalOperationKind is string {}

// FIXME: (missing-docs) Add documentation
enum ErrorCodeKnownValues {
  "InvalidRequest",
  "InvalidArgument",
  "Unauthorized",
  "Forbidden",
  "NotFound",
  "ProjectNotFound",
  "OperationNotFound",
  "AzureCognitiveSearchNotFound",
  "AzureCognitiveSearchIndexNotFound",
  "TooManyRequests",
  "AzureCognitiveSearchThrottling",
  "AzureCognitiveSearchIndexLimitReached",
  "InternalServerError",
  "ServiceUnavailable",
}

@knownValues(ErrorCodeKnownValues)
model ErrorCode is string {}

// FIXME: (missing-docs) Add documentation
enum InnerErrorCodeKnownValues {
  "InvalidRequest",
  "InvalidParameterValue",
  "KnowledgeBaseNotFound",
  "AzureCognitiveSearchNotFound",
  "AzureCognitiveSearchThrottling",
  "ExtractionFailure",
}

@knownValues(InnerErrorCodeKnownValues)
model InnerErrorCode is string {}

// FIXME: (missing-docs) Add documentation
enum StringIndexTypeKnownValues {
  "TextElements_v8",
  "UnicodeCodePoint",
  "Utf16CodeUnit",
}

@knownValues(StringIndexTypeKnownValues)
model StringIndexType is string {}

// FIXME: (missing-docs) Add documentation
enum jobStatusKnownValues {
  "notStarted",
  "running",
  "succeeded",
  "failed",
  "cancelled",
  "cancelling",
  "partiallyCompleted",
}

@knownValues(jobStatusKnownValues)
model jobStatus is string {}

// FIXME: (missing-docs) Add documentation
enum formatKnownValues {
  "json",
  "tsv",
  "excel",
}

@knownValues(formatKnownValues)
model format is string {}

// FIXME: (missing-docs) Add documentation
// FIXME: (synthetic-name) This enum has a generated name. Please rename it to something more appropriate.
enum components·nvda8q·parameters·assetkindparameter·schemaKnownValues {
  "qnas",
  "synonyms",
}

@knownValues(components·nvda8q·parameters·assetkindparameter·schemaKnownValues)
model components·nvda8q·parameters·assetkindparameter·schema is string {}

// FIXME: (missing-docs) Add documentation
enum sourceKindKnownValues {
  "file",
  "url",
}

@knownValues(sourceKindKnownValues)
model sourceKind is string {}

// FIXME: (missing-docs) Add documentation
enum sourceContentStructureKindKnownValues {
  "unstructured",
}

@knownValues(sourceContentStructureKindKnownValues)
model sourceContentStructureKind is string {}

// FIXME: (missing-docs) Add documentation
enum updateOperationKindKnownValues {
  "add",
  "delete",
  "replace",
}

@knownValues(updateOperationKindKnownValues)
model updateOperationKind is string {}

@doc("Parameters to query a knowledge base.")
model AnswersOptions {
  @doc("""
Exact QnA ID to fetch from the knowledge base, this field takes priority over
question.
""")
  qnaId?: int32;

  @doc("User question to query against the knowledge base.")
  question?: string;

  @doc("Max number of answers to be returned for the question.")
  top?: int32;

  @doc("Unique identifier for the user.")
  userId?: string;

  @doc("Minimum threshold score for answers, value ranges from 0 to 1.")
  confidenceScoreThreshold?: float32;

  @doc("Context object with previous QnA's information.")
  context?: KnowledgeBaseAnswerContext;

  @doc("Type of ranker to be used.")
  rankerType?: RankerKind;

  @doc("Filter QnAs based on given metadata list and knowledge base sources.")
  filters?: QueryFilters;

  @doc("To configure Answer span prediction feature.")
  answerSpanRequest?: ShortAnswerOptions;

  @doc("(Optional) Flag to enable Query over Unstructured Sources.")
  includeUnstructuredSources?: boolean;
}

@doc("Context object with previous QnA's information.")
model KnowledgeBaseAnswerContext {
  @doc("Previous turn top answer result QnA ID.")
  previousQnaId: int32;

  @doc("Previous user query.")
  previousUserQuery?: string;
}

@doc("filters over knowledge base.")
model QueryFilters {
  @doc("Find QnAs that are associated with the given list of metadata.")
  metadataFilter?: MetadataFilter;

  @doc("""
Find QnAs that are associated with any of the given list of sources in
knowledge base.
""")
  sourceFilter?: string[];

  @doc("Logical operation used to join metadata filter with source filter.")
  logicalOperation?: LogicalOperationKind;
}

@doc("Find QnAs that are associated with the given list of metadata.")
model MetadataFilter {
  // FIXME: (missing-docs) Add documentation
  metadata?: MetadataRecord[];

  @doc("Operation used to join metadata filters.")
  logicalOperation?: LogicalOperationKind;
}

@doc("Object to provide the key value pair for each metadata.")
model MetadataRecord {
  @doc("Metadata Key from Metadata dictionary used in the QnA.")
  key: string;

  @doc("Metadata Value from Metadata dictionary used in the QnA.")
  value: string;
}

@doc("To configure Answer span prediction feature.")
model ShortAnswerOptions {
  @doc("Enable or disable Answer Span prediction.")
  enable: true;

  @doc("""
Minimum threshold score required to include an answer span, value ranges from 0
to 1.
""")
  confidenceScoreThreshold?: float32;

  @doc("Number of Top answers to be considered for span prediction from 1 to 10.")
  topAnswersWithSpan?: int32;
}

@doc("Represents List of Question Answers.")
model AnswersResult {
  @doc("Represents Answer Result list.")
  answers?: KnowledgeBaseAnswer[];
}

@doc("Represents knowledge base answer.")
model KnowledgeBaseAnswer {
  @doc("List of questions associated with the answer.")
  questions?: string[];

  @doc("Answer text.")
  answer?: string;

  @doc("Answer confidence score, value ranges from 0 to 1.")
  confidenceScore?: float32;

  @doc("ID of the QnA result.")
  id?: int32;

  @doc("Source of QnA result.")
  source?: string;

  @doc("""
Metadata associated with the answer, useful to categorize or filter question
answers.
""")
  metadata?: Record<string>;

  @doc("Dialog associated with Answer.")
  dialog?: KnowledgeBaseAnswerDialog;

  @doc("Answer span object of QnA with respect to user's question.")
  answerSpan?: AnswerSpan;
}

@doc("Dialog associated with Answer.")
model KnowledgeBaseAnswerDialog {
  @doc("""
To mark if a prompt is relevant only with a previous question or not. If true,
do not include this QnA as search result for queries without context;
otherwise, if false, ignores context and includes this QnA in search result.
""")
  isContextOnly?: boolean;

  @doc("List of prompts associated with the answer.")
  prompts?: KnowledgeBaseAnswerPrompt[];
}

@doc("Prompt for an answer.")
model KnowledgeBaseAnswerPrompt {
  @doc("Index of the prompt - used in ordering of the prompts.")
  displayOrder?: int32;

  @doc("QnA ID corresponding to the prompt.")
  qnaId?: int32;

  @doc("Text displayed to represent a follow up question prompt.")
  displayText?: string;
}

@doc("Answer span object of QnA.")
model AnswerSpan {
  @doc("Predicted text of answer span.")
  text?: string;

  @doc("Predicted score of answer span, value ranges from 0 to 1.")
  confidenceScore?: float32;

  @doc("The answer span offset from the start of answer.")
  offset?: int32;

  @doc("The length of the answer span.")
  length?: int32;
}

@doc("Error response.")
@error
model ErrorResponse {
  @doc("The error object.")
  error?: Error;
}

@doc("The error object.")
model Error {
  @doc("One of a server-defined set of error codes.")
  code: ErrorCode;

  @doc("A human-readable representation of the error.")
  message: string;

  @doc("The target of the error.")
  target?: string;

  @doc("An array of details about specific errors that led to this reported error.")
  details?: Error[];

  @doc("""
An object containing more specific information than the current object about
the error.
""")
  innererror?: InnerErrorModel;
}

@doc("""
An object containing more specific information about the error. As per
Microsoft One API guidelines -
https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
""")
model InnerErrorModel {
  @doc("One of a server-defined set of error codes.")
  code: InnerErrorCode;

  @doc("Error message.")
  message: string;

  @doc("Error details.")
  details?: Record<string>;

  @doc("Error target.")
  target?: string;

  @doc("""
An object containing more specific information than the current object about
the error.
""")
  innererror?: InnerErrorModel;
}

@doc("The question and text record parameters to answer.")
model AnswersFromTextOptions {
  @doc("User question to query against the given text records.")
  question: string;

  @doc("Text records to be searched for given question.")
  records: TextDocument[];

  @doc("""
Language of the text records. This is BCP-47 representation of a language. For
example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\"
for English as default.
""")
  language?: string;

  @doc("""
Specifies the method used to interpret string offsets.  Defaults to Text
Elements (Graphemes) according to Unicode v8.0.0. For additional information
see https://aka.ms/text-analytics-offsets.
""")
  stringIndexType?: StringIndexType;
}

@doc("Represent input text record to be queried.")
model TextDocument {
  @doc("Unique identifier for the text record.")
  id: string;

  @doc("Text contents of the record.")
  text: string;
}

@doc("Represents the answer results.")
model AnswersFromTextResult {
  @doc("Represents the answer results.")
  answers?: TextAnswer[];
}

@doc("Represents answer result.")
model TextAnswer {
  @doc("Answer.")
  answer?: string;

  @doc("answer confidence score, value ranges from 0 to 1.")
  confidenceScore?: float32;

  @doc("record ID.")
  id?: string;

  @doc("Answer span object with respect to user's question.")
  answerSpan?: AnswerSpan;

  @doc("The sentence offset from the start of the document.")
  offset?: int32;

  @doc("The length of the sentence.")
  length?: int32;
}

@doc("Collection of projects metadata and global settings.")
@pagedResult
model ProjectsMetadata {
  // FIXME: (missing-docs) Add documentation
  @items
  value?: ProjectMetadata[];
  // FIXME: (missing-docs) Add documentation

  @nextLink
  nextLink?: string;
}

@doc("Represents the project.")
model ProjectMetadata {
  @doc("Name of the project.")
  projectName?: string;

  @doc("Description of the project.")
  description?: string;

  @doc("""
Language of the text records. This is BCP-47 representation of a language. For
example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\"
for English as default.
""")
  language?: string;

  @doc("Resource enabled for multiple languages across projects or not.")
  multilingualResource?: boolean;

  @doc("Configurable settings of the Project.")
  settings?: ProjectSettings;

  @doc("Project creation date-time.")
  createdDateTime?: zonedDateTime;

  @doc("Represents the project last modified date-time.")
  lastModifiedDateTime?: zonedDateTime;

  @doc("Represents the project last deployment date-time.")
  lastDeployedDateTime?: zonedDateTime;
}

@doc("Configurable settings of the Project.")
model ProjectSettings {
  @doc("Default Answer response when no good match is found in the knowledge base.")
  defaultAnswer?: string;
}

@doc("Parameters needed to create the project.")
model CreateProjectOptions {
  @doc("Description of the project.")
  description?: string;

  @doc("""
Language of the text records. This is BCP-47 representation of a language. For
example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\"
for English as default.
""")
  language: string;

  @doc("""
Set to true to enable creating knowledgebases in different languages for the
same resource.
""")
  multilingualResource?: boolean;

  @doc("Configurable settings of the Project.")
  settings?: ProjectSettings;
}

// FIXME: (multiple-inheritance) Multiple inheritance is not supported in CADL, so this type will only inherit from one parent.
// please review the generated model to write a valid object hierarchy.
@doc("Job state represents the job metadata and any errors.")
model JobState extends JobMetadata {}

@doc("Represents the job metadata.")
model JobMetadata {
  // FIXME: (missing-docs) Add documentation
  createdDateTime: zonedDateTime;
  // FIXME: (missing-docs) Add documentation
  expirationDateTime?: zonedDateTime;
  // FIXME: (missing-docs) Add documentation
  jobId: string;
  // FIXME: (missing-docs) Add documentation
  lastUpdatedDateTime: zonedDateTime;

  @doc("Job Status.")
  status: jobStatus;
}

@doc("Collection of Error types.")
model Errors {
  // FIXME: (missing-docs) Add documentation
  errors?: Error[];
}

// FIXME: (multiple-inheritance) Multiple inheritance is not supported in CADL, so this type will only inherit from one parent.
// please review the generated model to write a valid object hierarchy.
@doc("Export job status, project metadata, and assets.")
model ExportJobState extends JobState {}

@doc("URL to download the result of the Export Job.")
model ExportJobResultUrl {
  @doc("URL to download the result of the Export Job.")
  resultUrl: string;
}

@doc("Project assets the needs to be imported.")
model ImportJobOptions {
  @doc("Parameters needed to create the project.")
  metadata?: CreateProjectOptions;

  @doc("All assets for this project.")
  assets?: Assets;

  @doc("Import data File URI.")
  fileUri?: string;
}

@doc("All assets for this project.")
model Assets {
  @doc("Collection of synonyms.")
  synonyms?: WordAlterations[];

  @doc("List of QnA records to import.")
  qnas?: ImportQnaRecord[];
}

@doc("Collection of word alterations.")
model WordAlterations {
  @doc("Collection of word alterations.")
  alterations: string[];
}

// FIXME: (multiple-inheritance) Multiple inheritance is not supported in CADL, so this type will only inherit from one parent.
// please review the generated model to write a valid object hierarchy.
@doc("Import QnA Record.")
model ImportQnaRecord extends RetrieveQnaRecord {}

// FIXME: (multiple-inheritance) Multiple inheritance is not supported in CADL, so this type will only inherit from one parent.
// please review the generated model to write a valid object hierarchy.
@doc("QnA Record with last updated date-time.")
model RetrieveQnaRecord extends QnaRecord {}

@doc("QnA record.")
model QnaRecord {
  @doc("Unique ID for the QnA.")
  id?: int32;

  @doc("Answer text.")
  answer?: string;

  @doc("""
Source from which QnA was indexed e.g.
https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
""")
  source?: string;

  @doc("List of questions associated with the answer.")
  questions?: string[];

  @doc("""
Metadata associated with the answer, useful to categorize or filter question
answers.
""")
  metadata?: Record<string>;

  @doc("Context of a QnA.")
  dialog?: QnaDialog;

  @doc("List of Active Learning suggestions for the QnA.")
  activeLearningSuggestions?: SuggestedQuestionsCluster[];
}

@doc("Dialog associated with QnA Record.")
model QnaDialog {
  @doc("""
To mark if a prompt is relevant only with a previous question or not. If true,
do not include this QnA as answer for queries without context; otherwise,
ignores context and includes this QnA in answers.
""")
  isContextOnly?: boolean;

  @doc("List of prompts associated with the answer.")
  prompts?: QnaPrompt[];
}

@doc("Prompt for an answer.")
model QnaPrompt {
  @doc("Index of the prompt. It is used for ordering of the prompts.")
  displayOrder?: int32;

  @doc("ID of the QnA corresponding to the prompt.")
  qnaId?: int32;

  @doc("QnA record. Either QnAId or QnA record needs to be present in a Prompt.")
  qna?: QnaRecord;

  @doc("Text displayed to represent a follow up question prompt.")
  displayText?: string;
}

@doc("Active Learning suggested questions cluster details.")
model SuggestedQuestionsCluster {
  @doc("""
Question chosen as the head of suggested questions cluster by Active Learning
clustering algorithm.
""")
  clusterHead?: string;

  @doc("List of all suggested questions for the QnA.")
  suggestedQuestions?: SuggestedQuestion[];
}

@doc("Question suggested by the Active Learning feature.")
model SuggestedQuestion {
  @doc("Question suggested by the Active Learning feature.")
  question?: string;

  @doc("The number of times the question was suggested explicitly by the user.")
  userSuggestedCount?: int32;

  @doc("""
The number of times the question was suggested automatically by the Active
Learning algorithm.
""")
  autoSuggestedCount?: int32;
}

@doc("Last updated date-time parameter.")
model LastUpdatedDateTimeParameter {
  @doc("Date-time when the QnA was last updated.")
  lastUpdatedDateTime?: zonedDateTime;
}

// FIXME: (missing-docs) Add documentation
model SourceDisplayNameParameter {
  @doc("Friendly name of the Source.")
  sourceDisplayName?: string;
}

@doc("All deployments of a project.")
@pagedResult
model ProjectDeployments {
  @doc("List of deployments of a project.")
  @items
  value?: ProjectDeployment[];
  // FIXME: (missing-docs) Add documentation

  @nextLink
  nextLink?: string;
}

@doc("Project deployment details.")
model ProjectDeployment {
  @doc("Name of the deployment.")
  deploymentName?: string;

  @doc("Represents the project last deployment date-time.")
  lastDeployedDateTime?: zonedDateTime;
}

@doc("All synonym assets for this project.")
@pagedResult
model SynonymAssets {
  @doc("Collection of synonyms.")
  @items
  value?: WordAlterations[];
  // FIXME: (missing-docs) Add documentation

  @nextLink
  nextLink?: string;
}

@doc("All QnA sources for the project.")
@pagedResult
model QnaSources {
  @doc("""
Custom sources from which QnAs were extracted or explicitly added to the
project.
""")
  @items
  value?: QnaSourceRecord[];
  // FIXME: (missing-docs) Add documentation

  @nextLink
  nextLink?: string;
}

// FIXME: (multiple-inheritance) Multiple inheritance is not supported in CADL, so this type will only inherit from one parent.
// please review the generated model to write a valid object hierarchy.
@doc("Custom source record with last updated date-time.")
model QnaSourceRecord extends QnaSourceMetadata {}

@doc("Input source file or url details.")
model QnaSourceMetadata {
  @doc("Friendly name of the Source.")
  displayName?: string;

  @doc("""
Unique source identifier. Name of the file if it's a 'file' source; otherwise,
the complete URL if it's a 'url' source.
""")
  source?: string;

  @doc("URI location for the file or url.")
  sourceUri: string;

  @doc("Supported source types.")
  sourceKind: sourceKind;

  @doc("Content structure type for sources.")
  contentStructureKind?: sourceContentStructureKind;
}

@doc("Source to be updated.")
model UpdateSourceRecord {
  @doc("Update operation type for assets.")
  "op": updateOperationKind;

  @doc("Update source record.")
  value: UpdateQnaSourceRecord;
}

// FIXME: (multiple-inheritance) Multiple inheritance is not supported in CADL, so this type will only inherit from one parent.
// please review the generated model to write a valid object hierarchy.
@doc("Update source record.")
model UpdateQnaSourceRecord extends QnaSourceMetadata {}

@doc("Boolean flag used to refresh data from the Source.")
model RefreshSourceOptions {
  @doc("Boolean flag used to refresh data from the Source.")
  refresh?: boolean;
}

@doc("All QnA assets for the project.")
@pagedResult
model QnaAssets {
  @doc("List of QnA records.")
  @items
  value?: RetrieveQnaRecord[];
  // FIXME: (missing-docs) Add documentation

  @nextLink
  nextLink?: string;
}

@doc("QnA record to be updated.")
model UpdateQnaRecord {
  @doc("Update operation type for assets.")
  "op": updateOperationKind;

  @doc("QnA record.")
  value: QnaRecord;
}

@doc("Feedback for Active Learning.")
model ActiveLearningFeedback {
  @doc("A list of Feedback Records for Active Learning.")
  records?: FeedbackRecord[];
}

@doc("Feedback Record for Active Learning.")
model FeedbackRecord {
  @doc("Unique identifier of the user.")
  userId?: string;

  @doc("User suggested question for the QnA.")
  userQuestion?: string;

  @doc("Unique ID of the QnA.")
  qnaId?: int32;
}
