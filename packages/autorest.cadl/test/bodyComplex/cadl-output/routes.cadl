import "@azure-tools/cadl-azure-core";
import "@cadl-lang/rest";
import "./models.cadl";

using Cadl.Rest;
using Cadl.Http;

namespace AutoRestComplexTestService;

interface BasicOperations {
  @doc("Get complex type {id: 2, name: 'abc', color: 'YELLOW'}")
  GetValid is Azure.Core.ResourceRead<Basic>;

  @doc("Please put {id: 2, name: 'abc', color: 'Magenta'}")
  PutValid is Azure.Core.ResourceCreateOrReplace<Basic>;

  @doc("Get a basic complex type that is invalid for the local strong type")
  GetInvalid is Azure.Core.ResourceRead<Basic>;

  @doc("Get a basic complex type that is empty")
  GetEmpty is Azure.Core.ResourceRead<Basic>;

  @doc("Get a basic complex type whose properties are null")
  GetNull is Azure.Core.ResourceRead<Basic>;

  @doc("Get a basic complex type while the server doesn't provide a response payload")
  GetNotProvided is Azure.Core.ResourceRead<Basic>;
}

interface PrimitiveOperations {
  @doc("Get complex types with integer properties")
  GetInt is Azure.Core.ResourceRead<IntWrapper>;

  @doc("Put complex types with integer properties")
  PutInt is Azure.Core.ResourceCreateOrReplace<IntWrapper>;

  @doc("Get complex types with long properties")
  GetLong is Azure.Core.ResourceRead<LongWrapper>;

  @doc("Put complex types with long properties")
  PutLong is Azure.Core.ResourceCreateOrReplace<LongWrapper>;

  @doc("Get complex types with float properties")
  GetFloat is Azure.Core.ResourceRead<FloatWrapper>;

  @doc("Put complex types with float properties")
  PutFloat is Azure.Core.ResourceCreateOrReplace<FloatWrapper>;

  @doc("Get complex types with double properties")
  GetDouble is Azure.Core.ResourceRead<DoubleWrapper>;

  @doc("Put complex types with double properties")
  PutDouble is Azure.Core.ResourceCreateOrReplace<DoubleWrapper>;

  @doc("Get complex types with bool properties")
  GetBool is Azure.Core.ResourceRead<BooleanWrapper>;

  @doc("Put complex types with bool properties")
  PutBool is Azure.Core.ResourceCreateOrReplace<BooleanWrapper>;

  @doc("Get complex types with string properties")
  GetString is Azure.Core.ResourceRead<StringWrapper>;

  @doc("Put complex types with string properties")
  PutString is Azure.Core.ResourceCreateOrReplace<StringWrapper>;

  @doc("Get complex types with date properties")
  GetDate is Azure.Core.ResourceRead<DateWrapper>;

  @doc("Put complex types with date properties")
  PutDate is Azure.Core.ResourceCreateOrReplace<DateWrapper>;

  @doc("Get complex types with datetime properties")
  GetDateTime is Azure.Core.ResourceRead<DatetimeWrapper>;

  @doc("Put complex types with datetime properties")
  PutDateTime is Azure.Core.ResourceCreateOrReplace<DatetimeWrapper>;

  @doc("Get complex types with datetimeRfc1123 properties")
  GetDateTimeRfc1123 is Azure.Core.ResourceRead<Datetimerfc1123Wrapper>;

  @doc("Put complex types with datetimeRfc1123 properties")
  PutDateTimeRfc1123 is Azure.Core.ResourceCreateOrReplace<Datetimerfc1123Wrapper>;

  @doc("Get complex types with duration properties")
  GetDuration is Azure.Core.ResourceRead<DurationWrapper>;

  @doc("Put complex types with duration properties")
  PutDuration is Azure.Core.ResourceCreateOrReplace<DurationWrapper>;

  @doc("Get complex types with byte properties")
  GetByte is Azure.Core.ResourceRead<ByteWrapper>;

  @doc("Put complex types with byte properties")
  PutByte is Azure.Core.ResourceCreateOrReplace<ByteWrapper>;
}

interface ArrayOperations {
  @doc("Get complex types with array property")
  GetValid is Azure.Core.ResourceRead<ArrayWrapper>;

  @doc("Put complex types with array property")
  PutValid is Azure.Core.ResourceCreateOrReplace<ArrayWrapper>;

  @doc("Get complex types with array property which is empty")
  GetEmpty is Azure.Core.ResourceRead<ArrayWrapper>;

  @doc("Put complex types with array property which is empty")
  PutEmpty is Azure.Core.ResourceCreateOrReplace<ArrayWrapper>;

  @doc("""
Get complex types with array property while server doesn't provide a response
payload
""")
  GetNotProvided is Azure.Core.ResourceRead<ArrayWrapper>;
}

interface DictionaryOperations {
  @doc("Get complex types with dictionary property")
  GetValid is Azure.Core.ResourceRead<DictionaryWrapper>;

  @doc("Put complex types with dictionary property")
  PutValid is Azure.Core.ResourceCreateOrReplace<DictionaryWrapper>;

  @doc("Get complex types with dictionary property which is empty")
  GetEmpty is Azure.Core.ResourceRead<DictionaryWrapper>;

  @doc("Put complex types with dictionary property which is empty")
  PutEmpty is Azure.Core.ResourceCreateOrReplace<DictionaryWrapper>;

  @doc("Get complex types with dictionary property which is null")
  GetNull is Azure.Core.ResourceRead<DictionaryWrapper>;

  @doc("""
Get complex types with dictionary property while server doesn't provide a
response payload
""")
  GetNotProvided is Azure.Core.ResourceRead<DictionaryWrapper>;
}

interface InheritanceOperations {
  @doc("Get complex types that extend others")
  GetValid is Azure.Core.ResourceRead<Siamese>;

  @doc("Put complex types that extend others")
  PutValid is Azure.Core.ResourceCreateOrReplace<Siamese>;
}

interface PolymorphismOperations {
  @doc("Get complex types that are polymorphic")
  GetValid is Azure.Core.ResourceRead<Fish>;

  @doc("Put complex types that are polymorphic")
  PutValid is Azure.Core.ResourceCreateOrReplace<Fish>;

  @doc("Get complex types that are polymorphic, JSON key contains a dot")
  GetDotSyntax is Azure.Core.ResourceRead<DotFish>;

  @doc("""
Get complex object composing a polymorphic scalar property and array property
with polymorphic element type, with discriminator specified. Deserialization
must NOT fail and use the discriminator type specified on the wire.
""")
  GetComposedWithDiscriminator is Azure.Core.ResourceRead<DotFishMarket>;

  @doc("""
Get complex object composing a polymorphic scalar property and array property
with polymorphic element type, without discriminator specified on wire.
Deserialization must NOT fail and use the explicit type of the property.
""")
  GetComposedWithoutDiscriminator is Azure.Core.ResourceRead<DotFishMarket>;

  @doc("""
Get complex types that are polymorphic, but not at the root of the hierarchy;
also have additional properties
""")
  GetComplicated is Azure.Core.ResourceRead<Salmon>;

  @doc("""
Put complex types that are polymorphic, but not at the root of the hierarchy;
also have additional properties
""")
  PutComplicated is Azure.Core.ResourceCreateOrReplace<Salmon>;

  @doc("Put complex types that are polymorphic, omitting the discriminator")
  PutMissingDiscriminator is Azure.Core.ResourceCreateOrReplace<Salmon>;

  @doc("""
Put complex types that are polymorphic, attempting to omit required 'birthday'
field - the request should not be allowed from the client
""")
  @route("/complex/polymorphism/missingrequired/invalid")
  @put
  PutValidMissingRequired is Azure.Core.Foundations.Operation<
    {
      @doc("""
Please attempt put a sawshark that looks like this, the client should not allow
this data to be sent:
{
    \"fishtype\": \"sawshark\",
    \"species\":
\"snaggle toothed\",
    \"length\": 18.5,
    \"age\": 2,
    \"birthday\":
\"2013-06-01T01:00:00Z\",
    \"location\": \"alaska\",
    \"picture\":
base64(FF FF FF FF FE),
    \"siblings\": [
        {
            \"fishtype\":
\"shark\",
            \"species\": \"predator\",
            \"birthday\":
\"2012-01-05T01:00:00Z\",
            \"length\": 20,
            \"age\": 6
  
     },
        {
            \"fishtype\": \"sawshark\",
           
\"species\": \"dangerous\",
            \"picture\": base64(FF FF FF FF FE),
  
         \"length\": 10,
            \"age\": 105
        }
    ]
}
""")
      @body
      complexBody: Fish;
    },
    void
  >;
}

interface PolymorphicrecursiveOperations {
  @doc("Get complex types that are polymorphic and have recursive references")
  GetValid is Azure.Core.ResourceRead<Fish>;

  @doc("Put complex types that are polymorphic and have recursive references")
  PutValid is Azure.Core.ResourceCreateOrReplace<Fish>;
}

interface ReadonlypropertyOperations {
  @doc("Get complex types that have readonly properties")
  GetValid is Azure.Core.ResourceRead<ReadonlyObj>;

  @doc("Put complex types that have readonly properties")
  PutValid is Azure.Core.ResourceCreateOrReplace<ReadonlyObj>;
}

interface FlattencomplexOperations {
  GetValid is Azure.Core.ResourceRead<MyBaseType>;
}
