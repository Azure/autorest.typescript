import "@cadl-lang/rest";

import "./models.cadl";

using Cadl.Rest;

using Cadl.Http;

// TODO: (missing-docs) Add documentation
interface basicOperations {
  @doc("Get complex type {id: 2, name: 'abc', color: 'YELLOW'}")
  @route("/complex/basic/valid")
  @get
  getValid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): basic;
  @doc("Please put {id: 2, name: 'abc', color: 'Magenta'}")
  @route("/complex/basic/valid")
  @put
  putValid(
    @doc("Api Version")
    @query
    "api-version": "2016-02-29",

    @doc("Please put {id: 2, name: 'abc', color: 'Magenta'}")
    @body
    complexBody: basic,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get a basic complex type that is invalid for the local strong type")
  @route("/complex/basic/invalid")
  @get
  getInvalid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): basic;
  @doc("Get a basic complex type that is empty")
  @route("/complex/basic/empty")
  @get
  getEmpty(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): basic;
  @doc("Get a basic complex type whose properties are null")
  @route("/complex/basic/null")
  @get
  getNull(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): basic;
  @doc("Get a basic complex type while the server doesn't provide a response payload")
  @route("/complex/basic/notprovided")
  @get
  getNotProvided(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): basic;
}

// TODO: (missing-docs) Add documentation
interface primitiveOperations {
  @doc("Get complex types with integer properties")
  @route("/complex/primitive/integer")
  @get
  getInt(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): int_wrapper;
  @doc("Put complex types with integer properties")
  @route("/complex/primitive/integer")
  @put
  putInt(
    @doc("Please put -1 and 2")
    @body
    complexBody: int_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with long properties")
  @route("/complex/primitive/long")
  @get
  getLong(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): long_wrapper;
  @doc("Put complex types with long properties")
  @route("/complex/primitive/long")
  @put
  putLong(
    @doc("Please put 1099511627775 and -999511627788")
    @body
    complexBody: long_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with float properties")
  @route("/complex/primitive/float")
  @get
  getFloat(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): float_wrapper;
  @doc("Put complex types with float properties")
  @route("/complex/primitive/float")
  @put
  putFloat(
    @doc("Please put 1.05 and -0.003")
    @body
    complexBody: float_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with double properties")
  @route("/complex/primitive/double")
  @get
  getDouble(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): double_wrapper;
  @doc("Put complex types with double properties")
  @route("/complex/primitive/double")
  @put
  putDouble(
    @doc("Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005")
    @body
    complexBody: double_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with bool properties")
  @route("/complex/primitive/bool")
  @get
  getBool(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): boolean_wrapper;
  @doc("Put complex types with bool properties")
  @route("/complex/primitive/bool")
  @put
  putBool(
    @doc("Please put true and false")
    @body
    complexBody: boolean_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with string properties")
  @route("/complex/primitive/string")
  @get
  getString(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): string_wrapper;
  @doc("Put complex types with string properties")
  @route("/complex/primitive/string")
  @put
  putString(
    @doc("Please put 'goodrequest', '', and null")
    @body
    complexBody: string_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with date properties")
  @route("/complex/primitive/date")
  @get
  getDate(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): date_wrapper;
  @doc("Put complex types with date properties")
  @route("/complex/primitive/date")
  @put
  putDate(
    @doc("Please put '0001-01-01' and '2016-02-29'")
    @body
    complexBody: date_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with datetime properties")
  @route("/complex/primitive/datetime")
  @get
  getDateTime(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): datetime_wrapper;
  @doc("Put complex types with datetime properties")
  @route("/complex/primitive/datetime")
  @put
  putDateTime(
    @doc("Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'")
    @body
    complexBody: datetime_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with datetimeRfc1123 properties")
  @route("/complex/primitive/datetimerfc1123")
  @get
  getDateTimeRfc1123(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): datetimerfc1123_wrapper;
  @doc("Put complex types with datetimeRfc1123 properties")
  @route("/complex/primitive/datetimerfc1123")
  @put
  putDateTimeRfc1123(
    @doc("Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'")
    @body
    complexBody: datetimerfc1123_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with duration properties")
  @route("/complex/primitive/duration")
  @get
  getDuration(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): duration_wrapper;
  @doc("Put complex types with duration properties")
  @route("/complex/primitive/duration")
  @put
  putDuration(
    @doc("Please put 'P123DT22H14M12.011S'")
    @body
    complexBody: duration_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with byte properties")
  @route("/complex/primitive/byte")
  @get
  getByte(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): byte_wrapper;
  @doc("Put complex types with byte properties")
  @route("/complex/primitive/byte")
  @put
  putByte(
    @doc("Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)")
    @body
    complexBody: byte_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
}

// TODO: (missing-docs) Add documentation
interface arrayOperations {
  @doc("Get complex types with array property")
  @route("/complex/array/valid")
  @get
  getValid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): array_wrapper;
  @doc("Put complex types with array property")
  @route("/complex/array/valid")
  @put
  putValid(
    @doc("Please put an array with 4 items: \"1, 2, 3, 4\", \"\", null, \"&S#$(*Y\", \"The quick brown fox jumps over the lazy dog\"")
    @body
    complexBody: array_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with array property which is empty")
  @route("/complex/array/empty")
  @get
  getEmpty(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): array_wrapper;
  @doc("Put complex types with array property which is empty")
  @route("/complex/array/empty")
  @put
  putEmpty(
    @doc("Please put an empty array")
    @body
    complexBody: array_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with array property while server doesn't provide a response payload")
  @route("/complex/array/notprovided")
  @get
  getNotProvided(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): array_wrapper;
}

// TODO: (missing-docs) Add documentation
interface dictionaryOperations {
  @doc("Get complex types with dictionary property")
  @route("/complex/dictionary/typed/valid")
  @get
  getValid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): dictionary_wrapper;
  @doc("Put complex types with dictionary property")
  @route("/complex/dictionary/typed/valid")
  @put
  putValid(
    @doc("Please put a dictionary with 5 key-value pairs: \"txt\":\"notepad\", \"bmp\":\"mspaint\", \"xls\":\"excel\", \"exe\":\"\", \"\":null")
    @body
    complexBody: dictionary_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with dictionary property which is empty")
  @route("/complex/dictionary/typed/empty")
  @get
  getEmpty(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): dictionary_wrapper;
  @doc("Put complex types with dictionary property which is empty")
  @route("/complex/dictionary/typed/empty")
  @put
  putEmpty(
    @doc("Please put an empty dictionary")
    @body
    complexBody: dictionary_wrapper,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types with dictionary property which is null")
  @route("/complex/dictionary/typed/null")
  @get
  getNull(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): dictionary_wrapper;
  @doc("Get complex types with dictionary property while server doesn't provide a response payload")
  @route("/complex/dictionary/typed/notprovided")
  @get
  getNotProvided(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): dictionary_wrapper;
}

// TODO: (missing-docs) Add documentation
interface inheritanceOperations {
  @doc("Get complex types that extend others")
  @route("/complex/inheritance/valid")
  @get
  getValid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): siamese;
  @doc("Put complex types that extend others")
  @route("/complex/inheritance/valid")
  @put
  putValid(
    @doc("Please put a siamese with id=2, name=\"Siameee\", color=green, breed=persion, which hates 2 dogs, the 1st one named \"Potato\" with id=1 and food=\"tomato\", and the 2nd one named \"Tomato\" with id=-1 and food=\"french fries\".")
    @body
    complexBody: siamese,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
}

// TODO: (missing-docs) Add documentation
interface polymorphismOperations {
  @doc("Get complex types that are polymorphic")
  @route("/complex/polymorphism/valid")
  @get
  getValid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Fish;
  @doc("Put complex types that are polymorphic")
  @route("/complex/polymorphism/valid")
  @put
  putValid(
    @doc("Please put a salmon that looks like this:\n{\n        'fishtype':'Salmon',\n        'location':'alaska',\n        'iswild':true,\n        'species':'king',\n        'length':1.0,\n        'siblings':[\n          {\n            'fishtype':'Shark',\n            'age':6,\n            'birthday': '2012-01-05T01:00:00Z',\n            'length':20.0,\n            'species':'predator',\n          },\n          {\n            'fishtype':'Sawshark',\n            'age':105,\n            'birthday': '1900-01-05T01:00:00Z',\n            'length':10.0,\n            'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),\n            'species':'dangerous',\n          },\n          {\n            'fishtype': 'goblin',\n            'age': 1,\n            'birthday': '2015-08-08T00:00:00Z',\n            'length': 30.0,\n            'species': 'scary',\n            'jawsize': 5\n          }\n        ]\n      };")
    @body
    complexBody: Fish,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Get complex types that are polymorphic, JSON key contains a dot")
  @route("/complex/polymorphism/dotsyntax")
  @get
  getDotSyntax(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): DotFish;
  @doc("Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.")
  @route("/complex/polymorphism/composedWithDiscriminator")
  @get
  getComposedWithDiscriminator(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): DotFishMarket;
  @doc("Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.")
  @route("/complex/polymorphism/composedWithoutDiscriminator")
  @get
  getComposedWithoutDiscriminator(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): DotFishMarket;
  @doc("Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties")
  @route("/complex/polymorphism/complicated")
  @get
  getComplicated(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): salmon;
  @doc("Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties")
  @route("/complex/polymorphism/complicated")
  @put
  putComplicated(
    // TODO: (missing-docs) Add documentation
    @body complexBody: salmon,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
  @doc("Put complex types that are polymorphic, omitting the discriminator")
  @route("/complex/polymorphism/missingdiscriminator")
  @put
  putMissingDiscriminator(
    // TODO: (missing-docs) Add documentation
    @body complexBody: salmon,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): salmon;
  @doc("Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client")
  @route("/complex/polymorphism/missingrequired/invalid")
  @put
  putValidMissingRequired(
    @doc("Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:\n{\n    \"fishtype\": \"sawshark\",\n    \"species\": \"snaggle toothed\",\n    \"length\": 18.5,\n    \"age\": 2,\n    \"birthday\": \"2013-06-01T01:00:00Z\",\n    \"location\": \"alaska\",\n    \"picture\": base64(FF FF FF FF FE),\n    \"siblings\": [\n        {\n            \"fishtype\": \"shark\",\n            \"species\": \"predator\",\n            \"birthday\": \"2012-01-05T01:00:00Z\",\n            \"length\": 20,\n            \"age\": 6\n        },\n        {\n            \"fishtype\": \"sawshark\",\n            \"species\": \"dangerous\",\n            \"picture\": base64(FF FF FF FF FE),\n            \"length\": 10,\n            \"age\": 105\n        }\n    ]\n}")
    @body
    complexBody: Fish,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
}

// TODO: (missing-docs) Add documentation
interface polymorphicrecursiveOperations {
  @doc("Get complex types that are polymorphic and have recursive references")
  @route("/complex/polymorphicrecursive/valid")
  @get
  getValid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): Fish;
  @doc("Put complex types that are polymorphic and have recursive references")
  @route("/complex/polymorphicrecursive/valid")
  @put
  putValid(
    @doc("Please put a salmon that looks like this:\n{\n    \"fishtype\": \"salmon\",\n    \"species\": \"king\",\n    \"length\": 1,\n    \"age\": 1,\n    \"location\": \"alaska\",\n    \"iswild\": true,\n    \"siblings\": [\n        {\n            \"fishtype\": \"shark\",\n            \"species\": \"predator\",\n            \"length\": 20,\n            \"age\": 6,\n            \"siblings\": [\n                {\n                    \"fishtype\": \"salmon\",\n                    \"species\": \"coho\",\n                    \"length\": 2,\n                    \"age\": 2,\n                    \"location\": \"atlantic\",\n                    \"iswild\": true,\n                    \"siblings\": [\n                        {\n                            \"fishtype\": \"shark\",\n                            \"species\": \"predator\",\n                            \"length\": 20,\n                            \"age\": 6\n                        },\n                        {\n                            \"fishtype\": \"sawshark\",\n                            \"species\": \"dangerous\",\n                            \"length\": 10,\n                            \"age\": 105\n                        }\n                    ]\n                },\n                {\n                    \"fishtype\": \"sawshark\",\n                    \"species\": \"dangerous\",\n                    \"length\": 10,\n                    \"age\": 105\n                }\n            ]\n        },\n        {\n            \"fishtype\": \"sawshark\",\n            \"species\": \"dangerous\",\n            \"length\": 10,\n            \"age\": 105\n        }\n    ]\n}")
    @body
    complexBody: Fish,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
}

// TODO: (missing-docs) Add documentation
interface readonlypropertyOperations {
  @doc("Get complex types that have readonly properties")
  @route("/complex/readonlyproperty/valid")
  @get
  getValid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): readonly_obj;
  @doc("Put complex types that have readonly properties")
  @route("/complex/readonlyproperty/valid")
  @put
  putValid(
    // TODO: (missing-docs) Add documentation
    @body complexBody: readonly_obj,

    @doc("Accept header")
    @header
    Accept: "application/json"
  ): void;
}

// TODO: (missing-docs) Add documentation
interface flattencomplexOperations {
  // TODO: (missing-docs) Add documentation
  @route("/complex/flatten/valid")
  @get
  getValid(
    @doc("Accept header")
    @header
    Accept: "application/json"
  ): MyBaseType;
}
