import "@cadl-lang/rest";

using Cadl.Rest;

// FIXME: (missing-docs) Add documentation
enum CMYKColorsKnownValues {
  "cyan",
  "Magenta",
  "YELLOW",
  "blacK",
}

@knownValues(CMYKColorsKnownValues)
model CMYKColors is string {}

// FIXME: (missing-docs) Add documentation
enum MyKindKnownValues {
  "Kind1",
}

@knownValues(MyKindKnownValues)
model MyKind is string {}

// FIXME: (missing-docs) Add documentation
enum GoblinSharkColorKnownValues {
  "pink",
  "gray",
  "brown",
  upperRed: "RED",
  lowerRed: "red",
}

@knownValues(GoblinSharkColorKnownValues)
model GoblinSharkColor is string {}

// FIXME: (missing-docs) Add documentation
model basic {
  @doc("Basic Id")
  id?: int32;

  @doc("""
Name property with a very long description that does not fit on a single line
and a line break.
""")
  name?: string;
  // FIXME: (missing-docs) Add documentation
  color?: CMYKColors;
}

// FIXME: (missing-docs) Add documentation
@error
model Error {
  // FIXME: (missing-docs) Add documentation
  status?: int32;
  // FIXME: (missing-docs) Add documentation
  message?: string;
}

// FIXME: (missing-docs) Add documentation
model int_wrapper {
  // FIXME: (missing-docs) Add documentation
  field1?: int32;
  // FIXME: (missing-docs) Add documentation
  field2?: int32;
}

// FIXME: (missing-docs) Add documentation
model long_wrapper {
  // FIXME: (missing-docs) Add documentation
  field1?: int32;
  // FIXME: (missing-docs) Add documentation
  field2?: int32;
}

// FIXME: (missing-docs) Add documentation
model float_wrapper {
  // FIXME: (missing-docs) Add documentation
  field1?: float32;
  // FIXME: (missing-docs) Add documentation
  field2?: float32;
}

// FIXME: (missing-docs) Add documentation
model double_wrapper {
  // FIXME: (missing-docs) Add documentation
  field1?: float32;
  // FIXME: (missing-docs) Add documentation
  field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose?: float32;
}

// FIXME: (missing-docs) Add documentation
model boolean_wrapper {
  // FIXME: (missing-docs) Add documentation
  field_true?: boolean;
  // FIXME: (missing-docs) Add documentation
  field_false?: boolean;
}

// FIXME: (missing-docs) Add documentation
model string_wrapper {
  // FIXME: (missing-docs) Add documentation
  field?: string;
  // FIXME: (missing-docs) Add documentation
  empty?: string;
  // FIXME: (missing-docs) Add documentation
  null?: string;
}

// FIXME: (missing-docs) Add documentation
model date_wrapper {
  // FIXME: (missing-docs) Add documentation
  field?: plainDate;
  // FIXME: (missing-docs) Add documentation
  leap?: plainDate;
}

// FIXME: (missing-docs) Add documentation
model datetime_wrapper {
  // FIXME: (missing-docs) Add documentation
  field?: zonedDateTime;
  // FIXME: (missing-docs) Add documentation
  now?: zonedDateTime;
}

// FIXME: (missing-docs) Add documentation
model datetimerfc1123_wrapper {
  // FIXME: (missing-docs) Add documentation
  field?: zonedDateTime;
  // FIXME: (missing-docs) Add documentation
  now?: zonedDateTime;
}

// FIXME: (missing-docs) Add documentation
model duration_wrapper {
  // FIXME: (missing-docs) Add documentation
  field?: duration;
}

// FIXME: (missing-docs) Add documentation
model byte_wrapper {
  // FIXME: (missing-docs) Add documentation
  field?: bytes;
}

// FIXME: (missing-docs) Add documentation
model array_wrapper {
  // FIXME: (missing-docs) Add documentation
  array?: string[];
}

// FIXME: (missing-docs) Add documentation
model dictionary_wrapper {
  @doc("Dictionary of <string>")
  defaultProgram?: Record<string>;
}

// FIXME: (missing-docs) Add documentation
model siamese {
  ...cat;
  // FIXME: (missing-docs) Add documentation
  breed?: string;
}

// FIXME: (missing-docs) Add documentation
model cat {
  ...pet;
  // FIXME: (missing-docs) Add documentation
  color?: string;
  // FIXME: (missing-docs) Add documentation
  hates?: dog[];
}

// FIXME: (missing-docs) Add documentation
model dog {
  ...pet;
  // FIXME: (missing-docs) Add documentation
  food?: string;
}

// FIXME: (missing-docs) Add documentation
model pet {
  // FIXME: (missing-docs) Add documentation
  id?: int32;
  // FIXME: (missing-docs) Add documentation
  name?: string;
}

// FIXME: (missing-docs) Add documentation
@discriminator("fishtype")
model Fish {
  // FIXME: (missing-docs) Add documentation
  species?: string;
  // FIXME: (missing-docs) Add documentation
  length: float32;
  // FIXME: (missing-docs) Add documentation
  siblings?: Fish[];
}

// FIXME: (missing-docs) Add documentation
@discriminator("fish.type")
model DotFish {
  // FIXME: (missing-docs) Add documentation
  species?: string;
}

// FIXME: (missing-docs) Add documentation
model DotFishMarket {
  // FIXME: (missing-docs) Add documentation
  sampleSalmon?: DotSalmon;
  // FIXME: (missing-docs) Add documentation
  salmons?: DotSalmon[];
  // FIXME: (missing-docs) Add documentation
  sampleFish?: DotFish;
  // FIXME: (missing-docs) Add documentation
  fishes?: DotFish[];
}

// FIXME: (missing-docs) Add documentation
model DotSalmon extends DotFish {
  // FIXME: (missing-docs) Add documentation
  location?: string;
  // FIXME: (missing-docs) Add documentation
  iswild?: boolean;
  // FIXME: (missing-docs) Add documentation
  "fish.type": "DotSalmon";
}

// FIXME: (missing-docs) Add documentation
@discriminator("fishtype")
model salmon extends Fish {
  // FIXME: (missing-docs) Add documentation
  location?: string;
  // FIXME: (missing-docs) Add documentation
  iswild?: boolean;
}

// FIXME: (missing-docs) Add documentation
model readonly_obj {
  // FIXME: (missing-docs) Add documentation
  id?: string;
  // FIXME: (missing-docs) Add documentation
  size?: int32;
}

// FIXME: (missing-docs) Add documentation
@discriminator("kind")
model MyBaseType {
  // FIXME: (missing-docs) Add documentation
  propB1?: string;
  // FIXME: (missing-docs) Add documentation
  helper?: MyBaseHelperType;
}

// FIXME: (missing-docs) Add documentation
model MyBaseHelperType {
  // FIXME: (missing-docs) Add documentation
  propBH1?: string;
}

// FIXME: (missing-docs) Add documentation
model smart_salmon extends salmon {
  // FIXME: (missing-docs) Add documentation
  college_degree?: string;
  // FIXME: (missing-docs) Add documentation
  fishtype: "smart_salmon";
}

// FIXME: (missing-docs) Add documentation
@discriminator("fishtype")
model shark extends Fish {
  // FIXME: (missing-docs) Add documentation
  age?: int32;
  // FIXME: (missing-docs) Add documentation
  birthday: zonedDateTime;
}

// FIXME: (missing-docs) Add documentation
model sawshark extends shark {
  // FIXME: (missing-docs) Add documentation
  picture?: bytes;
  // FIXME: (missing-docs) Add documentation
  fishtype: "sawshark";
}

// FIXME: (missing-docs) Add documentation
model goblinshark extends shark {
  // FIXME: (missing-docs) Add documentation
  jawsize?: int32;

  @doc("Colors possible")
  color?: GoblinSharkColor;
  // FIXME: (missing-docs) Add documentation
  fishtype: "goblin";
}

// FIXME: (missing-docs) Add documentation
model cookiecuttershark extends shark {
  // FIXME: (missing-docs) Add documentation
  fishtype: "cookiecuttershark";
}

// FIXME: (missing-docs) Add documentation
model MyDerivedType extends MyBaseType {
  // FIXME: (missing-docs) Add documentation
  propD1?: string;
  // FIXME: (missing-docs) Add documentation
  kind: "Kind1";
}
