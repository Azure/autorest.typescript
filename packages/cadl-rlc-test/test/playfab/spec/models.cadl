import "@cadl-lang/rest";

using Cadl.Rest;

namespace PlayFab;

// FIXME: (missing-docs) Add documentation
enum AccountLinkAction {
  "CreateAndLinkNewAccount",
  "LinkToExistingAccount",
  "LeaveUnlinked",
}

// FIXME: (missing-docs) Add documentation
enum PlayerIdentityProvider {
  "AndroidDevice",
  "Apple",
  "CustomId",
  "Email",
  "FacebookInstantGames",
  "GameCenter",
  "Google",
  "iOSDevice",
  "Kongregate",
  "NintendoSwitchDevice",
  "NintendoAccount",
  "OpenId",
  "PSN",
  "ServerCustomId",
  "Steam",
  "Twitch",
  "Username",
  "Xbox",
  "GooglePlayGames",
}

// FIXME: (missing-docs) Add documentation
enum OperationTypes {
  "Created",
  "Updated",
  "Deleted",
  "None",
}

@doc("""
This API must be called with X-SecretKey, X-Authentication or X-EntityToken
headers. An optional EntityKey may be included to attempt to set the resulting
EntityToken to a specific entity, however the entity must be a relation of the
caller, such as the master_player_account of a character. If sending
X-EntityToken the account will be marked as freshly logged in and will issue a
new token. If using X-Authentication or X-EntityToken the header must still be
valid and cannot be expired or revoked.
""")
model GetEntityTokenRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("""
The optional entity to perform this action on. Defaults to the currently logged
in entity.
""")
  Entity?: EntityKey;
}

@doc("Combined entity type and ID structure which uniquely identifies a single entity.")
model EntityKey {
  @doc("Unique ID of the entity.")
  Id: string;

  @doc("""
Entity type. See
https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
""")
  Type?: string;
}

// FIXME: (missing-docs) Add documentation
model GetEntityTokenResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: GetEntityTokenResponse_data;
}

// FIXME: (missing-docs) Add documentation
model GetEntityTokenResponse_data {
  @doc("The entity id and type.")
  Entity?: EntityKey;

  @doc("The token used to set X-EntityToken for all entity based API calls.")
  EntityToken?: string;

  @doc("The time the token will expire, if it is an expiring token, in UTC.")
  TokenExpiration?: string;
}

@doc("The basic wrapper around every failed API response")
@error
model ApiErrorWrapper {
  @doc("Numerical HTTP code")
  code: int32;

  @doc("String HTTP code")
  status?: string;

  @doc("Playfab error code")
  error?: string;

  @doc("Numerical PlayFab error code")
  errorCode: int32;

  @doc("Description for the PlayFab errorCode")
  errorMessage?: string;

  @doc("Detailed description of individual issues with the request object")
  errorDetails?: object;
}

// FIXME: (missing-docs) Add documentation
model AuthenticateAndroidDeviceIdIdentityRequest {
  @doc("Identifier for the user's android device.")
  AndroidDeviceId: string;

  @doc("""
Controls what happens if the authenticated player identity is not yet
associated with a master_player_account in the player account pool.
'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
and associates the player identity with it. 'LinkToExistingAccount' attempts to
associate the player identity with the master_player_account entity specified
by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
if the master_player_account is already associated with another player
identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
'AccountNotFound' error.
""")
  BehaviorIfIdentityNotLinked: AccountLinkAction;

  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("""
Optional master_player_account entity in the player account pool to associate
with the authenticated player identity. When specified, then the request must
be authenticated as either the same master_player_account (with an entity token
obtained from a previous authentication API call) or as another entity
authorized to make calls on behalf of it, such as a title entity in the same
player account pool (with a title secret key).
""")
  ExistingMasterPlayerAccountId?: string;

  @doc("""
The player account pool containing the player account (master_player_account
entity) to be looked-up or created for the identity. The player account pool ID
is also known as the \"publisher ID\" or \"namespace ID\".
""")
  PlayerAccountPoolId: string;

  @doc("""
Optional title to log the master_player_account into after authenticating the
player. This option can be used to combine the player authentication and title
login operations in a single API request, avoiding a second API request to
'TitlePlayer/LoginPlayer'. When specified, an entity token for the
title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
property of the response.
""")
  TitleId?: string;
}

// FIXME: (missing-docs) Add documentation
model AuthenticateIdentityResult {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: AuthenticateIdentityResult_data;
}

// FIXME: (missing-docs) Add documentation
model AuthenticateIdentityResult_data {
  @doc("""
Unique identifier of the link between the player identity and associated
master_player_account, if a new link was created as directed by the value of
'BehaviorIfIdentityNotLinked'.
""")
  CreatedIdentityLinkId?: string;

  @doc("""
Entity token for the master_player_account linked to the authenticated player
identity.
""")
  MasterPlayerAccount?: EntityTokenResponse;

  @doc("""
Entity token for the title_player_account for the master_player_account and
title, if TitleId is specified in the request
""")
  TitlePlayerAccount?: EntityTokenResponse;
}

// FIXME: (missing-docs) Add documentation
model EntityTokenResponse {
  @doc("The entity id and type.")
  Entity?: EntityKey;

  @doc("The token used to set X-EntityToken for all entity based API calls.")
  EntityToken?: string;

  @doc("The time the token will expire, if it is an expiring token, in UTC.")
  TokenExpiration?: string;
}

// FIXME: (missing-docs) Add documentation
model AuthenticateCustomIdIdentityRequest {
  @doc("""
Controls what happens if the authenticated player identity is not yet
associated with a master_player_account in the player account pool.
'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
and associates the player identity with it. 'LinkToExistingAccount' attempts to
associate the player identity with the master_player_account entity specified
by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
if the master_player_account is already associated with another player
identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
'AccountNotFound' error.
""")
  BehaviorIfIdentityNotLinked: AccountLinkAction;

  @doc("""
Custom string value which uniquely identifies a player identity within the
player account pool.
""")
  CustomId: string;

  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("""
Optional master_player_account entity in the player account pool to associate
with the authenticated player identity. When specified, then the request must
be authenticated as either the same master_player_account (with an entity token
obtained from a previous authentication API call) or as another entity
authorized to make calls on behalf of it, such as a title entity in the same
player account pool (with a title secret key).
""")
  ExistingMasterPlayerAccountId?: string;

  @doc("""
The player account pool containing the player account (master_player_account
entity) to be looked-up or created for the identity. The player account pool ID
is also known as the \"publisher ID\" or \"namespace ID\".
""")
  PlayerAccountPoolId: string;

  @doc("""
Optional title to log the master_player_account into after authenticating the
player. This option can be used to combine the player authentication and title
login operations in a single API request, avoiding a second API request to
'TitlePlayer/LoginPlayer'. When specified, an entity token for the
title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
property of the response.
""")
  TitleId?: string;
}

// FIXME: (missing-docs) Add documentation
model AuthenticateIOSDeviceIdIdentityRequest {
  @doc("""
Controls what happens if the authenticated player identity is not yet
associated with a master_player_account in the player account pool.
'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
and associates the player identity with it. 'LinkToExistingAccount' attempts to
associate the player identity with the master_player_account entity specified
by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
if the master_player_account is already associated with another player
identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
'AccountNotFound' error.
""")
  BehaviorIfIdentityNotLinked: AccountLinkAction;

  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("Vendor-specific iOS identifier for the user's device.")
  DeviceId: string;

  @doc("""
Optional master_player_account entity in the player account pool to associate
with the authenticated player identity. When specified, then the request must
be authenticated as either the same master_player_account (with an entity token
obtained from a previous authentication API call) or as another entity
authorized to make calls on behalf of it, such as a title entity in the same
player account pool (with a title secret key).
""")
  ExistingMasterPlayerAccountId?: string;

  @doc("""
The player account pool containing the player account (master_player_account
entity) to be looked-up or created for the identity. The player account pool ID
is also known as the \"publisher ID\" or \"namespace ID\".
""")
  PlayerAccountPoolId: string;

  @doc("""
Optional title to log the master_player_account into after authenticating the
player. This option can be used to combine the player authentication and title
login operations in a single API request, avoiding a second API request to
'TitlePlayer/LoginPlayer'. When specified, an entity token for the
title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
property of the response.
""")
  TitleId?: string;
}

// FIXME: (missing-docs) Add documentation
model AuthenticateNintendoSwitchDeviceIDIdentityRequest {
  @doc("""
Controls what happens if the authenticated player identity is not yet
associated with a master_player_account in the player account pool.
'CreateAndLinkNewAccount' (default) creates a new master_player_account entity
and associates the player identity with it. 'LinkToExistingAccount' attempts to
associate the player identity with the master_player_account entity specified
by 'ExistingMasterPlayerAccountId', returning an 'AccountAlreadyLinked' error
if the master_player_account is already associated with another player
identity. 'LeaveUnlinked' leaves the player identity unlinked and returns the
'AccountNotFound' error.
""")
  BehaviorIfIdentityNotLinked: AccountLinkAction;

  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("""
Optional master_player_account entity in the player account pool to associate
with the authenticated player identity. When specified, then the request must
be authenticated as either the same master_player_account (with an entity token
obtained from a previous authentication API call) or as another entity
authorized to make calls on behalf of it, such as a title entity in the same
player account pool (with a title secret key).
""")
  ExistingMasterPlayerAccountId?: string;

  @doc("Identifier for the user's android device.")
  NintendoSwitchDeviceId: string;

  @doc("""
The player account pool containing the player account (master_player_account
entity) to be looked-up or created for the identity. The player account pool ID
is also known as the \"publisher ID\" or \"namespace ID\".
""")
  PlayerAccountPoolId: string;

  @doc("""
Optional title to log the master_player_account into after authenticating the
player. This option can be used to combine the player authentication and title
login operations in a single API request, avoiding a second API request to
'TitlePlayer/LoginPlayer'. When specified, an entity token for the
title_player_account entity is returned in the 'TitlePlayerAccountEntityToken'
property of the response.
""")
  TitleId?: string;
}

// FIXME: (missing-docs) Add documentation
model GetLinkedPlayerIdentitiesRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("master_player_account entity.")
  MasterPlayerAccountId?: string;
}

// FIXME: (missing-docs) Add documentation
model GetLinkedPlayerIdentitiesResult {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: GetLinkedPlayerIdentitiesResult_data;
}

// FIXME: (missing-docs) Add documentation
model GetLinkedPlayerIdentitiesResult_data {
  @doc("List of player identities currently linked to the master_player_account.")
  LinkedIdentities?: LinkedPlayerIdentity[];
}

// FIXME: (missing-docs) Add documentation
model LinkedPlayerIdentity {
  @doc("""
Unique identifier of the link between the player identity and
master_player_account.Can be used to specify the link in requests to
UnlinkPlayerIdentity
""")
  IdentityLinkId?: string;

  @doc("The player identity provider in which the identity exists.")
  IdentityProvider: PlayerIdentityProvider;

  @doc("""
The unique identifier of the player identity, as assigned by the player
identity provider. The format varies by identity provider
""")
  IdentityProviderIssuedId?: string;
}

// FIXME: (missing-docs) Add documentation
model UnlinkPlayerIdentityRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("""
Unique identifier of the link between the player identity and
master_player_account to be unlinked. If no matching player identity is
currently linked to the master_player_account, then the 'AccountNotLinked'
error is returned.
""")
  IdentityLinkId: string;

  @doc("master_player_account entity.")
  MasterPlayerAccountId?: string;
}

// FIXME: (missing-docs) Add documentation
model UnlinkPlayerIdentityResult {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;

  @doc("Any object")
  data?: object;
}

@doc("Aborts the pending upload of the requested files.")
model AbortFileUploadsRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("The entity to perform this action on.")
  Entity: EntityKey;

  @doc("Names of the files to have their pending uploads aborted.")
  FileNames: string[];

  @doc("""
The expected version of the profile, if set and doesn't match the current
version of the profile the operation will not be performed.
""")
  ProfileVersion?: float32;
}

// FIXME: (missing-docs) Add documentation
model AbortFileUploadsResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: AbortFileUploadsResponse_data;
}

// FIXME: (missing-docs) Add documentation
model AbortFileUploadsResponse_data {
  @doc("The entity id and type.")
  Entity?: EntityKey;

  @doc("""
The current version of the profile, can be used for concurrency control during
updates.
""")
  ProfileVersion?: float32;
}

@doc("Deletes the requested files from the entity's profile.")
model DeleteFilesRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("The entity to perform this action on.")
  Entity: EntityKey;

  @doc("Names of the files to be deleted.")
  FileNames: string[];

  @doc("""
The expected version of the profile, if set and doesn't match the current
version of the profile the operation will not be performed.
""")
  ProfileVersion?: float32;
}

// FIXME: (missing-docs) Add documentation
model DeleteFilesResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: DeleteFilesResponse_data;
}

// FIXME: (missing-docs) Add documentation
model DeleteFilesResponse_data {
  @doc("The entity id and type.")
  Entity?: EntityKey;

  @doc("""
The current version of the profile, can be used for concurrency control during
updates.
""")
  ProfileVersion?: float32;
}

@doc("""
Finalizes the upload of the requested files. Verifies that the files have been
successfully uploaded and moves the file pointers from pending to live.
""")
model FinalizeFileUploadsRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("The entity to perform this action on.")
  Entity: EntityKey;

  @doc("""
Names of the files to be finalized. Restricted to a-Z, 0-9, '(', ')', '_', '-'
and '.'
""")
  FileNames: string[];

  @doc("""
The current version of the profile, can be used for concurrency control during
updates.
""")
  ProfileVersion: float32;
}

// FIXME: (missing-docs) Add documentation
model FinalizeFileUploadsResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: FinalizeFileUploadsResponse_data;
}

// FIXME: (missing-docs) Add documentation
model FinalizeFileUploadsResponse_data {
  @doc("The entity id and type.")
  Entity?: EntityKey;

  @doc("Collection of metadata for the entity's files")
  Metadata?: GetFileMetadata;

  @doc("""
The current version of the profile, can be used for concurrency control during
updates.
""")
  ProfileVersion?: float32;
}

// FIXME: (missing-docs) Add documentation
model GetFileMetadata {
  @doc("""
Checksum value for the file, can be used to check if the file on the server has
changed.
""")
  Checksum?: string;

  @doc("Download URL where the file can be retrieved")
  DownloadUrl?: string;

  @doc("Name of the file")
  FileName?: string;

  @doc("Last UTC time the file was modified")
  LastModified: string;

  @doc("Storage service's reported byte count")
  Size: float32;
}

@doc("""
Returns URLs that may be used to download the files for a profile for a limited
length of time. Only returns files that have been successfully uploaded, files
that are still pending will either return the old value, if it exists, or
nothing.
""")
model GetFilesRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("The entity to perform this action on.")
  Entity: EntityKey;
}

// FIXME: (missing-docs) Add documentation
model GetFilesResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: GetFilesResponse_data;
}

// FIXME: (missing-docs) Add documentation
model GetFilesResponse_data {
  @doc("The entity id and type.")
  Entity?: EntityKey;

  @doc("Collection of metadata for the entity's files")
  Metadata?: GetFileMetadata;

  @doc("""
The current version of the profile, can be used for concurrency control during
updates.
""")
  ProfileVersion?: float32;
}

@doc("""
Returns URLs that may be used to upload the files for a profile 5 minutes.
After using the upload calls FinalizeFileUploads must be called to move the
file status from pending to live.
""")
model InitiateFileUploadsRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("The entity to perform this action on.")
  Entity: EntityKey;

  @doc("Names of the files to be set. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'")
  FileNames: string[];

  @doc("""
The expected version of the profile, if set and doesn't match the current
version of the profile the operation will not be performed.
""")
  ProfileVersion?: float32;
}

// FIXME: (missing-docs) Add documentation
model InitiateFileUploadsResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: InitiateFileUploadsResponse_data;
}

// FIXME: (missing-docs) Add documentation
model InitiateFileUploadsResponse_data {
  @doc("The entity id and type.")
  Entity?: EntityKey;

  @doc("""
The current version of the profile, can be used for concurrency control during
updates.
""")
  ProfileVersion?: float32;

  @doc("Collection of file names and upload urls")
  UploadDetails?: InitiateFileUploadMetadata[];
}

// FIXME: (missing-docs) Add documentation
model InitiateFileUploadMetadata {
  @doc("Name of the file.")
  FileName?: string;

  @doc("Location the data should be sent to via an HTTP PUT operation.")
  UploadUrl?: string;
}

@doc("Gets JSON objects from an entity profile and returns it. ")
model GetObjectsRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("The entity to perform this action on.")
  Entity: EntityKey;

  @doc("""
Determines whether the object will be returned as an escaped JSON string or as
a un-escaped JSON object. Default is JSON object.
""")
  EscapeObject?: boolean;
}

// FIXME: (missing-docs) Add documentation
model GetObjectsResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: GetObjectsResponse_data;
}

// FIXME: (missing-docs) Add documentation
model GetObjectsResponse_data {
  @doc("The entity id and type.")
  Entity?: EntityKey;

  @doc("Requested objects that the calling entity has access to")
  Objects?: ObjectResult;

  @doc("""
The current version of the profile, can be used for concurrency control during
updates.
""")
  ProfileVersion?: float32;
}

// FIXME: (missing-docs) Add documentation
model ObjectResult {
  @doc("Un-escaped JSON object, if EscapeObject false or default.")
  DataObject?: object;

  @doc("Escaped string JSON body of the object, if EscapeObject is true.")
  EscapedDataObject?: string;

  @doc("Name of the object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'")
  ObjectName?: string;
}

@doc("""
Sets JSON objects on the requested entity profile. May include a version number
to be used to perform optimistic concurrency operations during update. If the
current version differs from the version in the request the request will be
ignored. If no version is set on the request then the value will always be
updated if the values differ. Using the version value does not guarantee a
write though, ConcurrentEditError may still occur if multiple clients are
attempting to update the same profile. 
""")
model SetObjectsRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("The entity to perform this action on.")
  Entity: EntityKey;

  @doc("""
Optional field used for concurrency control. By specifying the previously
returned value of ProfileVersion from GetProfile API, you can ensure that the
object set will only be performed if the profile has not been updated by any
other clients since the version you last loaded.
""")
  ExpectedProfileVersion?: float32;

  @doc("Collection of objects to set on the profile.")
  Objects: SetObject[];
}

// FIXME: (missing-docs) Add documentation
model SetObject {
  @doc("""
Body of the object to be saved. If empty and DeleteObject is true object will
be deleted if it exists, or no operation will occur if it does not exist. Only
one of Object or EscapedDataObject fields may be used.
""")
  DataObject?: object;

  @doc("""
Flag to indicate that this object should be deleted. Both DataObject and
EscapedDataObject must not be set as well.
""")
  DeleteObject?: boolean;

  @doc("""
Body of the object to be saved as an escaped JSON string. If empty and
DeleteObject is true object will be deleted if it exists, or no operation will
occur if it does not exist. Only one of DataObject or EscapedDataObject fields
may be used.
""")
  EscapedDataObject?: string;

  @doc("Name of object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'.")
  ObjectName: string;
}

// FIXME: (missing-docs) Add documentation
model SetObjectsResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: SetObjectsResponse_data;
}

// FIXME: (missing-docs) Add documentation
model SetObjectsResponse_data {
  @doc("New version of the entity profile.")
  ProfileVersion?: float32;

  @doc("New version of the entity profile.")
  SetResults?: SetObjectInfo[];
}

// FIXME: (missing-docs) Add documentation
model SetObjectInfo {
  @doc("Name of the object")
  ObjectName?: string;

  @doc("Optional reason to explain why the operation was the result that it was.")
  OperationReason?: string;

  @doc("""
Indicates which operation was completed, either Created, Updated, Deleted or
None.
""")
  SetResult?: OperationTypes;
}

// FIXME: (missing-docs) Add documentation
model WriteEventsRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("Collection of events to write to PlayStream.")
  Events: EventContents[];
}

// FIXME: (missing-docs) Add documentation
model EventContents {
  @doc("""
The optional custom tags associated with the event (e.g. build number, external
trace identifiers, etc.). Before an event is written, this collection and the
base request custom tags will be merged, but not overriden. This enables the
caller to specify static tags and per event tags.
""")
  CustomTags?: object;

  @doc("""
Entity associated with the event. If null, the event will apply to the calling
entity.
""")
  Entity?: EntityKey;

  @doc("The namespace in which the event is defined. Allowed namespaces can vary by API.")
  EventNamespace: string;

  @doc("The name of this event.")
  Name: string;

  @doc("""
The original unique identifier associated with this event before it was posted
to PlayFab. The value might differ from the EventId value, which is assigned
when the event is received by the server.
""")
  OriginalId?: string;

  @doc("""
The time (in UTC) associated with this event when it occurred. If specified,
this value is stored in the OriginalTimestamp property of the PlayStream event.
""")
  OriginalTimestamp?: string;

  @doc("""
Arbitrary data associated with the event. Only one of Payload or PayloadJSON is
allowed.
""")
  Payload?: object;

  @doc("""
Arbitrary data associated with the event, represented as a JSON serialized
string. Only one of Payload or PayloadJSON is allowed.
""")
  PayloadJSON?: string;
}

// FIXME: (missing-docs) Add documentation
model WriteEventsResponse {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: WriteEventsResponse_data;
}

// FIXME: (missing-docs) Add documentation
model WriteEventsResponse_data {
  @doc("""
The unique identifiers assigned by the server to the events, in the same order
as the events in the request. Only returned if FlushToPlayStream option is
true.
""")
  AssignedEventIds?: string[];
}

// FIXME: (missing-docs) Add documentation
model LoginPlayerRequest {
  @doc("""
The optional custom tags associated with the request (e.g. build number,
external trace identifiers, etc.).
""")
  CustomTags?: object;

  @doc("""
Unique identifier for the title, found in the Settings > Game Properties
section of the PlayFab developer site when a title has been selected.
""")
  TitleId: string;
}

// FIXME: (missing-docs) Add documentation
model LoginPlayerResult {
  @doc("""
The HTTP status code. If X-ReportErrorAsSuccess header is set to true, the
service will return 200 and this will report the actual HTTP status code.
""")
  code?: int32;

  @doc("The HTTP status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: LoginPlayerResult_data;
}

// FIXME: (missing-docs) Add documentation
model LoginPlayerResult_data {
  @doc("""
Entity token for the title_player_account entity associated with the
master_player_account and title.
""")
  TitlePlayerAccountEntityToken?: EntityTokenResponse;
}

// FIXME: (missing-docs) Add documentation
model components·1844r51·responses·authenticateidentityresult·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: AuthenticateIdentityResult;
}

// FIXME: (missing-docs) Add documentation
model components·me0qjf·responses·getentitytokenresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: GetEntityTokenResponse;
}

// FIXME: (missing-docs) Add documentation
model components·1yvtk6i·responses·getlinkedplayeridentitiesresult·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: GetLinkedPlayerIdentitiesResult;
}

// FIXME: (missing-docs) Add documentation
model components·1fy2dsy·responses·unlinkplayeridentityresult·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: UnlinkPlayerIdentityResult;
}

// FIXME: (missing-docs) Add documentation
model components·18v6dkm·responses·abortfileuploadsresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: AbortFileUploadsResponse;
}

// FIXME: (missing-docs) Add documentation
model components·nl7v6y·responses·deletefilesresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: DeleteFilesResponse;
}

// FIXME: (missing-docs) Add documentation
model components·1szmkd8·responses·finalizefileuploadsresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: FinalizeFileUploadsResponse;
}

// FIXME: (missing-docs) Add documentation
model components·d2akhj·responses·getfilesresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: GetFilesResponse;
}

// FIXME: (missing-docs) Add documentation
model components·1a6kevj·responses·getobjectsresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: GetObjectsResponse;
}

// FIXME: (missing-docs) Add documentation
model components·1aq1w36·responses·initiatefileuploadsresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: InitiateFileUploadsResponse;
}

// FIXME: (missing-docs) Add documentation
model components·vb2pt1·responses·setobjectsresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: SetObjectsResponse;
}

// FIXME: (missing-docs) Add documentation
model components·1x7gyin·responses·writeeventsresponse·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: WriteEventsResponse;
}

// FIXME: (missing-docs) Add documentation
model components·1ipme60·responses·loginplayerresult·content·application_json·schema {
  @doc("""
The Http status code. If X-ReportErrorAsSuccess header is set to true, this
will report the actual http error code.
""")
  code?: int32;

  @doc("The Http status code as a string.")
  status?: string;
  // FIXME: (missing-docs) Add documentation
  data?: LoginPlayerResult;
}